{"id": "1b1e8253-e919-4620-bff9-1530e045bacf", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.uniform(size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                \n                if fitness(swarm[i]) < fitness(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                if fitness(pbest[i]) < fitness(gbest):\n                    gbest = pbest[i].copy()\n\n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel Metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization in a high-dimensional search space.", "configspace": "", "generation": 0, "fitness": 0.2082391496796164, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6794273832072111, 0.675761046202501, 0.7182844657645797, 0.6137799809147662, 0.18671117923050973, 0.6564266362225435, 0.6296215187517648, 0.41277981262042485, 0.7027496076450171, 0.08409121890066185, 0.04534498902507944, 9.999999999998899e-05, 0.057881338517517866, 0.047244544963022106, 0.23754355269527072, 0.06374402477969743, 0.1973464104128987, 0.09042622914676235, 0.0680584976594053, 0.09166651617551524, 0.0492014796419733, 0.06299146483509843, 0.09440745561235309, 0.06921282761451553, 0.09164372003294408, 0.11029915612397567, 0.07802987526790606, 0.09320517130831507, 0.06567448348823346, 0.07216980485066904, 0.07974530342723263, 0.0242790496364913, 0.07913324506424202, 0.08205047133343557, 0.04063484891177471, 0.10207070072181801, 0.974135377292837, 0.9937651520024462, 0.9908465513798991, 0.09984593628286986, 0.9733958257925414, 0.9232464947514669, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.22843756913994206, 0.22483671359694357, 0.23910718381619567, 0.24719391897899579, 0.1482774544517137, 0.14608373528771246, 0.3199738459250552, 0.2501565013225826, 0.08751433777735551, 0.21483111040056158, 0.1632982317153192, 0.16196935124235756, 0.2083927841193356, 0.3295724089149348, 0.19027109419584498, 0.1246122751400548, 0.1749676787077009, 0.17751838041566903, 0.17364641975734507, 0.12795827671719995, 0.1973401165467783, 0.12726282564492342, 0.09090156319994946, 9.999999999998899e-05, 0.2101781876965042, 0.0807046688839157, 0.19156836683752532, 0.14912873552911765, 0.02020608500943255, 0.12586733528138216, 0.22250607325587357, 0.1240350348446958, 0.21219312410390911, 0.08594687197368345, 0.16652669904660888, 0.12571652784351994, 9.999999999998899e-05, 9.999999999998899e-05, 0.04278029322647525, 0.0025404008197082995, 9.999999999998899e-05, 0.0019368810727528052, 0.05244021188258208, 0.006160385327051321, 0.08112506857893909, 0.10686297881580831, 0.10324893365125642, 0.09819379567322306, 0.10902402054832638, 0.002077373230206847, 0.06905555853667611, 0.056744879367167766, 0.08774591454125946, 0.1063485214835358, 0.0356478456255116, 0.06121097062827863, 0.13426428875773055, 0.13159202675078963, 0.10124561324036585, 0.0881994427359617, 0.1664624771709472, 0.050287555673290796, 0.054665355283770034, 0.1769265279521447, 9.999999999998899e-05, 0.21129906460179515, 0.005412403402182631, 0.004827672433885155, 0.11368380107187004, 0.1666462765481056, 0.15279196533357686, 0.07743301798254854, 0.5162755731299817, 0.4899811606641723, 0.5422018182354847, 0.47905098259208867, 0.48112106475641125, 0.2062908873482051, 0.44701978815343624, 0.40987912427223794, 0.46989126990236485, 0.054709587010188465, 0.07307292026552281, 0.057311163139233234, 0.08666592194581679, 0.07220214791413859, 0.08633230448661777, 0.07899941310085012, 0.06687629008475648, 0.09046760388719943, 0.18459574956595137, 0.1605580982722311, 0.1964394741449269, 0.15690980200517857, 0.17557287007629307, 0.16056198650377174, 0.23992475364636268, 0.13480657812100072, 0.20254275840450653, 0.27878000852881357, 0.25461004905880646, 0.2874915392770716, 0.23426346914855956, 0.20959661224553527, 0.19968728013528125, 0.32356970040850297, 0.2897403202451857, 0.18614816066157058, 0.15170661561897125, 0.14704572634754476, 0.16832481668750965, 0.2093666026805473, 0.17937204205064705, 0.16455507823207682, 0.18147756314711583, 0.25509087139277187, 0.20814984367934108, 0.20850367379791734, 0.16700457019688653, 0.16986326813366026, 0.1807915879849875, 0.1798357117388436, 0.18141440302794432, 0.1672016146312122, 0.204010989933622, 0.17872798832861303, 0.17281766438129686, 0.15102894602953243, 0.18755961554741707, 0.18375039323496023, 0.16645711058791401, 0.19236494059100673, 0.19956347308411582, 0.16435478346624155, 0.21748588525761292, 0.20042582224828742, 0.1246090549128478, 0.1522264034616042, 0.829484521806318, 0.1975650930860251, 0.19895294980323275, 0.09933484502122758, 0.16905274232053613, 0.7238650458546044, 0.6320228964460148, 0.15605600328289837, 0.10947770943611213, 0.1956035297428309, 0.1660194520445888, 0.20601139201481988, 0.10411994608862829, 0.10279453030583374, 0.6658686298761626, 0.1779368737545285, 0.17693263268935422, 0.20088990700818454, 0.17904030596538212, 0.18703180374025696, 0.16631365098594741, 0.17975999544852106, 0.1770265988740657, 0.19756035050121157, 0.06955947701322673, 0.07113195307745335, 0.05651699141118793, 0.06669387180832254, 0.07102141663944983, 0.07633415038733815, 0.07920703639868465, 0.1088150827907588, 0.06935499871934825]}, "mutation_prompt": null}
{"id": "de4403a7-7213-4dc0-bbfb-59ea28d55bed", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            r1, r2 = np.random.uniform(size=(2, self.num_particles, self.dim))\n            velocity = 0.5 * velocity + 2 * r1 * (pbest - swarm) + 2 * r2 * (gbest - swarm)\n            swarm += velocity\n            np.clip(swarm, self.lower_bound, self.upper_bound, out=swarm)\n            \n            updated = fitness(swarm) < fitness(pbest)\n            pbest[updated] = swarm[updated]\n            updated = fitness(pbest) < fitness(gbest)\n            gbest = np.where(updated, pbest, gbest)\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhancing the PSO_DE_Optimizer algorithm by vectorizing operations to improve computational efficiency.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'<' not supported between instances of 'list' and 'float'\").", "error": "TypeError(\"'<' not supported between instances of 'list' and 'float'\")", "parent_id": "1b1e8253-e919-4620-bff9-1530e045bacf", "metadata": {}, "mutation_prompt": null}
{"id": "d1f8faa9-5adc-473d-9dc0-985b6572e63e", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.uniform(size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                \n                if fitness(swarm[i]) < fitness(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                if fitness(pbest[i]) < fitness(gbest):\n                    gbest = pbest[i].copy()\n\n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel Metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization in a high-dimensional search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b1e8253-e919-4620-bff9-1530e045bacf", "metadata": {"aucs": [0.6794273832072111, 0.675761046202501, 0.7182844657645797, 0.6137799809147662, 0.18671117923050973, 0.6564266362225435, 0.6296215187517648, 0.41277981262042485, 0.7027496076450171, 0.08409121890066185, 0.04534498902507944, 9.999999999998899e-05, 0.057881338517517866, 0.047244544963022106, 0.23754355269527072, 0.06374402477969743, 0.1973464104128987, 0.09042622914676235, 0.0680584976594053, 0.09166651617551524, 0.0492014796419733, 0.06299146483509843, 0.09440745561235309, 0.06921282761451553, 0.09164372003294408, 0.11029915612397567, 0.07802987526790606, 0.09320517130831507, 0.06567448348823346, 0.07216980485066904, 0.07974530342723263, 0.0242790496364913, 0.07913324506424202, 0.08205047133343557, 0.04063484891177471, 0.10207070072181801, 0.974135377292837, 0.9937651520024462, 0.9908465513798991, 0.09984593628286986, 0.9733958257925414, 0.9232464947514669, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.22843756913994206, 0.22483671359694357, 0.23910718381619567, 0.24719391897899579, 0.1482774544517137, 0.14608373528771246, 0.3199738459250552, 0.2501565013225826, 0.08751433777735551, 0.21483111040056158, 0.1632982317153192, 0.16196935124235756, 0.2083927841193356, 0.3295724089149348, 0.19027109419584498, 0.1246122751400548, 0.1749676787077009, 0.17751838041566903, 0.17364641975734507, 0.12795827671719995, 0.1973401165467783, 0.12726282564492342, 0.09090156319994946, 9.999999999998899e-05, 0.2101781876965042, 0.0807046688839157, 0.19156836683752532, 0.14912873552911765, 0.02020608500943255, 0.12586733528138216, 0.22250607325587357, 0.1240350348446958, 0.21219312410390911, 0.08594687197368345, 0.16652669904660888, 0.12571652784351994, 9.999999999998899e-05, 9.999999999998899e-05, 0.04278029322647525, 0.0025404008197082995, 9.999999999998899e-05, 0.0019368810727528052, 0.05244021188258208, 0.006160385327051321, 0.08112506857893909, 0.10686297881580831, 0.10324893365125642, 0.09819379567322306, 0.10902402054832638, 0.002077373230206847, 0.06905555853667611, 0.056744879367167766, 0.08774591454125946, 0.1063485214835358, 0.0356478456255116, 0.06121097062827863, 0.13426428875773055, 0.13159202675078963, 0.10124561324036585, 0.0881994427359617, 0.1664624771709472, 0.050287555673290796, 0.054665355283770034, 0.1769265279521447, 9.999999999998899e-05, 0.21129906460179515, 0.005412403402182631, 0.004827672433885155, 0.11368380107187004, 0.1666462765481056, 0.15279196533357686, 0.07743301798254854, 0.5162755731299817, 0.4899811606641723, 0.5422018182354847, 0.47905098259208867, 0.48112106475641125, 0.2062908873482051, 0.44701978815343624, 0.40987912427223794, 0.46989126990236485, 0.054709587010188465, 0.07307292026552281, 0.057311163139233234, 0.08666592194581679, 0.07220214791413859, 0.08633230448661777, 0.07899941310085012, 0.06687629008475648, 0.09046760388719943, 0.18459574956595137, 0.1605580982722311, 0.1964394741449269, 0.15690980200517857, 0.17557287007629307, 0.16056198650377174, 0.23992475364636268, 0.13480657812100072, 0.20254275840450653, 0.27878000852881357, 0.25461004905880646, 0.2874915392770716, 0.23426346914855956, 0.20959661224553527, 0.19968728013528125, 0.32356970040850297, 0.2897403202451857, 0.18614816066157058, 0.15170661561897125, 0.14704572634754476, 0.16832481668750965, 0.2093666026805473, 0.17937204205064705, 0.16455507823207682, 0.18147756314711583, 0.25509087139277187, 0.20814984367934108, 0.20850367379791734, 0.16700457019688653, 0.16986326813366026, 0.1807915879849875, 0.1798357117388436, 0.18141440302794432, 0.1672016146312122, 0.204010989933622, 0.17872798832861303, 0.17281766438129686, 0.15102894602953243, 0.18755961554741707, 0.18375039323496023, 0.16645711058791401, 0.19236494059100673, 0.19956347308411582, 0.16435478346624155, 0.21748588525761292, 0.20042582224828742, 0.1246090549128478, 0.1522264034616042, 0.829484521806318, 0.1975650930860251, 0.19895294980323275, 0.09933484502122758, 0.16905274232053613, 0.7238650458546044, 0.6320228964460148, 0.15605600328289837, 0.10947770943611213, 0.1956035297428309, 0.1660194520445888, 0.20601139201481988, 0.10411994608862829, 0.10279453030583374, 0.6658686298761626, 0.1779368737545285, 0.17693263268935422, 0.20088990700818454, 0.17904030596538212, 0.18703180374025696, 0.16631365098594741, 0.17975999544852106, 0.1770265988740657, 0.19756035050121157, 0.06955947701322673, 0.07113195307745335, 0.05651699141118793, 0.06669387180832254, 0.07102141663944983, 0.07633415038733815, 0.07920703639868465, 0.1088150827907588, 0.06935499871934825]}, "mutation_prompt": null}
{"id": "254254a0-708f-43bc-9561-dff6c240a8a3", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.uniform(size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                \n                if fitness(swarm[i]) < fitness(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                if fitness(pbest[i]) < fitness(gbest):\n                    gbest = pbest[i].copy()\n\n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel Metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization in a high-dimensional search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b1e8253-e919-4620-bff9-1530e045bacf", "metadata": {"aucs": [0.6794273832072111, 0.675761046202501, 0.7182844657645797, 0.6137799809147662, 0.18671117923050973, 0.6564266362225435, 0.6296215187517648, 0.41277981262042485, 0.7027496076450171, 0.08409121890066185, 0.04534498902507944, 9.999999999998899e-05, 0.057881338517517866, 0.047244544963022106, 0.23754355269527072, 0.06374402477969743, 0.1973464104128987, 0.09042622914676235, 0.0680584976594053, 0.09166651617551524, 0.0492014796419733, 0.06299146483509843, 0.09440745561235309, 0.06921282761451553, 0.09164372003294408, 0.11029915612397567, 0.07802987526790606, 0.09320517130831507, 0.06567448348823346, 0.07216980485066904, 0.07974530342723263, 0.0242790496364913, 0.07913324506424202, 0.08205047133343557, 0.04063484891177471, 0.10207070072181801, 0.974135377292837, 0.9937651520024462, 0.9908465513798991, 0.09984593628286986, 0.9733958257925414, 0.9232464947514669, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.22843756913994206, 0.22483671359694357, 0.23910718381619567, 0.24719391897899579, 0.1482774544517137, 0.14608373528771246, 0.3199738459250552, 0.2501565013225826, 0.08751433777735551, 0.21483111040056158, 0.1632982317153192, 0.16196935124235756, 0.2083927841193356, 0.3295724089149348, 0.19027109419584498, 0.1246122751400548, 0.1749676787077009, 0.17751838041566903, 0.17364641975734507, 0.12795827671719995, 0.1973401165467783, 0.12726282564492342, 0.09090156319994946, 9.999999999998899e-05, 0.2101781876965042, 0.0807046688839157, 0.19156836683752532, 0.14912873552911765, 0.02020608500943255, 0.12586733528138216, 0.22250607325587357, 0.1240350348446958, 0.21219312410390911, 0.08594687197368345, 0.16652669904660888, 0.12571652784351994, 9.999999999998899e-05, 9.999999999998899e-05, 0.04278029322647525, 0.0025404008197082995, 9.999999999998899e-05, 0.0019368810727528052, 0.05244021188258208, 0.006160385327051321, 0.08112506857893909, 0.10686297881580831, 0.10324893365125642, 0.09819379567322306, 0.10902402054832638, 0.002077373230206847, 0.06905555853667611, 0.056744879367167766, 0.08774591454125946, 0.1063485214835358, 0.0356478456255116, 0.06121097062827863, 0.13426428875773055, 0.13159202675078963, 0.10124561324036585, 0.0881994427359617, 0.1664624771709472, 0.050287555673290796, 0.054665355283770034, 0.1769265279521447, 9.999999999998899e-05, 0.21129906460179515, 0.005412403402182631, 0.004827672433885155, 0.11368380107187004, 0.1666462765481056, 0.15279196533357686, 0.07743301798254854, 0.5162755731299817, 0.4899811606641723, 0.5422018182354847, 0.47905098259208867, 0.48112106475641125, 0.2062908873482051, 0.44701978815343624, 0.40987912427223794, 0.46989126990236485, 0.054709587010188465, 0.07307292026552281, 0.057311163139233234, 0.08666592194581679, 0.07220214791413859, 0.08633230448661777, 0.07899941310085012, 0.06687629008475648, 0.09046760388719943, 0.18459574956595137, 0.1605580982722311, 0.1964394741449269, 0.15690980200517857, 0.17557287007629307, 0.16056198650377174, 0.23992475364636268, 0.13480657812100072, 0.20254275840450653, 0.27878000852881357, 0.25461004905880646, 0.2874915392770716, 0.23426346914855956, 0.20959661224553527, 0.19968728013528125, 0.32356970040850297, 0.2897403202451857, 0.18614816066157058, 0.15170661561897125, 0.14704572634754476, 0.16832481668750965, 0.2093666026805473, 0.17937204205064705, 0.16455507823207682, 0.18147756314711583, 0.25509087139277187, 0.20814984367934108, 0.20850367379791734, 0.16700457019688653, 0.16986326813366026, 0.1807915879849875, 0.1798357117388436, 0.18141440302794432, 0.1672016146312122, 0.204010989933622, 0.17872798832861303, 0.17281766438129686, 0.15102894602953243, 0.18755961554741707, 0.18375039323496023, 0.16645711058791401, 0.19236494059100673, 0.19956347308411582, 0.16435478346624155, 0.21748588525761292, 0.20042582224828742, 0.1246090549128478, 0.1522264034616042, 0.829484521806318, 0.1975650930860251, 0.19895294980323275, 0.09933484502122758, 0.16905274232053613, 0.7238650458546044, 0.6320228964460148, 0.15605600328289837, 0.10947770943611213, 0.1956035297428309, 0.1660194520445888, 0.20601139201481988, 0.10411994608862829, 0.10279453030583374, 0.6658686298761626, 0.1779368737545285, 0.17693263268935422, 0.20088990700818454, 0.17904030596538212, 0.18703180374025696, 0.16631365098594741, 0.17975999544852106, 0.1770265988740657, 0.19756035050121157, 0.06955947701322673, 0.07113195307745335, 0.05651699141118793, 0.06669387180832254, 0.07102141663944983, 0.07633415038733815, 0.07920703639868465, 0.1088150827907588, 0.06935499871934825]}, "mutation_prompt": null}
{"id": "de8a84d5-681d-4e12-b250-79f286d072a2", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.uniform(size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                \n                if fitness(swarm[i]) < fitness(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                if fitness(pbest[i]) < fitness(gbest):\n                    gbest = pbest[i].copy()\n\n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel Metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization in a high-dimensional search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b1e8253-e919-4620-bff9-1530e045bacf", "metadata": {"aucs": [0.6794273832072111, 0.675761046202501, 0.7182844657645797, 0.6137799809147662, 0.18671117923050973, 0.6564266362225435, 0.6296215187517648, 0.41277981262042485, 0.7027496076450171, 0.08409121890066185, 0.04534498902507944, 9.999999999998899e-05, 0.057881338517517866, 0.047244544963022106, 0.23754355269527072, 0.06374402477969743, 0.1973464104128987, 0.09042622914676235, 0.0680584976594053, 0.09166651617551524, 0.0492014796419733, 0.06299146483509843, 0.09440745561235309, 0.06921282761451553, 0.09164372003294408, 0.11029915612397567, 0.07802987526790606, 0.09320517130831507, 0.06567448348823346, 0.07216980485066904, 0.07974530342723263, 0.0242790496364913, 0.07913324506424202, 0.08205047133343557, 0.04063484891177471, 0.10207070072181801, 0.974135377292837, 0.9937651520024462, 0.9908465513798991, 0.09984593628286986, 0.9733958257925414, 0.9232464947514669, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.22843756913994206, 0.22483671359694357, 0.23910718381619567, 0.24719391897899579, 0.1482774544517137, 0.14608373528771246, 0.3199738459250552, 0.2501565013225826, 0.08751433777735551, 0.21483111040056158, 0.1632982317153192, 0.16196935124235756, 0.2083927841193356, 0.3295724089149348, 0.19027109419584498, 0.1246122751400548, 0.1749676787077009, 0.17751838041566903, 0.17364641975734507, 0.12795827671719995, 0.1973401165467783, 0.12726282564492342, 0.09090156319994946, 9.999999999998899e-05, 0.2101781876965042, 0.0807046688839157, 0.19156836683752532, 0.14912873552911765, 0.02020608500943255, 0.12586733528138216, 0.22250607325587357, 0.1240350348446958, 0.21219312410390911, 0.08594687197368345, 0.16652669904660888, 0.12571652784351994, 9.999999999998899e-05, 9.999999999998899e-05, 0.04278029322647525, 0.0025404008197082995, 9.999999999998899e-05, 0.0019368810727528052, 0.05244021188258208, 0.006160385327051321, 0.08112506857893909, 0.10686297881580831, 0.10324893365125642, 0.09819379567322306, 0.10902402054832638, 0.002077373230206847, 0.06905555853667611, 0.056744879367167766, 0.08774591454125946, 0.1063485214835358, 0.0356478456255116, 0.06121097062827863, 0.13426428875773055, 0.13159202675078963, 0.10124561324036585, 0.0881994427359617, 0.1664624771709472, 0.050287555673290796, 0.054665355283770034, 0.1769265279521447, 9.999999999998899e-05, 0.21129906460179515, 0.005412403402182631, 0.004827672433885155, 0.11368380107187004, 0.1666462765481056, 0.15279196533357686, 0.07743301798254854, 0.5162755731299817, 0.4899811606641723, 0.5422018182354847, 0.47905098259208867, 0.48112106475641125, 0.2062908873482051, 0.44701978815343624, 0.40987912427223794, 0.46989126990236485, 0.054709587010188465, 0.07307292026552281, 0.057311163139233234, 0.08666592194581679, 0.07220214791413859, 0.08633230448661777, 0.07899941310085012, 0.06687629008475648, 0.09046760388719943, 0.18459574956595137, 0.1605580982722311, 0.1964394741449269, 0.15690980200517857, 0.17557287007629307, 0.16056198650377174, 0.23992475364636268, 0.13480657812100072, 0.20254275840450653, 0.27878000852881357, 0.25461004905880646, 0.2874915392770716, 0.23426346914855956, 0.20959661224553527, 0.19968728013528125, 0.32356970040850297, 0.2897403202451857, 0.18614816066157058, 0.15170661561897125, 0.14704572634754476, 0.16832481668750965, 0.2093666026805473, 0.17937204205064705, 0.16455507823207682, 0.18147756314711583, 0.25509087139277187, 0.20814984367934108, 0.20850367379791734, 0.16700457019688653, 0.16986326813366026, 0.1807915879849875, 0.1798357117388436, 0.18141440302794432, 0.1672016146312122, 0.204010989933622, 0.17872798832861303, 0.17281766438129686, 0.15102894602953243, 0.18755961554741707, 0.18375039323496023, 0.16645711058791401, 0.19236494059100673, 0.19956347308411582, 0.16435478346624155, 0.21748588525761292, 0.20042582224828742, 0.1246090549128478, 0.1522264034616042, 0.829484521806318, 0.1975650930860251, 0.19895294980323275, 0.09933484502122758, 0.16905274232053613, 0.7238650458546044, 0.6320228964460148, 0.15605600328289837, 0.10947770943611213, 0.1956035297428309, 0.1660194520445888, 0.20601139201481988, 0.10411994608862829, 0.10279453030583374, 0.6658686298761626, 0.1779368737545285, 0.17693263268935422, 0.20088990700818454, 0.17904030596538212, 0.18703180374025696, 0.16631365098594741, 0.17975999544852106, 0.1770265988740657, 0.19756035050121157, 0.06955947701322673, 0.07113195307745335, 0.05651699141118793, 0.06669387180832254, 0.07102141663944983, 0.07633415038733815, 0.07920703639868465, 0.1088150827907588, 0.06935499871934825]}, "mutation_prompt": null}
{"id": "7fb6465b-eedf-4652-9c78-41d46885da7f", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.uniform(size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                \n                if fitness(swarm[i]) < fitness(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                if fitness(pbest[i]) < fitness(gbest):\n                    gbest = pbest[i].copy()\n\n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel Metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization in a high-dimensional search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b1e8253-e919-4620-bff9-1530e045bacf", "metadata": {"aucs": [0.6794273832072111, 0.675761046202501, 0.7182844657645797, 0.6137799809147662, 0.18671117923050973, 0.6564266362225435, 0.6296215187517648, 0.41277981262042485, 0.7027496076450171, 0.08409121890066185, 0.04534498902507944, 9.999999999998899e-05, 0.057881338517517866, 0.047244544963022106, 0.23754355269527072, 0.06374402477969743, 0.1973464104128987, 0.09042622914676235, 0.0680584976594053, 0.09166651617551524, 0.0492014796419733, 0.06299146483509843, 0.09440745561235309, 0.06921282761451553, 0.09164372003294408, 0.11029915612397567, 0.07802987526790606, 0.09320517130831507, 0.06567448348823346, 0.07216980485066904, 0.07974530342723263, 0.0242790496364913, 0.07913324506424202, 0.08205047133343557, 0.04063484891177471, 0.10207070072181801, 0.974135377292837, 0.9937651520024462, 0.9908465513798991, 0.09984593628286986, 0.9733958257925414, 0.9232464947514669, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.22843756913994206, 0.22483671359694357, 0.23910718381619567, 0.24719391897899579, 0.1482774544517137, 0.14608373528771246, 0.3199738459250552, 0.2501565013225826, 0.08751433777735551, 0.21483111040056158, 0.1632982317153192, 0.16196935124235756, 0.2083927841193356, 0.3295724089149348, 0.19027109419584498, 0.1246122751400548, 0.1749676787077009, 0.17751838041566903, 0.17364641975734507, 0.12795827671719995, 0.1973401165467783, 0.12726282564492342, 0.09090156319994946, 9.999999999998899e-05, 0.2101781876965042, 0.0807046688839157, 0.19156836683752532, 0.14912873552911765, 0.02020608500943255, 0.12586733528138216, 0.22250607325587357, 0.1240350348446958, 0.21219312410390911, 0.08594687197368345, 0.16652669904660888, 0.12571652784351994, 9.999999999998899e-05, 9.999999999998899e-05, 0.04278029322647525, 0.0025404008197082995, 9.999999999998899e-05, 0.0019368810727528052, 0.05244021188258208, 0.006160385327051321, 0.08112506857893909, 0.10686297881580831, 0.10324893365125642, 0.09819379567322306, 0.10902402054832638, 0.002077373230206847, 0.06905555853667611, 0.056744879367167766, 0.08774591454125946, 0.1063485214835358, 0.0356478456255116, 0.06121097062827863, 0.13426428875773055, 0.13159202675078963, 0.10124561324036585, 0.0881994427359617, 0.1664624771709472, 0.050287555673290796, 0.054665355283770034, 0.1769265279521447, 9.999999999998899e-05, 0.21129906460179515, 0.005412403402182631, 0.004827672433885155, 0.11368380107187004, 0.1666462765481056, 0.15279196533357686, 0.07743301798254854, 0.5162755731299817, 0.4899811606641723, 0.5422018182354847, 0.47905098259208867, 0.48112106475641125, 0.2062908873482051, 0.44701978815343624, 0.40987912427223794, 0.46989126990236485, 0.054709587010188465, 0.07307292026552281, 0.057311163139233234, 0.08666592194581679, 0.07220214791413859, 0.08633230448661777, 0.07899941310085012, 0.06687629008475648, 0.09046760388719943, 0.18459574956595137, 0.1605580982722311, 0.1964394741449269, 0.15690980200517857, 0.17557287007629307, 0.16056198650377174, 0.23992475364636268, 0.13480657812100072, 0.20254275840450653, 0.27878000852881357, 0.25461004905880646, 0.2874915392770716, 0.23426346914855956, 0.20959661224553527, 0.19968728013528125, 0.32356970040850297, 0.2897403202451857, 0.18614816066157058, 0.15170661561897125, 0.14704572634754476, 0.16832481668750965, 0.2093666026805473, 0.17937204205064705, 0.16455507823207682, 0.18147756314711583, 0.25509087139277187, 0.20814984367934108, 0.20850367379791734, 0.16700457019688653, 0.16986326813366026, 0.1807915879849875, 0.1798357117388436, 0.18141440302794432, 0.1672016146312122, 0.204010989933622, 0.17872798832861303, 0.17281766438129686, 0.15102894602953243, 0.18755961554741707, 0.18375039323496023, 0.16645711058791401, 0.19236494059100673, 0.19956347308411582, 0.16435478346624155, 0.21748588525761292, 0.20042582224828742, 0.1246090549128478, 0.1522264034616042, 0.829484521806318, 0.1975650930860251, 0.19895294980323275, 0.09933484502122758, 0.16905274232053613, 0.7238650458546044, 0.6320228964460148, 0.15605600328289837, 0.10947770943611213, 0.1956035297428309, 0.1660194520445888, 0.20601139201481988, 0.10411994608862829, 0.10279453030583374, 0.6658686298761626, 0.1779368737545285, 0.17693263268935422, 0.20088990700818454, 0.17904030596538212, 0.18703180374025696, 0.16631365098594741, 0.17975999544852106, 0.1770265988740657, 0.19756035050121157, 0.06955947701322673, 0.07113195307745335, 0.05651699141118793, 0.06669387180832254, 0.07102141663944983, 0.07633415038733815, 0.07920703639868465, 0.1088150827907588, 0.06935499871934825]}, "mutation_prompt": null}
{"id": "b0762b4f-3c4d-42ab-813f-507080c85d82", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.uniform(size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                \n                if fitness(swarm[i]) < fitness(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                if fitness(pbest[i]) < fitness(gbest):\n                    gbest = pbest[i].copy()\n\n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel Metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization in a high-dimensional search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b1e8253-e919-4620-bff9-1530e045bacf", "metadata": {"aucs": [0.6794273832072111, 0.675761046202501, 0.7182844657645797, 0.6137799809147662, 0.18671117923050973, 0.6564266362225435, 0.6296215187517648, 0.41277981262042485, 0.7027496076450171, 0.08409121890066185, 0.04534498902507944, 9.999999999998899e-05, 0.057881338517517866, 0.047244544963022106, 0.23754355269527072, 0.06374402477969743, 0.1973464104128987, 0.09042622914676235, 0.0680584976594053, 0.09166651617551524, 0.0492014796419733, 0.06299146483509843, 0.09440745561235309, 0.06921282761451553, 0.09164372003294408, 0.11029915612397567, 0.07802987526790606, 0.09320517130831507, 0.06567448348823346, 0.07216980485066904, 0.07974530342723263, 0.0242790496364913, 0.07913324506424202, 0.08205047133343557, 0.04063484891177471, 0.10207070072181801, 0.974135377292837, 0.9937651520024462, 0.9908465513798991, 0.09984593628286986, 0.9733958257925414, 0.9232464947514669, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.22843756913994206, 0.22483671359694357, 0.23910718381619567, 0.24719391897899579, 0.1482774544517137, 0.14608373528771246, 0.3199738459250552, 0.2501565013225826, 0.08751433777735551, 0.21483111040056158, 0.1632982317153192, 0.16196935124235756, 0.2083927841193356, 0.3295724089149348, 0.19027109419584498, 0.1246122751400548, 0.1749676787077009, 0.17751838041566903, 0.17364641975734507, 0.12795827671719995, 0.1973401165467783, 0.12726282564492342, 0.09090156319994946, 9.999999999998899e-05, 0.2101781876965042, 0.0807046688839157, 0.19156836683752532, 0.14912873552911765, 0.02020608500943255, 0.12586733528138216, 0.22250607325587357, 0.1240350348446958, 0.21219312410390911, 0.08594687197368345, 0.16652669904660888, 0.12571652784351994, 9.999999999998899e-05, 9.999999999998899e-05, 0.04278029322647525, 0.0025404008197082995, 9.999999999998899e-05, 0.0019368810727528052, 0.05244021188258208, 0.006160385327051321, 0.08112506857893909, 0.10686297881580831, 0.10324893365125642, 0.09819379567322306, 0.10902402054832638, 0.002077373230206847, 0.06905555853667611, 0.056744879367167766, 0.08774591454125946, 0.1063485214835358, 0.0356478456255116, 0.06121097062827863, 0.13426428875773055, 0.13159202675078963, 0.10124561324036585, 0.0881994427359617, 0.1664624771709472, 0.050287555673290796, 0.054665355283770034, 0.1769265279521447, 9.999999999998899e-05, 0.21129906460179515, 0.005412403402182631, 0.004827672433885155, 0.11368380107187004, 0.1666462765481056, 0.15279196533357686, 0.07743301798254854, 0.5162755731299817, 0.4899811606641723, 0.5422018182354847, 0.47905098259208867, 0.48112106475641125, 0.2062908873482051, 0.44701978815343624, 0.40987912427223794, 0.46989126990236485, 0.054709587010188465, 0.07307292026552281, 0.057311163139233234, 0.08666592194581679, 0.07220214791413859, 0.08633230448661777, 0.07899941310085012, 0.06687629008475648, 0.09046760388719943, 0.18459574956595137, 0.1605580982722311, 0.1964394741449269, 0.15690980200517857, 0.17557287007629307, 0.16056198650377174, 0.23992475364636268, 0.13480657812100072, 0.20254275840450653, 0.27878000852881357, 0.25461004905880646, 0.2874915392770716, 0.23426346914855956, 0.20959661224553527, 0.19968728013528125, 0.32356970040850297, 0.2897403202451857, 0.18614816066157058, 0.15170661561897125, 0.14704572634754476, 0.16832481668750965, 0.2093666026805473, 0.17937204205064705, 0.16455507823207682, 0.18147756314711583, 0.25509087139277187, 0.20814984367934108, 0.20850367379791734, 0.16700457019688653, 0.16986326813366026, 0.1807915879849875, 0.1798357117388436, 0.18141440302794432, 0.1672016146312122, 0.204010989933622, 0.17872798832861303, 0.17281766438129686, 0.15102894602953243, 0.18755961554741707, 0.18375039323496023, 0.16645711058791401, 0.19236494059100673, 0.19956347308411582, 0.16435478346624155, 0.21748588525761292, 0.20042582224828742, 0.1246090549128478, 0.1522264034616042, 0.829484521806318, 0.1975650930860251, 0.19895294980323275, 0.09933484502122758, 0.16905274232053613, 0.7238650458546044, 0.6320228964460148, 0.15605600328289837, 0.10947770943611213, 0.1956035297428309, 0.1660194520445888, 0.20601139201481988, 0.10411994608862829, 0.10279453030583374, 0.6658686298761626, 0.1779368737545285, 0.17693263268935422, 0.20088990700818454, 0.17904030596538212, 0.18703180374025696, 0.16631365098594741, 0.17975999544852106, 0.1770265988740657, 0.19756035050121157, 0.06955947701322673, 0.07113195307745335, 0.05651699141118793, 0.06669387180832254, 0.07102141663944983, 0.07633415038733815, 0.07920703639868465, 0.1088150827907588, 0.06935499871934825]}, "mutation_prompt": null}
{"id": "57af7f6d-de32-4bdd-8e22-61383f186838", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.uniform(size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                \n                if fitness(swarm[i]) < fitness(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                if fitness(pbest[i]) < fitness(gbest):\n                    gbest = pbest[i].copy()\n\n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel Metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization in a high-dimensional search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b1e8253-e919-4620-bff9-1530e045bacf", "metadata": {"aucs": [0.6794273832072111, 0.675761046202501, 0.7182844657645797, 0.6137799809147662, 0.18671117923050973, 0.6564266362225435, 0.6296215187517648, 0.41277981262042485, 0.7027496076450171, 0.08409121890066185, 0.04534498902507944, 9.999999999998899e-05, 0.057881338517517866, 0.047244544963022106, 0.23754355269527072, 0.06374402477969743, 0.1973464104128987, 0.09042622914676235, 0.0680584976594053, 0.09166651617551524, 0.0492014796419733, 0.06299146483509843, 0.09440745561235309, 0.06921282761451553, 0.09164372003294408, 0.11029915612397567, 0.07802987526790606, 0.09320517130831507, 0.06567448348823346, 0.07216980485066904, 0.07974530342723263, 0.0242790496364913, 0.07913324506424202, 0.08205047133343557, 0.04063484891177471, 0.10207070072181801, 0.974135377292837, 0.9937651520024462, 0.9908465513798991, 0.09984593628286986, 0.9733958257925414, 0.9232464947514669, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.22843756913994206, 0.22483671359694357, 0.23910718381619567, 0.24719391897899579, 0.1482774544517137, 0.14608373528771246, 0.3199738459250552, 0.2501565013225826, 0.08751433777735551, 0.21483111040056158, 0.1632982317153192, 0.16196935124235756, 0.2083927841193356, 0.3295724089149348, 0.19027109419584498, 0.1246122751400548, 0.1749676787077009, 0.17751838041566903, 0.17364641975734507, 0.12795827671719995, 0.1973401165467783, 0.12726282564492342, 0.09090156319994946, 9.999999999998899e-05, 0.2101781876965042, 0.0807046688839157, 0.19156836683752532, 0.14912873552911765, 0.02020608500943255, 0.12586733528138216, 0.22250607325587357, 0.1240350348446958, 0.21219312410390911, 0.08594687197368345, 0.16652669904660888, 0.12571652784351994, 9.999999999998899e-05, 9.999999999998899e-05, 0.04278029322647525, 0.0025404008197082995, 9.999999999998899e-05, 0.0019368810727528052, 0.05244021188258208, 0.006160385327051321, 0.08112506857893909, 0.10686297881580831, 0.10324893365125642, 0.09819379567322306, 0.10902402054832638, 0.002077373230206847, 0.06905555853667611, 0.056744879367167766, 0.08774591454125946, 0.1063485214835358, 0.0356478456255116, 0.06121097062827863, 0.13426428875773055, 0.13159202675078963, 0.10124561324036585, 0.0881994427359617, 0.1664624771709472, 0.050287555673290796, 0.054665355283770034, 0.1769265279521447, 9.999999999998899e-05, 0.21129906460179515, 0.005412403402182631, 0.004827672433885155, 0.11368380107187004, 0.1666462765481056, 0.15279196533357686, 0.07743301798254854, 0.5162755731299817, 0.4899811606641723, 0.5422018182354847, 0.47905098259208867, 0.48112106475641125, 0.2062908873482051, 0.44701978815343624, 0.40987912427223794, 0.46989126990236485, 0.054709587010188465, 0.07307292026552281, 0.057311163139233234, 0.08666592194581679, 0.07220214791413859, 0.08633230448661777, 0.07899941310085012, 0.06687629008475648, 0.09046760388719943, 0.18459574956595137, 0.1605580982722311, 0.1964394741449269, 0.15690980200517857, 0.17557287007629307, 0.16056198650377174, 0.23992475364636268, 0.13480657812100072, 0.20254275840450653, 0.27878000852881357, 0.25461004905880646, 0.2874915392770716, 0.23426346914855956, 0.20959661224553527, 0.19968728013528125, 0.32356970040850297, 0.2897403202451857, 0.18614816066157058, 0.15170661561897125, 0.14704572634754476, 0.16832481668750965, 0.2093666026805473, 0.17937204205064705, 0.16455507823207682, 0.18147756314711583, 0.25509087139277187, 0.20814984367934108, 0.20850367379791734, 0.16700457019688653, 0.16986326813366026, 0.1807915879849875, 0.1798357117388436, 0.18141440302794432, 0.1672016146312122, 0.204010989933622, 0.17872798832861303, 0.17281766438129686, 0.15102894602953243, 0.18755961554741707, 0.18375039323496023, 0.16645711058791401, 0.19236494059100673, 0.19956347308411582, 0.16435478346624155, 0.21748588525761292, 0.20042582224828742, 0.1246090549128478, 0.1522264034616042, 0.829484521806318, 0.1975650930860251, 0.19895294980323275, 0.09933484502122758, 0.16905274232053613, 0.7238650458546044, 0.6320228964460148, 0.15605600328289837, 0.10947770943611213, 0.1956035297428309, 0.1660194520445888, 0.20601139201481988, 0.10411994608862829, 0.10279453030583374, 0.6658686298761626, 0.1779368737545285, 0.17693263268935422, 0.20088990700818454, 0.17904030596538212, 0.18703180374025696, 0.16631365098594741, 0.17975999544852106, 0.1770265988740657, 0.19756035050121157, 0.06955947701322673, 0.07113195307745335, 0.05651699141118793, 0.06669387180832254, 0.07102141663944983, 0.07633415038733815, 0.07920703639868465, 0.1088150827907588, 0.06935499871934825]}, "mutation_prompt": null}
{"id": "4a0a7831-5883-4d6a-8601-2b005569f5eb", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.uniform(size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                \n                if fitness(swarm[i]) < fitness(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                if fitness(pbest[i]) < fitness(gbest):\n                    gbest = pbest[i].copy()\n\n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel Metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization in a high-dimensional search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b1e8253-e919-4620-bff9-1530e045bacf", "metadata": {"aucs": [0.6794273832072111, 0.675761046202501, 0.7182844657645797, 0.6137799809147662, 0.18671117923050973, 0.6564266362225435, 0.6296215187517648, 0.41277981262042485, 0.7027496076450171, 0.08409121890066185, 0.04534498902507944, 9.999999999998899e-05, 0.057881338517517866, 0.047244544963022106, 0.23754355269527072, 0.06374402477969743, 0.1973464104128987, 0.09042622914676235, 0.0680584976594053, 0.09166651617551524, 0.0492014796419733, 0.06299146483509843, 0.09440745561235309, 0.06921282761451553, 0.09164372003294408, 0.11029915612397567, 0.07802987526790606, 0.09320517130831507, 0.06567448348823346, 0.07216980485066904, 0.07974530342723263, 0.0242790496364913, 0.07913324506424202, 0.08205047133343557, 0.04063484891177471, 0.10207070072181801, 0.974135377292837, 0.9937651520024462, 0.9908465513798991, 0.09984593628286986, 0.9733958257925414, 0.9232464947514669, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.22843756913994206, 0.22483671359694357, 0.23910718381619567, 0.24719391897899579, 0.1482774544517137, 0.14608373528771246, 0.3199738459250552, 0.2501565013225826, 0.08751433777735551, 0.21483111040056158, 0.1632982317153192, 0.16196935124235756, 0.2083927841193356, 0.3295724089149348, 0.19027109419584498, 0.1246122751400548, 0.1749676787077009, 0.17751838041566903, 0.17364641975734507, 0.12795827671719995, 0.1973401165467783, 0.12726282564492342, 0.09090156319994946, 9.999999999998899e-05, 0.2101781876965042, 0.0807046688839157, 0.19156836683752532, 0.14912873552911765, 0.02020608500943255, 0.12586733528138216, 0.22250607325587357, 0.1240350348446958, 0.21219312410390911, 0.08594687197368345, 0.16652669904660888, 0.12571652784351994, 9.999999999998899e-05, 9.999999999998899e-05, 0.04278029322647525, 0.0025404008197082995, 9.999999999998899e-05, 0.0019368810727528052, 0.05244021188258208, 0.006160385327051321, 0.08112506857893909, 0.10686297881580831, 0.10324893365125642, 0.09819379567322306, 0.10902402054832638, 0.002077373230206847, 0.06905555853667611, 0.056744879367167766, 0.08774591454125946, 0.1063485214835358, 0.0356478456255116, 0.06121097062827863, 0.13426428875773055, 0.13159202675078963, 0.10124561324036585, 0.0881994427359617, 0.1664624771709472, 0.050287555673290796, 0.054665355283770034, 0.1769265279521447, 9.999999999998899e-05, 0.21129906460179515, 0.005412403402182631, 0.004827672433885155, 0.11368380107187004, 0.1666462765481056, 0.15279196533357686, 0.07743301798254854, 0.5162755731299817, 0.4899811606641723, 0.5422018182354847, 0.47905098259208867, 0.48112106475641125, 0.2062908873482051, 0.44701978815343624, 0.40987912427223794, 0.46989126990236485, 0.054709587010188465, 0.07307292026552281, 0.057311163139233234, 0.08666592194581679, 0.07220214791413859, 0.08633230448661777, 0.07899941310085012, 0.06687629008475648, 0.09046760388719943, 0.18459574956595137, 0.1605580982722311, 0.1964394741449269, 0.15690980200517857, 0.17557287007629307, 0.16056198650377174, 0.23992475364636268, 0.13480657812100072, 0.20254275840450653, 0.27878000852881357, 0.25461004905880646, 0.2874915392770716, 0.23426346914855956, 0.20959661224553527, 0.19968728013528125, 0.32356970040850297, 0.2897403202451857, 0.18614816066157058, 0.15170661561897125, 0.14704572634754476, 0.16832481668750965, 0.2093666026805473, 0.17937204205064705, 0.16455507823207682, 0.18147756314711583, 0.25509087139277187, 0.20814984367934108, 0.20850367379791734, 0.16700457019688653, 0.16986326813366026, 0.1807915879849875, 0.1798357117388436, 0.18141440302794432, 0.1672016146312122, 0.204010989933622, 0.17872798832861303, 0.17281766438129686, 0.15102894602953243, 0.18755961554741707, 0.18375039323496023, 0.16645711058791401, 0.19236494059100673, 0.19956347308411582, 0.16435478346624155, 0.21748588525761292, 0.20042582224828742, 0.1246090549128478, 0.1522264034616042, 0.829484521806318, 0.1975650930860251, 0.19895294980323275, 0.09933484502122758, 0.16905274232053613, 0.7238650458546044, 0.6320228964460148, 0.15605600328289837, 0.10947770943611213, 0.1956035297428309, 0.1660194520445888, 0.20601139201481988, 0.10411994608862829, 0.10279453030583374, 0.6658686298761626, 0.1779368737545285, 0.17693263268935422, 0.20088990700818454, 0.17904030596538212, 0.18703180374025696, 0.16631365098594741, 0.17975999544852106, 0.1770265988740657, 0.19756035050121157, 0.06955947701322673, 0.07113195307745335, 0.05651699141118793, 0.06669387180832254, 0.07102141663944983, 0.07633415038733815, 0.07920703639868465, 0.1088150827907588, 0.06935499871934825]}, "mutation_prompt": null}
{"id": "75d5fc38-72d9-4f27-850a-015f8989498f", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def fitness(x):\n            return func(x)\n\n        swarm = np.random.uniform(self.lower_bound, self.upper_bound, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.array([fitness(p) for p in pbest])\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.uniform(size=2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] += velocity[i]\n                swarm[i] = np.clip(swarm[i], self.lower_bound, self.upper_bound)\n                \n                if fitness(swarm[i]) < fitness(pbest[i]):\n                    pbest[i] = swarm[i].copy()\n\n                if fitness(pbest[i]) < fitness(gbest):\n                    gbest = pbest[i].copy()\n\n        return gbest", "name": "PSO_DE_Optimizer", "description": "A novel Metaheuristic algorithm based on a combination of Particle Swarm Optimization (PSO) and Differential Evolution (DE) for black box optimization in a high-dimensional search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b1e8253-e919-4620-bff9-1530e045bacf", "metadata": {"aucs": [0.6794273832072111, 0.675761046202501, 0.7182844657645797, 0.6137799809147662, 0.18671117923050973, 0.6564266362225435, 0.6296215187517648, 0.41277981262042485, 0.7027496076450171, 0.08409121890066185, 0.04534498902507944, 9.999999999998899e-05, 0.057881338517517866, 0.047244544963022106, 0.23754355269527072, 0.06374402477969743, 0.1973464104128987, 0.09042622914676235, 0.0680584976594053, 0.09166651617551524, 0.0492014796419733, 0.06299146483509843, 0.09440745561235309, 0.06921282761451553, 0.09164372003294408, 0.11029915612397567, 0.07802987526790606, 0.09320517130831507, 0.06567448348823346, 0.07216980485066904, 0.07974530342723263, 0.0242790496364913, 0.07913324506424202, 0.08205047133343557, 0.04063484891177471, 0.10207070072181801, 0.974135377292837, 0.9937651520024462, 0.9908465513798991, 0.09984593628286986, 0.9733958257925414, 0.9232464947514669, 0.9946439007165894, 0.990643695742558, 0.9907207007670805, 0.22843756913994206, 0.22483671359694357, 0.23910718381619567, 0.24719391897899579, 0.1482774544517137, 0.14608373528771246, 0.3199738459250552, 0.2501565013225826, 0.08751433777735551, 0.21483111040056158, 0.1632982317153192, 0.16196935124235756, 0.2083927841193356, 0.3295724089149348, 0.19027109419584498, 0.1246122751400548, 0.1749676787077009, 0.17751838041566903, 0.17364641975734507, 0.12795827671719995, 0.1973401165467783, 0.12726282564492342, 0.09090156319994946, 9.999999999998899e-05, 0.2101781876965042, 0.0807046688839157, 0.19156836683752532, 0.14912873552911765, 0.02020608500943255, 0.12586733528138216, 0.22250607325587357, 0.1240350348446958, 0.21219312410390911, 0.08594687197368345, 0.16652669904660888, 0.12571652784351994, 9.999999999998899e-05, 9.999999999998899e-05, 0.04278029322647525, 0.0025404008197082995, 9.999999999998899e-05, 0.0019368810727528052, 0.05244021188258208, 0.006160385327051321, 0.08112506857893909, 0.10686297881580831, 0.10324893365125642, 0.09819379567322306, 0.10902402054832638, 0.002077373230206847, 0.06905555853667611, 0.056744879367167766, 0.08774591454125946, 0.1063485214835358, 0.0356478456255116, 0.06121097062827863, 0.13426428875773055, 0.13159202675078963, 0.10124561324036585, 0.0881994427359617, 0.1664624771709472, 0.050287555673290796, 0.054665355283770034, 0.1769265279521447, 9.999999999998899e-05, 0.21129906460179515, 0.005412403402182631, 0.004827672433885155, 0.11368380107187004, 0.1666462765481056, 0.15279196533357686, 0.07743301798254854, 0.5162755731299817, 0.4899811606641723, 0.5422018182354847, 0.47905098259208867, 0.48112106475641125, 0.2062908873482051, 0.44701978815343624, 0.40987912427223794, 0.46989126990236485, 0.054709587010188465, 0.07307292026552281, 0.057311163139233234, 0.08666592194581679, 0.07220214791413859, 0.08633230448661777, 0.07899941310085012, 0.06687629008475648, 0.09046760388719943, 0.18459574956595137, 0.1605580982722311, 0.1964394741449269, 0.15690980200517857, 0.17557287007629307, 0.16056198650377174, 0.23992475364636268, 0.13480657812100072, 0.20254275840450653, 0.27878000852881357, 0.25461004905880646, 0.2874915392770716, 0.23426346914855956, 0.20959661224553527, 0.19968728013528125, 0.32356970040850297, 0.2897403202451857, 0.18614816066157058, 0.15170661561897125, 0.14704572634754476, 0.16832481668750965, 0.2093666026805473, 0.17937204205064705, 0.16455507823207682, 0.18147756314711583, 0.25509087139277187, 0.20814984367934108, 0.20850367379791734, 0.16700457019688653, 0.16986326813366026, 0.1807915879849875, 0.1798357117388436, 0.18141440302794432, 0.1672016146312122, 0.204010989933622, 0.17872798832861303, 0.17281766438129686, 0.15102894602953243, 0.18755961554741707, 0.18375039323496023, 0.16645711058791401, 0.19236494059100673, 0.19956347308411582, 0.16435478346624155, 0.21748588525761292, 0.20042582224828742, 0.1246090549128478, 0.1522264034616042, 0.829484521806318, 0.1975650930860251, 0.19895294980323275, 0.09933484502122758, 0.16905274232053613, 0.7238650458546044, 0.6320228964460148, 0.15605600328289837, 0.10947770943611213, 0.1956035297428309, 0.1660194520445888, 0.20601139201481988, 0.10411994608862829, 0.10279453030583374, 0.6658686298761626, 0.1779368737545285, 0.17693263268935422, 0.20088990700818454, 0.17904030596538212, 0.18703180374025696, 0.16631365098594741, 0.17975999544852106, 0.1770265988740657, 0.19756035050121157, 0.06955947701322673, 0.07113195307745335, 0.05651699141118793, 0.06669387180832254, 0.07102141663944983, 0.07633415038733815, 0.07920703639868465, 0.1088150827907588, 0.06935499871934825]}, "mutation_prompt": null}
{"id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 10, "fitness": 0.31168669162712037, "feedback": "The algorithm Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "1b1e8253-e919-4620-bff9-1530e045bacf", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "2ced97d1-bec1-4de5-b198-d0a597e7ea3d", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "26c37f6d-a534-4d96-aa57-a3c031ceac96", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "bdafed10-3457-4095-a0fb-b46fdec6e1ef", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "042e7d48-d294-43b8-889e-5baece72b0ce", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "27d6a6af-7615-44a0-9081-8af891487f50", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "5762f52a-1240-45a8-b0f6-2d9a85288e40", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "f444dc04-b566-40f4-99a1-ee26339f8323", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "91488f6a-1c07-46db-b389-9c73c3bf6c32", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "53753004-8e63-4aeb-bf38-d0b36f57c438", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "b9662e28-8728-43d4-b0b3-bb2ea855be57", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "cdfdf40f-ac43-4a98-bf74-e2b7e5664af8", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "7d9d5ea0-350b-409d-be2b-fe533d798512", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "11c6bc07-311e-4020-b72d-a0b093224772", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "91e3bbdd-9317-44fd-8526-1ac8bb1f833f", "solution": "import numpy as np\n\nclass Dynamic_Inertia_PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.5\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = self.inertia_weight * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n                self.inertia_weight = 0.4 + 0.5 * (1 - _ / self.max_iter)  # Dynamic inertia weight update\n\n        return gbest", "name": "Dynamic_Inertia_PSO", "description": "Improved PSO algorithm with dynamic inertia weight adaptation for enhanced convergence speed.", "configspace": "", "generation": 24, "fitness": 0.23954169817242613, "feedback": "The algorithm Dynamic_Inertia_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.6941739732439767, 0.7157482615634002, 0.7041834279279089, 0.7114417209702485, 0.14103882823096758, 0.7547247111360539, 0.6977951192419862, 0.12921209166977354, 0.6601740309832522, 9.999999999998899e-05, 0.038754643121784116, 9.999999999998899e-05, 0.10925494588783768, 0.0548106161719194, 9.999999999998899e-05, 0.39694219637661854, 0.03977511725660965, 0.03560485023095339, 0.10984578638426701, 0.13301856785106558, 0.0963656937591364, 0.10580843005000917, 0.10308730672262278, 0.11531825360206827, 0.12433429096560034, 0.07997652761327245, 0.14658456655882723, 0.08554805083542938, 0.06749512618317455, 0.06169941145229163, 0.10578272562840996, 0.08735465465886005, 0.08059621910607584, 0.08981826160027506, 0.08461146613973036, 0.12179726765893462, 0.9888946279218692, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9920207061523261, 0.0998135983344891, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.4647425284833232, 0.36731232012079185, 0.3690562727903254, 0.3802140735766789, 0.1488678719819121, 0.15306971828325622, 0.08385715682706318, 0.08800647376944304, 0.3186048775629251, 0.17120236098171482, 0.16541611760063846, 0.23493866674399722, 0.19278613566579905, 0.1164550912893163, 0.1901046257399357, 0.12451480341368593, 0.15513969911047676, 0.33127098675140965, 0.13098576968071052, 0.5094795133180519, 0.2801215531804566, 0.11729912139700993, 0.1218138719988281, 9.999999999998899e-05, 0.392702131156464, 0.29399148362565264, 0.36642719797157375, 0.47062108077424436, 0.016223932839818156, 0.13045802918925242, 0.12217434457705112, 0.43908037854992477, 0.4021747955737729, 0.39507382329510776, 0.10781160147772606, 0.40012025274575613, 9.999999999998899e-05, 9.999999999998899e-05, 0.05234449217766812, 0.002874369024292167, 9.999999999998899e-05, 0.08034369022872145, 0.00529897137292068, 0.27183076404052886, 0.07234306845168303, 0.14332623122017163, 0.08729708587496898, 0.06833787918275103, 0.1354490705372987, 0.007543775054663859, 0.03269935094413923, 0.21209312770217603, 0.3624584238856978, 0.036541608194546105, 0.03445722695073328, 0.027812970740658582, 0.0379818968992256, 0.2919776392037091, 0.166740791963519, 0.05341356111309137, 0.16674830860853673, 0.04478803689822364, 0.055352107136443784, 0.2133597826052528, 9.999999999998899e-05, 0.16191364690506704, 0.22717753303420807, 0.0010651414438554996, 0.1136150288188632, 0.06750198952013275, 0.06961289990495112, 0.07756478717003812, 0.5956175517413766, 0.6092606663929858, 0.6094248291579707, 0.5709088048797206, 0.5922342670513496, 0.20821813251423815, 0.595862891044705, 0.5975358400528343, 0.6027574841964487, 0.06048750388059887, 0.06814489272391189, 0.07962381934242435, 0.10048058855460784, 0.12346397360546502, 0.08710440365454541, 0.06469647624186603, 0.06537441021581059, 0.10763578757799364, 0.18512747622082737, 0.20064851670858153, 0.27123121022972185, 0.18451752074938765, 0.25589738757844616, 0.23127475034793432, 0.19767221697699366, 0.30880382713596477, 0.27556345623806855, 0.33194467466733824, 0.2914185924298819, 0.21387492708045042, 0.2593783008921752, 0.22679959740115307, 0.2384424842407843, 0.31227020560748076, 0.3299664388283894, 0.2605956805768558, 0.207149761978922, 0.23879160714986647, 0.16694235738926366, 0.25621421967185554, 0.17787277506748944, 0.24618950597334766, 0.26014722903025833, 0.24801969196310447, 0.22059926702031019, 0.4178886130684788, 0.21197530384774377, 0.18262338568705017, 0.21679776449108157, 0.20891443517239883, 0.1886124825079475, 0.23239776216107522, 0.19101821706916589, 0.18197599462734315, 0.22093968356550953, 0.23984704569751458, 0.1834091269629725, 0.21022348812254987, 0.1991285768456338, 0.18373740994877252, 0.23408897730813272, 0.5178040349721338, 0.18949620389952881, 0.5699546842227169, 0.16823017431222598, 0.1522756110402681, 0.7818550510688396, 0.1995116245376365, 0.20037219673826034, 0.09953611292741826, 0.16835905269768392, 0.14577627010122907, 0.6701936154481587, 0.6612682416152081, 0.19339658645679325, 0.2065426713828784, 0.1670713819926366, 0.20245039466608905, 0.1860976957756143, 0.1848610384683952, 0.6757752827618917, 0.1929538202468416, 0.20027668816025102, 0.19280634268309227, 0.1947588156780159, 0.19343187923170113, 0.24281277468381912, 0.20919369986362102, 0.18073026021722305, 0.204840365261446, 0.08124979739250371, 0.08770884546895064, 0.08600072155988514, 0.08449829594933977, 0.08668367351845918, 0.09542404697380258, 0.07244436506760144, 0.08217457571317499, 0.0949990905712722]}, "mutation_prompt": null}
{"id": "f2df8805-6b73-4499-944b-a12693d989d4", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "50a2f74d-39d6-431b-9cd5-a8dbff974821", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "cc427c45-9233-4342-8bb1-3f8ad72b794d", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def optimize_swarm(self, swarm, velocity, pbest, pbest_scores, gbest, gbest_idx, func):\n        for i in range(self.num_particles):\n            r1, r2 = np.random.rand(2)\n            velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n            swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n            \n            current_score = func(swarm[i])\n            if current_score < pbest_scores[i]:\n                pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n            if current_score < pbest_scores[gbest_idx]:\n                gbest, gbest_idx = pbest[i].copy(), i\n        \n        return gbest, gbest_idx\n    \n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            gbest, gbest_idx = self.optimize_swarm(swarm, velocity, pbest, pbest_scores, gbest, gbest_idx, func)\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Refactored Enhanced PSO_DE_Optimizer for improved efficiency by reducing redundant calculations and optimizing the search process.", "configspace": "", "generation": 27, "fitness": 0.31168669162712037, "feedback": "The algorithm Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "b798ec48-8776-458a-9207-7f69bee55cc2", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "41eb2026-9321-4d85-bc5a-39017d27a5b1", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "e8c61173-7a0e-477c-9667-bf09444f36e7", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "7b1c8b73-1b22-4d6b-bc49-1a1c9fb4c129", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "f048bcd6-9842-4a0b-98e3-95bd213dacd3", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "418b8ca4-d2aa-4b29-aa77-985d464c933d", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "9bf0658a-d159-4d12-bb61-93cb145a9206", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "067e630c-3f74-4bd2-90e2-53981fc1fd62", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "6dbb1f3b-c89a-4c48-af93-69d03c4a5d62", "solution": "import numpy as np\n\nclass Improved_Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            r1_r2 = 2 * np.random.rand(2, self.num_particles, self.dim)\n            velocity = 0.5 * velocity + r1_r2[0] * (pbest - swarm) + r1_r2[1] * (gbest - swarm)\n            swarm = np.clip(swarm + velocity, *self.bounds)\n            \n            current_scores = np.apply_along_axis(func, 1, swarm)\n            update_mask = current_scores < pbest_scores\n            pbest[update_mask], pbest_scores[update_mask] = swarm[update_mask].copy(), current_scores[update_mask]\n            \n            gbest_idx = np.argmin(pbest_scores)\n            gbest = pbest[gbest_idx].copy()\n\n        return gbest", "name": "Improved_Enhanced_PSO_DE_Optimizer", "description": "Improved Enhanced PSO_DE_Optimizer by consolidating operation calculations for enhanced efficiency.", "configspace": "", "generation": 36, "fitness": 0.2849650244820162, "feedback": "The algorithm Improved_Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.8955867008118576, 0.8833645706672573, 0.8957501351980524, 0.9131368521621972, 0.19054344981178994, 0.8732594885548102, 0.9041750279641814, 0.8921334886074398, 0.1745514108323385, 9.999999999998899e-05, 0.7328785086909326, 0.04219803607900763, 0.7853549147391272, 0.733060319040912, 0.7477026507192124, 0.7798118404503134, 0.7533365653699825, 0.7867858574881273, 0.15801139401637576, 0.4879237364336835, 0.17212283024673092, 0.15723047450969385, 0.1758054754654761, 0.15694822740269687, 0.25356377215454506, 0.19890625247390326, 0.1691227520717934, 0.6014762114536732, 0.17453213617773822, 0.11443482671148708, 0.12274510225384472, 0.1718593326858494, 0.1111880732708862, 0.17213181549307155, 0.13603175043446736, 0.13321003053613, 0.9904791285540644, 0.9902771084298112, 0.9899566310723924, 0.9862568505194544, 0.9847493133614569, 0.9891765192633493, 0.9890771576417392, 0.9906540850643275, 0.9855182642036303, 0.5569649112965162, 0.5958897926409363, 0.641094247574352, 0.15311775550878337, 0.6109312264941036, 0.580819252930722, 0.1257847774097296, 0.08900435496048864, 0.5241340265470725, 0.17248174326456533, 0.22391337885281115, 0.2258330152041932, 0.20725921787375723, 0.20895559952849319, 0.3798125621786972, 0.12499744619050634, 0.12655227525947121, 0.17422663698878293, 0.2058344416672846, 0.1960800287448805, 0.19962992092249, 0.19000146748848712, 0.20420521107308398, 0.17311051474840422, 0.21367279744828738, 0.13568049087787004, 0.1966343899674322, 0.2159286982389852, 0.13219769302373552, 0.2134349316341272, 0.31533595589199814, 0.20037414321757474, 0.1988692681762072, 0.22851932338569036, 0.03444439579333425, 0.12731255927048135, 9.999999999998899e-05, 9.999999999998899e-05, 0.052200484150737414, 0.006184684614992886, 9.999999999998899e-05, 0.010323202760228911, 0.004185898069959171, 9.999999999998899e-05, 9.999999999998899e-05, 0.21104322796301922, 0.04536327199146817, 0.15147230481244045, 0.0739584088604559, 9.999999999998899e-05, 0.026209791788841308, 0.0799809550611339, 0.0580019646542993, 0.049292501435235336, 0.049515328988385066, 9.999999999998899e-05, 0.0518909456025598, 0.09622853751150984, 0.251175939271554, 0.07754295179802062, 0.10141927170156162, 0.27449582245773796, 0.07909977367134091, 0.1266660107041998, 9.999999999998899e-05, 0.06717304282129866, 0.03890107516659713, 0.006235812255096396, 0.06280317358443621, 9.999999999998899e-05, 0.08356602833296967, 0.08395553037566983, 0.5455753379968704, 0.6102755677812526, 0.573722142684191, 0.5300090979972344, 0.5750491004529159, 0.20926457655650255, 0.5885364963047112, 0.568870053665967, 0.5765986712135713, 0.06837815485212673, 0.07337826666410419, 0.14506003229446685, 0.14148373589704621, 0.07930896628087025, 0.12653042378915835, 0.08864578837338455, 0.10674649638553113, 0.08839667174703758, 0.19434625114940496, 0.23563978129453245, 0.2843647704395268, 0.2531396266939172, 0.343912444586575, 0.28286245079376626, 0.2029893667170538, 0.22177602791472528, 0.31171990516362835, 0.5819555060266202, 0.2997386780853418, 0.37957067137181355, 0.40163480251898465, 0.2749905032058808, 0.27205216483356276, 0.508869248128629, 0.4989309147588714, 0.5954959145533402, 0.23542214117890903, 0.17158798891104454, 0.24059159172483713, 0.20850552344782547, 0.1439245820205246, 0.2526494248612884, 0.29059727883306175, 0.3067194036557713, 0.23399720253157985, 0.2109846069027006, 0.21017529591985662, 0.19762328018757658, 0.2189200014552335, 0.20491501030690207, 0.19945140584705545, 0.21442835510925662, 0.19855505437054122, 0.23490650518622835, 0.53515269488033, 0.2478146948522022, 0.25286006471985434, 0.1986678271035266, 0.6514987938832175, 0.22244350081996356, 0.22292229021080534, 0.253125123257953, 0.23950233195658788, 0.2641844319677803, 0.16931832147743242, 0.15326186003336006, 0.1727052822047661, 0.20135118054656886, 0.11681273315807483, 0.10203720521654813, 0.17011390959266115, 0.20798610118688277, 0.6704535525309182, 0.15694932677337858, 0.11251122587002049, 0.21070094318077437, 0.46975369563112457, 0.21316975195747168, 0.10403343991674407, 0.20972213685834462, 0.7605285635268817, 0.20462512442314684, 0.20895148470862446, 0.21041277922874435, 0.1851584912290326, 0.202307159474032, 0.18644706405327338, 0.18724827787605247, 0.2024602098665017, 0.184767684900778, 0.0882942570949683, 0.08338594090231033, 0.08961901335308864, 0.0810938987653782, 0.09784091782451543, 0.07915209290285707, 0.09101746450459691, 0.08987099940137888, 0.10649472089884293]}, "mutation_prompt": null}
{"id": "dc6b16bf-ea63-4726-a3bf-0c7d93e2934a", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "2f9f41d3-52e3-4eba-b5a4-5ac7ab259a93", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "6ee0c41e-a09e-4122-98fa-1430176e7b1a", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "2c1c031d-bfdc-40cb-a032-20a87bd78c98", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "10fb99f4-4521-40a5-ac01-062dc24fdcb7", "solution": "import numpy as np\n\nclass Improved_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest_scores = np.apply_along_axis(func, 1, swarm)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = swarm[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (swarm[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest_scores[i] = current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = swarm[i].copy(), i\n\n        return gbest", "name": "Improved_PSO_DE_Optimizer", "description": "Improved PSO_DE_Optimizer with reduced memory footprint and enhanced convergence by eliminating unnecessary array copies.", "configspace": "", "generation": 41, "fitness": 0.19702617219413784, "feedback": "The algorithm Improved_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.23.", "error": "", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.9188981139626426, 0.9265494768139609, 0.45860573568747365, 0.934645015322767, 0.16124432376661446, 0.9204783976416036, 0.17554451351938605, 0.18287893981452852, 0.17597362152782192, 9.999999999998899e-05, 0.04402339396528221, 9.999999999998899e-05, 0.14414845626043948, 0.02716057136970451, 0.11985300872509885, 0.03756699021430865, 9.999999999998899e-05, 9.999999999998899e-05, 0.07561958663917356, 0.023789000783806524, 0.07317708141090806, 0.06337499390617019, 0.07139623168690445, 0.07358283492338669, 0.0737344389293334, 0.10074656792685566, 0.10740814046376634, 0.09088954249805614, 0.040993153488532164, 0.07320810662749988, 0.11284013435622364, 0.04373811710789155, 0.08309738394802757, 0.07783495810924579, 0.050747279043920956, 0.032213665545777426, 0.07497517934828679, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9772484132790396, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.11665172226191789, 0.3673458805036752, 0.48554566313661596, 0.879543034564906, 0.15566470923999276, 0.15440743727614303, 0.2638277326992985, 0.08409290407694936, 0.08925564981354561, 0.2480240208866208, 0.13531321054546808, 0.14173569233998573, 0.19460624688055672, 0.17976126400361847, 0.15080164190020118, 0.09434905914344127, 0.1271177611745179, 0.15487225759649115, 0.02569473721603588, 0.07805306599477813, 0.20743462362329967, 0.10983039757027724, 0.10935755578973749, 9.999999999998899e-05, 0.14682841426015292, 9.999999999998899e-05, 0.3237506158908129, 0.36479318823154794, 9.999999999998899e-05, 0.13394029788416828, 0.13178532581164037, 0.16161383817278951, 0.1913658389689985, 0.18083616013373727, 0.19053077615602765, 0.207159049337862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07865067663179093, 9.999999999998899e-05, 0.12423632314608313, 0.06043438089669706, 0.043335016434974616, 0.19212539467925238, 0.08376022894904223, 9.999999999998899e-05, 0.025313907522470758, 0.062430127518073086, 0.05673799393077883, 0.006633477392422704, 9.999999999998899e-05, 0.0579759803873825, 0.1068880418645547, 0.18331709642300398, 0.10054682496415157, 0.12859010261663917, 0.13610591328956234, 0.07788393316763631, 9.999999999998899e-05, 0.04417441406739331, 9.999999999998899e-05, 0.22145555236610048, 0.006842911816617336, 9.999999999998899e-05, 0.08367202570380583, 0.0838508168170845, 9.999999999998899e-05, 0.0845572810221471, 0.8477257969352118, 0.7087870532563323, 0.4098876811876948, 0.6152589830746535, 0.2083759279484959, 0.2086018370056134, 0.5860595923448624, 0.38565882780568705, 0.6986599351523916, 0.12564240834188223, 0.044088172413461635, 0.03654605474609285, 0.0560610865319322, 0.06472002975377544, 0.09883945582955944, 0.06391361216379976, 0.06670598195002153, 0.08734459450212484, 0.1997445875910291, 0.11278051888601492, 0.12171434397538183, 0.16708679622254763, 0.2786810643551646, 0.1474013839258691, 0.1709650322861005, 0.13782048165859884, 0.20955318799165612, 0.1935579139449375, 0.21796896384577402, 0.2350080726919973, 0.23564242321299744, 0.13796076558265447, 0.21554800250120976, 0.3098447780310073, 0.2138831327442785, 0.2850832488169388, 0.10413607798746904, 0.11448801659518104, 0.14704185244535561, 0.21135024727703022, 0.15428240779527136, 0.2680886166470242, 0.14562523611260936, 0.17775327854742606, 0.15398479559516454, 0.2556081848705899, 0.20597585771230875, 0.14788834842203413, 0.21749859313916153, 0.22449576237330104, 0.1651661581898234, 0.2597337294438503, 0.18842774943428098, 0.2145008810105391, 0.19214731867821344, 0.18686879279505975, 0.17265494304425033, 0.17701540046980113, 0.18710005427688503, 0.17569007922339475, 0.17023290165281946, 0.1770072287422807, 0.2566519431826174, 0.1270714519787811, 0.12682859622652687, 0.11310914409900563, 0.17328691992213985, 0.20227550124443816, 0.20166591977402326, 0.10003014866579474, 0.1705822910330016, 0.2097888744953409, 0.9407612679270341, 0.15773796948516883, 0.09833886578917883, 0.1047208301289475, 0.16948675124401047, 0.16704966372804342, 0.10547535253292917, 0.10416184989263333, 0.5720895984829718, 0.19692920081297338, 0.1798755192947883, 0.1950191414890866, 0.2094156864063651, 0.21586877300865348, 0.2038506868610237, 0.26283985853319625, 0.17907536979714056, 0.21211241691032112, 0.08855532633118524, 0.07420711639118649, 0.05699716192558135, 0.08669556649715648, 0.055099325640882824, 0.08584422548127624, 0.0885129655067125, 0.050184360158402, 0.0615438883783781]}, "mutation_prompt": null}
{"id": "4aa7cf0e-31e7-410a-8654-487a2b7a8ca5", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "8d1cc265-b72c-4767-9bce-1f4873093eb1", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "6aafd62d-3d95-47a1-894a-44784309f4bc", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "f36929bf-285c-4449-91a3-b0245296075e", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "427093ff-dede-4ad1-820f-09225a166717", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "50e06808-51c0-45e7-987c-e89ca8345cd9", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "45bcab8b-1bd7-430c-adaa-99097b084f8d", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "c089943c-09ea-4305-bba7-1a802847c1d5", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "51f9622e-f949-4f42-aa03-eb97f6c7660a", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "11ceb326-2fe1-4e76-b644-7e9edace0743", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "23918e08-8d1d-4165-9866-3bc0e673fec2", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "d2a6ed16-42a4-4216-9bb5-2a6aff7003d6", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "72e46aba-703b-4d08-a63c-7cb8d3a3f221", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "d44c5526-a571-42e9-93e0-b2824654d179", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "a638c4d9-9d2a-4002-bcaf-428efb1f0ba7", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "8a13e8aa-d237-4905-80f1-b97cee006513", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "0726b717-a814-44d5-989a-c3e8e172843f", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "2f582513-a959-4c28-b868-c0612b146bf7", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "bd730b66-5465-4e89-bda9-8097bd282624", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "8bcfba2c-8223-4310-9dba-8558ee851e2b", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "b5eacb5e-ae55-463a-9af0-5a43ac030c2d", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * (r1 * (pbest[i] - swarm[i]) + r2 * (gbest - swarm[i]))\n                new_pos = np.clip(swarm[i] + velocity[i], *self.bounds)\n                current_score = func(new_pos)\n                \n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = new_pos, current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = new_pos, i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhancing search efficiency by utilizing a unified score update mechanism for both personal and global best positions.", "configspace": "", "generation": 62, "fitness": 0.10779950488967556, "feedback": "The algorithm Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.18.", "error": "", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.1882664966037806, 0.12877129828197542, 0.15948003710732905, 0.1767968670964103, 0.14296319371469768, 0.13565301885139702, 0.15449981726955453, 0.12335222369186827, 0.14947225600944858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037961019509572314, 0.04252942489151079, 0.037322984543115445, 0.04638137276702747, 0.03827264700669619, 0.046993710680562795, 0.050194572836266715, 0.05056733679975334, 0.038926543124037205, 0.0420360765701685, 0.009587476730875677, 0.03947098243362268, 0.04128388084396428, 0.0004952459975243739, 0.05496479805617416, 0.009675984293555095, 0.024466758169432445, 0.0055100335840158055, 0.9884934058702369, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9926499220433838, 0.8958306898256568, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.06574640786920993, 0.06279667470268047, 0.06522584846844348, 0.08182770315385446, 0.06976204891867877, 0.09199020452321616, 0.04926291786078296, 0.021083636967818675, 0.03080419416159952, 0.10690693688699249, 0.074028296541226, 0.11853320379402321, 0.11576240441785102, 0.07193096752834449, 0.07405422174629073, 0.049600933564651895, 0.08360722905947693, 0.10663572262737508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00946442674339254, 0.017793033821624338, 9.999999999998899e-05, 9.999999999998899e-05, 0.09251230923974285, 9.999999999998899e-05, 9.999999999998899e-05, 0.017749781819272004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044066062415364815, 0.014832564814843852, 0.02647749540141775, 0.036347721949141154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045117460205411075, 0.005850584663948943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20623213534945994, 0.20735099258384382, 0.15900260753826712, 0.1473907757421643, 0.12747859052990984, 0.1082489309261393, 0.2680799950712902, 0.1473419037398649, 0.18012613640493147, 0.02782182288952606, 0.01893190621494545, 0.017594722753053738, 0.024125075233236037, 0.021191420054576304, 0.04046512529492974, 0.08909766092820992, 0.0007044868777602575, 0.050524515296525685, 0.09691676375492753, 0.1194541752422782, 0.10881053723702938, 0.11580119612258788, 0.11733827267515295, 0.1304708593501307, 0.1302009046807321, 0.12574779105685707, 0.10680361367432323, 0.138631711373291, 0.1505403478616819, 0.14352810184653642, 0.1953024965207827, 0.12448253919564156, 0.1555786773169664, 0.17200805075443437, 0.17377774300845283, 0.17288292666312577, 0.057316814684473694, 0.0516680966589631, 0.10027111916415665, 0.10589559722593422, 0.0727843123045413, 0.11630384040069097, 0.10837716052221458, 0.10485469530295344, 0.08823701139602069, 0.13286101632128577, 0.11669086082702795, 0.13345086981233123, 0.13621469841433642, 0.1400192002542071, 0.10861903225486624, 0.13623062405474462, 0.1643480730415776, 0.1581929989229558, 0.14027951498764157, 9.999999999998899e-05, 0.1482137275555575, 0.14934446425857317, 0.14230091018022395, 0.13968440630677437, 0.1445464312748378, 0.13880178523203235, 0.1317399541723122, 0.11061470378958205, 0.1114616357848659, 0.11060202805020003, 0.11257738675389206, 0.17149978944438005, 0.15939143811901435, 0.08998010059180872, 0.14370672402482887, 0.10615959043032541, 0.22956611581385367, 0.1139984577251073, 0.08117626326827088, 0.06687505562499374, 0.11129335539469598, 0.09790404585178492, 0.16165966082173633, 0.11288357888829592, 0.1428271735224309, 0.18902699666391987, 0.20867426004313516, 0.1693519832131386, 0.16516002975141086, 0.16577390647354096, 0.17060372461715978, 0.17827073011083228, 0.18922389628160174, 0.1778602383183615, 0.04266068617526286, 0.02564345162345305, 0.05184361932675152, 0.05074252917175437, 0.04669914259718244, 0.05440814519822745, 0.03870154436628859, 0.01653155319026267, 0.03482915797698005]}, "mutation_prompt": null}
{"id": "1c2900db-c77e-4b0e-b8f9-ecf0cf152482", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "78775c47-3ba5-4e1e-bdff-82b0640f37c6", "solution": "import numpy as np\n\nclass Improved_Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = np.copy(swarm)\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = np.copy(pbest[gbest_idx])\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i] = np.copy(swarm[i])\n                    pbest_scores[i] = current_score\n\n                    if current_score < pbest_scores[gbest_idx]:\n                        gbest = np.copy(pbest[i])\n                        gbest_idx = i\n\n        return gbest", "name": "Improved_Enhanced_PSO_DE_Optimizer", "description": "Improved Enhanced PSO_DE_Optimizer by optimizing memory usage and reducing redundant operations.", "configspace": "", "generation": 64, "fitness": 0.31168669162712037, "feedback": "The algorithm Improved_Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "cd581be3-5692-44d2-bd83-f2b2e7cca2c6", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "0e4e3976-3162-41a6-b6dd-9921bdfbba75", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "bb6b2fb0-894f-42cf-98c5-eda557f03297", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "2dfbfdd9-e80d-4721-9d80-5fb437f7acc7", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(2, self.num_particles, self.dim)\n            velocity = 0.5 * velocity + 2 * r1 * (pbest - swarm) + 2 * r2 * (gbest - swarm)\n            swarm = np.clip(swarm + velocity, *self.bounds)\n            \n            current_scores = np.apply_along_axis(func, 1, swarm)\n            replace_mask = current_scores < pbest_scores\n            pbest[replace_mask] = swarm[replace_mask]\n            pbest_scores[replace_mask] = current_scores[replace_mask]\n\n            new_gbest_idx = np.argmin(pbest_scores)\n            if pbest_scores[new_gbest_idx] < pbest_scores[gbest_idx]:\n                gbest, gbest_idx = pbest[new_gbest_idx].copy(), new_gbest_idx\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Improved Enhanced PSO_DE_Optimizer with reduced redundant calculations and enhanced convergence by updating swarm positions and velocities simultaneously.", "configspace": "", "generation": 68, "fitness": 0.27485181617091736, "feedback": "The algorithm Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.8967263016221191, 0.8877108438121664, 0.8867702584092721, 0.9030180174574158, 0.19052282840989854, 0.7248964900500872, 0.8563816063916575, 0.896232474812995, 0.17455121711043264, 0.7689793628568514, 0.750493648033774, 0.03987445827175229, 0.06663220472418074, 0.7102005030136049, 0.6885407229851241, 0.7825538687651621, 0.7354625885610413, 0.755765938004689, 0.09189041692105471, 0.46000433571966703, 0.24215735450422293, 0.162152525717019, 0.1759027982064626, 0.1794817370556504, 0.13813055129914042, 0.6563967201886421, 0.18326776546568713, 0.15537157787940215, 0.18090616067112875, 0.14113189930648062, 0.14282315658471012, 0.1276514336840051, 0.14018220116835434, 0.12766286388827797, 0.11150147374946373, 0.13441950056388685, 0.9904791285540644, 0.9902771084298112, 0.9899566310723924, 0.9862568505194544, 0.9847493133614569, 0.9891765192633493, 0.9890771576417392, 0.9906540850643275, 0.9855182642036303, 0.5670320143090027, 0.6106113243864323, 0.5285726912637412, 0.15309055217106327, 0.6194728194083441, 0.6535788474043046, 0.5932190505280174, 0.08894732647220693, 0.08863440673516021, 0.17248174326456533, 0.3410795368233477, 0.22423627257735357, 0.1952998328975295, 0.21236206020091364, 0.21458973980855112, 0.12497330178935995, 0.18467943931632225, 0.17415258300190928, 0.1992176339104873, 0.21109686588737575, 0.1598214876406695, 0.1856231584406145, 0.1294250548179542, 9.999999999998899e-05, 0.176147845681631, 0.13552011345273063, 0.2005199846163931, 0.21233076655332328, 0.10600537998120796, 0.2066477667136113, 0.25059315815183714, 0.19714381292296013, 0.18290732679183053, 0.23264067959461376, 0.034681344999270336, 0.09785117470879867, 9.999999999998899e-05, 9.999999999998899e-05, 0.06118382619053664, 9.999999999998899e-05, 9.999999999998899e-05, 0.03424093364254954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10873384167393418, 0.04919841952619264, 0.13881813602492898, 0.06927730077909933, 9.999999999998899e-05, 0.021745295848992874, 0.07788181878347766, 0.049456260823069864, 0.04837062113327706, 0.050164930985728495, 9.999999999998899e-05, 0.049329034793361815, 0.09703736865156265, 0.2346738137779103, 0.07804410760428782, 0.09877259160414886, 0.191760712236556, 0.08936919055223935, 0.11270647034631054, 9.999999999998899e-05, 0.07183614878725242, 0.03893382370831189, 0.006390235367224384, 0.06479437987673153, 0.2053829794279144, 0.08381038372326766, 0.08385772574040073, 0.4939127121794281, 0.5077227243902781, 0.5560994940592923, 0.6075771518946622, 0.539166416363225, 0.20926494366802362, 0.5811987864025479, 0.5403570116537498, 0.5388261347743193, 0.0721794493646446, 0.09149265934118922, 0.05993476858036462, 0.13940146214630333, 0.09411004082363872, 0.13885934662873134, 0.08863848997877577, 0.10500926703755542, 0.12643564420585585, 0.18810377129416178, 0.30731199857355496, 0.26021977968866195, 0.26405679287680284, 0.3460613870128282, 0.40454015753620265, 0.2015900185328362, 0.21964396245820894, 0.26552051866051674, 0.6007110041062643, 0.30590412872693384, 0.3676602964595097, 0.29662855709945035, 0.22900206829476033, 0.28279673629854274, 0.45247043634783546, 0.29126721060653193, 0.6581164562051274, 0.2274630802655926, 0.17178532583699868, 0.2851728443393057, 0.2109613355216131, 0.14767746145995064, 0.25846583067770446, 0.3052817283239503, 0.27745531443118976, 0.23996156503482058, 0.21024179863927017, 0.1975408577861828, 0.1750859385372554, 0.21817059978298547, 0.20501923144639778, 0.18916601682867407, 0.2229317877849446, 0.2200455146093765, 0.2280808238102886, 0.20816642723122736, 0.20970456198345788, 0.22479169444366043, 0.2440701599858367, 0.19682751756045758, 0.24735293928449642, 0.23616081541750034, 0.2525112091256764, 0.20836531813413117, 0.26484317587329576, 0.16930790783069172, 0.15418768183059506, 0.17266656703829852, 0.20133454408397367, 0.11634301042532957, 0.10194688057830259, 0.17011295094445578, 0.2084850036572008, 0.6219873613763065, 0.15696950071341775, 0.11235566678354358, 0.21047298387692848, 0.36322401034642293, 0.2131635557494923, 0.10403355166825057, 0.20995997834250435, 0.6850238330760604, 0.20963344106938786, 0.2076633621001277, 0.20242462088878388, 0.18429074624136532, 0.20437564242412554, 0.18371207208653995, 0.19991949608243154, 0.2468801574401479, 0.18421401589062536, 0.09069533861512413, 0.08261956092039568, 0.09374257694115418, 0.09294632686877213, 0.08891284875202887, 0.0830498063619074, 0.08115833517487969, 0.10269702003981362, 0.09783896546280102]}, "mutation_prompt": null}
{"id": "ce257977-09bb-4701-bd01-14880d0700af", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "5662db05-9812-4c42-ae72-0b9b0c6495a8", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "5be3a40a-45fc-40ff-8c4d-a75a2ccbabcd", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "63617a35-8ed0-4123-b15d-5639ee8b784b", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "129f39dc-f7e1-48bb-9ec3-9c9735fe17a0", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "fdeb7229-0e6e-4981-a64d-e62cf16cf752", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        num_iters = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n        self.rng = np.random.default_rng()\n\n    def __call__(self, func):\n        swarm = self.rng.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n\n        for _ in range(num_iters):\n            r_values = self.rng.random(size=(self.num_particles, 2))\n            velocity = 0.5 * velocity + 2 * r_values[:, 0, None] * (pbest - swarm) + 2 * r_values[:, 1, None] * (gbest - swarm)\n            swarm = np.clip(swarm + velocity, *self.bounds)\n            current_scores = np.apply_along_axis(func, 1, swarm)\n\n            updates = current_scores < pbest_scores\n            pbest[updates] = swarm[updates]\n            pbest_scores[updates] = current_scores[updates]\n\n            gbest_idx = np.argmin(pbest_scores)\n            gbest = pbest[gbest_idx].copy()\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Optimizing memory usage and computation efficiency by consolidating repeated operations and simplifying control flow.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'num_iters' is not defined\").", "error": "NameError(\"name 'num_iters' is not defined\")", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {}, "mutation_prompt": null}
{"id": "b3079945-d8e2-414c-b141-428d888288b1", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "f4a8cde8-c497-45c4-899d-b16db3fa817c", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            random_vals = np.random.rand(self.num_particles, 2)\n            for i in range(self.num_particles):\n                velocity[i] = 0.5 * velocity[i] + 2 * random_vals[i, 0] * (pbest[i] - swarm[i]) + 2 * random_vals[i, 1] * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                    if current_score < pbest_scores[gbest_idx]:\n                        gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency, reduced redundant calculations, and optimized control flow for better performance.", "configspace": "", "generation": 76, "fitness": 0.31168669162712037, "feedback": "The algorithm Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "4c11205c-23b6-4d91-aa36-66d4676c7f46", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "7966bb60-6a8f-41fd-b8b0-e3c8d0d7f0b1", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "3275a08c-31f3-4be4-9db5-6e6aacd64fc3", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "24b956b5-754b-4488-befa-3a207d5e873e", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(2, self.num_particles)\n            velocity = 0.5 * velocity + 2 * r1 * (pbest - swarm) + 2 * r2 * (gbest - swarm)\n            swarm = np.clip(swarm + velocity, *self.bounds)\n            \n            current_scores = np.apply_along_axis(func, 1, swarm)\n            improve_mask = current_scores < pbest_scores\n            pbest[improve_mask], pbest_scores[improve_mask] = swarm[improve_mask], current_scores[improve_mask]\n            gbest_idx = np.argmin(pbest_scores)\n            gbest = pbest[gbest_idx].copy()\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Optimized Enhanced PSO_DE_Optimizer with improved efficiency through vectorized operations and reduced redundant computations.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (30,) (30,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (30,) (30,5) ')", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {}, "mutation_prompt": null}
{"id": "4481888d-0e6e-4251-98dd-1cfabf7af910", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "2bef511d-be57-47da-a096-418606749f52", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "8897bd17-e335-4faf-a6e0-90119009b370", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "28f65deb-9e94-4cb3-b69e-acf42db4720b", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "09f1e830-f1ce-450b-ae85-b43be37b9eb3", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "b92090ed-8d94-4414-9e24-bb130c6171cd", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "1120b77a-aa9d-4302-b48b-7bfd352748b3", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "caea0719-5853-4898-8424-8ee0772b4d99", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "355d34cf-cc5d-468b-a61c-8f35f1ee190e", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = np.copy(swarm)\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = np.copy(swarm[i]), current_score\n\n                    if current_score < pbest_scores[gbest_idx]:\n                        gbest, gbest_idx = np.copy(pbest[i]), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Improved PSO-DE hybrid algorithm with enhanced exploration and exploitation capabilities.", "configspace": "", "generation": 89, "fitness": 0.31168669162712037, "feedback": "The algorithm Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "6a41a332-5ee2-416a-bd84-e4ce19530bb5", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "dae6815a-920b-43d3-a7a1-025dc9b19c1c", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "8c4e4efd-6fd2-4ea8-901f-fc1b6c7bcddc", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "b7233434-addd-4036-989f-feb6bbbc4a66", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "e8974adc-1c4e-48e7-918e-fd164287d38b", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "46383cba-30ec-4dbc-a506-52ceacbf5111", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "8a6e855a-c542-46a9-a643-5407aa9bee6f", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest_scores = np.apply_along_axis(func, 1, swarm)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = swarm[gbest_idx].copy()\n\n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (swarm[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n\n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest_scores[i] = current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = swarm[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved convergence speed by reducing unnecessary array copies and enhancing velocity update efficiency.", "configspace": "", "generation": 96, "fitness": 0.19702617219413784, "feedback": "The algorithm Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.23.", "error": "", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.9188981139626426, 0.9265494768139609, 0.45860573568747365, 0.934645015322767, 0.16124432376661446, 0.9204783976416036, 0.17554451351938605, 0.18287893981452852, 0.17597362152782192, 9.999999999998899e-05, 0.04402339396528221, 9.999999999998899e-05, 0.14414845626043948, 0.02716057136970451, 0.11985300872509885, 0.03756699021430865, 9.999999999998899e-05, 9.999999999998899e-05, 0.07561958663917356, 0.023789000783806524, 0.07317708141090806, 0.06337499390617019, 0.07139623168690445, 0.07358283492338669, 0.0737344389293334, 0.10074656792685566, 0.10740814046376634, 0.09088954249805614, 0.040993153488532164, 0.07320810662749988, 0.11284013435622364, 0.04373811710789155, 0.08309738394802757, 0.07783495810924579, 0.050747279043920956, 0.032213665545777426, 0.07497517934828679, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9772484132790396, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.11665172226191789, 0.3673458805036752, 0.48554566313661596, 0.879543034564906, 0.15566470923999276, 0.15440743727614303, 0.2638277326992985, 0.08409290407694936, 0.08925564981354561, 0.2480240208866208, 0.13531321054546808, 0.14173569233998573, 0.19460624688055672, 0.17976126400361847, 0.15080164190020118, 0.09434905914344127, 0.1271177611745179, 0.15487225759649115, 0.02569473721603588, 0.07805306599477813, 0.20743462362329967, 0.10983039757027724, 0.10935755578973749, 9.999999999998899e-05, 0.14682841426015292, 9.999999999998899e-05, 0.3237506158908129, 0.36479318823154794, 9.999999999998899e-05, 0.13394029788416828, 0.13178532581164037, 0.16161383817278951, 0.1913658389689985, 0.18083616013373727, 0.19053077615602765, 0.207159049337862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07865067663179093, 9.999999999998899e-05, 0.12423632314608313, 0.06043438089669706, 0.043335016434974616, 0.19212539467925238, 0.08376022894904223, 9.999999999998899e-05, 0.025313907522470758, 0.062430127518073086, 0.05673799393077883, 0.006633477392422704, 9.999999999998899e-05, 0.0579759803873825, 0.1068880418645547, 0.18331709642300398, 0.10054682496415157, 0.12859010261663917, 0.13610591328956234, 0.07788393316763631, 9.999999999998899e-05, 0.04417441406739331, 9.999999999998899e-05, 0.22145555236610048, 0.006842911816617336, 9.999999999998899e-05, 0.08367202570380583, 0.0838508168170845, 9.999999999998899e-05, 0.0845572810221471, 0.8477257969352118, 0.7087870532563323, 0.4098876811876948, 0.6152589830746535, 0.2083759279484959, 0.2086018370056134, 0.5860595923448624, 0.38565882780568705, 0.6986599351523916, 0.12564240834188223, 0.044088172413461635, 0.03654605474609285, 0.0560610865319322, 0.06472002975377544, 0.09883945582955944, 0.06391361216379976, 0.06670598195002153, 0.08734459450212484, 0.1997445875910291, 0.11278051888601492, 0.12171434397538183, 0.16708679622254763, 0.2786810643551646, 0.1474013839258691, 0.1709650322861005, 0.13782048165859884, 0.20955318799165612, 0.1935579139449375, 0.21796896384577402, 0.2350080726919973, 0.23564242321299744, 0.13796076558265447, 0.21554800250120976, 0.3098447780310073, 0.2138831327442785, 0.2850832488169388, 0.10413607798746904, 0.11448801659518104, 0.14704185244535561, 0.21135024727703022, 0.15428240779527136, 0.2680886166470242, 0.14562523611260936, 0.17775327854742606, 0.15398479559516454, 0.2556081848705899, 0.20597585771230875, 0.14788834842203413, 0.21749859313916153, 0.22449576237330104, 0.1651661581898234, 0.2597337294438503, 0.18842774943428098, 0.2145008810105391, 0.19214731867821344, 0.18686879279505975, 0.17265494304425033, 0.17701540046980113, 0.18710005427688503, 0.17569007922339475, 0.17023290165281946, 0.1770072287422807, 0.2566519431826174, 0.1270714519787811, 0.12682859622652687, 0.11310914409900563, 0.17328691992213985, 0.20227550124443816, 0.20166591977402326, 0.10003014866579474, 0.1705822910330016, 0.2097888744953409, 0.9407612679270341, 0.15773796948516883, 0.09833886578917883, 0.1047208301289475, 0.16948675124401047, 0.16704966372804342, 0.10547535253292917, 0.10416184989263333, 0.5720895984829718, 0.19692920081297338, 0.1798755192947883, 0.1950191414890866, 0.2094156864063651, 0.21586877300865348, 0.2038506868610237, 0.26283985853319625, 0.17907536979714056, 0.21211241691032112, 0.08855532633118524, 0.07420711639118649, 0.05699716192558135, 0.08669556649715648, 0.055099325640882824, 0.08584422548127624, 0.0885129655067125, 0.050184360158402, 0.0615438883783781]}, "mutation_prompt": null}
{"id": "e98e35d2-9cc1-432b-8855-4919aaad82b5", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "0dccf3a5-2029-4d5f-aa49-78bdac2242f4", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
{"id": "492076b5-60ef-45ad-a15a-bc35663bd98b", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 30\n        self.max_iter = int(budget / self.num_particles)\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        swarm = np.random.uniform(*self.bounds, size=(self.num_particles, self.dim))\n        velocity = np.zeros((self.num_particles, self.dim))\n        pbest = swarm.copy()\n        pbest_scores = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_scores)\n        gbest = pbest[gbest_idx].copy()\n        \n        for _ in range(self.max_iter):\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = 0.5 * velocity[i] + 2 * r1 * (pbest[i] - swarm[i]) + 2 * r2 * (gbest - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], *self.bounds)\n                \n                current_score = func(swarm[i])\n                if current_score < pbest_scores[i]:\n                    pbest[i], pbest_scores[i] = swarm[i].copy(), current_score\n\n                if current_score < pbest_scores[gbest_idx]:\n                    gbest, gbest_idx = pbest[i].copy(), i\n\n        return gbest", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced PSO_DE_Optimizer with improved memory efficiency and reduced redundant calculations.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "51297364-ad18-4d99-b31e-02fb5e01ac68", "metadata": {"aucs": [0.906431131920156, 0.9165572148721632, 0.9276221072625309, 0.9066923472150501, 0.19013194051924165, 0.8997454817641368, 0.8916956732227717, 0.6474328243082819, 0.9231920266206106, 0.7113693035441897, 0.04068669456284457, 9.999999999998899e-05, 0.5919080802331296, 0.6413764175379997, 0.7857326877781136, 0.7447638466766702, 0.7318307429725932, 0.7043631901213432, 0.10166514473486055, 0.09789362900347309, 0.06423368225792014, 0.066862449114929, 0.09861085652566981, 0.07131550357849625, 0.09794515878309906, 0.11917898810390948, 0.08087494046559873, 0.10171439165634999, 0.07058051102612917, 0.07988099376500268, 0.08284888189852135, 0.027505719515883764, 0.08162375443097858, 0.10382554559331325, 0.058119749675835775, 0.11210341263609103, 0.9913806847101945, 0.9962665338665235, 0.9955488473976529, 0.09989839420257418, 0.9911992988745968, 0.9775257660884399, 0.996509514080577, 0.9955158517358657, 0.9954974195223046, 0.5518437894650176, 0.43994870590105617, 0.5291476506260678, 0.2901886239699978, 0.1549518606176562, 0.1542129303941414, 0.6137852520074027, 0.08901003058788681, 0.08926192643169195, 0.22917731883012016, 0.17074262681668073, 0.1704537992046411, 0.21514611466711986, 0.3632647976132658, 0.19496285362856736, 0.14499837293663365, 0.2150458377081481, 0.18305379352403128, 0.6576324756998507, 0.271001914495967, 0.7330197409699923, 0.6929722444939057, 0.10614632557426484, 9.999999999998899e-05, 0.7423349634318, 0.11371358204692184, 0.6889618917803235, 0.13694447584827707, 0.022238208779482016, 0.13655596904829947, 0.7235820680809906, 0.13613995087781727, 0.7625171929923433, 0.5236308574600993, 0.7349079167212736, 0.13655161357662182, 9.999999999998899e-05, 9.999999999998899e-05, 0.09071636060391852, 0.00540647761396007, 9.999999999998899e-05, 0.020015667996400976, 0.3720005962308356, 0.00994149593865934, 0.41145108918125073, 0.6129897108031143, 0.19656201695728392, 0.5915613701984961, 0.2007639770020232, 0.11900508493436479, 0.445455860661636, 0.7200675423074707, 0.2455501674304651, 0.2999327852403533, 0.052156809699645645, 0.11647476765465814, 0.2015048806448232, 0.6463418329026223, 0.210247142862109, 0.3827524297229836, 0.5821770349117394, 0.07604012529009196, 0.07570860196980533, 0.23198342107363756, 9.999999999998899e-05, 0.24741951543003637, 0.006767183182429082, 0.006707383734490424, 0.14006263244345118, 0.2145743285139009, 0.19241357991962005, 0.08568748405660431, 0.5037811567700432, 0.8437204776990732, 0.8640435862645922, 0.8331061566749488, 0.8566620714573208, 0.20930822357470025, 0.838650712373906, 0.7998875051231958, 0.6472473078623608, 0.045046310836216796, 0.08236179264799304, 0.057143910248076635, 0.12919941509179567, 0.07781168567996732, 0.10547035822870454, 0.08595720857159284, 0.07087449909665178, 0.09774093078002877, 0.20251449632399632, 0.19977451827059167, 0.2807352688657958, 0.17843286353198906, 0.19777270250270162, 0.2382927854205542, 0.24638909348108196, 0.190394169526108, 0.20960816677487637, 0.3036554280194069, 0.2721555636522336, 0.31147019794452746, 0.24716761105361273, 0.17628793875455884, 0.20480316579663216, 0.37854229257047056, 0.3759755412374862, 0.19638847000138382, 0.18784481090264749, 0.15446007656206506, 0.17644481316167004, 0.22009296556176172, 0.23721643487005073, 0.22073281501473474, 0.17799278816262953, 0.2701037702822964, 0.2404133993123011, 0.21676226629923656, 0.18099767046300008, 0.19958911888027875, 0.22982335918620156, 0.19069768952171673, 0.2212896376130854, 0.19726948473984485, 0.25464276003244457, 0.19915477964104455, 0.17791794330277555, 0.19348936418960871, 0.19196897329871243, 0.17555399049086096, 0.17184180392670279, 0.20227861945015824, 0.1864234459125339, 0.17431783550870472, 0.19155890677337306, 0.2119877848574695, 0.1268469598523092, 0.15463407582094169, 0.9473779387233952, 0.20163049767528496, 0.20182300499025096, 0.10003096515090748, 0.17056681544229468, 0.9266698478147203, 0.9150508076509041, 0.15786229482622494, 0.112232224692415, 0.20654964907168238, 0.16937682095070372, 0.21317602228209542, 0.10531785738641086, 0.10412409301480041, 0.9172096712546927, 0.19502893186421766, 0.25801777303632023, 0.21619766236542615, 0.1985496084759113, 0.20438496968643216, 0.218125819961572, 0.22408467621010464, 0.19438804042769275, 0.21493228643115225, 0.07699692679095227, 0.07919473683184264, 0.05957064188682015, 0.10959899026869502, 0.08544525231801403, 0.08075015245907047, 0.09754014779791453, 0.1448821841859561, 0.0781717849349387]}, "mutation_prompt": null}
