{"id": "3fca78ce-0550-4e89-887b-9528c5282d92", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                new_position = positions[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_score = func(new_position)\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n\n                positions[i] = new_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                        trial[j] = mutant[j]\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            global_best_idx = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_idx]\n            global_best_score = personal_best_scores[global_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Novel Hybrid Exploration-Exploitation Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for dynamic balance and diversification in search space.", "configspace": "", "generation": 0, "fitness": 0.3350759475638455, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7301733583735963, 0.7339088815143957, 0.7069640679968311, 0.7302974237824258, 0.7134990375246006, 0.7304106128485124, 0.7479855077029585, 0.7294385854121359, 0.7014733743931243, 0.4821986441510556, 0.5072077217146134, 0.4972097735857296, 0.4488624065612117, 0.46834323549273116, 0.48827922101029875, 0.45736379699891605, 0.4943385404158098, 0.4958794443624923, 0.14373862666470538, 0.1279324027864599, 0.18607277989750381, 0.12233566775495341, 0.12353424056448203, 0.19140913042124308, 0.11907134091942828, 0.10872050260397659, 0.11243223095901633, 0.10811627917795796, 0.10012905944699035, 0.11521941123927049, 0.11804748715633762, 0.1603095634934023, 0.10100728328939568, 0.10643553703678521, 0.11922006528403728, 0.10915207959844808, 0.9779274018203822, 0.9884307511400007, 0.9756144920658965, 0.9586145576155368, 0.9806667520799643, 0.9792727866998175, 0.9751472822872409, 0.968191568870718, 0.9733282341918461, 0.45290740523325324, 0.39055931245730835, 0.336311040004035, 0.30204235089929465, 0.367367062168208, 0.42055373308607213, 0.32190478395503663, 0.32562646717983734, 0.32697997395062683, 0.6825339031446338, 0.6226399691550564, 0.656843255629369, 0.6670365680510213, 0.7134095485714772, 0.74162091480292, 0.6652603651474767, 0.7000897050487804, 0.6917184549067724, 0.1527288021314387, 0.16810396869691957, 0.15449167967218347, 0.36621054339449055, 0.2134839431944242, 0.1984957536459513, 0.19087551053061103, 0.2862786995191, 0.19894975292703754, 0.17866241793752846, 0.13792602735584647, 0.3460878811482804, 0.2005370860512119, 0.1320382804815523, 0.27505192905915454, 0.15335453988631742, 0.20835544098125325, 0.19385803795281265, 0.2976252922036554, 0.2642238487560171, 0.2597335690891204, 0.21547630530351103, 0.2793774452095835, 0.21819193001777437, 0.26677174379648916, 0.20879634934791558, 0.2690816923253361, 0.40596818145290336, 0.4069070670004301, 0.42144630530606575, 0.2889492451143847, 0.376781440704441, 0.41294767356339657, 0.422722875591811, 0.4077660372143336, 0.40586029956317093, 0.08937366091889931, 0.0860624611957197, 0.1013102732511243, 0.10660555329877097, 0.1629122649727759, 0.12847276800669827, 0.12363631064947966, 0.1333339771304507, 0.09451520672215552, 0.24253928635876876, 0.22694894203160165, 0.20934271119489944, 0.23851336496798736, 0.22301174810780144, 0.23675109287120033, 0.23910970051546143, 0.21376048720046503, 0.23827299506754773, 0.557618639271019, 0.5636421452690674, 0.6470343883969498, 0.625695062127539, 0.6066372110595545, 0.6348284664459005, 0.6144571007267261, 0.5917684988900185, 0.6167855657726906, 0.10212036221096654, 0.10413816851806423, 0.10506635539631748, 0.13046486313873573, 0.12743918621299055, 0.09112942023549875, 0.10707087979370755, 0.09085443920215275, 0.12675137622984967, 0.1885512974174779, 0.2370626697591275, 0.1736439305341586, 0.3155037398943308, 0.32983880130277143, 0.20422804036049347, 0.22097419300543186, 0.19931382465168412, 0.25175241255351744, 0.3386998951879516, 0.33215301250906637, 0.34833561919995726, 0.32747573813373954, 0.3568653661837764, 0.33887056307981167, 0.39686405707582795, 0.39055137124838324, 0.33263225312009526, 0.27634427867259714, 0.2957021758469045, 0.2762965490460908, 0.26481546914432696, 0.2752382880339135, 0.28656258496387, 0.27599224001842904, 0.2626849199118225, 0.2996925875897778, 0.2236003388576684, 0.20254584868579018, 0.19085743360098606, 0.21440975068069879, 0.20075632588794412, 0.20244827359339224, 0.19544856262617982, 0.21457456095103855, 0.19024499574889464, 0.21766888244011384, 0.3830726739184288, 0.20554038742565872, 0.1973081731117562, 0.202763587132045, 0.2002349808747651, 0.20970881337658887, 0.2151099150672383, 0.21947827293371924, 0.692296139255981, 0.17754951214882364, 0.16452426763233907, 0.8208501510500071, 0.40711980409618675, 0.5794858344820094, 0.16499942755034025, 0.3856239834426004, 0.8284703307715935, 0.6557499822260207, 0.20889939141029512, 0.4754776641899916, 0.29258055708169894, 0.45679874453674085, 0.1962067845437261, 0.5582243439441512, 0.2063844187891276, 0.5056179935066573, 0.1878587506257109, 0.18655301793417378, 0.18797267755127278, 0.1877171075265478, 0.216165259368719, 0.19209336474094918, 0.20624877319732715, 0.1929247251915609, 0.20855609063321723, 0.08505641818366272, 0.07465702749356573, 0.07863619717883286, 0.08403106846629904, 0.07758429692010083, 0.0916866551033132, 0.08196892555591295, 0.08285909288071269, 0.07314974743779312]}, "mutation_prompt": null}
{"id": "feb71ca2-bf0d-48b0-8620-d50da67d10fc", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                new_position = positions[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_score = func(new_position)\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n\n                positions[i] = new_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                        trial[j] = mutant[j]\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            global_best_idx = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_idx]\n            global_best_score = personal_best_scores[global_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Novel Hybrid Exploration-Exploitation Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for dynamic balance and diversification in search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fca78ce-0550-4e89-887b-9528c5282d92", "metadata": {"aucs": [0.7301733583735963, 0.7339088815143957, 0.7069640679968311, 0.7302974237824258, 0.7134990375246006, 0.7304106128485124, 0.7479855077029585, 0.7294385854121359, 0.7014733743931243, 0.4821986441510556, 0.5072077217146134, 0.4972097735857296, 0.4488624065612117, 0.46834323549273116, 0.48827922101029875, 0.45736379699891605, 0.4943385404158098, 0.4958794443624923, 0.14373862666470538, 0.1279324027864599, 0.18607277989750381, 0.12233566775495341, 0.12353424056448203, 0.19140913042124308, 0.11907134091942828, 0.10872050260397659, 0.11243223095901633, 0.10811627917795796, 0.10012905944699035, 0.11521941123927049, 0.11804748715633762, 0.1603095634934023, 0.10100728328939568, 0.10643553703678521, 0.11922006528403728, 0.10915207959844808, 0.9779274018203822, 0.9884307511400007, 0.9756144920658965, 0.9586145576155368, 0.9806667520799643, 0.9792727866998175, 0.9751472822872409, 0.968191568870718, 0.9733282341918461, 0.45290740523325324, 0.39055931245730835, 0.336311040004035, 0.30204235089929465, 0.367367062168208, 0.42055373308607213, 0.32190478395503663, 0.32562646717983734, 0.32697997395062683, 0.6825339031446338, 0.6226399691550564, 0.656843255629369, 0.6670365680510213, 0.7134095485714772, 0.74162091480292, 0.6652603651474767, 0.7000897050487804, 0.6917184549067724, 0.1527288021314387, 0.16810396869691957, 0.15449167967218347, 0.36621054339449055, 0.2134839431944242, 0.1984957536459513, 0.19087551053061103, 0.2862786995191, 0.19894975292703754, 0.17866241793752846, 0.13792602735584647, 0.3460878811482804, 0.2005370860512119, 0.1320382804815523, 0.27505192905915454, 0.15335453988631742, 0.20835544098125325, 0.19385803795281265, 0.2976252922036554, 0.2642238487560171, 0.2597335690891204, 0.21547630530351103, 0.2793774452095835, 0.21819193001777437, 0.26677174379648916, 0.20879634934791558, 0.2690816923253361, 0.40596818145290336, 0.4069070670004301, 0.42144630530606575, 0.2889492451143847, 0.376781440704441, 0.41294767356339657, 0.422722875591811, 0.4077660372143336, 0.40586029956317093, 0.08937366091889931, 0.0860624611957197, 0.1013102732511243, 0.10660555329877097, 0.1629122649727759, 0.12847276800669827, 0.12363631064947966, 0.1333339771304507, 0.09451520672215552, 0.24253928635876876, 0.22694894203160165, 0.20934271119489944, 0.23851336496798736, 0.22301174810780144, 0.23675109287120033, 0.23910970051546143, 0.21376048720046503, 0.23827299506754773, 0.557618639271019, 0.5636421452690674, 0.6470343883969498, 0.625695062127539, 0.6066372110595545, 0.6348284664459005, 0.6144571007267261, 0.5917684988900185, 0.6167855657726906, 0.10212036221096654, 0.10413816851806423, 0.10506635539631748, 0.13046486313873573, 0.12743918621299055, 0.09112942023549875, 0.10707087979370755, 0.09085443920215275, 0.12675137622984967, 0.1885512974174779, 0.2370626697591275, 0.1736439305341586, 0.3155037398943308, 0.32983880130277143, 0.20422804036049347, 0.22097419300543186, 0.19931382465168412, 0.25175241255351744, 0.3386998951879516, 0.33215301250906637, 0.34833561919995726, 0.32747573813373954, 0.3568653661837764, 0.33887056307981167, 0.39686405707582795, 0.39055137124838324, 0.33263225312009526, 0.27634427867259714, 0.2957021758469045, 0.2762965490460908, 0.26481546914432696, 0.2752382880339135, 0.28656258496387, 0.27599224001842904, 0.2626849199118225, 0.2996925875897778, 0.2236003388576684, 0.20254584868579018, 0.19085743360098606, 0.21440975068069879, 0.20075632588794412, 0.20244827359339224, 0.19544856262617982, 0.21457456095103855, 0.19024499574889464, 0.21766888244011384, 0.3830726739184288, 0.20554038742565872, 0.1973081731117562, 0.202763587132045, 0.2002349808747651, 0.20970881337658887, 0.2151099150672383, 0.21947827293371924, 0.692296139255981, 0.17754951214882364, 0.16452426763233907, 0.8208501510500071, 0.40711980409618675, 0.5794858344820094, 0.16499942755034025, 0.3856239834426004, 0.8284703307715935, 0.6557499822260207, 0.20889939141029512, 0.4754776641899916, 0.29258055708169894, 0.45679874453674085, 0.1962067845437261, 0.5582243439441512, 0.2063844187891276, 0.5056179935066573, 0.1878587506257109, 0.18655301793417378, 0.18797267755127278, 0.1877171075265478, 0.216165259368719, 0.19209336474094918, 0.20624877319732715, 0.1929247251915609, 0.20855609063321723, 0.08505641818366272, 0.07465702749356573, 0.07863619717883286, 0.08403106846629904, 0.07758429692010083, 0.0916866551033132, 0.08196892555591295, 0.08285909288071269, 0.07314974743779312]}, "mutation_prompt": null}
{"id": "01c7cf4b-adde-4041-ab25-806a7960fb2a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                new_position = positions[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_score = func(new_position)\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n\n                positions[i] = new_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                        trial[j] = mutant[j]\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            global_best_idx = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_idx]\n            global_best_score = personal_best_scores[global_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Novel Hybrid Exploration-Exploitation Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for dynamic balance and diversification in search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fca78ce-0550-4e89-887b-9528c5282d92", "metadata": {"aucs": [0.7301733583735963, 0.7339088815143957, 0.7069640679968311, 0.7302974237824258, 0.7134990375246006, 0.7304106128485124, 0.7479855077029585, 0.7294385854121359, 0.7014733743931243, 0.4821986441510556, 0.5072077217146134, 0.4972097735857296, 0.4488624065612117, 0.46834323549273116, 0.48827922101029875, 0.45736379699891605, 0.4943385404158098, 0.4958794443624923, 0.14373862666470538, 0.1279324027864599, 0.18607277989750381, 0.12233566775495341, 0.12353424056448203, 0.19140913042124308, 0.11907134091942828, 0.10872050260397659, 0.11243223095901633, 0.10811627917795796, 0.10012905944699035, 0.11521941123927049, 0.11804748715633762, 0.1603095634934023, 0.10100728328939568, 0.10643553703678521, 0.11922006528403728, 0.10915207959844808, 0.9779274018203822, 0.9884307511400007, 0.9756144920658965, 0.9586145576155368, 0.9806667520799643, 0.9792727866998175, 0.9751472822872409, 0.968191568870718, 0.9733282341918461, 0.45290740523325324, 0.39055931245730835, 0.336311040004035, 0.30204235089929465, 0.367367062168208, 0.42055373308607213, 0.32190478395503663, 0.32562646717983734, 0.32697997395062683, 0.6825339031446338, 0.6226399691550564, 0.656843255629369, 0.6670365680510213, 0.7134095485714772, 0.74162091480292, 0.6652603651474767, 0.7000897050487804, 0.6917184549067724, 0.1527288021314387, 0.16810396869691957, 0.15449167967218347, 0.36621054339449055, 0.2134839431944242, 0.1984957536459513, 0.19087551053061103, 0.2862786995191, 0.19894975292703754, 0.17866241793752846, 0.13792602735584647, 0.3460878811482804, 0.2005370860512119, 0.1320382804815523, 0.27505192905915454, 0.15335453988631742, 0.20835544098125325, 0.19385803795281265, 0.2976252922036554, 0.2642238487560171, 0.2597335690891204, 0.21547630530351103, 0.2793774452095835, 0.21819193001777437, 0.26677174379648916, 0.20879634934791558, 0.2690816923253361, 0.40596818145290336, 0.4069070670004301, 0.42144630530606575, 0.2889492451143847, 0.376781440704441, 0.41294767356339657, 0.422722875591811, 0.4077660372143336, 0.40586029956317093, 0.08937366091889931, 0.0860624611957197, 0.1013102732511243, 0.10660555329877097, 0.1629122649727759, 0.12847276800669827, 0.12363631064947966, 0.1333339771304507, 0.09451520672215552, 0.24253928635876876, 0.22694894203160165, 0.20934271119489944, 0.23851336496798736, 0.22301174810780144, 0.23675109287120033, 0.23910970051546143, 0.21376048720046503, 0.23827299506754773, 0.557618639271019, 0.5636421452690674, 0.6470343883969498, 0.625695062127539, 0.6066372110595545, 0.6348284664459005, 0.6144571007267261, 0.5917684988900185, 0.6167855657726906, 0.10212036221096654, 0.10413816851806423, 0.10506635539631748, 0.13046486313873573, 0.12743918621299055, 0.09112942023549875, 0.10707087979370755, 0.09085443920215275, 0.12675137622984967, 0.1885512974174779, 0.2370626697591275, 0.1736439305341586, 0.3155037398943308, 0.32983880130277143, 0.20422804036049347, 0.22097419300543186, 0.19931382465168412, 0.25175241255351744, 0.3386998951879516, 0.33215301250906637, 0.34833561919995726, 0.32747573813373954, 0.3568653661837764, 0.33887056307981167, 0.39686405707582795, 0.39055137124838324, 0.33263225312009526, 0.27634427867259714, 0.2957021758469045, 0.2762965490460908, 0.26481546914432696, 0.2752382880339135, 0.28656258496387, 0.27599224001842904, 0.2626849199118225, 0.2996925875897778, 0.2236003388576684, 0.20254584868579018, 0.19085743360098606, 0.21440975068069879, 0.20075632588794412, 0.20244827359339224, 0.19544856262617982, 0.21457456095103855, 0.19024499574889464, 0.21766888244011384, 0.3830726739184288, 0.20554038742565872, 0.1973081731117562, 0.202763587132045, 0.2002349808747651, 0.20970881337658887, 0.2151099150672383, 0.21947827293371924, 0.692296139255981, 0.17754951214882364, 0.16452426763233907, 0.8208501510500071, 0.40711980409618675, 0.5794858344820094, 0.16499942755034025, 0.3856239834426004, 0.8284703307715935, 0.6557499822260207, 0.20889939141029512, 0.4754776641899916, 0.29258055708169894, 0.45679874453674085, 0.1962067845437261, 0.5582243439441512, 0.2063844187891276, 0.5056179935066573, 0.1878587506257109, 0.18655301793417378, 0.18797267755127278, 0.1877171075265478, 0.216165259368719, 0.19209336474094918, 0.20624877319732715, 0.1929247251915609, 0.20855609063321723, 0.08505641818366272, 0.07465702749356573, 0.07863619717883286, 0.08403106846629904, 0.07758429692010083, 0.0916866551033132, 0.08196892555591295, 0.08285909288071269, 0.07314974743779312]}, "mutation_prompt": null}
{"id": "22c16b25-3feb-4cbd-856d-9c9608fc51de", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                new_position = positions[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_score = func(new_position)\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n\n                positions[i] = new_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                        trial[j] = mutant[j]\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            global_best_idx = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_idx]\n            global_best_score = personal_best_scores[global_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Novel Hybrid Exploration-Exploitation Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for dynamic balance and diversification in search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fca78ce-0550-4e89-887b-9528c5282d92", "metadata": {"aucs": [0.7301733583735963, 0.7339088815143957, 0.7069640679968311, 0.7302974237824258, 0.7134990375246006, 0.7304106128485124, 0.7479855077029585, 0.7294385854121359, 0.7014733743931243, 0.4821986441510556, 0.5072077217146134, 0.4972097735857296, 0.4488624065612117, 0.46834323549273116, 0.48827922101029875, 0.45736379699891605, 0.4943385404158098, 0.4958794443624923, 0.14373862666470538, 0.1279324027864599, 0.18607277989750381, 0.12233566775495341, 0.12353424056448203, 0.19140913042124308, 0.11907134091942828, 0.10872050260397659, 0.11243223095901633, 0.10811627917795796, 0.10012905944699035, 0.11521941123927049, 0.11804748715633762, 0.1603095634934023, 0.10100728328939568, 0.10643553703678521, 0.11922006528403728, 0.10915207959844808, 0.9779274018203822, 0.9884307511400007, 0.9756144920658965, 0.9586145576155368, 0.9806667520799643, 0.9792727866998175, 0.9751472822872409, 0.968191568870718, 0.9733282341918461, 0.45290740523325324, 0.39055931245730835, 0.336311040004035, 0.30204235089929465, 0.367367062168208, 0.42055373308607213, 0.32190478395503663, 0.32562646717983734, 0.32697997395062683, 0.6825339031446338, 0.6226399691550564, 0.656843255629369, 0.6670365680510213, 0.7134095485714772, 0.74162091480292, 0.6652603651474767, 0.7000897050487804, 0.6917184549067724, 0.1527288021314387, 0.16810396869691957, 0.15449167967218347, 0.36621054339449055, 0.2134839431944242, 0.1984957536459513, 0.19087551053061103, 0.2862786995191, 0.19894975292703754, 0.17866241793752846, 0.13792602735584647, 0.3460878811482804, 0.2005370860512119, 0.1320382804815523, 0.27505192905915454, 0.15335453988631742, 0.20835544098125325, 0.19385803795281265, 0.2976252922036554, 0.2642238487560171, 0.2597335690891204, 0.21547630530351103, 0.2793774452095835, 0.21819193001777437, 0.26677174379648916, 0.20879634934791558, 0.2690816923253361, 0.40596818145290336, 0.4069070670004301, 0.42144630530606575, 0.2889492451143847, 0.376781440704441, 0.41294767356339657, 0.422722875591811, 0.4077660372143336, 0.40586029956317093, 0.08937366091889931, 0.0860624611957197, 0.1013102732511243, 0.10660555329877097, 0.1629122649727759, 0.12847276800669827, 0.12363631064947966, 0.1333339771304507, 0.09451520672215552, 0.24253928635876876, 0.22694894203160165, 0.20934271119489944, 0.23851336496798736, 0.22301174810780144, 0.23675109287120033, 0.23910970051546143, 0.21376048720046503, 0.23827299506754773, 0.557618639271019, 0.5636421452690674, 0.6470343883969498, 0.625695062127539, 0.6066372110595545, 0.6348284664459005, 0.6144571007267261, 0.5917684988900185, 0.6167855657726906, 0.10212036221096654, 0.10413816851806423, 0.10506635539631748, 0.13046486313873573, 0.12743918621299055, 0.09112942023549875, 0.10707087979370755, 0.09085443920215275, 0.12675137622984967, 0.1885512974174779, 0.2370626697591275, 0.1736439305341586, 0.3155037398943308, 0.32983880130277143, 0.20422804036049347, 0.22097419300543186, 0.19931382465168412, 0.25175241255351744, 0.3386998951879516, 0.33215301250906637, 0.34833561919995726, 0.32747573813373954, 0.3568653661837764, 0.33887056307981167, 0.39686405707582795, 0.39055137124838324, 0.33263225312009526, 0.27634427867259714, 0.2957021758469045, 0.2762965490460908, 0.26481546914432696, 0.2752382880339135, 0.28656258496387, 0.27599224001842904, 0.2626849199118225, 0.2996925875897778, 0.2236003388576684, 0.20254584868579018, 0.19085743360098606, 0.21440975068069879, 0.20075632588794412, 0.20244827359339224, 0.19544856262617982, 0.21457456095103855, 0.19024499574889464, 0.21766888244011384, 0.3830726739184288, 0.20554038742565872, 0.1973081731117562, 0.202763587132045, 0.2002349808747651, 0.20970881337658887, 0.2151099150672383, 0.21947827293371924, 0.692296139255981, 0.17754951214882364, 0.16452426763233907, 0.8208501510500071, 0.40711980409618675, 0.5794858344820094, 0.16499942755034025, 0.3856239834426004, 0.8284703307715935, 0.6557499822260207, 0.20889939141029512, 0.4754776641899916, 0.29258055708169894, 0.45679874453674085, 0.1962067845437261, 0.5582243439441512, 0.2063844187891276, 0.5056179935066573, 0.1878587506257109, 0.18655301793417378, 0.18797267755127278, 0.1877171075265478, 0.216165259368719, 0.19209336474094918, 0.20624877319732715, 0.1929247251915609, 0.20855609063321723, 0.08505641818366272, 0.07465702749356573, 0.07863619717883286, 0.08403106846629904, 0.07758429692010083, 0.0916866551033132, 0.08196892555591295, 0.08285909288071269, 0.07314974743779312]}, "mutation_prompt": null}
{"id": "b5899529-1a09-4a70-9fd4-dcd89e780155", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                new_position = positions[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_score = func(new_position)\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n\n                positions[i] = new_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                        trial[j] = mutant[j]\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            global_best_idx = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_idx]\n            global_best_score = personal_best_scores[global_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Novel Hybrid Exploration-Exploitation Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for dynamic balance and diversification in search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fca78ce-0550-4e89-887b-9528c5282d92", "metadata": {"aucs": [0.7301733583735963, 0.7339088815143957, 0.7069640679968311, 0.7302974237824258, 0.7134990375246006, 0.7304106128485124, 0.7479855077029585, 0.7294385854121359, 0.7014733743931243, 0.4821986441510556, 0.5072077217146134, 0.4972097735857296, 0.4488624065612117, 0.46834323549273116, 0.48827922101029875, 0.45736379699891605, 0.4943385404158098, 0.4958794443624923, 0.14373862666470538, 0.1279324027864599, 0.18607277989750381, 0.12233566775495341, 0.12353424056448203, 0.19140913042124308, 0.11907134091942828, 0.10872050260397659, 0.11243223095901633, 0.10811627917795796, 0.10012905944699035, 0.11521941123927049, 0.11804748715633762, 0.1603095634934023, 0.10100728328939568, 0.10643553703678521, 0.11922006528403728, 0.10915207959844808, 0.9779274018203822, 0.9884307511400007, 0.9756144920658965, 0.9586145576155368, 0.9806667520799643, 0.9792727866998175, 0.9751472822872409, 0.968191568870718, 0.9733282341918461, 0.45290740523325324, 0.39055931245730835, 0.336311040004035, 0.30204235089929465, 0.367367062168208, 0.42055373308607213, 0.32190478395503663, 0.32562646717983734, 0.32697997395062683, 0.6825339031446338, 0.6226399691550564, 0.656843255629369, 0.6670365680510213, 0.7134095485714772, 0.74162091480292, 0.6652603651474767, 0.7000897050487804, 0.6917184549067724, 0.1527288021314387, 0.16810396869691957, 0.15449167967218347, 0.36621054339449055, 0.2134839431944242, 0.1984957536459513, 0.19087551053061103, 0.2862786995191, 0.19894975292703754, 0.17866241793752846, 0.13792602735584647, 0.3460878811482804, 0.2005370860512119, 0.1320382804815523, 0.27505192905915454, 0.15335453988631742, 0.20835544098125325, 0.19385803795281265, 0.2976252922036554, 0.2642238487560171, 0.2597335690891204, 0.21547630530351103, 0.2793774452095835, 0.21819193001777437, 0.26677174379648916, 0.20879634934791558, 0.2690816923253361, 0.40596818145290336, 0.4069070670004301, 0.42144630530606575, 0.2889492451143847, 0.376781440704441, 0.41294767356339657, 0.422722875591811, 0.4077660372143336, 0.40586029956317093, 0.08937366091889931, 0.0860624611957197, 0.1013102732511243, 0.10660555329877097, 0.1629122649727759, 0.12847276800669827, 0.12363631064947966, 0.1333339771304507, 0.09451520672215552, 0.24253928635876876, 0.22694894203160165, 0.20934271119489944, 0.23851336496798736, 0.22301174810780144, 0.23675109287120033, 0.23910970051546143, 0.21376048720046503, 0.23827299506754773, 0.557618639271019, 0.5636421452690674, 0.6470343883969498, 0.625695062127539, 0.6066372110595545, 0.6348284664459005, 0.6144571007267261, 0.5917684988900185, 0.6167855657726906, 0.10212036221096654, 0.10413816851806423, 0.10506635539631748, 0.13046486313873573, 0.12743918621299055, 0.09112942023549875, 0.10707087979370755, 0.09085443920215275, 0.12675137622984967, 0.1885512974174779, 0.2370626697591275, 0.1736439305341586, 0.3155037398943308, 0.32983880130277143, 0.20422804036049347, 0.22097419300543186, 0.19931382465168412, 0.25175241255351744, 0.3386998951879516, 0.33215301250906637, 0.34833561919995726, 0.32747573813373954, 0.3568653661837764, 0.33887056307981167, 0.39686405707582795, 0.39055137124838324, 0.33263225312009526, 0.27634427867259714, 0.2957021758469045, 0.2762965490460908, 0.26481546914432696, 0.2752382880339135, 0.28656258496387, 0.27599224001842904, 0.2626849199118225, 0.2996925875897778, 0.2236003388576684, 0.20254584868579018, 0.19085743360098606, 0.21440975068069879, 0.20075632588794412, 0.20244827359339224, 0.19544856262617982, 0.21457456095103855, 0.19024499574889464, 0.21766888244011384, 0.3830726739184288, 0.20554038742565872, 0.1973081731117562, 0.202763587132045, 0.2002349808747651, 0.20970881337658887, 0.2151099150672383, 0.21947827293371924, 0.692296139255981, 0.17754951214882364, 0.16452426763233907, 0.8208501510500071, 0.40711980409618675, 0.5794858344820094, 0.16499942755034025, 0.3856239834426004, 0.8284703307715935, 0.6557499822260207, 0.20889939141029512, 0.4754776641899916, 0.29258055708169894, 0.45679874453674085, 0.1962067845437261, 0.5582243439441512, 0.2063844187891276, 0.5056179935066573, 0.1878587506257109, 0.18655301793417378, 0.18797267755127278, 0.1877171075265478, 0.216165259368719, 0.19209336474094918, 0.20624877319732715, 0.1929247251915609, 0.20855609063321723, 0.08505641818366272, 0.07465702749356573, 0.07863619717883286, 0.08403106846629904, 0.07758429692010083, 0.0916866551033132, 0.08196892555591295, 0.08285909288071269, 0.07314974743779312]}, "mutation_prompt": null}
{"id": "5deed438-4baf-4e2c-91a9-859e904067d9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                new_position = positions[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_score = func(new_position)\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n\n                positions[i] = new_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                        trial[j] = mutant[j]\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            global_best_idx = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_idx]\n            global_best_score = personal_best_scores[global_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Novel Hybrid Exploration-Exploitation Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for dynamic balance and diversification in search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fca78ce-0550-4e89-887b-9528c5282d92", "metadata": {"aucs": [0.7301733583735963, 0.7339088815143957, 0.7069640679968311, 0.7302974237824258, 0.7134990375246006, 0.7304106128485124, 0.7479855077029585, 0.7294385854121359, 0.7014733743931243, 0.4821986441510556, 0.5072077217146134, 0.4972097735857296, 0.4488624065612117, 0.46834323549273116, 0.48827922101029875, 0.45736379699891605, 0.4943385404158098, 0.4958794443624923, 0.14373862666470538, 0.1279324027864599, 0.18607277989750381, 0.12233566775495341, 0.12353424056448203, 0.19140913042124308, 0.11907134091942828, 0.10872050260397659, 0.11243223095901633, 0.10811627917795796, 0.10012905944699035, 0.11521941123927049, 0.11804748715633762, 0.1603095634934023, 0.10100728328939568, 0.10643553703678521, 0.11922006528403728, 0.10915207959844808, 0.9779274018203822, 0.9884307511400007, 0.9756144920658965, 0.9586145576155368, 0.9806667520799643, 0.9792727866998175, 0.9751472822872409, 0.968191568870718, 0.9733282341918461, 0.45290740523325324, 0.39055931245730835, 0.336311040004035, 0.30204235089929465, 0.367367062168208, 0.42055373308607213, 0.32190478395503663, 0.32562646717983734, 0.32697997395062683, 0.6825339031446338, 0.6226399691550564, 0.656843255629369, 0.6670365680510213, 0.7134095485714772, 0.74162091480292, 0.6652603651474767, 0.7000897050487804, 0.6917184549067724, 0.1527288021314387, 0.16810396869691957, 0.15449167967218347, 0.36621054339449055, 0.2134839431944242, 0.1984957536459513, 0.19087551053061103, 0.2862786995191, 0.19894975292703754, 0.17866241793752846, 0.13792602735584647, 0.3460878811482804, 0.2005370860512119, 0.1320382804815523, 0.27505192905915454, 0.15335453988631742, 0.20835544098125325, 0.19385803795281265, 0.2976252922036554, 0.2642238487560171, 0.2597335690891204, 0.21547630530351103, 0.2793774452095835, 0.21819193001777437, 0.26677174379648916, 0.20879634934791558, 0.2690816923253361, 0.40596818145290336, 0.4069070670004301, 0.42144630530606575, 0.2889492451143847, 0.376781440704441, 0.41294767356339657, 0.422722875591811, 0.4077660372143336, 0.40586029956317093, 0.08937366091889931, 0.0860624611957197, 0.1013102732511243, 0.10660555329877097, 0.1629122649727759, 0.12847276800669827, 0.12363631064947966, 0.1333339771304507, 0.09451520672215552, 0.24253928635876876, 0.22694894203160165, 0.20934271119489944, 0.23851336496798736, 0.22301174810780144, 0.23675109287120033, 0.23910970051546143, 0.21376048720046503, 0.23827299506754773, 0.557618639271019, 0.5636421452690674, 0.6470343883969498, 0.625695062127539, 0.6066372110595545, 0.6348284664459005, 0.6144571007267261, 0.5917684988900185, 0.6167855657726906, 0.10212036221096654, 0.10413816851806423, 0.10506635539631748, 0.13046486313873573, 0.12743918621299055, 0.09112942023549875, 0.10707087979370755, 0.09085443920215275, 0.12675137622984967, 0.1885512974174779, 0.2370626697591275, 0.1736439305341586, 0.3155037398943308, 0.32983880130277143, 0.20422804036049347, 0.22097419300543186, 0.19931382465168412, 0.25175241255351744, 0.3386998951879516, 0.33215301250906637, 0.34833561919995726, 0.32747573813373954, 0.3568653661837764, 0.33887056307981167, 0.39686405707582795, 0.39055137124838324, 0.33263225312009526, 0.27634427867259714, 0.2957021758469045, 0.2762965490460908, 0.26481546914432696, 0.2752382880339135, 0.28656258496387, 0.27599224001842904, 0.2626849199118225, 0.2996925875897778, 0.2236003388576684, 0.20254584868579018, 0.19085743360098606, 0.21440975068069879, 0.20075632588794412, 0.20244827359339224, 0.19544856262617982, 0.21457456095103855, 0.19024499574889464, 0.21766888244011384, 0.3830726739184288, 0.20554038742565872, 0.1973081731117562, 0.202763587132045, 0.2002349808747651, 0.20970881337658887, 0.2151099150672383, 0.21947827293371924, 0.692296139255981, 0.17754951214882364, 0.16452426763233907, 0.8208501510500071, 0.40711980409618675, 0.5794858344820094, 0.16499942755034025, 0.3856239834426004, 0.8284703307715935, 0.6557499822260207, 0.20889939141029512, 0.4754776641899916, 0.29258055708169894, 0.45679874453674085, 0.1962067845437261, 0.5582243439441512, 0.2063844187891276, 0.5056179935066573, 0.1878587506257109, 0.18655301793417378, 0.18797267755127278, 0.1877171075265478, 0.216165259368719, 0.19209336474094918, 0.20624877319732715, 0.1929247251915609, 0.20855609063321723, 0.08505641818366272, 0.07465702749356573, 0.07863619717883286, 0.08403106846629904, 0.07758429692010083, 0.0916866551033132, 0.08196892555591295, 0.08285909288071269, 0.07314974743779312]}, "mutation_prompt": null}
{"id": "d1f67ba9-e1ea-4448-9e1d-3a7e79942349", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                new_position = positions[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_score = func(new_position)\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n\n                positions[i] = new_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                        trial[j] = mutant[j]\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            global_best_idx = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_idx]\n            global_best_score = personal_best_scores[global_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Novel Hybrid Exploration-Exploitation Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for dynamic balance and diversification in search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fca78ce-0550-4e89-887b-9528c5282d92", "metadata": {"aucs": [0.7301733583735963, 0.7339088815143957, 0.7069640679968311, 0.7302974237824258, 0.7134990375246006, 0.7304106128485124, 0.7479855077029585, 0.7294385854121359, 0.7014733743931243, 0.4821986441510556, 0.5072077217146134, 0.4972097735857296, 0.4488624065612117, 0.46834323549273116, 0.48827922101029875, 0.45736379699891605, 0.4943385404158098, 0.4958794443624923, 0.14373862666470538, 0.1279324027864599, 0.18607277989750381, 0.12233566775495341, 0.12353424056448203, 0.19140913042124308, 0.11907134091942828, 0.10872050260397659, 0.11243223095901633, 0.10811627917795796, 0.10012905944699035, 0.11521941123927049, 0.11804748715633762, 0.1603095634934023, 0.10100728328939568, 0.10643553703678521, 0.11922006528403728, 0.10915207959844808, 0.9779274018203822, 0.9884307511400007, 0.9756144920658965, 0.9586145576155368, 0.9806667520799643, 0.9792727866998175, 0.9751472822872409, 0.968191568870718, 0.9733282341918461, 0.45290740523325324, 0.39055931245730835, 0.336311040004035, 0.30204235089929465, 0.367367062168208, 0.42055373308607213, 0.32190478395503663, 0.32562646717983734, 0.32697997395062683, 0.6825339031446338, 0.6226399691550564, 0.656843255629369, 0.6670365680510213, 0.7134095485714772, 0.74162091480292, 0.6652603651474767, 0.7000897050487804, 0.6917184549067724, 0.1527288021314387, 0.16810396869691957, 0.15449167967218347, 0.36621054339449055, 0.2134839431944242, 0.1984957536459513, 0.19087551053061103, 0.2862786995191, 0.19894975292703754, 0.17866241793752846, 0.13792602735584647, 0.3460878811482804, 0.2005370860512119, 0.1320382804815523, 0.27505192905915454, 0.15335453988631742, 0.20835544098125325, 0.19385803795281265, 0.2976252922036554, 0.2642238487560171, 0.2597335690891204, 0.21547630530351103, 0.2793774452095835, 0.21819193001777437, 0.26677174379648916, 0.20879634934791558, 0.2690816923253361, 0.40596818145290336, 0.4069070670004301, 0.42144630530606575, 0.2889492451143847, 0.376781440704441, 0.41294767356339657, 0.422722875591811, 0.4077660372143336, 0.40586029956317093, 0.08937366091889931, 0.0860624611957197, 0.1013102732511243, 0.10660555329877097, 0.1629122649727759, 0.12847276800669827, 0.12363631064947966, 0.1333339771304507, 0.09451520672215552, 0.24253928635876876, 0.22694894203160165, 0.20934271119489944, 0.23851336496798736, 0.22301174810780144, 0.23675109287120033, 0.23910970051546143, 0.21376048720046503, 0.23827299506754773, 0.557618639271019, 0.5636421452690674, 0.6470343883969498, 0.625695062127539, 0.6066372110595545, 0.6348284664459005, 0.6144571007267261, 0.5917684988900185, 0.6167855657726906, 0.10212036221096654, 0.10413816851806423, 0.10506635539631748, 0.13046486313873573, 0.12743918621299055, 0.09112942023549875, 0.10707087979370755, 0.09085443920215275, 0.12675137622984967, 0.1885512974174779, 0.2370626697591275, 0.1736439305341586, 0.3155037398943308, 0.32983880130277143, 0.20422804036049347, 0.22097419300543186, 0.19931382465168412, 0.25175241255351744, 0.3386998951879516, 0.33215301250906637, 0.34833561919995726, 0.32747573813373954, 0.3568653661837764, 0.33887056307981167, 0.39686405707582795, 0.39055137124838324, 0.33263225312009526, 0.27634427867259714, 0.2957021758469045, 0.2762965490460908, 0.26481546914432696, 0.2752382880339135, 0.28656258496387, 0.27599224001842904, 0.2626849199118225, 0.2996925875897778, 0.2236003388576684, 0.20254584868579018, 0.19085743360098606, 0.21440975068069879, 0.20075632588794412, 0.20244827359339224, 0.19544856262617982, 0.21457456095103855, 0.19024499574889464, 0.21766888244011384, 0.3830726739184288, 0.20554038742565872, 0.1973081731117562, 0.202763587132045, 0.2002349808747651, 0.20970881337658887, 0.2151099150672383, 0.21947827293371924, 0.692296139255981, 0.17754951214882364, 0.16452426763233907, 0.8208501510500071, 0.40711980409618675, 0.5794858344820094, 0.16499942755034025, 0.3856239834426004, 0.8284703307715935, 0.6557499822260207, 0.20889939141029512, 0.4754776641899916, 0.29258055708169894, 0.45679874453674085, 0.1962067845437261, 0.5582243439441512, 0.2063844187891276, 0.5056179935066573, 0.1878587506257109, 0.18655301793417378, 0.18797267755127278, 0.1877171075265478, 0.216165259368719, 0.19209336474094918, 0.20624877319732715, 0.1929247251915609, 0.20855609063321723, 0.08505641818366272, 0.07465702749356573, 0.07863619717883286, 0.08403106846629904, 0.07758429692010083, 0.0916866551033132, 0.08196892555591295, 0.08285909288071269, 0.07314974743779312]}, "mutation_prompt": null}
{"id": "315b79ce-26cb-43c3-b857-b861c8e3ea91", "solution": "import numpy as np\n\nclass OptimizedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and DE population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        population = np.copy(positions)\n        scores = np.copy(personal_best_scores)\n\n        # Evaluate initial particles\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Combined PSO and DE Update\n            for i in range(self.population_size):\n                # PSO step\n                if evaluations < self.budget:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.w * velocities[i] +\n                                     self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                     self.c2 * r2 * (global_best_position - positions[i]))\n                    positions[i] += velocities[i]\n                    np.clip(positions[i], self.lower_bound, self.upper_bound, out=positions[i])\n                    new_score = func(positions[i])\n                    evaluations += 1\n                    if new_score < personal_best_scores[i]:\n                        personal_best_scores[i] = new_score\n                        personal_best_positions[i] = positions[i]\n\n                # DE step\n                if evaluations < self.budget:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                    a, b, c = indices[0], indices[1], indices[2]\n                    mutant = population[a] + self.F * (population[b] - population[c])\n                    np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, population[i])\n                    trial_score = func(trial)\n                    evaluations += 1\n                    if trial_score < scores[i]:\n                        scores[i] = trial_score\n                        population[i] = trial\n\n            # Update Global Best\n            global_best_idx = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_idx]\n            global_best_score = personal_best_scores[global_best_idx]\n\n        return global_best_position, global_best_score", "name": "OptimizedHybridPSODE", "description": "Streamlined HybridPSODE algorithm with optimized loop structures and reduced redundant evaluations for improved runtime efficiency.", "configspace": "", "generation": 7, "fitness": 0.327681642412476, "feedback": "The algorithm OptimizedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "3fca78ce-0550-4e89-887b-9528c5282d92", "metadata": {"aucs": [0.7285661722392931, 0.7000241729791347, 0.7342839275263796, 0.7279850293166912, 0.7205368469725624, 0.761117266129901, 0.7011851137081127, 0.7359954971362581, 0.7277415257992907, 0.4564835837696545, 0.4942611550270959, 0.49043851870696276, 0.47204468074510875, 0.49160101912537524, 0.4852610450219783, 0.49112382557686807, 0.48643392592863377, 0.49421066664710933, 0.13655564734976855, 0.12359226342974561, 0.1066416516645291, 0.11802185084106498, 0.14814150742285004, 0.13010372610260545, 0.26431110223544885, 0.13201192619002666, 0.1304273487805353, 0.12464243208511983, 0.14097943921208045, 0.10491776816892762, 0.12445303806899077, 0.09588361964291359, 0.10649048013130036, 0.08357179425908057, 0.092962957860795, 0.11184761389249576, 0.975002163049222, 0.9886154665982351, 0.9817912193405746, 0.9614588569709797, 0.9750401043952356, 0.9693737063813985, 0.9819539825333061, 0.9775135275134859, 0.9594224072405065, 0.3949539430650165, 0.3740937339696956, 0.37641190523644363, 0.40461359419299336, 0.311071525418239, 0.280956757348541, 0.35642396636069107, 0.3259676941103271, 0.4321832683045609, 0.6575408248926529, 0.6757148868672134, 0.6269627352519357, 0.7143570754614421, 0.6501032351190031, 0.6371936525322267, 0.7008757896949432, 0.6509504576524072, 0.6460551811566533, 0.16797580433269543, 0.17488301181882104, 0.1471060940229587, 0.15320299422925399, 0.1582963034735374, 0.18261160903902596, 0.2408513063116533, 0.17238192080275871, 0.21763176803786144, 0.16914395860689324, 0.1769918849889044, 0.17207670435281108, 0.17688837316246375, 0.1953381808784761, 0.19724939236759287, 0.34407517973118684, 0.18261206618283, 0.19838041237866033, 0.2600407437653879, 0.196822209463978, 0.20288156873765106, 0.286017935198392, 0.27483840257686687, 0.20835428598020356, 0.24525837001094164, 0.1868795052206489, 0.21939772302886396, 0.3937630570068441, 0.36184050055649764, 0.3652696443420518, 0.349833475615165, 0.349089338118159, 0.30002928498712367, 0.39079045086606556, 0.3994830258451014, 0.38695809227151234, 0.08123037684095458, 0.10318215722901347, 0.0668533649146098, 0.10144072384190261, 0.10005885965056094, 0.17425375514791208, 0.18200272134064632, 0.08846112246163917, 0.10162481011189817, 0.22144792932606305, 0.2207743269769019, 0.2247293477415454, 0.18577145874380852, 0.2410502031176458, 0.22962589591081795, 0.2098577112221791, 0.22006001261250507, 0.23017476732278142, 0.6162682999021108, 0.5870900250819209, 0.5638315305189951, 0.6247442685224618, 0.5709058390757059, 0.5446210600705557, 0.6045429811567133, 0.5384622479192147, 0.5674736092563533, 0.09364836984399172, 0.0991349790334578, 0.09962432475658112, 0.09750982930977403, 0.09967660360874031, 0.09623045880076098, 0.1044962558321475, 0.09405903727741138, 0.11666678166754008, 0.16195742972809601, 0.1778232029512945, 0.1982780494958052, 0.23268870913529838, 0.214329721595779, 0.16509181642434345, 0.18421892876729506, 0.18050134034382814, 0.19081164695429442, 0.3843552728224314, 0.41362871901844256, 0.3407606652960018, 0.3363802701321855, 0.3484496596125062, 0.392783474339248, 0.35273067016403226, 0.40026710987936, 0.33584580293359223, 0.2448070296479632, 0.27303538574130704, 0.27366239552162774, 0.2507678677079621, 0.26893335832402465, 0.23818462157553877, 0.31532958067592354, 0.2957227246760935, 0.2951030735932313, 0.19509101798767847, 0.19248431606788519, 0.20205681985206114, 0.19438731832092349, 0.19687331288015042, 0.1923472676095196, 0.20978181475475166, 0.2137647927330446, 0.20759899791167302, 0.3402971973865738, 0.2087511864021141, 0.24345383004483656, 0.18395450200922303, 0.1923942715906405, 0.2190089306288402, 0.23437303643026575, 0.5272851768177184, 0.20417577544897225, 0.5495561384041754, 0.6523702637031928, 0.17175505613949948, 0.7821285313631329, 0.5743378319492527, 0.7864260864952302, 0.17504798031521673, 0.17335790317501687, 0.7853528807784493, 0.5629961706224047, 0.2055661195601871, 0.5200374879366508, 0.20560828444563295, 0.3560345252637239, 0.19847471133510586, 0.2057616685176229, 0.2055108493453508, 0.5081696897604817, 0.17687233657099877, 0.18861243698406993, 0.18701679214598876, 0.19472175533836766, 0.1942745628694652, 0.19743072600558065, 0.17534853892740554, 0.17662222060656363, 0.1889256736458147, 0.07993290514129203, 0.08148102854240702, 0.09390074555729189, 0.08375727376014908, 0.1060964594611723, 0.08512856596401819, 0.09459535939631747, 0.07675978153802732, 0.0864549027849012]}, "mutation_prompt": null}
{"id": "3dc34955-90cb-43ed-a633-8254d9ba9e44", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                new_position = positions[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_score = func(new_position)\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n\n                positions[i] = new_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                        trial[j] = mutant[j]\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            global_best_idx = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_idx]\n            global_best_score = personal_best_scores[global_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Novel Hybrid Exploration-Exploitation Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for dynamic balance and diversification in search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fca78ce-0550-4e89-887b-9528c5282d92", "metadata": {"aucs": [0.7301733583735963, 0.7339088815143957, 0.7069640679968311, 0.7302974237824258, 0.7134990375246006, 0.7304106128485124, 0.7479855077029585, 0.7294385854121359, 0.7014733743931243, 0.4821986441510556, 0.5072077217146134, 0.4972097735857296, 0.4488624065612117, 0.46834323549273116, 0.48827922101029875, 0.45736379699891605, 0.4943385404158098, 0.4958794443624923, 0.14373862666470538, 0.1279324027864599, 0.18607277989750381, 0.12233566775495341, 0.12353424056448203, 0.19140913042124308, 0.11907134091942828, 0.10872050260397659, 0.11243223095901633, 0.10811627917795796, 0.10012905944699035, 0.11521941123927049, 0.11804748715633762, 0.1603095634934023, 0.10100728328939568, 0.10643553703678521, 0.11922006528403728, 0.10915207959844808, 0.9779274018203822, 0.9884307511400007, 0.9756144920658965, 0.9586145576155368, 0.9806667520799643, 0.9792727866998175, 0.9751472822872409, 0.968191568870718, 0.9733282341918461, 0.45290740523325324, 0.39055931245730835, 0.336311040004035, 0.30204235089929465, 0.367367062168208, 0.42055373308607213, 0.32190478395503663, 0.32562646717983734, 0.32697997395062683, 0.6825339031446338, 0.6226399691550564, 0.656843255629369, 0.6670365680510213, 0.7134095485714772, 0.74162091480292, 0.6652603651474767, 0.7000897050487804, 0.6917184549067724, 0.1527288021314387, 0.16810396869691957, 0.15449167967218347, 0.36621054339449055, 0.2134839431944242, 0.1984957536459513, 0.19087551053061103, 0.2862786995191, 0.19894975292703754, 0.17866241793752846, 0.13792602735584647, 0.3460878811482804, 0.2005370860512119, 0.1320382804815523, 0.27505192905915454, 0.15335453988631742, 0.20835544098125325, 0.19385803795281265, 0.2976252922036554, 0.2642238487560171, 0.2597335690891204, 0.21547630530351103, 0.2793774452095835, 0.21819193001777437, 0.26677174379648916, 0.20879634934791558, 0.2690816923253361, 0.40596818145290336, 0.4069070670004301, 0.42144630530606575, 0.2889492451143847, 0.376781440704441, 0.41294767356339657, 0.422722875591811, 0.4077660372143336, 0.40586029956317093, 0.08937366091889931, 0.0860624611957197, 0.1013102732511243, 0.10660555329877097, 0.1629122649727759, 0.12847276800669827, 0.12363631064947966, 0.1333339771304507, 0.09451520672215552, 0.24253928635876876, 0.22694894203160165, 0.20934271119489944, 0.23851336496798736, 0.22301174810780144, 0.23675109287120033, 0.23910970051546143, 0.21376048720046503, 0.23827299506754773, 0.557618639271019, 0.5636421452690674, 0.6470343883969498, 0.625695062127539, 0.6066372110595545, 0.6348284664459005, 0.6144571007267261, 0.5917684988900185, 0.6167855657726906, 0.10212036221096654, 0.10413816851806423, 0.10506635539631748, 0.13046486313873573, 0.12743918621299055, 0.09112942023549875, 0.10707087979370755, 0.09085443920215275, 0.12675137622984967, 0.1885512974174779, 0.2370626697591275, 0.1736439305341586, 0.3155037398943308, 0.32983880130277143, 0.20422804036049347, 0.22097419300543186, 0.19931382465168412, 0.25175241255351744, 0.3386998951879516, 0.33215301250906637, 0.34833561919995726, 0.32747573813373954, 0.3568653661837764, 0.33887056307981167, 0.39686405707582795, 0.39055137124838324, 0.33263225312009526, 0.27634427867259714, 0.2957021758469045, 0.2762965490460908, 0.26481546914432696, 0.2752382880339135, 0.28656258496387, 0.27599224001842904, 0.2626849199118225, 0.2996925875897778, 0.2236003388576684, 0.20254584868579018, 0.19085743360098606, 0.21440975068069879, 0.20075632588794412, 0.20244827359339224, 0.19544856262617982, 0.21457456095103855, 0.19024499574889464, 0.21766888244011384, 0.3830726739184288, 0.20554038742565872, 0.1973081731117562, 0.202763587132045, 0.2002349808747651, 0.20970881337658887, 0.2151099150672383, 0.21947827293371924, 0.692296139255981, 0.17754951214882364, 0.16452426763233907, 0.8208501510500071, 0.40711980409618675, 0.5794858344820094, 0.16499942755034025, 0.3856239834426004, 0.8284703307715935, 0.6557499822260207, 0.20889939141029512, 0.4754776641899916, 0.29258055708169894, 0.45679874453674085, 0.1962067845437261, 0.5582243439441512, 0.2063844187891276, 0.5056179935066573, 0.1878587506257109, 0.18655301793417378, 0.18797267755127278, 0.1877171075265478, 0.216165259368719, 0.19209336474094918, 0.20624877319732715, 0.1929247251915609, 0.20855609063321723, 0.08505641818366272, 0.07465702749356573, 0.07863619717883286, 0.08403106846629904, 0.07758429692010083, 0.0916866551033132, 0.08196892555591295, 0.08285909288071269, 0.07314974743779312]}, "mutation_prompt": null}
{"id": "1c9675d4-e61d-4e21-8bde-480a9132e467", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.5   # DE scaling factor\n        self.CR = 0.9  # DE crossover probability\n\n    def __call__(self, func):\n        # Initialize particles for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Initialize population for DE\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # PSO Update\n            for i in range(self.population_size):\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                velocities[i] = (self.w * velocities[i] +\n                                 self.c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                                 self.c2 * r2 * (global_best_position - positions[i]))\n                new_position = positions[i] + velocities[i]\n                new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n                # Evaluate new position\n                new_score = func(new_position)\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = new_position\n\n                positions[i] = new_position\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                trial = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < self.CR or j == np.random.randint(self.dim):\n                        trial[j] = mutant[j]\n\n                # Evaluate trial vector\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            global_best_idx = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_idx]\n            global_best_score = personal_best_scores[global_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Novel Hybrid Exploration-Exploitation Algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for dynamic balance and diversification in search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3fca78ce-0550-4e89-887b-9528c5282d92", "metadata": {"aucs": [0.7301733583735963, 0.7339088815143957, 0.7069640679968311, 0.7302974237824258, 0.7134990375246006, 0.7304106128485124, 0.7479855077029585, 0.7294385854121359, 0.7014733743931243, 0.4821986441510556, 0.5072077217146134, 0.4972097735857296, 0.4488624065612117, 0.46834323549273116, 0.48827922101029875, 0.45736379699891605, 0.4943385404158098, 0.4958794443624923, 0.14373862666470538, 0.1279324027864599, 0.18607277989750381, 0.12233566775495341, 0.12353424056448203, 0.19140913042124308, 0.11907134091942828, 0.10872050260397659, 0.11243223095901633, 0.10811627917795796, 0.10012905944699035, 0.11521941123927049, 0.11804748715633762, 0.1603095634934023, 0.10100728328939568, 0.10643553703678521, 0.11922006528403728, 0.10915207959844808, 0.9779274018203822, 0.9884307511400007, 0.9756144920658965, 0.9586145576155368, 0.9806667520799643, 0.9792727866998175, 0.9751472822872409, 0.968191568870718, 0.9733282341918461, 0.45290740523325324, 0.39055931245730835, 0.336311040004035, 0.30204235089929465, 0.367367062168208, 0.42055373308607213, 0.32190478395503663, 0.32562646717983734, 0.32697997395062683, 0.6825339031446338, 0.6226399691550564, 0.656843255629369, 0.6670365680510213, 0.7134095485714772, 0.74162091480292, 0.6652603651474767, 0.7000897050487804, 0.6917184549067724, 0.1527288021314387, 0.16810396869691957, 0.15449167967218347, 0.36621054339449055, 0.2134839431944242, 0.1984957536459513, 0.19087551053061103, 0.2862786995191, 0.19894975292703754, 0.17866241793752846, 0.13792602735584647, 0.3460878811482804, 0.2005370860512119, 0.1320382804815523, 0.27505192905915454, 0.15335453988631742, 0.20835544098125325, 0.19385803795281265, 0.2976252922036554, 0.2642238487560171, 0.2597335690891204, 0.21547630530351103, 0.2793774452095835, 0.21819193001777437, 0.26677174379648916, 0.20879634934791558, 0.2690816923253361, 0.40596818145290336, 0.4069070670004301, 0.42144630530606575, 0.2889492451143847, 0.376781440704441, 0.41294767356339657, 0.422722875591811, 0.4077660372143336, 0.40586029956317093, 0.08937366091889931, 0.0860624611957197, 0.1013102732511243, 0.10660555329877097, 0.1629122649727759, 0.12847276800669827, 0.12363631064947966, 0.1333339771304507, 0.09451520672215552, 0.24253928635876876, 0.22694894203160165, 0.20934271119489944, 0.23851336496798736, 0.22301174810780144, 0.23675109287120033, 0.23910970051546143, 0.21376048720046503, 0.23827299506754773, 0.557618639271019, 0.5636421452690674, 0.6470343883969498, 0.625695062127539, 0.6066372110595545, 0.6348284664459005, 0.6144571007267261, 0.5917684988900185, 0.6167855657726906, 0.10212036221096654, 0.10413816851806423, 0.10506635539631748, 0.13046486313873573, 0.12743918621299055, 0.09112942023549875, 0.10707087979370755, 0.09085443920215275, 0.12675137622984967, 0.1885512974174779, 0.2370626697591275, 0.1736439305341586, 0.3155037398943308, 0.32983880130277143, 0.20422804036049347, 0.22097419300543186, 0.19931382465168412, 0.25175241255351744, 0.3386998951879516, 0.33215301250906637, 0.34833561919995726, 0.32747573813373954, 0.3568653661837764, 0.33887056307981167, 0.39686405707582795, 0.39055137124838324, 0.33263225312009526, 0.27634427867259714, 0.2957021758469045, 0.2762965490460908, 0.26481546914432696, 0.2752382880339135, 0.28656258496387, 0.27599224001842904, 0.2626849199118225, 0.2996925875897778, 0.2236003388576684, 0.20254584868579018, 0.19085743360098606, 0.21440975068069879, 0.20075632588794412, 0.20244827359339224, 0.19544856262617982, 0.21457456095103855, 0.19024499574889464, 0.21766888244011384, 0.3830726739184288, 0.20554038742565872, 0.1973081731117562, 0.202763587132045, 0.2002349808747651, 0.20970881337658887, 0.2151099150672383, 0.21947827293371924, 0.692296139255981, 0.17754951214882364, 0.16452426763233907, 0.8208501510500071, 0.40711980409618675, 0.5794858344820094, 0.16499942755034025, 0.3856239834426004, 0.8284703307715935, 0.6557499822260207, 0.20889939141029512, 0.4754776641899916, 0.29258055708169894, 0.45679874453674085, 0.1962067845437261, 0.5582243439441512, 0.2063844187891276, 0.5056179935066573, 0.1878587506257109, 0.18655301793417378, 0.18797267755127278, 0.1877171075265478, 0.216165259368719, 0.19209336474094918, 0.20624877319732715, 0.1929247251915609, 0.20855609063321723, 0.08505641818366272, 0.07465702749356573, 0.07863619717883286, 0.08403106846629904, 0.07758429692010083, 0.0916866551033132, 0.08196892555591295, 0.08285909288071269, 0.07314974743779312]}, "mutation_prompt": null}
{"id": "a18bc653-25fc-4710-b835-5776ebb3048f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 10, "fitness": 0.34687045299754665, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "3fca78ce-0550-4e89-887b-9528c5282d92", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "27712775-444c-4d94-8660-883bdc4ba324", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "5c7e16c8-0431-449e-825a-7a6634925763", "solution": "import numpy as np\nfrom multiprocessing import Pool\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1_initial = 1.5\n        self.c2_initial = 1.5\n        self.w_initial = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n        self.alpha = 0.99  # Damping factor\n\n    def evaluate_population(self, func, positions):\n        with Pool() as pool:\n            return pool.map(func, positions)\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        scores = np.array(self.evaluate_population(func, positions))\n        personal_best_scores = scores.copy()\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # Adaptation of PSO parameters and velocity update\n            c1 = self.c1_initial * (self.alpha ** (evaluations / self.population_size))\n            c2 = self.c2_initial * (self.alpha ** (evaluations / self.population_size))\n            w = self.w_initial * (self.alpha ** (evaluations / self.population_size))\n\n            velocities = (w * velocities +\n                          c1 * r1 * (personal_best_positions - positions) +\n                          c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            new_scores = np.array(self.evaluate_population(func, positions))\n            evaluations += self.population_size\n\n            # Update personal bests\n            improved = new_scores < personal_best_scores\n            personal_best_scores[improved] = new_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE with adaptive parameters and parallel evaluations for enhanced efficiency.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"cannot pickle 'ioh.iohcpp.problem.Sphere' object\").", "error": "TypeError(\"cannot pickle 'ioh.iohcpp.problem.Sphere' object\")", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {}, "mutation_prompt": null}
{"id": "97535e71-0d2d-4f6a-acea-37f6f1175711", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "9aed4837-a405-423a-bd1b-4bf6e93c3cea", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "17a52ccf-68d3-43a7-acfb-bee51533bb3a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "e0f94cb5-90bd-4cd6-92b7-d8b83c86e5b0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "f983b520-9a72-472d-a202-7ecba09ad3a4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "9250297f-08ce-4fb6-8073-861223bc5c90", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "8bbf8417-d696-40a2-a4f6-740425cf50d4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "d9e68cfb-a76e-4f7c-b141-b0cd8e36aa0c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "3952d1bd-1416-41dc-89c3-e0e607cb74a7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "01bd83d0-35d6-4574-ab89-59e99bc9eaad", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "b7b858a2-5bc0-4708-ab56-3848e301dc0a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "3debfd7b-d16e-4d79-9cf0-3a7d89b37409", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "bba61d18-2388-4f1e-b102-183d1aa21777", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "dd3dbd1b-cd8e-4407-98f1-c49c8d648239", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "9397a764-4b92-44b4-b711-3a84c2495160", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "2bb5a93e-4316-4bae-a724-32ff7675a786", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "5cbdbbb6-df85-42b4-a516-c8527ac38143", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "97fc5f5f-1617-4100-a491-3e9dd355e49e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialization\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles\n        scores = np.array([func(pos) for pos in positions])\n        personal_best_scores = np.copy(scores)\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * evaluations / self.budget)\n            \n            # PSO Update\n            velocities = (inertia_weight * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Efficient evaluation\n            new_scores = np.array([func(pos) for pos in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            better_mask = new_scores < personal_best_scores\n            personal_best_positions[better_mask] = positions[better_mask]\n            personal_best_scores[better_mask] = new_scores[better_mask]\n            \n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE with adaptive inertia and reduced evaluations for increased efficiency.", "configspace": "", "generation": 30, "fitness": 0.33722356942853593, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.24.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7330150503239131, 0.7070751253401477, 0.7177907938548869, 0.707141993642499, 0.7107639050589984, 0.7473204831258923, 0.6961444143944774, 0.7016554835586892, 0.6885208790051601, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.13000498070357303, 0.1307820554641126, 0.10881891130289245, 0.12712872027795052, 0.373124881630998, 0.14151618390512555, 0.1197926368044393, 0.11498264627851751, 0.12124589334509817, 0.11026891807668748, 0.1119776394933979, 0.12403437963703978, 0.12200743894811694, 0.12112911212284383, 0.10846319323971731, 0.10986709074465473, 0.10623587083149355, 0.10501428639063337, 0.9810450186307937, 0.9866751820236795, 0.981902976940118, 0.9579709493479488, 0.9740449910420048, 0.9665414880471094, 0.982056852441184, 0.9805348810640426, 0.9741066514648471, 0.3891549562449208, 0.3162495533028167, 0.3077983543698266, 0.38213911394856614, 0.3273894549670434, 0.3478138513276704, 0.31702314406830234, 0.3312303407316617, 0.35015573835490077, 0.6930969643550486, 0.643385616097626, 0.7309784889136943, 0.7268933703753617, 0.7559212518030876, 0.6760795363113329, 0.6400140197260797, 0.7287338383362243, 0.707078690840981, 0.25305473947355295, 0.18184356422630554, 0.17299790381147995, 0.20322597921072982, 0.2082383250252644, 0.2888931602739655, 0.23991287780959758, 0.13871345561294113, 0.1604061465235036, 0.15920214075074146, 0.15886223532654697, 0.09274389348377787, 0.18896111420492612, 0.1959782433402314, 0.14486427915536682, 0.17956894448593141, 0.19545284498857418, 0.1815101407074592, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3984656070199487, 0.3823100715381512, 0.36532817393608663, 0.41916347704137347, 0.4004531432814916, 0.3517211378585119, 0.41232331239669906, 0.45236568855985004, 0.4228866774051969, 0.07209129336088793, 0.11953001228923599, 0.17622533111993366, 0.13866504962242687, 0.1397374346591148, 0.10020266914774367, 0.12665199832637153, 0.12105623904158092, 0.09920009094005378, 0.2298828616338675, 0.2357396050570193, 0.22906837231666954, 0.21616175421099537, 0.24637012178135942, 0.241237664596597, 0.23534755576224498, 0.2358891216845096, 0.2168445411560117, 0.5688659057376959, 0.5985467809319255, 0.5508793441142616, 0.5876688641965899, 0.6184623800898887, 0.5501305536752523, 0.5819387470790182, 0.628031851191214, 0.5975096337295713, 0.08125247998099205, 0.08605211496942089, 0.09396474302765034, 0.12132777902403491, 0.0970731382809541, 0.10104289412299317, 0.09120507225039454, 0.0960017739329111, 0.09779707244915448, 0.1564291370831179, 0.15218768459477783, 0.19029561968079745, 0.21325687638298496, 0.2278470858950371, 0.2839907295391503, 0.18801699789028958, 0.19219425113154076, 0.18573912663751813, 0.3238964771533145, 0.3402967200565761, 0.3409187792721796, 0.33087651793802875, 0.34886635706013647, 0.33776188564718335, 0.3337183006587482, 0.3693272673543804, 0.39729484609174837, 0.2800479767386871, 0.30070728896852716, 0.2446089092591751, 0.25195420818510283, 0.2495918568496075, 0.27376989304003174, 0.2962725287269996, 0.27514994801460313, 0.2779667530798763, 0.21434926868595516, 0.18731315618412914, 0.19372421980415322, 0.22135050221246588, 0.18765182450719065, 0.1914641100264184, 0.21214506092677288, 0.19099173874077913, 0.19551178880671083, 0.2004033491822803, 0.18136979696490074, 0.18404176040182452, 0.41687036336748573, 0.19440820219838817, 0.19775154504848236, 0.46050453218864495, 0.19714894154799445, 0.40278138399155694, 0.8028395787041902, 0.1844495638997753, 0.17942108453740235, 0.6982456619813883, 0.19440926832655703, 0.6866278722556667, 0.484703721786347, 0.5511176251244794, 0.7141175755735611, 0.6667052493036334, 0.3231828130368122, 0.6594822882327197, 0.1988463382250265, 0.22159226965600132, 0.16341678626076517, 0.6001738909552735, 0.6407909898993045, 0.6386916021292461, 0.2000734475180792, 0.19508757325297843, 0.18949385175728117, 0.1958583549846863, 0.18364129838975918, 0.18730052137948017, 0.18319925432769146, 0.21715910840247232, 0.1814173842999135, 0.09515307981362131, 0.0736560482290397, 0.07399509817612071, 0.08714147242919312, 0.08509863252953997, 0.08504766458291124, 0.09984769557399942, 0.08038879967366064, 0.07943941486005546]}, "mutation_prompt": null}
{"id": "25bc4348-6172-4857-ac34-b0a321117f27", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "716fde35-89be-4e21-bebc-6ae5d4d63d5f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "fc9279d7-f709-4448-bf91-0a137a86fbb7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "e2c1bce4-1926-4926-b617-0880e03169d0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and velocities\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.apply_along_axis(func, 1, particles)\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - particles) +\n                          self.c2 * r2 * (global_best_position - particles))\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions and update personal bests\n            new_scores = np.apply_along_axis(func, 1, particles)\n            evaluations += self.population_size\n            better_mask = new_scores < personal_best_scores\n            personal_best_scores = np.where(better_mask, new_scores, personal_best_scores)\n            personal_best_positions = np.where(better_mask[:, None], particles, personal_best_positions)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(particles[indices[0]] + self.F * (particles[indices[1]] - particles[indices[2]]), self.lower_bound, self.upper_bound)\n                jrand = np.random.randint(0, self.dim)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[jrand] = True  # Ensure at least one dimension is taken\n                trial = np.where(crossover_mask, mutant, particles[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < new_scores[i]:\n                    new_scores[i] = trial_score\n                    particles[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE by optimizing memory usage and reducing function calls for improved runtime efficiency.", "configspace": "", "generation": 34, "fitness": 0.2227686450541689, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.6992192703712499, 0.6780631853800494, 0.6636329361407264, 0.7006244810354508, 0.25984575503861984, 0.6808466417656982, 0.6292735791075608, 0.6884520076783449, 0.645814646300624, 0.31753278456964795, 0.3049112136362617, 0.06870788520694115, 0.21002029107133324, 0.3006032417861866, 0.331926920451872, 0.144815054438579, 0.13934106071594776, 0.3126156785610271, 0.11638667629338562, 0.10397675572531284, 0.1630444284010868, 0.1106034490169403, 0.1052738561079466, 0.06775222860166397, 0.08720227665940472, 0.11133960243005492, 0.10004605942473532, 0.10063146279061108, 0.07308314448316289, 0.11898163659739092, 0.11542819639411395, 0.11885852412410258, 0.1058202732403104, 0.08594171424393371, 0.12932219758594088, 0.10586483706445893, 0.9759771501115657, 0.9818245890404013, 0.981326781901097, 0.9734774422485024, 0.972542090501173, 0.9751274614143559, 0.9813779114135627, 0.980568288815036, 0.9673351097782719, 0.21444219178797896, 0.2196426895204504, 0.2198588326892824, 0.1421025459174492, 0.19937411320619958, 0.24163866486665508, 0.12191460583179048, 0.22550773666207635, 0.2331093527732111, 0.2245132823494721, 0.2076486510438329, 0.2193659480712291, 0.19176051207284595, 0.2604744864057582, 0.19242510169295923, 0.20148716548693935, 0.13032879508317996, 0.2022846813479089, 0.16679365340093066, 0.14865633292896274, 0.14811849343894334, 0.08893822121087525, 0.1242884825102838, 0.15373912606189755, 0.1486210857462631, 0.1419934367398622, 0.1566964184604207, 0.1673395122535538, 0.11140940159456225, 0.09342439656994406, 0.15455712430980328, 0.13959029762376973, 0.1253747354348841, 0.11647666666699041, 0.07760260953910625, 0.17280366775908018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004702421133207957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05563799095715605, 0.029290444966280527, 0.03800736450840125, 0.056954068769404564, 0.011481313142018501, 0.055310905615012285, 0.04533634400118902, 0.051721204671503984, 0.05086931110855253, 0.033601883541944155, 0.011616457398933244, 0.11749450744788426, 0.04751726878504814, 0.17654049638759228, 0.06436320073694313, 0.08948723530549396, 0.0652522187121769, 0.04792539324699341, 0.024966314095222653, 0.1863541134259883, 0.13137514023494257, 0.006556109936748156, 0.06778454615363716, 0.06889146341693153, 0.035129836254835345, 0.07632625630259804, 0.09542705783895322, 0.4146935716326485, 0.42023812435153873, 0.4287058998967064, 0.3566167919640205, 0.4489205359458577, 0.43771309466937713, 0.47617768603480826, 0.46949578399624436, 0.434923747615265, 0.11335287117964876, 0.08442299727820024, 0.06839755205516229, 0.0904044509877242, 0.07156400418947217, 0.13057367036466205, 0.08444963526056493, 0.07543200730185384, 0.10036180359336921, 0.1732169462177533, 0.15798822346729358, 0.14034046830474423, 0.1328748961639018, 0.13815385387574097, 0.1677889784270552, 0.12663557402015502, 0.1261211185497081, 0.14565335738693952, 0.30880670081420736, 0.2694067190970991, 0.26945047185409055, 0.3049987179276904, 0.2910924980033649, 0.3013130567390967, 0.2538746687685275, 0.312923746585976, 0.291811015887229, 0.21203814527295706, 0.1623156807829892, 0.2728449774687166, 0.25636896643418283, 0.1761606730127755, 0.2661814088231711, 0.21520488664176174, 0.2514304930389587, 0.14539230640697876, 0.16721679063928774, 0.1779899079632169, 0.17433148016825384, 0.20407358187511104, 0.18084015502723394, 0.1656379006406853, 0.17825870712674952, 0.17882555241427822, 0.1758569956402234, 0.19733570119590116, 0.17402562242327935, 0.21491272335052247, 0.21249698515859838, 0.18117460360932536, 0.1867477379047323, 0.20809671345912417, 0.18110920165937128, 0.185903799083878, 0.6721024024181844, 0.16347374682119242, 0.16435128118108988, 0.7575687406098269, 0.19803897433801287, 0.19677365096848354, 0.18516027382893663, 0.16871050349101757, 0.7936753666475298, 0.513257169899203, 0.20905010973734905, 0.24903739898377675, 0.20822969343203745, 0.25483695453089483, 0.14349774373880442, 0.1630048829304689, 0.19612335892255517, 0.26437331428877986, 0.19087458668444346, 0.26241892185882554, 0.17152447119991499, 0.17958604409845136, 0.18157206270892867, 0.17837052578486712, 0.19429019842255058, 0.1855248602204007, 0.19596068251213805, 0.08320785353884419, 0.07107535951025801, 0.07982578946393037, 0.06642141299736881, 0.062404195450437516, 0.06715980664664278, 0.07434369727633361, 0.06072856221101541, 0.07342113189743482]}, "mutation_prompt": null}
{"id": "03d3d572-0205-4d94-9e13-2a94e5c8fa54", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        \n        # Personal bests\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)  # Vectorized evaluation\n\n        # Initial global best\n        personal_best_scores = scores  # Initial personal best scores\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions only once\n            new_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            # Update personal bests\n            improved = new_scores < personal_best_scores\n            personal_best_scores[improved] = new_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(positions[a] + self.F * (positions[b] - positions[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    positions[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE for runtime efficiency by optimizing data structures and reducing function evaluations.", "configspace": "", "generation": 35, "fitness": 0.20391574208359722, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.6089419669803522, 0.3296199179565522, 0.27159468965759714, 0.6076371414359751, 0.6673911489269635, 0.3286685805886145, 0.6393158358543274, 0.2617239369364086, 0.6849674752445531, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002461921741556683, 0.051797674449723496, 0.042267277392439406, 0.07833644824421482, 9.999999999998899e-05, 0.29031409957136856, 0.10280868936280863, 0.11358664731757562, 0.12100827060458663, 0.11140131532702469, 0.06880559260412122, 0.10872852954576195, 0.1505357688624276, 0.14867991674930803, 0.16547970374299825, 0.11320238871925192, 0.0453861535615655, 0.08079245093193566, 0.14415495712785487, 0.12110201630534612, 0.09444286310672234, 0.06712520761318097, 0.060252300695550765, 0.10289423049133184, 0.9744778346522561, 0.9820247830725863, 0.9845942652462379, 0.9560452573776346, 0.9560824124005874, 0.9594693855741165, 0.9819586972138742, 0.9805001053574849, 0.1550026383090377, 0.13582420316009625, 0.07489800702955218, 0.05891238281706668, 0.3368536354600389, 0.12223912878245824, 0.17453400810956776, 0.16351975635958937, 0.11070834261983076, 0.4233594014231238, 0.1623050103285999, 0.1870029075335985, 0.17066041262655052, 0.3015585812081484, 0.49908310807124034, 0.290369592682894, 0.13901684205248532, 0.17104328172416605, 0.1430576069503724, 0.07973884926671349, 0.14479234507631622, 0.11627611153313233, 0.09352090947589753, 0.12611907207528306, 0.022030333458937124, 0.1727183691628854, 0.09773149789778313, 0.10990881511898465, 0.15369523704085641, 0.12900557189650286, 0.0957278533957413, 0.13932549928065108, 0.06312070549579729, 0.11993585853962818, 0.12358826609983298, 0.0982111406067534, 0.11537922922213151, 9.999999999998899e-05, 9.999999999998899e-05, 0.004275584216855477, 0.04136121453148556, 9.999999999998899e-05, 9.999999999998899e-05, 0.007335880965268049, 9.999999999998899e-05, 0.030677641434069702, 0.07621598125321327, 0.044927923700909145, 0.09927927823140092, 0.06347977144221062, 0.016897038428111966, 0.03823587403275963, 0.04464658686802392, 0.07007184426557911, 0.023120536957046744, 0.002982921495747859, 0.023992977611893895, 9.999999999998899e-05, 0.04548570827374865, 0.0636501099214225, 0.08724433576502211, 0.07278384917957825, 0.07704023396214466, 0.0014744923217157035, 0.055387407717520376, 0.025388692991081374, 0.017498610431947448, 0.08041365338341, 0.1337241522301751, 0.10064730407625722, 0.05234027226373561, 0.1260157244170097, 0.07696574469877082, 0.36425915460731817, 0.45099037097772654, 0.3225590517673027, 0.39348572002486093, 0.21091475746754995, 0.3971646139804257, 0.4613635615447568, 0.3621825121927077, 0.3533324116879265, 0.054787888021354925, 0.09651733802459117, 0.05435134827279575, 0.0889192319720622, 0.06605071206060709, 0.10707618266761076, 0.09307290292870041, 0.09940846706027129, 0.07199962910907776, 0.15476028746494308, 0.16318183467552172, 0.17189352948420566, 0.19160270060068574, 0.31562878811008455, 0.17677204313136685, 0.1777934772946117, 0.1992157243079783, 0.18512069982105528, 0.2381335763272867, 0.31518110087251827, 0.34388673341708265, 0.2997972575768507, 0.1825838912955139, 0.3034920117780725, 0.21218359138357024, 0.22022666560798876, 0.2656459705716335, 0.16438457226023406, 0.14627312887419053, 0.13962254808930863, 0.2025482292930264, 0.1263472780274928, 0.1924272346686613, 0.15762077742776637, 0.3217416804754688, 0.2264097089443866, 0.20670421274830397, 0.19103055694034532, 0.18103880560697438, 0.19314341518857858, 0.18020241331448628, 0.2033985761770889, 0.21810332598362536, 0.19266419426355952, 0.18508735548451938, 0.1899623445822275, 0.18769509960277442, 0.18395790824167702, 0.18578533005127906, 0.17906993786161618, 0.17396437386686592, 0.2110878911523988, 0.16059338751929808, 0.175122237784197, 0.3734528248319595, 0.19471368796868427, 0.16599241925994723, 0.8304995040581057, 0.18560637843862993, 0.7323765437894212, 0.1657127094168751, 0.1686042951567075, 0.8122397133939105, 0.5989631222332374, 0.16750201308295543, 0.341952355416853, 0.19942632738109856, 0.16758960041399384, 0.3836968095130411, 0.2043779388385979, 0.5625286229738062, 0.21259762511709424, 0.21422825269669388, 0.19065693820523588, 0.18312428399859293, 0.19927009295789544, 0.1767969895231618, 0.187559672221283, 0.18400444666710025, 0.17636223568617715, 0.18526627959879038, 0.07388030610583263, 0.06260435486789828, 0.06811721893955947, 0.07383194751589839, 0.06577115962586555, 0.08213469890812919, 0.07760918563971242, 0.06337812868662984, 0.08815135647092198]}, "mutation_prompt": null}
{"id": "6a6e330f-0c3c-4fe2-8fd2-703e57e2e657", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "4184054a-7a0e-4c38-a46e-e4262117d71b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "36288965-092e-47a4-bda3-8861c0707c54", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "cfbcd917-2041-456b-b659-4d625270b391", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population using vectorized approach\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Efficient evaluation of initial particles\n        scores = np.apply_along_axis(func, 1, positions)\n        personal_best_scores = scores.copy()\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # Vectorized PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions efficiently\n            new_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            # Update personal bests using a mask\n            better_mask = new_scores < personal_best_scores\n            personal_best_scores[better_mask] = new_scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            # DE Mutation and Crossover using vectorized operations\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(personal_best_positions[a] + self.F * (personal_best_positions[b] - personal_best_positions[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    positions[i] = trial\n\n            # Update Global Best using numpy operations\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE using vectorized operations and efficient updates for enhanced runtime efficiency.", "configspace": "", "generation": 39, "fitness": 0.22861560747155887, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.6012905546198775, 0.5848562657349743, 0.6204447883987513, 0.6147829793431547, 0.6260953296212035, 0.6010208324967858, 0.6180236430151691, 0.6224981768011978, 0.5355981499751784, 0.2671370068435426, 0.03397280654649659, 9.999999999998899e-05, 0.2848665625566996, 0.003865773306882092, 0.19264382118992707, 0.04407460984380118, 0.014451493661309156, 9.999999999998899e-05, 0.12053190031056182, 0.13707680086389973, 0.12529263309642624, 0.12018031921482775, 0.09608167709665427, 0.11693660806609296, 0.15676731423329127, 0.12993169078708522, 0.12408816331659511, 0.10282701158314789, 0.10167371432924555, 0.10413052697443204, 0.11292930222421671, 0.10243457488354546, 0.10859396952604672, 0.09835670205424651, 0.0967171979564404, 0.09384823902951844, 0.9792032696840617, 0.9818794487599956, 0.9811710405338112, 0.9679181465215178, 0.9813854501516082, 0.966255438762992, 0.9817845859183739, 0.9804450449601063, 0.9781310020500059, 0.33046178978781093, 0.2832825404061978, 0.2519313254394705, 0.3218844943175363, 0.16053302704558714, 0.14661711213014073, 0.12419770776829409, 0.28887990919940465, 0.31284390274608864, 0.22013537948698714, 0.5179083046338309, 0.23178038835443715, 0.2205744467041606, 0.24565249144064671, 0.28677464160509036, 0.14245058641567032, 0.21834791527277297, 0.11416208067123657, 0.15536650069046576, 0.15594853384798246, 0.14119290513469607, 0.0944822225560572, 0.12195310267573367, 0.15102566707190634, 0.15844272154277428, 0.16706142960657622, 0.16980755943624104, 0.1668231308751933, 0.16029806378645794, 0.14691865959721595, 0.15286386866296287, 0.14302276290775606, 0.1718055556388528, 0.18931113370465613, 0.11438693208223272, 0.1563716955484199, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036675767368212764, 0.005006245526637754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01480935119170912, 0.05957998548066712, 0.0467201950081273, 0.09652462067098444, 0.11407307020051416, 0.016623191102374424, 0.044667217752141886, 0.06641052880395037, 0.07112510296971719, 0.10471800194421321, 0.038758541209953146, 9.999999999998899e-05, 0.07416518105889336, 0.04341456236243846, 0.07397204346677066, 0.044487392308993345, 0.05404538498848965, 0.058630901168019944, 0.037876903370401616, 0.12200760838102165, 0.03899332319783699, 0.12235892413194649, 0.011214849945158645, 0.034047232345664424, 0.09624907745761668, 0.04429003068932813, 0.0878366958705632, 0.07201876895805981, 0.4289256718133122, 0.43547229919350317, 0.47844594177621624, 0.4832843719819535, 0.45449637684912914, 0.4202938079863314, 0.47027181887874336, 0.42330661102363065, 0.45582290284428706, 0.12399262872096828, 0.06262357893580595, 0.0649724768643839, 0.13274594974194875, 0.09721971472385882, 0.10402094447359012, 0.11516888074570142, 0.08547646668743603, 0.09735482417317198, 0.1686299269412217, 0.19150368731395973, 0.17656337538792155, 0.2239522624537258, 0.258384958254983, 0.27375700702037353, 0.29882606924209587, 0.24490744138004383, 0.1680325758283785, 0.32265793664411035, 0.33937105456722105, 0.2754939223199727, 0.2505681546311471, 0.31596269479881434, 0.2893581416418082, 0.33084768744713866, 0.32370689386872953, 0.20685439900489677, 0.21136301797968515, 0.18594562206787313, 0.2523739753994956, 0.2495162042312169, 0.22803296239869086, 0.25359414181990414, 0.24211268522818818, 0.29952715003253527, 0.25341879353268026, 0.1942348371700131, 0.159892820758881, 0.21098111537042186, 0.18022791832234075, 0.18607467558865332, 0.213326686421626, 0.20223688897719905, 0.19518017339004468, 0.21977644752897663, 0.27993623341212537, 0.22019946431530057, 0.20898398974560617, 0.2231150832373442, 0.22807038800017876, 0.21015292878999559, 0.23428513260778094, 0.1825705493354578, 0.21444160676420554, 0.5604556265539664, 0.19410693445821092, 0.15283441897488215, 0.7484423340281019, 0.1987356188329239, 0.19474734675759364, 0.14486245788105645, 0.16922960815699117, 0.7204571803813133, 0.5749443131353397, 0.20965383119965375, 0.14939147128413022, 0.20752352574298139, 0.29031386001852766, 0.1515081720152055, 0.10388383189319828, 0.2057872844537052, 0.462543906754022, 0.18774350204413326, 0.18813818942089577, 0.17832739353054072, 0.18914435336130353, 0.21324446349760362, 0.20933759143597386, 0.19330207360720264, 0.19023735315729473, 0.18496359750155722, 0.0811090244087963, 0.07804741670209037, 0.08258222001348514, 0.07660892109576112, 0.08510736781967099, 0.08419256270799902, 0.08531509879009336, 0.07435360008348402, 0.0800622496358383]}, "mutation_prompt": null}
{"id": "693853e4-3c83-4f80-97b3-8a47322bb418", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "ff920b2d-fff6-4712-98b6-3a4051c13753", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Combine positions and velocities initialization\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.apply_along_axis(func, 1, positions)\n        personal_best_scores = np.copy(scores)\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # Vectorized PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            new_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            mask = new_scores < personal_best_scores\n            personal_best_scores[mask] = new_scores[mask]\n            personal_best_positions[mask] = positions[mask]\n            current_global_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_global_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_global_best_idx]\n                global_best_position = personal_best_positions[current_global_best_idx]\n\n            # DE Mutation and Crossover\n            indices = np.random.choice(self.population_size, (self.population_size, 3), replace=True)\n            a, b, c = indices.T\n            mutant_vectors = np.clip(positions[a] + self.F * (positions[b] - positions[c]), self.lower_bound, self.upper_bound)\n            crossover = np.random.rand(self.population_size, self.dim) < self.CR\n            trials = np.where(crossover, mutant_vectors, positions)\n\n            trial_scores = np.apply_along_axis(func, 1, trials)\n            evaluations += self.population_size\n\n            # Update population based on trial scores\n            replace_mask = trial_scores < scores\n            scores[replace_mask] = trial_scores[replace_mask]\n            positions[replace_mask] = trials[replace_mask]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE by optimizing initialization, reducing evaluation calls, and utilizing vectorized operations for efficiency.", "configspace": "", "generation": 41, "fitness": 0.224944536369197, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.5678225395651513, 0.558279376313954, 0.5834812218259731, 0.5273762512334998, 0.546707429512308, 0.567252244301073, 0.5514531627245367, 0.5684027873334448, 0.5257106900768276, 0.030137770319811685, 0.222022224363299, 9.999999999998899e-05, 0.1922188199264534, 0.031507287394858086, 9.999999999998899e-05, 0.04259281488107736, 0.04516335046499609, 0.12772116375250187, 0.09415526109152128, 0.10903299554109913, 0.1318112779091718, 0.11099441563375001, 0.18187535539793243, 0.06798183996819152, 0.15746482817761098, 0.14703315930046523, 0.12156465312146869, 0.10724560829331298, 0.12107755964881595, 0.1070212957968415, 0.11111371248097879, 0.10282734813568173, 0.11630920486267993, 0.09355944968077401, 0.09092018650782907, 0.1362431064388544, 0.9787255927190449, 0.9886413616814996, 0.9823584946275168, 0.9702577327199712, 0.9805615600824698, 0.966676975710043, 0.9814842199757592, 0.981023275861205, 0.9801087206918627, 0.32171722302001815, 0.3523820878867875, 0.22133242906516382, 0.2495150293149606, 0.13856333997336512, 0.2874166948870459, 0.28814062038120436, 0.3466057771918618, 0.3483930237287204, 0.21464786426648352, 0.20712760368918193, 0.16908936003669028, 0.21344299952571177, 0.19605938788169475, 0.24504772190325974, 0.2231632040537388, 0.532960750276124, 0.22147465042418812, 0.2313948532535547, 0.14658940169507495, 0.16168101486658903, 0.0895505365131799, 0.09326000320911698, 0.13893200074085565, 0.1951545128286506, 0.251114486477799, 0.1480539143365378, 0.16900541993738438, 0.14877812649107747, 0.13190352608634404, 0.16572052296261064, 0.1408188027727839, 0.14510731270119048, 0.16851851258249595, 0.15974492323773426, 0.17260002378298545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017459711683625034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030193580610313075, 0.06990986827532997, 0.05237591733465197, 0.04735407765513078, 0.060221236604337536, 0.027436234051197217, 0.019684544218858346, 0.050481506976895574, 0.04437935274670923, 0.037879491720535396, 0.027616691901511503, 0.029225092186443757, 0.049750260511062905, 0.09552620853783633, 0.05724878570239811, 0.03935429917095934, 0.0659220709751015, 0.03569230344670993, 0.03488696586985918, 0.09912208426164182, 0.15470818471098569, 0.11961091503124022, 0.0050697730130983, 0.1414663497339267, 0.1220482942731882, 0.10231697116187755, 0.04779108990422354, 0.08170641507037857, 0.420771554103896, 0.418689997391694, 0.45837102825626497, 0.4433168920759245, 0.45641992943061216, 0.4365854174339514, 0.44366399525057143, 0.4354450023360208, 0.42791246222807255, 0.119456059661329, 0.08429005488525998, 0.10310947929079561, 0.13498218403313733, 0.10345242416492073, 0.08965021807346363, 0.10621079213785556, 0.08150680880400829, 0.11105888492841753, 0.20315020328829492, 0.15841321211340675, 0.15293887326357636, 0.1840444118567388, 0.17695057597041175, 0.18723098327364285, 0.21681400317679056, 0.1408676052489125, 0.17126990415816923, 0.30640348350798974, 0.2306536098082287, 0.32122136210021535, 0.3180594183462696, 0.3041231489324373, 0.20564472554770463, 0.3083686615575443, 0.3340149217824234, 0.2775830139711235, 0.2234645746572259, 0.21888081636889956, 0.2076003546261631, 0.2590197209249855, 0.1762227163766189, 0.19908627720888816, 0.2553078000007989, 0.280765850103066, 0.24006136113737464, 0.1891939170746486, 0.19891604222138193, 0.18755692593237028, 0.22169654356655777, 0.16554459225513052, 0.20331234984143565, 0.22586883646464662, 0.19025045559457354, 0.1896489901740661, 0.19038724529324302, 0.1733102555219802, 0.18719425538966872, 0.203709291489081, 0.19140534653306363, 0.1984377353100637, 0.21485623495461237, 0.256985821373393, 0.212837451149825, 0.7003733610293353, 0.15608948541126832, 0.1523925982162342, 0.7212393385739014, 0.19672655375111392, 0.19349613065275084, 0.1400722100437488, 0.16901144626278186, 0.7546965397396246, 0.4528270342851973, 0.20888687580174836, 0.15191620676946316, 0.20187528867828564, 0.3362529738566392, 0.15028259832908375, 0.19915069172421662, 0.18455064580275926, 0.36811048467685736, 0.1926289459466629, 0.17446532422973382, 0.18089137941197286, 0.18408001460940626, 0.20739966400541976, 0.19358753002644347, 0.19166050115814082, 0.19173565797718795, 0.186156058164486, 0.07704535030774073, 0.08295362709793119, 0.07423257069944988, 0.08870589765895798, 0.08374179013587413, 0.07892032544163374, 0.06799289100630412, 0.08713668578422329, 0.08001758969309325]}, "mutation_prompt": null}
{"id": "bfa371c5-30ce-4b22-bd6a-88d06ac54a1e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "ed981b5a-b261-48ad-bd4c-44dd37e182db", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "a3c777af-d99a-419c-b435-791a95283440", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "6eeab2fc-dd14-40ed-88db-dbaf6b0f9492", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "4b513d15-5c1a-4765-8b40-175d2aef6054", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.3\n        self.c2 = 1.3\n        self.w = 0.6\n        self.F = 0.6\n        self.CR = 0.8\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n                    if new_score < global_best_score:\n                        global_best_score = new_score\n                        global_best_position = personal_best_positions[i]\n\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = population[a] + self.F * (population[b] - population[c])\n                np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE by optimizing memory usage and operations, and prioritizing DE for flexibility.", "configspace": "", "generation": 46, "fitness": 0.3257336757274007, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.8169428259216259, 0.8158651611940078, 0.8273000437860665, 0.8263367585282729, 0.825475929244351, 0.825210917578975, 0.8277741299450568, 0.8087109377100308, 0.8184705654519545, 0.5907962219024686, 0.5881054684186743, 0.5971312341609386, 0.562590257286268, 0.5629769772436654, 0.5759538181200038, 0.553959263885168, 0.5680104239332315, 0.6126000427151836, 0.17353390088696286, 0.12436886943684078, 0.11578638338122671, 0.15087662975940952, 0.1580536335084658, 0.14371855934020694, 0.11172353730355522, 0.29256181805631065, 0.1737331569978473, 0.12788746415353325, 0.12514512333699934, 0.10696870172004969, 0.15192102562933107, 0.123792572324809, 0.17032261565180273, 0.11046673046318178, 0.10647096602303463, 0.11991106854315425, 0.9815567387459174, 0.9817406295960777, 0.9753382234075897, 0.9605893458240071, 0.9668503613988539, 0.9390653736716733, 0.9753762300695463, 0.9695962593627129, 0.9675490912227279, 0.6283353158174632, 0.5707140948213221, 0.5251554136508199, 0.6349065633154682, 0.5504430877243829, 0.518903677888537, 0.5814130170751959, 0.552529477619748, 0.6183248037447477, 0.4674114501282046, 0.5536810675521705, 0.4669390128549922, 0.5303378017403708, 0.6182501300068706, 0.5479024361229279, 0.48657926982035526, 0.6144129458889915, 0.5544607775172377, 0.20107996890259272, 0.1681455911436851, 0.18546697630767317, 0.15351181144651127, 0.17416594161159682, 0.1550711519938508, 0.25822118400779737, 0.14888329134360156, 0.18928655341616307, 0.22577513314342945, 0.19865051985099635, 0.20846203634718563, 0.19909213768038148, 0.18594320109026763, 0.19467055469271444, 0.19584831250401347, 0.2241864757357489, 0.17042312745931032, 0.039155157714322764, 0.02959457103306451, 0.07635562809893359, 0.048249230096640505, 0.05222377238363585, 0.06742492001556799, 0.038644806093914075, 0.03241335914719312, 0.07988548817642371, 0.14894732588528858, 0.14536712047198486, 0.18948503086123625, 0.15595493602998045, 0.14746549960694266, 0.1588447908273105, 0.1883015066825533, 0.18812727417270836, 0.20809298449563007, 0.05481453615270926, 0.03228662288513273, 0.21019575020016545, 0.15787100276045962, 0.14356788166881418, 0.21077428889878058, 0.08893410356121456, 0.06391772327950362, 0.06853016104551302, 0.22541288397753212, 0.13385975521025406, 0.14574449776256637, 0.13005158071471778, 0.19754252727405608, 0.1404683743719365, 0.13839700733209082, 0.1620297020919088, 0.1208064309137371, 0.5284385371090822, 0.5168288042627945, 0.5402399702086855, 0.5198063154609109, 0.5260175885044354, 0.5166192014105118, 0.5292207893761691, 0.5234068684425486, 0.5216805542510605, 0.12923758870822477, 0.11564210576470924, 0.11951133164480654, 0.12245551879620709, 0.11688246083130727, 0.10092214634746566, 0.08294964916846526, 0.09735051563732089, 0.11617543132203922, 0.37540153947412347, 0.32373030284507, 0.1806067867826321, 0.2129230990471992, 0.2173681855809274, 0.2532168971052392, 0.25126800047746845, 0.22698660985786223, 0.19723800591741703, 0.42860142055170725, 0.29178978784416, 0.3011809080466885, 0.2918231259351133, 0.33465621505922294, 0.3188498672868565, 0.5079495318966224, 0.4165535477969782, 0.3726358615777686, 0.20955081816781207, 0.2649491377606842, 0.24567117963058405, 0.26103182951453485, 0.27182055005569317, 0.25894153530850894, 0.2944816162270465, 0.36222584269626534, 0.2254939286224874, 0.23410243063360836, 0.20075362414841802, 0.19654687708358443, 0.2419399908340626, 0.1978383810096883, 0.19172121541120113, 0.19976911551308307, 0.22277335949141452, 0.23303586491105532, 0.19464995009111952, 0.24133124586848764, 0.2060013285892901, 0.2223910207277232, 0.19520486260517778, 0.1915946470126041, 0.20779969097546325, 0.2092477267358711, 0.19857427291429364, 0.874925193472518, 0.1489946408483105, 0.17243874976450735, 0.8791789877716087, 0.4607039182455094, 0.8715261253766271, 0.2605148987654847, 0.6993085000989394, 0.4312056073517012, 0.6711167492272686, 0.5022271490364936, 0.3074810940326267, 0.7294588832192196, 0.39105264609378243, 0.20420666813157773, 0.4313172413033288, 0.2784116517247076, 0.204857815548524, 0.21410791381612604, 0.18793153443513144, 0.20330480477980395, 0.19681442888621914, 0.2321157407367348, 0.19222165849434114, 0.18926339273731896, 0.1931901451150434, 0.20478544059343462, 0.0910758941558879, 0.1125950540307733, 0.07729230522688957, 0.09432423104351872, 0.09641322557102483, 0.09290684018552198, 0.10139007258870969, 0.08558345226266284, 0.08218565887358431]}, "mutation_prompt": null}
{"id": "0607ada5-5b7a-42ab-bd14-8b2d1a2e4a21", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "2ebbdcd4-5261-4928-8c03-bb7bae5cb3b3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "480bc76d-ab53-4698-9f90-c668d0d260d5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "348c53fb-33ea-495e-9e49-c6d096682445", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "d01dc075-a0cd-49dc-a4f5-5947842e29ac", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "d0e4d669-d5d3-4003-8264-4fa52c79afa4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "16746b2e-ab98-4b28-b6b3-2166badfa21d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "8d82cc35-610d-478f-a91d-a7786e904604", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "4f50d774-0c08-4bc9-8dec-0925bd768d5b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "059ce03a-3eab-43df-80e6-d0a7f52b25f7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "183277fd-b067-489c-95ce-1f7e3af209df", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "a6ef494c-1b11-4c5b-a779-4d074dc8ee80", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "7fe6f80e-5d7f-430b-8ca7-b5d546b9142b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "c85df748-9636-4373-bb43-384464c4e003", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "9903119d-dcba-4043-af6e-c8c0f404beeb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles, velocities, and scores\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) + self.c2 * r2 * (global_best_position - positions)\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions and update personal bests\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                if a == i or b == i or c == i:\n                    continue\n                mutant = np.clip(positions[a] + self.F * (positions[b] - positions[c]), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    positions[i] = trial\n\n            # Update Global Best if necessary\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE by optimizing loop structures, enhancing memory usage, and minimizing random number generation.", "configspace": "", "generation": 61, "fitness": 0.22978130346034245, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.567826066969241, 0.5350376123886929, 0.5107461683348888, 0.5445013264036881, 0.5803794896880539, 0.581135198748713, 0.5879482803966557, 0.5704803287168598, 0.5346905822203497, 0.20381228592321288, 0.19787368709479747, 0.21596077628684596, 0.03945626526276558, 0.03610570214595066, 0.19648728640036717, 0.03746793055559505, 0.045296620579141966, 0.23746730813517725, 0.10512675226032464, 0.10951062515774845, 0.1113324653426565, 0.10829291645227623, 0.12184547106892973, 0.11676150431046084, 0.19467843025621412, 0.12701233330598838, 0.2680854315662282, 0.11582780753780098, 0.10054638736460442, 0.10849791703058176, 0.11690733085497684, 0.10341026658901686, 0.09257753593198248, 0.11037286194381013, 0.09740861692660185, 0.09418144713883336, 0.9812280619978806, 0.9887017273261947, 0.9818123240187184, 0.9750065079976026, 0.9784057155239194, 0.9713219304126703, 0.9842450904711353, 0.9817963165818051, 0.9730111701771712, 0.3029728349289812, 0.2935275531632723, 0.057272396779418866, 0.1456811649636347, 0.3015710772822564, 0.34247165532454926, 0.2425204003061232, 0.27899708757238095, 0.34945194626750875, 0.44375867502403366, 0.4651360318847191, 0.16905400718791896, 0.449195812137676, 0.26493827278712234, 0.4755721090903646, 0.12481326193059139, 0.21801747530868543, 0.45039570060122525, 0.14973771733980035, 0.11956269489255733, 0.15708490755803117, 0.10457232606983013, 0.12158200508312855, 0.13015457394362617, 0.15570148070742784, 0.17342942200080835, 0.1565526742203296, 0.17239362841859984, 0.11448868413606783, 0.16751207082767627, 0.2612951230545265, 0.16103525755018633, 0.14183562449453424, 0.17380617458245418, 0.03131423985157, 0.11496565047463703, 9.999999999998899e-05, 9.999999999998899e-05, 0.05528482496820364, 0.022016579355609633, 0.025168020859443474, 9.999999999998899e-05, 0.0018063076505230313, 9.999999999998899e-05, 0.05442755764642848, 0.06680697067704877, 0.04575769457838996, 0.089146170233396, 0.08520009044341081, 0.002177191208121765, 0.027439018019892347, 0.059110907304648075, 0.05161784333297892, 0.06872926695814818, 0.009793210709879707, 0.02237268162917805, 0.02625454670215399, 0.05013836034352748, 0.06695030704626537, 0.06976841421626123, 0.04266974567916881, 0.036534904506091315, 0.03645199329476623, 0.07077469957429161, 0.10826795014283486, 0.10385914905092686, 0.07076070998749617, 0.032443387623064646, 0.16239697146680698, 0.04438837144906571, 0.07558644939855841, 0.1386134880950276, 0.428546117211393, 0.43645926935883594, 0.4238858769209314, 0.4891159435106227, 0.451302964360457, 0.435734936752482, 0.441536188045621, 0.40836278341514276, 0.46325049638373017, 0.0930462075718298, 0.09547104105253346, 0.08794863007881737, 0.10260167025405775, 0.037644695899085145, 0.11442355567146445, 0.09110139105540971, 0.07905648924287556, 0.09876803874647999, 0.1315293073733539, 0.20087922795164026, 0.238252938205762, 0.22676477003565298, 0.20482096436396147, 0.1919391128273662, 0.13276009705764646, 0.22106465457660707, 0.19390259733031, 0.28046006832316106, 0.33702065203031106, 0.29956056690275235, 0.3238231984918918, 0.26403719403528025, 0.30294824721252234, 0.34251070729009414, 0.26351165559163814, 0.3308723653135275, 0.22314097528530907, 0.20819643932573384, 0.1881937480404997, 0.24148738723994112, 0.17781982058386825, 0.2551485443397795, 0.22960516046458535, 0.21367832420385635, 0.22276910063003064, 0.2028990002161417, 0.2033291737205023, 0.18934752744285877, 0.21009090900506655, 0.22001472382828702, 0.20410617802562214, 0.19025724248257192, 0.18849772795131592, 0.1950506466307399, 0.20111913335735188, 0.18037540331627788, 0.1949959599083223, 0.20356352548626822, 0.18938775815988085, 0.20818948981847174, 0.1939824839111547, 0.19439868681877925, 0.19555903275930997, 0.6027565138224964, 0.19225579258406156, 0.15301248724654093, 0.6906564111376439, 0.19754450206386065, 0.19564618498263275, 0.14048919665649906, 0.16863362871010013, 0.7731902593739292, 0.5353721454215589, 0.2079617190566193, 0.15404965119504288, 0.2019147621163454, 0.35148412639685234, 0.1596054650735994, 0.18192639842891634, 0.15239824541323577, 0.3493005643929088, 0.18512629431283578, 0.1893043103120533, 0.17873092545249014, 0.1827230202469874, 0.17927298589133556, 0.1906322094565186, 0.17752468793200626, 0.18754284742534744, 0.18362959085338448, 0.09620250979317535, 0.06922700484283195, 0.09323787131038186, 0.07938588916439382, 0.07918606881274792, 0.07560425109747881, 0.10263903852792955, 0.06272818622228693, 0.07568371461417933]}, "mutation_prompt": null}
{"id": "2810269c-a08c-41d5-b36f-f4f1f6239bac", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "eb122afb-4c81-4c5e-8fc4-44d7b26da6b3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "31bdfd78-d9c8-477c-9c18-1e1e2f0a94e5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "9e979db7-ab1c-4962-8eee-6b368338275e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles\n        scores = np.apply_along_axis(func, 1, positions)\n        personal_best_scores = np.copy(scores)\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Vectorized random matrices for PSO\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            new_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n            improvement_indices = new_scores < personal_best_scores\n            personal_best_positions[improvement_indices] = positions[improvement_indices]\n            personal_best_scores[improvement_indices] = new_scores[improvement_indices]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(positions[a] + self.F * (positions[b] - positions[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    positions[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Improved HybridPSODE by optimizing array operations and reducing computation overhead in the PSO and DE phases, enhancing runtime efficiency.", "configspace": "", "generation": 65, "fitness": 0.22900716813492505, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.5406752525398894, 0.564616878648072, 0.5664897195490846, 0.5638002427352821, 0.5638882519576971, 0.5793995486441624, 0.5684469883238952, 0.5751286350195983, 0.5010700507664401, 0.20893721174653956, 0.2125179736580488, 9.999999999998899e-05, 0.03717610611823252, 0.06582957231503184, 0.1980065403570781, 0.03839930380298706, 0.19865099422868193, 0.19225712369301418, 0.13510671912081162, 0.13291706785435686, 0.12087869463977619, 0.1149699665905013, 0.09355758170855755, 0.0675040570199017, 0.10697072699977561, 0.12626657282229337, 0.12606946941348707, 0.1087487882546242, 0.09923608917932392, 0.10313266969156032, 0.12405462022876723, 0.11063800069581375, 0.09499413442057902, 0.08760643446598548, 0.12278934074529224, 0.08681378693809982, 0.979601349806912, 0.9870948919423883, 0.9813320372092624, 0.9759412066461043, 0.9752202417654503, 0.9726378473052084, 0.9751214098227496, 0.9750025063932991, 0.9673007189321183, 0.3031128462385708, 0.30126423756406184, 0.29668562681022226, 0.3242578418113914, 0.32135870052767834, 0.22429513134286794, 0.12007959395017531, 0.2875131832272425, 0.2970422942755442, 0.30617719449872893, 0.4494766523009146, 0.3491378881192686, 0.3752790991042062, 0.6345269421719877, 0.20389097060375505, 0.42506756402968826, 0.21640590689270522, 0.17301549498978308, 0.16019124089581416, 0.15289697319472884, 0.13878609447604362, 0.09408916737369732, 0.14581923207858927, 0.1520843588349422, 0.14872607464462362, 0.19406086773138775, 0.1513725659494799, 0.16576693782484886, 0.11325625338753731, 0.1059225771339336, 0.16498225164200664, 0.08963262013088935, 0.14406065893792097, 0.16341876692881196, 0.08277054528806094, 0.18923175340240672, 0.022684913498769332, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004243704584773189, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05011254284065236, 0.05223788207504654, 0.030888817003104085, 0.056374716065132224, 0.0629887274187444, 0.01709751911209445, 0.0346228484202471, 0.06456267820212902, 0.06044903009984415, 0.07163198986927333, 0.02513822755077877, 9.999999999998899e-05, 0.06780626142882606, 0.044347355597801785, 0.05429244111659315, 0.03656892318188654, 0.052374902750763064, 0.05059093917696322, 0.03787654297477561, 0.05415074606160375, 0.14942947639941173, 0.10018642660894206, 0.11283065960127847, 0.03161021290835453, 0.09851881069425783, 0.04858034446202131, 0.03847472153470333, 0.07051671614078991, 0.43476103574701186, 0.42249101476961115, 0.45770015887159965, 0.409145161304326, 0.4570962732979459, 0.42183883589156335, 0.4307473452160022, 0.4135835194552616, 0.43170812625505806, 0.11578646026795925, 0.08551055128420082, 0.0843455817567963, 0.11555989777689424, 0.12492315466199, 0.12100528285770129, 0.06741152377512849, 0.08190362509653537, 0.11783702785171224, 0.16751508599987397, 0.2164032021099681, 0.18519355817658, 0.22630653121648447, 0.15098065255989657, 0.16687537770397287, 0.3154620568282508, 0.17740648238006596, 0.2530925607629805, 0.2956747178423087, 0.3123094482163902, 0.279476093406096, 0.31967001407595497, 0.2868812789059154, 0.3017908831086623, 0.27061227884057726, 0.3446404864331518, 0.3140648037667493, 0.1493450679732885, 0.16763679880021298, 0.19685449387990284, 0.21476084668757345, 0.1793485482914643, 0.2219209802132457, 0.25940298787592475, 0.24628992348021483, 0.26496965365434744, 0.18996423667924411, 0.16229717160712076, 0.17925674003954117, 0.19843853378794207, 0.21955430376842344, 0.19288786279921188, 0.2067292561752152, 0.18966560501670682, 0.18463366324739405, 0.18631773455969192, 0.20366445844096392, 0.19910705791768601, 0.28452111133698565, 0.21067842861898367, 0.1962980343509596, 0.20443743085961852, 0.20842375256841938, 0.18997680477613743, 0.6824090071065995, 0.1936751457585547, 0.15375619206316493, 0.7247746380093991, 0.19788058299785405, 0.19772015046699976, 0.16769482310931783, 0.1678912514105283, 0.7077667871623372, 0.41735450022058973, 0.20777257812666927, 0.34085270151181424, 0.1999898274539681, 0.1665163033272251, 0.14694475792687667, 0.20267717493828308, 0.1669708836792666, 0.3796476783863074, 0.18241147716137152, 0.19344363731365843, 0.17922150713919127, 0.20538413137411782, 0.1854255596725427, 0.18325337187148882, 0.18319024225517622, 0.18983309483737532, 0.21221643114065947, 0.08582681143142945, 0.08821597092862854, 0.09173942828919024, 0.08557520920171391, 0.0823984515228835, 0.07587803745253763, 0.08663079066136237, 0.0775194069335885, 0.07937502213903114]}, "mutation_prompt": null}
{"id": "ad66a255-8ce0-4053-a57d-1cfa22090ce7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "ea076257-7554-4400-a120-50b4beeff596", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "eebd94f5-f1b1-4b4e-9ef7-60a7d2bf065a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and velocities using numpy operations\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles\n        scores = np.apply_along_axis(func, 1, positions)\n        personal_best_scores = scores.copy()\n        evaluations = self.population_size\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # Vectorized PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions in vectorized form\n            new_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            # Update personal bests\n            improved = new_scores < personal_best_scores\n            personal_best_scores[improved] = new_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(positions[a] + self.F * (positions[b] - positions[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, positions[i])\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE with optimized velocity update and loop structures to improve execution efficiency while maintaining core functionality.", "configspace": "", "generation": 68, "fitness": 0.2545005732064255, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7281624130354435, 0.7139539461117774, 0.6930324337318201, 0.6830814696021443, 0.6748247921808279, 0.6901888326492825, 0.7081721177165781, 0.6886525639256907, 0.6882110311744152, 0.27511775569822217, 0.034924665227913154, 0.30458289807754635, 0.2846480683517486, 0.21990299474110964, 9.999999999998899e-05, 0.19450029613089892, 0.2913693850942026, 0.24403769008092102, 0.15323679042027494, 0.14253034970023404, 0.16024462173932874, 0.11966215461007834, 0.13736119392197033, 0.15700825498605486, 0.13968897404773928, 0.13288341103325896, 0.14342274006537659, 0.103519891191313, 0.1081852204729683, 0.10513781750491558, 0.1205418397510899, 0.1155365408906579, 0.10456152840259214, 0.13565153529868734, 0.12045547408999469, 0.1115267015867214, 0.9814384174204841, 0.9865311811403712, 0.9823053134539044, 0.9737659881764588, 0.9815188460138716, 0.9851877917020491, 0.9817392400487837, 0.9806251527471666, 0.9768403587945265, 0.3973003871946792, 0.40525246148334115, 0.02733952393305894, 0.4228408298571559, 0.34397991048678167, 0.39314886486824485, 0.12504128657210944, 0.08790669360553949, 0.391054011597893, 0.21779238688021152, 0.4101698783350428, 0.17213623268091072, 0.25797696003205417, 0.7050766532478686, 0.19187431036011038, 0.2124365050347633, 0.4679268604088628, 0.25429353631748497, 0.21264522279239428, 0.17047246055620613, 0.16905635240239536, 0.09359932444524077, 0.12254454740059262, 0.11892971153040544, 0.18183216904536226, 0.1553351938214853, 0.19272077715321256, 0.1775166585111141, 0.19227886283276518, 0.19689000485068076, 0.11749218213367074, 0.17720657275106677, 0.17099164177945025, 0.16542037501860907, 0.03305963470572171, 0.16975082889476545, 0.002818458086515263, 0.049341175672746984, 9.999999999998899e-05, 0.04533553414909197, 0.00467143303056583, 9.999999999998899e-05, 0.02674511889324349, 9.999999999998899e-05, 0.0003923997914089261, 0.07586358509452262, 0.04572607127286521, 0.09890696054022174, 0.08793299882700034, 0.009173553338582496, 0.006118387073370091, 0.07129349898113868, 0.11295207144813779, 0.0514543615494637, 0.0506454381203304, 9.999999999998899e-05, 0.07215243233874502, 0.12362118530247412, 0.12838339564059664, 0.06749574441411865, 0.07571510287963579, 0.0692339016972835, 0.14146931245680083, 0.0398788750574387, 0.13544411314658578, 0.123965127355951, 0.19061334068072755, 0.09884727790813175, 0.13310137485414775, 0.10636410420922926, 0.07701329804239498, 0.08330737441640068, 0.47765662438921264, 0.4828531896338457, 0.48314857937636546, 0.46134559643537587, 0.48072015750716146, 0.4714529569487885, 0.49635232202379376, 0.48205609180179854, 0.4693440660210556, 0.06846605140188256, 0.1488178805623276, 0.123742984078965, 0.09099596253761122, 0.10261108855410239, 0.09627805579314697, 0.13711444869531264, 0.11665484029635986, 0.11016919667461711, 0.23907797025224609, 0.2253807794859367, 0.20445600553434884, 0.2307577842455738, 0.16395286502091144, 0.3115312945726598, 0.15441630670035666, 0.17527265717469387, 0.1980885469147946, 0.28496451343412, 0.22937241834982247, 0.357300915981583, 0.3334663807686866, 0.34519476305392516, 0.29257332833194827, 0.3526789224192486, 0.4060067852809852, 0.28768963266625147, 0.23294800366726942, 0.1845253586222616, 0.2165630918079775, 0.28026319066617045, 0.2743231399482825, 0.230703867576165, 0.22866377665624538, 0.3148729112488221, 0.2679803255974724, 0.19735762963956816, 0.1906882098720568, 0.22110757454633023, 0.2188218768126481, 0.19205308383049147, 0.20878548091838078, 0.21995678441033173, 0.1933121576365736, 0.20980580555227346, 0.180801684402774, 0.19242833760806533, 0.22194779489652172, 0.23506708497652606, 0.20449431854525024, 0.19380913769431152, 0.2164025565430706, 0.1884449122863271, 0.3604017931843225, 0.8272888037143307, 0.18314803795504608, 0.15369808861793477, 0.8390791744674787, 0.1974877342272403, 0.19948050667773032, 0.16898478180295273, 0.16954048757146079, 0.8221764852716738, 0.6507106363207391, 0.21115728664867905, 0.14353104630514335, 0.2075245529362113, 0.4180682110962093, 0.15272875072112224, 0.19747792001950037, 0.20498739312630831, 0.5903634384745994, 0.18143921933721208, 0.1808497645582523, 0.18378549868080984, 0.19717619183667345, 0.20981000119921067, 0.1795229443632267, 0.19286795017528602, 0.20121189211579782, 0.18015326787042996, 0.08283748968451787, 0.09235974375551781, 0.09515502598983494, 0.07917850014561556, 0.08836564550050008, 0.08311507007779251, 0.09855411911555179, 0.08130858372935212, 0.09227021389911783]}, "mutation_prompt": null}
{"id": "e55bffa4-6c49-4b85-9885-28ee64e8c2fd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "d690a935-4f4f-404f-95cc-7926b23dfaa2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "7081f733-d901-4d55-9fe7-8972bd004f99", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "5f965ed7-0e01-4e26-843b-47fcee021522", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "5cc44c84-d03b-4c66-8a83-d8dfd4498ad5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "2c20b9a0-52a3-4b63-ab7b-be65cb8f7c44", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "77aeb8f6-de35-4d0d-8fd7-35ba5437d968", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(pos) for pos in positions])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # Vectorized PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions using vectorized approach\n            new_scores = np.array([func(pos) for pos in positions])\n            evaluations += self.population_size\n\n            # Update personal bests\n            better_scores_mask = new_scores < personal_best_scores\n            personal_best_scores = np.where(better_scores_mask, new_scores, personal_best_scores)\n            personal_best_positions = np.where(better_scores_mask[:, np.newaxis], positions, personal_best_positions)\n\n            # DE Mutation and Crossover Vectorized\n            indices = np.random.randint(0, self.population_size, (self.population_size, 3))\n            a, b, c = indices[:, 0], indices[:, 1], indices[:, 2]\n            mutants = np.clip(positions[a] + self.F * (positions[b] - positions[c]), self.lower_bound, self.upper_bound)\n            crossover_mask = (np.random.rand(self.population_size, self.dim) < self.CR) | (np.arange(self.dim) == np.random.randint(self.dim, size=self.population_size)[:, None])\n            trials = np.where(crossover_mask, mutants, positions)\n            \n            # Evaluate trials and update population\n            trial_scores = np.array([func(trial) for trial in trials])\n            evaluations += self.population_size\n            scores = np.minimum(trial_scores, new_scores)\n            positions = np.where(trial_scores[:, None] < new_scores[:, None], trials, positions)\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE runtime efficiency using precomputation, vectorized operations, and reduced function evaluations.", "configspace": "", "generation": 75, "fitness": 0.22332408973075568, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7064244569443687, 0.636273771300258, 0.6839631539789441, 0.6681883055469897, 0.6294920820631602, 0.6951388062987942, 0.7067789125492592, 0.587432941237944, 0.6901207502704733, 0.34803483087663245, 0.043781295906361484, 0.0009153812185842547, 0.0445094030644394, 0.04216977547159806, 0.19533550482200035, 0.21573735939444383, 0.27355197679248533, 0.18795961404242523, 0.14264315331214517, 0.11530430056665786, 0.12356473621834252, 0.10153759486943637, 0.12320924863109428, 0.08966581924810102, 0.102633315070356, 0.11350957601921818, 0.10669942424048773, 0.09881734907092454, 0.08510126259150153, 0.08579354349716528, 0.1029550698949433, 0.12626818895748038, 0.12827753387853258, 0.13064174915691473, 0.07063791338534864, 0.08719389120241117, 0.9809736824334767, 0.988283436486756, 0.9753592055216078, 0.9538342183193766, 0.9681522839384682, 0.9645409020273042, 0.9816550151876697, 0.9779223803506211, 0.9679106758091354, 0.23713502197562453, 0.3060883466221922, 0.1858787969090171, 0.2473386424783336, 0.20192705336039307, 0.22344252834078981, 0.16765723285437362, 0.16237103422604182, 0.2528466777102252, 0.18082409472819527, 0.1639765178074094, 0.17109773171808995, 0.20045620975550393, 0.5636719696686707, 0.19107733660111237, 0.13068164357797174, 0.19384236721436587, 0.34774721733208414, 0.12507661985635854, 0.17339787477945678, 0.15753839111186063, 0.09445445033120237, 0.16748632096479754, 0.07620965478336816, 0.1371244257393286, 0.19488454946644274, 0.14909118558562406, 0.17640901474522708, 0.17543654351576699, 0.10444888585150747, 0.14445751248611816, 0.03192211093828623, 0.16105606714288623, 0.16927083908648144, 0.03417733848907978, 0.16727015147985258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017047511734157528, 0.04739550085919508, 0.02822114850164359, 0.06483218837154292, 0.06490955584293279, 0.019711511774842205, 0.025284770232430476, 0.047102386239231464, 0.08515849376621687, 0.04477577629561258, 0.0236795657902501, 9.999999999998899e-05, 0.05670613085866494, 0.06273299618572603, 0.06411785139221671, 0.050703119008735476, 0.0645318998261799, 0.06405013332268195, 0.07434934480755528, 0.1315900368802233, 0.08203929153273837, 0.1123080027629001, 0.005508396338218313, 0.08686831738304168, 0.1253082088629155, 0.07261587990507612, 0.038380715269948795, 0.07343417148232512, 0.4603450648395968, 0.4606515591728918, 0.4445256182288364, 0.4273523358856126, 0.4761291129654992, 0.4799975574958192, 0.45574891797493766, 0.442177111510045, 0.48773573266057546, 0.08733285666800761, 0.07296226218682045, 0.06779310968033547, 0.1132473512479717, 0.037606410020079806, 0.08589484546583082, 0.08293862792443363, 0.0750786914276037, 0.13555769092236625, 0.14427243462821226, 0.13198080774562782, 0.14398616770116368, 0.161193727373784, 0.15352558086451917, 0.16175576980310835, 0.1497340174842886, 0.13450736653139916, 0.13150484596402934, 0.26269405308689997, 0.24007015180347624, 0.2689213602823133, 0.23600973859158314, 0.27896473216032713, 0.22241862634304455, 0.32575425755968124, 0.3170902947297862, 0.37557431472575276, 0.22113381606166305, 0.15862182677485093, 0.2863590303502981, 0.1513415278766106, 0.181109277799543, 0.2322370843122541, 0.22796181528443982, 0.28118503980033127, 0.1457567714947522, 0.20555876662928607, 0.17171406470788264, 0.16211680200360568, 0.19647304959802758, 0.15032227202555282, 0.17791853261070179, 0.18390977034201916, 0.1769193402254826, 0.1705397227119585, 0.19921613217093637, 0.21112286796340884, 0.19655878065527455, 0.210042318438585, 0.20503708256205977, 0.193354575387651, 0.20894810554831866, 0.21383214897240133, 0.2070735039606082, 0.7612497296166822, 0.18205441291154367, 0.17892050197810871, 0.7494076347531001, 0.1992473506532325, 0.19727631326212036, 0.14116580018746339, 0.16881883513079388, 0.7386698368181943, 0.5373469908037348, 0.21041204928609492, 0.15916171669755264, 0.15789777649330394, 0.3369425364014994, 0.14443559124599836, 0.23528410670645294, 0.20412439934387694, 0.30442611709642564, 0.19133695742982293, 0.1932238149446891, 0.18385775164184948, 0.18790894633837263, 0.19136931919199096, 0.17422976507326515, 0.19303697756319538, 0.17692723209009198, 0.22024309710620915, 0.06589833863153549, 0.0641048784332946, 0.07259102028319175, 0.05684488634358609, 0.07512657186085503, 0.06714397190887977, 0.06666684096852171, 0.07079415634282793, 0.06953097025422372]}, "mutation_prompt": null}
{"id": "e5c158fe-3116-41e2-ba18-bfeaaa4f525c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "27869469-fa97-415d-a3e0-a67f2a895097", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "d764b39c-9f0c-406d-bad6-ab638aaae6e5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "436b374a-0d37-4521-9e47-fcf81d59c0f0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "17cdedbd-bdf6-46a2-9476-071e7ccb5094", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "f2aca594-c111-431d-a31c-3a2b49347e29", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "3b415fb7-c0d0-41e3-a654-4e32ed598df6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "21411f7d-324d-404b-bb7f-327d176371e5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        population = np.copy(positions)\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial particles and population\n        for i in range(self.population_size):\n            score = func(positions[i])\n            personal_best_scores[i] = score\n            scores[i] = score\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions\n            for i in range(self.population_size):\n                new_score = func(positions[i])\n                evaluations += 1\n                if new_score < personal_best_scores[i]:\n                    personal_best_scores[i] = new_score\n                    personal_best_positions[i] = positions[i]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask | (np.random.randint(self.dim) == np.arange(self.dim)), mutant, population[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    population[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < global_best_score:\n                global_best_score = personal_best_scores[current_best_idx]\n                global_best_position = personal_best_positions[current_best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Optimized HybridPSODE for enhanced runtime efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7372412290942523, 0.7315585368714694, 0.72401371108413, 0.7406042800586979, 0.7205906980338728, 0.7609473694795944, 0.7109877243669878, 0.7355389018683076, 0.7179277138755431, 0.510807756490514, 0.49220246806425216, 0.48386710651351317, 0.484994419181522, 0.5006904213091516, 0.523878663659421, 0.4895227862823547, 0.5105075262008585, 0.4832702829539206, 0.16079368557807483, 0.11517710875584253, 0.13130628923404453, 0.128597395270862, 0.12868167352560378, 0.14228621841322053, 0.18559883792616505, 0.12023496333298922, 0.1337695133951624, 0.10109201069634166, 0.11700297493063483, 0.12266393985667434, 0.11051043799340532, 0.11293860720170723, 0.10707002152832523, 0.14263402219193666, 0.1409913975332947, 0.1443706817780216, 0.9805122708268659, 0.982407384593539, 0.9815644724490983, 0.9469680522152445, 0.9689671717934855, 0.9589540164265046, 0.9819586972138742, 0.9805001053574849, 0.9658815992616636, 0.44842824513331003, 0.4183333533279089, 0.30805193972079903, 0.4200886063026663, 0.3313692106954985, 0.423317415564051, 0.3166072217322251, 0.32289814845108367, 0.4042480793937049, 0.6943745870767033, 0.6434898656428301, 0.732282894959708, 0.7286553597714542, 0.7579410215098293, 0.6780961196640228, 0.6416549914288435, 0.7286089124019468, 0.7111301406086922, 0.2629887490524684, 0.19550615049297138, 0.1772482143354378, 0.20350079686092726, 0.21386874244064769, 0.29025120869979515, 0.24431069060856447, 0.1383849803552052, 0.18324592063821155, 0.186131733419988, 0.18915209530631494, 0.14349454264063477, 0.19223952911995068, 0.1959782433402314, 0.15158871072636482, 0.17225280001492937, 0.19819830383340864, 0.19245420791389156, 0.31702993715672934, 0.18615392995194102, 0.2696838144266849, 0.35229862734462536, 0.267171976273923, 0.23704463809367948, 0.2654239660561457, 0.25806547211565845, 0.28416039118639425, 0.3997626001437098, 0.38247905661995163, 0.36532817393608663, 0.4196936433998427, 0.3994146584454912, 0.3517211378585119, 0.41046098346109317, 0.4522568849215599, 0.4218609903340763, 0.07498666026271983, 0.11985919618916485, 0.10755210615505095, 0.14241042062104425, 0.15169699317270047, 0.10535838583839963, 0.12910533057916507, 0.09975342306251134, 0.1808922485344845, 0.23661435995626312, 0.23884340861290632, 0.24612081900736704, 0.21616175421099537, 0.24811737096299735, 0.24839218493905424, 0.23566282923890725, 0.2358891216845096, 0.21974001924459374, 0.5769787552731718, 0.6119410584699068, 0.5660928448657125, 0.6046956765869147, 0.627475783271544, 0.5688601549591701, 0.588969915575302, 0.6359603990924406, 0.609736629692845, 0.11263359289920605, 0.08629905665773696, 0.09344357771942291, 0.09668192953092491, 0.1084022850752, 0.129099690365167, 0.1397366971764804, 0.09266354956789014, 0.13374592039300115, 0.2487808713503027, 0.17667073367460928, 0.21448889828464857, 0.22641421097432113, 0.3499265000525015, 0.1758137593200001, 0.39825079725313184, 0.22211696974734751, 0.18045389500215392, 0.3670366143621845, 0.34413129418870025, 0.3445911084328658, 0.3319243523316405, 0.3681200106434227, 0.3808870360864063, 0.39896832465054477, 0.38486934761116254, 0.37387087565422494, 0.29338126566699374, 0.2994591454255553, 0.24801280745102394, 0.2730469892257794, 0.2552673244272342, 0.27494402494630643, 0.29704891304885717, 0.2859910572142451, 0.2785073299147557, 0.21055306969791865, 0.2553056424980613, 0.1961760050909137, 0.21808065700306956, 0.18851784157883655, 0.1881129185307061, 0.21399009594236573, 0.1966221490887079, 0.24621763046236722, 0.19342777924059218, 0.1974514861047132, 0.28313314614402585, 0.5132196566570284, 0.23950838139378205, 0.20119989887701972, 0.20719655156813832, 0.2087982328617819, 0.4146513513067869, 0.8020917478944207, 0.19339724664064106, 0.17920895207669651, 0.8229352821173006, 0.1996906095303359, 0.6868390073536385, 0.4866083242892071, 0.5516025426035323, 0.8395441416976444, 0.7831005857225123, 0.32429584044068427, 0.659153859388298, 0.20438448543710497, 0.22237409772253836, 0.16427907554601118, 0.6001477717655554, 0.6403021802217546, 0.6300228373287508, 0.1922818607833826, 0.20565237060755848, 0.2003731800831069, 0.2028028688947473, 0.1863598170400026, 0.1750477620995342, 0.18412011250012816, 0.2087411583108605, 0.18108234360856834, 0.07605168561111264, 0.06973239437206225, 0.09148601792693534, 0.09289166990256958, 0.09168135437852598, 0.08990479592552969, 0.08334921302130027, 0.08145108323070527, 0.10235071138446128]}, "mutation_prompt": null}
{"id": "7a3d0067-d3d3-4503-b1df-a2fe24fbb4ec", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and velocities\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        scores = np.array([func(pos) for pos in positions])\n\n        personal_best_scores[:] = scores\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update with vectorized operations\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            new_scores = np.array([func(pos) for pos in positions])\n            evaluations += self.population_size\n\n            better_scores = new_scores < personal_best_scores\n            personal_best_positions[better_scores] = positions[better_scores]\n            personal_best_scores[better_scores] = new_scores[better_scores]\n\n            # DE Mutation and Crossover with optimized loop\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(population[a] + self.F * (population[b] - population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    positions[i] = trial\n\n            # Update Global Best\n            current_best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[current_best_idx] < personal_best_scores[global_best_idx]:\n                global_best_position = personal_best_positions[current_best_idx]\n                global_best_idx = current_best_idx\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, personal_best_scores[global_best_idx]", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with improved memory usage and computation efficiency through vectorized operations and optimized loop structures.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'population' is not defined\").", "error": "NameError(\"name 'population' is not defined\")", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {}, "mutation_prompt": null}
{"id": "27617f38-bad6-40f9-96c8-fb14ddcc6b38", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.apply_along_axis(func, 1, positions)\n        personal_best_scores = np.copy(scores)\n        \n        best_idx = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[best_idx].copy()\n        global_best_score = personal_best_scores[best_idx]\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # Evaluate new positions using vectorized operations\n            new_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            # Update personal bests\n            improved = new_scores < personal_best_scores\n            personal_best_scores[improved] = new_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(personal_best_positions[a] + self.F * (personal_best_positions[b] - personal_best_positions[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < personal_best_scores[i]:\n                    personal_best_scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n            # Update Global Best\n            best_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[best_idx] < global_best_score:\n                global_best_score = personal_best_scores[best_idx]\n                global_best_position = personal_best_positions[best_idx]\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE by optimizing memory usage, leveraging numpy operations, and minimizing function evaluations.", "configspace": "", "generation": 85, "fitness": 0.3470181539486629, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "a18bc653-25fc-4710-b835-5776ebb3048f", "metadata": {"aucs": [0.7592822567718419, 0.743361077584036, 0.7599397832026836, 0.7698664515279753, 0.7390829268672139, 0.7708820837258827, 0.7661845152654769, 0.7544679222494631, 0.7705580553364874, 0.5360314056445652, 0.5200003494185902, 0.5426939661161664, 0.546388135321886, 0.5289345616828498, 0.4688489989713004, 0.5198235385001257, 0.5287555939679406, 0.49021382797044166, 0.20142509054130098, 0.13462142944733546, 0.14247679451562323, 0.1834066539284288, 0.13914039826418734, 0.1352177758247748, 0.19812522240080044, 0.14151393108220822, 0.1495560847395112, 0.1245677151552067, 0.12453335692571277, 0.10053772167246755, 0.1319510662096225, 0.13152454537170688, 0.1757542900402641, 0.11547114243778434, 0.11111075355891897, 0.12242592136265285, 0.9865774502666149, 0.9867492319683189, 0.9816976093375945, 0.9806493337498493, 0.9728339996909693, 0.9739381455895199, 0.9826141700794958, 0.9796706333698444, 0.9811272175456626, 0.4327737168257839, 0.41416350982118455, 0.3497292966959056, 0.4519752711691851, 0.46843245541002865, 0.42096559755886875, 0.42600486875719457, 0.3703141256606577, 0.4630227080426631, 0.22448651298879307, 0.7124388290828143, 0.7167461311578666, 0.7356659933427443, 0.24974518123479783, 0.7655064371819191, 0.7570630279626751, 0.7922248208763982, 0.725544363369724, 0.25045662674389946, 0.2378192879545621, 0.20790001181293605, 0.1254160415804183, 0.23387125830526145, 0.18623960994046374, 0.20035429794509585, 0.17721092419239737, 0.18306388942387197, 0.19638725228567078, 0.20546131155415903, 0.20267811863062957, 0.25195889757653667, 0.2676737717752843, 0.22057317812654653, 0.21846294310547842, 0.2606852217412744, 0.22516754198961475, 0.2554591292022639, 0.21511633462731228, 0.2748184994959606, 0.11290056469838439, 0.10601551742240012, 0.286139753995431, 0.2945204709909719, 0.29313698838363855, 0.2751174345842382, 0.39142437108644956, 0.37872372630532725, 0.46272008751701965, 0.395345455609171, 0.30013971765410064, 0.3864819347318458, 0.444596030412439, 0.429069594872182, 0.4734595416613189, 0.07774618468199934, 0.07016617921404267, 0.11864446764218228, 0.1629902843341965, 0.14207302423225332, 0.12537865446120044, 0.11563120578501151, 0.10641475353751562, 0.1368022627171397, 0.24788193605916975, 0.22737049495355488, 0.23578540361565403, 0.24293732153229253, 0.255827397469475, 0.24116097546251525, 0.26632329924688536, 0.24356073485052399, 0.22306022698439243, 0.628985745298996, 0.6221027707645133, 0.6021307744712188, 0.6201307634537685, 0.6586976516044336, 0.6254622568443367, 0.6689677553058606, 0.5650220076992574, 0.6475903322615896, 0.12502337889688275, 0.13133764878725507, 0.11154541240450366, 0.10420457426648833, 0.12396597361083628, 0.13791210560085276, 0.10779253529879007, 0.10646183368195039, 0.09878143311016285, 0.25393591824750916, 0.126323226099063, 0.42814917745322045, 0.2700276895028675, 0.3435768635530736, 0.28933636915449246, 0.19285005384821674, 0.17938031102958285, 0.248822022828442, 0.36764041216978216, 0.3860655278791634, 0.39238696712484655, 0.3875311045557348, 0.36521929620013627, 0.36628359629998997, 0.41246596883319153, 0.38306119254478677, 0.3705216792590048, 0.2857097866497992, 0.31377355291980713, 0.26483297749719215, 0.29080317373546594, 0.3198455169001976, 0.2954289709214325, 0.305275567911777, 0.3221515075320772, 0.3134944182109862, 0.1894428751048426, 0.18422969458059657, 0.20314070493791603, 0.20841377950793882, 0.21549357637070277, 0.19758679598231987, 0.19618154088468331, 0.19340450453200286, 0.20256556102163048, 0.5781953904927695, 0.20514796012666647, 0.2217777925654596, 0.251758944323621, 0.29952114536539853, 0.32926160042140495, 0.25969911939680357, 0.4793927540634346, 0.2775732834289567, 0.7857295902074644, 0.200911518547907, 0.1527718601633956, 0.8465752158939146, 0.19972857197755434, 0.19873994285665686, 0.14205960818116925, 0.16891615750746947, 0.8578261486619031, 0.8310492442161419, 0.20951425406526236, 0.7444064340796757, 0.20274976111308063, 0.16726015253940674, 0.5702137824474529, 0.10506032281366029, 0.16437477718504923, 0.780192182813668, 0.18817783034798807, 0.18781014543728003, 0.2273573902697571, 0.1958101164523106, 0.18558571060295903, 0.2010936382579137, 0.1825396062339012, 0.19904957250665745, 0.18970745551417612, 0.08595579863533387, 0.080378477109041, 0.0910398453558019, 0.08237071830341935, 0.08662228694786533, 0.08588815499315183, 0.09016828021429868, 0.0859020372969106, 0.08093371077585054]}, "mutation_prompt": null}
{"id": "3c64bc8a-338c-4637-b986-e49fa781dc46", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.full(self.population_size, np.inf)\n        \n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate new positions using vectorized operations\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n            \n            # Update personal bests\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n            \n            # Update global best\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n            \n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update (combine position update and velocity calculation)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[indices[0]] + self.F * (personal_best_positions[indices[1]] - personal_best_positions[indices[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, scores[best_idx]", "name": "HybridPSODE", "description": "Optimized HybridPSODE by refining vector operations, improving loop efficiency, and reducing function evaluations.", "configspace": "", "generation": 86, "fitness": 0.35324086919824016, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "27617f38-bad6-40f9-96c8-fb14ddcc6b38", "metadata": {"aucs": [0.7571455047953002, 0.7286374690804054, 0.7520918440249408, 0.7658836792796442, 0.7841022749380477, 0.7706191483353918, 0.7680799388141835, 0.739381630562068, 0.7539348139437618, 0.5197618313468325, 0.5371950898971525, 0.528354905304291, 0.4831377837321579, 0.5413957905566436, 0.5282085251392581, 0.5522911959825766, 0.5042285596743501, 0.542431706948758, 0.24521263944528449, 0.21459653966680614, 0.13829197610261146, 0.2641784410484237, 0.1735079328147332, 0.21719335157919828, 0.2747926130689027, 0.15366658016899093, 0.12731343524889416, 0.1288452734238681, 0.12270467341142954, 0.15533720598020395, 0.1353196816483907, 0.11746464258580269, 0.1397478173680129, 0.12053613779178773, 0.1380157801067622, 0.13868996846178128, 0.9779416768981909, 0.9829477336881429, 0.9686013060232305, 0.9756784016624767, 0.9677851284159503, 0.9691649566582491, 0.9759950853678132, 0.9703975793842299, 0.973856015345147, 0.45013637634274706, 0.43250049679406644, 0.41305473953079175, 0.40241431865099553, 0.4717341876771255, 0.4419395946045135, 0.42135995228877987, 0.4007920699344584, 0.4370398290389752, 0.7902519528400798, 0.7079382082483818, 0.6621968750096051, 0.7724148641563265, 0.6744495950423391, 0.6800075800366133, 0.7173902980031881, 0.715840410542737, 0.727704175533245, 0.23090123649067196, 0.21987270813653348, 0.25994100446711865, 0.20516571608095202, 0.12788077754476657, 0.21043137597865247, 0.20486617136640894, 0.3464823398929334, 0.22572404259498302, 0.226577770342677, 0.20688967828590032, 0.20095520652114263, 0.21433893279056015, 0.20110960514854104, 0.18410654646075886, 0.2418663397215841, 0.16120355154170518, 0.21324100372879717, 0.22534229376848525, 0.25921783738451576, 0.28307130150973603, 0.2231085369349468, 0.13721702780785894, 0.26012211033034893, 0.22712935479764473, 0.21862532043963168, 0.29544125923687803, 0.3744516788348514, 0.4389058407157044, 0.36545191648099273, 0.37032653184225683, 0.3869403062973489, 0.35529524723982564, 0.4471194060816214, 0.33801350420381215, 0.40795676709953477, 0.11061513318769745, 0.04399688347483954, 0.12045247640981582, 0.12869197115223396, 0.1436064789642798, 0.10346155567029913, 0.11419310920019654, 0.07444508473879796, 0.11180717190569234, 0.24483519722720015, 0.23892813621097764, 0.24034129009138794, 0.24780942132223305, 0.251100784705259, 0.26566594912868, 0.2336397059413946, 0.2656312889322039, 0.18693428580057836, 0.6236326259348204, 0.62341845477433, 0.6282342252359228, 0.6109308897887678, 0.6048384501961279, 0.5935883037472611, 0.6646931268210983, 0.5854408118388018, 0.6518855811206364, 0.09083610848074097, 0.1049148990890757, 0.10376248365174323, 0.3318051247675561, 0.11181080437467916, 0.11739596296050547, 0.11146342582360591, 0.13144500614697952, 0.16468667462426112, 0.26007631665318864, 0.22193788366485134, 0.19176186078590696, 0.28487088224917945, 0.16792079430569862, 0.15665225287398465, 0.1766364516488066, 0.20859488864714482, 0.136863100922063, 0.3750173338008781, 0.4024142334069746, 0.41304184486318696, 0.386332026353744, 0.35599454538536146, 0.3577856346568419, 0.4233982075526129, 0.4310610405536558, 0.4094157175474662, 0.2818200371859966, 0.3150324345756683, 0.2932208874464921, 0.2659096368639492, 0.20995396381356812, 0.30005678059945895, 0.31885437293543195, 0.3421173072394492, 0.33181296072927835, 0.2473431623862994, 0.17828626547302207, 0.2215230957594696, 0.1791286058143714, 0.19697875042807345, 0.23949785649706068, 0.20427963130230065, 0.20103228431774367, 0.22477686349793835, 0.18997114523892378, 0.1977209700356426, 0.26960638681366556, 0.3181124284749278, 0.22057858110284023, 0.2017993454142326, 0.23478953110204814, 0.20761922716572234, 0.25879814782985466, 0.8126431101312185, 0.18163821939294034, 0.15302317957596312, 0.8523516066807568, 0.7242183276297145, 0.19887646390754188, 0.14226151723719105, 0.8067090059151145, 0.8607973614370729, 0.8111375859181442, 0.20930835234989387, 0.7714815995982495, 0.2063136358210509, 0.1665619091540006, 0.6773872878109815, 0.10466607546168638, 0.21104436084178801, 0.7224954641398895, 0.18403057839542558, 0.2120399573477474, 0.18957848592671478, 0.1899142156753737, 0.20146218089840728, 0.18259151312795396, 0.18907614181245047, 0.20218354734696242, 0.18808533041039377, 0.09623692118077964, 0.08637744221259147, 0.09498920155365198, 0.08509844001079236, 0.08797107329006448, 0.0835388095045837, 0.09927746815144856, 0.0852326900678998, 0.09897408945105435]}, "mutation_prompt": null}
{"id": "843d91d7-43ce-4f30-b3c8-13b3c685aed8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.full(self.population_size, np.inf)\n        \n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate new positions using vectorized operations\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n            \n            # Update personal bests\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n            \n            # Update global best\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n            \n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update (combine position update and velocity calculation)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[indices[0]] + self.F * (personal_best_positions[indices[1]] - personal_best_positions[indices[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, scores[best_idx]", "name": "HybridPSODE", "description": "Optimized HybridPSODE by refining vector operations, improving loop efficiency, and reducing function evaluations.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3c64bc8a-338c-4637-b986-e49fa781dc46", "metadata": {"aucs": [0.7571455047953002, 0.7286374690804054, 0.7520918440249408, 0.7658836792796442, 0.7841022749380477, 0.7706191483353918, 0.7680799388141835, 0.739381630562068, 0.7539348139437618, 0.5197618313468325, 0.5371950898971525, 0.528354905304291, 0.4831377837321579, 0.5413957905566436, 0.5282085251392581, 0.5522911959825766, 0.5042285596743501, 0.542431706948758, 0.24521263944528449, 0.21459653966680614, 0.13829197610261146, 0.2641784410484237, 0.1735079328147332, 0.21719335157919828, 0.2747926130689027, 0.15366658016899093, 0.12731343524889416, 0.1288452734238681, 0.12270467341142954, 0.15533720598020395, 0.1353196816483907, 0.11746464258580269, 0.1397478173680129, 0.12053613779178773, 0.1380157801067622, 0.13868996846178128, 0.9779416768981909, 0.9829477336881429, 0.9686013060232305, 0.9756784016624767, 0.9677851284159503, 0.9691649566582491, 0.9759950853678132, 0.9703975793842299, 0.973856015345147, 0.45013637634274706, 0.43250049679406644, 0.41305473953079175, 0.40241431865099553, 0.4717341876771255, 0.4419395946045135, 0.42135995228877987, 0.4007920699344584, 0.4370398290389752, 0.7902519528400798, 0.7079382082483818, 0.6621968750096051, 0.7724148641563265, 0.6744495950423391, 0.6800075800366133, 0.7173902980031881, 0.715840410542737, 0.727704175533245, 0.23090123649067196, 0.21987270813653348, 0.25994100446711865, 0.20516571608095202, 0.12788077754476657, 0.21043137597865247, 0.20486617136640894, 0.3464823398929334, 0.22572404259498302, 0.226577770342677, 0.20688967828590032, 0.20095520652114263, 0.21433893279056015, 0.20110960514854104, 0.18410654646075886, 0.2418663397215841, 0.16120355154170518, 0.21324100372879717, 0.22534229376848525, 0.25921783738451576, 0.28307130150973603, 0.2231085369349468, 0.13721702780785894, 0.26012211033034893, 0.22712935479764473, 0.21862532043963168, 0.29544125923687803, 0.3744516788348514, 0.4389058407157044, 0.36545191648099273, 0.37032653184225683, 0.3869403062973489, 0.35529524723982564, 0.4471194060816214, 0.33801350420381215, 0.40795676709953477, 0.11061513318769745, 0.04399688347483954, 0.12045247640981582, 0.12869197115223396, 0.1436064789642798, 0.10346155567029913, 0.11419310920019654, 0.07444508473879796, 0.11180717190569234, 0.24483519722720015, 0.23892813621097764, 0.24034129009138794, 0.24780942132223305, 0.251100784705259, 0.26566594912868, 0.2336397059413946, 0.2656312889322039, 0.18693428580057836, 0.6236326259348204, 0.62341845477433, 0.6282342252359228, 0.6109308897887678, 0.6048384501961279, 0.5935883037472611, 0.6646931268210983, 0.5854408118388018, 0.6518855811206364, 0.09083610848074097, 0.1049148990890757, 0.10376248365174323, 0.3318051247675561, 0.11181080437467916, 0.11739596296050547, 0.11146342582360591, 0.13144500614697952, 0.16468667462426112, 0.26007631665318864, 0.22193788366485134, 0.19176186078590696, 0.28487088224917945, 0.16792079430569862, 0.15665225287398465, 0.1766364516488066, 0.20859488864714482, 0.136863100922063, 0.3750173338008781, 0.4024142334069746, 0.41304184486318696, 0.386332026353744, 0.35599454538536146, 0.3577856346568419, 0.4233982075526129, 0.4310610405536558, 0.4094157175474662, 0.2818200371859966, 0.3150324345756683, 0.2932208874464921, 0.2659096368639492, 0.20995396381356812, 0.30005678059945895, 0.31885437293543195, 0.3421173072394492, 0.33181296072927835, 0.2473431623862994, 0.17828626547302207, 0.2215230957594696, 0.1791286058143714, 0.19697875042807345, 0.23949785649706068, 0.20427963130230065, 0.20103228431774367, 0.22477686349793835, 0.18997114523892378, 0.1977209700356426, 0.26960638681366556, 0.3181124284749278, 0.22057858110284023, 0.2017993454142326, 0.23478953110204814, 0.20761922716572234, 0.25879814782985466, 0.8126431101312185, 0.18163821939294034, 0.15302317957596312, 0.8523516066807568, 0.7242183276297145, 0.19887646390754188, 0.14226151723719105, 0.8067090059151145, 0.8607973614370729, 0.8111375859181442, 0.20930835234989387, 0.7714815995982495, 0.2063136358210509, 0.1665619091540006, 0.6773872878109815, 0.10466607546168638, 0.21104436084178801, 0.7224954641398895, 0.18403057839542558, 0.2120399573477474, 0.18957848592671478, 0.1899142156753737, 0.20146218089840728, 0.18259151312795396, 0.18907614181245047, 0.20218354734696242, 0.18808533041039377, 0.09623692118077964, 0.08637744221259147, 0.09498920155365198, 0.08509844001079236, 0.08797107329006448, 0.0835388095045837, 0.09927746815144856, 0.0852326900678998, 0.09897408945105435]}, "mutation_prompt": null}
{"id": "01364d76-d547-4365-816d-f223ff35a3c0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.full(self.population_size, np.inf)\n        \n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate new positions using vectorized operations\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n            \n            # Update personal bests\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n            \n            # Update global best\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n            \n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update (combine position update and velocity calculation)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[indices[0]] + self.F * (personal_best_positions[indices[1]] - personal_best_positions[indices[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, scores[best_idx]", "name": "HybridPSODE", "description": "Optimized HybridPSODE by refining vector operations, improving loop efficiency, and reducing function evaluations.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3c64bc8a-338c-4637-b986-e49fa781dc46", "metadata": {"aucs": [0.7571455047953002, 0.7286374690804054, 0.7520918440249408, 0.7658836792796442, 0.7841022749380477, 0.7706191483353918, 0.7680799388141835, 0.739381630562068, 0.7539348139437618, 0.5197618313468325, 0.5371950898971525, 0.528354905304291, 0.4831377837321579, 0.5413957905566436, 0.5282085251392581, 0.5522911959825766, 0.5042285596743501, 0.542431706948758, 0.24521263944528449, 0.21459653966680614, 0.13829197610261146, 0.2641784410484237, 0.1735079328147332, 0.21719335157919828, 0.2747926130689027, 0.15366658016899093, 0.12731343524889416, 0.1288452734238681, 0.12270467341142954, 0.15533720598020395, 0.1353196816483907, 0.11746464258580269, 0.1397478173680129, 0.12053613779178773, 0.1380157801067622, 0.13868996846178128, 0.9779416768981909, 0.9829477336881429, 0.9686013060232305, 0.9756784016624767, 0.9677851284159503, 0.9691649566582491, 0.9759950853678132, 0.9703975793842299, 0.973856015345147, 0.45013637634274706, 0.43250049679406644, 0.41305473953079175, 0.40241431865099553, 0.4717341876771255, 0.4419395946045135, 0.42135995228877987, 0.4007920699344584, 0.4370398290389752, 0.7902519528400798, 0.7079382082483818, 0.6621968750096051, 0.7724148641563265, 0.6744495950423391, 0.6800075800366133, 0.7173902980031881, 0.715840410542737, 0.727704175533245, 0.23090123649067196, 0.21987270813653348, 0.25994100446711865, 0.20516571608095202, 0.12788077754476657, 0.21043137597865247, 0.20486617136640894, 0.3464823398929334, 0.22572404259498302, 0.226577770342677, 0.20688967828590032, 0.20095520652114263, 0.21433893279056015, 0.20110960514854104, 0.18410654646075886, 0.2418663397215841, 0.16120355154170518, 0.21324100372879717, 0.22534229376848525, 0.25921783738451576, 0.28307130150973603, 0.2231085369349468, 0.13721702780785894, 0.26012211033034893, 0.22712935479764473, 0.21862532043963168, 0.29544125923687803, 0.3744516788348514, 0.4389058407157044, 0.36545191648099273, 0.37032653184225683, 0.3869403062973489, 0.35529524723982564, 0.4471194060816214, 0.33801350420381215, 0.40795676709953477, 0.11061513318769745, 0.04399688347483954, 0.12045247640981582, 0.12869197115223396, 0.1436064789642798, 0.10346155567029913, 0.11419310920019654, 0.07444508473879796, 0.11180717190569234, 0.24483519722720015, 0.23892813621097764, 0.24034129009138794, 0.24780942132223305, 0.251100784705259, 0.26566594912868, 0.2336397059413946, 0.2656312889322039, 0.18693428580057836, 0.6236326259348204, 0.62341845477433, 0.6282342252359228, 0.6109308897887678, 0.6048384501961279, 0.5935883037472611, 0.6646931268210983, 0.5854408118388018, 0.6518855811206364, 0.09083610848074097, 0.1049148990890757, 0.10376248365174323, 0.3318051247675561, 0.11181080437467916, 0.11739596296050547, 0.11146342582360591, 0.13144500614697952, 0.16468667462426112, 0.26007631665318864, 0.22193788366485134, 0.19176186078590696, 0.28487088224917945, 0.16792079430569862, 0.15665225287398465, 0.1766364516488066, 0.20859488864714482, 0.136863100922063, 0.3750173338008781, 0.4024142334069746, 0.41304184486318696, 0.386332026353744, 0.35599454538536146, 0.3577856346568419, 0.4233982075526129, 0.4310610405536558, 0.4094157175474662, 0.2818200371859966, 0.3150324345756683, 0.2932208874464921, 0.2659096368639492, 0.20995396381356812, 0.30005678059945895, 0.31885437293543195, 0.3421173072394492, 0.33181296072927835, 0.2473431623862994, 0.17828626547302207, 0.2215230957594696, 0.1791286058143714, 0.19697875042807345, 0.23949785649706068, 0.20427963130230065, 0.20103228431774367, 0.22477686349793835, 0.18997114523892378, 0.1977209700356426, 0.26960638681366556, 0.3181124284749278, 0.22057858110284023, 0.2017993454142326, 0.23478953110204814, 0.20761922716572234, 0.25879814782985466, 0.8126431101312185, 0.18163821939294034, 0.15302317957596312, 0.8523516066807568, 0.7242183276297145, 0.19887646390754188, 0.14226151723719105, 0.8067090059151145, 0.8607973614370729, 0.8111375859181442, 0.20930835234989387, 0.7714815995982495, 0.2063136358210509, 0.1665619091540006, 0.6773872878109815, 0.10466607546168638, 0.21104436084178801, 0.7224954641398895, 0.18403057839542558, 0.2120399573477474, 0.18957848592671478, 0.1899142156753737, 0.20146218089840728, 0.18259151312795396, 0.18907614181245047, 0.20218354734696242, 0.18808533041039377, 0.09623692118077964, 0.08637744221259147, 0.09498920155365198, 0.08509844001079236, 0.08797107329006448, 0.0835388095045837, 0.09927746815144856, 0.0852326900678998, 0.09897408945105435]}, "mutation_prompt": null}
{"id": "b513052c-69f8-4d35-ba8a-61d9f8a5ffd1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.full(self.population_size, np.inf)\n        \n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate new positions using vectorized operations\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n            \n            # Update personal bests\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n            \n            # Update global best\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n            \n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update (combine position update and velocity calculation)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[indices[0]] + self.F * (personal_best_positions[indices[1]] - personal_best_positions[indices[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, scores[best_idx]", "name": "HybridPSODE", "description": "Optimized HybridPSODE by refining vector operations, improving loop efficiency, and reducing function evaluations.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3c64bc8a-338c-4637-b986-e49fa781dc46", "metadata": {"aucs": [0.7571455047953002, 0.7286374690804054, 0.7520918440249408, 0.7658836792796442, 0.7841022749380477, 0.7706191483353918, 0.7680799388141835, 0.739381630562068, 0.7539348139437618, 0.5197618313468325, 0.5371950898971525, 0.528354905304291, 0.4831377837321579, 0.5413957905566436, 0.5282085251392581, 0.5522911959825766, 0.5042285596743501, 0.542431706948758, 0.24521263944528449, 0.21459653966680614, 0.13829197610261146, 0.2641784410484237, 0.1735079328147332, 0.21719335157919828, 0.2747926130689027, 0.15366658016899093, 0.12731343524889416, 0.1288452734238681, 0.12270467341142954, 0.15533720598020395, 0.1353196816483907, 0.11746464258580269, 0.1397478173680129, 0.12053613779178773, 0.1380157801067622, 0.13868996846178128, 0.9779416768981909, 0.9829477336881429, 0.9686013060232305, 0.9756784016624767, 0.9677851284159503, 0.9691649566582491, 0.9759950853678132, 0.9703975793842299, 0.973856015345147, 0.45013637634274706, 0.43250049679406644, 0.41305473953079175, 0.40241431865099553, 0.4717341876771255, 0.4419395946045135, 0.42135995228877987, 0.4007920699344584, 0.4370398290389752, 0.7902519528400798, 0.7079382082483818, 0.6621968750096051, 0.7724148641563265, 0.6744495950423391, 0.6800075800366133, 0.7173902980031881, 0.715840410542737, 0.727704175533245, 0.23090123649067196, 0.21987270813653348, 0.25994100446711865, 0.20516571608095202, 0.12788077754476657, 0.21043137597865247, 0.20486617136640894, 0.3464823398929334, 0.22572404259498302, 0.226577770342677, 0.20688967828590032, 0.20095520652114263, 0.21433893279056015, 0.20110960514854104, 0.18410654646075886, 0.2418663397215841, 0.16120355154170518, 0.21324100372879717, 0.22534229376848525, 0.25921783738451576, 0.28307130150973603, 0.2231085369349468, 0.13721702780785894, 0.26012211033034893, 0.22712935479764473, 0.21862532043963168, 0.29544125923687803, 0.3744516788348514, 0.4389058407157044, 0.36545191648099273, 0.37032653184225683, 0.3869403062973489, 0.35529524723982564, 0.4471194060816214, 0.33801350420381215, 0.40795676709953477, 0.11061513318769745, 0.04399688347483954, 0.12045247640981582, 0.12869197115223396, 0.1436064789642798, 0.10346155567029913, 0.11419310920019654, 0.07444508473879796, 0.11180717190569234, 0.24483519722720015, 0.23892813621097764, 0.24034129009138794, 0.24780942132223305, 0.251100784705259, 0.26566594912868, 0.2336397059413946, 0.2656312889322039, 0.18693428580057836, 0.6236326259348204, 0.62341845477433, 0.6282342252359228, 0.6109308897887678, 0.6048384501961279, 0.5935883037472611, 0.6646931268210983, 0.5854408118388018, 0.6518855811206364, 0.09083610848074097, 0.1049148990890757, 0.10376248365174323, 0.3318051247675561, 0.11181080437467916, 0.11739596296050547, 0.11146342582360591, 0.13144500614697952, 0.16468667462426112, 0.26007631665318864, 0.22193788366485134, 0.19176186078590696, 0.28487088224917945, 0.16792079430569862, 0.15665225287398465, 0.1766364516488066, 0.20859488864714482, 0.136863100922063, 0.3750173338008781, 0.4024142334069746, 0.41304184486318696, 0.386332026353744, 0.35599454538536146, 0.3577856346568419, 0.4233982075526129, 0.4310610405536558, 0.4094157175474662, 0.2818200371859966, 0.3150324345756683, 0.2932208874464921, 0.2659096368639492, 0.20995396381356812, 0.30005678059945895, 0.31885437293543195, 0.3421173072394492, 0.33181296072927835, 0.2473431623862994, 0.17828626547302207, 0.2215230957594696, 0.1791286058143714, 0.19697875042807345, 0.23949785649706068, 0.20427963130230065, 0.20103228431774367, 0.22477686349793835, 0.18997114523892378, 0.1977209700356426, 0.26960638681366556, 0.3181124284749278, 0.22057858110284023, 0.2017993454142326, 0.23478953110204814, 0.20761922716572234, 0.25879814782985466, 0.8126431101312185, 0.18163821939294034, 0.15302317957596312, 0.8523516066807568, 0.7242183276297145, 0.19887646390754188, 0.14226151723719105, 0.8067090059151145, 0.8607973614370729, 0.8111375859181442, 0.20930835234989387, 0.7714815995982495, 0.2063136358210509, 0.1665619091540006, 0.6773872878109815, 0.10466607546168638, 0.21104436084178801, 0.7224954641398895, 0.18403057839542558, 0.2120399573477474, 0.18957848592671478, 0.1899142156753737, 0.20146218089840728, 0.18259151312795396, 0.18907614181245047, 0.20218354734696242, 0.18808533041039377, 0.09623692118077964, 0.08637744221259147, 0.09498920155365198, 0.08509844001079236, 0.08797107329006448, 0.0835388095045837, 0.09927746815144856, 0.0852326900678998, 0.09897408945105435]}, "mutation_prompt": null}
{"id": "1d2bdd1a-9b65-4537-855f-403409e3fe32", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.full(self.population_size, np.inf)\n        \n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate new positions using vectorized operations\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n            \n            # Update personal bests\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n            \n            # Update global best\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n            \n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update (combine position update and velocity calculation)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[indices[0]] + self.F * (personal_best_positions[indices[1]] - personal_best_positions[indices[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, scores[best_idx]", "name": "HybridPSODE", "description": "Optimized HybridPSODE by refining vector operations, improving loop efficiency, and reducing function evaluations.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3c64bc8a-338c-4637-b986-e49fa781dc46", "metadata": {"aucs": [0.7571455047953002, 0.7286374690804054, 0.7520918440249408, 0.7658836792796442, 0.7841022749380477, 0.7706191483353918, 0.7680799388141835, 0.739381630562068, 0.7539348139437618, 0.5197618313468325, 0.5371950898971525, 0.528354905304291, 0.4831377837321579, 0.5413957905566436, 0.5282085251392581, 0.5522911959825766, 0.5042285596743501, 0.542431706948758, 0.24521263944528449, 0.21459653966680614, 0.13829197610261146, 0.2641784410484237, 0.1735079328147332, 0.21719335157919828, 0.2747926130689027, 0.15366658016899093, 0.12731343524889416, 0.1288452734238681, 0.12270467341142954, 0.15533720598020395, 0.1353196816483907, 0.11746464258580269, 0.1397478173680129, 0.12053613779178773, 0.1380157801067622, 0.13868996846178128, 0.9779416768981909, 0.9829477336881429, 0.9686013060232305, 0.9756784016624767, 0.9677851284159503, 0.9691649566582491, 0.9759950853678132, 0.9703975793842299, 0.973856015345147, 0.45013637634274706, 0.43250049679406644, 0.41305473953079175, 0.40241431865099553, 0.4717341876771255, 0.4419395946045135, 0.42135995228877987, 0.4007920699344584, 0.4370398290389752, 0.7902519528400798, 0.7079382082483818, 0.6621968750096051, 0.7724148641563265, 0.6744495950423391, 0.6800075800366133, 0.7173902980031881, 0.715840410542737, 0.727704175533245, 0.23090123649067196, 0.21987270813653348, 0.25994100446711865, 0.20516571608095202, 0.12788077754476657, 0.21043137597865247, 0.20486617136640894, 0.3464823398929334, 0.22572404259498302, 0.226577770342677, 0.20688967828590032, 0.20095520652114263, 0.21433893279056015, 0.20110960514854104, 0.18410654646075886, 0.2418663397215841, 0.16120355154170518, 0.21324100372879717, 0.22534229376848525, 0.25921783738451576, 0.28307130150973603, 0.2231085369349468, 0.13721702780785894, 0.26012211033034893, 0.22712935479764473, 0.21862532043963168, 0.29544125923687803, 0.3744516788348514, 0.4389058407157044, 0.36545191648099273, 0.37032653184225683, 0.3869403062973489, 0.35529524723982564, 0.4471194060816214, 0.33801350420381215, 0.40795676709953477, 0.11061513318769745, 0.04399688347483954, 0.12045247640981582, 0.12869197115223396, 0.1436064789642798, 0.10346155567029913, 0.11419310920019654, 0.07444508473879796, 0.11180717190569234, 0.24483519722720015, 0.23892813621097764, 0.24034129009138794, 0.24780942132223305, 0.251100784705259, 0.26566594912868, 0.2336397059413946, 0.2656312889322039, 0.18693428580057836, 0.6236326259348204, 0.62341845477433, 0.6282342252359228, 0.6109308897887678, 0.6048384501961279, 0.5935883037472611, 0.6646931268210983, 0.5854408118388018, 0.6518855811206364, 0.09083610848074097, 0.1049148990890757, 0.10376248365174323, 0.3318051247675561, 0.11181080437467916, 0.11739596296050547, 0.11146342582360591, 0.13144500614697952, 0.16468667462426112, 0.26007631665318864, 0.22193788366485134, 0.19176186078590696, 0.28487088224917945, 0.16792079430569862, 0.15665225287398465, 0.1766364516488066, 0.20859488864714482, 0.136863100922063, 0.3750173338008781, 0.4024142334069746, 0.41304184486318696, 0.386332026353744, 0.35599454538536146, 0.3577856346568419, 0.4233982075526129, 0.4310610405536558, 0.4094157175474662, 0.2818200371859966, 0.3150324345756683, 0.2932208874464921, 0.2659096368639492, 0.20995396381356812, 0.30005678059945895, 0.31885437293543195, 0.3421173072394492, 0.33181296072927835, 0.2473431623862994, 0.17828626547302207, 0.2215230957594696, 0.1791286058143714, 0.19697875042807345, 0.23949785649706068, 0.20427963130230065, 0.20103228431774367, 0.22477686349793835, 0.18997114523892378, 0.1977209700356426, 0.26960638681366556, 0.3181124284749278, 0.22057858110284023, 0.2017993454142326, 0.23478953110204814, 0.20761922716572234, 0.25879814782985466, 0.8126431101312185, 0.18163821939294034, 0.15302317957596312, 0.8523516066807568, 0.7242183276297145, 0.19887646390754188, 0.14226151723719105, 0.8067090059151145, 0.8607973614370729, 0.8111375859181442, 0.20930835234989387, 0.7714815995982495, 0.2063136358210509, 0.1665619091540006, 0.6773872878109815, 0.10466607546168638, 0.21104436084178801, 0.7224954641398895, 0.18403057839542558, 0.2120399573477474, 0.18957848592671478, 0.1899142156753737, 0.20146218089840728, 0.18259151312795396, 0.18907614181245047, 0.20218354734696242, 0.18808533041039377, 0.09623692118077964, 0.08637744221259147, 0.09498920155365198, 0.08509844001079236, 0.08797107329006448, 0.0835388095045837, 0.09927746815144856, 0.0852326900678998, 0.09897408945105435]}, "mutation_prompt": null}
{"id": "5bd0b01a-d82f-40cf-bcc8-3b25353a2c2f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.full(self.population_size, np.inf)\n        \n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate new positions using vectorized operations\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n            \n            # Update personal bests\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n            \n            # Update global best\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n            \n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update (combine position update and velocity calculation)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[indices[0]] + self.F * (personal_best_positions[indices[1]] - personal_best_positions[indices[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, scores[best_idx]", "name": "HybridPSODE", "description": "Optimized HybridPSODE by refining vector operations, improving loop efficiency, and reducing function evaluations.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3c64bc8a-338c-4637-b986-e49fa781dc46", "metadata": {"aucs": [0.7571455047953002, 0.7286374690804054, 0.7520918440249408, 0.7658836792796442, 0.7841022749380477, 0.7706191483353918, 0.7680799388141835, 0.739381630562068, 0.7539348139437618, 0.5197618313468325, 0.5371950898971525, 0.528354905304291, 0.4831377837321579, 0.5413957905566436, 0.5282085251392581, 0.5522911959825766, 0.5042285596743501, 0.542431706948758, 0.24521263944528449, 0.21459653966680614, 0.13829197610261146, 0.2641784410484237, 0.1735079328147332, 0.21719335157919828, 0.2747926130689027, 0.15366658016899093, 0.12731343524889416, 0.1288452734238681, 0.12270467341142954, 0.15533720598020395, 0.1353196816483907, 0.11746464258580269, 0.1397478173680129, 0.12053613779178773, 0.1380157801067622, 0.13868996846178128, 0.9779416768981909, 0.9829477336881429, 0.9686013060232305, 0.9756784016624767, 0.9677851284159503, 0.9691649566582491, 0.9759950853678132, 0.9703975793842299, 0.973856015345147, 0.45013637634274706, 0.43250049679406644, 0.41305473953079175, 0.40241431865099553, 0.4717341876771255, 0.4419395946045135, 0.42135995228877987, 0.4007920699344584, 0.4370398290389752, 0.7902519528400798, 0.7079382082483818, 0.6621968750096051, 0.7724148641563265, 0.6744495950423391, 0.6800075800366133, 0.7173902980031881, 0.715840410542737, 0.727704175533245, 0.23090123649067196, 0.21987270813653348, 0.25994100446711865, 0.20516571608095202, 0.12788077754476657, 0.21043137597865247, 0.20486617136640894, 0.3464823398929334, 0.22572404259498302, 0.226577770342677, 0.20688967828590032, 0.20095520652114263, 0.21433893279056015, 0.20110960514854104, 0.18410654646075886, 0.2418663397215841, 0.16120355154170518, 0.21324100372879717, 0.22534229376848525, 0.25921783738451576, 0.28307130150973603, 0.2231085369349468, 0.13721702780785894, 0.26012211033034893, 0.22712935479764473, 0.21862532043963168, 0.29544125923687803, 0.3744516788348514, 0.4389058407157044, 0.36545191648099273, 0.37032653184225683, 0.3869403062973489, 0.35529524723982564, 0.4471194060816214, 0.33801350420381215, 0.40795676709953477, 0.11061513318769745, 0.04399688347483954, 0.12045247640981582, 0.12869197115223396, 0.1436064789642798, 0.10346155567029913, 0.11419310920019654, 0.07444508473879796, 0.11180717190569234, 0.24483519722720015, 0.23892813621097764, 0.24034129009138794, 0.24780942132223305, 0.251100784705259, 0.26566594912868, 0.2336397059413946, 0.2656312889322039, 0.18693428580057836, 0.6236326259348204, 0.62341845477433, 0.6282342252359228, 0.6109308897887678, 0.6048384501961279, 0.5935883037472611, 0.6646931268210983, 0.5854408118388018, 0.6518855811206364, 0.09083610848074097, 0.1049148990890757, 0.10376248365174323, 0.3318051247675561, 0.11181080437467916, 0.11739596296050547, 0.11146342582360591, 0.13144500614697952, 0.16468667462426112, 0.26007631665318864, 0.22193788366485134, 0.19176186078590696, 0.28487088224917945, 0.16792079430569862, 0.15665225287398465, 0.1766364516488066, 0.20859488864714482, 0.136863100922063, 0.3750173338008781, 0.4024142334069746, 0.41304184486318696, 0.386332026353744, 0.35599454538536146, 0.3577856346568419, 0.4233982075526129, 0.4310610405536558, 0.4094157175474662, 0.2818200371859966, 0.3150324345756683, 0.2932208874464921, 0.2659096368639492, 0.20995396381356812, 0.30005678059945895, 0.31885437293543195, 0.3421173072394492, 0.33181296072927835, 0.2473431623862994, 0.17828626547302207, 0.2215230957594696, 0.1791286058143714, 0.19697875042807345, 0.23949785649706068, 0.20427963130230065, 0.20103228431774367, 0.22477686349793835, 0.18997114523892378, 0.1977209700356426, 0.26960638681366556, 0.3181124284749278, 0.22057858110284023, 0.2017993454142326, 0.23478953110204814, 0.20761922716572234, 0.25879814782985466, 0.8126431101312185, 0.18163821939294034, 0.15302317957596312, 0.8523516066807568, 0.7242183276297145, 0.19887646390754188, 0.14226151723719105, 0.8067090059151145, 0.8607973614370729, 0.8111375859181442, 0.20930835234989387, 0.7714815995982495, 0.2063136358210509, 0.1665619091540006, 0.6773872878109815, 0.10466607546168638, 0.21104436084178801, 0.7224954641398895, 0.18403057839542558, 0.2120399573477474, 0.18957848592671478, 0.1899142156753737, 0.20146218089840728, 0.18259151312795396, 0.18907614181245047, 0.20218354734696242, 0.18808533041039377, 0.09623692118077964, 0.08637744221259147, 0.09498920155365198, 0.08509844001079236, 0.08797107329006448, 0.0835388095045837, 0.09927746815144856, 0.0852326900678998, 0.09897408945105435]}, "mutation_prompt": null}
{"id": "ef93e849-6329-4f4a-82f0-38dfe0e6a500", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.w = 0.7\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        # Initialize particles and population\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.full(self.population_size, np.inf)\n        \n        evaluations = 0\n        while evaluations < self.budget:\n            # Evaluate new positions using vectorized operations\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n            \n            # Update personal bests\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n            \n            # Update global best\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n            \n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n\n            # PSO Update (combine position update and velocity calculation)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[indices[0]] + self.F * (personal_best_positions[indices[1]] - personal_best_positions[indices[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n            if evaluations >= self.budget:\n                break\n\n        return global_best_position, scores[best_idx]", "name": "HybridPSODE", "description": "Optimized HybridPSODE by refining vector operations, improving loop efficiency, and reducing function evaluations.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3c64bc8a-338c-4637-b986-e49fa781dc46", "metadata": {"aucs": [0.7571455047953002, 0.7286374690804054, 0.7520918440249408, 0.7658836792796442, 0.7841022749380477, 0.7706191483353918, 0.7680799388141835, 0.739381630562068, 0.7539348139437618, 0.5197618313468325, 0.5371950898971525, 0.528354905304291, 0.4831377837321579, 0.5413957905566436, 0.5282085251392581, 0.5522911959825766, 0.5042285596743501, 0.542431706948758, 0.24521263944528449, 0.21459653966680614, 0.13829197610261146, 0.2641784410484237, 0.1735079328147332, 0.21719335157919828, 0.2747926130689027, 0.15366658016899093, 0.12731343524889416, 0.1288452734238681, 0.12270467341142954, 0.15533720598020395, 0.1353196816483907, 0.11746464258580269, 0.1397478173680129, 0.12053613779178773, 0.1380157801067622, 0.13868996846178128, 0.9779416768981909, 0.9829477336881429, 0.9686013060232305, 0.9756784016624767, 0.9677851284159503, 0.9691649566582491, 0.9759950853678132, 0.9703975793842299, 0.973856015345147, 0.45013637634274706, 0.43250049679406644, 0.41305473953079175, 0.40241431865099553, 0.4717341876771255, 0.4419395946045135, 0.42135995228877987, 0.4007920699344584, 0.4370398290389752, 0.7902519528400798, 0.7079382082483818, 0.6621968750096051, 0.7724148641563265, 0.6744495950423391, 0.6800075800366133, 0.7173902980031881, 0.715840410542737, 0.727704175533245, 0.23090123649067196, 0.21987270813653348, 0.25994100446711865, 0.20516571608095202, 0.12788077754476657, 0.21043137597865247, 0.20486617136640894, 0.3464823398929334, 0.22572404259498302, 0.226577770342677, 0.20688967828590032, 0.20095520652114263, 0.21433893279056015, 0.20110960514854104, 0.18410654646075886, 0.2418663397215841, 0.16120355154170518, 0.21324100372879717, 0.22534229376848525, 0.25921783738451576, 0.28307130150973603, 0.2231085369349468, 0.13721702780785894, 0.26012211033034893, 0.22712935479764473, 0.21862532043963168, 0.29544125923687803, 0.3744516788348514, 0.4389058407157044, 0.36545191648099273, 0.37032653184225683, 0.3869403062973489, 0.35529524723982564, 0.4471194060816214, 0.33801350420381215, 0.40795676709953477, 0.11061513318769745, 0.04399688347483954, 0.12045247640981582, 0.12869197115223396, 0.1436064789642798, 0.10346155567029913, 0.11419310920019654, 0.07444508473879796, 0.11180717190569234, 0.24483519722720015, 0.23892813621097764, 0.24034129009138794, 0.24780942132223305, 0.251100784705259, 0.26566594912868, 0.2336397059413946, 0.2656312889322039, 0.18693428580057836, 0.6236326259348204, 0.62341845477433, 0.6282342252359228, 0.6109308897887678, 0.6048384501961279, 0.5935883037472611, 0.6646931268210983, 0.5854408118388018, 0.6518855811206364, 0.09083610848074097, 0.1049148990890757, 0.10376248365174323, 0.3318051247675561, 0.11181080437467916, 0.11739596296050547, 0.11146342582360591, 0.13144500614697952, 0.16468667462426112, 0.26007631665318864, 0.22193788366485134, 0.19176186078590696, 0.28487088224917945, 0.16792079430569862, 0.15665225287398465, 0.1766364516488066, 0.20859488864714482, 0.136863100922063, 0.3750173338008781, 0.4024142334069746, 0.41304184486318696, 0.386332026353744, 0.35599454538536146, 0.3577856346568419, 0.4233982075526129, 0.4310610405536558, 0.4094157175474662, 0.2818200371859966, 0.3150324345756683, 0.2932208874464921, 0.2659096368639492, 0.20995396381356812, 0.30005678059945895, 0.31885437293543195, 0.3421173072394492, 0.33181296072927835, 0.2473431623862994, 0.17828626547302207, 0.2215230957594696, 0.1791286058143714, 0.19697875042807345, 0.23949785649706068, 0.20427963130230065, 0.20103228431774367, 0.22477686349793835, 0.18997114523892378, 0.1977209700356426, 0.26960638681366556, 0.3181124284749278, 0.22057858110284023, 0.2017993454142326, 0.23478953110204814, 0.20761922716572234, 0.25879814782985466, 0.8126431101312185, 0.18163821939294034, 0.15302317957596312, 0.8523516066807568, 0.7242183276297145, 0.19887646390754188, 0.14226151723719105, 0.8067090059151145, 0.8607973614370729, 0.8111375859181442, 0.20930835234989387, 0.7714815995982495, 0.2063136358210509, 0.1665619091540006, 0.6773872878109815, 0.10466607546168638, 0.21104436084178801, 0.7224954641398895, 0.18403057839542558, 0.2120399573477474, 0.18957848592671478, 0.1899142156753737, 0.20146218089840728, 0.18259151312795396, 0.18907614181245047, 0.20218354734696242, 0.18808533041039377, 0.09623692118077964, 0.08637744221259147, 0.09498920155365198, 0.08509844001079236, 0.08797107329006448, 0.0835388095045837, 0.09927746815144856, 0.0852326900678998, 0.09897408945105435]}, "mutation_prompt": null}
{"id": "5146e8d1-ca59-45ad-bc60-95031f965e24", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.w = 0.6\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.apply_along_axis(func, 1, positions)\n        evaluations = self.population_size\n\n        best_idx = np.argmin(scores)\n        global_best_position = personal_best_positions[best_idx]\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n\n            if evaluations >= self.budget:\n                break\n\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n\n            for i in range(self.population_size):\n                idxs = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[idxs[0]] + self.F * (personal_best_positions[idxs[1]] - personal_best_positions[idxs[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n        return global_best_position, scores[best_idx]", "name": "ImprovedHybridPSODE", "description": "Improved runtime efficiency by restructuring loops, optimizing vector operations, and integrating mutation steps to reduce redundant calculations.", "configspace": "", "generation": 93, "fitness": 0.3817978507136196, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "3c64bc8a-338c-4637-b986-e49fa781dc46", "metadata": {"aucs": [0.7994347183563171, 0.789218079242133, 0.8040104200669969, 0.8192646510704185, 0.7991502344951991, 0.8065414832224013, 0.783256156810582, 0.7996824457955498, 0.7900476225024585, 0.5546684456870794, 0.552073966370787, 0.56330437360809, 0.5546629814889495, 0.5442347784311656, 0.5567916915775464, 0.620139134926754, 0.5588523922907732, 0.5274525984678597, 0.14001988764773454, 0.19225776656626825, 0.41670907425174286, 0.16505781321047885, 0.4005870615756736, 0.13665999487211533, 0.447751976571654, 0.29747581741747664, 0.3670525449715124, 0.13558565542308387, 0.12466760560378043, 0.130639117129578, 0.12214875950323345, 0.12605306533274796, 0.11307245935428512, 0.12639665606986905, 0.15390028849393034, 0.13916622792274191, 0.9828067409685588, 0.9866279236094171, 0.9737605479426721, 0.9806647321894398, 0.9707091947989582, 0.9666325664936084, 0.9771586683674344, 0.9741904140411041, 0.9754612920012032, 0.6118061862772901, 0.5633022963112346, 0.5217821711828103, 0.5818355594510516, 0.6028346399036615, 0.5620764722822842, 0.6136867353184401, 0.08830025031657318, 0.5829176448980598, 0.2261765807971654, 0.7121629322062977, 0.7572472376307183, 0.7974068495731377, 0.7890563860188416, 0.2626887261266809, 0.7695289964080191, 0.7952541786846651, 0.7673119765340763, 0.28017085027717203, 0.255223401797822, 0.32816872932600294, 0.24494732907819228, 0.28203726195983925, 0.30738992262084563, 0.28896643526538035, 0.3231878156950785, 0.2356015164485159, 0.2518317024555974, 0.26200160117387683, 0.284213508593504, 0.33684606002590567, 0.2733372032952843, 0.2658714380555399, 0.3337417235619501, 0.032860891193292496, 0.2211177214453105, 0.23280522819689853, 0.289358048269027, 0.263750051847617, 0.26631396838579313, 0.09405158849201811, 0.0791192958117588, 0.2880689020207693, 0.09325945321379259, 0.30632735098648656, 0.432138791098174, 0.38472034057568805, 0.46999829933890114, 0.44066004740809417, 0.23902977116357038, 0.3294065609587319, 0.4960177963848319, 0.44862443079072034, 0.41410824564796933, 0.0933251948893965, 0.0873059342503979, 0.12063129982343435, 0.16438751407713081, 0.1512006213389615, 0.19048651991800603, 0.22399486561644322, 0.10472797667149802, 0.17690792393787746, 0.244134793185254, 0.23806974552414573, 0.2517800691457498, 0.24745244864265292, 0.2965188136676222, 0.25598385772379095, 0.24328315768577424, 0.2488671356417549, 0.2751342221628238, 0.6852868255103903, 0.6614583699463216, 0.6642878349795667, 0.6550456411925292, 0.6539635845097778, 0.6982294572244012, 0.6898366338441664, 0.6506561314226309, 0.6706343782637982, 0.1297600824789804, 0.11080011974158566, 0.12660951335545723, 0.14405483149238008, 0.13139937383475186, 0.2813806840417392, 0.15039382510181587, 0.1377784114769367, 0.10725213145466717, 0.2768569283396991, 0.21409768469792767, 0.41836078816101907, 0.24449220215782885, 0.41606150381434304, 0.22821867486305059, 0.37520323982664605, 0.18500480157309585, 0.204261991500862, 0.42765469968100056, 0.440488945365228, 0.45957473826110273, 0.4448903815717823, 0.27624568225103263, 0.45573117428181853, 0.5196124293595611, 0.4753891602615332, 0.46951589382006864, 0.31704886907194163, 0.3495224916631059, 0.3516596720699424, 0.3360876891890079, 0.31679269167717194, 0.341559896827375, 0.36126780404982173, 0.36165628195956767, 0.3662866033428389, 0.22081602020763025, 0.21303338003456107, 0.21300799152589012, 0.1962221645302984, 0.22358394049289232, 0.2086445790592356, 0.23202121238843032, 0.20665818519442947, 0.24769278430068198, 0.2357863196024882, 0.5367651653169063, 0.23318829646397476, 0.21081793382802128, 0.21937266772762565, 0.20799047725055897, 0.20053585777091243, 0.5941490500128379, 0.38023560353780494, 0.8504898644643405, 0.17963653796372614, 0.15384188047424308, 0.8473214329091907, 0.20003530948143466, 0.19835551691473874, 0.14230190855043623, 0.16986322992052938, 0.8767309913898562, 0.8083820322413845, 0.21088939242411708, 0.8090369299569682, 0.7603297963581537, 0.7354519450823316, 0.7235931097439788, 0.10500618379441862, 0.20848100922196577, 0.8040548104695973, 0.17828037138814912, 0.1946892479075043, 0.2010567368218913, 0.20569243460478415, 0.1827427822719131, 0.20344324646910528, 0.19024901471336042, 0.18033589712215925, 0.19759578281425294, 0.08963046734010915, 0.09438737508586459, 0.10038066566608372, 0.093398402924871, 0.09398473451681821, 0.09422403728246753, 0.09191899507294254, 0.08823603319756512, 0.10055404540009893]}, "mutation_prompt": null}
{"id": "f33829d5-8da4-429d-b212-8e87065d8aff", "solution": "# Description: EfficientHybridPSODE optimizes computation by precomputing index arrays and utilizing in-place operations to minimize overhead.\n# Code:\nimport numpy as np\n\nclass EfficientHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.w = 0.6\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.apply_along_axis(func, 1, positions)\n        evaluations = self.population_size\n\n        best_idx = np.argmin(scores)\n        global_best_position = personal_best_positions[best_idx]\n\n        idxs = np.arange(self.population_size)\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities *= self.w\n            np.add(velocities, self.c1 * r1 * (personal_best_positions - positions), out=velocities)\n            np.add(velocities, self.c2 * r2 * (global_best_position - positions), out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n\n            if evaluations >= self.budget:\n                break\n\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n\n            for i in range(self.population_size):\n                choice = np.random.choice(np.delete(idxs, i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[choice[0]] + self.F * (personal_best_positions[choice[1]] - personal_best_positions[choice[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n        return global_best_position, scores[best_idx]", "name": "EfficientHybridPSODE", "description": "EfficientHybridPSODE optimizes computation by precomputing index arrays and utilizing in-place operations to minimize overhead.", "configspace": "", "generation": 94, "fitness": 0.3817978507136196, "feedback": "The algorithm EfficientHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "5146e8d1-ca59-45ad-bc60-95031f965e24", "metadata": {"aucs": [0.7994347183563171, 0.789218079242133, 0.8040104200669969, 0.8192646510704185, 0.7991502344951991, 0.8065414832224013, 0.783256156810582, 0.7996824457955498, 0.7900476225024585, 0.5546684456870794, 0.552073966370787, 0.56330437360809, 0.5546629814889495, 0.5442347784311656, 0.5567916915775464, 0.620139134926754, 0.5588523922907732, 0.5274525984678597, 0.14001988764773454, 0.19225776656626825, 0.41670907425174286, 0.16505781321047885, 0.4005870615756736, 0.13665999487211533, 0.447751976571654, 0.29747581741747664, 0.3670525449715124, 0.13558565542308387, 0.12466760560378043, 0.130639117129578, 0.12214875950323345, 0.12605306533274796, 0.11307245935428512, 0.12639665606986905, 0.15390028849393034, 0.13916622792274191, 0.9828067409685588, 0.9866279236094171, 0.9737605479426721, 0.9806647321894398, 0.9707091947989582, 0.9666325664936084, 0.9771586683674344, 0.9741904140411041, 0.9754612920012032, 0.6118061862772901, 0.5633022963112346, 0.5217821711828103, 0.5818355594510516, 0.6028346399036615, 0.5620764722822842, 0.6136867353184401, 0.08830025031657318, 0.5829176448980598, 0.2261765807971654, 0.7121629322062977, 0.7572472376307183, 0.7974068495731377, 0.7890563860188416, 0.2626887261266809, 0.7695289964080191, 0.7952541786846651, 0.7673119765340763, 0.28017085027717203, 0.255223401797822, 0.32816872932600294, 0.24494732907819228, 0.28203726195983925, 0.30738992262084563, 0.28896643526538035, 0.3231878156950785, 0.2356015164485159, 0.2518317024555974, 0.26200160117387683, 0.284213508593504, 0.33684606002590567, 0.2733372032952843, 0.2658714380555399, 0.3337417235619501, 0.032860891193292496, 0.2211177214453105, 0.23280522819689853, 0.289358048269027, 0.263750051847617, 0.26631396838579313, 0.09405158849201811, 0.0791192958117588, 0.2880689020207693, 0.09325945321379259, 0.30632735098648656, 0.432138791098174, 0.38472034057568805, 0.46999829933890114, 0.44066004740809417, 0.23902977116357038, 0.3294065609587319, 0.4960177963848319, 0.44862443079072034, 0.41410824564796933, 0.0933251948893965, 0.0873059342503979, 0.12063129982343435, 0.16438751407713081, 0.1512006213389615, 0.19048651991800603, 0.22399486561644322, 0.10472797667149802, 0.17690792393787746, 0.244134793185254, 0.23806974552414573, 0.2517800691457498, 0.24745244864265292, 0.2965188136676222, 0.25598385772379095, 0.24328315768577424, 0.2488671356417549, 0.2751342221628238, 0.6852868255103903, 0.6614583699463216, 0.6642878349795667, 0.6550456411925292, 0.6539635845097778, 0.6982294572244012, 0.6898366338441664, 0.6506561314226309, 0.6706343782637982, 0.1297600824789804, 0.11080011974158566, 0.12660951335545723, 0.14405483149238008, 0.13139937383475186, 0.2813806840417392, 0.15039382510181587, 0.1377784114769367, 0.10725213145466717, 0.2768569283396991, 0.21409768469792767, 0.41836078816101907, 0.24449220215782885, 0.41606150381434304, 0.22821867486305059, 0.37520323982664605, 0.18500480157309585, 0.204261991500862, 0.42765469968100056, 0.440488945365228, 0.45957473826110273, 0.4448903815717823, 0.27624568225103263, 0.45573117428181853, 0.5196124293595611, 0.4753891602615332, 0.46951589382006864, 0.31704886907194163, 0.3495224916631059, 0.3516596720699424, 0.3360876891890079, 0.31679269167717194, 0.341559896827375, 0.36126780404982173, 0.36165628195956767, 0.3662866033428389, 0.22081602020763025, 0.21303338003456107, 0.21300799152589012, 0.1962221645302984, 0.22358394049289232, 0.2086445790592356, 0.23202121238843032, 0.20665818519442947, 0.24769278430068198, 0.2357863196024882, 0.5367651653169063, 0.23318829646397476, 0.21081793382802128, 0.21937266772762565, 0.20799047725055897, 0.20053585777091243, 0.5941490500128379, 0.38023560353780494, 0.8504898644643405, 0.17963653796372614, 0.15384188047424308, 0.8473214329091907, 0.20003530948143466, 0.19835551691473874, 0.14230190855043623, 0.16986322992052938, 0.8767309913898562, 0.8083820322413845, 0.21088939242411708, 0.8090369299569682, 0.7603297963581537, 0.7354519450823316, 0.7235931097439788, 0.10500618379441862, 0.20848100922196577, 0.8040548104695973, 0.17828037138814912, 0.1946892479075043, 0.2010567368218913, 0.20569243460478415, 0.1827427822719131, 0.20344324646910528, 0.19024901471336042, 0.18033589712215925, 0.19759578281425294, 0.08963046734010915, 0.09438737508586459, 0.10038066566608372, 0.093398402924871, 0.09398473451681821, 0.09422403728246753, 0.09191899507294254, 0.08823603319756512, 0.10055404540009893]}, "mutation_prompt": null}
{"id": "974fdec4-9ca6-4186-850f-a320e602bd2b", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.w = 0.6\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.apply_along_axis(func, 1, positions)\n        evaluations = self.population_size\n\n        best_idx = np.argmin(scores)\n        global_best_position = personal_best_positions[best_idx]\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n\n            if evaluations >= self.budget:\n                break\n\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n\n            for i in range(self.population_size):\n                idxs = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[idxs[0]] + self.F * (personal_best_positions[idxs[1]] - personal_best_positions[idxs[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n        return global_best_position, scores[best_idx]", "name": "ImprovedHybridPSODE", "description": "Improved runtime efficiency by restructuring loops, optimizing vector operations, and integrating mutation steps to reduce redundant calculations.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5146e8d1-ca59-45ad-bc60-95031f965e24", "metadata": {"aucs": [0.7994347183563171, 0.789218079242133, 0.8040104200669969, 0.8192646510704185, 0.7991502344951991, 0.8065414832224013, 0.783256156810582, 0.7996824457955498, 0.7900476225024585, 0.5546684456870794, 0.552073966370787, 0.56330437360809, 0.5546629814889495, 0.5442347784311656, 0.5567916915775464, 0.620139134926754, 0.5588523922907732, 0.5274525984678597, 0.14001988764773454, 0.19225776656626825, 0.41670907425174286, 0.16505781321047885, 0.4005870615756736, 0.13665999487211533, 0.447751976571654, 0.29747581741747664, 0.3670525449715124, 0.13558565542308387, 0.12466760560378043, 0.130639117129578, 0.12214875950323345, 0.12605306533274796, 0.11307245935428512, 0.12639665606986905, 0.15390028849393034, 0.13916622792274191, 0.9828067409685588, 0.9866279236094171, 0.9737605479426721, 0.9806647321894398, 0.9707091947989582, 0.9666325664936084, 0.9771586683674344, 0.9741904140411041, 0.9754612920012032, 0.6118061862772901, 0.5633022963112346, 0.5217821711828103, 0.5818355594510516, 0.6028346399036615, 0.5620764722822842, 0.6136867353184401, 0.08830025031657318, 0.5829176448980598, 0.2261765807971654, 0.7121629322062977, 0.7572472376307183, 0.7974068495731377, 0.7890563860188416, 0.2626887261266809, 0.7695289964080191, 0.7952541786846651, 0.7673119765340763, 0.28017085027717203, 0.255223401797822, 0.32816872932600294, 0.24494732907819228, 0.28203726195983925, 0.30738992262084563, 0.28896643526538035, 0.3231878156950785, 0.2356015164485159, 0.2518317024555974, 0.26200160117387683, 0.284213508593504, 0.33684606002590567, 0.2733372032952843, 0.2658714380555399, 0.3337417235619501, 0.032860891193292496, 0.2211177214453105, 0.23280522819689853, 0.289358048269027, 0.263750051847617, 0.26631396838579313, 0.09405158849201811, 0.0791192958117588, 0.2880689020207693, 0.09325945321379259, 0.30632735098648656, 0.432138791098174, 0.38472034057568805, 0.46999829933890114, 0.44066004740809417, 0.23902977116357038, 0.3294065609587319, 0.4960177963848319, 0.44862443079072034, 0.41410824564796933, 0.0933251948893965, 0.0873059342503979, 0.12063129982343435, 0.16438751407713081, 0.1512006213389615, 0.19048651991800603, 0.22399486561644322, 0.10472797667149802, 0.17690792393787746, 0.244134793185254, 0.23806974552414573, 0.2517800691457498, 0.24745244864265292, 0.2965188136676222, 0.25598385772379095, 0.24328315768577424, 0.2488671356417549, 0.2751342221628238, 0.6852868255103903, 0.6614583699463216, 0.6642878349795667, 0.6550456411925292, 0.6539635845097778, 0.6982294572244012, 0.6898366338441664, 0.6506561314226309, 0.6706343782637982, 0.1297600824789804, 0.11080011974158566, 0.12660951335545723, 0.14405483149238008, 0.13139937383475186, 0.2813806840417392, 0.15039382510181587, 0.1377784114769367, 0.10725213145466717, 0.2768569283396991, 0.21409768469792767, 0.41836078816101907, 0.24449220215782885, 0.41606150381434304, 0.22821867486305059, 0.37520323982664605, 0.18500480157309585, 0.204261991500862, 0.42765469968100056, 0.440488945365228, 0.45957473826110273, 0.4448903815717823, 0.27624568225103263, 0.45573117428181853, 0.5196124293595611, 0.4753891602615332, 0.46951589382006864, 0.31704886907194163, 0.3495224916631059, 0.3516596720699424, 0.3360876891890079, 0.31679269167717194, 0.341559896827375, 0.36126780404982173, 0.36165628195956767, 0.3662866033428389, 0.22081602020763025, 0.21303338003456107, 0.21300799152589012, 0.1962221645302984, 0.22358394049289232, 0.2086445790592356, 0.23202121238843032, 0.20665818519442947, 0.24769278430068198, 0.2357863196024882, 0.5367651653169063, 0.23318829646397476, 0.21081793382802128, 0.21937266772762565, 0.20799047725055897, 0.20053585777091243, 0.5941490500128379, 0.38023560353780494, 0.8504898644643405, 0.17963653796372614, 0.15384188047424308, 0.8473214329091907, 0.20003530948143466, 0.19835551691473874, 0.14230190855043623, 0.16986322992052938, 0.8767309913898562, 0.8083820322413845, 0.21088939242411708, 0.8090369299569682, 0.7603297963581537, 0.7354519450823316, 0.7235931097439788, 0.10500618379441862, 0.20848100922196577, 0.8040548104695973, 0.17828037138814912, 0.1946892479075043, 0.2010567368218913, 0.20569243460478415, 0.1827427822719131, 0.20344324646910528, 0.19024901471336042, 0.18033589712215925, 0.19759578281425294, 0.08963046734010915, 0.09438737508586459, 0.10038066566608372, 0.093398402924871, 0.09398473451681821, 0.09422403728246753, 0.09191899507294254, 0.08823603319756512, 0.10055404540009893]}, "mutation_prompt": null}
{"id": "d2716d18-f3f9-49f4-8192-cc1acc8d486c", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.w = 0.6\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.apply_along_axis(func, 1, positions)\n        evaluations = self.population_size\n\n        best_idx = np.argmin(scores)\n        global_best_position = personal_best_positions[best_idx]\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n\n            if evaluations >= self.budget:\n                break\n\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n\n            for i in range(self.population_size):\n                idxs = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[idxs[0]] + self.F * (personal_best_positions[idxs[1]] - personal_best_positions[idxs[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n        return global_best_position, scores[best_idx]", "name": "ImprovedHybridPSODE", "description": "Improved runtime efficiency by restructuring loops, optimizing vector operations, and integrating mutation steps to reduce redundant calculations.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5146e8d1-ca59-45ad-bc60-95031f965e24", "metadata": {"aucs": [0.7994347183563171, 0.789218079242133, 0.8040104200669969, 0.8192646510704185, 0.7991502344951991, 0.8065414832224013, 0.783256156810582, 0.7996824457955498, 0.7900476225024585, 0.5546684456870794, 0.552073966370787, 0.56330437360809, 0.5546629814889495, 0.5442347784311656, 0.5567916915775464, 0.620139134926754, 0.5588523922907732, 0.5274525984678597, 0.14001988764773454, 0.19225776656626825, 0.41670907425174286, 0.16505781321047885, 0.4005870615756736, 0.13665999487211533, 0.447751976571654, 0.29747581741747664, 0.3670525449715124, 0.13558565542308387, 0.12466760560378043, 0.130639117129578, 0.12214875950323345, 0.12605306533274796, 0.11307245935428512, 0.12639665606986905, 0.15390028849393034, 0.13916622792274191, 0.9828067409685588, 0.9866279236094171, 0.9737605479426721, 0.9806647321894398, 0.9707091947989582, 0.9666325664936084, 0.9771586683674344, 0.9741904140411041, 0.9754612920012032, 0.6118061862772901, 0.5633022963112346, 0.5217821711828103, 0.5818355594510516, 0.6028346399036615, 0.5620764722822842, 0.6136867353184401, 0.08830025031657318, 0.5829176448980598, 0.2261765807971654, 0.7121629322062977, 0.7572472376307183, 0.7974068495731377, 0.7890563860188416, 0.2626887261266809, 0.7695289964080191, 0.7952541786846651, 0.7673119765340763, 0.28017085027717203, 0.255223401797822, 0.32816872932600294, 0.24494732907819228, 0.28203726195983925, 0.30738992262084563, 0.28896643526538035, 0.3231878156950785, 0.2356015164485159, 0.2518317024555974, 0.26200160117387683, 0.284213508593504, 0.33684606002590567, 0.2733372032952843, 0.2658714380555399, 0.3337417235619501, 0.032860891193292496, 0.2211177214453105, 0.23280522819689853, 0.289358048269027, 0.263750051847617, 0.26631396838579313, 0.09405158849201811, 0.0791192958117588, 0.2880689020207693, 0.09325945321379259, 0.30632735098648656, 0.432138791098174, 0.38472034057568805, 0.46999829933890114, 0.44066004740809417, 0.23902977116357038, 0.3294065609587319, 0.4960177963848319, 0.44862443079072034, 0.41410824564796933, 0.0933251948893965, 0.0873059342503979, 0.12063129982343435, 0.16438751407713081, 0.1512006213389615, 0.19048651991800603, 0.22399486561644322, 0.10472797667149802, 0.17690792393787746, 0.244134793185254, 0.23806974552414573, 0.2517800691457498, 0.24745244864265292, 0.2965188136676222, 0.25598385772379095, 0.24328315768577424, 0.2488671356417549, 0.2751342221628238, 0.6852868255103903, 0.6614583699463216, 0.6642878349795667, 0.6550456411925292, 0.6539635845097778, 0.6982294572244012, 0.6898366338441664, 0.6506561314226309, 0.6706343782637982, 0.1297600824789804, 0.11080011974158566, 0.12660951335545723, 0.14405483149238008, 0.13139937383475186, 0.2813806840417392, 0.15039382510181587, 0.1377784114769367, 0.10725213145466717, 0.2768569283396991, 0.21409768469792767, 0.41836078816101907, 0.24449220215782885, 0.41606150381434304, 0.22821867486305059, 0.37520323982664605, 0.18500480157309585, 0.204261991500862, 0.42765469968100056, 0.440488945365228, 0.45957473826110273, 0.4448903815717823, 0.27624568225103263, 0.45573117428181853, 0.5196124293595611, 0.4753891602615332, 0.46951589382006864, 0.31704886907194163, 0.3495224916631059, 0.3516596720699424, 0.3360876891890079, 0.31679269167717194, 0.341559896827375, 0.36126780404982173, 0.36165628195956767, 0.3662866033428389, 0.22081602020763025, 0.21303338003456107, 0.21300799152589012, 0.1962221645302984, 0.22358394049289232, 0.2086445790592356, 0.23202121238843032, 0.20665818519442947, 0.24769278430068198, 0.2357863196024882, 0.5367651653169063, 0.23318829646397476, 0.21081793382802128, 0.21937266772762565, 0.20799047725055897, 0.20053585777091243, 0.5941490500128379, 0.38023560353780494, 0.8504898644643405, 0.17963653796372614, 0.15384188047424308, 0.8473214329091907, 0.20003530948143466, 0.19835551691473874, 0.14230190855043623, 0.16986322992052938, 0.8767309913898562, 0.8083820322413845, 0.21088939242411708, 0.8090369299569682, 0.7603297963581537, 0.7354519450823316, 0.7235931097439788, 0.10500618379441862, 0.20848100922196577, 0.8040548104695973, 0.17828037138814912, 0.1946892479075043, 0.2010567368218913, 0.20569243460478415, 0.1827427822719131, 0.20344324646910528, 0.19024901471336042, 0.18033589712215925, 0.19759578281425294, 0.08963046734010915, 0.09438737508586459, 0.10038066566608372, 0.093398402924871, 0.09398473451681821, 0.09422403728246753, 0.09191899507294254, 0.08823603319756512, 0.10055404540009893]}, "mutation_prompt": null}
{"id": "15b9b2e9-2b74-4c14-a622-9db97a68b6b5", "solution": "import numpy as np\n\nclass OptimizedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.w = 0.6\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(positions)\n        personal_best_positions = np.copy(positions)\n        scores = np.apply_along_axis(func, 1, positions)\n        evaluations = self.population_size\n\n        global_best_position = personal_best_positions[np.argmin(scores)]\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) + self.c2 * r2 * (global_best_position - positions)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            better_mask = current_scores < scores\n            scores[better_mask] = current_scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            if evaluations >= self.budget:\n                break\n\n            global_best_position = personal_best_positions[np.argmin(scores)]\n\n            r3 = np.random.rand(self.population_size, self.dim)\n            mutation_candidates = np.random.choice(self.population_size, (self.population_size, 3), replace=False)\n            mutant_vectors = np.clip(personal_best_positions[mutation_candidates[:, 0]] +\n                                     self.F * (personal_best_positions[mutation_candidates[:, 1]] -\n                                               personal_best_positions[mutation_candidates[:, 2]]),\n                                     self.lower_bound, self.upper_bound)\n\n            crossover_mask = r3 < self.CR\n            trials = np.where(crossover_mask, mutant_vectors, personal_best_positions)\n\n            for i in range(self.population_size):\n                trial_score = func(trials[i])\n                evaluations += 1\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trials[i]\n\n        return global_best_position, scores[np.argmin(scores)]", "name": "OptimizedHybridPSODE", "description": "OptimizedHybridPSODE refines population dynamics and reduces computational overhead by utilizing vectorized operations and combining crossover and mutation efficiently.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "5146e8d1-ca59-45ad-bc60-95031f965e24", "metadata": {}, "mutation_prompt": null}
{"id": "fa1cdb48-6ee6-47b4-891d-c9c5bfcc6041", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.w = 0.6\n        self.F = 0.5\n        self.CR = 0.9\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.scores = np.apply_along_axis(func, 1, self.positions)\n        self.evaluations = self.population_size\n        self.global_best_position = self.personal_best_positions[np.argmin(self.scores)]\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            self._update_velocities()\n            self._update_positions()\n            self._evaluate_population(func)\n\n            if self.evaluations >= self.budget:\n                break\n\n            self._differential_evolution(func)\n\n        return self.global_best_position, self.scores[np.argmin(self.scores)]\n\n    def _update_velocities(self):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        self.velocities *= self.w\n        self.velocities += self.c1 * r1 * (self.personal_best_positions - self.positions)\n        self.velocities += self.c2 * r2 * (self.global_best_position - self.positions)\n\n    def _update_positions(self):\n        np.add(self.positions, self.velocities, out=self.positions)\n        np.clip(self.positions, self.lower_bound, self.upper_bound, out=self.positions)\n\n    def _evaluate_population(self, func):\n        current_scores = np.apply_along_axis(func, 1, self.positions)\n        self.evaluations += self.population_size\n        improved = current_scores < self.scores\n        self.scores[improved] = current_scores[improved]\n        self.personal_best_positions[improved] = self.positions[improved]\n        self.global_best_position = self.personal_best_positions[np.argmin(self.scores)]\n\n    def _differential_evolution(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            idxs = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n            mutant = np.clip(self.personal_best_positions[idxs[0]] + self.F * (self.personal_best_positions[idxs[1]] - self.personal_best_positions[idxs[2]]), self.lower_bound, self.upper_bound)\n            crossover_mask = np.random.rand(self.dim) < self.CR\n            trial = np.where(crossover_mask, mutant, self.personal_best_positions[i])\n            trial_score = func(trial)\n            self.evaluations += 1\n            if trial_score < self.scores[i]:\n                self.scores[i] = trial_score\n                self.personal_best_positions[i] = trial", "name": "EnhancedHybridPSODE", "description": "Enhanced runtime efficiency by optimizing loop structures, vector operations, and leveraging adaptive parameter adjustment.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "5146e8d1-ca59-45ad-bc60-95031f965e24", "metadata": {}, "mutation_prompt": null}
{"id": "408eff19-27ae-4ccf-86a9-5ab92ae366aa", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 40\n        self.c1 = 1.4\n        self.c2 = 1.4\n        self.w = 0.6\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        scores = np.apply_along_axis(func, 1, positions)\n        evaluations = self.population_size\n\n        best_idx = np.argmin(scores)\n        global_best_position = personal_best_positions[best_idx]\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            current_scores = np.apply_along_axis(func, 1, positions)\n            evaluations += self.population_size\n\n            improved = current_scores < scores\n            scores[improved] = current_scores[improved]\n            personal_best_positions[improved] = positions[improved]\n\n            if evaluations >= self.budget:\n                break\n\n            best_idx = np.argmin(scores)\n            global_best_position = personal_best_positions[best_idx]\n\n            for i in range(self.population_size):\n                idxs = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(personal_best_positions[idxs[0]] + self.F * (personal_best_positions[idxs[1]] - personal_best_positions[idxs[2]]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, personal_best_positions[i])\n\n                trial_score = func(trial)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    scores[i] = trial_score\n                    personal_best_positions[i] = trial\n\n        return global_best_position, scores[best_idx]", "name": "ImprovedHybridPSODE", "description": "Improved runtime efficiency by restructuring loops, optimizing vector operations, and integrating mutation steps to reduce redundant calculations.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5146e8d1-ca59-45ad-bc60-95031f965e24", "metadata": {"aucs": [0.7994347183563171, 0.789218079242133, 0.8040104200669969, 0.8192646510704185, 0.7991502344951991, 0.8065414832224013, 0.783256156810582, 0.7996824457955498, 0.7900476225024585, 0.5546684456870794, 0.552073966370787, 0.56330437360809, 0.5546629814889495, 0.5442347784311656, 0.5567916915775464, 0.620139134926754, 0.5588523922907732, 0.5274525984678597, 0.14001988764773454, 0.19225776656626825, 0.41670907425174286, 0.16505781321047885, 0.4005870615756736, 0.13665999487211533, 0.447751976571654, 0.29747581741747664, 0.3670525449715124, 0.13558565542308387, 0.12466760560378043, 0.130639117129578, 0.12214875950323345, 0.12605306533274796, 0.11307245935428512, 0.12639665606986905, 0.15390028849393034, 0.13916622792274191, 0.9828067409685588, 0.9866279236094171, 0.9737605479426721, 0.9806647321894398, 0.9707091947989582, 0.9666325664936084, 0.9771586683674344, 0.9741904140411041, 0.9754612920012032, 0.6118061862772901, 0.5633022963112346, 0.5217821711828103, 0.5818355594510516, 0.6028346399036615, 0.5620764722822842, 0.6136867353184401, 0.08830025031657318, 0.5829176448980598, 0.2261765807971654, 0.7121629322062977, 0.7572472376307183, 0.7974068495731377, 0.7890563860188416, 0.2626887261266809, 0.7695289964080191, 0.7952541786846651, 0.7673119765340763, 0.28017085027717203, 0.255223401797822, 0.32816872932600294, 0.24494732907819228, 0.28203726195983925, 0.30738992262084563, 0.28896643526538035, 0.3231878156950785, 0.2356015164485159, 0.2518317024555974, 0.26200160117387683, 0.284213508593504, 0.33684606002590567, 0.2733372032952843, 0.2658714380555399, 0.3337417235619501, 0.032860891193292496, 0.2211177214453105, 0.23280522819689853, 0.289358048269027, 0.263750051847617, 0.26631396838579313, 0.09405158849201811, 0.0791192958117588, 0.2880689020207693, 0.09325945321379259, 0.30632735098648656, 0.432138791098174, 0.38472034057568805, 0.46999829933890114, 0.44066004740809417, 0.23902977116357038, 0.3294065609587319, 0.4960177963848319, 0.44862443079072034, 0.41410824564796933, 0.0933251948893965, 0.0873059342503979, 0.12063129982343435, 0.16438751407713081, 0.1512006213389615, 0.19048651991800603, 0.22399486561644322, 0.10472797667149802, 0.17690792393787746, 0.244134793185254, 0.23806974552414573, 0.2517800691457498, 0.24745244864265292, 0.2965188136676222, 0.25598385772379095, 0.24328315768577424, 0.2488671356417549, 0.2751342221628238, 0.6852868255103903, 0.6614583699463216, 0.6642878349795667, 0.6550456411925292, 0.6539635845097778, 0.6982294572244012, 0.6898366338441664, 0.6506561314226309, 0.6706343782637982, 0.1297600824789804, 0.11080011974158566, 0.12660951335545723, 0.14405483149238008, 0.13139937383475186, 0.2813806840417392, 0.15039382510181587, 0.1377784114769367, 0.10725213145466717, 0.2768569283396991, 0.21409768469792767, 0.41836078816101907, 0.24449220215782885, 0.41606150381434304, 0.22821867486305059, 0.37520323982664605, 0.18500480157309585, 0.204261991500862, 0.42765469968100056, 0.440488945365228, 0.45957473826110273, 0.4448903815717823, 0.27624568225103263, 0.45573117428181853, 0.5196124293595611, 0.4753891602615332, 0.46951589382006864, 0.31704886907194163, 0.3495224916631059, 0.3516596720699424, 0.3360876891890079, 0.31679269167717194, 0.341559896827375, 0.36126780404982173, 0.36165628195956767, 0.3662866033428389, 0.22081602020763025, 0.21303338003456107, 0.21300799152589012, 0.1962221645302984, 0.22358394049289232, 0.2086445790592356, 0.23202121238843032, 0.20665818519442947, 0.24769278430068198, 0.2357863196024882, 0.5367651653169063, 0.23318829646397476, 0.21081793382802128, 0.21937266772762565, 0.20799047725055897, 0.20053585777091243, 0.5941490500128379, 0.38023560353780494, 0.8504898644643405, 0.17963653796372614, 0.15384188047424308, 0.8473214329091907, 0.20003530948143466, 0.19835551691473874, 0.14230190855043623, 0.16986322992052938, 0.8767309913898562, 0.8083820322413845, 0.21088939242411708, 0.8090369299569682, 0.7603297963581537, 0.7354519450823316, 0.7235931097439788, 0.10500618379441862, 0.20848100922196577, 0.8040548104695973, 0.17828037138814912, 0.1946892479075043, 0.2010567368218913, 0.20569243460478415, 0.1827427822719131, 0.20344324646910528, 0.19024901471336042, 0.18033589712215925, 0.19759578281425294, 0.08963046734010915, 0.09438737508586459, 0.10038066566608372, 0.093398402924871, 0.09398473451681821, 0.09422403728246753, 0.09191899507294254, 0.08823603319756512, 0.10055404540009893]}, "mutation_prompt": null}
