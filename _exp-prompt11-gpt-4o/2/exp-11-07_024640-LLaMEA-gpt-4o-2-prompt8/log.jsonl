{"id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 0, "fitness": 0.2633996372538541, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "a02a8151-8866-4618-b7f1-e0db6f6cf703", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "6628aaaa-34e5-4c99-9eed-edef63424819", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "7619773a-f6ad-4f66-8b99-41018fa35793", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "2c5fd5eb-0ba8-4317-a42e-59f4c0246bef", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.apply_along_axis(\n            lambda harmony: self.evaluate_fitness(harmony), 1, self.harmony_memory)\n\n    def evaluate_fitness(self, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.copy(self.harmony_memory[np.random.randint(self.hms)])\n        for i in range(self.dim):\n            if np.random.rand() >= self.hmcr:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n            elif np.random.rand() < self.par:\n                adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                new_harmony[i] += adjustment\n                new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "Enhanced Adaptive Harmony Search with optimized memory initialization and streamlined fitness evaluations for improved runtime efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {}, "mutation_prompt": null}
{"id": "11aafa09-d032-4862-a54a-8efaa52a5438", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "3718d035-0152-42dd-9210-a7981a721a61", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "ccad9006-cc74-4c18-80be-59cf60cfb441", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "5cb1f745-f9ad-4f61-a5b7-5f33c18ea2fa", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "cd3a6d77-24fc-4bb2-9b48-f048b67732b0", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20\n        self.hmcr = 0.85\n        self.par = 0.35\n        self.bandwidth = 0.1\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.full(self.hms, float('inf'))\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        hmcr_choices = np.random.rand(self.dim) < self.hmcr\n        par_choices = np.random.rand(self.dim) < self.par\n        random_indices = np.random.randint(self.hms, size=self.dim)\n        random_adjustments = self.bandwidth * np.random.uniform(-1, 1, size=self.dim)\n\n        for i in range(self.dim):\n            if hmcr_choices[i]:\n                new_harmony[i] = self.harmony_memory[random_indices[i], i]\n                if par_choices[i]:\n                    new_harmony[i] += random_adjustments[i]\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n            new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        self.fitness_memory = np.array([self.evaluate_fitness(func, harmony) for harmony in self.harmony_memory])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "Optimized Adaptive Harmony Search by caching random choices and minimizing unnecessary computations for enhanced runtime efficiency.", "configspace": "", "generation": 9, "fitness": 0.25645187395303465, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6926213386030504, 0.6812830852868833, 0.7046032523845821, 0.6464501677157917, 0.631889221688331, 0.6001923186812872, 0.6884137168766135, 0.6548604788224031, 0.7337899007042801, 0.3187418862475426, 0.29667826716328827, 0.287836775244359, 0.3105279400871864, 0.3605757300933121, 0.26918601580685086, 0.2647413668618894, 0.28679297239889934, 0.40355527009684733, 0.1882081674757936, 0.188872999710595, 0.18100933115710294, 0.15788514207820392, 0.1852874418210424, 0.29194756890496243, 0.3307778314374389, 0.3096518956995503, 0.2987401885797969, 0.14497031572703578, 0.1465935580754364, 0.1568653047896965, 0.1609045815794048, 0.29196728505204417, 0.26460801296831604, 0.1676549736064522, 0.17771324154302615, 0.240506630936146, 0.9274131193473484, 0.8750646029476117, 0.9104582015810274, 0.9200606208377593, 0.9200713183795652, 0.8730124547697351, 0.9261786687967964, 0.9469410140219259, 0.9090950016977573, 0.30841599158254873, 0.28096458208277386, 0.35641481298109623, 0.3745628696723383, 0.3293602737962731, 0.40413237766157106, 0.32376193654335184, 0.3592576045635947, 0.3564974481373213, 0.16081531096118196, 0.1698965487598212, 0.12787623099831102, 0.2798956302123984, 0.15103426614437032, 0.275386642804492, 0.14663675045861402, 0.2364265714950029, 0.17586396022837858, 0.16202402126646975, 0.15696538729342724, 0.2150323273628636, 0.18216191975617035, 0.2653555768353665, 0.13130830384591696, 0.23248127762945592, 0.2575723351071799, 0.15209377433208193, 0.15452411387344234, 0.12152377841026407, 0.14628174907059965, 0.14937401549509888, 0.18161975581367573, 0.1751719295880001, 0.1964251346412359, 0.12663569923472273, 0.16149759473781433, 9.999999999998899e-05, 9.999999999998899e-05, 0.10099004527229094, 0.015490921448251038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12113307340187529, 0.0942888265382762, 0.08220132595208729, 0.06766754082679127, 0.0610354963663462, 0.004835124090246556, 0.017073389594415178, 0.10557576495355625, 0.06775443617480137, 0.08327010624672726, 0.09317063445619789, 0.08270163961257293, 0.08177629517681284, 0.06544662472781204, 0.0661138726951791, 0.08073637693725466, 0.12512477156296753, 0.11765419701720603, 0.08500953064678618, 0.1724638559093259, 0.04057002604184623, 0.08332012502226283, 0.13029989954470844, 0.08939220249787228, 0.03834207513023247, 0.1874611634311968, 0.13850335013434523, 0.134897937360119, 0.43568870769015144, 0.4638725177162384, 0.45257490960276237, 0.4561197771789286, 0.4384013666667199, 0.48349565323751864, 0.49706597428080035, 0.4824147374680391, 0.4399654670170372, 0.0932990717821085, 0.11240983495846646, 0.11640171841914271, 0.11478683653162203, 0.088308705375576, 0.14461355551000865, 0.10021189276479758, 0.14728056142186485, 0.0763812273335297, 0.1952658457070463, 0.3745394766159068, 0.15563245916665625, 0.20736426564049482, 0.16607994349162236, 0.2029185664450479, 0.22618881373439337, 0.2417923482101031, 0.23266053615316784, 0.2915604355722682, 0.242482203567018, 0.19229733304999663, 0.38711656874855704, 0.20896569235713036, 0.186741325351775, 0.3625915577278217, 0.3746644665683494, 0.19413978124272668, 0.10588447525726319, 0.1979084684609984, 0.18894096127475146, 0.34107591540862914, 0.1645175599530445, 0.1921356681948465, 0.1836320367905191, 0.30473704988624106, 0.14884560424657012, 0.21603164649892548, 0.23639546970823, 0.20985772710440664, 0.20002870433051034, 0.2190658300616437, 0.21666391911139704, 0.2071325194741268, 0.20721319653489978, 0.20176026620302367, 0.2551993390940087, 0.19606468678566125, 0.20986300526690838, 0.20102376483734397, 0.2227691842410271, 0.20721749843015336, 0.2247383617639006, 0.23257835921606484, 0.20971511619243166, 0.18582178991027065, 0.1871776384602546, 0.1841586244192529, 0.8461518901469025, 0.5460253548250855, 0.82891530150379, 0.6234056396818105, 0.1687943433942104, 0.16888938362477346, 0.40673724364738706, 0.21270528387163345, 0.5244102852725059, 0.17595907174766567, 0.1672041430061072, 0.15143782474613054, 0.10469476157077628, 0.3193324324431521, 0.25713278922761706, 0.18359673517008213, 0.18198345410154693, 0.1874261864047314, 0.19284524588666907, 0.18314309866463996, 0.1796820147070961, 0.17380331518428593, 0.1925527630730568, 0.17155611521414227, 0.08491852726777471, 0.08700338386594464, 0.09942622770623166, 0.08996044313009788, 0.09581188013362263, 0.11608125224977961, 0.10523330381049423, 0.08396443355084593, 0.09302381316963859]}, "mutation_prompt": null}
{"id": "4f46e462-89fd-4592-b599-85d7b90912c2", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "bcbee45b-d15a-4bfa-8e54-0e229d6d7b39", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "3219390a-20e3-4aa4-8b35-d77ffeb0824b", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "5b46c710-e27c-474b-b2b6-71ac0837a8bc", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "e3ec5216-7396-405d-a8d5-d99c80102386", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.full(self.hms, float('inf'))\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            self.evaluations += 1\n            return func(harmony)\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        rand_values = np.random.uniform(0, 1, size=self.dim)\n        rand_indices = np.random.randint(self.hms, size=self.dim)\n        adjustments = self.bandwidth * np.random.uniform(-1, 1, size=self.dim)\n        for i in range(self.dim):\n            if rand_values[i] < self.hmcr:\n                new_harmony[i] = self.harmony_memory[rand_indices[i], i]\n                if rand_values[i] < self.par:\n                    new_harmony[i] += adjustments[i]\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        self.fitness_memory = np.array(\n            [self.evaluate_fitness(func, self.harmony_memory[i]) for i in range(self.hms)])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "An optimized Adaptive Harmony Search algorithm with reduced computational overhead through efficient random sampling and harmony evaluations.", "configspace": "", "generation": 14, "fitness": 0.25812541770886077, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6815239586515331, 0.643570089346694, 0.6275213217412858, 0.6500954104464349, 0.644694886883727, 0.6533003436013878, 0.6360688130299497, 0.635005154551177, 0.634597336173703, 0.2909443888897917, 0.31741988350824546, 0.26706630227262207, 0.2255182954974545, 0.27860889197733507, 0.23045424446403595, 0.29949609469331184, 0.28657565028217624, 0.24044931397522884, 0.1864034204789704, 0.2722498693373353, 0.1926619572906113, 0.17725966417474226, 0.245565548455984, 0.185693940602362, 0.18758140560971037, 0.27666545047582036, 0.3168864168007449, 0.15726412201145357, 0.23445748396552102, 0.16405779133760856, 0.185474217297941, 0.1658631579776364, 0.18532943104047028, 0.3490788603394053, 0.2622268246622629, 0.16565575009480404, 0.9141386306171315, 0.9090056320242393, 0.8977809083130326, 0.9169668410801136, 0.8781089223785514, 0.9424288032219126, 0.8962732799068739, 0.9381961773978806, 0.9056920302710316, 0.29827002338456843, 0.2986049670974962, 0.35525856646426135, 0.3794649185808321, 0.3600539736500912, 0.37345625653300873, 0.33769289131716496, 0.29586851071744324, 0.29955154523044425, 0.17755407241971222, 0.2221882267843961, 0.13994208820731657, 0.22063973381682422, 0.26891319702262717, 0.2800270003356722, 0.24013230496847826, 0.2347955163005102, 0.8139057211745415, 0.28884128855719926, 0.20593616672347093, 0.14390629558679102, 0.23349325276609212, 0.19600450623804067, 0.14698885755054902, 0.2693421680878417, 0.15544291933961119, 0.1599436899314184, 0.13378392448661747, 0.2299061535512007, 0.19376914907610188, 0.12955801167996184, 0.13799012776100006, 0.1530350591237457, 0.12993284547442963, 0.10728700055167883, 0.12943259799867524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009161070435095509, 0.006155630032318893, 0.0008839220587811836, 0.04887253323308527, 0.08308673688769486, 0.11230276498041547, 0.02876917884659469, 0.049283339829401474, 0.03910461752466632, 0.08625969970813163, 0.11192701929220072, 0.11820684811204496, 0.06263661835679124, 0.03001565392652028, 0.07968903272422012, 0.05910207645392618, 0.0995623785831452, 0.0937708514630442, 0.062112424331933314, 0.04044012566258459, 0.051573544167276886, 0.12147878651326605, 0.050705221847923476, 0.10730206609549153, 0.0986774424262512, 0.0644173551396432, 0.2005257072689789, 0.18416388788427396, 0.10068873310538184, 0.08384941043567429, 0.43330421387433826, 0.4658364890595672, 0.4356507698974841, 0.4809450432984942, 0.5078774910034839, 0.47086133306461164, 0.5076784606222802, 0.4501521567322565, 0.5097618237106654, 0.13082738797315197, 0.11851924903913491, 0.10761306103687729, 0.15615557401808877, 0.1403451869786293, 0.14135920405364266, 0.13626327600814603, 0.14447744986922795, 0.08316105162276821, 0.2507851303094698, 0.24283130446288503, 0.2835076238575023, 0.27395698508362587, 0.2007033940679187, 0.25378395732060266, 0.20220656028322315, 0.21130707562393347, 0.1970459236065658, 0.20511706547749198, 0.22768380231206464, 0.30311530708789325, 0.24120596296019248, 0.334525285724812, 0.3099671677039699, 0.36902745252354474, 0.4027177774499737, 0.35653668243026126, 0.17559827265487815, 0.1817468667383273, 0.11278419224450531, 0.22642565169077566, 0.21370458437582807, 0.19266954433667594, 0.2197984255856732, 0.2506077900142719, 0.18175588592081593, 0.202849063493593, 0.19775045657631418, 0.21311899684170577, 0.20419064926355113, 0.23450669334669527, 0.1974237885156046, 0.2053420971032508, 0.1985551771671774, 0.2169699314082305, 0.4608490697157839, 0.4405321396960439, 0.2079952137473029, 0.20692117336708582, 0.2649039048962746, 0.29739218660268507, 0.21607468667627694, 0.18790751059224253, 0.21183074704872273, 0.18708223125288737, 0.7840840682713482, 0.7319464273514671, 0.8577098832012136, 0.16222229943241584, 0.3320038977003891, 0.1576153726920122, 0.16505902446367415, 0.16739862361729685, 0.19334072274765002, 0.21107730297683447, 0.23019122212583154, 0.16762361523926084, 0.2091129552008122, 0.21140771788978163, 0.20939374378499997, 0.21215787449484702, 0.2767019974388054, 0.18056835135168825, 0.18891455055940365, 0.1873928506712198, 0.18915247504303856, 0.1840521675797394, 0.18386110523359145, 0.20223942573718023, 0.1954333711008498, 0.18383650508816596, 0.08592432455776111, 0.08150788085955718, 0.09247457831861794, 0.08438956288887456, 0.09058427804015923, 0.0998128581595834, 0.09887900366149005, 0.08431317501320701, 0.09049127863239081]}, "mutation_prompt": null}
{"id": "a1e72237-f254-4357-b84f-cd2643fc6471", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "edf38f54-6868-41a7-a7cf-75c7c3587f81", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "4d4c2b87-34ab-4ac8-becd-d804184aa1ce", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "5818a909-a444-453d-8a07-6735e2bbd1fc", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "fc9cb938-f23a-498c-9811-63fbfd6f5fd8", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "8990e131-9301-42e9-a6b8-15926c9959ee", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "5918f56f-0732-4d0d-bbaf-b821e65f2e1c", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "7fb39eed-9200-4ec0-96e0-f8d5747e174d", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "461ae681-ed1b-4b19-996e-066b90e24bd4", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "a6108625-30de-4ca6-8d81-504278d68033", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "af584929-3e62-448c-8a45-72e278a8d7b2", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "dab8b453-f33c-4695-81a4-6efd00360702", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "2e68e528-2157-4365-9139-f98606adb6d8", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "c3204e20-4a0c-4f61-ae0b-8e8d7f305982", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.full(self.hms, float('inf'))\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = self.harmony_memory[np.random.randint(self.hms)].copy()\n        for i in range(self.dim):\n            if np.random.rand() >= self.hmcr:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n            elif np.random.rand() < self.par:\n                adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                new_harmony[i] += adjustment\n                new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "Enhanced Adaptive Harmony Search with optimized memory access and reduced calculations for improved runtime efficiency without altering functionality.", "configspace": "", "generation": 28, "fitness": 0.24328035304620652, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.5683764680003022, 0.6077237577581489, 0.6240401127118069, 0.5804882631366964, 0.6056597050313087, 0.5988925437269732, 0.5811595145224818, 0.5859642270580053, 0.5705828089199183, 0.24352195115420594, 0.20570123423557862, 0.252098076746034, 0.2285936641575691, 0.22974931547835353, 0.22683001941117964, 0.2610807778032148, 0.31491956369136564, 0.2595025045567644, 0.2326436038832611, 0.154103033796694, 0.14059714216019492, 0.1623275563651707, 0.16459764159509982, 0.26766290231692114, 0.20704738131489608, 0.16559361999824251, 0.27948122445412005, 0.16804867799058665, 0.2760225915989366, 0.14108916844762587, 0.16082290002395128, 0.1699105781890723, 0.1528116304837691, 0.16406757958714335, 0.24338731944799696, 0.147340138678569, 0.8144045973125218, 0.8565565550008112, 0.8210384691720928, 0.8487192886773773, 0.8334231352266362, 0.8511044577880944, 0.9065789679628444, 0.8568982692765108, 0.8688400250677213, 0.30862410256772754, 0.3543734349344795, 0.3561671524693325, 0.3832333804156457, 0.24852613114180444, 0.38747343860951, 0.345872144439474, 0.39221524377311046, 0.305056061802111, 0.13954633324698174, 0.1991255292711125, 0.18208886459145324, 0.23914990018875992, 0.1458666281396891, 0.1887762369074606, 0.18085602809717338, 0.2266766106299365, 0.21646948254314935, 0.16644749736238296, 0.2316410753401994, 0.15551627642854526, 0.1795571851874982, 0.2906769300634182, 0.1285296445863916, 0.1523374610682724, 0.3115042755455275, 0.15108194715212453, 0.12322957623203823, 0.13671847683091132, 0.17052068370315843, 0.15952584067262088, 0.1192623894908964, 0.29440424303627055, 0.1951134419256939, 0.09692500729339704, 0.11850950839077812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001271060479440811, 9.999999999998899e-05, 0.0003226739557001812, 9.999999999998899e-05, 0.10845516314251202, 0.024886028965018903, 0.15553896206862772, 0.06670433515821295, 0.06754079636104648, 0.010293783853054128, 0.04248012175818838, 0.1843384746436152, 0.11477181039350037, 0.03970657588904958, 0.060790061535223816, 0.04048343389495335, 0.10990972610945204, 0.05722323149659936, 0.09244783071976803, 0.12883848144961518, 0.061473792148803996, 0.07438669836114808, 0.10847182247179266, 0.19733864339212437, 0.06274970409355496, 0.17839358980991415, 0.10396009960138197, 0.05136986636985108, 0.19582631005602602, 0.19017287787012827, 0.18396828083196293, 0.12171299193833451, 0.45407423791233614, 0.4436602077912055, 0.46442763422837174, 0.4215628470188941, 0.45098025512551, 0.4646201901993653, 0.493608114124115, 0.4879404239638886, 0.42919423071405716, 0.06077350462302222, 0.08966675991830853, 0.11816523096987108, 0.10228906067329735, 0.09531172395261778, 0.09350403071302493, 0.1236177007864977, 0.11858770024810494, 0.07932013560987505, 0.18158774640743403, 0.2049914769718345, 0.15755486813547215, 0.2784506838393762, 0.26380624147028275, 0.2431182243391775, 0.23543087835726406, 0.18454016274255025, 0.19080274772178274, 0.2564552508836492, 0.21372788425828182, 0.2952303378420422, 0.18679808014768662, 0.2603629758480185, 0.18992636194466783, 0.24389085834077684, 0.3208424814795625, 0.2312993841349813, 0.1741518165220035, 0.1416238857808516, 0.17773069191158553, 0.1724332510739931, 0.17973252297146047, 0.24872986831294042, 0.1384381754175974, 0.18432158657060282, 0.23225673819579884, 0.23385090616199555, 0.19475302855543242, 0.2575334279611886, 0.21961153014113644, 0.23095848047326262, 0.23995637214370358, 0.23870070327730075, 0.21237407127864416, 0.2445534451719008, 0.19399895521119692, 0.22744172557896614, 0.21042926751566315, 0.21256527581401274, 0.19009152046036637, 0.20441901867968348, 0.22204194148403456, 0.2458490436966153, 0.22500713763812297, 0.1363796602393661, 0.14939437442152625, 0.7239787095520697, 0.7755495362299943, 0.20028490966142432, 0.47618624057869197, 0.16295019552710177, 0.16849069243280423, 0.15160135807436037, 0.27055600470731644, 0.12771355309621013, 0.16776751985096872, 0.12651523056443748, 0.3372642072773139, 0.20855942663632288, 0.1047224468880078, 0.6324688781548321, 0.6551997970824839, 0.21304553484108402, 0.2296771633512441, 0.2319466732643194, 0.215362789174256, 0.21464077379087676, 0.2209307581971357, 0.22078992562504585, 0.21617436756610575, 0.21973152271438245, 0.079584448816155, 0.07765615861305308, 0.08525616215227916, 0.08068250354695261, 0.10867322546701685, 0.10413019502008725, 0.09245334239424896, 0.07826940568154062, 0.0834091429694176]}, "mutation_prompt": null}
{"id": "d0d71407-8db3-4339-96cf-fa36a5b180c0", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "0209b5b1-daaf-4d7d-9297-bdf2c50cf6a5", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "53e85e4f-4b7d-403e-8c85-813b33f08d23", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20\n        self.hmcr = 0.85\n        self.par = 0.35\n        self.bandwidth = 0.1\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.full(self.hms, float('inf'))  # Simplified initialization\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = self.harmony_memory[np.random.randint(self.hms)].copy()  # Base on random existing harmony\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * (2 * np.random.rand() - 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i], self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        self.fitness_memory = np.array([self.evaluate_fitness(func, self.harmony_memory[i]) for i in range(self.hms)])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "An optimized Adaptive Harmony Search algorithm with improved efficiency through reduced redundant operations and streamlined memory updates.", "configspace": "", "generation": 31, "fitness": 0.24328035304620652, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.5683764680003022, 0.6077237577581489, 0.6240401127118069, 0.5804882631366964, 0.6056597050313087, 0.5988925437269732, 0.5811595145224818, 0.5859642270580053, 0.5705828089199183, 0.24352195115420594, 0.20570123423557862, 0.252098076746034, 0.2285936641575691, 0.22974931547835353, 0.22683001941117964, 0.2610807778032148, 0.31491956369136564, 0.2595025045567644, 0.2326436038832611, 0.154103033796694, 0.14059714216019492, 0.1623275563651707, 0.16459764159509982, 0.26766290231692114, 0.20704738131489608, 0.16559361999824251, 0.27948122445412005, 0.16804867799058665, 0.2760225915989366, 0.14108916844762587, 0.16082290002395128, 0.1699105781890723, 0.1528116304837691, 0.16406757958714335, 0.24338731944799696, 0.147340138678569, 0.8144045973125218, 0.8565565550008112, 0.8210384691720928, 0.8487192886773773, 0.8334231352266362, 0.8511044577880944, 0.9065789679628444, 0.8568982692765108, 0.8688400250677213, 0.30862410256772754, 0.3543734349344795, 0.3561671524693325, 0.3832333804156457, 0.24852613114180444, 0.38747343860951, 0.345872144439474, 0.39221524377311046, 0.305056061802111, 0.13954633324698174, 0.1991255292711125, 0.18208886459145324, 0.23914990018875992, 0.1458666281396891, 0.1887762369074606, 0.18085602809717338, 0.2266766106299365, 0.21646948254314935, 0.16644749736238296, 0.2316410753401994, 0.15551627642854526, 0.1795571851874982, 0.2906769300634182, 0.1285296445863916, 0.1523374610682724, 0.3115042755455275, 0.15108194715212453, 0.12322957623203823, 0.13671847683091132, 0.17052068370315843, 0.15952584067262088, 0.1192623894908964, 0.29440424303627055, 0.1951134419256939, 0.09692500729339704, 0.11850950839077812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001271060479440811, 9.999999999998899e-05, 0.0003226739557001812, 9.999999999998899e-05, 0.10845516314251202, 0.024886028965018903, 0.15553896206862772, 0.06670433515821295, 0.06754079636104648, 0.010293783853054128, 0.04248012175818838, 0.1843384746436152, 0.11477181039350037, 0.03970657588904958, 0.060790061535223816, 0.04048343389495335, 0.10990972610945204, 0.05722323149659936, 0.09244783071976803, 0.12883848144961518, 0.061473792148803996, 0.07438669836114808, 0.10847182247179266, 0.19733864339212437, 0.06274970409355496, 0.17839358980991415, 0.10396009960138197, 0.05136986636985108, 0.19582631005602602, 0.19017287787012827, 0.18396828083196293, 0.12171299193833451, 0.45407423791233614, 0.4436602077912055, 0.46442763422837174, 0.4215628470188941, 0.45098025512551, 0.4646201901993653, 0.493608114124115, 0.4879404239638886, 0.42919423071405716, 0.06077350462302222, 0.08966675991830853, 0.11816523096987108, 0.10228906067329735, 0.09531172395261778, 0.09350403071302493, 0.1236177007864977, 0.11858770024810494, 0.07932013560987505, 0.18158774640743403, 0.2049914769718345, 0.15755486813547215, 0.2784506838393762, 0.26380624147028275, 0.2431182243391775, 0.23543087835726406, 0.18454016274255025, 0.19080274772178274, 0.2564552508836492, 0.21372788425828182, 0.2952303378420422, 0.18679808014768662, 0.2603629758480185, 0.18992636194466783, 0.24389085834077684, 0.3208424814795625, 0.2312993841349813, 0.1741518165220035, 0.1416238857808516, 0.17773069191158553, 0.1724332510739931, 0.17973252297146047, 0.24872986831294042, 0.1384381754175974, 0.18432158657060282, 0.23225673819579884, 0.23385090616199555, 0.19475302855543242, 0.2575334279611886, 0.21961153014113644, 0.23095848047326262, 0.23995637214370358, 0.23870070327730075, 0.21237407127864416, 0.2445534451719008, 0.19399895521119692, 0.22744172557896614, 0.21042926751566315, 0.21256527581401274, 0.19009152046036637, 0.20441901867968348, 0.22204194148403456, 0.2458490436966153, 0.22500713763812297, 0.1363796602393661, 0.14939437442152625, 0.7239787095520697, 0.7755495362299943, 0.20028490966142432, 0.47618624057869197, 0.16295019552710177, 0.16849069243280423, 0.15160135807436037, 0.27055600470731644, 0.12771355309621013, 0.16776751985096872, 0.12651523056443748, 0.3372642072773139, 0.20855942663632288, 0.1047224468880078, 0.6324688781548321, 0.6551997970824839, 0.21304553484108402, 0.2296771633512441, 0.2319466732643194, 0.215362789174256, 0.21464077379087676, 0.2209307581971357, 0.22078992562504585, 0.21617436756610575, 0.21973152271438245, 0.079584448816155, 0.07765615861305308, 0.08525616215227916, 0.08068250354695261, 0.10867322546701685, 0.10413019502008725, 0.09245334239424896, 0.07826940568154062, 0.0834091429694176]}, "mutation_prompt": null}
{"id": "7fb27c6c-a7c5-417b-9eb7-ff507456cf8b", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "97e68641-8509-4a99-ab5d-df186afa358a", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "7368a577-db69-447f-a85f-a291aed16e0c", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.full(self.hms, float('inf'))\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            self.evaluations += 1\n            return func(harmony)\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        random_choices = np.random.rand(self.dim) < self.hmcr\n        memory_indices = np.random.randint(self.hms, size=self.dim)\n        new_harmony = np.where(\n            random_choices,\n            self.harmony_memory[memory_indices, np.arange(self.dim)],\n            np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        )\n        adjustments = np.random.uniform(-self.bandwidth, self.bandwidth, self.dim)\n        pitch_adjustments = (np.random.rand(self.dim) < self.par) * adjustments\n        new_harmony += pitch_adjustments\n        return np.clip(new_harmony, self.lower_bound, self.upper_bound)\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "Optimized Adaptive Harmony Search with enhanced efficiency through loop restructuring and reduced redundancy.", "configspace": "", "generation": 34, "fitness": 0.2568700718404354, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6859910544638109, 0.6162109376572669, 0.6466480929371617, 0.6702619529266436, 0.6485331549872109, 0.6384441068849225, 0.6883917240605362, 0.663905640143091, 0.6382639586380572, 0.3606123394160127, 0.2658034007410478, 0.21871782738162504, 0.29189588154087953, 0.28110576250758956, 0.19643589188280852, 0.2751380136691244, 0.28917171022422095, 0.3473421186231419, 0.1909618520261095, 0.29924950840406817, 0.3105627598055446, 0.35767517557130346, 0.2734587112914212, 0.20542324039988913, 0.39168383696652387, 0.35875810798714924, 0.21781420576564647, 0.1551323800911154, 0.21372262644481077, 0.1979068921500572, 0.28022006054638915, 0.2677036860198735, 0.18107150283070772, 0.15366270546711147, 0.27884195503772713, 0.1827853131285606, 0.9201966521607015, 0.8516662858975098, 0.8774072732504754, 0.9127417333244462, 0.8761172160956135, 0.8869419225426209, 0.8944724018568927, 0.9058806168902789, 0.9119419243306922, 0.3462081998249993, 0.3364447040627718, 0.31806891367887724, 0.2945811986104492, 0.35905688463637897, 0.38355234361128565, 0.30080294234911475, 0.28023904787128495, 0.34070810419506903, 0.17517699019793487, 0.16587557762929261, 0.19504849826976678, 0.18466295753875006, 0.3417250969382769, 0.21275177625650565, 0.22276287975714304, 0.5772045722401727, 0.230646299046405, 0.16181133795463698, 0.16823241855224136, 0.14139874066176694, 0.2739135787186131, 0.23419245259521226, 0.19430363841894638, 0.1638346037012638, 0.2239859016410103, 0.16698239698521944, 0.12799874421611945, 0.152859224739902, 0.1679317980016749, 0.14808364028265164, 0.1665392792853887, 0.13083366570740418, 0.13302712391601157, 0.13219337591135227, 0.14006976745546762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005493348942145926, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013664259974700554, 9.999999999998899e-05, 0.03943658298845987, 0.05096784478568461, 0.032575472456590426, 0.0569580623525362, 0.06094125353204727, 0.061771344553847696, 0.0702426282280525, 0.08107038151994783, 0.05773113474234992, 0.05640077536423638, 0.0873075379337328, 0.1565675618360014, 0.10715046199055556, 0.06660498375479817, 0.08800606754825113, 0.08372634208217455, 0.1006349183299271, 0.11143122549535112, 0.05520709791886236, 0.09641102991220307, 0.04701560223100609, 0.2101796790064051, 0.12777755542594915, 0.05682713745299983, 0.028970728659033385, 0.20537777341628138, 0.14469828651748962, 0.13182542457527213, 0.4233729952027768, 0.4373690836036348, 0.4225662198604355, 0.4940306513988614, 0.48537419722455466, 0.45382592512842146, 0.4327647517209622, 0.44042285090561206, 0.4732575678297034, 0.15597230438345144, 0.09697577216931075, 0.08735786492011377, 0.14765411785450866, 0.1575679826491745, 0.10644630453252668, 0.12939260131721453, 0.08223717060786129, 0.11135043203510864, 0.19148000172255142, 0.2532544893616079, 0.24051748826805075, 0.19029731454646648, 0.3416348306117004, 0.2959975613363497, 0.15221773694366603, 0.20598439067289742, 0.28122490287307733, 0.23503539339467838, 0.2704757067469422, 0.2615777265447886, 0.4026342935068492, 0.23111570781187663, 0.24837389298269397, 0.39362712239459485, 0.3539149154489142, 0.37304337956879285, 0.13865270936557283, 0.18333126056561, 0.20906333136889665, 0.18585661345742577, 0.204252323806126, 0.25040453672521656, 0.28948163355689926, 0.19102779746399945, 0.20330153716095423, 0.1870796881464637, 0.21365988312814232, 0.20307016866985828, 0.20734543825857776, 0.207833939841638, 0.2462957011511946, 0.21461002331023527, 0.1940720875130888, 0.20169873131896676, 0.19849182544334176, 0.302506706336667, 0.2174695675275521, 0.20318002797117163, 0.1997520877274328, 0.19801272878999665, 0.24740952292543095, 0.18765634481373217, 0.2508964203350108, 0.15739788864647397, 0.18669808322974835, 0.5728212630971548, 0.1984925350338761, 0.7450663546453418, 0.5914223604934026, 0.16537853493122878, 0.17003675489766357, 0.17811121587973922, 0.20182296192254567, 0.21070195055696694, 0.47929061442718923, 0.21270358692039448, 0.20555975203521115, 0.2114483760413267, 0.6820284796896773, 0.21169898702258405, 0.10449299551907065, 0.17996534629135785, 0.18563366671089976, 0.20061529423276248, 0.17722820936707973, 0.17557763071160803, 0.18449009458746324, 0.18563323965767042, 0.18281962193039192, 0.18418537464071905, 0.091177147372702, 0.08341031361007734, 0.09131736491220876, 0.09495226614615604, 0.08522498537164525, 0.09446567664508743, 0.08281074328531246, 0.09065555672678671, 0.07998454560718105]}, "mutation_prompt": null}
{"id": "b355f1e9-2c35-4e1e-b2c2-af92e26863ac", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "465dad73-9a29-4cf6-9886-fe004a244678", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "54af9b0c-7f08-4fb2-9337-d8c927ece124", "solution": "import numpy as np\n\nclass OptimizedAdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.full(self.hms, float('inf'))\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        rand_vals = np.random.rand(self.dim)  # Pre-generate random values\n        new_harmony = np.where(rand_vals < self.hmcr,\n                               self.harmony_memory[np.random.randint(self.hms, size=self.dim), np.arange(self.dim)],\n                               np.random.uniform(self.lower_bound, self.upper_bound, self.dim))\n        adjustments = np.random.uniform(-1, 1, self.dim) * self.bandwidth\n        adjust_mask = rand_vals < self.par\n        new_harmony[adjust_mask] += adjustments[adjust_mask]\n        np.clip(new_harmony, self.lower_bound, self.upper_bound, out=new_harmony)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        self.fitness_memory = np.array([self.evaluate_fitness(func, harmony) for harmony in self.harmony_memory])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "OptimizedAdaptiveHarmonySearch", "description": "Optimized Adaptive Harmony Search by reducing redundant random generation and improving memory update efficiency.", "configspace": "", "generation": 37, "fitness": 0.2630962241617165, "feedback": "The algorithm OptimizedAdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.7108349208050444, 0.6523284131175993, 0.6265189476638383, 0.6210672034731124, 0.6533413939527208, 0.6231844236140407, 0.6670516249871539, 0.6404786187025506, 0.6430277594749207, 0.2964465115592275, 0.26937609429230436, 0.2359634944155079, 0.30477945098370296, 0.3194698736095598, 0.2949745813002246, 0.2875348377324872, 0.3129503552210803, 0.3498439942495656, 0.16922637824195264, 0.19551558416814574, 0.17772400080656514, 0.21212790776144363, 0.18743592101748796, 0.25778806870014104, 0.30352480126616455, 0.18062785366513823, 0.18146364637759216, 0.15439409834897555, 0.16533972569641897, 0.27328509259933575, 0.17607623983732779, 0.17262898762065104, 0.2882216410370444, 0.22305484782750695, 0.2914650340605853, 0.1858517662507485, 0.9155822658158886, 0.9116022105896917, 0.905102018136963, 0.9237329024943048, 0.9106857563256491, 0.931106075782534, 0.8944894375480802, 0.9130257965677533, 0.9095304213378076, 0.3650305584341934, 0.3118462660687237, 0.353679844163551, 0.398833143307846, 0.3790778899473559, 0.3897442332718498, 0.33321011723389937, 0.2686113954376522, 0.3764246834432965, 0.21310924785284646, 0.1846894157377379, 0.14128101095121348, 0.27193406740373305, 0.19340471666601178, 0.28106825941335756, 0.23043198262809828, 0.18030329081056462, 0.23232924454198833, 0.15932304020492816, 0.2611950339028921, 0.36797973635724224, 0.16375107938454314, 0.30559835187522566, 0.17500774950156228, 0.15602619666355766, 0.1478805376556549, 0.16666751102685662, 0.1394526649549418, 0.15434339490117233, 0.13176845102168844, 0.19017077660953363, 0.21438612951637892, 0.1524730840719941, 0.13813961608263947, 0.12796448897935297, 0.15517452817409993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10754370413153536, 9.999999999998899e-05, 9.999999999998899e-05, 0.03452490290255261, 9.999999999998899e-05, 0.11512967231137972, 0.04926553822313273, 0.04152613645890901, 0.10466089580200022, 0.027440873175808567, 9.999999999998899e-05, 0.040784719764247024, 0.06981374801027573, 0.08792700391141517, 0.1014804679020761, 0.09631144354460064, 0.12130389167777045, 0.08965112484686466, 0.03297986197606462, 0.07825608367704939, 0.10582834093137794, 0.10910360314743683, 0.0637020522740489, 0.04940548143137624, 0.12295023737275512, 0.039433318294471276, 0.17804894134821192, 0.13416197069687474, 0.1075333380594331, 0.13612600451004253, 0.1504823997520396, 0.09799668104679327, 0.1062030075568613, 0.45097117075180926, 0.43941304449317076, 0.4276530721819095, 0.4610746343413874, 0.529098420074153, 0.4827363318449167, 0.47875715149512066, 0.5012307906089121, 0.5356980152898461, 0.09402592105970142, 0.11110387099423114, 0.09568038457186434, 0.16753822506835203, 0.1281099997239471, 0.1420315504550852, 0.089570304036243, 0.14170244855388392, 0.08694808729435266, 0.1955849216725989, 0.32698822366739055, 0.16401268857898543, 0.2173883460737024, 0.14391575684915348, 0.19497131277027313, 0.14680449393556227, 0.18372507359558243, 0.22606685872970078, 0.19601138023954767, 0.3772983491567875, 0.3504111335050877, 0.2706746731185443, 0.2653850435483688, 0.2926507182974929, 0.3598496876269176, 0.36430423923029465, 0.3811204963501583, 0.20149838817637145, 0.21933107366104765, 0.21422397849869534, 0.1847807823953297, 0.2132374614360686, 0.19694373127017883, 0.2290542858656468, 0.2678378303682363, 0.2092050030838235, 0.20176524474937407, 0.22860349512049383, 0.25208697554509807, 0.21487158839558418, 0.22975209151019604, 0.22368815451926716, 0.2153135716223482, 0.2322528926957791, 0.22264497954731377, 0.2362460176023664, 0.23192551303390396, 0.2095835801268917, 0.17814412148025527, 0.35177206275020245, 0.22868001232462043, 0.2157559012351995, 0.22241574554493326, 0.19347986138931883, 0.16544555701884478, 0.18772171693971018, 0.6562625608572061, 0.7504482213162761, 0.8054098289925611, 0.8015356365675051, 0.6746550010116487, 0.7876193552383067, 0.14720320985525537, 0.15944341140377416, 0.23105608483169038, 0.2191912630243239, 0.16861193994105417, 0.16763443566594305, 0.21105891271129962, 0.1569916149073688, 0.18821902963962844, 0.25929328840962684, 0.18579287551971124, 0.18781278739158203, 0.1909422603619907, 0.22785872889600078, 0.18208138410952424, 0.18368779599900698, 0.20360564894662336, 0.18365550021909105, 0.18189142857331253, 0.08695375455623622, 0.09505940390728318, 0.08325261219554869, 0.09047512468131247, 0.08351929538449843, 0.08363956608236278, 0.08073066554974961, 0.09087285368612119, 0.09118233883307947]}, "mutation_prompt": null}
{"id": "f75efba3-7d30-4bfd-984a-3cee9e0e3757", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "cb104f21-82dd-4a02-a4cd-077dde5d5e9a", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "34c1b859-90a3-43c5-933a-f57e773f9d51", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "347cd508-1908-4e79-ae30-4c6f6db7861b", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "66e4385f-abc0-4ddc-a292-8ba384cf2df9", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "a4d47dd3-959b-4161-8a29-ff33854c116c", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "5b77f616-6060-4825-9ad9-e086ca471af5", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "326ff4b1-63a7-40e4-a510-d04a1055729c", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "91b7c986-22b3-46dd-bfb8-4558bb310ca0", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "b009d47e-7851-4dd8-8694-55854a3eeaa5", "solution": "import numpy as np\n\nclass OptimizedAdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.full(self.hms, float('inf'))\n        self.evaluations = 0\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        random_harmony_indices = np.random.randint(self.hms, size=self.dim)\n        random_adjustment = self.bandwidth * (2 * np.random.rand(self.dim) - 1)\n        consider_memory = np.random.rand(self.dim) < self.hmcr\n        pitch_adjust = np.random.rand(self.dim) < self.par\n        new_harmony = np.where(consider_memory,\n                               self.harmony_memory[random_harmony_indices, np.arange(self.dim)] +\n                               np.where(pitch_adjust, random_adjustment, 0), \n                               np.random.uniform(self.lower_bound, self.upper_bound, self.dim))\n        return np.clip(new_harmony, self.lower_bound, self.upper_bound)\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "OptimizedAdaptiveHarmonySearch", "description": "Optimized Adaptive Harmony Search with improved memory handling for faster convergence in high-dimensional spaces.", "configspace": "", "generation": 47, "fitness": 0.26115830557041647, "feedback": "The algorithm OptimizedAdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6850850920956071, 0.78106977679292, 0.636183556104703, 0.7151927024532294, 0.6436500166690118, 0.6343200594610217, 0.6736422094876825, 0.6968495903294404, 0.618456530969837, 0.2962009867082953, 0.31623737660531537, 0.2666220528521246, 0.30097156060830876, 0.3368730710527319, 0.32505410039383065, 0.2522537919055664, 0.3299653346612995, 0.2624222774630708, 0.36092003414481666, 0.37053371710573524, 0.1814662280854633, 0.29489069267214807, 0.1868855050137468, 0.4114599765983957, 0.39123954580778564, 0.19444671930311086, 0.19236307291948163, 0.18774115864467666, 0.15099212174050936, 0.16842342780659325, 0.30110693982656944, 0.20340485026690236, 0.24924513498370282, 0.23185178186654387, 0.335319898786139, 0.1867867968861564, 0.9269536678367929, 0.921809337621274, 0.9047517749177301, 0.9131805367541973, 0.9406251634101666, 0.932276051250231, 0.8969916675811463, 0.9164711632001602, 0.9247299486576375, 0.28547368402621454, 0.30646438361127304, 0.3547814464287682, 0.32385123701605967, 0.36871378732973936, 0.39673618644875364, 0.3463782700715765, 0.30285660378865054, 0.3185994761933808, 0.19477940632619917, 0.166611843549054, 0.14820686530909932, 0.38486360295826105, 0.21359059721117812, 0.21528345418786998, 0.22752716351630242, 0.23790741918615055, 0.17563990892096082, 0.17041848468243714, 0.21789130565550618, 0.15353003630541295, 0.16763574807954607, 0.1948823979144051, 0.1566300195362681, 0.16249783792891848, 0.3365421430683586, 0.1803703267887351, 0.16597636022139683, 0.16392772728468896, 0.15458493928279582, 0.22458730290321105, 0.13211539766334568, 0.19796324186730085, 0.3194183776632288, 0.14882923953816007, 0.1265964242593013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015070857931254067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10131208384049784, 0.047693120367986896, 0.07107545753524025, 0.06160042520058884, 0.03862860587652517, 0.07079135047454788, 0.1270134254303772, 0.09688776830655221, 0.06816855464399196, 0.10214611793379846, 0.10693745452702841, 0.11388097994186375, 0.06785232288782916, 0.0765765866657846, 0.09704845644042015, 0.09492506613701301, 0.09726825284117391, 0.04455147234227519, 0.17013405821589744, 0.06383861012298153, 0.13440713943980176, 0.17427668130435037, 0.06558573363049314, 0.05983399191308947, 0.13599474613138085, 0.19097904844201552, 0.11658777655523678, 0.4345027477430171, 0.45675225107391915, 0.4546447731997407, 0.42818012802544614, 0.5068726220549252, 0.4333298611804475, 0.41658925181229844, 0.48641089425421025, 0.5062846619451169, 0.11822377034580767, 0.14407570876000975, 0.1612467862107666, 0.11827933713493677, 0.11557222042204829, 0.14173156137604892, 0.10690571000751792, 0.11840109665594101, 0.16160357565167027, 0.3175111878175104, 0.18795707014487473, 0.22735216933154279, 0.2199405023599207, 0.18161589952925017, 0.1876057076690575, 0.14721048113155843, 0.1609302947055019, 0.20591996401030188, 0.24321490048984873, 0.3143783809860181, 0.19487622906312507, 0.2144694111635682, 0.34767278553583925, 0.25575005744037904, 0.2795577243443347, 0.37048119936781, 0.21598781804720568, 0.2403575823123829, 0.20745388698763567, 0.1991225169516595, 0.21337749727452104, 0.17863810996059326, 0.2402008635423709, 0.16012865624138706, 0.16409930434764974, 0.17111615969913851, 0.22055240063672332, 0.22458330623762235, 0.19263795639011105, 0.23889234486281208, 0.20872120179915432, 0.21240749576624884, 0.23623148496006496, 0.23859690271609202, 0.22630431260498285, 0.21326007358856192, 0.21869855295984053, 0.20081785595981338, 0.22998699076838758, 0.2061466623263385, 0.20334139032419463, 0.25525984783212685, 0.21006589847615864, 0.22679748790046428, 0.18673933557480882, 0.1680438446143424, 0.1705703411881928, 0.8173610417569882, 0.7885379470964082, 0.8332314570144426, 0.16900721066742952, 0.1521513538003888, 0.15992639144407017, 0.3769688233882741, 0.2113216285178232, 0.7577999840089857, 0.1274206296458864, 0.1794204310910742, 0.6067746415218911, 0.10476371242438431, 0.10748624781130733, 0.10454245957193176, 0.18234435960605688, 0.17327918899467498, 0.18022321416052722, 0.19648855746267102, 0.18177256539109998, 0.2154521833032823, 0.18792561102025052, 0.1808967749224175, 0.1756662438911839, 0.09067630149233341, 0.0928970440393565, 0.09301984258695684, 0.08183600981421202, 0.0855230262898482, 0.0818653733335385, 0.0916109372675522, 0.0861735792686501, 0.08819443270384797]}, "mutation_prompt": null}
{"id": "ed735480-77fd-43bb-9a26-c57f5cde1963", "solution": "import numpy as np\n\nclass OptimizedAdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        # Pre-compute all fitness values to avoid redundant evaluations\n        self.fitness_memory = np.apply_along_axis(self.evaluate_fitness, 1, self.harmony_memory)\n\n    def evaluate_fitness(self, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                index = np.random.randint(self.hms)\n                new_harmony[i] = self.harmony_memory[index, i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return np.clip(new_harmony, self.lower_bound, self.upper_bound)\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "OptimizedAdaptiveHarmonySearch", "description": "Optimized Adaptive Harmony Search with enhanced runtime efficiency via loop restructuring and efficient memory updates.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {}, "mutation_prompt": null}
{"id": "2c1bda0f-284f-422d-92b7-02df1d458f67", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "cfa38144-74fe-411c-a66e-8b6c6f314aed", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "5612bcfc-ff38-4f4f-8912-a603d6fb1e67", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([self.evaluate_fitness(func, h) for h in self.harmony_memory])\n        \n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.where(\n            np.random.rand(self.dim) < self.hmcr,\n            self.harmony_memory[np.random.randint(self.hms, size=self.dim), np.arange(self.dim)],\n            np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        )\n        adjustments = np.random.uniform(-1, 1, self.dim) * self.bandwidth\n        pitch_adjust = np.random.rand(self.dim) < self.par\n        new_harmony = np.clip(new_harmony + pitch_adjust * adjustments, self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "Optimized Adaptive Harmony Search by consolidating fitness evaluations and memory updates for runtime efficiency.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {}, "mutation_prompt": null}
{"id": "363b7c03-d0de-4a01-a7b9-135ec28ce4ec", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "f93d167d-fd2a-4237-981b-f43b4b8593f9", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "bac7167b-946e-45db-a32c-a2a99c44ddb3", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "837eb072-13cb-4875-96a0-e3bbf0c6a145", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.apply_along_axis(self.evaluate_fitness, 1, self.harmony_memory)\n\n    def evaluate_fitness(self, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = self.harmony_memory[np.random.randint(self.hms)].copy()\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "Optimize runtime efficiency by reducing redundant fitness evaluations and simplifying harmony improvisation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {}, "mutation_prompt": null}
{"id": "dcd4719e-6dfb-4bc1-875a-e34644410b4f", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "380c8ab5-1a0f-42d6-9a30-6db82b298938", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "00ccc18f-0e04-4d33-b0aa-f962ad08d982", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "05c1d21f-e4fa-4545-a9ff-8e5e1a4896ef", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "c425bdde-04e5-4931-ad3c-1974231fde88", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "1d36f368-eea1-42cb-90d4-4ea101d366de", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "b394e725-0cf2-4397-98d3-aff5636f94d2", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "426a7f05-92b2-49ac-b2f0-513062ea07c2", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "76036e14-8751-45bd-90e4-af25304af98c", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "25737d55-9312-4a89-892b-c4d26c3f6dc1", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "3e0bc970-1e6d-4b0c-9a84-afdbbb384db1", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.full(self.hms, float('inf'))\n        self.evaluations = 0\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            self.evaluations += 1  # Increment evaluations before func call\n            return func(harmony)\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = self.harmony_memory[np.random.randint(self.hms)].copy()\n        for i in range(self.dim):\n            if np.random.rand() >= self.hmcr:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n            elif np.random.rand() < self.par:\n                adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                new_harmony[i] = np.clip(new_harmony[i] + adjustment,\n                                         self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        if new_fitness < self.fitness_memory.max():\n            worst_index = np.argmax(self.fitness_memory)\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.fitness_memory = np.array([self.evaluate_fitness(func, self.harmony_memory[i])\n                                        for i in range(self.hms)])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "An optimized Adaptive Harmony Search algorithm with enhanced runtime efficiency through streamlined pitch adjustment and memory update processes.", "configspace": "", "generation": 66, "fitness": 0.24328035304620652, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.5683764680003022, 0.6077237577581489, 0.6240401127118069, 0.5804882631366964, 0.6056597050313087, 0.5988925437269732, 0.5811595145224818, 0.5859642270580053, 0.5705828089199183, 0.24352195115420594, 0.20570123423557862, 0.252098076746034, 0.2285936641575691, 0.22974931547835353, 0.22683001941117964, 0.2610807778032148, 0.31491956369136564, 0.2595025045567644, 0.2326436038832611, 0.154103033796694, 0.14059714216019492, 0.1623275563651707, 0.16459764159509982, 0.26766290231692114, 0.20704738131489608, 0.16559361999824251, 0.27948122445412005, 0.16804867799058665, 0.2760225915989366, 0.14108916844762587, 0.16082290002395128, 0.1699105781890723, 0.1528116304837691, 0.16406757958714335, 0.24338731944799696, 0.147340138678569, 0.8144045973125218, 0.8565565550008112, 0.8210384691720928, 0.8487192886773773, 0.8334231352266362, 0.8511044577880944, 0.9065789679628444, 0.8568982692765108, 0.8688400250677213, 0.30862410256772754, 0.3543734349344795, 0.3561671524693325, 0.3832333804156457, 0.24852613114180444, 0.38747343860951, 0.345872144439474, 0.39221524377311046, 0.305056061802111, 0.13954633324698174, 0.1991255292711125, 0.18208886459145324, 0.23914990018875992, 0.1458666281396891, 0.1887762369074606, 0.18085602809717338, 0.2266766106299365, 0.21646948254314935, 0.16644749736238296, 0.2316410753401994, 0.15551627642854526, 0.1795571851874982, 0.2906769300634182, 0.1285296445863916, 0.1523374610682724, 0.3115042755455275, 0.15108194715212453, 0.12322957623203823, 0.13671847683091132, 0.17052068370315843, 0.15952584067262088, 0.1192623894908964, 0.29440424303627055, 0.1951134419256939, 0.09692500729339704, 0.11850950839077812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001271060479440811, 9.999999999998899e-05, 0.0003226739557001812, 9.999999999998899e-05, 0.10845516314251202, 0.024886028965018903, 0.15553896206862772, 0.06670433515821295, 0.06754079636104648, 0.010293783853054128, 0.04248012175818838, 0.1843384746436152, 0.11477181039350037, 0.03970657588904958, 0.060790061535223816, 0.04048343389495335, 0.10990972610945204, 0.05722323149659936, 0.09244783071976803, 0.12883848144961518, 0.061473792148803996, 0.07438669836114808, 0.10847182247179266, 0.19733864339212437, 0.06274970409355496, 0.17839358980991415, 0.10396009960138197, 0.05136986636985108, 0.19582631005602602, 0.19017287787012827, 0.18396828083196293, 0.12171299193833451, 0.45407423791233614, 0.4436602077912055, 0.46442763422837174, 0.4215628470188941, 0.45098025512551, 0.4646201901993653, 0.493608114124115, 0.4879404239638886, 0.42919423071405716, 0.06077350462302222, 0.08966675991830853, 0.11816523096987108, 0.10228906067329735, 0.09531172395261778, 0.09350403071302493, 0.1236177007864977, 0.11858770024810494, 0.07932013560987505, 0.18158774640743403, 0.2049914769718345, 0.15755486813547215, 0.2784506838393762, 0.26380624147028275, 0.2431182243391775, 0.23543087835726406, 0.18454016274255025, 0.19080274772178274, 0.2564552508836492, 0.21372788425828182, 0.2952303378420422, 0.18679808014768662, 0.2603629758480185, 0.18992636194466783, 0.24389085834077684, 0.3208424814795625, 0.2312993841349813, 0.1741518165220035, 0.1416238857808516, 0.17773069191158553, 0.1724332510739931, 0.17973252297146047, 0.24872986831294042, 0.1384381754175974, 0.18432158657060282, 0.23225673819579884, 0.23385090616199555, 0.19475302855543242, 0.2575334279611886, 0.21961153014113644, 0.23095848047326262, 0.23995637214370358, 0.23870070327730075, 0.21237407127864416, 0.2445534451719008, 0.19399895521119692, 0.22744172557896614, 0.21042926751566315, 0.21256527581401274, 0.19009152046036637, 0.20441901867968348, 0.22204194148403456, 0.2458490436966153, 0.22500713763812297, 0.1363796602393661, 0.14939437442152625, 0.7239787095520697, 0.7755495362299943, 0.20028490966142432, 0.47618624057869197, 0.16295019552710177, 0.16849069243280423, 0.15160135807436037, 0.27055600470731644, 0.12771355309621013, 0.16776751985096872, 0.12651523056443748, 0.3372642072773139, 0.20855942663632288, 0.1047224468880078, 0.6324688781548321, 0.6551997970824839, 0.21304553484108402, 0.2296771633512441, 0.2319466732643194, 0.215362789174256, 0.21464077379087676, 0.2209307581971357, 0.22078992562504585, 0.21617436756610575, 0.21973152271438245, 0.079584448816155, 0.07765615861305308, 0.08525616215227916, 0.08068250354695261, 0.10867322546701685, 0.10413019502008725, 0.09245334239424896, 0.07826940568154062, 0.0834091429694176]}, "mutation_prompt": null}
{"id": "18e646c2-8fce-4465-a7fc-ddce3aace2a9", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "3e083caa-0b66-43d3-b5a7-ad5ad71149f9", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "326370c0-8398-4a99-a959-be0f4f706f76", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "2c794e55-7182-4a52-9333-70f81acc2693", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "e022ea5d-5eb6-45c2-b8f3-e62acafd70a5", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "6d3591f6-ee4b-46eb-9bc4-e6a50e9e5281", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "8f41a491-6ae4-440c-ab95-80fe335befa6", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "a90d746a-3f08-410b-b5e6-b602fc9db8d5", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "ae0e577f-963a-48e1-b57d-7858be0088ca", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "3931a758-8806-41de-af18-9cf496c84700", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "00d5fdcb-0a98-45fa-a8b9-7a28f4d8be0b", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "efab9d65-93a4-413a-a6ed-dedbc26c4bc5", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "6f07339b-2740-455e-987b-256c7cbc20fb", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "1773046f-c489-4376-b210-bf0b458b4da7", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "98f7b1d5-18f9-4e98-bcf3-e67014a0e9c2", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "ffc6129b-815e-478c-aee7-608d4dccf1cd", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "bc6402c3-d937-4518-9170-8ce1b7c9044c", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "aab13b23-9e0b-4735-9b96-8f8d74a1948f", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "64815ecf-3e62-4249-b181-d315303747d8", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "d9855675-0030-4641-991f-5e3d0d77ea62", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "59ecf493-f189-4971-a86c-7221d4ae043a", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "b6738295-0c5f-4275-8e64-db16b8112300", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "9716d23d-99bc-45c2-9201-76640d7946ea", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.full(self.hms, float('inf'))\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            self.evaluations += 1\n            return func(harmony)\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        rand_list = np.random.rand(self.dim)\n        for i in range(self.dim):\n            if rand_list[i] < self.hmcr:\n                index = np.random.randint(self.hms)\n                new_harmony[i] = self.harmony_memory[index, i]\n                if rand_list[i] < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] = np.clip(new_harmony[i] + adjustment,\n                                              self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        self.fitness_memory = np.array([self.evaluate_fitness(func, self.harmony_memory[i]) for i in range(self.hms)])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "An optimized Adaptive Harmony Search algorithm emphasizing computational efficiency through refined memory updates and loop enhancements.", "configspace": "", "generation": 89, "fitness": 0.25481034795175767, "feedback": "The algorithm AdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6441000722686904, 0.6518008397083844, 0.6674536699939173, 0.6913043433738931, 0.6360564246583869, 0.6255576690284343, 0.6172310963051412, 0.6453144411161886, 0.6440894381745592, 0.286063614619706, 0.3059117191967201, 0.2909570579279027, 0.22934524721922633, 0.2901971005402376, 0.2600853898195834, 0.32552309980589766, 0.32279525635512774, 0.32340117417941683, 0.3515147951207639, 0.27442355332398405, 0.15186453805034983, 0.18059317778334638, 0.17081564538820826, 0.18626350895443888, 0.2557957713784912, 0.36281241411538445, 0.30557761763248703, 0.15995556729742388, 0.1594189095588595, 0.16209008671154568, 0.18330308495907066, 0.17477894823255524, 0.1671951641817888, 0.2444988027845013, 0.2844316947604033, 0.15934011552959237, 0.9020066382425995, 0.9081918480084666, 0.9024272802083587, 0.9168302616271895, 0.9276059772685504, 0.9047397573364936, 0.912752382677036, 0.9166241784761632, 0.8887594745713665, 0.3013661184559584, 0.307530537815245, 0.2986150584486129, 0.39342241899617836, 0.33828187719714775, 0.40682407404632626, 0.3007870234950919, 0.31464329631225907, 0.39259353335175695, 0.2054442707537688, 0.16925372200695799, 0.18788128038226481, 0.2117785146180634, 0.1923370489770514, 0.3539980384961924, 0.1809859595825376, 0.5393939496716142, 0.2352049651272098, 0.1642116925598155, 0.25396708502326404, 0.1464778469342909, 0.1729106571714929, 0.3033918098939792, 0.16002924664563412, 0.2958196396605379, 0.1754410918885072, 0.1570590681246411, 0.15058471698875486, 0.13165711545957126, 0.16506073160866652, 0.09865151816561357, 0.1251716011095927, 0.17101805624621225, 0.17982424103446304, 0.16140646432001926, 0.15667556986321374, 0.0081201093732014, 9.999999999998899e-05, 9.999999999998899e-05, 0.005878174008383419, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006238576350463321, 0.09768299035462169, 0.04886857319094995, 0.04365894087791511, 0.05512434402051747, 0.10570932579121273, 0.025844188112038147, 0.07614464068793236, 0.06529142019375467, 0.08388956176299922, 0.08956868836473553, 0.06958018476882821, 0.03671371752988106, 0.09575884564808057, 0.06832614281263671, 0.05659316645641976, 0.08418177230383317, 0.08724532445247846, 0.08093570521800286, 0.054405784507105426, 0.13123631832777027, 0.12852053846898148, 0.19696575821854645, 0.08909792199025357, 0.08650153055641496, 0.053086027795498425, 0.21379005983445654, 0.1455967393063482, 0.08006671486861305, 0.48923429394476803, 0.42081875111136224, 0.4695782648835275, 0.4833548334681005, 0.47000665387548857, 0.47156782868652203, 0.5062614013713085, 0.44907755259608884, 0.4886586507143956, 0.09973991649926317, 0.07905232167849685, 0.08160845149529927, 0.14199612925623528, 0.12176434516727497, 0.09884414652262874, 0.15785531942422681, 0.08434346308957263, 0.08306201586518325, 0.3431186983534833, 0.2790956164755085, 0.17373269453940632, 0.2334725453956209, 0.21738932114518528, 0.17432640141784872, 0.17457311523063035, 0.1454685280936303, 0.1464843929272991, 0.3702305552359534, 0.3447044280002942, 0.2349075119168017, 0.29782136611779975, 0.2814933615090117, 0.22250780721532315, 0.2747752941103594, 0.2497929139697308, 0.22104990000250213, 0.18244506466102162, 0.2271650599095636, 0.1499815062479034, 0.19111700294371103, 0.24041937339329744, 0.22522308285774584, 0.19083823128942845, 0.1993464199413837, 0.18474011715680205, 0.19720118885852245, 0.19344208702096632, 0.21310717499319565, 0.21345484289500205, 0.21465109176266028, 0.2014220625511841, 0.21699240045135293, 0.23001317487126027, 0.21715191615524376, 0.25364199945082555, 0.1916115755915957, 0.2014269414576333, 0.2268902622704566, 0.221730495437508, 0.18898693632560604, 0.223077797107593, 0.2515984819870144, 0.25531638264436507, 0.1871859119557352, 0.18780257127879763, 0.17301023110562896, 0.8696218223153787, 0.7642462327131366, 0.19960649566592048, 0.1662608988631299, 0.15262670862022387, 0.15800551232692084, 0.5226150983951052, 0.1681749649999178, 0.5486479849572143, 0.3809250822942192, 0.16729919629610923, 0.27507692668206296, 0.10475913962228223, 0.5784964509256004, 0.10553701688598072, 0.19627631663415368, 0.19329170196685486, 0.1878922507536016, 0.17663343965665212, 0.18312055816158013, 0.18567333221096327, 0.1922202559746714, 0.17949102622508162, 0.20426072002914508, 0.08714745118776357, 0.08554084474498636, 0.07741338087445782, 0.09001535176789022, 0.09278229809324545, 0.08499280862137426, 0.09546293291182806, 0.09132079802498394, 0.09821950724187334]}, "mutation_prompt": null}
{"id": "0aa8e3e4-af45-4e47-8df9-4d9410a17e2d", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "4cbd8a3b-ac15-4f36-ad64-b5ccf9391ec4", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "53ff7da0-100f-4770-971f-0f9ad95abc45", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "c9165e3a-edc5-4afd-9395-a858595de082", "solution": "import numpy as np\n\nclass OptimizedAdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20\n        self.hmcr = 0.85\n        self.par = 0.35\n        self.bandwidth = 0.1\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.full(self.hms, np.inf)\n\n    def evaluate_fitness(self, func, harmony):\n        fitness = func(harmony)\n        self.evaluations += 1\n        return fitness\n\n    def improvise_new_harmony(self):\n        new_harmony = np.copy(self.harmony_memory[np.random.randint(self.hms)])\n        for i in range(self.dim):\n            if np.random.rand() >= self.hmcr:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n            elif np.random.rand() < self.par:\n                adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                new_harmony[i] = np.clip(new_harmony[i] + adjustment, self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            if self.evaluations < self.budget:\n                self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "OptimizedAdaptiveHarmonySearch", "description": "Optimized Adaptive Harmony Search with efficient memory handling and streamlined improvisation process to enhance runtime performance.", "configspace": "", "generation": 93, "fitness": 0.24328035304620652, "feedback": "The algorithm OptimizedAdaptiveHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.5683764680003022, 0.6077237577581489, 0.6240401127118069, 0.5804882631366964, 0.6056597050313087, 0.5988925437269732, 0.5811595145224818, 0.5859642270580053, 0.5705828089199183, 0.24352195115420594, 0.20570123423557862, 0.252098076746034, 0.2285936641575691, 0.22974931547835353, 0.22683001941117964, 0.2610807778032148, 0.31491956369136564, 0.2595025045567644, 0.2326436038832611, 0.154103033796694, 0.14059714216019492, 0.1623275563651707, 0.16459764159509982, 0.26766290231692114, 0.20704738131489608, 0.16559361999824251, 0.27948122445412005, 0.16804867799058665, 0.2760225915989366, 0.14108916844762587, 0.16082290002395128, 0.1699105781890723, 0.1528116304837691, 0.16406757958714335, 0.24338731944799696, 0.147340138678569, 0.8144045973125218, 0.8565565550008112, 0.8210384691720928, 0.8487192886773773, 0.8334231352266362, 0.8511044577880944, 0.9065789679628444, 0.8568982692765108, 0.8688400250677213, 0.30862410256772754, 0.3543734349344795, 0.3561671524693325, 0.3832333804156457, 0.24852613114180444, 0.38747343860951, 0.345872144439474, 0.39221524377311046, 0.305056061802111, 0.13954633324698174, 0.1991255292711125, 0.18208886459145324, 0.23914990018875992, 0.1458666281396891, 0.1887762369074606, 0.18085602809717338, 0.2266766106299365, 0.21646948254314935, 0.16644749736238296, 0.2316410753401994, 0.15551627642854526, 0.1795571851874982, 0.2906769300634182, 0.1285296445863916, 0.1523374610682724, 0.3115042755455275, 0.15108194715212453, 0.12322957623203823, 0.13671847683091132, 0.17052068370315843, 0.15952584067262088, 0.1192623894908964, 0.29440424303627055, 0.1951134419256939, 0.09692500729339704, 0.11850950839077812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001271060479440811, 9.999999999998899e-05, 0.0003226739557001812, 9.999999999998899e-05, 0.10845516314251202, 0.024886028965018903, 0.15553896206862772, 0.06670433515821295, 0.06754079636104648, 0.010293783853054128, 0.04248012175818838, 0.1843384746436152, 0.11477181039350037, 0.03970657588904958, 0.060790061535223816, 0.04048343389495335, 0.10990972610945204, 0.05722323149659936, 0.09244783071976803, 0.12883848144961518, 0.061473792148803996, 0.07438669836114808, 0.10847182247179266, 0.19733864339212437, 0.06274970409355496, 0.17839358980991415, 0.10396009960138197, 0.05136986636985108, 0.19582631005602602, 0.19017287787012827, 0.18396828083196293, 0.12171299193833451, 0.45407423791233614, 0.4436602077912055, 0.46442763422837174, 0.4215628470188941, 0.45098025512551, 0.4646201901993653, 0.493608114124115, 0.4879404239638886, 0.42919423071405716, 0.06077350462302222, 0.08966675991830853, 0.11816523096987108, 0.10228906067329735, 0.09531172395261778, 0.09350403071302493, 0.1236177007864977, 0.11858770024810494, 0.07932013560987505, 0.18158774640743403, 0.2049914769718345, 0.15755486813547215, 0.2784506838393762, 0.26380624147028275, 0.2431182243391775, 0.23543087835726406, 0.18454016274255025, 0.19080274772178274, 0.2564552508836492, 0.21372788425828182, 0.2952303378420422, 0.18679808014768662, 0.2603629758480185, 0.18992636194466783, 0.24389085834077684, 0.3208424814795625, 0.2312993841349813, 0.1741518165220035, 0.1416238857808516, 0.17773069191158553, 0.1724332510739931, 0.17973252297146047, 0.24872986831294042, 0.1384381754175974, 0.18432158657060282, 0.23225673819579884, 0.23385090616199555, 0.19475302855543242, 0.2575334279611886, 0.21961153014113644, 0.23095848047326262, 0.23995637214370358, 0.23870070327730075, 0.21237407127864416, 0.2445534451719008, 0.19399895521119692, 0.22744172557896614, 0.21042926751566315, 0.21256527581401274, 0.19009152046036637, 0.20441901867968348, 0.22204194148403456, 0.2458490436966153, 0.22500713763812297, 0.1363796602393661, 0.14939437442152625, 0.7239787095520697, 0.7755495362299943, 0.20028490966142432, 0.47618624057869197, 0.16295019552710177, 0.16849069243280423, 0.15160135807436037, 0.27055600470731644, 0.12771355309621013, 0.16776751985096872, 0.12651523056443748, 0.3372642072773139, 0.20855942663632288, 0.1047224468880078, 0.6324688781548321, 0.6551997970824839, 0.21304553484108402, 0.2296771633512441, 0.2319466732643194, 0.215362789174256, 0.21464077379087676, 0.2209307581971357, 0.22078992562504585, 0.21617436756610575, 0.21973152271438245, 0.079584448816155, 0.07765615861305308, 0.08525616215227916, 0.08068250354695261, 0.10867322546701685, 0.10413019502008725, 0.09245334239424896, 0.07826940568154062, 0.0834091429694176]}, "mutation_prompt": null}
{"id": "53b754bc-ce3b-4565-9b52-09734454bcaa", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "0ef64338-bd78-4d80-b5fe-1bb4581c75cf", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "508c3acb-1110-4d7b-b6c0-de21060769cd", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "4d755408-2e2e-4bdd-9016-5d244df2c68f", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "e1b480e4-dc2b-48c1-bab9-1bd24191c270", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
{"id": "4ce2b717-e6e2-4b08-a934-83457719ebc1", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 20  # Harmony Memory Size\n        self.hmcr = 0.85  # Harmony Memory Consideration Rate\n        self.par = 0.35  # Pitch Adjustment Rate\n        self.bandwidth = 0.1  # Bandwidth for pitch adjustment\n        self.harmony_memory = None\n        self.fitness_memory = None\n        self.evaluations = 0\n\n    def initialize_harmony_memory(self):\n        self.harmony_memory = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.hms, self.dim))\n        self.fitness_memory = np.array([float('inf')] * self.hms)\n\n    def evaluate_fitness(self, func, harmony):\n        if self.evaluations < self.budget:\n            fitness = func(harmony)\n            self.evaluations += 1\n            return fitness\n        return float('inf')\n\n    def improvise_new_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.hmcr:\n                new_harmony[i] = self.harmony_memory[\n                    np.random.randint(self.hms), i]\n                if np.random.rand() < self.par:\n                    adjustment = self.bandwidth * np.random.uniform(-1, 1)\n                    new_harmony[i] += adjustment\n                    new_harmony[i] = np.clip(new_harmony[i],\n                                             self.lower_bound, self.upper_bound)\n            else:\n                new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return new_harmony\n\n    def update_harmony_memory(self, new_harmony, new_fitness):\n        worst_index = np.argmax(self.fitness_memory)\n        if new_fitness < self.fitness_memory[worst_index]:\n            self.harmony_memory[worst_index] = new_harmony\n            self.fitness_memory[worst_index] = new_fitness\n\n    def __call__(self, func):\n        self.initialize_harmony_memory()\n        for i in range(self.hms):\n            self.fitness_memory[i] = self.evaluate_fitness(func, self.harmony_memory[i])\n\n        while self.evaluations < self.budget:\n            new_harmony = self.improvise_new_harmony()\n            new_fitness = self.evaluate_fitness(func, new_harmony)\n            self.update_harmony_memory(new_harmony, new_fitness)\n\n        best_index = np.argmin(self.fitness_memory)\n        return self.harmony_memory[best_index], self.fitness_memory[best_index]", "name": "AdaptiveHarmonySearch", "description": "A novel Adaptive Harmony Search algorithm leveraging dynamic pitch adjustment for efficient exploration and exploitation in high-dimensional spaces.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2e0cd21d-62e8-4cce-ac9e-d20e8a0b96a5", "metadata": {"aucs": [0.6704739784942583, 0.7096563937508154, 0.6798907889133345, 0.6958261923113693, 0.730476060682496, 0.6725464468657887, 0.6889555002338469, 0.7119696036964225, 0.6893384377148706, 0.3322141329230679, 0.3110920642783681, 0.34873382943592823, 0.2955477616514973, 0.2897877882245341, 0.3599145766449663, 0.29924928398468387, 0.26390743334410804, 0.3018269726751701, 0.34307693825837415, 0.16464614285674595, 0.2899394578797938, 0.1869421907755494, 0.3968245776453616, 0.28745572514809803, 0.33622330419401647, 0.37393554058582035, 0.35731219690093685, 0.1609883700368775, 0.1610914731029921, 0.16015245224408814, 0.34437240676820213, 0.1938711251776324, 0.27341710069207714, 0.19222582312101044, 0.19024200101451916, 0.1826326550918732, 0.9141502850783501, 0.9121511012030373, 0.8974672038579157, 0.9301458312255949, 0.9372983526555833, 0.9195913661735208, 0.8681078022622772, 0.8968252952529943, 0.9273911463226413, 0.35855515112433, 0.2849602440176887, 0.3141566893160781, 0.30116458422361936, 0.3081437007003299, 0.3362765027098983, 0.3066458318330939, 0.31217546656665085, 0.35820689592969457, 0.15071010997755407, 0.16856344129392087, 0.21241303801942868, 0.2649372692187031, 0.20525786159415282, 0.20993566113242879, 0.15227186507248258, 0.16877785231344955, 0.1284085085890927, 0.18362627989350955, 0.35182309480624707, 0.16721091689859224, 0.18201507320644672, 0.2161442785912655, 0.1948703012624058, 0.18635779096091687, 0.33174312905641967, 0.18690577374963047, 0.152941393802823, 0.1783705015773528, 0.12921255513658558, 0.132140450892425, 0.17706107733707155, 0.20708297556388544, 0.12737470328491562, 0.16159511402639493, 0.14362851812883204, 0.03212222363044581, 0.05276109451427724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008397966955300373, 0.0004875973027881342, 9.999999999998899e-05, 0.026897997744401048, 0.06242553842192666, 0.047310638052658005, 0.09815683495666305, 0.022524230748078078, 0.036149965040803034, 0.020992181381684127, 0.04025505357119785, 0.10418496416859979, 0.05852018833076167, 0.08203296226968282, 0.19324572648230953, 0.09893899851276833, 0.0715607183533975, 0.12589758951193253, 0.0852968708689339, 0.08067107129575757, 0.09282220140142383, 0.12123935037266365, 0.07175851191489768, 0.06833066904366192, 0.12944610660417655, 0.12794691002506553, 0.08962692372724923, 0.0222856910057333, 0.19106450394754404, 0.16757335008821306, 0.10337945682043459, 0.4697779414052097, 0.4645890919716156, 0.45392162975860995, 0.5190850373584373, 0.45779865529963604, 0.475042281494379, 0.4465956428839277, 0.4625854683840288, 0.48035821708345094, 0.07973605700022601, 0.14339885553742004, 0.0803080995744685, 0.11844296773979479, 0.08272808935467202, 0.14544483903827965, 0.07963791734322112, 0.09034706205000731, 0.11007792654830251, 0.30854613496374206, 0.2360659562681927, 0.1502682029353677, 0.39667188331619074, 0.2721517526844034, 0.2020857779729699, 0.19852282596298587, 0.20904243904528008, 0.17252031988279504, 0.20952512484668895, 0.29869991977602484, 0.3309623080831098, 0.31611932907788753, 0.2607007722186768, 0.21992165988997026, 0.26244792327339206, 0.3680876823714362, 0.2374489571153997, 0.24712248542761484, 0.18573800840223853, 0.13232045407045911, 0.15356848617011387, 0.1878636946752712, 0.2233125878895369, 0.1929453369219285, 0.18385413207721946, 0.17782620971574015, 0.19915550154860162, 0.24058613225196068, 0.1878534900369001, 0.21434835785871686, 0.22315237101516228, 0.2038053395741547, 0.21013487590859636, 0.20686258845298788, 0.2180538633367778, 0.460229447178767, 0.20621828420871358, 0.21378382753573755, 0.22697528906198294, 0.18639683931151052, 0.21775514316882005, 0.5247346097497905, 0.1914596022436038, 0.21179678785760492, 0.17753762822607788, 0.1678335765093707, 0.6515373496406818, 0.8944877509394836, 0.19967223435601622, 0.8530841326039105, 0.10843161998042283, 0.3314079207555799, 0.461454319512425, 0.37861393609535476, 0.20854576597642716, 0.1645543649408583, 0.3542984049920277, 0.2122084117891151, 0.20487394788407787, 0.11223812816344014, 0.5035679140616698, 0.2767801917759355, 0.1914611286871889, 0.19117684620938158, 0.1907101014102105, 0.1870925223238984, 0.18116647778561135, 0.17699293975785513, 0.19433268227876055, 0.1804491699977221, 0.1799476260377182, 0.10261343994917005, 0.07867743699292096, 0.09679454776556318, 0.08961981596606017, 0.08405862395008479, 0.08536497657199293, 0.08431796679874082, 0.09392254994669091, 0.0707229008141731]}, "mutation_prompt": null}
