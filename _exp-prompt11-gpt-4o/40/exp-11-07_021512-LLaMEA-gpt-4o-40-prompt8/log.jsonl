{"id": "c846e641-e18d-4a46-947e-752e4566f4e7", "solution": "import numpy as np\n\nclass APSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(max(20, dim * 5), 100)\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.4\n        self.social_coeff = 1.4\n        self.vel_clamp = (-(self.upper_bound - self.lower_bound), (self.upper_bound - self.lower_bound))\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(self.vel_clamp[0], self.vel_clamp[1], (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        while self.eval_count < self.budget:\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                score = func(positions[i])\n                self.eval_count += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            for i in range(self.population_size):\n                if self.eval_count >= self.budget:\n                    break\n\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n\n                cognitive_velocity = self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                social_velocity = self.social_coeff * r2 * (global_best_position - positions[i])\n                velocities[i] = (self.inertia_weight * velocities[i]) + cognitive_velocity + social_velocity\n                \n                # Clamp velocity\n                velocities[i] = np.clip(velocities[i], self.vel_clamp[0], self.vel_clamp[1])\n\n                positions[i] += velocities[i]\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n        return global_best_position, global_best_score", "name": "APSO", "description": "Adaptive Particle Swarm Optimization (APSO) with dynamic neighborhood topology and velocity control to enhance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2472652982441873, "feedback": "The algorithm APSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.26.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8190088614730935, 0.8190088614730935, 0.8190088614730935, 0.8300386005099561, 0.8300386005099561, 0.8300386005099561, 0.7849817305193217, 0.7849817305193217, 0.7849817305193217, 0.06453536528269599, 0.06453536528269599, 0.06453536528269599, 0.038971283728294615, 0.038971283728294615, 0.038971283728294615, 0.004479669041819401, 0.004479669041819401, 0.004479669041819401, 0.11674925245902523, 0.11674925245902523, 0.11674925245902523, 0.1553810123633892, 0.1553810123633892, 0.1553810123633892, 0.11924199954101677, 0.11924199954101677, 0.11924199954101677, 0.11069099418540718, 0.11069099418540718, 0.11069099418540718, 0.12066221604350025, 0.12066221604350025, 0.12066221604350025, 0.10526091611367683, 0.10526091611367683, 0.10526091611367683, 0.9881031766212551, 0.9881031766212551, 0.9881031766212551, 0.9912699781016696, 0.9912699781016696, 0.9912699781016696, 0.9886294306631153, 0.9886294306631153, 0.9886294306631153, 0.6309721301432862, 0.6309721301432862, 0.6309721301432862, 0.15031338846630915, 0.15031338846630915, 0.15031338846630915, 0.08923316610376131, 0.08923316610376131, 0.08923316610376131, 0.2080417902696945, 0.2080417902696945, 0.2080417902696945, 0.16126482443897217, 0.16126482443897217, 0.16126482443897217, 0.1288609419455231, 0.1288609419455231, 0.1288609419455231, 0.19090938560767867, 0.19090938560767867, 0.19090938560767867, 0.10701033763699253, 0.10701033763699253, 0.10701033763699253, 0.21031697441485475, 0.21031697441485475, 0.21031697441485475, 0.052829124589409915, 0.052829124589409915, 0.052829124589409915, 0.24140472453519102, 0.24140472453519102, 0.24140472453519102, 0.21642532988493535, 0.21642532988493535, 0.21642532988493535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016788612671606806, 0.016788612671606806, 0.016788612671606806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1052363519381424, 0.1052363519381424, 0.1052363519381424, 0.07722181791834559, 0.07722181791834559, 0.07722181791834559, 0.06740642907232008, 0.06740642907232008, 0.06740642907232008, 0.13896736943101773, 0.13896736943101773, 0.13896736943101773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08771006825835648, 0.08771006825835648, 0.08771006825835648, 0.04953727403936059, 0.04953727403936059, 0.04953727403936059, 0.006346630897314243, 0.006346630897314243, 0.006346630897314243, 0.048904198691401723, 0.048904198691401723, 0.048904198691401723, 0.5524005141850618, 0.5524005141850618, 0.5524005141850618, 0.5412139304571646, 0.5412139304571646, 0.5412139304571646, 0.5223851639738757, 0.5223851639738757, 0.5223851639738757, 0.06380977249271369, 0.06380977249271369, 0.06380977249271369, 0.10745270716402433, 0.10745270716402433, 0.10745270716402433, 0.1298998119584288, 0.1298998119584288, 0.1298998119584288, 0.3387031795727008, 0.3387031795727008, 0.3387031795727008, 0.16865485153881365, 0.16865485153881365, 0.16865485153881365, 0.1674624466837833, 0.1674624466837833, 0.1674624466837833, 0.2849151701607815, 0.2849151701607815, 0.2849151701607815, 0.3704324822320031, 0.3704324822320031, 0.3704324822320031, 0.17081277609672174, 0.17081277609672174, 0.17081277609672174, 0.21686169223223628, 0.21686169223223628, 0.21686169223223628, 0.22752173016684585, 0.22752173016684585, 0.22752173016684585, 0.12510600948252992, 0.12510600948252992, 0.12510600948252992, 0.22247770550074097, 0.22247770550074097, 0.22247770550074097, 0.21555695075003378, 0.21555695075003378, 0.21555695075003378, 0.19196736541705872, 0.19196736541705872, 0.19196736541705872, 0.20575328046787877, 0.20575328046787877, 0.20575328046787877, 0.21373605717402178, 0.21373605717402178, 0.21373605717402178, 0.2100246162834305, 0.2100246162834305, 0.2100246162834305, 0.8516260713214356, 0.8516260713214356, 0.8516260713214356, 0.15763624374513185, 0.15763624374513185, 0.15763624374513185, 0.8778627984637555, 0.8778627984637555, 0.8778627984637555, 0.16196464564570356, 0.16196464564570356, 0.16196464564570356, 0.21106477461449324, 0.21106477461449324, 0.21106477461449324, 0.15513463868177246, 0.15513463868177246, 0.15513463868177246, 0.20008860024483932, 0.20008860024483932, 0.20008860024483932, 0.21683129613915997, 0.21683129613915997, 0.21683129613915997, 0.22058826976377555, 0.22058826976377555, 0.22058826976377555, 0.10651106909600516, 0.10651106909600516, 0.10651106909600516, 0.08210602260637823, 0.08210602260637823, 0.08210602260637823, 0.09053347166647441, 0.09053347166647441, 0.09053347166647441]}, "mutation_prompt": null}
{"id": "60ce81ef-4753-450c-b96e-d6828e930662", "solution": "import numpy as np\nfrom numba import njit, prange\n\nclass APSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(max(20, dim * 5), 100)\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.4\n        self.social_coeff = 1.4\n        self.vel_clamp = (-(self.upper_bound - self.lower_bound), (self.upper_bound - self.lower_bound))\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(self.vel_clamp[0], self.vel_clamp[1], (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = np.zeros(self.dim)\n        global_best_score = np.inf\n\n        while self.eval_count < self.budget:\n            scores = self.evaluate_population(func, positions)\n            self.eval_count += self.population_size\n\n            better_indices = scores < personal_best_scores\n            personal_best_scores[better_indices] = scores[better_indices]\n            personal_best_positions[better_indices] = positions[better_indices]\n\n            min_score_idx = np.argmin(scores)\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best_position = positions[min_score_idx]\n\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n\n            cognitive_velocity = self.cognitive_coeff * r1 * (personal_best_positions - positions)\n            social_velocity = self.social_coeff * r2 * (global_best_position - positions)\n            velocities = (self.inertia_weight * velocities) + cognitive_velocity + social_velocity\n\n            velocities = np.clip(velocities, self.vel_clamp[0], self.vel_clamp[1])\n            positions += velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n\n        return global_best_position, global_best_score\n\n    @staticmethod\n    @njit(parallel=True)\n    def evaluate_population(func, positions):\n        n = positions.shape[0]\n        scores = np.empty(n)\n        for i in prange(n):\n            scores[i] = func(positions[i])\n        return scores", "name": "APSO", "description": "Enhanced APSO with parallel evaluations and vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'numba'\").", "error": "ModuleNotFoundError(\"No module named 'numba'\")", "parent_id": "c846e641-e18d-4a46-947e-752e4566f4e7", "metadata": {}, "mutation_prompt": null}
{"id": "c25fdc3d-3617-4f24-b157-aa17af9565dc", "solution": "import numpy as np\n\nclass OptimizedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(max(20, dim * 5), 100)\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.4\n        self.social_coeff = 1.4\n        self.vel_clamp = (-(self.upper_bound - self.lower_bound), (self.upper_bound - self.lower_bound))\n        self.eval_count = 0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_clamp[0], self.vel_clamp[1], (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        random_matrix1 = np.random.rand(self.budget, self.dim)\n        random_matrix2 = np.random.rand(self.budget, self.dim)\n        budget_index = 0\n\n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions[self.eval_count:min(self.eval_count + self.population_size, self.budget)])\n            for i, score in enumerate(scores):\n                if self.eval_count >= self.budget:\n                    break\n\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.positions[i]\n\n                self.eval_count += 1\n\n            for i in range(len(scores)):\n                if self.eval_count >= self.budget:\n                    break\n\n                r1 = random_matrix1[budget_index % self.budget]\n                r2 = random_matrix2[budget_index % self.budget]\n\n                cognitive_velocity = self.cognitive_coeff * r1 * (self.personal_best_positions[i] - self.positions[i])\n                social_velocity = self.social_coeff * r2 * (self.global_best_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i]) + cognitive_velocity + social_velocity\n\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_clamp[0], self.vel_clamp[1])\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n                budget_index += 1\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedAPSO", "description": "Optimized APSO with precomputed random vectors and loop restructuring for efficient computation and reduced redundancies.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('Cannot apply_along_axis when any iteration dimensions are 0').", "error": "ValueError('Cannot apply_along_axis when any iteration dimensions are 0')", "parent_id": "c846e641-e18d-4a46-947e-752e4566f4e7", "metadata": {}, "mutation_prompt": null}
{"id": "46f675d5-b5b2-4da4-9983-134bfffb1e1d", "solution": "import numpy as np\n\nclass OptimizedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(max(20, dim * 5), 100)\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.4\n        self.social_coeff = 1.4\n        self.vel_clamp = (-(self.upper_bound - self.lower_bound), (self.upper_bound - self.lower_bound))\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(positions)  # initialize velocities to zero\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.population_size\n            \n            better_scores = scores < personal_best_scores\n            personal_best_scores = np.where(better_scores, scores, personal_best_scores)\n            personal_best_positions = np.where(better_scores[:, np.newaxis], positions, personal_best_positions)\n            \n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = positions[np.argmin(scores)]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            \n            cognitive_velocity = self.cognitive_coeff * r1 * (personal_best_positions - positions)\n            social_velocity = self.social_coeff * r2 * (global_best_position - positions)\n            velocities = (self.inertia_weight * velocities) + cognitive_velocity + social_velocity\n            \n            np.clip(velocities, self.vel_clamp[0], self.vel_clamp[1], out=velocities)\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n        return global_best_position, global_best_score", "name": "OptimizedAPSO", "description": "Optimized APSO utilizing strategic loop unrolling, early stopping, and reduced memory usage to enhance efficiency.", "configspace": "", "generation": 3, "fitness": 0.27984250204350575, "feedback": "The algorithm OptimizedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "c846e641-e18d-4a46-947e-752e4566f4e7", "metadata": {"aucs": [0.8568296603973335, 0.8568296603973335, 0.8568296603973335, 0.18198217169983133, 0.18198217169983133, 0.18198217169983133, 0.8453070721909772, 0.8453070721909772, 0.8453070721909772, 0.6252059482946417, 0.6252059482946417, 0.6252059482946417, 0.650435408551003, 0.650435408551003, 0.650435408551003, 0.7046014547386859, 0.7046014547386859, 0.7046014547386859, 0.09750828114883914, 0.09750828114883914, 0.09750828114883914, 0.07587841188930688, 0.07587841188930688, 0.07587841188930688, 0.15224758323234655, 0.15224758323234655, 0.15224758323234655, 0.11397194845861036, 0.11397194845861036, 0.11397194845861036, 0.15181221865108385, 0.15181221865108385, 0.15181221865108385, 0.12315193750489595, 0.12315193750489595, 0.12315193750489595, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.6666783715012397, 0.6666783715012397, 0.6666783715012397, 0.5526198761423488, 0.5526198761423488, 0.5526198761423488, 0.6166208572356643, 0.6166208572356643, 0.6166208572356643, 0.21764121158737337, 0.21764121158737337, 0.21764121158737337, 0.1611218749249409, 0.1611218749249409, 0.1611218749249409, 0.17017365343029345, 0.17017365343029345, 0.17017365343029345, 0.20937033652027093, 0.20937033652027093, 0.20937033652027093, 0.10754324593646547, 0.10754324593646547, 0.10754324593646547, 0.12940697512017196, 0.12940697512017196, 0.12940697512017196, 0.22863698280135436, 0.22863698280135436, 0.22863698280135436, 0.2281243163471285, 0.2281243163471285, 0.2281243163471285, 0.21370705282307312, 0.21370705282307312, 0.21370705282307312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11714352589664145, 0.11714352589664145, 0.11714352589664145, 0.05753937735891557, 0.05753937735891557, 0.05753937735891557, 0.03597078963076017, 0.03597078963076017, 0.03597078963076017, 0.042118367135479784, 0.042118367135479784, 0.042118367135479784, 0.08963728669130233, 0.08963728669130233, 0.08963728669130233, 0.07426858220531818, 0.07426858220531818, 0.07426858220531818, 0.04362843357037782, 0.04362843357037782, 0.04362843357037782, 0.037839618091577876, 0.037839618091577876, 0.037839618091577876, 0.08060963150540301, 0.08060963150540301, 0.08060963150540301, 0.5888241266044121, 0.5888241266044121, 0.5888241266044121, 0.5216204499437956, 0.5216204499437956, 0.5216204499437956, 0.5329844610053646, 0.5329844610053646, 0.5329844610053646, 0.08252005323773137, 0.08252005323773137, 0.08252005323773137, 0.11676722716902654, 0.11676722716902654, 0.11676722716902654, 0.09328961363315735, 0.09328961363315735, 0.09328961363315735, 0.19080062940220155, 0.19080062940220155, 0.19080062940220155, 0.19641906499839767, 0.19641906499839767, 0.19641906499839767, 0.29456643126927784, 0.29456643126927784, 0.29456643126927784, 0.35901659627507765, 0.35901659627507765, 0.35901659627507765, 0.3112879212002072, 0.3112879212002072, 0.3112879212002072, 0.47462147451497017, 0.47462147451497017, 0.47462147451497017, 0.27583402984805416, 0.27583402984805416, 0.27583402984805416, 0.21678679205758977, 0.21678679205758977, 0.21678679205758977, 0.2613538593309298, 0.2613538593309298, 0.2613538593309298, 0.23516559135639714, 0.23516559135639714, 0.23516559135639714, 0.2542412151318464, 0.2542412151318464, 0.2542412151318464, 0.21219964987994633, 0.21219964987994633, 0.21219964987994633, 0.24401131753424787, 0.24401131753424787, 0.24401131753424787, 0.21542537472497447, 0.21542537472497447, 0.21542537472497447, 0.24636201264032265, 0.24636201264032265, 0.24636201264032265, 0.8857170227359049, 0.8857170227359049, 0.8857170227359049, 0.15893387328770114, 0.15893387328770114, 0.15893387328770114, 0.1658294378679811, 0.1658294378679811, 0.1658294378679811, 0.16591898570398111, 0.16591898570398111, 0.16591898570398111, 0.2101998688551856, 0.2101998688551856, 0.2101998688551856, 0.1575998612356514, 0.1575998612356514, 0.1575998612356514, 0.2095444320483456, 0.2095444320483456, 0.2095444320483456, 0.2027741221702618, 0.2027741221702618, 0.2027741221702618, 0.19351073684325537, 0.19351073684325537, 0.19351073684325537, 0.10201598547491031, 0.10201598547491031, 0.10201598547491031, 0.07343020405160228, 0.07343020405160228, 0.07343020405160228, 0.07189901581143499, 0.07189901581143499, 0.07189901581143499]}, "mutation_prompt": null}
{"id": "3d84b741-3c0d-47d2-9196-48c4e01c6336", "solution": "import numpy as np\n\nclass OptimizedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = min(max(20, dim * 5), 100)\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.4\n        self.social_coeff = 1.4\n        self.vel_clamp = (-(self.upper_bound - self.lower_bound), (self.upper_bound - self.lower_bound))\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(positions)  # initialize velocities to zero\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.population_size\n            \n            better_scores = scores < personal_best_scores\n            personal_best_scores = np.where(better_scores, scores, personal_best_scores)\n            personal_best_positions = np.where(better_scores[:, np.newaxis], positions, personal_best_positions)\n            \n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = positions[np.argmin(scores)]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            \n            cognitive_velocity = self.cognitive_coeff * r1 * (personal_best_positions - positions)\n            social_velocity = self.social_coeff * r2 * (global_best_position - positions)\n            velocities = (self.inertia_weight * velocities) + cognitive_velocity + social_velocity\n            \n            np.clip(velocities, self.vel_clamp[0], self.vel_clamp[1], out=velocities)\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n        return global_best_position, global_best_score", "name": "OptimizedAPSO", "description": "Optimized APSO utilizing strategic loop unrolling, early stopping, and reduced memory usage to enhance efficiency.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "46f675d5-b5b2-4da4-9983-134bfffb1e1d", "metadata": {"aucs": [0.8568296603973335, 0.8568296603973335, 0.8568296603973335, 0.18198217169983133, 0.18198217169983133, 0.18198217169983133, 0.8453070721909772, 0.8453070721909772, 0.8453070721909772, 0.6252059482946417, 0.6252059482946417, 0.6252059482946417, 0.650435408551003, 0.650435408551003, 0.650435408551003, 0.7046014547386859, 0.7046014547386859, 0.7046014547386859, 0.09750828114883914, 0.09750828114883914, 0.09750828114883914, 0.07587841188930688, 0.07587841188930688, 0.07587841188930688, 0.15224758323234655, 0.15224758323234655, 0.15224758323234655, 0.11397194845861036, 0.11397194845861036, 0.11397194845861036, 0.15181221865108385, 0.15181221865108385, 0.15181221865108385, 0.12315193750489595, 0.12315193750489595, 0.12315193750489595, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.6666783715012397, 0.6666783715012397, 0.6666783715012397, 0.5526198761423488, 0.5526198761423488, 0.5526198761423488, 0.6166208572356643, 0.6166208572356643, 0.6166208572356643, 0.21764121158737337, 0.21764121158737337, 0.21764121158737337, 0.1611218749249409, 0.1611218749249409, 0.1611218749249409, 0.17017365343029345, 0.17017365343029345, 0.17017365343029345, 0.20937033652027093, 0.20937033652027093, 0.20937033652027093, 0.10754324593646547, 0.10754324593646547, 0.10754324593646547, 0.12940697512017196, 0.12940697512017196, 0.12940697512017196, 0.22863698280135436, 0.22863698280135436, 0.22863698280135436, 0.2281243163471285, 0.2281243163471285, 0.2281243163471285, 0.21370705282307312, 0.21370705282307312, 0.21370705282307312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11714352589664145, 0.11714352589664145, 0.11714352589664145, 0.05753937735891557, 0.05753937735891557, 0.05753937735891557, 0.03597078963076017, 0.03597078963076017, 0.03597078963076017, 0.042118367135479784, 0.042118367135479784, 0.042118367135479784, 0.08963728669130233, 0.08963728669130233, 0.08963728669130233, 0.07426858220531818, 0.07426858220531818, 0.07426858220531818, 0.04362843357037782, 0.04362843357037782, 0.04362843357037782, 0.037839618091577876, 0.037839618091577876, 0.037839618091577876, 0.08060963150540301, 0.08060963150540301, 0.08060963150540301, 0.5888241266044121, 0.5888241266044121, 0.5888241266044121, 0.5216204499437956, 0.5216204499437956, 0.5216204499437956, 0.5329844610053646, 0.5329844610053646, 0.5329844610053646, 0.08252005323773137, 0.08252005323773137, 0.08252005323773137, 0.11676722716902654, 0.11676722716902654, 0.11676722716902654, 0.09328961363315735, 0.09328961363315735, 0.09328961363315735, 0.19080062940220155, 0.19080062940220155, 0.19080062940220155, 0.19641906499839767, 0.19641906499839767, 0.19641906499839767, 0.29456643126927784, 0.29456643126927784, 0.29456643126927784, 0.35901659627507765, 0.35901659627507765, 0.35901659627507765, 0.3112879212002072, 0.3112879212002072, 0.3112879212002072, 0.47462147451497017, 0.47462147451497017, 0.47462147451497017, 0.27583402984805416, 0.27583402984805416, 0.27583402984805416, 0.21678679205758977, 0.21678679205758977, 0.21678679205758977, 0.2613538593309298, 0.2613538593309298, 0.2613538593309298, 0.23516559135639714, 0.23516559135639714, 0.23516559135639714, 0.2542412151318464, 0.2542412151318464, 0.2542412151318464, 0.21219964987994633, 0.21219964987994633, 0.21219964987994633, 0.24401131753424787, 0.24401131753424787, 0.24401131753424787, 0.21542537472497447, 0.21542537472497447, 0.21542537472497447, 0.24636201264032265, 0.24636201264032265, 0.24636201264032265, 0.8857170227359049, 0.8857170227359049, 0.8857170227359049, 0.15893387328770114, 0.15893387328770114, 0.15893387328770114, 0.1658294378679811, 0.1658294378679811, 0.1658294378679811, 0.16591898570398111, 0.16591898570398111, 0.16591898570398111, 0.2101998688551856, 0.2101998688551856, 0.2101998688551856, 0.1575998612356514, 0.1575998612356514, 0.1575998612356514, 0.2095444320483456, 0.2095444320483456, 0.2095444320483456, 0.2027741221702618, 0.2027741221702618, 0.2027741221702618, 0.19351073684325537, 0.19351073684325537, 0.19351073684325537, 0.10201598547491031, 0.10201598547491031, 0.10201598547491031, 0.07343020405160228, 0.07343020405160228, 0.07343020405160228, 0.07189901581143499, 0.07189901581143499, 0.07189901581143499]}, "mutation_prompt": null}
{"id": "b09bd1e3-b856-425d-884c-3d212d229aca", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 5, "fitness": 0.2943382245110668, "feedback": "The algorithm EnhancedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "46f675d5-b5b2-4da4-9983-134bfffb1e1d", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "7a726b7b-30f4-44aa-933c-51773d18df78", "solution": "import numpy as np\n\nclass OptimizedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            better_mask = scores < pbest_scores\n            pbest_scores = np.where(better_mask, scores, pbest_scores)\n            pbest_positions = np.where(better_mask[:, None], positions, pbest_positions)\n            \n            if scores.min() < gbest_score:\n                gbest_score = scores.min()\n                gbest_position = positions[scores.argmin()]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedAPSO", "description": "Optimized Enhanced APSO with vectorized operations and reduced function calls for improved efficiency.", "configspace": "", "generation": 6, "fitness": 0.2943382245110668, "feedback": "The algorithm OptimizedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "416dddf5-d411-46b8-bfe2-3fa5db776761", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "ec05fa99-83f3-44e8-a913-ac3f3f3d81f1", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "93d8d198-17fd-4422-b514-a9c065269a68", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "3ede2f31-f460-48a9-b88f-cfee09c323cd", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "5326be80-623f-42be-bdb1-7ad75fff394d", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "8d2e1b4a-0c37-4af5-89e0-2f55ad7dda71", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "4aebacfb-069f-42bf-bd06-4f93ba629200", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "912a8d6b-e67f-42a1-adf3-3c3032b30d1a", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "07e5c943-394d-4483-813d-f56c000cff07", "solution": "import numpy as np\n\nclass OptimizedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improved = scores < pbest_scores\n            pbest_scores[improved] = scores[improved]\n            pbest_positions[improved] = positions[improved]\n            if np.min(scores) < gbest_score:\n                gbest_score = np.min(scores)\n                gbest_position = positions[np.argmin(scores)]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Dynamic parameter update\n            self.inertia *= 0.99\n            self.cog_coeff += 0.01\n            self.soc_coeff -= 0.01\n\n        return gbest_position, gbest_score", "name": "OptimizedAPSO", "description": "Optimized APSO with dynamic parameter tuning and reduced computational overhead for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": 0.23407181051121337, "feedback": "The algorithm OptimizedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.25.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9352623748300837, 0.9352623748300837, 0.9352623748300837, 0.18230612144606417, 0.18230612144606417, 0.18230612144606417, 0.9365645907518261, 0.9365645907518261, 0.9365645907518261, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21493821881943864, 0.21493821881943864, 0.21493821881943864, 0.01846691212533058, 0.01846691212533058, 0.01846691212533058, 0.15276439620122784, 0.15276439620122784, 0.15276439620122784, 0.07812272727721592, 0.07812272727721592, 0.07812272727721592, 0.16483471899619984, 0.16483471899619984, 0.16483471899619984, 0.13199873236611637, 0.13199873236611637, 0.13199873236611637, 0.09350163270611134, 0.09350163270611134, 0.09350163270611134, 0.10958867611195888, 0.10958867611195888, 0.10958867611195888, 0.9876969565215071, 0.9876969565215071, 0.9876969565215071, 0.9908097219747465, 0.9908097219747465, 0.9908097219747465, 0.9887969485605934, 0.9887969485605934, 0.9887969485605934, 0.1635256842869025, 0.1635256842869025, 0.1635256842869025, 0.42934146390733363, 0.42934146390733363, 0.42934146390733363, 0.3962048313681138, 0.3962048313681138, 0.3962048313681138, 0.24364643764488525, 0.24364643764488525, 0.24364643764488525, 0.1628092708311809, 0.1628092708311809, 0.1628092708311809, 0.1176918988063218, 0.1176918988063218, 0.1176918988063218, 0.16830787080908882, 0.16830787080908882, 0.16830787080908882, 0.006451838266156251, 0.006451838266156251, 0.006451838266156251, 0.1631005722483384, 0.1631005722483384, 0.1631005722483384, 0.15112710414702324, 0.15112710414702324, 0.15112710414702324, 0.14548724333619323, 0.14548724333619323, 0.14548724333619323, 0.13657762192883038, 0.13657762192883038, 0.13657762192883038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09117619829208867, 0.09117619829208867, 0.09117619829208867, 0.030698719300082278, 0.030698719300082278, 0.030698719300082278, 0.06764914699026536, 0.06764914699026536, 0.06764914699026536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22050241964852402, 0.22050241964852402, 0.22050241964852402, 0.07865617151065019, 0.07865617151065019, 0.07865617151065019, 0.044194440414734526, 0.044194440414734526, 0.044194440414734526, 0.039448992071380196, 0.039448992071380196, 0.039448992071380196, 0.08487030292639974, 0.08487030292639974, 0.08487030292639974, 0.5521860040662587, 0.5521860040662587, 0.5521860040662587, 0.5095735015742142, 0.5095735015742142, 0.5095735015742142, 0.5417633690242223, 0.5417633690242223, 0.5417633690242223, 0.07957805387604022, 0.07957805387604022, 0.07957805387604022, 0.10903371409572049, 0.10903371409572049, 0.10903371409572049, 0.08836577573125559, 0.08836577573125559, 0.08836577573125559, 0.17669637766645652, 0.17669637766645652, 0.17669637766645652, 0.20001141371573006, 0.20001141371573006, 0.20001141371573006, 0.18513426753304874, 0.18513426753304874, 0.18513426753304874, 0.4475373346678, 0.4475373346678, 0.4475373346678, 0.20862732988195398, 0.20862732988195398, 0.20862732988195398, 0.29575718804300954, 0.29575718804300954, 0.29575718804300954, 0.22674125430452619, 0.22674125430452619, 0.22674125430452619, 0.19452057618431773, 0.19452057618431773, 0.19452057618431773, 0.14270295838803382, 0.14270295838803382, 0.14270295838803382, 0.2425512464152414, 0.2425512464152414, 0.2425512464152414, 0.2225951129889311, 0.2225951129889311, 0.2225951129889311, 0.19577891409925696, 0.19577891409925696, 0.19577891409925696, 0.20444931720322346, 0.20444931720322346, 0.20444931720322346, 0.22737330904768438, 0.22737330904768438, 0.22737330904768438, 0.2258981193124695, 0.2258981193124695, 0.2258981193124695, 0.9308225520258778, 0.9308225520258778, 0.9308225520258778, 0.1594756514963701, 0.1594756514963701, 0.1594756514963701, 0.1665226901396636, 0.1665226901396636, 0.1665226901396636, 0.16611586582852145, 0.16611586582852145, 0.16611586582852145, 0.2124276739947225, 0.2124276739947225, 0.2124276739947225, 0.15753172726862763, 0.15753172726862763, 0.15753172726862763, 0.21259483850073357, 0.21259483850073357, 0.21259483850073357, 0.2056081296458967, 0.2056081296458967, 0.2056081296458967, 0.21762146931571524, 0.21762146931571524, 0.21762146931571524, 0.07723897845313188, 0.07723897845313188, 0.07723897845313188, 0.08311512977521307, 0.08311512977521307, 0.08311512977521307, 0.05959955512058024, 0.05959955512058024, 0.05959955512058024]}, "mutation_prompt": null}
{"id": "6bfc6125-95f0-4db7-aa18-36d60fd93b04", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "9c9e61ce-34fc-4664-8670-8f8d018486fa", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "d6fc2d55-e9f1-40dd-935e-cf5adf0b4947", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "92a537c2-ee2f-488c-a7a0-34a4893383c4", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "93156c95-94c7-4ba6-98b6-7fc1a49882cd", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "4e77b42f-02f9-4c58-83cb-2c452d41840c", "solution": "import numpy as np\n\nclass OptimizedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n\n        # Pre-compute random numbers for efficiency\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            update_mask = scores < pbest_scores\n            pbest_scores = np.where(update_mask, scores, pbest_scores)\n            pbest_positions = np.where(update_mask[:, None], positions, pbest_positions)\n            \n            min_score_idx = np.argmin(scores)\n            if scores[min_score_idx] < gbest_score:\n                gbest_score = scores[min_score_idx]\n                gbest_position = positions[min_score_idx]\n\n            if self.eval_count >= self.budget:\n                break\n\n            # Use pre-computed random numbers and vectorized operations\n            velocities *= self.inertia\n            velocities += self.cog_coeff * r1 * (pbest_positions - positions)\n            velocities += self.soc_coeff * r2 * (gbest_position - positions)\n            \n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.clip(positions + velocities, self.lower_bound, self.upper_bound, out=positions)\n\n        return gbest_position, gbest_score", "name": "OptimizedAPSO", "description": "Refined EnhancedAPSO with loop restructuring, reduced randomness calls, and optimized operations for better runtime efficiency.", "configspace": "", "generation": 21, "fitness": 0.2727537169053032, "feedback": "The algorithm OptimizedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.28.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.918139983979769, 0.918139983979769, 0.918139983979769, 0.9063536366039247, 0.9063536366039247, 0.9063536366039247, 0.8969360521365858, 0.8969360521365858, 0.8969360521365858, 0.8065543414570965, 0.8065543414570965, 0.8065543414570965, 0.8145431675286272, 0.8145431675286272, 0.8145431675286272, 0.8024825277146381, 0.8024825277146381, 0.8024825277146381, 0.13450224668252153, 0.13450224668252153, 0.13450224668252153, 0.08705353049043185, 0.08705353049043185, 0.08705353049043185, 0.11249171708867867, 0.11249171708867867, 0.11249171708867867, 0.09754661069168635, 0.09754661069168635, 0.09754661069168635, 0.10491825295986834, 0.10491825295986834, 0.10491825295986834, 0.10053141643592067, 0.10053141643592067, 0.10053141643592067, 0.986227773560504, 0.986227773560504, 0.986227773560504, 0.9885159295680219, 0.9885159295680219, 0.9885159295680219, 0.9863690804942112, 0.9863690804942112, 0.9863690804942112, 0.5168793510242685, 0.5168793510242685, 0.5168793510242685, 0.36572815665474756, 0.36572815665474756, 0.36572815665474756, 0.34310147432753935, 0.34310147432753935, 0.34310147432753935, 0.21054729987544873, 0.21054729987544873, 0.21054729987544873, 0.15750455961468413, 0.15750455961468413, 0.15750455961468413, 0.10878726911940284, 0.10878726911940284, 0.10878726911940284, 0.19325075009032366, 0.19325075009032366, 0.19325075009032366, 0.10013026946374903, 0.10013026946374903, 0.10013026946374903, 0.1990569542190742, 0.1990569542190742, 0.1990569542190742, 0.2134694732929604, 0.2134694732929604, 0.2134694732929604, 0.17378491116624661, 0.17378491116624661, 0.17378491116624661, 0.20482785035161033, 0.20482785035161033, 0.20482785035161033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00938274724664101, 0.00938274724664101, 0.00938274724664101, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08052447876848678, 0.08052447876848678, 0.08052447876848678, 0.028160817834072982, 0.028160817834072982, 0.028160817834072982, 0.08701035112728228, 0.08701035112728228, 0.08701035112728228, 0.036809445062548685, 0.036809445062548685, 0.036809445062548685, 0.10045374269257645, 0.10045374269257645, 0.10045374269257645, 0.08125961259894598, 0.08125961259894598, 0.08125961259894598, 0.08171306421477242, 0.08171306421477242, 0.08171306421477242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08385054990286767, 0.08385054990286767, 0.08385054990286767, 0.4642623423960822, 0.4642623423960822, 0.4642623423960822, 0.5237476157890533, 0.5237476157890533, 0.5237476157890533, 0.5028206437259621, 0.5028206437259621, 0.5028206437259621, 0.08190226252449939, 0.08190226252449939, 0.08190226252449939, 0.11552193500902808, 0.11552193500902808, 0.11552193500902808, 0.1172736908197074, 0.1172736908197074, 0.1172736908197074, 0.1393014088967529, 0.1393014088967529, 0.1393014088967529, 0.15911544803596878, 0.15911544803596878, 0.15911544803596878, 0.19088709024444406, 0.19088709024444406, 0.19088709024444406, 0.2634356441464868, 0.2634356441464868, 0.2634356441464868, 0.2269675505150236, 0.2269675505150236, 0.2269675505150236, 0.15707079316870987, 0.15707079316870987, 0.15707079316870987, 0.22309574107016805, 0.22309574107016805, 0.22309574107016805, 0.23440449448578737, 0.23440449448578737, 0.23440449448578737, 0.2562016899548647, 0.2562016899548647, 0.2562016899548647, 0.20307663324209702, 0.20307663324209702, 0.20307663324209702, 0.19895622500391585, 0.19895622500391585, 0.19895622500391585, 0.19113714817286065, 0.19113714817286065, 0.19113714817286065, 0.19094711551953214, 0.19094711551953214, 0.19094711551953214, 0.24624336170553363, 0.24624336170553363, 0.24624336170553363, 0.18859540420239584, 0.18859540420239584, 0.18859540420239584, 0.917591881999464, 0.917591881999464, 0.917591881999464, 0.16602035846185859, 0.16602035846185859, 0.16602035846185859, 0.16699380843778344, 0.16699380843778344, 0.16699380843778344, 0.21261660790041292, 0.21261660790041292, 0.21261660790041292, 0.2125481961978556, 0.2125481961978556, 0.2125481961978556, 0.15752383071819054, 0.15752383071819054, 0.15752383071819054, 0.18148612919168405, 0.18148612919168405, 0.18148612919168405, 0.20412723344705597, 0.20412723344705597, 0.20412723344705597, 0.189279223413801, 0.189279223413801, 0.189279223413801, 0.08845333049791038, 0.08845333049791038, 0.08845333049791038, 0.06703801839208423, 0.06703801839208423, 0.06703801839208423, 0.07992536385411964, 0.07992536385411964, 0.07992536385411964]}, "mutation_prompt": null}
{"id": "007efa7e-c0a4-4392-bb9f-0c8c5e5384c8", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "1775d915-4b80-4fc6-a076-b31f83eaa2f1", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "5aabe085-05fb-4186-8fde-fd2abf6a0aa7", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "29818df8-b61b-48e0-b48b-77ef4531918d", "solution": "import numpy as np\n\nclass OptimizedEnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros_like(positions)\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n\n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            better_indices = scores < pbest_scores\n            pbest_scores[better_indices] = scores[better_indices]\n            pbest_positions[better_indices] = positions[better_indices]\n            \n            min_score_idx = np.argmin(scores)\n            if scores[min_score_idx] < gbest_score:\n                gbest_score = scores[min_score_idx]\n                gbest_position = positions[min_score_idx]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            velocities = self.inertia * velocities + \\\n                         self.cog_coeff * r1 * (pbest_positions - positions) + \\\n                         self.soc_coeff * r2 * (gbest_position - positions)\n            \n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.clip(positions + velocities, self.lower_bound, self.upper_bound, out=positions)\n\n        return gbest_position, gbest_score", "name": "OptimizedEnhancedAPSO", "description": "Optimized Enhanced APSO with reduced computational overhead and streamlined operations for improved runtime efficiency.", "configspace": "", "generation": 25, "fitness": 0.27984250204350575, "feedback": "The algorithm OptimizedEnhancedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.8568296603973335, 0.8568296603973335, 0.8568296603973335, 0.18198217169983133, 0.18198217169983133, 0.18198217169983133, 0.8453070721909772, 0.8453070721909772, 0.8453070721909772, 0.6252059482946417, 0.6252059482946417, 0.6252059482946417, 0.650435408551003, 0.650435408551003, 0.650435408551003, 0.7046014547386859, 0.7046014547386859, 0.7046014547386859, 0.09750828114883914, 0.09750828114883914, 0.09750828114883914, 0.07587841188930688, 0.07587841188930688, 0.07587841188930688, 0.15224758323234655, 0.15224758323234655, 0.15224758323234655, 0.11397194845861036, 0.11397194845861036, 0.11397194845861036, 0.15181221865108385, 0.15181221865108385, 0.15181221865108385, 0.12315193750489595, 0.12315193750489595, 0.12315193750489595, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.6666783715012397, 0.6666783715012397, 0.6666783715012397, 0.5526198761423488, 0.5526198761423488, 0.5526198761423488, 0.6166208572356643, 0.6166208572356643, 0.6166208572356643, 0.21764121158737337, 0.21764121158737337, 0.21764121158737337, 0.1611218749249409, 0.1611218749249409, 0.1611218749249409, 0.17017365343029345, 0.17017365343029345, 0.17017365343029345, 0.20937033652027093, 0.20937033652027093, 0.20937033652027093, 0.10754324593646547, 0.10754324593646547, 0.10754324593646547, 0.12940697512017196, 0.12940697512017196, 0.12940697512017196, 0.22863698280135436, 0.22863698280135436, 0.22863698280135436, 0.2281243163471285, 0.2281243163471285, 0.2281243163471285, 0.21370705282307312, 0.21370705282307312, 0.21370705282307312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11714352589664145, 0.11714352589664145, 0.11714352589664145, 0.05753937735891557, 0.05753937735891557, 0.05753937735891557, 0.03597078963076017, 0.03597078963076017, 0.03597078963076017, 0.042118367135479784, 0.042118367135479784, 0.042118367135479784, 0.08963728669130233, 0.08963728669130233, 0.08963728669130233, 0.07426858220531818, 0.07426858220531818, 0.07426858220531818, 0.04362843357037782, 0.04362843357037782, 0.04362843357037782, 0.037839618091577876, 0.037839618091577876, 0.037839618091577876, 0.08060963150540301, 0.08060963150540301, 0.08060963150540301, 0.5888241266044121, 0.5888241266044121, 0.5888241266044121, 0.5216204499437956, 0.5216204499437956, 0.5216204499437956, 0.5329844610053646, 0.5329844610053646, 0.5329844610053646, 0.08252005323773137, 0.08252005323773137, 0.08252005323773137, 0.11676722716902654, 0.11676722716902654, 0.11676722716902654, 0.09328961363315735, 0.09328961363315735, 0.09328961363315735, 0.19080062940220155, 0.19080062940220155, 0.19080062940220155, 0.19641906499839767, 0.19641906499839767, 0.19641906499839767, 0.29456643126927784, 0.29456643126927784, 0.29456643126927784, 0.35901659627507765, 0.35901659627507765, 0.35901659627507765, 0.3112879212002072, 0.3112879212002072, 0.3112879212002072, 0.47462147451497017, 0.47462147451497017, 0.47462147451497017, 0.27583402984805416, 0.27583402984805416, 0.27583402984805416, 0.21678679205758977, 0.21678679205758977, 0.21678679205758977, 0.2613538593309298, 0.2613538593309298, 0.2613538593309298, 0.23516559135639714, 0.23516559135639714, 0.23516559135639714, 0.2542412151318464, 0.2542412151318464, 0.2542412151318464, 0.21219964987994633, 0.21219964987994633, 0.21219964987994633, 0.24401131753424787, 0.24401131753424787, 0.24401131753424787, 0.21542537472497447, 0.21542537472497447, 0.21542537472497447, 0.24636201264032265, 0.24636201264032265, 0.24636201264032265, 0.8857170227359049, 0.8857170227359049, 0.8857170227359049, 0.15893387328770114, 0.15893387328770114, 0.15893387328770114, 0.1658294378679811, 0.1658294378679811, 0.1658294378679811, 0.16591898570398111, 0.16591898570398111, 0.16591898570398111, 0.2101998688551856, 0.2101998688551856, 0.2101998688551856, 0.1575998612356514, 0.1575998612356514, 0.1575998612356514, 0.2095444320483456, 0.2095444320483456, 0.2095444320483456, 0.2027741221702618, 0.2027741221702618, 0.2027741221702618, 0.19351073684325537, 0.19351073684325537, 0.19351073684325537, 0.10201598547491031, 0.10201598547491031, 0.10201598547491031, 0.07343020405160228, 0.07343020405160228, 0.07343020405160228, 0.07189901581143499, 0.07189901581143499, 0.07189901581143499]}, "mutation_prompt": null}
{"id": "f91a6fe4-66bd-4ace-9933-8fa3fe8499c2", "solution": "import numpy as np\n\nclass OptimizedEnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros_like(positions)\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            improved = scores < pbest_scores\n            pbest_positions[improved] = positions[improved]\n            pbest_scores[improved] = scores[improved]\n            \n            min_score_idx = np.argmin(scores)\n            if scores[min_score_idx] < gbest_score:\n                gbest_score = scores[min_score_idx]\n                gbest_position = positions[min_score_idx]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.clip(positions + velocities, self.lower_bound, self.upper_bound, out=positions)\n\n        return gbest_position, gbest_score", "name": "OptimizedEnhancedAPSO", "description": "Optimized Enhanced APSO using vectorized operations and memory-efficient structures for improved performance.", "configspace": "", "generation": 26, "fitness": 0.27984250204350575, "feedback": "The algorithm OptimizedEnhancedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.8568296603973335, 0.8568296603973335, 0.8568296603973335, 0.18198217169983133, 0.18198217169983133, 0.18198217169983133, 0.8453070721909772, 0.8453070721909772, 0.8453070721909772, 0.6252059482946417, 0.6252059482946417, 0.6252059482946417, 0.650435408551003, 0.650435408551003, 0.650435408551003, 0.7046014547386859, 0.7046014547386859, 0.7046014547386859, 0.09750828114883914, 0.09750828114883914, 0.09750828114883914, 0.07587841188930688, 0.07587841188930688, 0.07587841188930688, 0.15224758323234655, 0.15224758323234655, 0.15224758323234655, 0.11397194845861036, 0.11397194845861036, 0.11397194845861036, 0.15181221865108385, 0.15181221865108385, 0.15181221865108385, 0.12315193750489595, 0.12315193750489595, 0.12315193750489595, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.6666783715012397, 0.6666783715012397, 0.6666783715012397, 0.5526198761423488, 0.5526198761423488, 0.5526198761423488, 0.6166208572356643, 0.6166208572356643, 0.6166208572356643, 0.21764121158737337, 0.21764121158737337, 0.21764121158737337, 0.1611218749249409, 0.1611218749249409, 0.1611218749249409, 0.17017365343029345, 0.17017365343029345, 0.17017365343029345, 0.20937033652027093, 0.20937033652027093, 0.20937033652027093, 0.10754324593646547, 0.10754324593646547, 0.10754324593646547, 0.12940697512017196, 0.12940697512017196, 0.12940697512017196, 0.22863698280135436, 0.22863698280135436, 0.22863698280135436, 0.2281243163471285, 0.2281243163471285, 0.2281243163471285, 0.21370705282307312, 0.21370705282307312, 0.21370705282307312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11714352589664145, 0.11714352589664145, 0.11714352589664145, 0.05753937735891557, 0.05753937735891557, 0.05753937735891557, 0.03597078963076017, 0.03597078963076017, 0.03597078963076017, 0.042118367135479784, 0.042118367135479784, 0.042118367135479784, 0.08963728669130233, 0.08963728669130233, 0.08963728669130233, 0.07426858220531818, 0.07426858220531818, 0.07426858220531818, 0.04362843357037782, 0.04362843357037782, 0.04362843357037782, 0.037839618091577876, 0.037839618091577876, 0.037839618091577876, 0.08060963150540301, 0.08060963150540301, 0.08060963150540301, 0.5888241266044121, 0.5888241266044121, 0.5888241266044121, 0.5216204499437956, 0.5216204499437956, 0.5216204499437956, 0.5329844610053646, 0.5329844610053646, 0.5329844610053646, 0.08252005323773137, 0.08252005323773137, 0.08252005323773137, 0.11676722716902654, 0.11676722716902654, 0.11676722716902654, 0.09328961363315735, 0.09328961363315735, 0.09328961363315735, 0.19080062940220155, 0.19080062940220155, 0.19080062940220155, 0.19641906499839767, 0.19641906499839767, 0.19641906499839767, 0.29456643126927784, 0.29456643126927784, 0.29456643126927784, 0.35901659627507765, 0.35901659627507765, 0.35901659627507765, 0.3112879212002072, 0.3112879212002072, 0.3112879212002072, 0.47462147451497017, 0.47462147451497017, 0.47462147451497017, 0.27583402984805416, 0.27583402984805416, 0.27583402984805416, 0.21678679205758977, 0.21678679205758977, 0.21678679205758977, 0.2613538593309298, 0.2613538593309298, 0.2613538593309298, 0.23516559135639714, 0.23516559135639714, 0.23516559135639714, 0.2542412151318464, 0.2542412151318464, 0.2542412151318464, 0.21219964987994633, 0.21219964987994633, 0.21219964987994633, 0.24401131753424787, 0.24401131753424787, 0.24401131753424787, 0.21542537472497447, 0.21542537472497447, 0.21542537472497447, 0.24636201264032265, 0.24636201264032265, 0.24636201264032265, 0.8857170227359049, 0.8857170227359049, 0.8857170227359049, 0.15893387328770114, 0.15893387328770114, 0.15893387328770114, 0.1658294378679811, 0.1658294378679811, 0.1658294378679811, 0.16591898570398111, 0.16591898570398111, 0.16591898570398111, 0.2101998688551856, 0.2101998688551856, 0.2101998688551856, 0.1575998612356514, 0.1575998612356514, 0.1575998612356514, 0.2095444320483456, 0.2095444320483456, 0.2095444320483456, 0.2027741221702618, 0.2027741221702618, 0.2027741221702618, 0.19351073684325537, 0.19351073684325537, 0.19351073684325537, 0.10201598547491031, 0.10201598547491031, 0.10201598547491031, 0.07343020405160228, 0.07343020405160228, 0.07343020405160228, 0.07189901581143499, 0.07189901581143499, 0.07189901581143499]}, "mutation_prompt": null}
{"id": "2db6d8fb-a4e3-4c3a-8702-91ab7bf9f82c", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "e0178987-7812-4963-bec4-ca25f7263acd", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "b8db133a-d93e-480d-98db-cc9cf6a71303", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "b2c8f9f1-cdf3-4628-b678-0b664b32d6c0", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "1b26f92e-5a99-4eac-8c26-373bb000b604", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n\n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = scores.argmin()\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(2, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.clip(positions + velocities, self.lower_bound, self.upper_bound, out=positions)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with reduced random number generation and streamlined update operations for better runtime efficiency.", "configspace": "", "generation": 31, "fitness": 0.2587596953688559, "feedback": "The algorithm EnhancedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.8455363313286383, 0.8455363313286383, 0.8455363313286383, 0.18925383050907418, 0.18925383050907418, 0.18925383050907418, 0.893460721156824, 0.893460721156824, 0.893460721156824, 0.03717671379818854, 0.03717671379818854, 0.03717671379818854, 0.3075574719295988, 0.3075574719295988, 0.3075574719295988, 0.05042590467600294, 0.05042590467600294, 0.05042590467600294, 0.13097807591907817, 0.13097807591907817, 0.13097807591907817, 0.15630538474245437, 0.15630538474245437, 0.15630538474245437, 0.09216728249933515, 0.09216728249933515, 0.09216728249933515, 0.06115247445652727, 0.06115247445652727, 0.06115247445652727, 0.15351504875267075, 0.15351504875267075, 0.15351504875267075, 0.1445797122164999, 0.1445797122164999, 0.1445797122164999, 0.9775724109157632, 0.9775724109157632, 0.9775724109157632, 0.9904529043891973, 0.9904529043891973, 0.9904529043891973, 0.9887659676502177, 0.9887659676502177, 0.9887659676502177, 0.6413196428994608, 0.6413196428994608, 0.6413196428994608, 0.6821346423139933, 0.6821346423139933, 0.6821346423139933, 0.6020135980913831, 0.6020135980913831, 0.6020135980913831, 0.09823946612559553, 0.09823946612559553, 0.09823946612559553, 0.1619636957048346, 0.1619636957048346, 0.1619636957048346, 0.20883536033581207, 0.20883536033581207, 0.20883536033581207, 0.18433510055843616, 0.18433510055843616, 0.18433510055843616, 0.10295939093349482, 0.10295939093349482, 0.10295939093349482, 0.2083910348969319, 0.2083910348969319, 0.2083910348969319, 0.161739663143745, 0.161739663143745, 0.161739663143745, 0.13491411158078914, 0.13491411158078914, 0.13491411158078914, 0.20483550601488476, 0.20483550601488476, 0.20483550601488476, 0.030857943257813658, 0.030857943257813658, 0.030857943257813658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09135408953872137, 0.09135408953872137, 0.09135408953872137, 0.05012725486801661, 0.05012725486801661, 0.05012725486801661, 0.06764541945834424, 0.06764541945834424, 0.06764541945834424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09258814756770406, 0.09258814756770406, 0.09258814756770406, 0.09895525047673714, 0.09895525047673714, 0.09895525047673714, 0.042609043042510564, 0.042609043042510564, 0.042609043042510564, 0.04981530184203076, 0.04981530184203076, 0.04981530184203076, 0.15164223067648563, 0.15164223067648563, 0.15164223067648563, 0.5148538702694108, 0.5148538702694108, 0.5148538702694108, 0.20897553404662528, 0.20897553404662528, 0.20897553404662528, 0.581253292028477, 0.581253292028477, 0.581253292028477, 0.10946669982703583, 0.10946669982703583, 0.10946669982703583, 0.09833957693230733, 0.09833957693230733, 0.09833957693230733, 0.11308313817800353, 0.11308313817800353, 0.11308313817800353, 0.26468018661545756, 0.26468018661545756, 0.26468018661545756, 0.2843916321752109, 0.2843916321752109, 0.2843916321752109, 0.3009822990086296, 0.3009822990086296, 0.3009822990086296, 0.367631919854257, 0.367631919854257, 0.367631919854257, 0.33937507789706334, 0.33937507789706334, 0.33937507789706334, 0.5683079284487995, 0.5683079284487995, 0.5683079284487995, 0.2855432982603775, 0.2855432982603775, 0.2855432982603775, 0.36533300462870244, 0.36533300462870244, 0.36533300462870244, 0.14105974128364795, 0.14105974128364795, 0.14105974128364795, 0.23464209303551076, 0.23464209303551076, 0.23464209303551076, 0.27957850056077704, 0.27957850056077704, 0.27957850056077704, 0.2020687315064933, 0.2020687315064933, 0.2020687315064933, 0.19657287122659062, 0.19657287122659062, 0.19657287122659062, 0.1929168044090428, 0.1929168044090428, 0.1929168044090428, 0.19707792684061753, 0.19707792684061753, 0.19707792684061753, 0.9014193834120746, 0.9014193834120746, 0.9014193834120746, 0.15897300574262607, 0.15897300574262607, 0.15897300574262607, 0.16507924898806192, 0.16507924898806192, 0.16507924898806192, 0.20862640530754095, 0.20862640530754095, 0.20862640530754095, 0.2100954386988818, 0.2100954386988818, 0.2100954386988818, 0.13026903868869522, 0.13026903868869522, 0.13026903868869522, 0.19575059943477713, 0.19575059943477713, 0.19575059943477713, 0.19842010463671744, 0.19842010463671744, 0.19842010463671744, 0.24799050698468206, 0.24799050698468206, 0.24799050698468206, 0.09355634189602102, 0.09355634189602102, 0.09355634189602102, 0.09508190842388775, 0.09508190842388775, 0.09508190842388775, 0.09282582904282555, 0.09282582904282555, 0.09282582904282555]}, "mutation_prompt": null}
{"id": "c6c12bbb-aeca-4e76-855f-1107bad3d6a8", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "8bcbebd3-d23e-42c0-a86a-e58cdef455a0", "solution": "import numpy as np\n\nclass OptimizedEnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n\n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improved = scores < pbest_scores\n            pbest_scores[improved] = scores[improved]\n            pbest_positions[improved] = positions[improved]\n            \n            min_idx = np.argmin(scores)\n            if scores[min_idx] < gbest_score:\n                gbest_score = scores[min_idx]\n                gbest_position = positions[min_idx]\n\n            if self.eval_count >= self.budget:\n                break\n\n            adaptive_inertia = 0.5 + np.random.rand() / 2\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            velocities = (adaptive_inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n\n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedEnhancedAPSO", "description": "Optimized Enhanced APSO with vectorized operations and adaptive parameters for improved computational efficiency.", "configspace": "", "generation": 33, "fitness": 0.26202005380830284, "feedback": "The algorithm OptimizedEnhancedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.27.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.8938247073030079, 0.8938247073030079, 0.8938247073030079, 0.1910401422808501, 0.1910401422808501, 0.1910401422808501, 0.8925468780445506, 0.8925468780445506, 0.8925468780445506, 0.0969506009976494, 0.0969506009976494, 0.0969506009976494, 0.6945978075992241, 0.6945978075992241, 0.6945978075992241, 0.6926702764144883, 0.6926702764144883, 0.6926702764144883, 0.1816331032757097, 0.1816331032757097, 0.1816331032757097, 0.07412648441024561, 0.07412648441024561, 0.07412648441024561, 0.1239716735282711, 0.1239716735282711, 0.1239716735282711, 0.14273172006082135, 0.14273172006082135, 0.14273172006082135, 0.14691865902931167, 0.14691865902931167, 0.14691865902931167, 0.12318086908377923, 0.12318086908377923, 0.12318086908377923, 0.977488510774507, 0.977488510774507, 0.977488510774507, 0.9884858898934463, 0.9884858898934463, 0.9884858898934463, 0.9879701809944519, 0.9879701809944519, 0.9879701809944519, 0.7439788143209225, 0.7439788143209225, 0.7439788143209225, 0.1456775841741379, 0.1456775841741379, 0.1456775841741379, 0.7143545205090259, 0.7143545205090259, 0.7143545205090259, 0.09370189039311594, 0.09370189039311594, 0.09370189039311594, 0.16148611065443597, 0.16148611065443597, 0.16148611065443597, 0.11700354163937188, 0.11700354163937188, 0.11700354163937188, 0.21269780577651787, 0.21269780577651787, 0.21269780577651787, 0.11330647942299854, 0.11330647942299854, 0.11330647942299854, 0.21155269902477936, 0.21155269902477936, 0.21155269902477936, 0.18215182636320648, 0.18215182636320648, 0.18215182636320648, 0.21306246897894676, 0.21306246897894676, 0.21306246897894676, 0.12877994997923758, 0.12877994997923758, 0.12877994997923758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05344223074467225, 0.05344223074467225, 0.05344223074467225, 0.09032661186340207, 0.09032661186340207, 0.09032661186340207, 0.1449555302161818, 0.1449555302161818, 0.1449555302161818, 0.06759637795820106, 0.06759637795820106, 0.06759637795820106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09704787671985138, 0.09704787671985138, 0.09704787671985138, 0.10454959947869213, 0.10454959947869213, 0.10454959947869213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08254812637104536, 0.08254812637104536, 0.08254812637104536, 0.5368475848504601, 0.5368475848504601, 0.5368475848504601, 0.13823304168529338, 0.13823304168529338, 0.13823304168529338, 0.6253876041868394, 0.6253876041868394, 0.6253876041868394, 0.07918951811902297, 0.07918951811902297, 0.07918951811902297, 0.08898612929824534, 0.08898612929824534, 0.08898612929824534, 0.1433410368385012, 0.1433410368385012, 0.1433410368385012, 0.19514934989616362, 0.19514934989616362, 0.19514934989616362, 0.19618936904960493, 0.19618936904960493, 0.19618936904960493, 0.1786842918073679, 0.1786842918073679, 0.1786842918073679, 0.29628417975352017, 0.29628417975352017, 0.29628417975352017, 0.2498815784252464, 0.2498815784252464, 0.2498815784252464, 0.3569285663988191, 0.3569285663988191, 0.3569285663988191, 0.1380787315947769, 0.1380787315947769, 0.1380787315947769, 0.19362274855519213, 0.19362274855519213, 0.19362274855519213, 0.13250277392858056, 0.13250277392858056, 0.13250277392858056, 0.21384143469832062, 0.21384143469832062, 0.21384143469832062, 0.1984326421033994, 0.1984326421033994, 0.1984326421033994, 0.24878602553558404, 0.24878602553558404, 0.24878602553558404, 0.28967503261989314, 0.28967503261989314, 0.28967503261989314, 0.1907042960487645, 0.1907042960487645, 0.1907042960487645, 0.6129162116156978, 0.6129162116156978, 0.6129162116156978, 0.9240181552398532, 0.9240181552398532, 0.9240181552398532, 0.1594784032553529, 0.1594784032553529, 0.1594784032553529, 0.16788551648057526, 0.16788551648057526, 0.16788551648057526, 0.16766632524313485, 0.16766632524313485, 0.16766632524313485, 0.155314473200173, 0.155314473200173, 0.155314473200173, 0.25980539906004074, 0.25980539906004074, 0.25980539906004074, 0.20788065193642002, 0.20788065193642002, 0.20788065193642002, 0.20949914956985238, 0.20949914956985238, 0.20949914956985238, 0.1840746765494412, 0.1840746765494412, 0.1840746765494412, 0.07568421867717656, 0.07568421867717656, 0.07568421867717656, 0.08907655700404682, 0.08907655700404682, 0.08907655700404682, 0.07454065269339083, 0.07454065269339083, 0.07454065269339083]}, "mutation_prompt": null}
{"id": "903294ec-4b8e-4ab8-9584-5b6a22ed50e3", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "1eb3ed82-9011-45a8-9975-18ed849b4546", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "371e074f-ad52-4840-ad23-a20060003775", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "b85ec48e-6578-484e-abe0-7395936fdf81", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "783ec8a2-79ce-44dd-aedf-a886ce730389", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = max(20, dim * 5)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros_like(positions)\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            improved = scores < pbest_scores\n            pbest_scores[improved] = scores[improved]\n            pbest_positions[improved] = positions[improved]\n            \n            if np.min(scores) < gbest_score:\n                gbest_score = np.min(scores)\n                gbest_position = positions[np.argmin(scores)]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Optimized Enhanced APSO with reduced computation and improved memory management for faster execution.", "configspace": "", "generation": 38, "fitness": 0.2943382245110668, "feedback": "The algorithm EnhancedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "109880b7-3813-44ca-8f1f-e42bf1eaef32", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "2ba2bbef-d987-44c2-975e-04fa5f932b6c", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "053159d3-d16c-493b-8a43-05feb3b275f5", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "7c5faac4-b189-4f74-b2fd-da7bcdb84255", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass OptimizedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.9  # Adaptive inertia start\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = Parallel(n_jobs=-1)(delayed(func)(positions[i]) for i in range(self.pop_size))\n            self.eval_count += self.pop_size\n\n            scores = np.array(scores)  # Vectorized post-processing\n            better_mask = scores < pbest_scores\n            pbest_scores[better_mask] = scores[better_mask]\n            pbest_positions[better_mask] = positions[better_mask]\n\n            if np.min(scores) < gbest_score:\n                min_idx = np.argmin(scores)\n                gbest_score = scores[min_idx]\n                gbest_position = positions[min_idx]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions += velocities\n            positions = np.clip(positions, self.lower_bound, self.upper_bound)\n            \n            self.inertia = 0.4 + 0.5 * ((self.budget - self.eval_count) / self.budget)  # Adaptive inertia update\n\n        return gbest_position, gbest_score", "name": "OptimizedAPSO", "description": "Optimized APSO with adaptive inertia, vectorized operations, and parallel evaluations for faster runtime.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {}, "mutation_prompt": null}
{"id": "adde4122-634a-409e-882b-d0a8d2372a32", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "be351e44-b94d-44c1-8dca-f5128d470929", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "f8b27aef-26a9-4867-824f-4e5300e32b17", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "36708c9e-fe68-484c-93f8-4a8285bfeee3", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "1f16f600-8bed-4bed-b8b7-6b5de25dc104", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "63c81cd0-f6cb-4a7b-ae9c-6cc1c7a246ed", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "7b784e52-dbb7-447c-a669-e7f7f6eee958", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "f879ecf5-2c67-4e31-8fa0-ceafbe4bc0f5", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "e07f5175-ba5e-40bf-a6a4-07b65e96411c", "solution": "import numpy as np\n\nclass OptimizedEnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n        self.inertia_damp = 0.99  # New parameter for inertia damping\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n\n        while self.eval_count < self.budget:\n            # Vectorized calculation of scores to improve runtime efficiency\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            # Use numpy functions for updating best positions and scores\n            improved_pbest_mask = scores < pbest_scores\n            pbest_scores[improved_pbest_mask] = scores[improved_pbest_mask]\n            pbest_positions[improved_pbest_mask] = positions[improved_pbest_mask]\n            \n            # Update global best without loop\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < gbest_score:\n                gbest_score = scores[min_score_index]\n                gbest_position = positions[min_score_index]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            # Apply adaptive inertia damping\n            self.inertia *= self.inertia_damp\n            \n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedEnhancedAPSO", "description": "Optimized Enhanced APSO with streamlined calculations and adaptive parameter tuning for improved efficiency.", "configspace": "", "generation": 51, "fitness": 0.24529099339256225, "feedback": "The algorithm OptimizedEnhancedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9386606516042286, 0.9386606516042286, 0.9386606516042286, 0.18305201193182574, 0.18305201193182574, 0.18305201193182574, 0.9421765677621043, 0.9421765677621043, 0.9421765677621043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3521603662548819, 0.3521603662548819, 0.3521603662548819, 0.019188838728998237, 0.019188838728998237, 0.019188838728998237, 0.16735847426082806, 0.16735847426082806, 0.16735847426082806, 0.16124500604011482, 0.16124500604011482, 0.16124500604011482, 0.1470832028388409, 0.1470832028388409, 0.1470832028388409, 0.07717636185652477, 0.07717636185652477, 0.07717636185652477, 0.1056842783840295, 0.1056842783840295, 0.1056842783840295, 0.10779445533021026, 0.10779445533021026, 0.10779445533021026, 0.9876897512654542, 0.9876897512654542, 0.9876897512654542, 0.9908122147495643, 0.9908122147495643, 0.9908122147495643, 0.9888687634060901, 0.9888687634060901, 0.9888687634060901, 0.11577997030121201, 0.11577997030121201, 0.11577997030121201, 0.508150754358158, 0.508150754358158, 0.508150754358158, 0.5545684467823346, 0.5545684467823346, 0.5545684467823346, 0.17072908824639177, 0.17072908824639177, 0.17072908824639177, 0.1622165694136265, 0.1622165694136265, 0.1622165694136265, 0.11718549684159185, 0.11718549684159185, 0.11718549684159185, 0.1806898800035418, 0.1806898800035418, 0.1806898800035418, 0.13634468071001715, 0.13634468071001715, 0.13634468071001715, 0.16942889928556892, 0.16942889928556892, 0.16942889928556892, 0.15493558945019215, 0.15493558945019215, 0.15493558945019215, 0.15091768294376529, 0.15091768294376529, 0.15091768294376529, 0.20479601599532193, 0.20479601599532193, 0.20479601599532193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08671120537685861, 0.08671120537685861, 0.08671120537685861, 0.034796290496393545, 0.034796290496393545, 0.034796290496393545, 0.0651207139675063, 0.0651207139675063, 0.0651207139675063, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2467204050971088, 0.2467204050971088, 0.2467204050971088, 0.07672015012875677, 0.07672015012875677, 0.07672015012875677, 0.044438798700920934, 0.044438798700920934, 0.044438798700920934, 0.039358156110053666, 0.039358156110053666, 0.039358156110053666, 0.08518374514922367, 0.08518374514922367, 0.08518374514922367, 0.5529387133385046, 0.5529387133385046, 0.5529387133385046, 0.5615995330791457, 0.5615995330791457, 0.5615995330791457, 0.4875155268394852, 0.4875155268394852, 0.4875155268394852, 0.08733519539377976, 0.08733519539377976, 0.08733519539377976, 0.13532694213575958, 0.13532694213575958, 0.13532694213575958, 0.11217629787869687, 0.11217629787869687, 0.11217629787869687, 0.20248626252159718, 0.20248626252159718, 0.20248626252159718, 0.24573480823848592, 0.24573480823848592, 0.24573480823848592, 0.23605909170739292, 0.23605909170739292, 0.23605909170739292, 0.24948608194720856, 0.24948608194720856, 0.24948608194720856, 0.16497574205003152, 0.16497574205003152, 0.16497574205003152, 0.6163402712523259, 0.6163402712523259, 0.6163402712523259, 0.24177207133249645, 0.24177207133249645, 0.24177207133249645, 0.20130691934994416, 0.20130691934994416, 0.20130691934994416, 0.1532219773536232, 0.1532219773536232, 0.1532219773536232, 0.21779066609270414, 0.21779066609270414, 0.21779066609270414, 0.2343356670879303, 0.2343356670879303, 0.2343356670879303, 0.22106379041209145, 0.22106379041209145, 0.22106379041209145, 0.21259385208078274, 0.21259385208078274, 0.21259385208078274, 0.21337677807181488, 0.21337677807181488, 0.21337677807181488, 0.2178818604026782, 0.2178818604026782, 0.2178818604026782, 0.9457645991820509, 0.9457645991820509, 0.9457645991820509, 0.15932902592335285, 0.15932902592335285, 0.15932902592335285, 0.1673894673304701, 0.1673894673304701, 0.1673894673304701, 0.16596207964492005, 0.16596207964492005, 0.16596207964492005, 0.21295064738920788, 0.21295064738920788, 0.21295064738920788, 0.15725375635865946, 0.15725375635865946, 0.15725375635865946, 0.2101730336478328, 0.2101730336478328, 0.2101730336478328, 0.19131104473278937, 0.19131104473278937, 0.19131104473278937, 0.19386022497615363, 0.19386022497615363, 0.19386022497615363, 0.08436156325822197, 0.08436156325822197, 0.08436156325822197, 0.0802517928161276, 0.0802517928161276, 0.0802517928161276, 0.05278275666597454, 0.05278275666597454, 0.05278275666597454]}, "mutation_prompt": null}
{"id": "3e4767d9-73d9-4fe1-8ae2-0b49f0308eeb", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "7eb61250-8286-4a1f-852b-af21f9c872b9", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "92a0eab6-4fdc-4d53-b95d-dedfb9ef1371", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "3d081c8a-2885-4afb-87b8-1ade40fbb66f", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "95272378-ad28-4af9-b147-10682d7832f5", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.9  # Start with higher inertia\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            better_scores = scores < pbest_scores\n            pbest_positions[better_scores] = positions[better_scores]\n            pbest_scores = np.minimum(pbest_scores, scores)\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < gbest_score:\n                gbest_score = scores[min_score_index]\n                gbest_position = positions[min_score_index]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.inertia = 0.9 - 0.5 * (self.eval_count / self.budget)  # Dynamic inertia adjustment\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with dynamic inertia adjustment and vectorized calculations for improved convergence speed and efficiency.", "configspace": "", "generation": 56, "fitness": 0.2646709405557509, "feedback": "The algorithm EnhancedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.7011030964715659, 0.7011030964715659, 0.7011030964715659, 0.5964846038371687, 0.5964846038371687, 0.5964846038371687, 0.6933298008920776, 0.6933298008920776, 0.6933298008920776, 0.5233889450115712, 0.5233889450115712, 0.5233889450115712, 0.4758489791918479, 0.4758489791918479, 0.4758489791918479, 0.03420591497613945, 0.03420591497613945, 0.03420591497613945, 0.164205537174418, 0.164205537174418, 0.164205537174418, 0.13362439610541055, 0.13362439610541055, 0.13362439610541055, 0.31575232706893386, 0.31575232706893386, 0.31575232706893386, 0.1224788888062367, 0.1224788888062367, 0.1224788888062367, 0.13199662032065085, 0.13199662032065085, 0.13199662032065085, 0.09713255469317317, 0.09713255469317317, 0.09713255469317317, 0.9905524978809285, 0.9905524978809285, 0.9905524978809285, 0.9927305983897153, 0.9927305983897153, 0.9927305983897153, 0.9921104115493877, 0.9921104115493877, 0.9921104115493877, 0.44226775545694197, 0.44226775545694197, 0.44226775545694197, 0.4496527444715904, 0.4496527444715904, 0.4496527444715904, 0.5275392290333717, 0.5275392290333717, 0.5275392290333717, 0.20115490119201418, 0.20115490119201418, 0.20115490119201418, 0.160398891509681, 0.160398891509681, 0.160398891509681, 0.6653920649315883, 0.6653920649315883, 0.6653920649315883, 0.15951246583390855, 0.15951246583390855, 0.15951246583390855, 0.07735453505351564, 0.07735453505351564, 0.07735453505351564, 0.11938740418501148, 0.11938740418501148, 0.11938740418501148, 0.1133549549410201, 0.1133549549410201, 0.1133549549410201, 0.2408165924769412, 0.2408165924769412, 0.2408165924769412, 0.21575220323853805, 0.21575220323853805, 0.21575220323853805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023199818888846035, 0.0023199818888846035, 0.0023199818888846035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1536322305317639, 0.1536322305317639, 0.1536322305317639, 0.028981480056000652, 0.028981480056000652, 0.028981480056000652, 0.041209610797284246, 0.041209610797284246, 0.041209610797284246, 0.046044265657246286, 0.046044265657246286, 0.046044265657246286, 0.06201707904150189, 0.06201707904150189, 0.06201707904150189, 0.0461955995101796, 0.0461955995101796, 0.0461955995101796, 0.03494873312160762, 0.03494873312160762, 0.03494873312160762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07659287729276543, 0.07659287729276543, 0.07659287729276543, 0.497890625378122, 0.497890625378122, 0.497890625378122, 0.4738499898867701, 0.4738499898867701, 0.4738499898867701, 0.44596248288223983, 0.44596248288223983, 0.44596248288223983, 0.07311931817853123, 0.07311931817853123, 0.07311931817853123, 0.11557157155844378, 0.11557157155844378, 0.11557157155844378, 0.09834945464628875, 0.09834945464628875, 0.09834945464628875, 0.34318440655047067, 0.34318440655047067, 0.34318440655047067, 0.2066530168567431, 0.2066530168567431, 0.2066530168567431, 0.17818929751834456, 0.17818929751834456, 0.17818929751834456, 0.38058082826560935, 0.38058082826560935, 0.38058082826560935, 0.3285427636617181, 0.3285427636617181, 0.3285427636617181, 0.44785108778658145, 0.44785108778658145, 0.44785108778658145, 0.2560260301668098, 0.2560260301668098, 0.2560260301668098, 0.18217203443744145, 0.18217203443744145, 0.18217203443744145, 0.11762898578740055, 0.11762898578740055, 0.11762898578740055, 0.19344055589706466, 0.19344055589706466, 0.19344055589706466, 0.19614476927246616, 0.19614476927246616, 0.19614476927246616, 0.2064388524844658, 0.2064388524844658, 0.2064388524844658, 0.17787015977954834, 0.17787015977954834, 0.17787015977954834, 0.21839497356508897, 0.21839497356508897, 0.21839497356508897, 0.5135304213613145, 0.5135304213613145, 0.5135304213613145, 0.7974126420711247, 0.7974126420711247, 0.7974126420711247, 0.15706508149317633, 0.15706508149317633, 0.15706508149317633, 0.19494423642493441, 0.19494423642493441, 0.19494423642493441, 0.1928080814060923, 0.1928080814060923, 0.1928080814060923, 0.2010469496488927, 0.2010469496488927, 0.2010469496488927, 0.15712175323644406, 0.15712175323644406, 0.15712175323644406, 0.20302263038033963, 0.20302263038033963, 0.20302263038033963, 0.19423721126918503, 0.19423721126918503, 0.19423721126918503, 0.20634376191843928, 0.20634376191843928, 0.20634376191843928, 0.09414489460033815, 0.09414489460033815, 0.09414489460033815, 0.09611231869728676, 0.09611231869728676, 0.09611231869728676, 0.08088576035576411, 0.08088576035576411, 0.08088576035576411]}, "mutation_prompt": null}
{"id": "8a25b129-62de-45b4-8570-787c9d2bd367", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "9a9b54c4-7009-478e-9133-30ec53850d26", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "ad962f42-a6fd-409a-9196-4722ad2d87d4", "solution": "import numpy as np\n\nclass OptimizedEnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n\n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            update_mask = scores < pbest_scores\n            pbest_scores[update_mask] = scores[update_mask]\n            pbest_positions[update_mask] = positions[update_mask]\n\n            min_idx = np.argmin(scores)\n            if scores[min_idx] < gbest_score:\n                gbest_score = scores[min_idx]\n                gbest_position = positions[min_idx]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            cognitive_component = self.cog_coeff * r1 * (pbest_positions - positions)\n            social_component = self.soc_coeff * r2 * (gbest_position - positions)\n            velocities = self.inertia * velocities + cognitive_component + social_component\n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedEnhancedAPSO", "description": "Optimized EnhancedAPSO with improved runtime efficiency by restructuring loops and reducing redundant operations.", "configspace": "", "generation": 59, "fitness": 0.2943382245110668, "feedback": "The algorithm OptimizedEnhancedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "08f89f7d-7568-40c9-b98b-157c54d4a4c9", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "14cfb638-0b4b-4a80-b2f9-e803345be18a", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros_like(positions)\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = np.zeros(self.dim)\n        gbest_score = np.inf\n\n        while self.eval_count < self.budget:\n            # Compute all scores in a vectorized manner\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            # Update personal and global bests\n            better_idx = scores < pbest_scores\n            pbest_scores[better_idx] = scores[better_idx]\n            pbest_positions[better_idx] = positions[better_idx]\n            \n            min_score_idx = np.argmin(scores)\n            if scores[min_score_idx] < gbest_score:\n                gbest_score = scores[min_score_idx]\n                gbest_position = positions[min_score_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n            # Vectorized calculation of new velocities and positions\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n\n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with optimized memory allocation and vectorized operations for improved runtime efficiency.", "configspace": "", "generation": 61, "fitness": 0.2943382245110668, "feedback": "The algorithm EnhancedAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "6c216c48-c319-47d4-8b0d-9895766af0ed", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "efe786ee-201b-46b4-82c6-33b164e8d13c", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "2ba89b62-f272-4d75-bca7-97384b6af1a1", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "dacd1ce1-7ce1-4670-ab71-53f0dfd3f868", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "99eb410a-d362-4283-9e5b-db3cf7be8230", "solution": "import numpy as np\n\nclass EnhancedAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = self.upper_bound - self.lower_bound\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n\n            if self.eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            \n            velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "EnhancedAPSO", "description": "Enhanced APSO with efficient memory usage and loop optimization for improved runtime efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9097128100169869, 0.9097128100169869, 0.9097128100169869, 0.8574573411844788, 0.8574573411844788, 0.8574573411844788, 0.906906136306548, 0.906906136306548, 0.906906136306548, 0.7702690203911593, 0.7702690203911593, 0.7702690203911593, 0.7621972565945984, 0.7621972565945984, 0.7621972565945984, 0.019002077769639025, 0.019002077769639025, 0.019002077769639025, 0.13398995364920196, 0.13398995364920196, 0.13398995364920196, 0.07640869743995793, 0.07640869743995793, 0.07640869743995793, 0.18278942811187038, 0.18278942811187038, 0.18278942811187038, 0.15679815446194256, 0.15679815446194256, 0.15679815446194256, 0.15789924752174933, 0.15789924752174933, 0.15789924752174933, 0.13249322719185508, 0.13249322719185508, 0.13249322719185508, 0.9877123265493369, 0.9877123265493369, 0.9877123265493369, 0.9908365501870486, 0.9908365501870486, 0.9908365501870486, 0.9890073693382277, 0.9890073693382277, 0.9890073693382277, 0.7686168241526485, 0.7686168241526485, 0.7686168241526485, 0.7406077231882633, 0.7406077231882633, 0.7406077231882633, 0.7183927910566337, 0.7183927910566337, 0.7183927910566337, 0.22497677406147476, 0.22497677406147476, 0.22497677406147476, 0.16216059935179106, 0.16216059935179106, 0.16216059935179106, 0.14021350097202756, 0.14021350097202756, 0.14021350097202756, 0.13371988364416154, 0.13371988364416154, 0.13371988364416154, 0.23177210771031187, 0.23177210771031187, 0.23177210771031187, 0.24083884042193282, 0.24083884042193282, 0.24083884042193282, 0.2529237230805348, 0.2529237230805348, 0.2529237230805348, 0.2543767329855273, 0.2543767329855273, 0.2543767329855273, 0.13154429164368409, 0.13154429164368409, 0.13154429164368409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15182196647854385, 0.15182196647854385, 0.15182196647854385, 0.050743840334993906, 0.050743840334993906, 0.050743840334993906, 0.06962501257049314, 0.06962501257049314, 0.06962501257049314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1996018761882915, 0.1996018761882915, 0.1996018761882915, 0.07497676768377637, 0.07497676768377637, 0.07497676768377637, 0.04357846152271172, 0.04357846152271172, 0.04357846152271172, 0.03906356560353341, 0.03906356560353341, 0.03906356560353341, 0.0846245435958981, 0.0846245435958981, 0.0846245435958981, 0.567269841145607, 0.567269841145607, 0.567269841145607, 0.5602161420647691, 0.5602161420647691, 0.5602161420647691, 0.5783491963948844, 0.5783491963948844, 0.5783491963948844, 0.09587670173052942, 0.09587670173052942, 0.09587670173052942, 0.10859372385853272, 0.10859372385853272, 0.10859372385853272, 0.09492843762637881, 0.09492843762637881, 0.09492843762637881, 0.22079223929788827, 0.22079223929788827, 0.22079223929788827, 0.14023066699939868, 0.14023066699939868, 0.14023066699939868, 0.19206258263901177, 0.19206258263901177, 0.19206258263901177, 0.3661263097147406, 0.3661263097147406, 0.3661263097147406, 0.26545907527604073, 0.26545907527604073, 0.26545907527604073, 0.5720200188111545, 0.5720200188111545, 0.5720200188111545, 0.24252950955073305, 0.24252950955073305, 0.24252950955073305, 0.2125265576249571, 0.2125265576249571, 0.2125265576249571, 0.20566576526028968, 0.20566576526028968, 0.20566576526028968, 0.2066924734018747, 0.2066924734018747, 0.2066924734018747, 0.22614623490526764, 0.22614623490526764, 0.22614623490526764, 0.18801630132149494, 0.18801630132149494, 0.18801630132149494, 0.20008164049471922, 0.20008164049471922, 0.20008164049471922, 0.21347944406256003, 0.21347944406256003, 0.21347944406256003, 0.24417588873710583, 0.24417588873710583, 0.24417588873710583, 0.9163759716147872, 0.9163759716147872, 0.9163759716147872, 0.15948467288784773, 0.15948467288784773, 0.15948467288784773, 0.16742849502394141, 0.16742849502394141, 0.16742849502394141, 0.20389091531370263, 0.20389091531370263, 0.20389091531370263, 0.21252585076477915, 0.21252585076477915, 0.21252585076477915, 0.15748956239600542, 0.15748956239600542, 0.15748956239600542, 0.20544009150429798, 0.20544009150429798, 0.20544009150429798, 0.2087447711492313, 0.2087447711492313, 0.2087447711492313, 0.20127435441972052, 0.20127435441972052, 0.20127435441972052, 0.0969453404796008, 0.0969453404796008, 0.0969453404796008, 0.11313691655940405, 0.11313691655940405, 0.11313691655940405, 0.1003170488037134, 0.1003170488037134, 0.1003170488037134]}, "mutation_prompt": null}
{"id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 67, "fitness": 0.29631669242876846, "feedback": "The algorithm OptimizedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "b09bd1e3-b856-425d-884c-3d212d229aca", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "e328f00b-bffc-47f4-af84-c3c37f6dbe3e", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "56db99d5-73c3-4ab6-80a9-90d677de2fa7", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "c2483944-baed-439b-9428-4c12d679b2a5", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "bfc5799a-7465-4cb2-a815-4a6f1d2c287d", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "728a1590-efd4-4709-955e-9a9c27aba86f", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "38c85b71-2093-4ccd-b1d8-f983c7e315e5", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "e504ab99-af07-471e-a0da-8729ae59232d", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "dffe0d0b-2f22-461a-8840-150512754090", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "0e1b9504-1f70-4702-91d6-b65a6321fc91", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "a8694d7b-e911-42c8-ad10-ca063ee961e1", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "a1224468-c0b8-4437-8165-9f8d0f7253b9", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.6  # Adjusted inertia weight\n        self.cog_coeff = 1.5  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.5  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        update_freq = max(1, self.pop_size // 10)  # Frequency to update global best\n        \n        while self.eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n            \n            gbest_update = False\n            for i in range(self.pop_size):\n                if scores[i] < pbest_scores[i]:\n                    pbest_scores[i] = scores[i]\n                    pbest_positions[i] = positions[i]\n                if scores[i] < gbest_score:\n                    gbest_score = scores[i]\n                    gbest_position = positions[i]\n                    gbest_update = True\n\n            if gbest_update or self.eval_count % update_freq == 0:\n                r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n                velocities = (self.inertia * velocities +\n                              self.cog_coeff * r1 * (pbest_positions - positions) +\n                              self.soc_coeff * r2 * (gbest_position - positions))\n                \n                velocities = np.clip(velocities, -self.vel_clamp, self.vel_clamp)\n                positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with reduced redundant calculations and efficient loop restructuring for improved runtime.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.9113708344038746, 0.9113708344038746, 0.9113708344038746, 0.9109498533878214, 0.9109498533878214, 0.9109498533878214, 0.9127741401817973, 0.9127741401817973, 0.9127741401817973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.8044888623711495, 0.8044888623711495, 0.8044888623711495, 0.7771215043788008, 0.7771215043788008, 0.7771215043788008, 0.1246659078185709, 0.1246659078185709, 0.1246659078185709, 0.07711009975171967, 0.07711009975171967, 0.07711009975171967, 0.17770296081559445, 0.17770296081559445, 0.17770296081559445, 0.10269140354316297, 0.10269140354316297, 0.10269140354316297, 0.14161162304899588, 0.14161162304899588, 0.14161162304899588, 0.14454818968757188, 0.14454818968757188, 0.14454818968757188, 0.9906600034622188, 0.9906600034622188, 0.9906600034622188, 0.9884829186555053, 0.9884829186555053, 0.9884829186555053, 0.9878021950726809, 0.9878021950726809, 0.9878021950726809, 0.8247653607496018, 0.8247653607496018, 0.8247653607496018, 0.7884994507263224, 0.7884994507263224, 0.7884994507263224, 0.8137138237520036, 0.8137138237520036, 0.8137138237520036, 0.2382249868129216, 0.2382249868129216, 0.2382249868129216, 0.16172242477765808, 0.16172242477765808, 0.16172242477765808, 0.22487564729167808, 0.22487564729167808, 0.22487564729167808, 0.2704273718001353, 0.2704273718001353, 0.2704273718001353, 0.10965497327841456, 0.10965497327841456, 0.10965497327841456, 0.1336244439442058, 0.1336244439442058, 0.1336244439442058, 0.2332354474475038, 0.2332354474475038, 0.2332354474475038, 0.2777208612205173, 0.2777208612205173, 0.2777208612205173, 0.23758622543872465, 0.23758622543872465, 0.23758622543872465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013689636350515011, 0.013689636350515011, 0.013689636350515011, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1709202824875431, 0.1709202824875431, 0.1709202824875431, 0.013724051388980807, 0.013724051388980807, 0.013724051388980807, 0.04115495265207869, 0.04115495265207869, 0.04115495265207869, 0.03718862465015704, 0.03718862465015704, 0.03718862465015704, 0.3361991306253268, 0.3361991306253268, 0.3361991306253268, 0.1330777584497026, 0.1330777584497026, 0.1330777584497026, 0.0766297979063213, 0.0766297979063213, 0.0766297979063213, 0.039103952527325236, 0.039103952527325236, 0.039103952527325236, 0.08396325175387298, 0.08396325175387298, 0.08396325175387298, 0.5648213058784939, 0.5648213058784939, 0.5648213058784939, 0.5261300673351006, 0.5261300673351006, 0.5261300673351006, 0.5842865627319248, 0.5842865627319248, 0.5842865627319248, 0.08330937060712063, 0.08330937060712063, 0.08330937060712063, 0.11291228170832224, 0.11291228170832224, 0.11291228170832224, 0.11652685176763866, 0.11652685176763866, 0.11652685176763866, 0.19661222917155863, 0.19661222917155863, 0.19661222917155863, 0.17547855335189155, 0.17547855335189155, 0.17547855335189155, 0.17284154870738544, 0.17284154870738544, 0.17284154870738544, 0.43975773317754696, 0.43975773317754696, 0.43975773317754696, 0.3290395869022701, 0.3290395869022701, 0.3290395869022701, 0.1856814406384789, 0.1856814406384789, 0.1856814406384789, 0.3068079977410402, 0.3068079977410402, 0.3068079977410402, 0.1942817132913085, 0.1942817132913085, 0.1942817132913085, 0.13272439219064613, 0.13272439219064613, 0.13272439219064613, 0.20303897608953136, 0.20303897608953136, 0.20303897608953136, 0.2187125720329509, 0.2187125720329509, 0.2187125720329509, 0.18234021409311407, 0.18234021409311407, 0.18234021409311407, 0.2526554147064055, 0.2526554147064055, 0.2526554147064055, 0.18787271351585044, 0.18787271351585044, 0.18787271351585044, 0.18454513383900628, 0.18454513383900628, 0.18454513383900628, 0.9426888315935206, 0.9426888315935206, 0.9426888315935206, 0.15960551136132994, 0.15960551136132994, 0.15960551136132994, 0.1677763089142038, 0.1677763089142038, 0.1677763089142038, 0.16706758683697187, 0.16706758683697187, 0.16706758683697187, 0.21302760729376158, 0.21302760729376158, 0.21302760729376158, 0.15765291241428692, 0.15765291241428692, 0.15765291241428692, 0.20338661338674424, 0.20338661338674424, 0.20338661338674424, 0.22935029610390556, 0.22935029610390556, 0.22935029610390556, 0.1834943781541809, 0.1834943781541809, 0.1834943781541809, 0.07315748831429758, 0.07315748831429758, 0.07315748831429758, 0.09574166610708357, 0.09574166610708357, 0.09574166610708357, 0.07949304230248055, 0.07949304230248055, 0.07949304230248055]}, "mutation_prompt": null}
{"id": "782e374c-feaf-4cb6-91c4-7d76eec06182", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7  # Adjusted inertia weight for better exploration\n        self.cog_coeff = 1.4  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.4  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        score_updates = 0\n\n        # Evaluate initial population\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        for i in range(self.pop_size):\n            if scores[i] < pbest_scores[i]:\n                pbest_scores[i] = scores[i]\n                pbest_positions[i] = positions[i]\n            if scores[i] < gbest_score:\n                gbest_score = scores[i]\n                gbest_position = positions[i]\n                score_updates += 1\n\n        while self.eval_count < self.budget:\n            # Asynchronous evaluation and update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cog_coeff * r1 * (pbest_positions[i] - positions[i]) +\n                                 self.soc_coeff * r2 * (gbest_position - positions[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_clamp, self.vel_clamp)\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new position\n                score = func(positions[i])\n                self.eval_count += 1\n                \n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = positions[i]\n                if score < gbest_score:\n                    gbest_score = score\n                    gbest_position = positions[i]\n                    score_updates += 1\n                    \n                # Stop if budget is exhausted\n                if self.eval_count >= self.budget:\n                    break\n\n        return gbest_position, gbest_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with streamlined computations and asynchronous update mechanism for improved efficiency.", "configspace": "", "generation": 79, "fitness": 0.30123740033450525, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "4fc152e9-b201-4bd5-9748-597cb9315a2c", "metadata": {"aucs": [0.7815048393916875, 0.7815048393916875, 0.7815048393916875, 0.7805013671526658, 0.7805013671526658, 0.7805013671526658, 0.8225068405147653, 0.8225068405147653, 0.8225068405147653, 0.6252025490016331, 0.6252025490016331, 0.6252025490016331, 0.5105786049610939, 0.5105786049610939, 0.5105786049610939, 0.049680656664811584, 0.049680656664811584, 0.049680656664811584, 0.607131357209953, 0.607131357209953, 0.607131357209953, 0.14054948161033132, 0.14054948161033132, 0.14054948161033132, 0.1725412137572193, 0.1725412137572193, 0.1725412137572193, 0.1429450761753014, 0.1429450761753014, 0.1429450761753014, 0.13386156749510192, 0.13386156749510192, 0.13386156749510192, 0.14762233213706555, 0.14762233213706555, 0.14762233213706555, 0.9903367430728237, 0.9903367430728237, 0.9903367430728237, 0.9927722859728704, 0.9927722859728704, 0.9927722859728704, 0.9923079268501116, 0.9923079268501116, 0.9923079268501116, 0.6149636568970338, 0.6149636568970338, 0.6149636568970338, 0.6846139420909368, 0.6846139420909368, 0.6846139420909368, 0.682221150908829, 0.682221150908829, 0.682221150908829, 0.6969110433294042, 0.6969110433294042, 0.6969110433294042, 0.16224714293416542, 0.16224714293416542, 0.16224714293416542, 0.1752474888462513, 0.1752474888462513, 0.1752474888462513, 0.20567387166048334, 0.20567387166048334, 0.20567387166048334, 0.22564316682036156, 0.22564316682036156, 0.22564316682036156, 0.21192930090981177, 0.21192930090981177, 0.21192930090981177, 0.21873887894367905, 0.21873887894367905, 0.21873887894367905, 0.21856391695276534, 0.21856391695276534, 0.21856391695276534, 0.2428388660457369, 0.2428388660457369, 0.2428388660457369, 0.05174585276889487, 0.05174585276889487, 0.05174585276889487, 0.05028431085492868, 0.05028431085492868, 0.05028431085492868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14622362224234053, 0.14622362224234053, 0.14622362224234053, 0.09277842143345882, 0.09277842143345882, 0.09277842143345882, 0.047282805850134, 0.047282805850134, 0.047282805850134, 0.031188899055966224, 0.031188899055966224, 0.031188899055966224, 0.1289843802599414, 0.1289843802599414, 0.1289843802599414, 0.07143367774143605, 0.07143367774143605, 0.07143367774143605, 0.0944465958127726, 0.0944465958127726, 0.0944465958127726, 0.061052505486164366, 0.061052505486164366, 0.061052505486164366, 0.0825753377944366, 0.0825753377944366, 0.0825753377944366, 0.5084389743543698, 0.5084389743543698, 0.5084389743543698, 0.5827962062280199, 0.5827962062280199, 0.5827962062280199, 0.5867009356511763, 0.5867009356511763, 0.5867009356511763, 0.12496420183508328, 0.12496420183508328, 0.12496420183508328, 0.12492068527321021, 0.12492068527321021, 0.12492068527321021, 0.10308860825004373, 0.10308860825004373, 0.10308860825004373, 0.21053250264004042, 0.21053250264004042, 0.21053250264004042, 0.23776871919581122, 0.23776871919581122, 0.23776871919581122, 0.21243915270637015, 0.21243915270637015, 0.21243915270637015, 0.3667332274752959, 0.3667332274752959, 0.3667332274752959, 0.2707269001686683, 0.2707269001686683, 0.2707269001686683, 0.28741061068718776, 0.28741061068718776, 0.28741061068718776, 0.1924424455988163, 0.1924424455988163, 0.1924424455988163, 0.22276361921255572, 0.22276361921255572, 0.22276361921255572, 0.12555022456345144, 0.12555022456345144, 0.12555022456345144, 0.2156563648024432, 0.2156563648024432, 0.2156563648024432, 0.21139169629386056, 0.21139169629386056, 0.21139169629386056, 0.24285911508589408, 0.24285911508589408, 0.24285911508589408, 0.19885464743083214, 0.19885464743083214, 0.19885464743083214, 0.712725822529552, 0.712725822529552, 0.712725822529552, 0.23816946278310092, 0.23816946278310092, 0.23816946278310092, 0.8846674373172413, 0.8846674373172413, 0.8846674373172413, 0.15955374081793905, 0.15955374081793905, 0.15955374081793905, 0.168094208960472, 0.168094208960472, 0.168094208960472, 0.1669863965014622, 0.1669863965014622, 0.1669863965014622, 0.21037043861407356, 0.21037043861407356, 0.21037043861407356, 0.15478081002334587, 0.15478081002334587, 0.15478081002334587, 0.21205998074330723, 0.21205998074330723, 0.21205998074330723, 0.1888185803148844, 0.1888185803148844, 0.1888185803148844, 0.1944835718800959, 0.1944835718800959, 0.1944835718800959, 0.09179033239256695, 0.09179033239256695, 0.09179033239256695, 0.0941659155797292, 0.0941659155797292, 0.0941659155797292, 0.09865561056611238, 0.09865561056611238, 0.09865561056611238]}, "mutation_prompt": null}
{"id": "160cf3d1-51eb-4ae4-bc5d-e239c1212728", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7  # Adjusted inertia weight for better exploration\n        self.cog_coeff = 1.4  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.4  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        score_updates = 0\n\n        # Evaluate initial population\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        for i in range(self.pop_size):\n            if scores[i] < pbest_scores[i]:\n                pbest_scores[i] = scores[i]\n                pbest_positions[i] = positions[i]\n            if scores[i] < gbest_score:\n                gbest_score = scores[i]\n                gbest_position = positions[i]\n                score_updates += 1\n\n        while self.eval_count < self.budget:\n            # Asynchronous evaluation and update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cog_coeff * r1 * (pbest_positions[i] - positions[i]) +\n                                 self.soc_coeff * r2 * (gbest_position - positions[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_clamp, self.vel_clamp)\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new position\n                score = func(positions[i])\n                self.eval_count += 1\n                \n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = positions[i]\n                if score < gbest_score:\n                    gbest_score = score\n                    gbest_position = positions[i]\n                    score_updates += 1\n                    \n                # Stop if budget is exhausted\n                if self.eval_count >= self.budget:\n                    break\n\n        return gbest_position, gbest_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with streamlined computations and asynchronous update mechanism for improved efficiency.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "782e374c-feaf-4cb6-91c4-7d76eec06182", "metadata": {"aucs": [0.7815048393916875, 0.7815048393916875, 0.7815048393916875, 0.7805013671526658, 0.7805013671526658, 0.7805013671526658, 0.8225068405147653, 0.8225068405147653, 0.8225068405147653, 0.6252025490016331, 0.6252025490016331, 0.6252025490016331, 0.5105786049610939, 0.5105786049610939, 0.5105786049610939, 0.049680656664811584, 0.049680656664811584, 0.049680656664811584, 0.607131357209953, 0.607131357209953, 0.607131357209953, 0.14054948161033132, 0.14054948161033132, 0.14054948161033132, 0.1725412137572193, 0.1725412137572193, 0.1725412137572193, 0.1429450761753014, 0.1429450761753014, 0.1429450761753014, 0.13386156749510192, 0.13386156749510192, 0.13386156749510192, 0.14762233213706555, 0.14762233213706555, 0.14762233213706555, 0.9903367430728237, 0.9903367430728237, 0.9903367430728237, 0.9927722859728704, 0.9927722859728704, 0.9927722859728704, 0.9923079268501116, 0.9923079268501116, 0.9923079268501116, 0.6149636568970338, 0.6149636568970338, 0.6149636568970338, 0.6846139420909368, 0.6846139420909368, 0.6846139420909368, 0.682221150908829, 0.682221150908829, 0.682221150908829, 0.6969110433294042, 0.6969110433294042, 0.6969110433294042, 0.16224714293416542, 0.16224714293416542, 0.16224714293416542, 0.1752474888462513, 0.1752474888462513, 0.1752474888462513, 0.20567387166048334, 0.20567387166048334, 0.20567387166048334, 0.22564316682036156, 0.22564316682036156, 0.22564316682036156, 0.21192930090981177, 0.21192930090981177, 0.21192930090981177, 0.21873887894367905, 0.21873887894367905, 0.21873887894367905, 0.21856391695276534, 0.21856391695276534, 0.21856391695276534, 0.2428388660457369, 0.2428388660457369, 0.2428388660457369, 0.05174585276889487, 0.05174585276889487, 0.05174585276889487, 0.05028431085492868, 0.05028431085492868, 0.05028431085492868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14622362224234053, 0.14622362224234053, 0.14622362224234053, 0.09277842143345882, 0.09277842143345882, 0.09277842143345882, 0.047282805850134, 0.047282805850134, 0.047282805850134, 0.031188899055966224, 0.031188899055966224, 0.031188899055966224, 0.1289843802599414, 0.1289843802599414, 0.1289843802599414, 0.07143367774143605, 0.07143367774143605, 0.07143367774143605, 0.0944465958127726, 0.0944465958127726, 0.0944465958127726, 0.061052505486164366, 0.061052505486164366, 0.061052505486164366, 0.0825753377944366, 0.0825753377944366, 0.0825753377944366, 0.5084389743543698, 0.5084389743543698, 0.5084389743543698, 0.5827962062280199, 0.5827962062280199, 0.5827962062280199, 0.5867009356511763, 0.5867009356511763, 0.5867009356511763, 0.12496420183508328, 0.12496420183508328, 0.12496420183508328, 0.12492068527321021, 0.12492068527321021, 0.12492068527321021, 0.10308860825004373, 0.10308860825004373, 0.10308860825004373, 0.21053250264004042, 0.21053250264004042, 0.21053250264004042, 0.23776871919581122, 0.23776871919581122, 0.23776871919581122, 0.21243915270637015, 0.21243915270637015, 0.21243915270637015, 0.3667332274752959, 0.3667332274752959, 0.3667332274752959, 0.2707269001686683, 0.2707269001686683, 0.2707269001686683, 0.28741061068718776, 0.28741061068718776, 0.28741061068718776, 0.1924424455988163, 0.1924424455988163, 0.1924424455988163, 0.22276361921255572, 0.22276361921255572, 0.22276361921255572, 0.12555022456345144, 0.12555022456345144, 0.12555022456345144, 0.2156563648024432, 0.2156563648024432, 0.2156563648024432, 0.21139169629386056, 0.21139169629386056, 0.21139169629386056, 0.24285911508589408, 0.24285911508589408, 0.24285911508589408, 0.19885464743083214, 0.19885464743083214, 0.19885464743083214, 0.712725822529552, 0.712725822529552, 0.712725822529552, 0.23816946278310092, 0.23816946278310092, 0.23816946278310092, 0.8846674373172413, 0.8846674373172413, 0.8846674373172413, 0.15955374081793905, 0.15955374081793905, 0.15955374081793905, 0.168094208960472, 0.168094208960472, 0.168094208960472, 0.1669863965014622, 0.1669863965014622, 0.1669863965014622, 0.21037043861407356, 0.21037043861407356, 0.21037043861407356, 0.15478081002334587, 0.15478081002334587, 0.15478081002334587, 0.21205998074330723, 0.21205998074330723, 0.21205998074330723, 0.1888185803148844, 0.1888185803148844, 0.1888185803148844, 0.1944835718800959, 0.1944835718800959, 0.1944835718800959, 0.09179033239256695, 0.09179033239256695, 0.09179033239256695, 0.0941659155797292, 0.0941659155797292, 0.0941659155797292, 0.09865561056611238, 0.09865561056611238, 0.09865561056611238]}, "mutation_prompt": null}
{"id": "952f8891-ec98-4147-96e1-a21a03cfe565", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7  # Adjusted inertia weight for better exploration\n        self.cog_coeff = 1.4  # Adjusted cognitive coefficient\n        self.soc_coeff = 1.4  # Adjusted social coefficient\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        gbest_position = None\n        gbest_score = np.inf\n        score_updates = 0\n\n        # Evaluate initial population\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        for i in range(self.pop_size):\n            if scores[i] < pbest_scores[i]:\n                pbest_scores[i] = scores[i]\n                pbest_positions[i] = positions[i]\n            if scores[i] < gbest_score:\n                gbest_score = scores[i]\n                gbest_position = positions[i]\n                score_updates += 1\n\n        while self.eval_count < self.budget:\n            # Asynchronous evaluation and update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia * velocities[i] +\n                                 self.cog_coeff * r1 * (pbest_positions[i] - positions[i]) +\n                                 self.soc_coeff * r2 * (gbest_position - positions[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_clamp, self.vel_clamp)\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new position\n                score = func(positions[i])\n                self.eval_count += 1\n                \n                if score < pbest_scores[i]:\n                    pbest_scores[i] = score\n                    pbest_positions[i] = positions[i]\n                if score < gbest_score:\n                    gbest_score = score\n                    gbest_position = positions[i]\n                    score_updates += 1\n                    \n                # Stop if budget is exhausted\n                if self.eval_count >= self.budget:\n                    break\n\n        return gbest_position, gbest_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with streamlined computations and asynchronous update mechanism for improved efficiency.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "782e374c-feaf-4cb6-91c4-7d76eec06182", "metadata": {"aucs": [0.7815048393916875, 0.7815048393916875, 0.7815048393916875, 0.7805013671526658, 0.7805013671526658, 0.7805013671526658, 0.8225068405147653, 0.8225068405147653, 0.8225068405147653, 0.6252025490016331, 0.6252025490016331, 0.6252025490016331, 0.5105786049610939, 0.5105786049610939, 0.5105786049610939, 0.049680656664811584, 0.049680656664811584, 0.049680656664811584, 0.607131357209953, 0.607131357209953, 0.607131357209953, 0.14054948161033132, 0.14054948161033132, 0.14054948161033132, 0.1725412137572193, 0.1725412137572193, 0.1725412137572193, 0.1429450761753014, 0.1429450761753014, 0.1429450761753014, 0.13386156749510192, 0.13386156749510192, 0.13386156749510192, 0.14762233213706555, 0.14762233213706555, 0.14762233213706555, 0.9903367430728237, 0.9903367430728237, 0.9903367430728237, 0.9927722859728704, 0.9927722859728704, 0.9927722859728704, 0.9923079268501116, 0.9923079268501116, 0.9923079268501116, 0.6149636568970338, 0.6149636568970338, 0.6149636568970338, 0.6846139420909368, 0.6846139420909368, 0.6846139420909368, 0.682221150908829, 0.682221150908829, 0.682221150908829, 0.6969110433294042, 0.6969110433294042, 0.6969110433294042, 0.16224714293416542, 0.16224714293416542, 0.16224714293416542, 0.1752474888462513, 0.1752474888462513, 0.1752474888462513, 0.20567387166048334, 0.20567387166048334, 0.20567387166048334, 0.22564316682036156, 0.22564316682036156, 0.22564316682036156, 0.21192930090981177, 0.21192930090981177, 0.21192930090981177, 0.21873887894367905, 0.21873887894367905, 0.21873887894367905, 0.21856391695276534, 0.21856391695276534, 0.21856391695276534, 0.2428388660457369, 0.2428388660457369, 0.2428388660457369, 0.05174585276889487, 0.05174585276889487, 0.05174585276889487, 0.05028431085492868, 0.05028431085492868, 0.05028431085492868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14622362224234053, 0.14622362224234053, 0.14622362224234053, 0.09277842143345882, 0.09277842143345882, 0.09277842143345882, 0.047282805850134, 0.047282805850134, 0.047282805850134, 0.031188899055966224, 0.031188899055966224, 0.031188899055966224, 0.1289843802599414, 0.1289843802599414, 0.1289843802599414, 0.07143367774143605, 0.07143367774143605, 0.07143367774143605, 0.0944465958127726, 0.0944465958127726, 0.0944465958127726, 0.061052505486164366, 0.061052505486164366, 0.061052505486164366, 0.0825753377944366, 0.0825753377944366, 0.0825753377944366, 0.5084389743543698, 0.5084389743543698, 0.5084389743543698, 0.5827962062280199, 0.5827962062280199, 0.5827962062280199, 0.5867009356511763, 0.5867009356511763, 0.5867009356511763, 0.12496420183508328, 0.12496420183508328, 0.12496420183508328, 0.12492068527321021, 0.12492068527321021, 0.12492068527321021, 0.10308860825004373, 0.10308860825004373, 0.10308860825004373, 0.21053250264004042, 0.21053250264004042, 0.21053250264004042, 0.23776871919581122, 0.23776871919581122, 0.23776871919581122, 0.21243915270637015, 0.21243915270637015, 0.21243915270637015, 0.3667332274752959, 0.3667332274752959, 0.3667332274752959, 0.2707269001686683, 0.2707269001686683, 0.2707269001686683, 0.28741061068718776, 0.28741061068718776, 0.28741061068718776, 0.1924424455988163, 0.1924424455988163, 0.1924424455988163, 0.22276361921255572, 0.22276361921255572, 0.22276361921255572, 0.12555022456345144, 0.12555022456345144, 0.12555022456345144, 0.2156563648024432, 0.2156563648024432, 0.2156563648024432, 0.21139169629386056, 0.21139169629386056, 0.21139169629386056, 0.24285911508589408, 0.24285911508589408, 0.24285911508589408, 0.19885464743083214, 0.19885464743083214, 0.19885464743083214, 0.712725822529552, 0.712725822529552, 0.712725822529552, 0.23816946278310092, 0.23816946278310092, 0.23816946278310092, 0.8846674373172413, 0.8846674373172413, 0.8846674373172413, 0.15955374081793905, 0.15955374081793905, 0.15955374081793905, 0.168094208960472, 0.168094208960472, 0.168094208960472, 0.1669863965014622, 0.1669863965014622, 0.1669863965014622, 0.21037043861407356, 0.21037043861407356, 0.21037043861407356, 0.15478081002334587, 0.15478081002334587, 0.15478081002334587, 0.21205998074330723, 0.21205998074330723, 0.21205998074330723, 0.1888185803148844, 0.1888185803148844, 0.1888185803148844, 0.1944835718800959, 0.1944835718800959, 0.1944835718800959, 0.09179033239256695, 0.09179033239256695, 0.09179033239256695, 0.0941659155797292, 0.0941659155797292, 0.0941659155797292, 0.09865561056611238, 0.09865561056611238, 0.09865561056611238]}, "mutation_prompt": null}
{"id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 82, "fitness": 0.31146683062299113, "feedback": "The algorithm OptimizedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "782e374c-feaf-4cb6-91c4-7d76eec06182", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "1146ffec-99ee-4fd3-9735-99ad45f67b80", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "baaaccce-e13a-4bee-a82d-0fade4c57d32", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "9bfadae6-54dd-4968-8de5-08edcf4de4cc", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "5814eb38-db9a-4e1c-ab22-d4a1e2900018", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "06a5267a-e50b-427c-b4cd-de367619ce75", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "82d34390-fd73-4046-9cc6-a6877b825646", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "d8bbad5a-ca02-4b01-a27d-35028d673f4e", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "953cadcc-6bf7-4a4f-a212-291414b10ab8", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "70103431-78dd-4f37-a9fc-993e640274ee", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "499f806f-2f8c-4ba4-a8fe-e250c1c81314", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "be4d9a4a-3855-4e48-ac00-d942e0a7ee01", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "93e53c2d-d3fb-4202-a367-a491f0906fbe", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros_like(positions)\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n\n        scores = func(positions)\n        self.eval_count += self.pop_size\n        \n        gbest_idx = np.argmin(scores)\n        gbest_score = scores[gbest_idx]\n        gbest_position = positions[gbest_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            \n            velocities *= self.inertia\n            velocities += self.cog_coeff * r1 * (pbest_positions - positions)\n            velocities += self.soc_coeff * r2 * (gbest_position - positions)\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            \n            positions += velocities\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = func(positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            np.copyto(pbest_scores, scores, where=improvement_mask)\n            np.copyto(pbest_positions, positions, where=improvement_mask[:, np.newaxis])\n\n            current_gbest_idx = np.argmin(scores)\n            if scores[current_gbest_idx] < gbest_score:\n                gbest_score = scores[current_gbest_idx]\n                gbest_position = positions[current_gbest_idx].copy()\n\n        return gbest_position, gbest_score", "name": "EnhancedPSO", "description": "Enhanced PSO with inline updates, batch evaluations, and vectorized computations for reduced overhead and improved efficiency.", "configspace": "", "generation": 94, "fitness": 0.31146683062299113, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "30c64063-8be1-4388-81a5-a23246f3e0d6", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "0e78f05a-965b-4e81-b051-3b303c86b0e2", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "3f2ea1cc-817e-4ed4-96a4-105f1e2ce719", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "d7f836d1-97b2-47c2-81ef-59f92d093999", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
{"id": "03b6906f-2ff5-49ff-887d-cd231149273c", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.pop_size = min(max(20, dim * 5), 100)\n        self.inertia = 0.7\n        self.cog_coeff = 1.4\n        self.soc_coeff = 1.4\n        self.vel_clamp = (self.upper_bound - self.lower_bound) / 2\n        self.eval_count = 0\n\n    def __call__(self, func):\n        np.random.seed(42)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest_positions = positions.copy()\n        pbest_scores = np.full(self.pop_size, np.inf)\n        scores = np.apply_along_axis(func, 1, positions)\n        self.eval_count += self.pop_size\n        \n        best_idx = np.argmin(scores)\n        gbest_score = scores[best_idx]\n        gbest_position = positions[best_idx].copy()\n\n        while self.eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n\n            velocities = (self.inertia * velocities +\n                          self.cog_coeff * r1 * (pbest_positions - positions) +\n                          self.soc_coeff * r2 * (gbest_position - positions))\n            np.clip(velocities, -self.vel_clamp, self.vel_clamp, out=velocities)\n            np.add(positions, velocities, out=positions)\n            np.clip(positions, self.lower_bound, self.upper_bound, out=positions)\n\n            scores = np.apply_along_axis(func, 1, positions)\n            self.eval_count += self.pop_size\n\n            improvement_mask = scores < pbest_scores\n            pbest_scores[improvement_mask] = scores[improvement_mask]\n            pbest_positions[improvement_mask] = positions[improvement_mask]\n\n            best_idx = np.argmin(scores)\n            if scores[best_idx] < gbest_score:\n                gbest_score = scores[best_idx]\n                gbest_position = positions[best_idx].copy()\n\n            if self.eval_count >= self.budget:\n                break\n\n        return gbest_position, gbest_score", "name": "OptimizedPSO", "description": "Optimized PSO with loop restructuring and efficient data handling for enhanced runtime performance.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2f6f50b-762a-4a4a-b5ea-be89d1fe298b", "metadata": {"aucs": [0.9079164124681465, 0.9079164124681465, 0.9079164124681465, 0.9138192781611163, 0.9138192781611163, 0.9138192781611163, 0.9127035119887569, 0.9127035119887569, 0.9127035119887569, 0.7314466313364083, 0.7314466313364083, 0.7314466313364083, 0.7627813098071842, 0.7627813098071842, 0.7627813098071842, 0.777535850794327, 0.777535850794327, 0.777535850794327, 0.11865286503099037, 0.11865286503099037, 0.11865286503099037, 0.14434550611332597, 0.14434550611332597, 0.14434550611332597, 0.25750852433843496, 0.25750852433843496, 0.25750852433843496, 0.13486883345292788, 0.13486883345292788, 0.13486883345292788, 0.09184049516382242, 0.09184049516382242, 0.09184049516382242, 0.12229648872797994, 0.12229648872797994, 0.12229648872797994, 0.99068196523178, 0.99068196523178, 0.99068196523178, 0.9883444455541017, 0.9883444455541017, 0.9883444455541017, 0.9881509474555942, 0.9881509474555942, 0.9881509474555942, 0.7968298908317484, 0.7968298908317484, 0.7968298908317484, 0.781958483760346, 0.781958483760346, 0.781958483760346, 0.7683183577879652, 0.7683183577879652, 0.7683183577879652, 0.22813498722511172, 0.22813498722511172, 0.22813498722511172, 0.16181557963460458, 0.16181557963460458, 0.16181557963460458, 0.20313619575541686, 0.20313619575541686, 0.20313619575541686, 0.13360600108406362, 0.13360600108406362, 0.13360600108406362, 0.11912644812641704, 0.11912644812641704, 0.11912644812641704, 0.13568183634864328, 0.13568183634864328, 0.13568183634864328, 0.2477562971818752, 0.2477562971818752, 0.2477562971818752, 0.2747331370728001, 0.2747331370728001, 0.2747331370728001, 0.27213040554893353, 0.27213040554893353, 0.27213040554893353, 0.002220516473504519, 0.002220516473504519, 0.002220516473504519, 0.07115480668890672, 0.07115480668890672, 0.07115480668890672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18761989820021918, 0.18761989820021918, 0.18761989820021918, 0.03611621093873274, 0.03611621093873274, 0.03611621093873274, 0.03811348016827376, 0.03811348016827376, 0.03811348016827376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3149475218755755, 0.3149475218755755, 0.3149475218755755, 0.07746671334467048, 0.07746671334467048, 0.07746671334467048, 0.05945980053023103, 0.05945980053023103, 0.05945980053023103, 0.03933509215039577, 0.03933509215039577, 0.03933509215039577, 0.08365329441639902, 0.08365329441639902, 0.08365329441639902, 0.5385321199268587, 0.5385321199268587, 0.5385321199268587, 0.5304671757016539, 0.5304671757016539, 0.5304671757016539, 0.6070245534239435, 0.6070245534239435, 0.6070245534239435, 0.11689959243059189, 0.11689959243059189, 0.11689959243059189, 0.07794485862839595, 0.07794485862839595, 0.07794485862839595, 0.10285987024975385, 0.10285987024975385, 0.10285987024975385, 0.22939964271091018, 0.22939964271091018, 0.22939964271091018, 0.251379459609389, 0.251379459609389, 0.251379459609389, 0.14919048606048746, 0.14919048606048746, 0.14919048606048746, 0.29766612956796545, 0.29766612956796545, 0.29766612956796545, 0.3295401642895628, 0.3295401642895628, 0.3295401642895628, 0.2676523193125703, 0.2676523193125703, 0.2676523193125703, 0.22000974772454673, 0.22000974772454673, 0.22000974772454673, 0.1938833989856278, 0.1938833989856278, 0.1938833989856278, 0.1398442195672347, 0.1398442195672347, 0.1398442195672347, 0.23265202812385355, 0.23265202812385355, 0.23265202812385355, 0.24443912152437564, 0.24443912152437564, 0.24443912152437564, 0.17153963937123295, 0.17153963937123295, 0.17153963937123295, 0.19125655167062927, 0.19125655167062927, 0.19125655167062927, 0.7101005824832192, 0.7101005824832192, 0.7101005824832192, 0.21254261100265726, 0.21254261100265726, 0.21254261100265726, 0.9303229164744582, 0.9303229164744582, 0.9303229164744582, 0.1590557085647426, 0.1590557085647426, 0.1590557085647426, 0.16711424298712751, 0.16711424298712751, 0.16711424298712751, 0.1625719521547342, 0.1625719521547342, 0.1625719521547342, 0.21290856729921337, 0.21290856729921337, 0.21290856729921337, 0.15748585009927485, 0.15748585009927485, 0.15748585009927485, 0.21319066983555568, 0.21319066983555568, 0.21319066983555568, 0.2178221198572271, 0.2178221198572271, 0.2178221198572271, 0.20803704859887462, 0.20803704859887462, 0.20803704859887462, 0.11041021483955504, 0.11041021483955504, 0.11041021483955504, 0.09940657544763232, 0.09940657544763232, 0.09940657544763232, 0.09605364556177176, 0.09605364556177176, 0.09605364556177176]}, "mutation_prompt": null}
