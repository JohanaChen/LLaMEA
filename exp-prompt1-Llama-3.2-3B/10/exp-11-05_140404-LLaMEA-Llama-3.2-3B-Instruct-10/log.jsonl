{"id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 0, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "e42409a0-3ead-40e6-85f7-cc0429e9d47d", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "ba84375c-261a-495b-aa2f-78090a4ec009", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_step_size = 1.2  # Adaptive step size for evolution strategy\n        self.adaptive_covariance = 0.1  # Adaptive covariance for genetic drift\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + self.adaptive_step_size * np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + self.adaptive_covariance * np.random.normal(0, 1.0, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Covariance Matrix.", "configspace": "", "generation": 2, "fitness": 0.0856067528602721, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1695265171026178, 0.15508516956923102, 0.15443410526301649, 0.1784359041711816, 0.1503020615670515, 0.18405532899863009, 0.1530701234174645, 0.17490530472838817, 0.13845623664963513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044211590191931105, 0.04561462876442324, 0.03825296093686792, 0.03894261495055906, 0.05138012226884603, 0.04043627446953468, 0.030619762790704552, 0.03856487111529472, 0.0346235047871114, 0.02287193899812978, 0.0264852552433551, 0.022924680000501185, 0.021165756316478435, 0.0222854558782416, 0.018827098663265707, 0.027619558865628502, 0.02417940824932252, 0.046867829375649483, 0.16119150941584415, 0.09985436351427068, 0.0968068776883294, 0.10874785589710978, 0.1402842978516059, 0.09754345310296464, 0.08226865877465317, 0.11107422879466466, 0.10716555696430441, 0.09439209558797013, 0.07335214936246282, 0.060518040352901314, 0.06554110297146776, 0.06817187954268444, 0.05891043613457714, 0.09559827688136469, 0.06777144928063739, 0.06497091952887402, 0.12637335326431187, 0.11974428314694141, 0.11504017378565368, 0.11519276412342605, 0.13942473892017204, 0.10510075413120434, 0.1175835487903849, 0.12924159398080082, 0.10089775040083171, 0.0015541226475411785, 0.0006833490486788385, 9.999999999998899e-05, 0.003359397772812023, 0.00317529246504733, 9.999999999998899e-05, 0.015332617615874011, 0.006778133809361542, 0.002562660705964448, 0.000491162765593578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008218971184866, 0.0216997423114893, 0.038484745935599474, 0.06308686344442938, 0.03834991833978507, 0.06186076038273802, 0.04112762728189823, 0.03865520528357669, 0.05018641508138588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010452940554239731, 9.999999999998899e-05, 0.2026155642311147, 0.16387326444166772, 0.20266313734384123, 0.20618750069117886, 0.1824150638732892, 0.17894924174121185, 0.17163532828746997, 0.20397098160401805, 0.17758158838948312, 0.0436645350987126, 0.04479272400009482, 0.042175424964380315, 0.035277065901824556, 0.042513390461968115, 0.056045179794296573, 0.0411681515028135, 0.03867131716700989, 0.04299987216571388, 0.16608137290158542, 0.1117207264012654, 0.12569273505571543, 0.165885286192895, 0.11558997817977235, 0.17301942193597075, 0.1476322203728736, 0.12611102559462672, 0.1520423783198276, 0.14727298636992203, 0.1525460575421801, 0.1611354594610126, 0.1697996155786805, 0.1918211239611921, 0.15459784961799616, 0.14508659974827953, 0.16360748819385484, 0.16021046398584438, 0.08755208147005211, 0.10001707730344767, 0.09720424924739823, 0.119852009455231, 0.14289099710402675, 0.10789061007070577, 0.10576456106520549, 0.10177090748711248, 0.0922851826108887, 0.14691332518477007, 0.1460485155444421, 0.15278931214358293, 0.13943583645520718, 0.20088030857647776, 0.14766818454825137, 0.15997922430729727, 0.1664060644483103, 0.15747772691905104, 0.1091693467201782, 0.14980179950702166, 0.1116056424863342, 0.10635978224516307, 0.08600668693270441, 0.10777798470576305, 0.14108257710552152, 0.1400968192436025, 0.1330792115417676, 0.13126553735526791, 0.1956515872076322, 0.18722248055437107, 0.14954222795459482, 0.12199901143243574, 0.13851025452215837, 0.14870759609843986, 0.17623729043705694, 0.2097017858869351, 0.17053386895919143, 0.18557813273717505, 0.22164060015755782, 0.15462741003056713, 0.13272843072831708, 0.11538281897995617, 0.11990836889096312, 0.14671885847421673, 0.13877901337013232, 0.17931239516062125, 0.19323739402019813, 0.19193189407460887, 0.18231656048245437, 0.18573470836581318, 0.1824232836063927, 0.185067055601026, 0.18929476946295676, 0.20338447614724564, 0.05274629632345673, 0.04531645513002913, 0.043770204467097895, 0.05514489702886072, 0.04700567954201618, 0.045947543228212595, 0.05712587602821384, 0.048438591916631024, 0.044286208420229234]}, "mutation_prompt": null}
{"id": "2f4a73a9-4bdc-4b46-97ea-898119b85890", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.learning_rate = 0.5  # Adaptive learning rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.learning_rate, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with adaptive learning rate", "configspace": "", "generation": 3, "fitness": 0.08299791613691239, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.15141132746431718, 0.17124936245743194, 0.15010819028274913, 0.1250005429240868, 0.16714393336165867, 0.22921665692945947, 0.1536634218880929, 0.15487105498942288, 0.1442669486488598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04926647587938171, 0.04436911226585394, 0.03377830708620255, 0.04424604923272568, 0.0528007465917959, 0.041139540500804817, 0.04291708330268451, 0.03570003527083032, 0.049061493281741475, 0.032005527261311006, 0.022971748942320125, 0.03076634794058497, 0.046719965749060455, 0.02227509354581092, 0.030960798705318315, 0.028548935132611253, 0.026118972121775497, 0.028484155095257813, 0.1582629849547038, 0.07970458935755886, 0.06805743953619714, 0.07793373491668132, 0.10778658935712826, 0.06561912050515673, 0.08535254493931499, 0.07593417256525248, 0.07165815405672438, 0.04853566475173343, 0.06712844648852423, 0.07724829705325298, 0.06087482518072196, 0.061346435380904896, 0.06587444520889696, 0.061872600539795486, 0.031119692683451605, 0.03229347992851328, 0.11106020249755055, 0.1256584687721921, 0.09652324290341907, 0.08842376277587172, 0.10566856519763501, 0.11005603645544948, 0.11648611465668379, 0.11170270876853994, 0.131570508997628, 0.0007569523439102666, 0.009711758404537973, 0.0019797253280218197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019588535422593867, 0.01580332069089163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009672396237201841, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008677469351116462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06479877260428146, 0.04771088334787599, 0.07299217104750555, 0.018397147446096662, 0.005194648878895758, 0.028426502249017216, 0.05215377223605955, 0.03958030188878581, 0.040778306987299784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21213588116875037, 0.1737801723898319, 0.17548206741636097, 0.14528938276402426, 0.16990425082800353, 0.16273472336100026, 0.17792514025463801, 0.18008935482648503, 0.17642875466398322, 0.05951762847372377, 0.028057281857331473, 0.035046000912300035, 0.039549887626711855, 0.038421351903517476, 0.036226903320015436, 0.048510890290094144, 0.03937104506711964, 0.040144511843016706, 0.12960150125539127, 0.1273178073477309, 0.14999898781221332, 0.12859487395607738, 0.12802447753915913, 0.13539375195900993, 0.15391987556238473, 0.138999050672044, 0.14553050334638507, 0.13588506593154503, 0.1487500329097451, 0.19202344366929902, 0.15991716945525258, 0.14640600609811905, 0.1662877680033673, 0.1409853591851441, 0.1640733557291253, 0.14348691835963567, 0.08131240362361991, 0.09161032135097069, 0.12336808717572745, 0.11291152684462702, 0.10418515827939423, 0.10688054517215206, 0.09044661660067099, 0.11512432526663996, 0.10099243094739163, 0.14977809640286122, 0.15407344656686406, 0.15303897743993733, 0.1669863361980508, 0.1597044317938222, 0.14692320456099772, 0.16156441365272, 0.15458258485153986, 0.1539081181064046, 0.10780069671425085, 0.135577379817731, 0.1376036182943421, 0.11848364079168461, 0.07656499782067872, 0.14349135812427738, 0.15088735205356296, 0.13308572247354622, 0.11076064768706306, 0.17534326925322707, 0.14428765650425934, 0.14752302363189707, 0.15063081367706344, 0.1912290139720615, 0.13227773073807236, 0.16275136496572484, 0.13366811426400493, 0.2537628495781661, 0.1223136631777132, 0.20490887250093592, 0.13176710604002528, 0.15219528849807795, 0.17763500391971065, 0.18012352027182044, 0.12779472229494027, 0.19833578361782567, 0.1609673650104806, 0.1760505067505308, 0.18444400748042222, 0.19159400227272938, 0.17716607229766146, 0.1809862650456564, 0.18196388991607526, 0.18243075788791352, 0.19268402566417786, 0.1969018377914119, 0.05143151691183134, 0.042624848008636196, 0.041769064047558424, 0.05038495318346503, 0.0519919310038951, 0.05844496579068781, 0.050250953287869216, 0.0504748855228323, 0.059245304677926436]}, "mutation_prompt": null}
{"id": "900cc052-d4b5-445f-8dee-a75f042a81ed", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.1  # New parameter to control covariance update rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + 0.1 * np.random.normal(0, 1.0, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n            self.covariance = (1 - self.covariance_update_rate) * self.covariance + self.covariance_update_rate * new_covariance\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update", "configspace": "", "generation": 4, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "719bd39f-8b9b-4caa-8fa5-b48a5623001a", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_decay_rate = 0.99  # Decay rate for covariance\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0 / np.sqrt(self.covariance_decay_rate), size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n            self.covariance = self.covariance * self.covariance_decay_rate + new_covariance  # Update covariance\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Refines the Crowd-Sourced Metaheuristic Algorithm using Evolution Strategies and Genetic Drift.", "configspace": "", "generation": 5, "fitness": 0.08844239016259746, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.16843961701210775, 0.16531328118463606, 0.14606481045399, 0.16310561554573433, 0.14430999874555406, 0.18687074546838056, 0.17101027364744736, 0.16329412706051694, 0.13762677730749384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03933271196536425, 0.045422412615169216, 0.03120691979590251, 0.04788260823644286, 0.044571991241419306, 0.037407226977660524, 0.048324371248386844, 0.04247135029469895, 0.033695007223069284, 0.03922878481357206, 0.03411502118065568, 0.02832236042984515, 0.033061823829655945, 0.023892999734137277, 0.02928200682675164, 0.02664633145615314, 0.021834050780131786, 0.03847453363274711, 0.1592375802853805, 0.10505189693571826, 0.08944515464200653, 0.10795287762860772, 0.1450900251974625, 0.0953169475941178, 0.07653911263274948, 0.10125131646130225, 0.1106105438803866, 0.09395596721221977, 0.0593814396989677, 0.061595050135444085, 0.08976092404941849, 0.0895820052431856, 0.05823889332466481, 0.07874902238145587, 0.06780494512994739, 0.12294960245793485, 0.13267815279259976, 0.11634585534189879, 0.1237040158771493, 0.10010735214779487, 0.11624481908828643, 0.10930896247583621, 0.09548793270871503, 0.10422900543889724, 0.10276428106896529, 0.0009145858493136982, 0.038217805448602093, 0.01348552534271441, 9.999999999998899e-05, 0.011993110484182057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0052378075143116876, 0.013657046876808132, 0.006873755598709841, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015348148584834798, 9.999999999998899e-05, 9.999999999998899e-05, 0.03322708729593393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04968810743747021, 9.999999999998899e-05, 0.03444463256743491, 0.04464743677558036, 0.03956545071279938, 0.06277387496681952, 0.06700584935566023, 0.038817263936530066, 0.045599044095906205, 0.06368433751319402, 0.08675180028708274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013333911023527545, 9.999999999998899e-05, 9.999999999998899e-05, 0.20176003201926473, 0.20210585149556415, 0.18682862606656114, 0.18968501390772852, 0.1756263107490138, 0.1894039713512472, 0.1715507365668706, 0.2141814441018398, 0.18117727123548244, 0.04195031986137432, 0.05242260851365721, 0.034506076025506593, 0.04830433036388182, 0.03890427702569632, 0.04889492395883155, 0.0562353473780679, 0.04417233805910714, 0.05923893484049825, 0.152402523645208, 0.12775911839151455, 0.1640343496091511, 0.14365840330584922, 0.1429723676900112, 0.16014228619562687, 0.157004457307785, 0.15144723424816398, 0.1340250541005047, 0.1553640326935838, 0.1394494573173366, 0.1941472945627264, 0.1608988302241181, 0.16227611528207087, 0.16120411650637745, 0.17439497975211382, 0.1606683208730767, 0.15909039733492614, 0.09181058272694753, 0.09944565192420907, 0.1238861231575138, 0.10080725241488964, 0.11101007359742798, 0.10550187070122996, 0.11189293276983758, 0.0922069798212557, 0.09282583063629823, 0.1681696353853035, 0.15640827048238515, 0.1531301722826267, 0.15627125680797127, 0.1464413544281068, 0.14041053806843973, 0.16197927863519257, 0.16822411295036743, 0.14115244147730477, 0.12373555458933605, 0.1598037744092521, 0.10959923129780658, 0.12190738826476644, 0.13063127424796817, 0.13849003197983745, 0.14522042778604904, 0.15261730191679612, 0.13850176060752384, 0.1910977708485604, 0.13784597350256866, 0.1926442681355034, 0.13991398826469126, 0.1763271813806141, 0.1514905441110317, 0.21225248240543304, 0.1646311236433885, 0.1786794830970977, 0.1168739583239563, 0.1726442160502809, 0.18560016083480269, 0.1716400098212716, 0.21734487230678734, 0.15118277806311853, 0.1423195376451466, 0.14530689436985578, 0.15627012309294075, 0.18648334248818377, 0.18097424263720718, 0.1933923245842034, 0.2041753478473014, 0.18208622173106181, 0.18141170494608228, 0.18037101104455555, 0.18549030245322462, 0.19388559009377415, 0.06365119476343639, 0.0440524554144327, 0.05814008153125649, 0.042589629623017156, 0.04865949936430847, 0.05912441147151892, 0.043561086029629936, 0.04923918110400005, 0.04127697587696599]}, "mutation_prompt": null}
{"id": "5b3ab557-dbc5-4a09-b987-86c255fbd864", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "c026ce36-4f55-41ca-96c2-e9f5caaea287", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.learning_rate = 0.1  # Adaptive learning rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.learning_rate, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Learning Rate", "configspace": "", "generation": 7, "fitness": 0.056815862541030736, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.10480042502797748, 0.19980264933755032, 0.08853511130669756, 0.05275711899198998, 0.04835135668434942, 0.09661548383874419, 0.08342934098711607, 0.09189811494260625, 0.04792791639126659, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01968190348962673, 0.0029900571025475164, 0.04725234304942316, 0.006582654618797479, 0.06245932415031619, 0.014603116098603097, 0.0740717642426385, 0.025198616537376983, 0.007455077758437456, 0.009235977981108423, 0.0023860454099791095, 0.024816912357906062, 0.010180202677407046, 0.0056868923392877635, 0.013025181198156321, 0.013220641351092355, 9.999999999998899e-05, 0.045108305624468104, 0.0356477214564096, 0.03300233369025196, 0.013056498491973767, 0.03296965445168065, 0.05111426491937432, 0.02661349018425374, 0.03780494979753257, 0.05508389114819834, 0.029778842553383922, 9.999999999998899e-05, 0.0004293106540160796, 9.999999999998899e-05, 0.006488234847655039, 0.0941362109612115, 0.04662818691413828, 0.0441190622500679, 9.999999999998899e-05, 9.999999999998899e-05, 0.08983302851586883, 0.028410610016884497, 0.08989488464630302, 0.03273815308590078, 0.00864833564255496, 9.999999999998899e-05, 0.0003285884246486681, 0.004224810215105235, 0.005729927371007748, 9.999999999998899e-05, 0.010712775674214359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002886284231200409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08576624978864278, 0.029018012052742792, 0.04464000774453125, 0.0489139495446923, 0.011272885823698786, 0.021807517993403636, 0.031222332013944865, 0.02253303120323813, 0.017526242301212913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005163045296732505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1306543111199946, 0.10421047045432619, 0.12419239531372017, 0.08876287301788799, 0.09108856118314801, 0.155047388802262, 0.10213958726944039, 0.11753817246833675, 0.17336295412436742, 0.004772336647416386, 9.999999999998899e-05, 9.999999999998899e-05, 0.020475050835010555, 9.999999999998899e-05, 0.020316180906384984, 0.04381759677995867, 0.04901432299012065, 0.026100494731324364, 0.12914853078840338, 0.1185596609046008, 0.13428537622744408, 0.12958132505802256, 0.13367166611728043, 0.15127610842110717, 0.14257867223262055, 0.12075033310448158, 0.14606179670931763, 0.10613336498709924, 0.11150115119651982, 0.12455413195865261, 0.14353032974122126, 0.11935951739653505, 0.1610885841626276, 0.1229884007887243, 0.0972775792902052, 0.13244935159553495, 0.049873714250386336, 0.0629129065927394, 0.05721189913604596, 0.0728176953514903, 0.06148797535662287, 0.09556118304587546, 0.07135076141451246, 0.03207249563272674, 0.07794076759924795, 0.17540708444358055, 0.11726485168633771, 0.15501101094971326, 0.16721541715224797, 0.1255437995784292, 0.15277574218031442, 0.18430028550113864, 0.1534745539616975, 0.13054387101832776, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254693548151785, 9.999999999998899e-05, 0.00011832626663510482, 0.08958466555778344, 0.04888546047466624, 9.999999999998899e-05, 0.1348497283507628, 0.20082406124523433, 0.07366444559055052, 0.1074282147319513, 0.09914917550455482, 0.17142922691001183, 0.07690422756678872, 0.10539213695777838, 0.13019853431279715, 0.09548028081347126, 0.11113749682260898, 0.1041625176409714, 0.05100569621499529, 0.06791635518989547, 0.13862955313761982, 0.18002377379511036, 0.062201056630147855, 0.08441074525809633, 0.08223069567376884, 0.20177423892659585, 0.17918014902446744, 0.18247073864145225, 0.20842584389756869, 0.18700320803117432, 0.1804768153563895, 0.18094878452254648, 0.19228919166849956, 0.17888200390022502, 0.059003414465947035, 0.03894757699245188, 0.06339770127339928, 0.026191839342923906, 0.030321761773846267, 0.04745984790589686, 0.05163080234087625, 0.05651749086265101, 0.04453872089667088]}, "mutation_prompt": null}
{"id": "9a26198d-a764-4bdd-a4b8-0d8668aaf8a9", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.cdf = np.random.uniform(0.1, 0.9, size=self.dim)  # Initialize cumulative distribution function\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.cdf * (new_mean - self.search_space[0]) + (1 - self.cdf) * (self.search_space[1] - new_mean)  # Apply CDF\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Refine Crowd-Sourced Metaheuristic Algorithm using Evolution Strategies and Genetic Drift.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('Some entries in x0 lay outside the specified bounds').", "error": "ValueError('Some entries in x0 lay outside the specified bounds')", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "75fc27d5-1e99-48b8-8326-e008b53f0dcd", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "0ddba6ab-8766-4209-b961-c6a82a4315ab", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nfrom deap import base, creator, tools, algorithms\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform hybrid optimization using Differential Evolution and Genetic Algorithm\n        creator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\n        creator.create(\"Individual\", np.ndarray, fitness=creator.FitnessMin)\n        toolbox = base.Toolbox()\n        toolbox.register(\"attr_float\", np.random.uniform, self.search_space[0], self.search_space[1])\n        toolbox.register(\"individual\", tools.initRepeat, creator.Individual, toolbox.attr_float, self.dim)\n        toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n        toolbox.register(\"evaluate\", func)\n        toolbox.register(\"mate\", tools.cxSimulatedBinaryBounded, low=self.search_space[0], up=self.search_space[1])\n        toolbox.register(\"mutate\", tools.mutGaussian, mu=self.mean, sigma=0.1)\n        toolbox.register(\"select\", tools.selTournament, tournsize=3)\n\n        pop = toolbox.population(n=self.dim)\n        hof = tools.HallOfFame(1)\n        stats = tools.Statistics(lambda ind: ind.fitness.values)\n        stats.register(\"avg\", np.mean)\n        stats.register(\"std\", np.std)\n\n        for _ in range(10):  # Perform 10 generations\n            offspring = algorithms.varAnd(pop, toolbox, cxpb=0.5, mutpb=0.1)\n            pop = toolbox.select(offspring, k=self.dim)\n            hof.update(pop)\n            record = stats.compile(pop)\n            print(record)\n\n        # Perform final optimization using Differential Evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Refines CrowdSourcedMetaheuristic by incorporating a hybrid approach with Differential Evolution and Genetic Algorithm.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'deap'\").", "error": "ModuleNotFoundError(\"No module named 'deap'\")", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "3c7a7e2d-f8d7-4aca-b137-ebcce8336c4e", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.learning_rate = 0.1  # Adaptive learning rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.learning_rate, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Learning Rate", "configspace": "", "generation": 11, "fitness": 0.056815862541030736, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.10480042502797748, 0.19980264933755032, 0.08853511130669756, 0.05275711899198998, 0.04835135668434942, 0.09661548383874419, 0.08342934098711607, 0.09189811494260625, 0.04792791639126659, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01968190348962673, 0.0029900571025475164, 0.04725234304942316, 0.006582654618797479, 0.06245932415031619, 0.014603116098603097, 0.0740717642426385, 0.025198616537376983, 0.007455077758437456, 0.009235977981108423, 0.0023860454099791095, 0.024816912357906062, 0.010180202677407046, 0.0056868923392877635, 0.013025181198156321, 0.013220641351092355, 9.999999999998899e-05, 0.045108305624468104, 0.0356477214564096, 0.03300233369025196, 0.013056498491973767, 0.03296965445168065, 0.05111426491937432, 0.02661349018425374, 0.03780494979753257, 0.05508389114819834, 0.029778842553383922, 9.999999999998899e-05, 0.0004293106540160796, 9.999999999998899e-05, 0.006488234847655039, 0.0941362109612115, 0.04662818691413828, 0.0441190622500679, 9.999999999998899e-05, 9.999999999998899e-05, 0.08983302851586883, 0.028410610016884497, 0.08989488464630302, 0.03273815308590078, 0.00864833564255496, 9.999999999998899e-05, 0.0003285884246486681, 0.004224810215105235, 0.005729927371007748, 9.999999999998899e-05, 0.010712775674214359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002886284231200409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08576624978864278, 0.029018012052742792, 0.04464000774453125, 0.0489139495446923, 0.011272885823698786, 0.021807517993403636, 0.031222332013944865, 0.02253303120323813, 0.017526242301212913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005163045296732505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1306543111199946, 0.10421047045432619, 0.12419239531372017, 0.08876287301788799, 0.09108856118314801, 0.155047388802262, 0.10213958726944039, 0.11753817246833675, 0.17336295412436742, 0.004772336647416386, 9.999999999998899e-05, 9.999999999998899e-05, 0.020475050835010555, 9.999999999998899e-05, 0.020316180906384984, 0.04381759677995867, 0.04901432299012065, 0.026100494731324364, 0.12914853078840338, 0.1185596609046008, 0.13428537622744408, 0.12958132505802256, 0.13367166611728043, 0.15127610842110717, 0.14257867223262055, 0.12075033310448158, 0.14606179670931763, 0.10613336498709924, 0.11150115119651982, 0.12455413195865261, 0.14353032974122126, 0.11935951739653505, 0.1610885841626276, 0.1229884007887243, 0.0972775792902052, 0.13244935159553495, 0.049873714250386336, 0.0629129065927394, 0.05721189913604596, 0.0728176953514903, 0.06148797535662287, 0.09556118304587546, 0.07135076141451246, 0.03207249563272674, 0.07794076759924795, 0.17540708444358055, 0.11726485168633771, 0.15501101094971326, 0.16721541715224797, 0.1255437995784292, 0.15277574218031442, 0.18430028550113864, 0.1534745539616975, 0.13054387101832776, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254693548151785, 9.999999999998899e-05, 0.00011832626663510482, 0.08958466555778344, 0.04888546047466624, 9.999999999998899e-05, 0.1348497283507628, 0.20082406124523433, 0.07366444559055052, 0.1074282147319513, 0.09914917550455482, 0.17142922691001183, 0.07690422756678872, 0.10539213695777838, 0.13019853431279715, 0.09548028081347126, 0.11113749682260898, 0.1041625176409714, 0.05100569621499529, 0.06791635518989547, 0.13862955313761982, 0.18002377379511036, 0.062201056630147855, 0.08441074525809633, 0.08223069567376884, 0.20177423892659585, 0.17918014902446744, 0.18247073864145225, 0.20842584389756869, 0.18700320803117432, 0.1804768153563895, 0.18094878452254648, 0.19228919166849956, 0.17888200390022502, 0.059003414465947035, 0.03894757699245188, 0.06339770127339928, 0.026191839342923906, 0.030321761773846267, 0.04745984790589686, 0.05163080234087625, 0.05651749086265101, 0.04453872089667088]}, "mutation_prompt": null}
{"id": "ebd3ca5a-73da-46b1-8ef6-eed31179b4f6", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_search_space = np.array([0.1, 0.9])  # Initialize adaptive search space\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Update adaptive search space based on function evaluation\n            if f_new < np.min(func(self.search_space)):\n                self.adaptive_search_space[0] = max(0.01, self.adaptive_search_space[0] - 0.1)\n            elif f_new > np.max(func(self.search_space)):\n                self.adaptive_search_space[1] = min(0.99, self.adaptive_search_space[1] + 0.1)\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.adaptive_search_space[0], self.adaptive_search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Search Space", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('Some entries in x0 lay outside the specified bounds').", "error": "ValueError('Some entries in x0 lay outside the specified bounds')", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "b0a8080a-cf02-4b3b-a208-97ac6f332741", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "c331a7d5-c861-481c-980a-18e4213962bc", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.evolution_strategy_std_dev = 0.1  # Evolution strategy standard deviation\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.evolution_strategy_std_dev, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Differential Evolution", "configspace": "", "generation": 14, "fitness": 0.056815862541030736, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.10480042502797748, 0.19980264933755032, 0.08853511130669756, 0.05275711899198998, 0.04835135668434942, 0.09661548383874419, 0.08342934098711607, 0.09189811494260625, 0.04792791639126659, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01968190348962673, 0.0029900571025475164, 0.04725234304942316, 0.006582654618797479, 0.06245932415031619, 0.014603116098603097, 0.0740717642426385, 0.025198616537376983, 0.007455077758437456, 0.009235977981108423, 0.0023860454099791095, 0.024816912357906062, 0.010180202677407046, 0.0056868923392877635, 0.013025181198156321, 0.013220641351092355, 9.999999999998899e-05, 0.045108305624468104, 0.0356477214564096, 0.03300233369025196, 0.013056498491973767, 0.03296965445168065, 0.05111426491937432, 0.02661349018425374, 0.03780494979753257, 0.05508389114819834, 0.029778842553383922, 9.999999999998899e-05, 0.0004293106540160796, 9.999999999998899e-05, 0.006488234847655039, 0.0941362109612115, 0.04662818691413828, 0.0441190622500679, 9.999999999998899e-05, 9.999999999998899e-05, 0.08983302851586883, 0.028410610016884497, 0.08989488464630302, 0.03273815308590078, 0.00864833564255496, 9.999999999998899e-05, 0.0003285884246486681, 0.004224810215105235, 0.005729927371007748, 9.999999999998899e-05, 0.010712775674214359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002886284231200409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08576624978864278, 0.029018012052742792, 0.04464000774453125, 0.0489139495446923, 0.011272885823698786, 0.021807517993403636, 0.031222332013944865, 0.02253303120323813, 0.017526242301212913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005163045296732505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1306543111199946, 0.10421047045432619, 0.12419239531372017, 0.08876287301788799, 0.09108856118314801, 0.155047388802262, 0.10213958726944039, 0.11753817246833675, 0.17336295412436742, 0.004772336647416386, 9.999999999998899e-05, 9.999999999998899e-05, 0.020475050835010555, 9.999999999998899e-05, 0.020316180906384984, 0.04381759677995867, 0.04901432299012065, 0.026100494731324364, 0.12914853078840338, 0.1185596609046008, 0.13428537622744408, 0.12958132505802256, 0.13367166611728043, 0.15127610842110717, 0.14257867223262055, 0.12075033310448158, 0.14606179670931763, 0.10613336498709924, 0.11150115119651982, 0.12455413195865261, 0.14353032974122126, 0.11935951739653505, 0.1610885841626276, 0.1229884007887243, 0.0972775792902052, 0.13244935159553495, 0.049873714250386336, 0.0629129065927394, 0.05721189913604596, 0.0728176953514903, 0.06148797535662287, 0.09556118304587546, 0.07135076141451246, 0.03207249563272674, 0.07794076759924795, 0.17540708444358055, 0.11726485168633771, 0.15501101094971326, 0.16721541715224797, 0.1255437995784292, 0.15277574218031442, 0.18430028550113864, 0.1534745539616975, 0.13054387101832776, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254693548151785, 9.999999999998899e-05, 0.00011832626663510482, 0.08958466555778344, 0.04888546047466624, 9.999999999998899e-05, 0.1348497283507628, 0.20082406124523433, 0.07366444559055052, 0.1074282147319513, 0.09914917550455482, 0.17142922691001183, 0.07690422756678872, 0.10539213695777838, 0.13019853431279715, 0.09548028081347126, 0.11113749682260898, 0.1041625176409714, 0.05100569621499529, 0.06791635518989547, 0.13862955313761982, 0.18002377379511036, 0.062201056630147855, 0.08441074525809633, 0.08223069567376884, 0.20177423892659585, 0.17918014902446744, 0.18247073864145225, 0.20842584389756869, 0.18700320803117432, 0.1804768153563895, 0.18094878452254648, 0.19228919166849956, 0.17888200390022502, 0.059003414465947035, 0.03894757699245188, 0.06339770127339928, 0.026191839342923906, 0.030321761773846267, 0.04745984790589686, 0.05163080234087625, 0.05651749086265101, 0.04453872089667088]}, "mutation_prompt": null}
{"id": "7e8c6f39-c731-47dc-8152-5b1887ad2186", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.population_size = int(np.ceil(self.budget * 0.2))  # Increase population size\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 0.1, size=self.dim)  # Reduce noise\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.01, size=(self.dim, self.dim))  # Reduce noise\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Store population\n            self.population.append((self.mean, f_new))\n\n            # Check for convergence\n            if len(self.population) >= self.population_size:\n                # Perform final optimization using differential evolution\n                bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n                res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n                # Update mean and covariance\n                self.mean = res.x\n                self.covariance = np.eye(self.dim) * 1.0\n                # Remove old population\n                self.population = self.population[1:]\n\n        # Print current best solution\n        print(f\"Current best solution: x = {self.mean}, f(x) = {func(self.mean)}\")\n\n    def get_best_solution(self):\n        # Return best solution from population\n        return min(self.population, key=lambda x: x[1])\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\nprint(\"Best solution:\", crowd_sourced.get_best_solution())\n\n# Example usage with multiple dimensions\ndef func(x):\n    return x[0]**2 + x[1]**2 + x[2]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=3)\ncrowd_sourced(func)\nprint(\"Best solution:\", crowd_sourced.get_best_solution())", "name": "CrowdSourcedMetaheuristic", "description": "Refine the Crowd-Sourced Metaheuristic Algorithm using Evolution Strategies and Genetic Drift.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'CrowdSourcedMetaheuristic' object has no attribute 'population'\").", "error": "AttributeError(\"'CrowdSourcedMetaheuristic' object has no attribute 'population'\")", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "4e6c5aad-b3da-457c-8d7f-4e3db84108cb", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.lr = 0.1  # Adaptive learning rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.lr, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Learning Rate", "configspace": "", "generation": 16, "fitness": 0.056815862541030736, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.10480042502797748, 0.19980264933755032, 0.08853511130669756, 0.05275711899198998, 0.04835135668434942, 0.09661548383874419, 0.08342934098711607, 0.09189811494260625, 0.04792791639126659, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01968190348962673, 0.0029900571025475164, 0.04725234304942316, 0.006582654618797479, 0.06245932415031619, 0.014603116098603097, 0.0740717642426385, 0.025198616537376983, 0.007455077758437456, 0.009235977981108423, 0.0023860454099791095, 0.024816912357906062, 0.010180202677407046, 0.0056868923392877635, 0.013025181198156321, 0.013220641351092355, 9.999999999998899e-05, 0.045108305624468104, 0.0356477214564096, 0.03300233369025196, 0.013056498491973767, 0.03296965445168065, 0.05111426491937432, 0.02661349018425374, 0.03780494979753257, 0.05508389114819834, 0.029778842553383922, 9.999999999998899e-05, 0.0004293106540160796, 9.999999999998899e-05, 0.006488234847655039, 0.0941362109612115, 0.04662818691413828, 0.0441190622500679, 9.999999999998899e-05, 9.999999999998899e-05, 0.08983302851586883, 0.028410610016884497, 0.08989488464630302, 0.03273815308590078, 0.00864833564255496, 9.999999999998899e-05, 0.0003285884246486681, 0.004224810215105235, 0.005729927371007748, 9.999999999998899e-05, 0.010712775674214359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002886284231200409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08576624978864278, 0.029018012052742792, 0.04464000774453125, 0.0489139495446923, 0.011272885823698786, 0.021807517993403636, 0.031222332013944865, 0.02253303120323813, 0.017526242301212913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005163045296732505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1306543111199946, 0.10421047045432619, 0.12419239531372017, 0.08876287301788799, 0.09108856118314801, 0.155047388802262, 0.10213958726944039, 0.11753817246833675, 0.17336295412436742, 0.004772336647416386, 9.999999999998899e-05, 9.999999999998899e-05, 0.020475050835010555, 9.999999999998899e-05, 0.020316180906384984, 0.04381759677995867, 0.04901432299012065, 0.026100494731324364, 0.12914853078840338, 0.1185596609046008, 0.13428537622744408, 0.12958132505802256, 0.13367166611728043, 0.15127610842110717, 0.14257867223262055, 0.12075033310448158, 0.14606179670931763, 0.10613336498709924, 0.11150115119651982, 0.12455413195865261, 0.14353032974122126, 0.11935951739653505, 0.1610885841626276, 0.1229884007887243, 0.0972775792902052, 0.13244935159553495, 0.049873714250386336, 0.0629129065927394, 0.05721189913604596, 0.0728176953514903, 0.06148797535662287, 0.09556118304587546, 0.07135076141451246, 0.03207249563272674, 0.07794076759924795, 0.17540708444358055, 0.11726485168633771, 0.15501101094971326, 0.16721541715224797, 0.1255437995784292, 0.15277574218031442, 0.18430028550113864, 0.1534745539616975, 0.13054387101832776, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254693548151785, 9.999999999998899e-05, 0.00011832626663510482, 0.08958466555778344, 0.04888546047466624, 9.999999999998899e-05, 0.1348497283507628, 0.20082406124523433, 0.07366444559055052, 0.1074282147319513, 0.09914917550455482, 0.17142922691001183, 0.07690422756678872, 0.10539213695777838, 0.13019853431279715, 0.09548028081347126, 0.11113749682260898, 0.1041625176409714, 0.05100569621499529, 0.06791635518989547, 0.13862955313761982, 0.18002377379511036, 0.062201056630147855, 0.08441074525809633, 0.08223069567376884, 0.20177423892659585, 0.17918014902446744, 0.18247073864145225, 0.20842584389756869, 0.18700320803117432, 0.1804768153563895, 0.18094878452254648, 0.19228919166849956, 0.17888200390022502, 0.059003414465947035, 0.03894757699245188, 0.06339770127339928, 0.026191839342923906, 0.030321761773846267, 0.04745984790589686, 0.05163080234087625, 0.05651749086265101, 0.04453872089667088]}, "mutation_prompt": null}
{"id": "02a9faeb-3f94-4317-929c-193d5429bca5", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.differential_evolution_params = {'maxiter': 100, 'x0': self.mean,'seed': 42}\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        res = differential_evolution(func, bounds=[(self.search_space[0], self.search_space[1]) for _ in range(self.dim)], **self.differential_evolution_params)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Differential Evolution", "configspace": "", "generation": 17, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "b4ead57f-e3c6-43b1-b198-a74f863a1004", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_step_size = 0.1  # Adaptive step size for evolution strategy\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + self.adaptive_step_size * np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + self.adaptive_step_size * np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Covariance Update", "configspace": "", "generation": 18, "fitness": 0.056815862541030736, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.10480042502797748, 0.19980264933755032, 0.08853511130669756, 0.05275711899198998, 0.04835135668434942, 0.09661548383874419, 0.08342934098711607, 0.09189811494260625, 0.04792791639126659, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01968190348962673, 0.0029900571025475164, 0.04725234304942316, 0.006582654618797479, 0.06245932415031619, 0.014603116098603097, 0.0740717642426385, 0.025198616537376983, 0.007455077758437456, 0.009235977981108423, 0.0023860454099791095, 0.024816912357906062, 0.010180202677407046, 0.0056868923392877635, 0.013025181198156321, 0.013220641351092355, 9.999999999998899e-05, 0.045108305624468104, 0.0356477214564096, 0.03300233369025196, 0.013056498491973767, 0.03296965445168065, 0.05111426491937432, 0.02661349018425374, 0.03780494979753257, 0.05508389114819834, 0.029778842553383922, 9.999999999998899e-05, 0.0004293106540160796, 9.999999999998899e-05, 0.006488234847655039, 0.0941362109612115, 0.04662818691413828, 0.0441190622500679, 9.999999999998899e-05, 9.999999999998899e-05, 0.08983302851586883, 0.028410610016884497, 0.08989488464630302, 0.03273815308590078, 0.00864833564255496, 9.999999999998899e-05, 0.0003285884246486681, 0.004224810215105235, 0.005729927371007748, 9.999999999998899e-05, 0.010712775674214359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002886284231200409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08576624978864278, 0.029018012052742792, 0.04464000774453125, 0.0489139495446923, 0.011272885823698786, 0.021807517993403636, 0.031222332013944865, 0.02253303120323813, 0.017526242301212913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005163045296732505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1306543111199946, 0.10421047045432619, 0.12419239531372017, 0.08876287301788799, 0.09108856118314801, 0.155047388802262, 0.10213958726944039, 0.11753817246833675, 0.17336295412436742, 0.004772336647416386, 9.999999999998899e-05, 9.999999999998899e-05, 0.020475050835010555, 9.999999999998899e-05, 0.020316180906384984, 0.04381759677995867, 0.04901432299012065, 0.026100494731324364, 0.12914853078840338, 0.1185596609046008, 0.13428537622744408, 0.12958132505802256, 0.13367166611728043, 0.15127610842110717, 0.14257867223262055, 0.12075033310448158, 0.14606179670931763, 0.10613336498709924, 0.11150115119651982, 0.12455413195865261, 0.14353032974122126, 0.11935951739653505, 0.1610885841626276, 0.1229884007887243, 0.0972775792902052, 0.13244935159553495, 0.049873714250386336, 0.0629129065927394, 0.05721189913604596, 0.0728176953514903, 0.06148797535662287, 0.09556118304587546, 0.07135076141451246, 0.03207249563272674, 0.07794076759924795, 0.17540708444358055, 0.11726485168633771, 0.15501101094971326, 0.16721541715224797, 0.1255437995784292, 0.15277574218031442, 0.18430028550113864, 0.1534745539616975, 0.13054387101832776, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254693548151785, 9.999999999998899e-05, 0.00011832626663510482, 0.08958466555778344, 0.04888546047466624, 9.999999999998899e-05, 0.1348497283507628, 0.20082406124523433, 0.07366444559055052, 0.1074282147319513, 0.09914917550455482, 0.17142922691001183, 0.07690422756678872, 0.10539213695777838, 0.13019853431279715, 0.09548028081347126, 0.11113749682260898, 0.1041625176409714, 0.05100569621499529, 0.06791635518989547, 0.13862955313761982, 0.18002377379511036, 0.062201056630147855, 0.08441074525809633, 0.08223069567376884, 0.20177423892659585, 0.17918014902446744, 0.18247073864145225, 0.20842584389756869, 0.18700320803117432, 0.1804768153563895, 0.18094878452254648, 0.19228919166849956, 0.17888200390022502, 0.059003414465947035, 0.03894757699245188, 0.06339770127339928, 0.026191839342923906, 0.030321761773846267, 0.04745984790589686, 0.05163080234087625, 0.05651749086265101, 0.04453872089667088]}, "mutation_prompt": null}
{"id": "300b68f5-2e24-4fa7-91db-088bf6bb2bab", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.mutation_rate = 0.1  # Adaptive mutation rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n            # Adaptive mutation rate\n            if f_new < np.min(func(self.search_space)):\n                self.mutation_rate *= 0.9\n                if self.mutation_rate < 0.01:\n                    self.mutation_rate = 0.01\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Mutation Rate", "configspace": "", "generation": 19, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "81978d96-6dfc-4a23-8d40-65684904d7c0", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.diversity_threshold = 0.5  # Threshold for maintaining diversity\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Maintain diversity by perturbing the mean\n            if np.random.rand() < self.diversity_threshold:\n                self.mean += np.random.uniform(-0.1, 0.1, size=self.dim)\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Enhanced Diversity Maintenance", "configspace": "", "generation": 20, "fitness": 0.08720502722829035, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.19196396239677793, 0.15623807606271145, 0.15302070611789698, 0.17528242105015301, 0.15774871217197617, 0.18822336497448922, 0.16992273026260285, 0.18753798151444734, 0.15525272144917068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049926770167772916, 0.030191584339320565, 0.0371548837939395, 0.04984930288954714, 0.04239156796715038, 0.03276431318117523, 0.04472187563339469, 0.04147178556906328, 0.03891517379664655, 0.03631476685752877, 0.025515629578552357, 0.020697336574716285, 0.025790617630912838, 0.08189891752777823, 0.025989836831757707, 0.024388910453500667, 0.02782860164697598, 0.020154114716340876, 0.11940752446111402, 0.1333453866386659, 0.0962479722075521, 0.11955284005489952, 0.11743768519647602, 0.11723653482535046, 0.11698713203100974, 0.08978778189776093, 0.10010458017834878, 0.048118690588061286, 0.0598548469913579, 0.07974165148201551, 0.0646542881409019, 0.08731337651384674, 0.06838672842634752, 0.048802200983370514, 0.0958144307676877, 0.05857535570974559, 0.1572897354505579, 0.11877829506975035, 0.1196269109050414, 0.1149554527809602, 0.11712071456897744, 0.12092740632579657, 0.10106162349604475, 0.11115043193865148, 0.120845719147327, 0.0001033789597409962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011546478576963781, 0.028552273942353712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019828941516665255, 0.002353227302002936, 9.999999999998899e-05, 0.0074214604754681, 0.015741685554091944, 0.027870788337351016, 0.006648922604388985, 0.005792354959518353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04741596416610827, 0.07819830323363441, 0.07123020514713096, 0.0808204784033626, 0.1251736656508361, 0.026217365128006875, 0.04954434950136144, 0.028913957881399943, 0.02746071753512791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004868335133676682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1815755370400256, 0.20046903891421852, 0.19087677774415857, 0.17893236170846416, 0.1888047005378639, 0.17737546838485796, 0.18471346665768684, 0.18544509948904608, 0.17519441569052308, 0.049211035313987295, 0.028290560483663962, 0.041368895071987044, 0.04246764796549396, 0.03563306052903792, 0.043683914440995064, 0.04732118667085228, 0.03991178631659964, 0.03850446100601912, 0.12292479490846486, 0.13007278348299756, 0.12321286900535633, 0.13795036662508375, 0.1629098487731786, 0.14566560985680022, 0.16979982866720056, 0.15289182327480755, 0.16183112688894785, 0.16069726353153835, 0.16065879897238777, 0.1687966595233673, 0.16619344504944056, 0.16538378693784306, 0.1710209627017737, 0.16402105248414334, 0.1620230388585021, 0.15061486404020819, 0.10696446158956174, 0.10100641973543767, 0.1170410557855639, 0.10987737538589282, 0.10586159391805228, 0.10424432274911288, 0.11526818422524643, 0.11019622219790548, 0.09309169229795478, 0.1565471462560052, 0.17087800464107272, 0.13882571476848748, 0.15378093668745407, 0.16794219052379555, 0.18190567263940882, 0.16900287280043125, 0.15421017650819124, 0.15640043629755696, 0.13456235031829478, 0.11997873347237509, 0.12654928839854107, 0.13795061668358288, 0.0963296383923189, 0.13725949611786403, 0.14356697868674273, 0.128412196951737, 0.1179987774023813, 0.15376584042037433, 0.14831277762407136, 0.14744713043042135, 0.1866158985920746, 0.2062338530625094, 0.14722887610898594, 0.17475532476123734, 0.15343255487761887, 0.1357142533727016, 0.1424300701624145, 0.14898610051677974, 0.20969123615313523, 0.15537823820349217, 0.1334555045644834, 0.1556341292522937, 0.1578185380936129, 0.13647290219043173, 0.12071954822205444, 0.18462432712843857, 0.19536368297129025, 0.19483313278775927, 0.1706554104157444, 0.1944348900652757, 0.18387097009823217, 0.186634011652009, 0.178496594936284, 0.1886905239574509, 0.0507066684327927, 0.04717871528244655, 0.04852672041945438, 0.048902725179812645, 0.057461775020921646, 0.046902962657688896, 0.04430914663041585, 0.045788758179188926, 0.04627242733021719]}, "mutation_prompt": null}
{"id": "6aa1bef8-6569-4b2f-9206-ce8c25937637", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.differential_evolution_params = {'x0': self.mean,'seed': 42,'method': 'DE/rand/1/bin'}  # Differential evolution parameters\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 0.1, size=self.dim)  # Increased noise in evolution strategy\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))  # Increased noise in genetic drift\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, **self.differential_evolution_params)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Differential Evolution.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"differential_evolution() got an unexpected keyword argument 'method'\").", "error": "TypeError(\"differential_evolution() got an unexpected keyword argument 'method'\")", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "a655ac4c-d869-4a17-85e2-f7df11721ef6", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_adaptation_rate = 0.1  # Adaptive covariance rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance with adaptive rate\n            self.mean = new_mean\n            self.covariance = (1 - self.covariance_adaptation_rate) * self.covariance + self.covariance_adaptation_rate * new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Covariance", "configspace": "", "generation": 22, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "78a029a9-cbac-4c3a-886f-4e11bde8226a", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "d7f5088c-305a-466b-b6ad-2f4cdfd19241", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.1  # Update covariance rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + self.covariance_update_rate * np.random.normal(0, 1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with improved Covariance Matrix Update", "configspace": "", "generation": 24, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "804fb122-1e52-49da-bdf5-7c0761cad1f2", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_covariance = False\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            if self.adaptive_covariance:\n                # Perform evolution strategy to update mean\n                new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n                new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n                # Perform genetic drift to update covariance\n                new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n                # Evaluate function at new mean\n                f_new = func(new_mean)\n\n                # Update mean and covariance\n                self.mean = new_mean\n                self.covariance = new_covariance\n\n                # Print current best solution\n                print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n            else:\n                # Perform evolution strategy to update mean\n                new_mean = self.mean + np.random.normal(0, 0.1, size=self.dim)\n                new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n                # Evaluate function at new mean\n                f_new = func(new_mean)\n\n                # Update mean\n                self.mean = new_mean\n\n                # Print current best solution\n                print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n\n# Refine the strategy by adding adaptive covariance matrix\nclass CrowdSourcedMetaheuristicRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_covariance = True\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            if self.adaptive_covariance:\n                # Perform evolution strategy to update mean\n                new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n                new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n                # Perform genetic drift to update covariance\n                new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n                # Evaluate function at new mean\n                f_new = func(new_mean)\n\n                # Update mean and covariance\n                self.mean = new_mean\n                self.covariance = new_covariance\n\n                # Print current best solution\n                print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n            else:\n                # Perform evolution strategy to update mean\n                new_mean = self.mean + np.random.normal(0, 0.1, size=self.dim)\n                new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n                # Evaluate function at new mean\n                f_new = func(new_mean)\n\n                # Update mean\n                self.mean = new_mean\n\n                # Print current best solution\n                print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced_refined = CrowdSourcedMetaheuristicRefined(budget=100, dim=2)\ncrowd_sourced_refined(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Covariance Matrix", "configspace": "", "generation": 25, "fitness": 0.056726988601337826, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1491106322756055, 0.11237432364252087, 0.06380416880989448, 0.061554408018035245, 0.07542855594754705, 0.09023017118464327, 0.04639742934855762, 0.05638784973721389, 0.060877237281029006, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012661398319106176, 0.04041326591328265, 0.016003164196166875, 0.073095014304142, 0.025547860998028082, 0.007553210362010621, 0.04189780907115315, 0.036046214362690066, 9.999999999998899e-05, 0.012105768049893828, 0.02954271985218071, 0.03134505896493045, 0.007199887367755009, 0.02404727655680039, 0.007391509687504572, 9.999999999998899e-05, 0.022702902269839287, 0.013809971204092109, 0.03694217095171226, 0.027744138255043627, 0.011323555687742348, 0.0845377805581784, 0.05330031576828642, 0.013703997647722455, 0.07729781013429837, 0.062223269338926857, 0.012262499067053234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10031934425709843, 0.06093711642617072, 0.018611891647748235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10133644018070387, 0.10062804814538462, 0.04136275151604041, 9.999999999998899e-05, 0.03159570584077631, 0.006125837319166161, 0.013906366923074676, 0.05528000661691024, 0.025347410374825796, 0.013605634923227083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026630595649536182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015590847901737481, 0.052222306531016116, 0.04000467903220328, 0.04010809019379502, 0.04781595126643301, 0.014169834876137433, 0.03627649401899291, 0.04475122198984627, 0.04137228653154201, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04972075229571493, 0.07553791057956527, 0.12678731464973603, 0.10228318453464302, 0.14317572646062549, 0.12434457924697762, 0.13830676553659504, 0.1327951701292288, 0.1321611980812173, 9.999999999998899e-05, 0.05652278830171342, 0.0016897008022040971, 0.0023567977311589328, 0.011244593974388817, 0.018733707406521694, 0.053700468966422554, 0.02914122350662507, 9.999999999998899e-05, 0.13597167316133296, 0.11322262313450815, 0.12468735828232291, 0.12017400055331129, 0.1640522705058658, 0.13851831459170694, 0.1343115641200684, 0.10852875204777157, 0.12711787375658823, 0.1496414464135276, 0.1509304375092474, 0.11716232854911579, 0.14353032974122126, 0.1745381045489608, 0.14444914016234967, 0.134079163330441, 0.1572680271013156, 0.13281564773840948, 0.09090029656141907, 0.08608766582884908, 0.05832756701953479, 0.08188025506845809, 0.1249965170409123, 0.08706137584700613, 0.0766347054310218, 0.11416216069690455, 0.08409088116797525, 0.14509488354547173, 0.16351669646136602, 0.12399820671604578, 0.16430993257071036, 0.14080819610363726, 0.12688695934178917, 0.19122850851583406, 0.13990697595766266, 0.12064428241156333, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019182070860280787, 0.1278412215813738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1192035701154367, 0.04734715017093549, 0.09141088197791891, 0.07098058622852499, 0.09539165311316777, 0.11141798803984915, 0.115603711069589, 0.10942826217215185, 0.1493228829726042, 0.1061319556512752, 0.0982955990018829, 0.05779281698455829, 0.17662839460359903, 0.024436080925200443, 0.09271285405648488, 0.08608352437356914, 0.08355104393002477, 0.025456689280188405, 0.07913102804751126, 0.09844593891918507, 0.2017796917353909, 0.1832747449143456, 0.17906828500377303, 0.17845498430140538, 0.18318841977615052, 0.1813331706916047, 0.1807984307914936, 0.17141231094453646, 0.1944747476734061, 0.052521774527144016, 0.0425619141788407, 0.03457593370340406, 0.029735099815150323, 0.06316613295889983, 0.048045275383331365, 0.061666470433759946, 0.046291408614737684, 0.030449491107020776]}, "mutation_prompt": null}
{"id": "546c11c0-0fcd-4b4a-b98b-b23afac2a562", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.hyperparameters = {\n            'evolution_strategy_std': 1.0,\n            'genetic_drift_covariance': 0.1,\n            'hybrid_evolution_ratio': 0.2\n        }\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.hyperparameters['evolution_strategy_std'], size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, self.hyperparameters['genetic_drift_covariance'], size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Hybrid differential evolution with evolution strategy and genetic drift\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42, tol=1e-6)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n\n# Refinement:\n# - Added hyperparameters to control evolution strategy and genetic drift\n# - Hybridized differential evolution with evolution strategy and genetic drift", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Hybrid Differential Evolution", "configspace": "", "generation": 26, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "6bd6bfe1-0b61-44ee-a19d-7cf03fe80f62", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_threshold = 0.1  # Threshold for covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Check for covariance saturation\n            if np.linalg.norm(new_covariance - self.covariance) < self.covariance_threshold:\n                new_covariance = np.eye(self.dim) * 1.0  # Reset covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with adaptive covariance matrix", "configspace": "", "generation": 27, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "03dd46d0-5dc7-4bde-a6f0-d8ecdef17cde", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_covariance = True  # Flag to enable adaptive covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            if self.adaptive_covariance:\n                new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n                self.covariance = self.covariance + 0.1 * (new_covariance - self.covariance)  # Update covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Covariance Matrix", "configspace": "", "generation": 28, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "d254c5bd-2cc8-4878-a521-8b9088c623b9", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.learning_rate = 0.1  # Adaptive learning rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0 / (self.learning_rate + 1), size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1 / (self.learning_rate + 1), size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with adaptive learning rate.", "configspace": "", "generation": 29, "fitness": 0.08676138789766663, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1631184000874033, 0.16111502215468132, 0.13198019592278432, 0.14565878909444496, 0.13862409270637321, 0.19149412578126446, 0.19972527711517163, 0.171521968345277, 0.1415228459419463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057002883659671766, 0.06139303220011971, 0.038268455010921576, 0.04039554051039618, 0.04791019184526302, 0.04216706001441195, 0.043787617949232804, 0.053230227075822034, 0.0275300879823821, 0.029866755161712888, 0.04100893902650826, 0.03813782108822017, 0.023094409289473483, 0.020876789193470024, 0.03820927402136509, 0.02505676652997446, 0.0282728469116712, 0.03613650982623584, 0.16344474233035178, 0.10633491786353311, 0.08983494818512805, 0.10939800993533011, 0.14816459020021155, 0.08913617173573907, 0.07653447818762527, 0.10459706313029749, 0.1065290120278225, 0.10733107717344159, 0.044932333528112545, 0.08230606797552975, 0.0755265868035756, 0.1092204265255281, 0.06628130176874114, 0.09054671387884572, 0.07759931794938713, 0.06825823704657119, 0.14008026889644043, 0.1014853826791896, 0.12513886042182332, 0.10850135826199514, 0.1351890556872375, 0.13189086384814797, 0.11069052078059138, 0.1079725740755153, 0.09426794517298132, 0.00012994940428912027, 0.004329957069143742, 9.999999999998899e-05, 0.009930038140266828, 0.022645128150460714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014186818250275235, 0.03631444469711387, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024138099014289982, 9.999999999998899e-05, 0.0011121147774758589, 0.0011986566491214434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056513041554682286, 0.061055208510342185, 0.061642704373280344, 0.049408734085683914, 0.05657434074794232, 0.027598888293764112, 0.046679955836081755, 0.033479049554768436, 0.08313256966335902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008793479295969853, 9.999999999998899e-05, 0.001811424113763449, 9.999999999998899e-05, 0.20032335361291542, 0.19072019777304028, 0.1644229568943314, 0.17924295300601767, 0.1790796814805934, 0.1981090329923476, 0.17660924382017162, 0.20802953829121784, 0.16907797078624065, 0.044785839346630385, 0.04196535025866199, 0.0320459494038714, 0.06108074770517069, 0.04219183141331684, 0.06052256104586118, 0.03677141149334384, 0.055302269323365016, 0.06092143551700302, 0.1233601352504633, 0.12359413661517737, 0.15389840614518435, 0.1286090663502233, 0.2045878944915197, 0.1563601492495056, 0.1413483267735559, 0.13686133368326425, 0.12276088324758638, 0.14864714102251642, 0.1442834758453002, 0.16112123132164147, 0.16095333835980907, 0.14886842329676653, 0.1492845447370168, 0.1670746354492596, 0.1693752077352345, 0.17411505340648803, 0.09150515613053722, 0.08362228781313874, 0.11947375719261366, 0.10734857679623966, 0.11353273423932408, 0.10173002052089863, 0.11040710892546923, 0.12050450586993355, 0.12004125876745964, 0.15792133269699882, 0.14164965215900538, 0.15884747660732135, 0.15771696705732352, 0.1623446581238015, 0.145934030986542, 0.16420402737233453, 0.1562174013360127, 0.1497369158335543, 0.12079359266574885, 0.13157307619324132, 0.13346222255561713, 0.12429057873825078, 0.12470332478060331, 0.13737852126942418, 0.14881222584515452, 0.1343263145428899, 0.13301049379846697, 0.15266002063443174, 0.1620353976453187, 0.15826545223153154, 0.17744457674028036, 0.16578977143069062, 0.14201059653911785, 0.1540060350656537, 0.16109300086317213, 0.19461521239375157, 0.1339117520026768, 0.12782697174872049, 0.13994090627076783, 0.152566889178812, 0.15676870982933888, 0.11827714071934292, 0.15628541694507658, 0.1304573610718437, 0.1648329452395001, 0.19934068278937322, 0.18107243033618348, 0.18476633787070174, 0.19248335933137173, 0.1874103016888623, 0.17763295704785453, 0.1917434718034432, 0.17502997590049452, 0.18447701848737774, 0.05876956993116966, 0.03961767317664999, 0.04596479044267254, 0.05431931013516622, 0.05152774837401142, 0.04776443089076532, 0.046111612600568175, 0.051797698824239014, 0.049089112420946934]}, "mutation_prompt": null}
{"id": "4c790a3c-ba10-4bec-814b-5fd9834ee8e6", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.cdf = np.random.uniform(0, 1, size=self.dim)  # Initialize cumulative distribution function\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = new_mean * (1 + np.exp(self.cdf) - 1)  # Apply sigmoid function\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Update cumulative distribution function\n            self.cdf = np.random.uniform(0, 1, size=self.dim)\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Refine the Crowd-Sourced Metaheuristic Algorithm using Evolution Strategies and Genetic Drift.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('Some entries in x0 lay outside the specified bounds').", "error": "ValueError('Some entries in x0 lay outside the specified bounds')", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "8bf529d2-6a0a-4e60-a850-99017737ea2f", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.differential_evolution_params = {'xtol': 1e-6,'maxiter': 1000}\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, method='SDE', **self.differential_evolution_params)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Differential Evolution", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"differential_evolution() got an unexpected keyword argument 'method'\").", "error": "TypeError(\"differential_evolution() got an unexpected keyword argument 'method'\")", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "8d7c4aac-944b-4fbd-ae15-1d5f6e1056fd", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.population_size = 10  # Increase population size for better exploration\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Store current best solution in population\n            self.population.append((self.mean, f_new))\n\n            # Perform crossover and mutation to generate new offspring\n            offspring = []\n            for _ in range(self.population_size - 1):\n                parent1, parent2 = np.random.choice(self.population, size=2, replace=False)\n                child = (parent1[0] + parent2[0]) / 2 + np.random.normal(0, 0.1, size=self.dim)\n                child = np.clip(child, self.search_space[0], self.search_space[1])  # Clip values to search space\n                f_child = func(child)\n                offspring.append((child, f_child))\n\n            # Update population with new offspring\n            self.population = offspring\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n        # Return best solution from population\n        return min(self.population, key=lambda x: x[1])\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\nbest_solution = crowd_sourced(func)\nprint(f\"Best solution: x = {best_solution[0]}, f(x) = {best_solution[1]}\")", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Crossover.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'CrowdSourcedMetaheuristic' object has no attribute 'population'\").", "error": "AttributeError(\"'CrowdSourcedMetaheuristic' object has no attribute 'population'\")", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "b2690fbd-a10c-43ad-85a2-6a4f8469043b", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "4074d22a-5677-45ac-a102-cf8dc93d8450", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptation_rate = 0.1  # Novel adaptation mechanism\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Apply adaptation mechanism\n            if np.random.rand() < self.adaptation_rate:\n                # Select a random algorithm from the current population\n                algorithms = [a for a in self.__class__.__new__(self.__class__, budget=self.budget, dim=self.dim).algorithms]\n                selected_algorithm = np.random.choice(algorithms)\n\n                # Adapt the current algorithm to the selected algorithm\n                selected_algorithm.mean += self.mean - selected_algorithm.mean\n                selected_algorithm.covariance += self.covariance - selected_algorithm.covariance\n\n                # Update the current algorithm\n                self.mean = selected_algorithm.mean\n                self.covariance = selected_algorithm.covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Refine the Crowd-Sourced Metaheuristic Algorithm by incorporating a Novel \"Crowd-Sourced\" Adaptation Mechanism", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'CrowdSourcedMetaheuristic' object has no attribute 'algorithms'\").", "error": "AttributeError(\"'CrowdSourcedMetaheuristic' object has no attribute 'algorithms'\")", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "e57c6ffc-62d5-43f7-babb-714c67b4de56", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.local_search_steps = 10  # Local search steps\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform local search\n        for _ in range(self.local_search_steps):\n            # Perform local optimization using differential evolution\n            bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n            res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n            # Update mean and covariance\n            self.mean = res.x\n            self.covariance = np.eye(self.dim) * 1.0\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Local Search", "configspace": "", "generation": 35, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "b03328bf-eb63-48dd-828f-ca8cc7c28e76", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.step_size = 1.0  # Adaptive step-size control\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + self.step_size * np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + self.step_size * np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with adaptive step-size control and improved covariance update.", "configspace": "", "generation": 36, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "29b659af-a847-4489-aed0-d50f20f0eeab", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_covariance = True  # Flag to adapt covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            if self.adaptive_covariance:\n                new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n                self.covariance = (1 - 0.1) * self.covariance + 0.1 * new_covariance  # Update covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = self.covariance  # Use current covariance matrix for next iteration\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with adaptive covariance matrix", "configspace": "", "generation": 37, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "4e79f14d-1f1d-41ed-a12a-d7fcc22093ca", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.population_size = 10  # Initialize population size\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Store current best solution in population\n            self.population.append((self.mean, f_new))\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n        # Update population with final solution\n        self.population.append((res.x, res.fun))\n\n        # Perform selection and crossover\n        new_population = []\n        for _ in range(self.population_size):\n            parent1, parent2 = np.random.choice(self.population, size=2, replace=False)\n            child = (parent1[0] + parent2[0]) / 2\n            new_population.append((child, func(child)))\n        self.population = new_population\n\n        # Perform mutation\n        for i in range(self.population_size):\n            mutation = np.random.normal(0, 0.1, size=self.dim)\n            new_population[i] = (new_population[i][0] + mutation, new_population[i][1])\n\n        # Update population\n        self.population = new_population\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Differential Evolution", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'CrowdSourcedMetaheuristic' object has no attribute 'population'\").", "error": "AttributeError(\"'CrowdSourcedMetaheuristic' object has no attribute 'population'\")", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "463288f5-2a5a-4e11-8804-52a032fa0ea1", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.elitism_rate = 0.2  # Elitism rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Check for elitism\n            if f_new < func(self.mean):\n                if np.random.rand() < self.elitism_rate:\n                    self.mean = new_mean\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with adaptive step size and elitism.", "configspace": "", "generation": 39, "fitness": 0.07908518854690667, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.15013317329442377, 0.14768983382200096, 0.12651918436216092, 0.116802373163851, 0.11914926946730664, 0.1785177884973913, 0.16572072665901671, 0.15575667108710167, 0.12017729564334967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040803880434038375, 0.03534898804057196, 0.033756983316401645, 0.039742088577568, 0.03781983708553105, 0.03667606550470459, 0.036771602349110255, 0.033901783794438645, 0.018600940468017857, 0.031181654374806245, 0.02547919343860683, 0.016057734708760263, 0.026723638378148618, 0.014164813175193358, 0.023304266193738155, 0.016150910722822154, 0.014783683272367454, 0.03395743379991023, 0.10976525567136819, 0.09757931225435446, 0.07534220362597155, 0.08832282509035172, 0.1403043609287653, 0.08066063896341402, 0.06961819112582157, 0.09330954813781533, 0.09403177633976478, 0.07699392496435375, 0.047063610597671834, 0.05406455977426672, 0.06296562387206106, 0.08914546490023856, 0.034387225833249935, 0.06838265939790378, 0.033014607521679507, 0.08169850483057306, 0.137091259451817, 0.10638009059825237, 0.11024123921777684, 0.10100491193165217, 0.10533813580065166, 0.08433924025685158, 0.08168811197882275, 0.07589470296407985, 0.08536220318351206, 9.999999999998899e-05, 0.00833242202882234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005749569411984679, 0.015056961687949677, 0.0077435094843260055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013824198155508727, 9.999999999998899e-05, 9.999999999998899e-05, 0.028754585353642836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04329529468716886, 0.01749030366829285, 0.06814028721903087, 0.0639872240305851, 0.002152283285153711, 0.03275817399741887, 0.048839371222913375, 0.0716429917726531, 0.04667550121223196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00015691481229263005, 9.999999999998899e-05, 9.999999999998899e-05, 0.19203427693639674, 0.16491690865900432, 0.17245285734034455, 0.18360508621379745, 0.16233225179511224, 0.17710637607253632, 0.16929550644844693, 0.19916692493254318, 0.17250230042415426, 0.030310601245974844, 0.042445821890793156, 0.030960761198193132, 0.04230372722925291, 0.033066073799333906, 0.046992894312052, 0.0515549176850949, 0.03619799029591775, 0.052928309885281855, 0.13831322011456126, 0.1272164974650819, 0.152533328644901, 0.13693847422374306, 0.12284647749959676, 0.1382385125997525, 0.12272471388426387, 0.1527413743117988, 0.11977140284307675, 0.13649092413986363, 0.1366908343443518, 0.1763864685240345, 0.14992990446008314, 0.1664693071867137, 0.1510864395154602, 0.15451426040441785, 0.16049839931978926, 0.15413528225088957, 0.07978377156627614, 0.10094453121924996, 0.12569240424800576, 0.09413650401585294, 0.10846548827216407, 0.09870905810109176, 0.09117372813599267, 0.09902927274594353, 0.08725514817507518, 0.14227218542488063, 0.1472562441710099, 0.142002336909961, 0.14542942492859479, 0.1360442084334138, 0.13931177214910517, 0.16341682404579183, 0.17178558170332758, 0.14546466333278074, 0.09121427224506828, 0.1577876171233742, 0.06522261867662804, 0.09573904095973007, 0.10964872006353632, 0.11880826498890162, 0.1330354736888999, 0.15594136962172267, 0.13289898013501555, 0.16331355624145416, 0.12154942649813727, 0.15776076344600676, 0.1396261981391539, 0.15644196994210813, 0.1330427071632363, 0.1926326087287411, 0.15262811600823167, 0.1763100558922277, 0.11495857860363667, 0.13933502015611543, 0.167608247556581, 0.1280462079415996, 0.20112463539809045, 0.11125550590872368, 0.11969542720918214, 0.1246024541780798, 0.14150813933493245, 0.1975239809337671, 0.18214416464868532, 0.1795008225109055, 0.17872390900330715, 0.1960971127717518, 0.18973840265824182, 0.17884320204922155, 0.1783518167333521, 0.17424560783675258, 0.04985364729980446, 0.03795442705855845, 0.048831012699931176, 0.03898583588494875, 0.04613972241327269, 0.04559898954243802, 0.04310020056287922, 0.04675922110768482, 0.038593136488529356]}, "mutation_prompt": null}
{"id": "3524211c-dbc3-4d16-8d7d-78ab5ab36963", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "19d67bfb-a1b4-4a68-b713-235a5fec9088", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_step_size = 0.5  # Adaptive step size for evolution strategy\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + self.adaptive_step_size * np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Covariance Update", "configspace": "", "generation": 41, "fitness": 0.08299791613691239, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.15141132746431718, 0.17124936245743194, 0.15010819028274913, 0.1250005429240868, 0.16714393336165867, 0.22921665692945947, 0.1536634218880929, 0.15487105498942288, 0.1442669486488598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04926647587938171, 0.04436911226585394, 0.03377830708620255, 0.04424604923272568, 0.0528007465917959, 0.041139540500804817, 0.04291708330268451, 0.03570003527083032, 0.049061493281741475, 0.032005527261311006, 0.022971748942320125, 0.03076634794058497, 0.046719965749060455, 0.02227509354581092, 0.030960798705318315, 0.028548935132611253, 0.026118972121775497, 0.028484155095257813, 0.1582629849547038, 0.07970458935755886, 0.06805743953619714, 0.07793373491668132, 0.10778658935712826, 0.06561912050515673, 0.08535254493931499, 0.07593417256525248, 0.07165815405672438, 0.04853566475173343, 0.06712844648852423, 0.07724829705325298, 0.06087482518072196, 0.061346435380904896, 0.06587444520889696, 0.061872600539795486, 0.031119692683451605, 0.03229347992851328, 0.11106020249755055, 0.1256584687721921, 0.09652324290341907, 0.08842376277587172, 0.10566856519763501, 0.11005603645544948, 0.11648611465668379, 0.11170270876853994, 0.131570508997628, 0.0007569523439102666, 0.009711758404537973, 0.0019797253280218197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019588535422593867, 0.01580332069089163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009672396237201841, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008677469351116462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06479877260428146, 0.04771088334787599, 0.07299217104750555, 0.018397147446096662, 0.005194648878895758, 0.028426502249017216, 0.05215377223605955, 0.03958030188878581, 0.040778306987299784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21213588116875037, 0.1737801723898319, 0.17548206741636097, 0.14528938276402426, 0.16990425082800353, 0.16273472336100026, 0.17792514025463801, 0.18008935482648503, 0.17642875466398322, 0.05951762847372377, 0.028057281857331473, 0.035046000912300035, 0.039549887626711855, 0.038421351903517476, 0.036226903320015436, 0.048510890290094144, 0.03937104506711964, 0.040144511843016706, 0.12960150125539127, 0.1273178073477309, 0.14999898781221332, 0.12859487395607738, 0.12802447753915913, 0.13539375195900993, 0.15391987556238473, 0.138999050672044, 0.14553050334638507, 0.13588506593154503, 0.1487500329097451, 0.19202344366929902, 0.15991716945525258, 0.14640600609811905, 0.1662877680033673, 0.1409853591851441, 0.1640733557291253, 0.14348691835963567, 0.08131240362361991, 0.09161032135097069, 0.12336808717572745, 0.11291152684462702, 0.10418515827939423, 0.10688054517215206, 0.09044661660067099, 0.11512432526663996, 0.10099243094739163, 0.14977809640286122, 0.15407344656686406, 0.15303897743993733, 0.1669863361980508, 0.1597044317938222, 0.14692320456099772, 0.16156441365272, 0.15458258485153986, 0.1539081181064046, 0.10780069671425085, 0.135577379817731, 0.1376036182943421, 0.11848364079168461, 0.07656499782067872, 0.14349135812427738, 0.15088735205356296, 0.13308572247354622, 0.11076064768706306, 0.17534326925322707, 0.14428765650425934, 0.14752302363189707, 0.15063081367706344, 0.1912290139720615, 0.13227773073807236, 0.16275136496572484, 0.13366811426400493, 0.2537628495781661, 0.1223136631777132, 0.20490887250093592, 0.13176710604002528, 0.15219528849807795, 0.17763500391971065, 0.18012352027182044, 0.12779472229494027, 0.19833578361782567, 0.1609673650104806, 0.1760505067505308, 0.18444400748042222, 0.19159400227272938, 0.17716607229766146, 0.1809862650456564, 0.18196388991607526, 0.18243075788791352, 0.19268402566417786, 0.1969018377914119, 0.05143151691183134, 0.042624848008636196, 0.041769064047558424, 0.05038495318346503, 0.0519919310038951, 0.05844496579068781, 0.050250953287869216, 0.0504748855228323, 0.059245304677926436]}, "mutation_prompt": null}
{"id": "5f7a45c4-ac44-4ca5-8480-0561a3aebd24", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_covariance = True\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 0.1, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            if self.adaptive_covariance:\n                new_covariance = self.covariance + np.random.normal(0, 0.01, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n                self.covariance = new_covariance\n            else:\n                self.covariance = np.eye(self.dim) * 0.1  # Initialize covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = self.covariance + np.random.normal(0, 0.01, size=(self.dim, self.dim))\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Matrices", "configspace": "", "generation": 42, "fitness": 0.054918406067522706, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.09774610141735462, 0.09686955235095807, 0.1293339640135851, 0.02516742664670435, 0.12028991026198832, 0.03694668491607678, 0.06677489046155805, 0.047577981505530276, 0.06865627717457934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020269476110183815, 0.03177374839063474, 0.008207316725935332, 0.03701900133817326, 0.0328297268374943, 0.032574341569496346, 0.003260284188800533, 0.04316690505143339, 0.020283678725443677, 0.007306654555616077, 0.015641160706199808, 0.004200872644849918, 0.006744662680693958, 0.0206779279791226, 9.999999999998899e-05, 9.999999999998899e-05, 0.041657545833591936, 9.999999999998899e-05, 0.052650328163026616, 0.03126293936876823, 0.0598488278524022, 0.03852019984555899, 0.044157419624507255, 0.03027503952444932, 0.0327430326109881, 0.05195835840145813, 0.028867519158144894, 0.017089095360325324, 0.010657711442549234, 0.04063474058158245, 9.999999999998899e-05, 0.016921248390813326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10682428921859077, 0.10560561712398231, 0.028086111204455144, 0.048911463815325296, 9.999999999998899e-05, 0.05349227463724582, 0.09834786036428356, 0.015285282180119375, 0.031483110548819804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00361830519927675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04001024698763389, 0.005694662377397242, 0.031472553121542624, 0.06688074117900611, 0.00770776429879938, 0.0024362707196796674, 0.13313743505583264, 0.01987242099499631, 0.03311431822792543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09790486257591147, 0.026259188831328162, 0.16057457429350963, 0.08291903870939987, 0.13026343401530427, 0.07111663487138908, 0.14678948869255182, 0.11300012901343948, 0.09937104393060547, 9.999999999998899e-05, 0.039210255719422604, 0.0044978579417437325, 0.0015889266665988222, 0.0001133754126952935, 9.999999999998899e-05, 0.013964400039498615, 0.002624434077788673, 0.015550966113867304, 0.1230292517949938, 0.14185013581488415, 0.14524914503897324, 0.14356651065876525, 0.13224432973522982, 0.1335435805654035, 0.1239648107081801, 0.16308843590449484, 0.13481911146845071, 0.15027407537757265, 0.12969987980606146, 0.13590768352508675, 0.14433272298336342, 0.163358870773747, 0.129970958521341, 0.14108850061449962, 0.1521245258700934, 0.13755437608682763, 0.08838796897166956, 0.07594863381469152, 0.08914853591453542, 0.1023323186272459, 0.12047904185523639, 0.06360426991721357, 0.08786001039837488, 0.08123353699225466, 0.09179685710300822, 0.15027866658123745, 0.1343094233433738, 0.12029044221278673, 0.17835933834949735, 0.147240804661241, 0.14473554965897217, 0.1629932709316676, 0.12311655180391445, 0.135642308222943, 0.0009954687499336146, 9.999999999998899e-05, 9.999999999998899e-05, 0.15369955120287504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10778711127357787, 9.999999999998899e-05, 0.08898727673768314, 0.06544176741078189, 0.15984789858182846, 0.14586174017307607, 0.08660937442617955, 0.08465700912876328, 0.12374769967073385, 0.10049315748592602, 0.1289914347446891, 0.06715145928250099, 0.06323993848248632, 0.049732361572734196, 0.025238147813864464, 0.08814634409259547, 0.06336955218008533, 0.06968361013211088, 0.0809652090193762, 0.07861277058810956, 0.19036520557329928, 0.1863823251580975, 0.18519168398321062, 0.19893889599127068, 0.19370763174570482, 0.18692140195720508, 0.19109239970367498, 0.20709704456676525, 0.18709493090524643, 0.04711044444812085, 0.0430591718531379, 0.04210803508134142, 0.03623613788125546, 0.05895423674128197, 0.02971492410970966, 0.04525115334588614, 0.03496784634034977, 0.02620703327106022]}, "mutation_prompt": null}
{"id": "4d6415cf-cd18-4ff6-b41c-ab5b2fef621c", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.step_size = 1.0  # Initialize step size\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + self.step_size * np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + self.step_size * np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Step Size", "configspace": "", "generation": 43, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "41db4364-3830-49fc-a91b-4812294adfcc", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "c15e81b7-b90b-428c-96da-3e071813c668", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_step = 0.1  # Adaptive step size for evolution strategy\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.adaptive_step, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance", "configspace": "", "generation": 45, "fitness": 0.056815862541030736, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.10480042502797748, 0.19980264933755032, 0.08853511130669756, 0.05275711899198998, 0.04835135668434942, 0.09661548383874419, 0.08342934098711607, 0.09189811494260625, 0.04792791639126659, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01968190348962673, 0.0029900571025475164, 0.04725234304942316, 0.006582654618797479, 0.06245932415031619, 0.014603116098603097, 0.0740717642426385, 0.025198616537376983, 0.007455077758437456, 0.009235977981108423, 0.0023860454099791095, 0.024816912357906062, 0.010180202677407046, 0.0056868923392877635, 0.013025181198156321, 0.013220641351092355, 9.999999999998899e-05, 0.045108305624468104, 0.0356477214564096, 0.03300233369025196, 0.013056498491973767, 0.03296965445168065, 0.05111426491937432, 0.02661349018425374, 0.03780494979753257, 0.05508389114819834, 0.029778842553383922, 9.999999999998899e-05, 0.0004293106540160796, 9.999999999998899e-05, 0.006488234847655039, 0.0941362109612115, 0.04662818691413828, 0.0441190622500679, 9.999999999998899e-05, 9.999999999998899e-05, 0.08983302851586883, 0.028410610016884497, 0.08989488464630302, 0.03273815308590078, 0.00864833564255496, 9.999999999998899e-05, 0.0003285884246486681, 0.004224810215105235, 0.005729927371007748, 9.999999999998899e-05, 0.010712775674214359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002886284231200409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08576624978864278, 0.029018012052742792, 0.04464000774453125, 0.0489139495446923, 0.011272885823698786, 0.021807517993403636, 0.031222332013944865, 0.02253303120323813, 0.017526242301212913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005163045296732505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1306543111199946, 0.10421047045432619, 0.12419239531372017, 0.08876287301788799, 0.09108856118314801, 0.155047388802262, 0.10213958726944039, 0.11753817246833675, 0.17336295412436742, 0.004772336647416386, 9.999999999998899e-05, 9.999999999998899e-05, 0.020475050835010555, 9.999999999998899e-05, 0.020316180906384984, 0.04381759677995867, 0.04901432299012065, 0.026100494731324364, 0.12914853078840338, 0.1185596609046008, 0.13428537622744408, 0.12958132505802256, 0.13367166611728043, 0.15127610842110717, 0.14257867223262055, 0.12075033310448158, 0.14606179670931763, 0.10613336498709924, 0.11150115119651982, 0.12455413195865261, 0.14353032974122126, 0.11935951739653505, 0.1610885841626276, 0.1229884007887243, 0.0972775792902052, 0.13244935159553495, 0.049873714250386336, 0.0629129065927394, 0.05721189913604596, 0.0728176953514903, 0.06148797535662287, 0.09556118304587546, 0.07135076141451246, 0.03207249563272674, 0.07794076759924795, 0.17540708444358055, 0.11726485168633771, 0.15501101094971326, 0.16721541715224797, 0.1255437995784292, 0.15277574218031442, 0.18430028550113864, 0.1534745539616975, 0.13054387101832776, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254693548151785, 9.999999999998899e-05, 0.00011832626663510482, 0.08958466555778344, 0.04888546047466624, 9.999999999998899e-05, 0.1348497283507628, 0.20082406124523433, 0.07366444559055052, 0.1074282147319513, 0.09914917550455482, 0.17142922691001183, 0.07690422756678872, 0.10539213695777838, 0.13019853431279715, 0.09548028081347126, 0.11113749682260898, 0.1041625176409714, 0.05100569621499529, 0.06791635518989547, 0.13862955313761982, 0.18002377379511036, 0.062201056630147855, 0.08441074525809633, 0.08223069567376884, 0.20177423892659585, 0.17918014902446744, 0.18247073864145225, 0.20842584389756869, 0.18700320803117432, 0.1804768153563895, 0.18094878452254648, 0.19228919166849956, 0.17888200390022502, 0.059003414465947035, 0.03894757699245188, 0.06339770127339928, 0.026191839342923906, 0.030321761773846267, 0.04745984790589686, 0.05163080234087625, 0.05651749086265101, 0.04453872089667088]}, "mutation_prompt": null}
{"id": "18d09a7f-5ea2-41b1-9d47-c7556583576a", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + self.covariance_update_rate * np.random.normal(0, 1.0, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update", "configspace": "", "generation": 46, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "9d934f62-f65b-43fd-a3c2-02dec4788380", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_matrix = np.eye(self.dim) * 1.0  # Initialize covariance matrix for evolution strategy\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Update covariance matrix\n            self.covariance_matrix += 0.1 * np.dot((new_mean - self.mean).reshape(-1, 1), (new_mean - self.mean).T)\n\n            # Perform genetic drift to update covariance\n            new_covariance = np.linalg.inv(self.covariance_matrix)\n            new_covariance = np.dot(new_covariance, np.dot(self.covariance, new_covariance))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Covariance Matrix", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('shapes (2,1) and (2,) not aligned: 1 (dim 1) != 2 (dim 0)').", "error": "ValueError('shapes (2,1) and (2,) not aligned: 1 (dim 1) != 2 (dim 0)')", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "c9a20c88-ee6a-46ea-99ae-f718b65ba736", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 0.1, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform hybrid differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res1 = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        res2 = differential_evolution(func, bounds, x0=np.mean(res1.x, axis=0) + np.random.normal(0, 0.1, size=self.dim), seed=42)\n        res3 = differential_evolution(func, bounds, x0=np.mean(res2.x, axis=0) + np.random.normal(0, 0.1, size=self.dim), seed=42)\n        res = differential_evolution(func, bounds, x0=np.mean(res3.x, axis=0) + np.random.normal(0, 0.1, size=self.dim), seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Hybrid Differential Evolution", "configspace": "", "generation": 48, "fitness": 0.056815862541030736, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.10480042502797748, 0.19980264933755032, 0.08853511130669756, 0.05275711899198998, 0.04835135668434942, 0.09661548383874419, 0.08342934098711607, 0.09189811494260625, 0.04792791639126659, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01968190348962673, 0.0029900571025475164, 0.04725234304942316, 0.006582654618797479, 0.06245932415031619, 0.014603116098603097, 0.0740717642426385, 0.025198616537376983, 0.007455077758437456, 0.009235977981108423, 0.0023860454099791095, 0.024816912357906062, 0.010180202677407046, 0.0056868923392877635, 0.013025181198156321, 0.013220641351092355, 9.999999999998899e-05, 0.045108305624468104, 0.0356477214564096, 0.03300233369025196, 0.013056498491973767, 0.03296965445168065, 0.05111426491937432, 0.02661349018425374, 0.03780494979753257, 0.05508389114819834, 0.029778842553383922, 9.999999999998899e-05, 0.0004293106540160796, 9.999999999998899e-05, 0.006488234847655039, 0.0941362109612115, 0.04662818691413828, 0.0441190622500679, 9.999999999998899e-05, 9.999999999998899e-05, 0.08983302851586883, 0.028410610016884497, 0.08989488464630302, 0.03273815308590078, 0.00864833564255496, 9.999999999998899e-05, 0.0003285884246486681, 0.004224810215105235, 0.005729927371007748, 9.999999999998899e-05, 0.010712775674214359, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002886284231200409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08576624978864278, 0.029018012052742792, 0.04464000774453125, 0.0489139495446923, 0.011272885823698786, 0.021807517993403636, 0.031222332013944865, 0.02253303120323813, 0.017526242301212913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005163045296732505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1306543111199946, 0.10421047045432619, 0.12419239531372017, 0.08876287301788799, 0.09108856118314801, 0.155047388802262, 0.10213958726944039, 0.11753817246833675, 0.17336295412436742, 0.004772336647416386, 9.999999999998899e-05, 9.999999999998899e-05, 0.020475050835010555, 9.999999999998899e-05, 0.020316180906384984, 0.04381759677995867, 0.04901432299012065, 0.026100494731324364, 0.12914853078840338, 0.1185596609046008, 0.13428537622744408, 0.12958132505802256, 0.13367166611728043, 0.15127610842110717, 0.14257867223262055, 0.12075033310448158, 0.14606179670931763, 0.10613336498709924, 0.11150115119651982, 0.12455413195865261, 0.14353032974122126, 0.11935951739653505, 0.1610885841626276, 0.1229884007887243, 0.0972775792902052, 0.13244935159553495, 0.049873714250386336, 0.0629129065927394, 0.05721189913604596, 0.0728176953514903, 0.06148797535662287, 0.09556118304587546, 0.07135076141451246, 0.03207249563272674, 0.07794076759924795, 0.17540708444358055, 0.11726485168633771, 0.15501101094971326, 0.16721541715224797, 0.1255437995784292, 0.15277574218031442, 0.18430028550113864, 0.1534745539616975, 0.13054387101832776, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254693548151785, 9.999999999998899e-05, 0.00011832626663510482, 0.08958466555778344, 0.04888546047466624, 9.999999999998899e-05, 0.1348497283507628, 0.20082406124523433, 0.07366444559055052, 0.1074282147319513, 0.09914917550455482, 0.17142922691001183, 0.07690422756678872, 0.10539213695777838, 0.13019853431279715, 0.09548028081347126, 0.11113749682260898, 0.1041625176409714, 0.05100569621499529, 0.06791635518989547, 0.13862955313761982, 0.18002377379511036, 0.062201056630147855, 0.08441074525809633, 0.08223069567376884, 0.20177423892659585, 0.17918014902446744, 0.18247073864145225, 0.20842584389756869, 0.18700320803117432, 0.1804768153563895, 0.18094878452254648, 0.19228919166849956, 0.17888200390022502, 0.059003414465947035, 0.03894757699245188, 0.06339770127339928, 0.026191839342923906, 0.030321761773846267, 0.04745984790589686, 0.05163080234087625, 0.05651749086265101, 0.04453872089667088]}, "mutation_prompt": null}
{"id": "3cb45cdc-b95c-4ef5-9685-583cf3fb537a", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.differential_evolution_bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        res = differential_evolution(func, self.differential_evolution_bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Differential Evolution", "configspace": "", "generation": 49, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "29264507-53b7-4faa-b0bc-e20416e13cc4", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptive_covariance = False\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            if self.adaptive_covariance:\n                new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n                self.covariance = self.covariance + 0.1 * np.linalg.inv(self.covariance) @ new_covariance @ np.linalg.inv(self.covariance)\n            else:\n                new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n                self.covariance = new_covariance\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = self.covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Adaptive Covariance Matrices", "configspace": "", "generation": 50, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "9ea91e7a-e3d5-47e6-becb-7e5f3f185477", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.crossover_rate = 0.5  # Crossover rate for genetic drift\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            if np.random.rand() < self.crossover_rate:\n                new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n            else:\n                new_covariance = self.covariance\n\n            # Perform crossover to introduce genetic drift\n            if np.random.rand() < self.crossover_rate:\n                new_mean = np.mean([new_mean, self.mean], axis=0)\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Crossover", "configspace": "", "generation": 51, "fitness": 0.08611972054029192, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.16335186273616387, 0.17190979866458433, 0.16926041695884564, 0.1313877361694329, 0.14944685500945232, 0.15209300461208108, 0.16993866522458845, 0.15518078200804974, 0.20667329320639527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041829904375522364, 0.036847641887977844, 0.04212189766403429, 0.0441770384779413, 0.04153572489064539, 0.04654025135425821, 0.04212632815731099, 0.031935944937973915, 0.07725442895109969, 0.043739319090880024, 0.03015139082438767, 0.030033447362775245, 0.029715201402468527, 0.03001243472328119, 0.03142245142317113, 0.03614811840494969, 0.04349849140720763, 0.028664874215952874, 0.08127902202531656, 0.11324326754088121, 0.1736925123587274, 0.16367654518848207, 0.07494007818787107, 0.1483494997863729, 0.10412741408075232, 0.0799675169002827, 0.09685513281419733, 0.05093041024903355, 0.08490986176974225, 0.06165966947080104, 0.02917195213280943, 0.061343729016873794, 0.07389075849668714, 0.05769664709058231, 0.07080164405142475, 0.08359250545845898, 0.12674212540676622, 0.11915431599741932, 0.1152482861741233, 0.1295517988526328, 0.09380344193535473, 0.13755841578408057, 0.09927987979414665, 0.0985098527568522, 0.11119889549897599, 9.999999999998899e-05, 9.999999999998899e-05, 0.018036257476938378, 0.025059529080964205, 9.999999999998899e-05, 0.004654448366640973, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037787954633793364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03621127423165782, 9.999999999998899e-05, 0.017082221973276357, 9.999999999998899e-05, 9.999999999998899e-05, 0.006986598682948153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04374868392641762, 0.04282160521423961, 0.058245096978823185, 0.04920792558714726, 0.06650151393769443, 0.029235794277231775, 0.02981714396714774, 0.04136643690748065, 0.04895457171364248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009557393718866658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18418741082452372, 0.1823851980478235, 0.18139148210910705, 0.17059090266380827, 0.23296551069944404, 0.166533201608713, 0.185218776602874, 0.17733056362518762, 0.18971084960886775, 0.05418074618371993, 0.03501979313940351, 0.03904405385278675, 0.04255653101818768, 0.04262459747224534, 0.04001604222641997, 0.0369085680961867, 0.047784620887382, 0.04647575880692367, 0.14841639648302185, 0.1256194136681854, 0.17082365040145397, 0.15176052833728138, 0.14291564676634516, 0.13814905546086143, 0.13885448990521987, 0.15104021538661705, 0.1354631577575588, 0.14882955142536225, 0.17065199997957337, 0.15500089429036923, 0.15959926206027597, 0.1647551626099243, 0.16880693786062606, 0.15815862456641172, 0.15118856181869256, 0.16304584552362866, 0.08960125031710309, 0.10022720276978148, 0.08798195164381994, 0.09881623323609323, 0.12068759312519128, 0.09616596864901528, 0.1131702955087992, 0.10428483143012057, 0.11602583745654593, 0.15441174688193682, 0.1442090736232341, 0.1658922705321112, 0.1505715239872012, 0.1495139701577839, 0.1879399142420577, 0.15888967791333508, 0.1430915149551507, 0.14594160441829496, 0.14109137365242186, 0.14300512048477665, 0.10801349254143877, 0.1323920169598225, 0.11439867054781638, 0.1352561092793363, 0.14109378604126266, 0.13629247231471342, 0.10226647657521792, 0.15388105775087912, 0.1642608084047399, 0.15238032831319437, 0.1689939583542608, 0.16239861426294933, 0.17319211394055, 0.1385907286981939, 0.15530811739664496, 0.15892437766592915, 0.1472910874710287, 0.14435441421207362, 0.1432800509592287, 0.15695711546222124, 0.16876013861879524, 0.199916386088834, 0.15682380922202888, 0.16651598732477602, 0.13977540294383395, 0.17505761669490472, 0.18332016429425146, 0.18439369697184904, 0.1947321020109244, 0.18925730301584476, 0.1982945235270086, 0.176450369269616, 0.1884543051212223, 0.18741028969159423, 0.06081425940811791, 0.04077892278405093, 0.042182877206283775, 0.048893941200688684, 0.04173998927570388, 0.04665069103585007, 0.0567661797703366, 0.05305160377121232, 0.04873254907845914]}, "mutation_prompt": null}
{"id": "7abdd6aa-93dd-479c-80f8-2690a15c0dc6", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.num_objectives = 1  # Number of objectives to optimize\n\n    def __call__(self, funcs):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate objectives at new mean\n            f_new = np.array([func(new_mean) for func in funcs])\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform multi-objective optimization using Pareto-based differential evolution\n        def multi_objective_func(x):\n            f_values = np.array([func(x) for func in funcs])\n            return f_values\n\n        def pareto_front(x):\n            f_values = np.array([func(x) for func in funcs])\n            return f_values\n\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(multi_objective_func, bounds, x0=self.mean, seed=42, population_size=50)\n        print(f\"Final Pareto front: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func1(x):\n    return x[0]**2 + x[1]**2\ndef func2(x):\n    return x[0]**3 + x[1]**3\n\nfuncs = [func1, func2]\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(funcs)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Multi-Objective Optimization", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"differential_evolution() got an unexpected keyword argument 'population_size'\").", "error": "TypeError(\"differential_evolution() got an unexpected keyword argument 'population_size'\")", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "fe653bac-0985-4589-8862-ec5533a8e774", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "4b89e64b-0b0e-4813-9408-e254660cac68", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.adaptation_rate = 0.1  # New adaptation rate\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Perform adaptation\n            self.mean = self.mean + self.adaptation_rate * (self.mean - np.mean(self.mean))\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptation.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('Some entries in x0 lay outside the specified bounds').", "error": "ValueError('Some entries in x0 lay outside the specified bounds')", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {}, "mutation_prompt": null}
{"id": "dcbf9878-6e81-4cef-86fa-c6bfe1995454", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = (self.covariance + new_covariance) / 2  # Average covariance update\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Enhanced Covariance Update", "configspace": "", "generation": 55, "fitness": 0.08878185024934046, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "36dedd52-2f25-4250-aaa9-6468f27a637c", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "a2c5b3de-a861-46c3-8414-a685245eef81", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.1685861474860496, 0.16549280990347492, 0.14519218047721383, 0.16295000205091859, 0.143524815688456, 0.18756590498991121, 0.1728456793497618, 0.16425401710619536, 0.13703754793981693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04132054909758531, 0.039469035835222765, 0.03547190326972394, 0.04347831414968206, 0.04125306589396238, 0.04980932666950555, 0.04535465712201325, 0.043047325253602, 0.03688648223923263, 0.040360906038267585, 0.03638896525263757, 0.025565432191544613, 0.03037058820904681, 0.025807885379953377, 0.03246787097527193, 0.02347811469183836, 0.022023301406767337, 0.034823763638239136, 0.15944456228747172, 0.1052414926581321, 0.08949773766617541, 0.10801744042075334, 0.14523779822569827, 0.09509141966052226, 0.07650478466145416, 0.10141861685784426, 0.11076614113519612, 0.09473672287422674, 0.058703253266998434, 0.06148470329243849, 0.08988650338660575, 0.0897487837519495, 0.0585388401207918, 0.0784581048628008, 0.06688404801231229, 0.1159478983056359, 0.1377956002491474, 0.11007641016175818, 0.12414289538276613, 0.11973558777401683, 0.11624481908828643, 0.10856119908942674, 0.09564765469148151, 0.10463195256403868, 0.10275188690689485, 0.0008727937122561258, 0.033937807262387154, 0.012492702621988427, 0.0027733848093285385, 0.012712974067858873, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005887766537665096, 0.01506594754657875, 0.007827092061212126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018290170512239468, 9.999999999998899e-05, 9.999999999998899e-05, 0.038079034376630294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04991634312364168, 0.050724951462565504, 0.07628812776455629, 0.06864332733133838, 0.05326530291960008, 0.04242367721147333, 0.05289697690925399, 0.07817206112812414, 0.05214291319707132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001642898711170515, 9.999999999998899e-05, 9.999999999998899e-05, 0.2002689295273271, 0.2024658179339046, 0.18528800495665487, 0.18808862529473758, 0.17547352917741887, 0.19054574650702782, 0.17205759346811267, 0.2135832396804772, 0.1795713077656046, 0.03862205806617347, 0.05062324730112, 0.036513538750222896, 0.04659678586336491, 0.045656760092551485, 0.051707035438703364, 0.05752061857213098, 0.04350009044576164, 0.06190359814678048, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.13629218781926034, 0.16462030038328246, 0.13316761784839637, 0.1545176369770106, 0.1261508871558411, 0.15618386213099655, 0.14473779978189782, 0.18276476741157044, 0.15802125216034946, 0.16753072781704081, 0.15321978559655403, 0.1670190642538837, 0.1636951739148953, 0.16065006203707566, 0.1001347985658545, 0.10156295713757302, 0.1347365217554234, 0.0983563896844476, 0.10906995584449308, 0.10909208956814787, 0.10594695656442565, 0.10536645756681173, 0.09056286240234845, 0.14579991724749164, 0.15970418912425233, 0.1582046260324863, 0.15000956349184724, 0.14311719096959463, 0.1659684772166241, 0.17203718555394953, 0.19112738160876108, 0.15313811079420958, 0.1198295825417599, 0.16082748033583016, 0.10687615594734101, 0.1242073635326344, 0.12880873912578905, 0.13772323398920927, 0.14505342393907106, 0.1597818524638387, 0.13886001281753302, 0.17995788719124395, 0.13641976982391335, 0.1917556261903981, 0.1405156946290006, 0.17353467346161555, 0.15169584877900832, 0.21422981449452683, 0.16467609889139945, 0.18699507099631196, 0.12279260955755067, 0.16838392521401402, 0.19189661030906224, 0.17137456573854692, 0.21853961870818994, 0.15149306672826535, 0.14315285056491833, 0.146360033849946, 0.15685451986195553, 0.20660125959811237, 0.18537647071897345, 0.18327592676100912, 0.17969375436638602, 0.19877182621537526, 0.18993379743376537, 0.1813845428637254, 0.18492125987683783, 0.1927959010608784, 0.055292399942783566, 0.04331755133559834, 0.05052355984235657, 0.044691710055191236, 0.05278558333921868, 0.04655737446045727, 0.048967934159686255, 0.049560703000399164, 0.04670962047113136]}, "mutation_prompt": null}
{"id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update", "configspace": "", "generation": 58, "fitness": 0.1778935299431862, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "cca80c2c-14d6-40de-a367-8c286657e9c4", "metadata": {"aucs": [0.5084359135705623, 0.5132307376564615, 0.4922191553298758, 0.502296178518183, 0.4974416216245272, 0.522977227389228, 0.5290777021858817, 0.5215921083983723, 0.5053284784874343, 0.11317141719097201, 0.19370490274750674, 0.2677134604854021, 0.20233594077444406, 0.24772378976897547, 0.2396921987298064, 0.27206165196706644, 0.18156686886475282, 0.24097418467079001, 0.07845815981250892, 0.08388194411265848, 0.068596101581193, 0.07324605313510035, 0.07214032677020654, 0.07089486672433065, 0.07026785583804229, 0.07469512066751016, 0.08304860969216066, 0.07320001807878418, 0.05771890207782038, 0.05981503444363734, 0.06512850332198372, 0.054020650357618605, 0.060382610625549726, 0.05586749811368119, 0.06025413539234392, 0.07469307644661671, 0.17641557939267039, 0.15018145692527907, 0.1562702268937024, 0.47117182403489355, 0.49310749849631497, 0.45331745993848604, 0.29434908667608295, 0.2566569442841603, 0.26205382396406685, 0.1649288894153459, 0.1400256164250282, 0.1245532228818762, 0.14980513805899442, 0.1609399651898762, 0.13327255372263447, 0.21724769880188854, 0.1540128128820254, 0.22286234851381792, 0.18925288026611875, 0.1548810250513718, 0.19887168081827356, 0.18461424353619538, 0.3761836903833695, 0.1908656927319009, 0.19978258117304215, 0.2880179520666797, 0.19128541931793852, 0.2547176326326942, 0.058549136104703914, 0.27643400731491485, 0.22925785203106297, 0.2707515672218437, 0.33396111095176817, 0.22097984531687476, 0.22097984531687476, 0.2212494419206742, 0.2134314080242914, 0.20945476577683286, 0.20528422953392433, 0.09551364255355421, 0.18955601541143552, 0.19459614501929268, 0.11628906945203676, 0.08717807949004241, 0.22565421567361577, 0.005509668705249715, 0.024174635366773556, 0.01887628377317707, 0.008849632849045719, 0.008849632849045719, 0.014090038845464004, 0.0255581082287214, 0.032913326995708814, 0.015178735259099962, 0.10659303575079959, 0.08012959929472219, 0.10276805731208571, 0.11145628562324217, 0.05656200610401507, 0.07672951261340144, 0.10778674158391355, 0.15436434429509205, 0.09601359130089948, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.0051204762021707095, 0.01216990545045915, 0.009407956144980023, 0.0070830630790135185, 0.014228732910347541, 0.014228732910347541, 0.049650793658194026, 0.056926573206638076, 0.04574999543532232, 0.057741019989329234, 0.06147745544989591, 0.07528345139876436, 0.07025334857513266, 0.11391895553792586, 0.09440234363551103, 0.4212487994092867, 0.4043435696278552, 0.39897490731742125, 0.3601295905831584, 0.34918026397545276, 0.35703155938726017, 0.42524033742872525, 0.4625409088938305, 0.4426684362192477, 0.07997351771417649, 0.07780636080532566, 0.06985982143337643, 0.0699447916103807, 0.0651429191921492, 0.058799408946023646, 0.07085630600946136, 0.05534911113074792, 0.06848200152369788, 0.14856462129074555, 0.13513893412903233, 0.15619562975007228, 0.16447552378659203, 0.13377875110357595, 0.16462030038328246, 0.14262011459292057, 0.1545176369770106, 0.13178379485858382, 0.20396058648766757, 0.20383322040165885, 0.21469046745374443, 0.197416759922452, 0.21127165800722147, 0.20394257118036418, 0.17168601090778068, 0.1636118547777956, 0.17328984474114262, 0.14626450755382192, 0.15648619945158693, 0.16992766140056714, 0.14209577327596912, 0.1627621261540918, 0.14753323398858975, 0.13821432774911013, 0.14150476756980856, 0.13468623830509696, 0.17354011296011773, 0.17053421591634854, 0.16654924200996934, 0.1598342019366752, 0.15412108740216424, 0.15797579922885363, 0.1947221140909956, 0.1953217058615765, 0.16390709015520932, 0.15075656812072014, 0.18666025237039652, 0.12559476793322777, 0.1396027617179516, 0.14363846749261777, 0.15473776217202617, 0.1635983751348542, 0.18142727254684332, 0.1590164541062462, 0.41821139170748445, 0.14363168862964049, 0.4196255734003377, 0.16652657923567915, 0.1776428912658219, 0.15194923812872696, 0.4143254981696475, 0.3906530516096238, 0.403365009484455, 0.3464480729710604, 0.3578841327918091, 0.4061381194067304, 0.1717273005583042, 0.21534598397324012, 0.1186899007858232, 0.30163257105304064, 0.30430097728688454, 0.31333595062133845, 0.20660125959811237, 0.18655096345039024, 0.1904155451998848, 0.1834605084041958, 0.19877182621537526, 0.18993379743376537, 0.1830409161083777, 0.18568675078485175, 0.18656646499869567, 0.06435645205183282, 0.05564044650592337, 0.058780598888551916, 0.06349331285721305, 0.06276585611548868, 0.06149415087566412, 0.057221367675444945, 0.06378820800267826, 0.05915796204067758]}, "mutation_prompt": null}
{"id": "561959f5-870f-403e-9572-db0cbae32b68", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.learning_rate = 0.1  # Adaptive learning rate\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + self.learning_rate * np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + self.learning_rate * np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Improved Covariance Update with Adaptive Learning Rate", "configspace": "", "generation": 59, "fitness": 0.16146352095738917, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.12.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.4868272925972019, 0.5130773991635831, 0.4531905258672576, 0.45628986629716417, 0.46404383024614904, 0.48891640329750097, 0.49652823933707546, 0.5020957207408157, 0.4776838612315276, 0.2145566879181675, 0.13345715123482826, 0.11060964579987653, 0.21668820130077726, 0.24030493785459794, 0.22878689247471706, 0.22892671790865793, 0.15355388618755095, 0.26847490484127756, 0.06421401234096957, 0.05196407401904013, 0.07175488201779068, 0.057928082635208544, 0.08343316528673728, 0.05477593730643915, 0.08871335800166491, 0.059818857845563955, 0.05204582008329617, 0.05274279281154637, 0.04589351113079443, 0.057448509789543634, 0.0415924357965316, 0.04357191315829334, 0.05079898232746871, 0.06000442729484201, 0.06000442729484201, 0.08212842395883202, 0.12213549552131298, 0.11493508014509357, 0.112619346850381, 0.41339157047726116, 0.41980312202553083, 0.40119074610356986, 0.17902764191460296, 0.2607823331738065, 0.2255868843531712, 0.12929993124302697, 0.11646451588477302, 0.10987561268516854, 0.11722765398332702, 0.15511054700767124, 0.11447516296091109, 0.19070465420756388, 0.17183800619844658, 0.18203779845574086, 0.17340584150062788, 0.12153485870611691, 0.1451941411500065, 0.1471671813968023, 0.13675958403964428, 0.15049893210378062, 0.2591640356640491, 0.26052804102736626, 0.28058588879139945, 0.28955601875677517, 0.2139943736769766, 0.27912815862624263, 0.3074887402234644, 0.24680980081752213, 0.27410464092483866, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.12466062030140479, 0.2650557329036213, 0.05214562364229547, 0.13092999767729674, 0.21913670383548212, 0.17337657494903125, 0.07266455826426277, 0.21800801788992052, 0.165301329413866, 0.021527597834549494, 0.005867720366102169, 0.010729773644398088, 0.019409427361217202, 0.008849632849045719, 0.008849632849045719, 0.022020963386570114, 0.008147503585343663, 0.009769103440199212, 0.12304955495573555, 0.08895844801967268, 0.08417645347496872, 0.09779103039232617, 0.07750025942913707, 0.07133696949922519, 0.09869797576287898, 0.1013081427057112, 0.07005463450352312, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.00390541891124907, 0.01605105603495771, 0.01875971444875757, 0.01277091625222293, 0.010116682988011383, 0.014228732910347541, 0.04952777203235581, 0.056248158129748704, 0.05989488390527764, 0.05820708180309753, 0.06865720427658928, 0.10604762582207061, 0.07356604946975331, 0.061753658875686734, 0.1038798369236198, 0.38262113630469885, 0.35198353353092904, 0.3750492935861608, 0.30389214621601846, 0.3074137808943863, 0.4200103106878621, 0.41397908612516954, 0.38589020753571657, 0.38531897909735946, 0.05022127339723481, 0.06632620082960128, 0.055309146025911304, 0.04731103666326164, 0.04237970069071051, 0.044148109460765084, 0.0724495548417442, 0.058336170164225765, 0.04256841655310839, 0.12861757449029432, 0.1336591560675322, 0.1343178487598521, 0.1361837289721174, 0.1208711821715065, 0.15127610842110717, 0.14257867223262055, 0.12173514428383536, 0.14606179670931763, 0.1903722647253503, 0.18723265993960947, 0.18250995600737763, 0.20025229241816156, 0.1817831987075278, 0.20483560450391425, 0.15027185173239233, 0.1419319048944484, 0.16825593271129125, 0.13045949499778686, 0.13452182611630303, 0.1306793250462841, 0.14524650004295636, 0.12045742633906065, 0.1457697921943354, 0.10376623670792173, 0.10138545178742808, 0.12704408524712107, 0.18127973836307842, 0.13904910137858917, 0.16656802837446716, 0.1724970315616352, 0.13637826184443458, 0.15958830655295386, 0.20554322277025472, 0.15339389146940852, 0.17441356796275864, 0.09117047766903996, 0.09259084869206269, 0.1523013754336382, 0.09999622261462648, 0.08624439296535236, 0.09393284053492168, 0.11173634211866446, 0.08782933368244883, 0.14781239854840245, 0.42711008166453435, 0.1128067661833898, 0.142263607084684, 0.3325387154391143, 0.17135135754191544, 0.2928721396678259, 0.3593873466142561, 0.36909063565787603, 0.35311932127511514, 0.2858756051737116, 0.12557831768511585, 0.2814018185210643, 0.2746543704542732, 0.30302327272184415, 0.15873960604070125, 0.25643422206164224, 0.15206545916472136, 0.2738272566227675, 0.20177423892659585, 0.1792982977771479, 0.1765654067945912, 0.20842584389756869, 0.18755572153406352, 0.1741833648266624, 0.18702812078846287, 0.1888421218294799, 0.1824912279514741, 0.058001622292087496, 0.043948380241145446, 0.06339770127339928, 0.0448422093876798, 0.047487396348448785, 0.05487439782802561, 0.061782056197342894, 0.0609406547067014, 0.05058715018342641]}, "mutation_prompt": null}
{"id": "0a23fb76-c5c6-46cd-b102-034b26fb1ef2", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.adaptive_covariance = 0.2  # Adaptive covariance update rate\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Update adaptive covariance\n            self.covariance = self.adaptive_covariance * self.covariance + (1 - self.adaptive_covariance) * new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update", "configspace": "", "generation": 60, "fitness": 0.1778935299431862, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.5084359135705623, 0.5132307376564615, 0.4922191553298758, 0.502296178518183, 0.4974416216245272, 0.522977227389228, 0.5290777021858817, 0.5215921083983723, 0.5053284784874343, 0.11317141719097201, 0.19370490274750674, 0.2677134604854021, 0.20233594077444406, 0.24772378976897547, 0.2396921987298064, 0.27206165196706644, 0.18156686886475282, 0.24097418467079001, 0.07845815981250892, 0.08388194411265848, 0.068596101581193, 0.07324605313510035, 0.07214032677020654, 0.07089486672433065, 0.07026785583804229, 0.07469512066751016, 0.08304860969216066, 0.07320001807878418, 0.05771890207782038, 0.05981503444363734, 0.06512850332198372, 0.054020650357618605, 0.060382610625549726, 0.05586749811368119, 0.06025413539234392, 0.07469307644661671, 0.17641557939267039, 0.15018145692527907, 0.1562702268937024, 0.47117182403489355, 0.49310749849631497, 0.45331745993848604, 0.29434908667608295, 0.2566569442841603, 0.26205382396406685, 0.1649288894153459, 0.1400256164250282, 0.1245532228818762, 0.14980513805899442, 0.1609399651898762, 0.13327255372263447, 0.21724769880188854, 0.1540128128820254, 0.22286234851381792, 0.18925288026611875, 0.1548810250513718, 0.19887168081827356, 0.18461424353619538, 0.3761836903833695, 0.1908656927319009, 0.19978258117304215, 0.2880179520666797, 0.19128541931793852, 0.2547176326326942, 0.058549136104703914, 0.27643400731491485, 0.22925785203106297, 0.2707515672218437, 0.33396111095176817, 0.22097984531687476, 0.22097984531687476, 0.2212494419206742, 0.2134314080242914, 0.20945476577683286, 0.20528422953392433, 0.09551364255355421, 0.18955601541143552, 0.19459614501929268, 0.11628906945203676, 0.08717807949004241, 0.22565421567361577, 0.005509668705249715, 0.024174635366773556, 0.01887628377317707, 0.008849632849045719, 0.008849632849045719, 0.014090038845464004, 0.0255581082287214, 0.032913326995708814, 0.015178735259099962, 0.10659303575079959, 0.08012959929472219, 0.10276805731208571, 0.11145628562324217, 0.05656200610401507, 0.07672951261340144, 0.10778674158391355, 0.15436434429509205, 0.09601359130089948, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.0051204762021707095, 0.01216990545045915, 0.009407956144980023, 0.0070830630790135185, 0.014228732910347541, 0.014228732910347541, 0.049650793658194026, 0.056926573206638076, 0.04574999543532232, 0.057741019989329234, 0.06147745544989591, 0.07528345139876436, 0.07025334857513266, 0.11391895553792586, 0.09440234363551103, 0.4212487994092867, 0.4043435696278552, 0.39897490731742125, 0.3601295905831584, 0.34918026397545276, 0.35703155938726017, 0.42524033742872525, 0.4625409088938305, 0.4426684362192477, 0.07997351771417649, 0.07780636080532566, 0.06985982143337643, 0.0699447916103807, 0.0651429191921492, 0.058799408946023646, 0.07085630600946136, 0.05534911113074792, 0.06848200152369788, 0.14856462129074555, 0.13513893412903233, 0.15619562975007228, 0.16447552378659203, 0.13377875110357595, 0.16462030038328246, 0.14262011459292057, 0.1545176369770106, 0.13178379485858382, 0.20396058648766757, 0.20383322040165885, 0.21469046745374443, 0.197416759922452, 0.21127165800722147, 0.20394257118036418, 0.17168601090778068, 0.1636118547777956, 0.17328984474114262, 0.14626450755382192, 0.15648619945158693, 0.16992766140056714, 0.14209577327596912, 0.1627621261540918, 0.14753323398858975, 0.13821432774911013, 0.14150476756980856, 0.13468623830509696, 0.17354011296011773, 0.17053421591634854, 0.16654924200996934, 0.1598342019366752, 0.15412108740216424, 0.15797579922885363, 0.1947221140909956, 0.1953217058615765, 0.16390709015520932, 0.15075656812072014, 0.18666025237039652, 0.12559476793322777, 0.1396027617179516, 0.14363846749261777, 0.15473776217202617, 0.1635983751348542, 0.18142727254684332, 0.1590164541062462, 0.41821139170748445, 0.14363168862964049, 0.4196255734003377, 0.16652657923567915, 0.1776428912658219, 0.15194923812872696, 0.4143254981696475, 0.3906530516096238, 0.403365009484455, 0.3464480729710604, 0.3578841327918091, 0.4061381194067304, 0.1717273005583042, 0.21534598397324012, 0.1186899007858232, 0.30163257105304064, 0.30430097728688454, 0.31333595062133845, 0.20660125959811237, 0.18655096345039024, 0.1904155451998848, 0.1834605084041958, 0.19877182621537526, 0.18993379743376537, 0.1830409161083777, 0.18568675078485175, 0.18656646499869567, 0.06435645205183282, 0.05564044650592337, 0.058780598888551916, 0.06349331285721305, 0.06276585611548868, 0.06149415087566412, 0.057221367675444945, 0.06378820800267826, 0.05915796204067758]}, "mutation_prompt": null}
{"id": "267445a6-7b8e-4a5a-b04a-b4fbe78de8bc", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.adaptation_rate = 0.1  # Adapt to local optima at 10% of the budget\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Check for local optimum and adapt\n            if i > 0 and i % int(self.budget * self.adaptation_rate) == 0:\n                f_best = np.inf\n                x_best = None\n                for x in np.meshgrid(np.linspace(self.search_space[0], self.search_space[1], self.dim)):\n                    f_x = func(x)\n                    if f_x < f_best:\n                        f_best = f_x\n                        x_best = x\n                self.mean = x_best\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptation to Local Optima", "configspace": "", "generation": 61, "fitness": 0.17787752295819093, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.5069754477373245, 0.5128907540186507, 0.49432452997099086, 0.507087696587821, 0.49743170590620334, 0.5226514065484927, 0.5287496576342428, 0.52125618869703, 0.5049808114525305, 0.11301855617567602, 0.1934181748680257, 0.2673289769764442, 0.202032423638962, 0.24734213794843518, 0.23933820490751045, 0.2716616519670664, 0.18132402760729716, 0.24059007265620025, 0.07823844579630712, 0.08381708005965027, 0.06854408804245815, 0.07320128208144938, 0.07208268770545978, 0.07085476117983469, 0.07019378377873187, 0.07464867238427264, 0.08284355632237661, 0.07263192216426873, 0.05767286801299765, 0.05976098272626473, 0.06508601757076482, 0.05308538008543506, 0.06032687186098551, 0.059756070258412564, 0.06019996171354691, 0.0746422031896451, 0.17633071465753436, 0.15010504584896134, 0.15590306956635536, 0.4708076944168902, 0.4714134599678629, 0.45295178697768623, 0.2943138215194514, 0.25556181855524596, 0.26169434066016817, 0.16479511840420824, 0.1399007682290041, 0.12446290219320633, 0.14967825881028074, 0.16082430057352415, 0.13055394835947332, 0.2168097689340298, 0.15814546353535952, 0.2226391355523739, 0.18917926069829827, 0.15483300783671206, 0.2170140549708185, 0.18452342826380286, 0.37583014016316796, 0.19075799664957427, 0.19966032732105687, 0.28765203311208676, 0.19116572276536004, 0.25431763263269425, 0.05849627157967496, 0.2760340073149148, 0.2289505096094746, 0.27037988449252337, 0.3335611109517681, 0.2205798453168747, 0.2205798453168747, 0.22084965161468784, 0.21305306509027977, 0.20907355685271545, 0.2048998960274936, 0.09511364255355415, 0.18915601541143556, 0.1942029425419055, 0.1158890694520367, 0.08678174599300614, 0.22526840813788207, 0.0054795667104106105, 0.024117300422798915, 0.018822403443080282, 0.00879644028182569, 0.00879644028182569, 0.014057825797744616, 0.02548412352909346, 0.032831446567514244, 0.01512159840904681, 0.10647088459823317, 0.08077441838658306, 0.10269539598124833, 0.11135315933794754, 0.056453756706117963, 0.08511406099529306, 0.10767555250653349, 0.15423339129608704, 0.09589551440484556, 0.017013288663645487, 0.017013288663645487, 0.017013288663645487, 0.005087385814672829, 0.012129487533906635, 0.009379357358406337, 0.007052056482028779, 0.01418451099516227, 0.01418451099516227, 0.0495670497284032, 0.05683719369631013, 0.0456880486185115, 0.05764834709944555, 0.06137389930298265, 0.07515745935044904, 0.07013475827390359, 0.11375913563012019, 0.09426253646789973, 0.4207719119831618, 0.402578999417015, 0.4008240127399051, 0.35997192008901757, 0.34901348310294456, 0.3673807747242349, 0.4249958642279378, 0.46228377718460745, 0.44241360221912274, 0.07992497249676767, 0.07777104598077311, 0.06982447548650639, 0.06991654887526133, 0.06510119004962656, 0.058777365145784466, 0.07083252712971988, 0.05532903522286037, 0.06846796470595395, 0.15050104613708626, 0.13504253695601642, 0.15619562975007228, 0.16445407179346838, 0.13872418309640488, 0.1643113504433089, 0.1425883154756724, 0.1545176369770106, 0.13176757884863077, 0.2038970607349847, 0.20375678247052642, 0.21465356148605463, 0.19736382022311205, 0.21122361711579474, 0.20387822138640566, 0.17167145001731243, 0.16361033527371527, 0.17333128171268797, 0.14617666885141878, 0.15640759748604782, 0.1698598989294936, 0.14116344144114212, 0.16268992261149984, 0.1474639472903807, 0.13817094529011997, 0.1414661725896369, 0.13464169981286378, 0.17350174037719857, 0.17050086696387534, 0.16652502022704463, 0.1598129760665271, 0.15409634095015112, 0.15796454741031596, 0.19469101901934138, 0.19530276315494743, 0.163890853544848, 0.1507061608101372, 0.18663278795463234, 0.13951968938548776, 0.13956872969967027, 0.14361486677759516, 0.15471516223063575, 0.16356829798937034, 0.18140358715251914, 0.15899670015630074, 0.4112145071689002, 0.14360478829712375, 0.41900154251633637, 0.16650137447733127, 0.17762261701147053, 0.1519330805003537, 0.41409233271758106, 0.3904083763250382, 0.4031263196597511, 0.34615694404818265, 0.35762723064126867, 0.40587182087657003, 0.17169250530631286, 0.21534598397324012, 0.11557645949111561, 0.30134383778952667, 0.30211278563314503, 0.31306015340995463, 0.20659647931265002, 0.1865451035477086, 0.19040666858578414, 0.18345716991777294, 0.19877182621537526, 0.18993379743376537, 0.1830386649731447, 0.17228006509392946, 0.18690563549870032, 0.06434300571175577, 0.055622630585530186, 0.05876619787299153, 0.06339367737305124, 0.06274822711413619, 0.06526210232841256, 0.0572071682389278, 0.0637738670898349, 0.05913722472131844]}, "mutation_prompt": null}
{"id": "551f401a-510e-4b12-860e-3a072b622224", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nfrom scipy.stats import truncnorm\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.learning_rate = 0.1  # Adaptive learning rate\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            self.mean = (1 - self.learning_rate) * self.mean + self.learning_rate * new_mean  # Update mean with adaptive learning rate\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n            self.covariance = (1 - self.learning_rate) * self.covariance + self.learning_rate * new_covariance  # Update covariance with adaptive learning rate\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.covariance_update_rate = min(self.covariance_update_rate + 0.05, 1.0)  # Update covariance update rate\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Improved Covariance Update with Adaptive Learning Rate.", "configspace": "", "generation": 62, "fitness": 0.17777145025021074, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.4932425447758425, 0.5269071183553102, 0.4839573176145001, 0.47511971800524966, 0.47902266744345723, 0.5109977665540475, 0.5196170444963675, 0.5330263106536753, 0.48073106250861997, 0.2519026360160007, 0.2570803528620743, 0.256562971869451, 0.11406630674024654, 0.24067935012736708, 0.24744891834596094, 0.261462116573432, 0.19120184733648682, 0.2289241449495769, 0.07712676721951106, 0.05602204906772135, 0.07964770340784055, 0.06853198538539185, 0.0687132859470394, 0.05181531079004831, 0.08448489021322603, 0.07000329494562174, 0.07322962439924263, 0.07073940225861519, 0.060609904516518154, 0.06743136293570928, 0.058111936874858605, 0.05894799877910484, 0.06664802562998462, 0.047040067532513774, 0.056543417949433405, 0.0852577896467579, 0.1403023666604304, 0.11948098937711038, 0.10637241371622363, 0.4350580594520803, 0.4245356900683642, 0.42829652346162495, 0.2856235626115674, 0.2956485010878396, 0.21243576707257794, 0.14323224530602807, 0.1157108564110344, 0.10871829123887888, 0.13268363636087255, 0.18440094719880384, 0.11837441348217215, 0.2862722849289111, 0.14628618509485258, 0.1669167780485099, 0.1728989851825149, 0.15805517433963356, 0.2114353496314575, 0.18557779077126846, 0.16322514989664338, 0.1392179357934108, 0.18490214015026862, 0.25771859716313317, 0.2828354163038006, 0.268372792949758, 0.28722286222490556, 0.22185484196661298, 0.2785252142799317, 0.315541227902303, 0.307922358585363, 0.22097984531687476, 0.22097984531687476, 0.24028532744324183, 0.22397128491059415, 0.24405314386172028, 0.22798871489826467, 0.1934529798991872, 0.22825351604627375, 0.18329541451916853, 0.22506210763836443, 0.2016086579533991, 0.18574693085658878, 0.026896001530547053, 0.02057094953332339, 0.016042142957407135, 0.011281900007337975, 0.008849632849045719, 0.0194870700767229, 0.01992913668109597, 0.02471255529684624, 0.009945596890345798, 0.12216933624081683, 0.07996054022580612, 0.07430821794796394, 0.07222538076135843, 0.10200952434730448, 0.08097894221518254, 0.13096599929567443, 0.13089101483697285, 0.08100196913998792, 0.0170646011339477, 0.0170646011339477, 0.014764336645623377, 0.007267537098295529, 0.005653698181141031, 0.028188520153078378, 0.0070238350049468545, 0.022819898572906783, 0.01940247737974754, 0.059572593432866916, 0.056657648686931905, 0.06687616724825607, 0.05820708180309753, 0.0898294166983582, 0.07528345139876436, 0.08853053472204375, 0.07828089511219438, 0.09448652866519802, 0.46404281186779917, 0.3632389658134192, 0.4176361604216883, 0.31998028673997947, 0.3244355780527939, 0.454686509175246, 0.44274413877703733, 0.44413973243989935, 0.39400167025262733, 0.052434699596972445, 0.05327316564224549, 0.05433510457124757, 0.054848958207769694, 0.042571159801400804, 0.061809803455072365, 0.062340778204443836, 0.08455588423369231, 0.07847573365139959, 0.15426019372628785, 0.13537384283774767, 0.13724029959537198, 0.1545359140221908, 0.1309414988173958, 0.1324250525450349, 0.16055020720726154, 0.1265996595995068, 0.12810422144096223, 0.1834386858805963, 0.2121082258699546, 0.20009638642162086, 0.21302522559602954, 0.19209854464596465, 0.21887507906145653, 0.14688018593269658, 0.15638571715778748, 0.17253991677863412, 0.1355457288567128, 0.14783589190086643, 0.15767450534001093, 0.13760394292441014, 0.1450308784874642, 0.17041571483116313, 0.12592529566720312, 0.11345026462680596, 0.13265909740455595, 0.16661881857782068, 0.15998523192715453, 0.1881077850659656, 0.18186536830021216, 0.15518596981105515, 0.17711550486495176, 0.22579963311578577, 0.17434390737718897, 0.18197231545964565, 0.15688293426304412, 0.09237805858301651, 0.1574065551402407, 0.17387566596887705, 0.16364336449289674, 0.11161868355968285, 0.16953114663186863, 0.11155499051192252, 0.16201867414580773, 0.41032710111631987, 0.3893524492253164, 0.15052806170721666, 0.3821726001155845, 0.21029796936022482, 0.362100646148362, 0.37689868963248807, 0.3943427857537901, 0.3768114271344186, 0.3689531067749384, 0.15751388366595387, 0.3340917892272601, 0.13258524134929361, 0.21912984385217238, 0.18109864557102784, 0.2824585159498514, 0.2783261742023574, 0.3113591745237755, 0.19490542562306057, 0.1973707588517737, 0.18418448226302708, 0.19456206050961566, 0.18339079530197444, 0.1871284583811711, 0.17262795321243196, 0.19441439128907578, 0.1903807291258185, 0.08368543348635049, 0.05809429215320194, 0.05809366577633479, 0.0700810994125266, 0.05991260258407638, 0.06776849459413259, 0.08937012393389576, 0.05609796069724904, 0.06375263165055822]}, "mutation_prompt": null}
{"id": "fe6422d3-eada-4efc-9e67-7b723a1bd840", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.search_space_adaptation_rate = 0.2  # Update search space at 20% of the budget\n        self.search_space_update_func = self.update_search_space\n\n    def update_search_space(self):\n        # Update search space by shrinking it if the best solution is not improving\n        if np.all(self.mean >= self.search_space[0]) or np.all(self.mean <= self.search_space[1]):\n            self.search_space = np.array([self.search_space[0] - 0.5, self.search_space[1] + 0.5])\n        # Update search space by expanding it if the best solution is improving\n        elif np.any(self.mean >= self.search_space[1]) or np.any(self.mean <= self.search_space[0]):\n            self.search_space = np.array([self.search_space[0] + 0.5, self.search_space[1] - 0.5])\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space_update_func(self.search_space), self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space_update_func(self.search_space)[0], self.search_space_update_func(self.search_space)[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update and Dynamic Search Space Adaptation", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('CrowdSourcedMetaheuristic.update_search_space() takes 1 positional argument but 2 were given').", "error": "TypeError('CrowdSourcedMetaheuristic.update_search_space() takes 1 positional argument but 2 were given')", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {}, "mutation_prompt": null}
{"id": "b9a67ec2-bd70-43ec-8dac-069510e7aec3", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.search_space_adaptation_rate = 0.2  # Adapt search space at 20% of the budget\n        self.population_size = 10  # Initialize population size\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Adapt search space\n        if i % int(self.budget * self.search_space_adaptation_rate) == 0:\n            # Calculate new search space bounds\n            new_bounds = np.array([np.mean(self.mean) - 1.5 * np.std(self.mean), np.mean(self.mean) + 1.5 * np.std(self.mean)])\n            self.search_space = np.array([new_bounds[0], new_bounds[1]])\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update and Adaptive Search Space", "configspace": "", "generation": 64, "fitness": 0.1778935299431862, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.5084359135705623, 0.5132307376564615, 0.4922191553298758, 0.502296178518183, 0.4974416216245272, 0.522977227389228, 0.5290777021858817, 0.5215921083983723, 0.5053284784874343, 0.11317141719097201, 0.19370490274750674, 0.2677134604854021, 0.20233594077444406, 0.24772378976897547, 0.2396921987298064, 0.27206165196706644, 0.18156686886475282, 0.24097418467079001, 0.07845815981250892, 0.08388194411265848, 0.068596101581193, 0.07324605313510035, 0.07214032677020654, 0.07089486672433065, 0.07026785583804229, 0.07469512066751016, 0.08304860969216066, 0.07320001807878418, 0.05771890207782038, 0.05981503444363734, 0.06512850332198372, 0.054020650357618605, 0.060382610625549726, 0.05586749811368119, 0.06025413539234392, 0.07469307644661671, 0.17641557939267039, 0.15018145692527907, 0.1562702268937024, 0.47117182403489355, 0.49310749849631497, 0.45331745993848604, 0.29434908667608295, 0.2566569442841603, 0.26205382396406685, 0.1649288894153459, 0.1400256164250282, 0.1245532228818762, 0.14980513805899442, 0.1609399651898762, 0.13327255372263447, 0.21724769880188854, 0.1540128128820254, 0.22286234851381792, 0.18925288026611875, 0.1548810250513718, 0.19887168081827356, 0.18461424353619538, 0.3761836903833695, 0.1908656927319009, 0.19978258117304215, 0.2880179520666797, 0.19128541931793852, 0.2547176326326942, 0.058549136104703914, 0.27643400731491485, 0.22925785203106297, 0.2707515672218437, 0.33396111095176817, 0.22097984531687476, 0.22097984531687476, 0.2212494419206742, 0.2134314080242914, 0.20945476577683286, 0.20528422953392433, 0.09551364255355421, 0.18955601541143552, 0.19459614501929268, 0.11628906945203676, 0.08717807949004241, 0.22565421567361577, 0.005509668705249715, 0.024174635366773556, 0.01887628377317707, 0.008849632849045719, 0.008849632849045719, 0.014090038845464004, 0.0255581082287214, 0.032913326995708814, 0.015178735259099962, 0.10659303575079959, 0.08012959929472219, 0.10276805731208571, 0.11145628562324217, 0.05656200610401507, 0.07672951261340144, 0.10778674158391355, 0.15436434429509205, 0.09601359130089948, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.0051204762021707095, 0.01216990545045915, 0.009407956144980023, 0.0070830630790135185, 0.014228732910347541, 0.014228732910347541, 0.049650793658194026, 0.056926573206638076, 0.04574999543532232, 0.057741019989329234, 0.06147745544989591, 0.07528345139876436, 0.07025334857513266, 0.11391895553792586, 0.09440234363551103, 0.4212487994092867, 0.4043435696278552, 0.39897490731742125, 0.3601295905831584, 0.34918026397545276, 0.35703155938726017, 0.42524033742872525, 0.4625409088938305, 0.4426684362192477, 0.07997351771417649, 0.07780636080532566, 0.06985982143337643, 0.0699447916103807, 0.0651429191921492, 0.058799408946023646, 0.07085630600946136, 0.05534911113074792, 0.06848200152369788, 0.14856462129074555, 0.13513893412903233, 0.15619562975007228, 0.16447552378659203, 0.13377875110357595, 0.16462030038328246, 0.14262011459292057, 0.1545176369770106, 0.13178379485858382, 0.20396058648766757, 0.20383322040165885, 0.21469046745374443, 0.197416759922452, 0.21127165800722147, 0.20394257118036418, 0.17168601090778068, 0.1636118547777956, 0.17328984474114262, 0.14626450755382192, 0.15648619945158693, 0.16992766140056714, 0.14209577327596912, 0.1627621261540918, 0.14753323398858975, 0.13821432774911013, 0.14150476756980856, 0.13468623830509696, 0.17354011296011773, 0.17053421591634854, 0.16654924200996934, 0.1598342019366752, 0.15412108740216424, 0.15797579922885363, 0.1947221140909956, 0.1953217058615765, 0.16390709015520932, 0.15075656812072014, 0.18666025237039652, 0.12559476793322777, 0.1396027617179516, 0.14363846749261777, 0.15473776217202617, 0.1635983751348542, 0.18142727254684332, 0.1590164541062462, 0.41821139170748445, 0.14363168862964049, 0.4196255734003377, 0.16652657923567915, 0.1776428912658219, 0.15194923812872696, 0.4143254981696475, 0.3906530516096238, 0.403365009484455, 0.3464480729710604, 0.3578841327918091, 0.4061381194067304, 0.1717273005583042, 0.21534598397324012, 0.1186899007858232, 0.30163257105304064, 0.30430097728688454, 0.31333595062133845, 0.20660125959811237, 0.18655096345039024, 0.1904155451998848, 0.1834605084041958, 0.19877182621537526, 0.18993379743376537, 0.1830409161083777, 0.18568675078485175, 0.18656646499869567, 0.06435645205183282, 0.05564044650592337, 0.058780598888551916, 0.06349331285721305, 0.06276585611548868, 0.06149415087566412, 0.057221367675444945, 0.06378820800267826, 0.05915796204067758]}, "mutation_prompt": null}
{"id": "0e57d02d-84ff-40c9-bf21-73d096e54e7e", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.learning_rate = 0.01  # Adaptive learning rate\n        self.learning_rate_update_rate = 0.1  # Update learning rate at 10% of the budget\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + self.learning_rate * np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + self.learning_rate * np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n        # Update learning rate\n        if i > 0 and i % int(self.budget * self.learning_rate_update_rate) == 0:\n            self.learning_rate *= 0.9\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update and Adaptive Learning Rate", "configspace": "", "generation": 65, "fitness": 0.15317307877792274, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.12.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.4738778848537649, 0.4485135938938264, 0.4667913454207704, 0.45188855991849386, 0.4584807320444898, 0.46119246585188234, 0.46041765156030445, 0.4726834776443186, 0.46585039052997834, 0.1587645484060375, 0.24044217963092274, 0.21763432750013312, 0.13695782836694603, 0.2297941678652028, 0.13755235117953557, 0.2521776743293128, 0.2086508689868264, 0.23882566107722614, 0.05575418389255482, 0.05445609449497646, 0.0574026016040341, 0.07855805302254926, 0.051328335391384594, 0.06295502731226166, 0.057468672913785435, 0.056886456309134914, 0.050780409341309674, 0.045400885486378106, 0.059690560047394814, 0.05842159602089925, 0.04920959123842772, 0.0521624952324089, 0.055823294361095566, 0.05202535628012794, 0.0851843760217107, 0.05269946129961611, 0.13942470335243595, 0.11012381860121945, 0.10429008493705183, 0.4127280774976131, 0.4194504792440584, 0.4185778165378361, 0.25710362766855266, 0.22096994852755825, 0.16376738052048678, 0.11592270780479086, 0.12902036583986942, 0.1273363655930625, 0.11447516296091109, 0.13260004226185973, 0.11447516296091109, 0.18959632495208711, 0.1341638302332585, 0.15659096804147188, 0.14345622971314353, 0.11159489245946008, 0.13402666087756843, 0.16712816031746136, 0.1392179357934108, 0.15421242684092173, 0.14664199953541934, 0.279696917641977, 0.2577090548520018, 0.17088613936778307, 0.20591304769565744, 0.24126320392146605, 0.30486704597077263, 0.21044000081420278, 0.29814844047271305, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.24485383518482273, 0.26374875059662684, 0.2278681606640559, 0.13465358006013484, 0.07834723235185725, 0.19049473999888367, 0.1580531781732727, 0.2267376282875, 0.21692115498500897, 0.014160599516959915, 0.021226277975614494, 0.005483518160016132, 0.004969713144567844, 0.019410520738028625, 0.008849632849045719, 0.0298380031138773, 0.027535241693391277, 0.031080272781332297, 0.079223307537298, 0.07463404168794974, 0.04464056576783437, 0.09116226224717083, 0.0701748046813262, 0.07178220712283123, 0.08674010608712412, 0.10004810362248173, 0.08120732482912374, 0.0170646011339477, 0.010115162581999182, 0.013897066561195381, 0.007723900455615662, 0.016312424226958888, 0.012698362593612345, 0.01414503706954584, 0.014228732910347541, 0.0178820419099196, 0.0657401597022288, 0.05332424831536464, 0.06526782166122214, 0.06118659010122851, 0.05393489456845624, 0.05487368301476214, 0.1509509261331976, 0.04984028958296094, 0.0688816785160492, 0.36821565960910074, 0.3350076939557878, 0.33639683320274294, 0.30145984573506746, 0.3106547502607956, 0.2676359934788395, 0.4055767122071666, 0.4555469652068539, 0.37006544938089736, 0.0618063649606142, 0.051804505383391763, 0.05084407077435904, 0.04606762417491339, 0.05001644039384168, 0.04392046898114055, 0.042950717879335354, 0.04196666597407184, 0.040596650108494226, 0.0839836833218306, 0.10151324211991053, 0.13367440788933038, 0.08981450167651239, 0.09082561851885895, 0.1090517115110351, 0.09405878998760964, 0.11856912858392188, 0.08063212810186982, 0.18444820971284603, 0.16723510779409057, 0.1750598457063346, 0.19980914035279962, 0.17238595012296742, 0.18395292018022968, 0.1747446739300096, 0.1373108555473873, 0.1338351160474076, 0.12804944242578076, 0.1254743671632652, 0.1204072795257447, 0.14234413410917734, 0.0951715346591191, 0.13055871736628089, 0.12514692901948687, 0.09567005384751359, 0.0995869263419148, 0.22026090073260796, 0.10235124846585753, 0.1531665211468617, 0.22166175586140313, 0.10195635909382184, 0.12349267933125374, 0.21695814977826433, 0.1301493818907653, 0.13521917406059913, 0.09230728824553258, 0.08701670266551176, 0.09296169877568516, 0.081456483388469, 0.09562902444929, 0.0982173637836562, 0.08256199538357212, 0.09422542671574208, 0.08791539049328789, 0.1066153541925774, 0.336791029019866, 0.09295816064901286, 0.3823482189483475, 0.09387110735639037, 0.07745644166421839, 0.3312925698486102, 0.3452540950486136, 0.3255615691484187, 0.3128245754720568, 0.3316979646008271, 0.07710726418153879, 0.2678006722670291, 0.2688072356992153, 0.2486003753979158, 0.28755542386862276, 0.066348108186012, 0.28388335183348723, 0.18020244522728823, 0.17770747477095883, 0.1994567474876756, 0.18150714344994923, 0.17609799568807882, 0.18917818666249342, 0.190597277291933, 0.1918813397417639, 0.17997812020998494, 0.05890155597447899, 0.035500030980612385, 0.04905698373741729, 0.059961423564246275, 0.04267162754262499, 0.044884332362524204, 0.051002215384117644, 0.03932811230594746, 0.05196901078723748]}, "mutation_prompt": null}
{"id": "23f5e528-2a7c-4fed-95ba-fbf9d08b3fe9", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.adaptive_budget = 0.2  # Allocate 20% of the budget for adaptive optimization\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Allocate adaptive budget for final optimization\n        adaptive_budget = int(self.budget * self.adaptive_budget)\n        final_bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, final_bounds, x0=self.mean, seed=42, maxiter=adaptive_budget)\n\n        # Print final best solution\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update and Adaptive Budget Allocation", "configspace": "", "generation": 66, "fitness": 0.1778935299431862, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.5084359135705623, 0.5132307376564615, 0.4922191553298758, 0.502296178518183, 0.4974416216245272, 0.522977227389228, 0.5290777021858817, 0.5215921083983723, 0.5053284784874343, 0.11317141719097201, 0.19370490274750674, 0.2677134604854021, 0.20233594077444406, 0.24772378976897547, 0.2396921987298064, 0.27206165196706644, 0.18156686886475282, 0.24097418467079001, 0.07845815981250892, 0.08388194411265848, 0.068596101581193, 0.07324605313510035, 0.07214032677020654, 0.07089486672433065, 0.07026785583804229, 0.07469512066751016, 0.08304860969216066, 0.07320001807878418, 0.05771890207782038, 0.05981503444363734, 0.06512850332198372, 0.054020650357618605, 0.060382610625549726, 0.05586749811368119, 0.06025413539234392, 0.07469307644661671, 0.17641557939267039, 0.15018145692527907, 0.1562702268937024, 0.47117182403489355, 0.49310749849631497, 0.45331745993848604, 0.29434908667608295, 0.2566569442841603, 0.26205382396406685, 0.1649288894153459, 0.1400256164250282, 0.1245532228818762, 0.14980513805899442, 0.1609399651898762, 0.13327255372263447, 0.21724769880188854, 0.1540128128820254, 0.22286234851381792, 0.18925288026611875, 0.1548810250513718, 0.19887168081827356, 0.18461424353619538, 0.3761836903833695, 0.1908656927319009, 0.19978258117304215, 0.2880179520666797, 0.19128541931793852, 0.2547176326326942, 0.058549136104703914, 0.27643400731491485, 0.22925785203106297, 0.2707515672218437, 0.33396111095176817, 0.22097984531687476, 0.22097984531687476, 0.2212494419206742, 0.2134314080242914, 0.20945476577683286, 0.20528422953392433, 0.09551364255355421, 0.18955601541143552, 0.19459614501929268, 0.11628906945203676, 0.08717807949004241, 0.22565421567361577, 0.005509668705249715, 0.024174635366773556, 0.01887628377317707, 0.008849632849045719, 0.008849632849045719, 0.014090038845464004, 0.0255581082287214, 0.032913326995708814, 0.015178735259099962, 0.10659303575079959, 0.08012959929472219, 0.10276805731208571, 0.11145628562324217, 0.05656200610401507, 0.07672951261340144, 0.10778674158391355, 0.15436434429509205, 0.09601359130089948, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.0051204762021707095, 0.01216990545045915, 0.009407956144980023, 0.0070830630790135185, 0.014228732910347541, 0.014228732910347541, 0.049650793658194026, 0.056926573206638076, 0.04574999543532232, 0.057741019989329234, 0.06147745544989591, 0.07528345139876436, 0.07025334857513266, 0.11391895553792586, 0.09440234363551103, 0.4212487994092867, 0.4043435696278552, 0.39897490731742125, 0.3601295905831584, 0.34918026397545276, 0.35703155938726017, 0.42524033742872525, 0.4625409088938305, 0.4426684362192477, 0.07997351771417649, 0.07780636080532566, 0.06985982143337643, 0.0699447916103807, 0.0651429191921492, 0.058799408946023646, 0.07085630600946136, 0.05534911113074792, 0.06848200152369788, 0.14856462129074555, 0.13513893412903233, 0.15619562975007228, 0.16447552378659203, 0.13377875110357595, 0.16462030038328246, 0.14262011459292057, 0.1545176369770106, 0.13178379485858382, 0.20396058648766757, 0.20383322040165885, 0.21469046745374443, 0.197416759922452, 0.21127165800722147, 0.20394257118036418, 0.17168601090778068, 0.1636118547777956, 0.17328984474114262, 0.14626450755382192, 0.15648619945158693, 0.16992766140056714, 0.14209577327596912, 0.1627621261540918, 0.14753323398858975, 0.13821432774911013, 0.14150476756980856, 0.13468623830509696, 0.17354011296011773, 0.17053421591634854, 0.16654924200996934, 0.1598342019366752, 0.15412108740216424, 0.15797579922885363, 0.1947221140909956, 0.1953217058615765, 0.16390709015520932, 0.15075656812072014, 0.18666025237039652, 0.12559476793322777, 0.1396027617179516, 0.14363846749261777, 0.15473776217202617, 0.1635983751348542, 0.18142727254684332, 0.1590164541062462, 0.41821139170748445, 0.14363168862964049, 0.4196255734003377, 0.16652657923567915, 0.1776428912658219, 0.15194923812872696, 0.4143254981696475, 0.3906530516096238, 0.403365009484455, 0.3464480729710604, 0.3578841327918091, 0.4061381194067304, 0.1717273005583042, 0.21534598397324012, 0.1186899007858232, 0.30163257105304064, 0.30430097728688454, 0.31333595062133845, 0.20660125959811237, 0.18655096345039024, 0.1904155451998848, 0.1834605084041958, 0.19877182621537526, 0.18993379743376537, 0.1830409161083777, 0.18568675078485175, 0.18656646499869567, 0.06435645205183282, 0.05564044650592337, 0.058780598888551916, 0.06349331285721305, 0.06276585611548868, 0.06149415087566412, 0.057221367675444945, 0.06378820800267826, 0.05915796204067758]}, "mutation_prompt": null}
{"id": "b9a3c68b-a320-4cbc-b7cb-233633f23464", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.pso_particle_count = 10  # Initialize particle count for PSO\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform PSO to improve convergence\n        self.pso(self.mean, func)\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def pso(self, x, func):\n        particles = np.random.uniform(self.search_space[0], self.search_space[1], size=(self.pso_particle_count, self.dim))\n        velocities = np.zeros((self.pso_particle_count, self.dim))\n        best_particles = np.zeros((self.pso_particle_count, self.dim))\n        best_fitness = np.inf\n\n        for _ in range(10):\n            for i in range(self.pso_particle_count):\n                # Evaluate function at particle\n                f_particle = func(particles[i])\n\n                # Update velocities and particles\n                velocities[i] = 0.5 * velocities[i] + 1.0 * np.random.normal(0, 0.1, size=self.dim)\n                particles[i] = particles[i] + velocities[i]\n\n                # Clip values to search space\n                particles[i] = np.clip(particles[i], self.search_space[0], self.search_space[1])\n\n                # Update best fitness and particles\n                if f_particle < best_fitness:\n                    best_fitness = f_particle\n                    best_particles[i] = particles[i]\n\n        # Update mean with best particles\n        self.mean = np.mean(best_particles, axis=0)\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Particle Swarm Optimization with Improved Covariance Update", "configspace": "", "generation": 67, "fitness": 0.17417421090577023, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.12.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.5098405387437723, 0.49633683823892516, 0.49863582393871053, 0.5007360577982655, 0.49564626362500397, 0.5333337869300037, 0.5130753740367741, 0.509649554655743, 0.4735242405867962, 0.11592594620018049, 0.2250157713641695, 0.24472122490411086, 0.13208014089436693, 0.15721518531394685, 0.18495739725627747, 0.21864018502880989, 0.23022955829571878, 0.22565601276295066, 0.07188171168981805, 0.078109611728991, 0.06690825952815116, 0.07232486462731536, 0.07830946228975444, 0.07516709505664254, 0.06457399932357089, 0.06726578805384831, 0.0623233566595347, 0.07466151300395663, 0.06490514110849677, 0.06405003915056717, 0.05570768669938586, 0.05629214951540218, 0.0641698596598046, 0.05702111789311859, 0.06613629480078109, 0.06323848906296992, 0.17110760101783995, 0.15266012844473587, 0.1375550968477781, 0.44347399357667905, 0.47185965459999324, 0.4293973328789139, 0.25844947142604113, 0.2740287127143022, 0.27087984814323063, 0.1541693995521255, 0.14633881488338485, 0.13266352117397728, 0.14717957155794448, 0.15804981942792407, 0.13030578381631508, 0.25851540121089434, 0.22247340148366934, 0.18508307720029138, 0.18622429840959887, 0.17868745485264403, 0.1710925847020056, 0.17263805577010427, 0.19096943682161394, 0.19020442639806534, 0.22443503192142344, 0.3603812588581814, 0.3484323348632258, 0.15429648009668961, 0.17510212139021952, 0.1939281205243858, 0.22650462251380354, 0.05445687493970186, 0.320549061701457, 0.21097984531687475, 0.21097984531687475, 0.21125643172113273, 0.24483056493224342, 0.23895683577017923, 0.2077359937656117, 0.1082916261757928, 0.17201351271166787, 0.17265158855825935, 0.1789744255314838, 0.07849458702042666, 0.154857048951889, 0.010509086680292046, 0.002814453456699284, 0.030755592860041148, 0.01364755813292795, 0.0020309516109282555, 0.010609261808974813, 0.02599640985375662, 0.025688086388592102, 0.03403074706512821, 0.07951260274706551, 0.06729130667985794, 0.11356697847742747, 0.10748575252957815, 0.0927926720879203, 0.09557414402871522, 0.10510542031887304, 0.1276041255204049, 0.11521156503563401, 0.01578381735908385, 0.01578381735908385, 0.01578381735908385, 0.01365574566341643, 0.009687013996558691, 0.006128554777800277, 0.017387746688267036, 0.009976050601259834, 0.013851852611274973, 0.06264120240352822, 0.05664958407280629, 0.06140229547101861, 0.058889058756673496, 0.05228573672483816, 0.07025776382584481, 0.08377711210218419, 0.07004103736315825, 0.07725064578434326, 0.4042267940618357, 0.40687686496160147, 0.38851598597053394, 0.3561878282296379, 0.3800709121529027, 0.36144560708000195, 0.3763318368463435, 0.4422965757126125, 0.4019395873596593, 0.06765936829244801, 0.08519059655536543, 0.06688266137508037, 0.06423506325724393, 0.06257360556478941, 0.06403715769923346, 0.08008957199478972, 0.05874902450052555, 0.06560390179147724, 0.14856462129074555, 0.13449219635289356, 0.15619562975007228, 0.16447552378659203, 0.14212040297341477, 0.16462030038328246, 0.13110752494177447, 0.1545176369770106, 0.12948676894642608, 0.20750044609199092, 0.1946520207001473, 0.23484718301787966, 0.2179341619404167, 0.22069150511404, 0.21110540216262574, 0.1820517229653048, 0.2071702670111223, 0.1757212861893016, 0.14448252114671356, 0.1606418409131225, 0.16711589998313325, 0.14128274914124517, 0.1529482364058231, 0.14520598968629927, 0.13660560491872786, 0.140588839726575, 0.13357277599926798, 0.15618297973676432, 0.16628447029599935, 0.17436657781554366, 0.16417262069703753, 0.16261297544095688, 0.16289207950705054, 0.18179800481831665, 0.2379867218078986, 0.18600333517436551, 0.13389446472874134, 0.17528407611601582, 0.13511801963385894, 0.1363362030609997, 0.14413273644157598, 0.1473111245658918, 0.15943551578433068, 0.1668334168075296, 0.15568838905796145, 0.2969742146011376, 0.33901670573897846, 0.3836099823087721, 0.15332851869694564, 0.39493763258559067, 0.1519757661722131, 0.408877637760365, 0.3846141027066393, 0.39753564158282484, 0.29576038839220975, 0.16962677345186672, 0.19181822096756573, 0.17173838745929004, 0.35769489670769916, 0.15122627707057168, 0.2815400743085956, 0.2648316822196244, 0.28991589546167396, 0.20660125959811237, 0.1852403271972155, 0.18409811602321646, 0.18337704624362228, 0.19877182621537526, 0.19521273915371617, 0.18178353711193285, 0.18379772753793677, 0.1858363996266582, 0.06117770523538546, 0.05485691938859072, 0.06058101366411761, 0.055201160174457975, 0.05786101303951019, 0.061605756573123505, 0.05954592633160172, 0.0624652044706443, 0.057806358334450136]}, "mutation_prompt": null}
{"id": "28f28718-fd84-4395-8f78-d46c6377e5db", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.model_selection import train_test_split\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.ensemble_size = 10  # Size of the ensemble\n        self.ensemble_replacement = True  # Whether to replace the old ensemble with the new one\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Ensemble selection\n        X = np.array([self.mean] * self.ensemble_size)\n        y = np.array([func(x) for x in self.mean])\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n        model = BaggingRegressor(n_estimators=10, random_state=42)\n        model.fit(X_train, y_train)\n        predictions = model.predict(X_test)\n        best_index = np.argmax(predictions)\n        best_solution = self.mean[best_index]\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=best_solution, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Ensemble Selection with Improved Covariance Update", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'sklearn'\").", "error": "ModuleNotFoundError(\"No module named 'sklearn'\")", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {}, "mutation_prompt": null}
{"id": "f3e75b81-1f17-4584-9819-16e8d4b295ab", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.learning_rate = 0.1  # Initialize learning rate\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.learning_rate, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update and Adaptive Learning Rate", "configspace": "", "generation": 69, "fitness": 0.16146352095738917, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.12.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.4868272925972019, 0.5130773991635831, 0.4531905258672576, 0.45628986629716417, 0.46404383024614904, 0.48891640329750097, 0.49652823933707546, 0.5020957207408157, 0.4776838612315276, 0.2145566879181675, 0.13345715123482826, 0.11060964579987653, 0.21668820130077726, 0.24030493785459794, 0.22878689247471706, 0.22892671790865793, 0.15355388618755095, 0.26847490484127756, 0.06421401234096957, 0.05196407401904013, 0.07175488201779068, 0.057928082635208544, 0.08343316528673728, 0.05477593730643915, 0.08871335800166491, 0.059818857845563955, 0.05204582008329617, 0.05274279281154637, 0.04589351113079443, 0.057448509789543634, 0.0415924357965316, 0.04357191315829334, 0.05079898232746871, 0.06000442729484201, 0.06000442729484201, 0.08212842395883202, 0.12213549552131298, 0.11493508014509357, 0.112619346850381, 0.41339157047726116, 0.41980312202553083, 0.40119074610356986, 0.17902764191460296, 0.2607823331738065, 0.2255868843531712, 0.12929993124302697, 0.11646451588477302, 0.10987561268516854, 0.11722765398332702, 0.15511054700767124, 0.11447516296091109, 0.19070465420756388, 0.17183800619844658, 0.18203779845574086, 0.17340584150062788, 0.12153485870611691, 0.1451941411500065, 0.1471671813968023, 0.13675958403964428, 0.15049893210378062, 0.2591640356640491, 0.26052804102736626, 0.28058588879139945, 0.28955601875677517, 0.2139943736769766, 0.27912815862624263, 0.3074887402234644, 0.24680980081752213, 0.27410464092483866, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.12466062030140479, 0.2650557329036213, 0.05214562364229547, 0.13092999767729674, 0.21913670383548212, 0.17337657494903125, 0.07266455826426277, 0.21800801788992052, 0.165301329413866, 0.021527597834549494, 0.005867720366102169, 0.010729773644398088, 0.019409427361217202, 0.008849632849045719, 0.008849632849045719, 0.022020963386570114, 0.008147503585343663, 0.009769103440199212, 0.12304955495573555, 0.08895844801967268, 0.08417645347496872, 0.09779103039232617, 0.07750025942913707, 0.07133696949922519, 0.09869797576287898, 0.1013081427057112, 0.07005463450352312, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.00390541891124907, 0.01605105603495771, 0.01875971444875757, 0.01277091625222293, 0.010116682988011383, 0.014228732910347541, 0.04952777203235581, 0.056248158129748704, 0.05989488390527764, 0.05820708180309753, 0.06865720427658928, 0.10604762582207061, 0.07356604946975331, 0.061753658875686734, 0.1038798369236198, 0.38262113630469885, 0.35198353353092904, 0.3750492935861608, 0.30389214621601846, 0.3074137808943863, 0.4200103106878621, 0.41397908612516954, 0.38589020753571657, 0.38531897909735946, 0.05022127339723481, 0.06632620082960128, 0.055309146025911304, 0.04731103666326164, 0.04237970069071051, 0.044148109460765084, 0.0724495548417442, 0.058336170164225765, 0.04256841655310839, 0.12861757449029432, 0.1336591560675322, 0.1343178487598521, 0.1361837289721174, 0.1208711821715065, 0.15127610842110717, 0.14257867223262055, 0.12173514428383536, 0.14606179670931763, 0.1903722647253503, 0.18723265993960947, 0.18250995600737763, 0.20025229241816156, 0.1817831987075278, 0.20483560450391425, 0.15027185173239233, 0.1419319048944484, 0.16825593271129125, 0.13045949499778686, 0.13452182611630303, 0.1306793250462841, 0.14524650004295636, 0.12045742633906065, 0.1457697921943354, 0.10376623670792173, 0.10138545178742808, 0.12704408524712107, 0.18127973836307842, 0.13904910137858917, 0.16656802837446716, 0.1724970315616352, 0.13637826184443458, 0.15958830655295386, 0.20554322277025472, 0.15339389146940852, 0.17441356796275864, 0.09117047766903996, 0.09259084869206269, 0.1523013754336382, 0.09999622261462648, 0.08624439296535236, 0.09393284053492168, 0.11173634211866446, 0.08782933368244883, 0.14781239854840245, 0.42711008166453435, 0.1128067661833898, 0.142263607084684, 0.3325387154391143, 0.17135135754191544, 0.2928721396678259, 0.3593873466142561, 0.36909063565787603, 0.35311932127511514, 0.2858756051737116, 0.12557831768511585, 0.2814018185210643, 0.2746543704542732, 0.30302327272184415, 0.15873960604070125, 0.25643422206164224, 0.15206545916472136, 0.2738272566227675, 0.20177423892659585, 0.1792982977771479, 0.1765654067945912, 0.20842584389756869, 0.18755572153406352, 0.1741833648266624, 0.18702812078846287, 0.1888421218294799, 0.1824912279514741, 0.058001622292087496, 0.043948380241145446, 0.06339770127339928, 0.0448422093876798, 0.047487396348448785, 0.05487439782802561, 0.061782056197342894, 0.0609406547067014, 0.05058715018342641]}, "mutation_prompt": null}
{"id": "a018d79a-80be-4a07-92d4-4991c1ff2b75", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nfrom skopt import gp_minimize\nfrom skopt.space import Real, Categorical, Integer\nfrom skopt.utils import use_named_args\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.ensemble_size = 5  # Ensemble size for multi-objective optimization\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform multi-objective optimization using ensemble selection\n        def ensemble_func(x):\n            return [func(x)] * self.ensemble_size\n\n        space = [Real(-5.0, 5.0, name='x{}'.format(i)) for i in range(self.dim)]\n        bounds = [space] * self.ensemble_size\n        res_gp = gp_minimize(ensemble_func, space, n_calls=self.budget, verbose=False, random_state=42)\n        print(f\"Multi-objective optimization best solution: x = {res_gp.x}, f(x) = {res_gp.fun}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res_de = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res_de.x}, f(x) = {res_de.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Multi-Objective Optimization with Improved Covariance Update and Ensemble Selection", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'skopt'\").", "error": "ModuleNotFoundError(\"No module named 'skopt'\")", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {}, "mutation_prompt": null}
{"id": "3e26dccb-ef50-42f1-a014-e249e363a314", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.learning_rate = 0.1  # Initialize learning rate\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.mean + self.learning_rate * (new_mean - self.mean)  # Update mean using adaptive learning rate\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update and Adaptive Learning Rate", "configspace": "", "generation": 71, "fitness": 0.16675687015021498, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.12.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.46817171808415314, 0.5016830999118651, 0.4631161784088993, 0.4635172139731296, 0.4648515322835086, 0.4796587385275577, 0.5018395106909732, 0.49586980918991996, 0.46578688165233995, 0.2538370107511879, 0.12587635961674715, 0.24346209039809075, 0.21408340205305376, 0.1947570493152213, 0.22944843423759442, 0.24811433304499675, 0.2432256288546214, 0.26232249884651104, 0.06527929099751417, 0.054085524048267275, 0.08023045608324686, 0.062047137295823784, 0.06839563772804502, 0.051225838630533094, 0.09621462267248249, 0.06174165689276123, 0.0732296231448023, 0.0597101812007893, 0.05692915210020655, 0.07013629720920833, 0.049949927675103534, 0.05249528337456488, 0.05900115480731327, 0.047040067532513774, 0.05269946129961611, 0.07799417872669945, 0.1318162915612482, 0.11132002997385204, 0.10168184057231777, 0.4245996047227554, 0.41016658193456024, 0.41896949071170053, 0.27291516508318214, 0.2830223441117855, 0.2026189080719678, 0.11291809274313913, 0.10569944566943412, 0.10871829123887888, 0.11979744046850915, 0.15095760194574526, 0.11447516296091109, 0.17362439671971241, 0.14038890826373718, 0.1669167780485099, 0.16106514988725562, 0.13777969367047094, 0.19748558618766454, 0.16052790682086904, 0.14696086300710798, 0.1392179357934108, 0.16042760766910347, 0.24811653393090638, 0.25896576153393647, 0.26009426757381937, 0.2856924626936266, 0.2218547351809459, 0.2782936789226066, 0.3107862966606937, 0.32151961311623944, 0.22097984531687476, 0.22097984531687476, 0.23124617057883257, 0.22397128491059415, 0.2440542233087606, 0.21254422970497877, 0.1647648163224814, 0.2249142925818146, 0.18329508184923837, 0.22256170380157714, 0.20110529085442197, 0.17466906251309444, 0.026896001530547053, 0.02057094953332339, 0.016042142957407135, 0.011281900007337975, 0.008849632849045719, 0.019487070076741886, 0.019929136681062665, 0.02471255529684624, 0.009945596890491237, 0.11004021668824482, 0.07817279405582811, 0.0924554891890681, 0.09144782130160534, 0.0929195170406858, 0.0723898901727178, 0.09367532962681546, 0.13144570228533647, 0.0803664205995176, 0.0170646011339477, 0.0170646011339477, 0.01476433664563559, 0.007267537098445076, 0.005653698181141031, 0.028188520152921948, 0.007023835004979051, 0.022819898572911, 0.01940247737974965, 0.059572593432866916, 0.056657648686931905, 0.07259765481247682, 0.05820708180309753, 0.0898294167023147, 0.07528345139876436, 0.07799688043077968, 0.07828089513192249, 0.09448652863383866, 0.4441493384344176, 0.3335585471943464, 0.4005404248587817, 0.30389214621601846, 0.3079405687811002, 0.40674967379882154, 0.4195907787153884, 0.3438978493315533, 0.374484414416569, 0.05243469959760294, 0.05327316564224549, 0.05243763829042147, 0.05016239065724515, 0.03717753311408101, 0.047705754173116066, 0.06098792318687207, 0.06016824431387957, 0.0646444611040643, 0.12464865216393883, 0.12442069433937053, 0.15370472625873877, 0.12186219332567139, 0.12652482206393956, 0.15392282493376552, 0.14310204246327118, 0.14287913192869273, 0.1300390988625908, 0.18030825168837927, 0.20421778257466272, 0.19187632322967874, 0.2004801325771136, 0.1868914353362071, 0.21173205093179348, 0.13857534201636268, 0.14711072928724256, 0.16875182460827476, 0.13045949499778686, 0.1428490589839485, 0.13450626933406862, 0.13047311033313036, 0.13202987165795732, 0.15585522714811217, 0.12182466138523906, 0.10633769487421718, 0.13521591598218352, 0.17988167685008505, 0.155178936144463, 0.17895800273419804, 0.17249703156162832, 0.15135682875653456, 0.16555065176641326, 0.22255532703359227, 0.17029134696492476, 0.18245618179321377, 0.08980963471863868, 0.09237805861046289, 0.15383081944875943, 0.09171558293019277, 0.15918874781941517, 0.0999988642391405, 0.09269481363095455, 0.0887150969358157, 0.14481272928878974, 0.3935538248915025, 0.368344628817754, 0.13967192317220656, 0.36137356498471107, 0.1856654324426994, 0.34511760415901405, 0.3640688492681178, 0.36929398947761183, 0.3524276511387485, 0.32034338596659595, 0.13374781548259562, 0.32428418798606895, 0.11258347242235978, 0.09788786049339526, 0.1286539113637455, 0.25643422206164224, 0.25414698157435045, 0.26758467634341054, 0.17512428028924365, 0.18978759700891523, 0.17679219185095152, 0.17543168667786868, 0.17998148247635526, 0.18699732835109895, 0.18499910962179733, 0.1943135628749013, 0.17440662196408652, 0.06111967254501682, 0.044873144525400366, 0.058006545126655484, 0.05744494442293613, 0.05220416477720924, 0.07571073633938341, 0.06903791451673735, 0.056063966053112035, 0.060442655748849994]}, "mutation_prompt": null}
{"id": "23055900-362f-4b40-ad84-970b65a6cd52", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.adaptive_search_space = np.array([self.search_space[0], self.search_space[1]])  # Initialize adaptive search space\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.adaptive_search_space[0], self.adaptive_search_space[1])  # Clip values to adaptive search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Update adaptive search space\n            self.adaptive_search_space = np.array([np.min(np.min([new_mean, self.mean]), self.adaptive_search_space[0]), np.max(np.max([new_mean, self.mean]), self.adaptive_search_space[1])])\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.adaptive_search_space[0], self.adaptive_search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update and Adaptive Search Space", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'numpy.float64' object cannot be interpreted as an integer\").", "error": "TypeError(\"'numpy.float64' object cannot be interpreted as an integer\")", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {}, "mutation_prompt": null}
{"id": "7c3a7ad8-d00d-49fc-b74c-ee4da57f10b8", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.adaptive_covariance_threshold = 0.1  # Update covariance if it drops below this threshold\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Check if covariance has dropped below the threshold\n            if np.trace(self.covariance) < self.adaptive_covariance_threshold:\n                self.covariance = np.eye(self.dim) * 1.0  # Reset covariance to identity matrix\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update", "configspace": "", "generation": 73, "fitness": 0.1778935299431862, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.5084359135705623, 0.5132307376564615, 0.4922191553298758, 0.502296178518183, 0.4974416216245272, 0.522977227389228, 0.5290777021858817, 0.5215921083983723, 0.5053284784874343, 0.11317141719097201, 0.19370490274750674, 0.2677134604854021, 0.20233594077444406, 0.24772378976897547, 0.2396921987298064, 0.27206165196706644, 0.18156686886475282, 0.24097418467079001, 0.07845815981250892, 0.08388194411265848, 0.068596101581193, 0.07324605313510035, 0.07214032677020654, 0.07089486672433065, 0.07026785583804229, 0.07469512066751016, 0.08304860969216066, 0.07320001807878418, 0.05771890207782038, 0.05981503444363734, 0.06512850332198372, 0.054020650357618605, 0.060382610625549726, 0.05586749811368119, 0.06025413539234392, 0.07469307644661671, 0.17641557939267039, 0.15018145692527907, 0.1562702268937024, 0.47117182403489355, 0.49310749849631497, 0.45331745993848604, 0.29434908667608295, 0.2566569442841603, 0.26205382396406685, 0.1649288894153459, 0.1400256164250282, 0.1245532228818762, 0.14980513805899442, 0.1609399651898762, 0.13327255372263447, 0.21724769880188854, 0.1540128128820254, 0.22286234851381792, 0.18925288026611875, 0.1548810250513718, 0.19887168081827356, 0.18461424353619538, 0.3761836903833695, 0.1908656927319009, 0.19978258117304215, 0.2880179520666797, 0.19128541931793852, 0.2547176326326942, 0.058549136104703914, 0.27643400731491485, 0.22925785203106297, 0.2707515672218437, 0.33396111095176817, 0.22097984531687476, 0.22097984531687476, 0.2212494419206742, 0.2134314080242914, 0.20945476577683286, 0.20528422953392433, 0.09551364255355421, 0.18955601541143552, 0.19459614501929268, 0.11628906945203676, 0.08717807949004241, 0.22565421567361577, 0.005509668705249715, 0.024174635366773556, 0.01887628377317707, 0.008849632849045719, 0.008849632849045719, 0.014090038845464004, 0.0255581082287214, 0.032913326995708814, 0.015178735259099962, 0.10659303575079959, 0.08012959929472219, 0.10276805731208571, 0.11145628562324217, 0.05656200610401507, 0.07672951261340144, 0.10778674158391355, 0.15436434429509205, 0.09601359130089948, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.0051204762021707095, 0.01216990545045915, 0.009407956144980023, 0.0070830630790135185, 0.014228732910347541, 0.014228732910347541, 0.049650793658194026, 0.056926573206638076, 0.04574999543532232, 0.057741019989329234, 0.06147745544989591, 0.07528345139876436, 0.07025334857513266, 0.11391895553792586, 0.09440234363551103, 0.4212487994092867, 0.4043435696278552, 0.39897490731742125, 0.3601295905831584, 0.34918026397545276, 0.35703155938726017, 0.42524033742872525, 0.4625409088938305, 0.4426684362192477, 0.07997351771417649, 0.07780636080532566, 0.06985982143337643, 0.0699447916103807, 0.0651429191921492, 0.058799408946023646, 0.07085630600946136, 0.05534911113074792, 0.06848200152369788, 0.14856462129074555, 0.13513893412903233, 0.15619562975007228, 0.16447552378659203, 0.13377875110357595, 0.16462030038328246, 0.14262011459292057, 0.1545176369770106, 0.13178379485858382, 0.20396058648766757, 0.20383322040165885, 0.21469046745374443, 0.197416759922452, 0.21127165800722147, 0.20394257118036418, 0.17168601090778068, 0.1636118547777956, 0.17328984474114262, 0.14626450755382192, 0.15648619945158693, 0.16992766140056714, 0.14209577327596912, 0.1627621261540918, 0.14753323398858975, 0.13821432774911013, 0.14150476756980856, 0.13468623830509696, 0.17354011296011773, 0.17053421591634854, 0.16654924200996934, 0.1598342019366752, 0.15412108740216424, 0.15797579922885363, 0.1947221140909956, 0.1953217058615765, 0.16390709015520932, 0.15075656812072014, 0.18666025237039652, 0.12559476793322777, 0.1396027617179516, 0.14363846749261777, 0.15473776217202617, 0.1635983751348542, 0.18142727254684332, 0.1590164541062462, 0.41821139170748445, 0.14363168862964049, 0.4196255734003377, 0.16652657923567915, 0.1776428912658219, 0.15194923812872696, 0.4143254981696475, 0.3906530516096238, 0.403365009484455, 0.3464480729710604, 0.3578841327918091, 0.4061381194067304, 0.1717273005583042, 0.21534598397324012, 0.1186899007858232, 0.30163257105304064, 0.30430097728688454, 0.31333595062133845, 0.20660125959811237, 0.18655096345039024, 0.1904155451998848, 0.1834605084041958, 0.19877182621537526, 0.18993379743376537, 0.1830409161083777, 0.18568675078485175, 0.18656646499869567, 0.06435645205183282, 0.05564044650592337, 0.058780598888551916, 0.06349331285721305, 0.06276585611548868, 0.06149415087566412, 0.057221367675444945, 0.06378820800267826, 0.05915796204067758]}, "mutation_prompt": null}
{"id": "5d716fca-6817-4cea-bdf6-429d12963a01", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.step_size = 1.0  # Initialize step size\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.step_size, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n        # Adaptive step size control\n        if i % 10 == 0:\n            f_old = func(self.mean)\n            f_new = func(self.mean + self.step_size * np.random.normal(0, 1, size=self.dim))\n            if f_new < f_old:\n                self.step_size *= 0.9  # Decrease step size if function value decreases\n            else:\n                self.step_size *= 1.1  # Increase step size if function value increases\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies and Genetic Drift with Improved Covariance Update and Adaptive Step Size Control", "configspace": "", "generation": 74, "fitness": 0.1778935299431862, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.5084359135705623, 0.5132307376564615, 0.4922191553298758, 0.502296178518183, 0.4974416216245272, 0.522977227389228, 0.5290777021858817, 0.5215921083983723, 0.5053284784874343, 0.11317141719097201, 0.19370490274750674, 0.2677134604854021, 0.20233594077444406, 0.24772378976897547, 0.2396921987298064, 0.27206165196706644, 0.18156686886475282, 0.24097418467079001, 0.07845815981250892, 0.08388194411265848, 0.068596101581193, 0.07324605313510035, 0.07214032677020654, 0.07089486672433065, 0.07026785583804229, 0.07469512066751016, 0.08304860969216066, 0.07320001807878418, 0.05771890207782038, 0.05981503444363734, 0.06512850332198372, 0.054020650357618605, 0.060382610625549726, 0.05586749811368119, 0.06025413539234392, 0.07469307644661671, 0.17641557939267039, 0.15018145692527907, 0.1562702268937024, 0.47117182403489355, 0.49310749849631497, 0.45331745993848604, 0.29434908667608295, 0.2566569442841603, 0.26205382396406685, 0.1649288894153459, 0.1400256164250282, 0.1245532228818762, 0.14980513805899442, 0.1609399651898762, 0.13327255372263447, 0.21724769880188854, 0.1540128128820254, 0.22286234851381792, 0.18925288026611875, 0.1548810250513718, 0.19887168081827356, 0.18461424353619538, 0.3761836903833695, 0.1908656927319009, 0.19978258117304215, 0.2880179520666797, 0.19128541931793852, 0.2547176326326942, 0.058549136104703914, 0.27643400731491485, 0.22925785203106297, 0.2707515672218437, 0.33396111095176817, 0.22097984531687476, 0.22097984531687476, 0.2212494419206742, 0.2134314080242914, 0.20945476577683286, 0.20528422953392433, 0.09551364255355421, 0.18955601541143552, 0.19459614501929268, 0.11628906945203676, 0.08717807949004241, 0.22565421567361577, 0.005509668705249715, 0.024174635366773556, 0.01887628377317707, 0.008849632849045719, 0.008849632849045719, 0.014090038845464004, 0.0255581082287214, 0.032913326995708814, 0.015178735259099962, 0.10659303575079959, 0.08012959929472219, 0.10276805731208571, 0.11145628562324217, 0.05656200610401507, 0.07672951261340144, 0.10778674158391355, 0.15436434429509205, 0.09601359130089948, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.0051204762021707095, 0.01216990545045915, 0.009407956144980023, 0.0070830630790135185, 0.014228732910347541, 0.014228732910347541, 0.049650793658194026, 0.056926573206638076, 0.04574999543532232, 0.057741019989329234, 0.06147745544989591, 0.07528345139876436, 0.07025334857513266, 0.11391895553792586, 0.09440234363551103, 0.4212487994092867, 0.4043435696278552, 0.39897490731742125, 0.3601295905831584, 0.34918026397545276, 0.35703155938726017, 0.42524033742872525, 0.4625409088938305, 0.4426684362192477, 0.07997351771417649, 0.07780636080532566, 0.06985982143337643, 0.0699447916103807, 0.0651429191921492, 0.058799408946023646, 0.07085630600946136, 0.05534911113074792, 0.06848200152369788, 0.14856462129074555, 0.13513893412903233, 0.15619562975007228, 0.16447552378659203, 0.13377875110357595, 0.16462030038328246, 0.14262011459292057, 0.1545176369770106, 0.13178379485858382, 0.20396058648766757, 0.20383322040165885, 0.21469046745374443, 0.197416759922452, 0.21127165800722147, 0.20394257118036418, 0.17168601090778068, 0.1636118547777956, 0.17328984474114262, 0.14626450755382192, 0.15648619945158693, 0.16992766140056714, 0.14209577327596912, 0.1627621261540918, 0.14753323398858975, 0.13821432774911013, 0.14150476756980856, 0.13468623830509696, 0.17354011296011773, 0.17053421591634854, 0.16654924200996934, 0.1598342019366752, 0.15412108740216424, 0.15797579922885363, 0.1947221140909956, 0.1953217058615765, 0.16390709015520932, 0.15075656812072014, 0.18666025237039652, 0.12559476793322777, 0.1396027617179516, 0.14363846749261777, 0.15473776217202617, 0.1635983751348542, 0.18142727254684332, 0.1590164541062462, 0.41821139170748445, 0.14363168862964049, 0.4196255734003377, 0.16652657923567915, 0.1776428912658219, 0.15194923812872696, 0.4143254981696475, 0.3906530516096238, 0.403365009484455, 0.3464480729710604, 0.3578841327918091, 0.4061381194067304, 0.1717273005583042, 0.21534598397324012, 0.1186899007858232, 0.30163257105304064, 0.30430097728688454, 0.31333595062133845, 0.20660125959811237, 0.18655096345039024, 0.1904155451998848, 0.1834605084041958, 0.19877182621537526, 0.18993379743376537, 0.1830409161083777, 0.18568675078485175, 0.18656646499869567, 0.06435645205183282, 0.05564044650592337, 0.058780598888551916, 0.06349331285721305, 0.06276585611548868, 0.06149415087566412, 0.057221367675444945, 0.06378820800267826, 0.05915796204067758]}, "mutation_prompt": null}
{"id": "2c3f695b-3a58-4b49-a692-6e2f1ee5b033", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 10  # Increase population size for better exploration\n        self.adaptive_covariance = False  # Use adaptive covariance update\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy", "configspace": "", "generation": 75, "fitness": 0.18030127269886403, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "957a59a7-0c9b-498e-8285-8cb1c4e1cba7", "metadata": {"aucs": [0.5112367754649074, 0.5119758416239867, 0.5035239455408256, 0.5242579014109146, 0.529662554278433, 0.514182649815002, 0.5030905898495223, 0.5152704835159878, 0.5538155325089165, 0.2624004442917285, 0.14322065629816683, 0.11060964579987653, 0.25738569958059165, 0.2600441713073346, 0.2792497117016649, 0.15241984226586214, 0.14169893727796368, 0.22034175467120332, 0.07895647334906586, 0.06970569355333789, 0.08052824915149359, 0.08973158531202552, 0.06732010930109578, 0.0894090027723452, 0.08370379632525782, 0.08721654471905893, 0.0645148141732439, 0.055608669618435136, 0.07014231720239528, 0.05700160359816364, 0.06168585757337952, 0.05917389438879306, 0.05514898974571569, 0.07595123868596365, 0.05980539408727781, 0.07245472907474437, 0.14610741288448825, 0.16027833142023085, 0.14912439736981542, 0.4720072013729467, 0.46521712812388283, 0.446028915541299, 0.30957104568046856, 0.26052462639741425, 0.26196065630254084, 0.1475658404703648, 0.15174130216331072, 0.1534287749377543, 0.14684273758394506, 0.13799532589835395, 0.14700583783770071, 0.21249108099548786, 0.2281727326447196, 0.22778005165733184, 0.1734537899483879, 0.19054691317129635, 0.2151431251427618, 0.19477991519522198, 0.1911455083774961, 0.1980228063374908, 0.22318349775814061, 0.2787463503789577, 0.3205714018649406, 0.19083276736498678, 0.21973616629992265, 0.281073829608796, 0.33548482863701856, 0.3123791428448477, 0.20076458456755775, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.18950872810115527, 0.20528422953392433, 0.07227554880460485, 0.19297464959592148, 0.1681457637160887, 0.17692477821884767, 0.22757912929436874, 0.15212255144556497, 0.1374472036384402, 0.004022305411942595, 0.004524946488123405, 0.007848810794581218, 0.008849632849045719, 0.008849632849045719, 0.008849632849045719, 0.01569191035738382, 0.02655410903600075, 0.01084245693685737, 0.08774121946674585, 0.08891784446052475, 0.1630204051455596, 0.06835768365525163, 0.1365392004915027, 0.10914995283071316, 0.09140152208865326, 0.10286856186284499, 0.12789642473562512, 0.0170646011339477, 0.009543929807668383, 0.01812725144768279, 0.009785340669086873, 0.02190687482431619, 0.005739733990352769, 0.016730671794438212, 0.01776946150148706, 0.008851054119073165, 0.060696599855384226, 0.07847093764472024, 0.05128211599306831, 0.05824670287170575, 0.05819797386706671, 0.06154047956653064, 0.07030630614951483, 0.06992935276263756, 0.0881242017766064, 0.40393436316353004, 0.3755587390194187, 0.43587616032382903, 0.3960209097860553, 0.3571768824751729, 0.35588601943686193, 0.4269772485167689, 0.4009879859382943, 0.43195589867297945, 0.08644776151105893, 0.0674543944132927, 0.0725596972196394, 0.06189267027076273, 0.05982804459497071, 0.06358525896256484, 0.06547829911434289, 0.06659144070981493, 0.060720044445017995, 0.15120215451265917, 0.1337075176153668, 0.1272915040416961, 0.1353915210736264, 0.1533856938685796, 0.14957075118727736, 0.18488095737154475, 0.1525064233679292, 0.12564726237155444, 0.20097642241872482, 0.232610898988324, 0.2047389454419224, 0.21095712591257165, 0.21146875639373175, 0.20456984552980917, 0.1770963027605661, 0.17805667155145166, 0.1720221395988829, 0.15176944278541082, 0.16086446996637316, 0.15175181808230098, 0.14769567497387093, 0.1767412825866933, 0.15831010139383084, 0.13926403708969304, 0.1426046023161811, 0.1354251108073542, 0.17378689189965046, 0.14579262654346514, 0.16585237463843094, 0.16578012511197415, 0.16049784325114247, 0.18565126256827102, 0.16673067378203799, 0.18247006382847197, 0.16458620029016235, 0.15763245010806748, 0.17412655461951143, 0.15629021910647645, 0.16932467311069754, 0.1278233618240885, 0.15596782599975445, 0.17224110461303332, 0.1469221607932164, 0.12428723119048413, 0.16121029635412265, 0.40183066235868736, 0.16774988597032991, 0.38366687702553737, 0.2584108530323791, 0.37727312067497243, 0.4025141274747973, 0.4813812793555702, 0.3907605738897115, 0.31174641600071396, 0.32382694877740215, 0.3020038976536876, 0.16034734304748943, 0.33684674698827965, 0.2808275504716884, 0.30936248583325, 0.3148380401441847, 0.30342480356621593, 0.19237424383390123, 0.17716506429489087, 0.1908995129888803, 0.18503128704143723, 0.20852370713441537, 0.18330658229787755, 0.1869471446137667, 0.18701118630339142, 0.17663389725538603, 0.061455074694640954, 0.055310521020945136, 0.05450878651361146, 0.056481799699175106, 0.07401382480769803, 0.05818988571542938, 0.06041794348145135, 0.05423179118755639, 0.05775175859108839]}, "mutation_prompt": null}
{"id": "36811f1c-1054-4326-844a-ed2e2723ca4c", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\nimport copy\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 10  # Increase population size for better exploration\n        self.adaptive_covariance = False  # Use adaptive covariance update\n        self.covariance_decay_rate = 0.2  # Decay covariance over time\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n            self.covariance = (1 - self.covariance_decay_rate) * self.covariance + self.covariance_decay_rate * new_covariance\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Sampling Strategy and Enhanced Covariance Update", "configspace": "", "generation": 76, "fitness": 0.18030127269886403, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "2c3f695b-3a58-4b49-a692-6e2f1ee5b033", "metadata": {"aucs": [0.5112367754649074, 0.5119758416239867, 0.5035239455408256, 0.5242579014109146, 0.529662554278433, 0.514182649815002, 0.5030905898495223, 0.5152704835159878, 0.5538155325089165, 0.2624004442917285, 0.14322065629816683, 0.11060964579987653, 0.25738569958059165, 0.2600441713073346, 0.2792497117016649, 0.15241984226586214, 0.14169893727796368, 0.22034175467120332, 0.07895647334906586, 0.06970569355333789, 0.08052824915149359, 0.08973158531202552, 0.06732010930109578, 0.0894090027723452, 0.08370379632525782, 0.08721654471905893, 0.0645148141732439, 0.055608669618435136, 0.07014231720239528, 0.05700160359816364, 0.06168585757337952, 0.05917389438879306, 0.05514898974571569, 0.07595123868596365, 0.05980539408727781, 0.07245472907474437, 0.14610741288448825, 0.16027833142023085, 0.14912439736981542, 0.4720072013729467, 0.46521712812388283, 0.446028915541299, 0.30957104568046856, 0.26052462639741425, 0.26196065630254084, 0.1475658404703648, 0.15174130216331072, 0.1534287749377543, 0.14684273758394506, 0.13799532589835395, 0.14700583783770071, 0.21249108099548786, 0.2281727326447196, 0.22778005165733184, 0.1734537899483879, 0.19054691317129635, 0.2151431251427618, 0.19477991519522198, 0.1911455083774961, 0.1980228063374908, 0.22318349775814061, 0.2787463503789577, 0.3205714018649406, 0.19083276736498678, 0.21973616629992265, 0.281073829608796, 0.33548482863701856, 0.3123791428448477, 0.20076458456755775, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.18950872810115527, 0.20528422953392433, 0.07227554880460485, 0.19297464959592148, 0.1681457637160887, 0.17692477821884767, 0.22757912929436874, 0.15212255144556497, 0.1374472036384402, 0.004022305411942595, 0.004524946488123405, 0.007848810794581218, 0.008849632849045719, 0.008849632849045719, 0.008849632849045719, 0.01569191035738382, 0.02655410903600075, 0.01084245693685737, 0.08774121946674585, 0.08891784446052475, 0.1630204051455596, 0.06835768365525163, 0.1365392004915027, 0.10914995283071316, 0.09140152208865326, 0.10286856186284499, 0.12789642473562512, 0.0170646011339477, 0.009543929807668383, 0.01812725144768279, 0.009785340669086873, 0.02190687482431619, 0.005739733990352769, 0.016730671794438212, 0.01776946150148706, 0.008851054119073165, 0.060696599855384226, 0.07847093764472024, 0.05128211599306831, 0.05824670287170575, 0.05819797386706671, 0.06154047956653064, 0.07030630614951483, 0.06992935276263756, 0.0881242017766064, 0.40393436316353004, 0.3755587390194187, 0.43587616032382903, 0.3960209097860553, 0.3571768824751729, 0.35588601943686193, 0.4269772485167689, 0.4009879859382943, 0.43195589867297945, 0.08644776151105893, 0.0674543944132927, 0.0725596972196394, 0.06189267027076273, 0.05982804459497071, 0.06358525896256484, 0.06547829911434289, 0.06659144070981493, 0.060720044445017995, 0.15120215451265917, 0.1337075176153668, 0.1272915040416961, 0.1353915210736264, 0.1533856938685796, 0.14957075118727736, 0.18488095737154475, 0.1525064233679292, 0.12564726237155444, 0.20097642241872482, 0.232610898988324, 0.2047389454419224, 0.21095712591257165, 0.21146875639373175, 0.20456984552980917, 0.1770963027605661, 0.17805667155145166, 0.1720221395988829, 0.15176944278541082, 0.16086446996637316, 0.15175181808230098, 0.14769567497387093, 0.1767412825866933, 0.15831010139383084, 0.13926403708969304, 0.1426046023161811, 0.1354251108073542, 0.17378689189965046, 0.14579262654346514, 0.16585237463843094, 0.16578012511197415, 0.16049784325114247, 0.18565126256827102, 0.16673067378203799, 0.18247006382847197, 0.16458620029016235, 0.15763245010806748, 0.17412655461951143, 0.15629021910647645, 0.16932467311069754, 0.1278233618240885, 0.15596782599975445, 0.17224110461303332, 0.1469221607932164, 0.12428723119048413, 0.16121029635412265, 0.40183066235868736, 0.16774988597032991, 0.38366687702553737, 0.2584108530323791, 0.37727312067497243, 0.4025141274747973, 0.4813812793555702, 0.3907605738897115, 0.31174641600071396, 0.32382694877740215, 0.3020038976536876, 0.16034734304748943, 0.33684674698827965, 0.2808275504716884, 0.30936248583325, 0.3148380401441847, 0.30342480356621593, 0.19237424383390123, 0.17716506429489087, 0.1908995129888803, 0.18503128704143723, 0.20852370713441537, 0.18330658229787755, 0.1869471446137667, 0.18701118630339142, 0.17663389725538603, 0.061455074694640954, 0.055310521020945136, 0.05450878651361146, 0.056481799699175106, 0.07401382480769803, 0.05818988571542938, 0.06041794348145135, 0.05423179118755639, 0.05775175859108839]}, "mutation_prompt": null}
{"id": "3fb9dd35-f19b-4e20-bb78-86762abff861", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 10  # Increase population size for better exploration\n        self.adaptive_covariance = False  # Use adaptive covariance update\n        self.differential_evolution_params = {'x0': self.mean,'seed': 42,'method': 'SDE'}\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        res = differential_evolution(func, bounds=[(self.search_space[0], self.search_space[1]) for _ in range(self.dim)], **self.differential_evolution_params)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy and Enhanced Differential Evolution", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"differential_evolution() got an unexpected keyword argument 'method'\").", "error": "TypeError(\"differential_evolution() got an unexpected keyword argument 'method'\")", "parent_id": "2c3f695b-3a58-4b49-a692-6e2f1ee5b033", "metadata": {}, "mutation_prompt": null}
{"id": "e8f3ac8f-dacb-4976-90ae-bd808215c9fe", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = int(self.budget * 0.5)  # Update covariance at 50% of the budget\n        self.population_size = 10  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.mutation_rate = 0.1  # Mutation rate for evolution strategy\n        self.crossover_rate = 0.5  # Crossover rate for genetic drift\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            if np.random.rand() < self.mutation_rate:\n                new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n                new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n                new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n            else:\n                new_mean = self.mean\n\n            # Perform genetic drift to update covariance\n            if np.random.rand() < self.crossover_rate:\n                new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n                new_covariance = self.update_covariance(new_covariance)\n            else:\n                new_covariance = self.covariance\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n    def update_covariance(self, covariance):\n        # Update covariance matrix\n        new_covariance = covariance + 0.01 * np.eye(self.dim)  # Add a small value to covariance matrix\n        new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n        return new_covariance\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy", "configspace": "", "generation": 78, "fitness": 0.0761589573496897, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.16.", "error": "", "parent_id": "2c3f695b-3a58-4b49-a692-6e2f1ee5b033", "metadata": {"aucs": [0.08748443292180197, 0.08744719866033845, 0.07531499689510368, 0.1013326137689532, 0.09318251462259852, 0.10220605375840064, 0.11723484747166535, 0.10500802755688421, 0.09835348536276178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032125377563181345, 0.010773720573870937, 0.004108333694617827, 0.02001050553592154, 0.0003007871543595497, 0.0018788861459388961, 0.012520275842703987, 0.014172863240100031, 0.005277133660043676, 0.00012144450753970304, 9.999999999998899e-05, 0.002200399446910528, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007311143166103262, 9.999999999998899e-05, 9.999999999998899e-05, 0.002831024733606302, 0.8897803135750528, 0.9291519559220991, 0.35719554692731414, 0.9210582877823797, 0.810129212636613, 0.7768389976335969, 0.6731414793185135, 0.8494138352529903, 0.9728664167481076, 9.999999999998899e-05, 9.999999999998899e-05, 0.01964142013403869, 0.004527874054345737, 0.006262681486010835, 0.0015756225739745888, 0.013780136665155762, 9.999999999998899e-05, 0.030273891596602653, 0.03751545580796245, 0.0873174610024966, 0.08543377489993287, 0.0225651380266767, 0.04404783727040362, 0.029912984929797548, 0.01975429505212456, 0.06898672612454704, 0.05475906557560284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015709227057811415, 9.999999999998899e-05, 0.0016076565399367748, 9.999999999998899e-05, 9.999999999998899e-05, 0.009310837725361898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10834020512833631, 0.11445681960329024, 0.12391795494314395, 0.12449844972706647, 0.10130903137691416, 0.1357966135440002, 0.11962049901487082, 0.12115104296540846, 0.1101542421211863, 0.016152688282696892, 0.011728880702366551, 0.01701710550198854, 0.03665034816038115, 0.01911824286033803, 0.014497344304588267, 0.011513141022729712, 0.019909588173814385, 0.011853710943125262, 0.1083834608648806, 0.1209112025795499, 0.10101551180860957, 0.09941645622824868, 0.10446008024072784, 0.1145666714839152, 0.1058785556061046, 0.09490620014972628, 0.11385232089219066, 0.12797981086612087, 0.1166820591456188, 0.11395702476633707, 0.11453124373693169, 0.10714996395687448, 0.11153726748773429, 0.11983048595386059, 0.11817909041981589, 0.11781932183076371, 0.06379095666572321, 0.07571509226723905, 0.04635621403295531, 0.044650675553987496, 0.047054968845622325, 0.056066963665613034, 0.06419847981173332, 0.06858401205975917, 0.061490413847145264, 0.10880942434282315, 0.08657163562592851, 0.07975594985481127, 0.0922313875352262, 0.10117864809151456, 0.09412742095811077, 0.12245976138762271, 0.11317440584708205, 0.10101660150104308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04292163846073105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11196872770611122, 0.1171524509079942, 0.09128384078212037, 0.06915175971428089, 0.09481196349253718, 0.07512042358434923, 0.0735047744369165, 0.11090557421523406, 0.08260956932573704, 0.05212084615244528, 0.056554635054119395, 0.07839594874093458, 0.045353011660394627, 0.05358242262624813, 0.06909744897110581, 0.06247826143359414, 0.1432996572221369, 0.12960090419011028, 0.1618824829325265, 0.17694258944651042, 0.149380610398807, 0.16074148086612772, 0.1635100948733973, 0.15430821950305285, 0.15359212148326806, 0.1390447500197668, 0.15429234491591703, 0.011030403669162636, 0.01307832046964208, 0.016032244825467612, 0.013572563590709241, 0.006404459279658603, 0.01750683396344066, 0.027626153555994515, 0.016532886394708846, 0.013105390433021946]}, "mutation_prompt": null}
{"id": "0c207862-95f8-42b5-9edd-9b1147214e44", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 20  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_params = {'x0': self.mean,'seed': 42, 'bounds': [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]}\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        res = differential_evolution(func, self.differential_evolution_params)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy and Differential Evolution Optimization.", "configspace": "", "generation": 79, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"float() argument must be a string or a real number, not 'dict'\").", "error": "TypeError(\"float() argument must be a string or a real number, not 'dict'\")", "parent_id": "2c3f695b-3a58-4b49-a692-6e2f1ee5b033", "metadata": {}, "mutation_prompt": null}
{"id": "4438764e-fdef-49de-b6b7-772250892e42", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 10  # Increase population size for better exploration\n        self.adaptive_covariance = False  # Use adaptive covariance update\n        self.covariance_update_threshold = int(self.budget * self.covariance_update_rate * 0.1)  # Update covariance at 10% of the budget\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Refine Crowd-Sourced Metaheuristic Algorithm with Improved Sampling Strategy", "configspace": "", "generation": 80, "fitness": 0.18030127269886403, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "2c3f695b-3a58-4b49-a692-6e2f1ee5b033", "metadata": {"aucs": [0.5112367754649074, 0.5119758416239867, 0.5035239455408256, 0.5242579014109146, 0.529662554278433, 0.514182649815002, 0.5030905898495223, 0.5152704835159878, 0.5538155325089165, 0.2624004442917285, 0.14322065629816683, 0.11060964579987653, 0.25738569958059165, 0.2600441713073346, 0.2792497117016649, 0.15241984226586214, 0.14169893727796368, 0.22034175467120332, 0.07895647334906586, 0.06970569355333789, 0.08052824915149359, 0.08973158531202552, 0.06732010930109578, 0.0894090027723452, 0.08370379632525782, 0.08721654471905893, 0.0645148141732439, 0.055608669618435136, 0.07014231720239528, 0.05700160359816364, 0.06168585757337952, 0.05917389438879306, 0.05514898974571569, 0.07595123868596365, 0.05980539408727781, 0.07245472907474437, 0.14610741288448825, 0.16027833142023085, 0.14912439736981542, 0.4720072013729467, 0.46521712812388283, 0.446028915541299, 0.30957104568046856, 0.26052462639741425, 0.26196065630254084, 0.1475658404703648, 0.15174130216331072, 0.1534287749377543, 0.14684273758394506, 0.13799532589835395, 0.14700583783770071, 0.21249108099548786, 0.2281727326447196, 0.22778005165733184, 0.1734537899483879, 0.19054691317129635, 0.2151431251427618, 0.19477991519522198, 0.1911455083774961, 0.1980228063374908, 0.22318349775814061, 0.2787463503789577, 0.3205714018649406, 0.19083276736498678, 0.21973616629992265, 0.281073829608796, 0.33548482863701856, 0.3123791428448477, 0.20076458456755775, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.18950872810115527, 0.20528422953392433, 0.07227554880460485, 0.19297464959592148, 0.1681457637160887, 0.17692477821884767, 0.22757912929436874, 0.15212255144556497, 0.1374472036384402, 0.004022305411942595, 0.004524946488123405, 0.007848810794581218, 0.008849632849045719, 0.008849632849045719, 0.008849632849045719, 0.01569191035738382, 0.02655410903600075, 0.01084245693685737, 0.08774121946674585, 0.08891784446052475, 0.1630204051455596, 0.06835768365525163, 0.1365392004915027, 0.10914995283071316, 0.09140152208865326, 0.10286856186284499, 0.12789642473562512, 0.0170646011339477, 0.009543929807668383, 0.01812725144768279, 0.009785340669086873, 0.02190687482431619, 0.005739733990352769, 0.016730671794438212, 0.01776946150148706, 0.008851054119073165, 0.060696599855384226, 0.07847093764472024, 0.05128211599306831, 0.05824670287170575, 0.05819797386706671, 0.06154047956653064, 0.07030630614951483, 0.06992935276263756, 0.0881242017766064, 0.40393436316353004, 0.3755587390194187, 0.43587616032382903, 0.3960209097860553, 0.3571768824751729, 0.35588601943686193, 0.4269772485167689, 0.4009879859382943, 0.43195589867297945, 0.08644776151105893, 0.0674543944132927, 0.0725596972196394, 0.06189267027076273, 0.05982804459497071, 0.06358525896256484, 0.06547829911434289, 0.06659144070981493, 0.060720044445017995, 0.15120215451265917, 0.1337075176153668, 0.1272915040416961, 0.1353915210736264, 0.1533856938685796, 0.14957075118727736, 0.18488095737154475, 0.1525064233679292, 0.12564726237155444, 0.20097642241872482, 0.232610898988324, 0.2047389454419224, 0.21095712591257165, 0.21146875639373175, 0.20456984552980917, 0.1770963027605661, 0.17805667155145166, 0.1720221395988829, 0.15176944278541082, 0.16086446996637316, 0.15175181808230098, 0.14769567497387093, 0.1767412825866933, 0.15831010139383084, 0.13926403708969304, 0.1426046023161811, 0.1354251108073542, 0.17378689189965046, 0.14579262654346514, 0.16585237463843094, 0.16578012511197415, 0.16049784325114247, 0.18565126256827102, 0.16673067378203799, 0.18247006382847197, 0.16458620029016235, 0.15763245010806748, 0.17412655461951143, 0.15629021910647645, 0.16932467311069754, 0.1278233618240885, 0.15596782599975445, 0.17224110461303332, 0.1469221607932164, 0.12428723119048413, 0.16121029635412265, 0.40183066235868736, 0.16774988597032991, 0.38366687702553737, 0.2584108530323791, 0.37727312067497243, 0.4025141274747973, 0.4813812793555702, 0.3907605738897115, 0.31174641600071396, 0.32382694877740215, 0.3020038976536876, 0.16034734304748943, 0.33684674698827965, 0.2808275504716884, 0.30936248583325, 0.3148380401441847, 0.30342480356621593, 0.19237424383390123, 0.17716506429489087, 0.1908995129888803, 0.18503128704143723, 0.20852370713441537, 0.18330658229787755, 0.1869471446137667, 0.18701118630339142, 0.17663389725538603, 0.061455074694640954, 0.055310521020945136, 0.05450878651361146, 0.056481799699175106, 0.07401382480769803, 0.05818988571542938, 0.06041794348145135, 0.05423179118755639, 0.05775175859108839]}, "mutation_prompt": null}
{"id": "44a884c1-a436-42ee-89df-75d929c43c69", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 20  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.covariance_update_interval = int(self.budget * self.covariance_update_rate)\n\n    def __call__(self, func):\n        for i in range(self.budget):\n            if i % self.covariance_update_interval == 0:\n                # Perform evolution strategy to update mean\n                new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n                new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n                new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n                # Perform genetic drift to update covariance\n                new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n                # Evaluate function at new mean\n                f_new = func(new_mean)\n\n                # Update mean and covariance\n                self.mean = new_mean\n                self.covariance = new_covariance\n\n                # Print current best solution\n                print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n            else:\n                # Perform random search\n                new_mean = self.mean + np.random.normal(0, 0.1, size=self.dim)\n                new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n                f_new = func(new_mean)\n\n                # Update mean\n                self.mean = new_mean\n\n                # Print current best solution\n                print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy", "configspace": "", "generation": 81, "fitness": 0.056268378304018804, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "2c3f695b-3a58-4b49-a692-6e2f1ee5b033", "metadata": {"aucs": [0.17031220451994833, 0.10735378577891075, 0.08967357641577056, 0.044172725253951994, 0.08844410969495553, 0.07954660188276941, 0.038233116081915486, 0.05078496560653656, 0.057809335885651514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01118554074067668, 0.027709712789091623, 0.014811624853953265, 0.054230160228691426, 0.016863642225366182, 0.02911799393541603, 0.03665091646733254, 0.008283424873875123, 0.010719878619536716, 9.999999999998899e-05, 0.01379632507111106, 0.011354206012203605, 9.999999999998899e-05, 0.03164352208946597, 0.01765086770941504, 9.999999999998899e-05, 0.025083984644205692, 0.013579027852988146, 0.0349589970030183, 0.023912104236540332, 0.008847633556539392, 0.07281245778710221, 0.015816804201075896, 0.013960036853821522, 0.06774571211609659, 0.01681851069303053, 0.012471546759868724, 0.017010077667040213, 9.999999999998899e-05, 9.999999999998899e-05, 0.062361887560684615, 0.0020164789152544715, 0.011285985172736934, 9.999999999998899e-05, 0.06479084021194759, 9.999999999998899e-05, 0.046636292080635244, 0.144156215962726, 0.05202222859165562, 9.999999999998899e-05, 0.013325389663097487, 0.012932677494243983, 0.009034116529582747, 0.015394870534132687, 0.030407362110720038, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007200583084895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02886357666817929, 0.08825737887676988, 0.030794043755328127, 0.0948249698264022, 0.04085206814621156, 0.01894600375394928, 0.03495915294457086, 0.0364275762315327, 0.02635852086242252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441279284219857, 0.15877827850882642, 0.1136861445183005, 0.1389021226473467, 0.12119650136934468, 0.11356317909974933, 0.19375815506787675, 0.11562861052522089, 0.13118031434430655, 9.999999999998899e-05, 0.03763555436486965, 9.999999999998899e-05, 0.014421824356733115, 0.01947164768821419, 0.009503135341599411, 0.044512901030208774, 0.009934392660937874, 0.0010534970740332383, 0.12186944821856305, 0.16359247719699166, 0.126659415483508, 0.11187727935540293, 0.1836803061379345, 0.12642776694098046, 0.13415092634971293, 0.13309294954319884, 0.14190331466450812, 0.16222548301173723, 0.1199873876702503, 0.11945421998043626, 0.1329666341285589, 0.13933683987108747, 0.14386387829099279, 0.12833892326973184, 0.14976675130340122, 0.11844329683690757, 0.09835583342166321, 0.053377802210435754, 0.062442946794916354, 0.07822548269387919, 0.08649152705191232, 0.08333153662535364, 0.0910521873808049, 0.0843571049966757, 0.07226650588005601, 0.14094979655306983, 0.16849168005971515, 0.12554911047812511, 0.13286156643343405, 0.17080317626100883, 0.1414309641154632, 0.145284001944057, 0.15676526373871036, 0.13258867266272611, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005859116847563017, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09914237450205654, 0.017739749247036474, 0.10549990532053799, 0.0908331709754604, 0.07691199457992659, 0.11422806707983124, 0.09223183776015342, 0.11668861535355468, 0.23351190306989378, 0.15980927152801228, 0.14367255331028705, 0.06296267476887951, 0.14599143528811398, 0.07071233813261057, 0.1362455148111099, 0.08327177832799548, 0.05903211770098138, 0.04512692044789324, 0.12714956269122735, 0.1252704096047209, 0.18474223450478122, 0.17994689914194584, 0.19513898682893993, 0.1904571939886054, 0.19463295599267583, 0.1949745423229451, 0.18563946626393146, 0.17982267428044374, 0.18625765415001738, 0.038335681070682415, 0.04822902745508839, 0.03616967282605388, 0.027274546404074118, 0.08595068611100232, 0.037481584632798715, 0.046136299309332385, 0.048676495040440915, 0.026677468691634898]}, "mutation_prompt": null}
{"id": "99b0f39b-dd58-4282-b4d3-7bd8d647ad44", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 10  # Increase population size for better exploration\n        self.adaptive_covariance = False  # Use adaptive covariance update\n        self.covariance_threshold = 0.1  # Threshold for covariance update\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Sampling Strategy and Enhanced Covariance Update", "configspace": "", "generation": 82, "fitness": 0.18030127269886403, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.13.", "error": "", "parent_id": "2c3f695b-3a58-4b49-a692-6e2f1ee5b033", "metadata": {"aucs": [0.5112367754649074, 0.5119758416239867, 0.5035239455408256, 0.5242579014109146, 0.529662554278433, 0.514182649815002, 0.5030905898495223, 0.5152704835159878, 0.5538155325089165, 0.2624004442917285, 0.14322065629816683, 0.11060964579987653, 0.25738569958059165, 0.2600441713073346, 0.2792497117016649, 0.15241984226586214, 0.14169893727796368, 0.22034175467120332, 0.07895647334906586, 0.06970569355333789, 0.08052824915149359, 0.08973158531202552, 0.06732010930109578, 0.0894090027723452, 0.08370379632525782, 0.08721654471905893, 0.0645148141732439, 0.055608669618435136, 0.07014231720239528, 0.05700160359816364, 0.06168585757337952, 0.05917389438879306, 0.05514898974571569, 0.07595123868596365, 0.05980539408727781, 0.07245472907474437, 0.14610741288448825, 0.16027833142023085, 0.14912439736981542, 0.4720072013729467, 0.46521712812388283, 0.446028915541299, 0.30957104568046856, 0.26052462639741425, 0.26196065630254084, 0.1475658404703648, 0.15174130216331072, 0.1534287749377543, 0.14684273758394506, 0.13799532589835395, 0.14700583783770071, 0.21249108099548786, 0.2281727326447196, 0.22778005165733184, 0.1734537899483879, 0.19054691317129635, 0.2151431251427618, 0.19477991519522198, 0.1911455083774961, 0.1980228063374908, 0.22318349775814061, 0.2787463503789577, 0.3205714018649406, 0.19083276736498678, 0.21973616629992265, 0.281073829608796, 0.33548482863701856, 0.3123791428448477, 0.20076458456755775, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.18950872810115527, 0.20528422953392433, 0.07227554880460485, 0.19297464959592148, 0.1681457637160887, 0.17692477821884767, 0.22757912929436874, 0.15212255144556497, 0.1374472036384402, 0.004022305411942595, 0.004524946488123405, 0.007848810794581218, 0.008849632849045719, 0.008849632849045719, 0.008849632849045719, 0.01569191035738382, 0.02655410903600075, 0.01084245693685737, 0.08774121946674585, 0.08891784446052475, 0.1630204051455596, 0.06835768365525163, 0.1365392004915027, 0.10914995283071316, 0.09140152208865326, 0.10286856186284499, 0.12789642473562512, 0.0170646011339477, 0.009543929807668383, 0.01812725144768279, 0.009785340669086873, 0.02190687482431619, 0.005739733990352769, 0.016730671794438212, 0.01776946150148706, 0.008851054119073165, 0.060696599855384226, 0.07847093764472024, 0.05128211599306831, 0.05824670287170575, 0.05819797386706671, 0.06154047956653064, 0.07030630614951483, 0.06992935276263756, 0.0881242017766064, 0.40393436316353004, 0.3755587390194187, 0.43587616032382903, 0.3960209097860553, 0.3571768824751729, 0.35588601943686193, 0.4269772485167689, 0.4009879859382943, 0.43195589867297945, 0.08644776151105893, 0.0674543944132927, 0.0725596972196394, 0.06189267027076273, 0.05982804459497071, 0.06358525896256484, 0.06547829911434289, 0.06659144070981493, 0.060720044445017995, 0.15120215451265917, 0.1337075176153668, 0.1272915040416961, 0.1353915210736264, 0.1533856938685796, 0.14957075118727736, 0.18488095737154475, 0.1525064233679292, 0.12564726237155444, 0.20097642241872482, 0.232610898988324, 0.2047389454419224, 0.21095712591257165, 0.21146875639373175, 0.20456984552980917, 0.1770963027605661, 0.17805667155145166, 0.1720221395988829, 0.15176944278541082, 0.16086446996637316, 0.15175181808230098, 0.14769567497387093, 0.1767412825866933, 0.15831010139383084, 0.13926403708969304, 0.1426046023161811, 0.1354251108073542, 0.17378689189965046, 0.14579262654346514, 0.16585237463843094, 0.16578012511197415, 0.16049784325114247, 0.18565126256827102, 0.16673067378203799, 0.18247006382847197, 0.16458620029016235, 0.15763245010806748, 0.17412655461951143, 0.15629021910647645, 0.16932467311069754, 0.1278233618240885, 0.15596782599975445, 0.17224110461303332, 0.1469221607932164, 0.12428723119048413, 0.16121029635412265, 0.40183066235868736, 0.16774988597032991, 0.38366687702553737, 0.2584108530323791, 0.37727312067497243, 0.4025141274747973, 0.4813812793555702, 0.3907605738897115, 0.31174641600071396, 0.32382694877740215, 0.3020038976536876, 0.16034734304748943, 0.33684674698827965, 0.2808275504716884, 0.30936248583325, 0.3148380401441847, 0.30342480356621593, 0.19237424383390123, 0.17716506429489087, 0.1908995129888803, 0.18503128704143723, 0.20852370713441537, 0.18330658229787755, 0.1869471446137667, 0.18701118630339142, 0.17663389725538603, 0.061455074694640954, 0.055310521020945136, 0.05450878651361146, 0.056481799699175106, 0.07401382480769803, 0.05818988571542938, 0.06041794348145135, 0.05423179118755639, 0.05775175859108839]}, "mutation_prompt": null}
{"id": "1fc424b0-82ee-4397-8c92-cf8b2adb4c3f", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\nimport matplotlib.pyplot as plt\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 10  # Increase population size for better exploration\n        self.adaptive_covariance = False  # Use adaptive covariance update\n        self.covariance_history = []  # Store covariance history\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Store covariance history\n            self.covariance_history.append(self.covariance)\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=42)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n        # Plot covariance history\n        plt.plot(self.covariance_history)\n        plt.xlabel('Iteration')\n        plt.ylabel('Covariance')\n        plt.title('Covariance History')\n        plt.show()\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('x and y can be no greater than 2D, but have shapes (50,) and (50, 2, 2)').", "error": "ValueError('x and y can be no greater than 2D, but have shapes (50,) and (50, 2, 2)')", "parent_id": "2c3f695b-3a58-4b49-a692-6e2f1ee5b033", "metadata": {}, "mutation_prompt": null}
{"id": "41960fd9-335a-4511-92c2-d1db86b13758", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 20  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy and Enhanced Differential Evolution.", "configspace": "", "generation": 84, "fitness": 0.1957254857924989, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "2c3f695b-3a58-4b49-a692-6e2f1ee5b033", "metadata": {"aucs": [0.48612808860023937, 0.4878792374873584, 0.49211028268961754, 0.5074396717604517, 0.5202914883706768, 0.5041231086226313, 0.5183980252579263, 0.52392594009312, 0.5169274469650482, 0.2524602844666364, 0.23835247329110554, 0.1411756006488991, 0.24542835566138133, 0.26827613769425507, 0.26827613769425507, 0.24707158682762742, 0.23437955771337304, 0.18409643204034287, 0.06481528028260541, 0.07752404124036716, 0.06729881401954985, 0.0627622969684779, 0.05581535557982842, 0.06699526464161887, 0.06322498853239322, 0.05849817280241043, 0.059174865457410464, 0.06469072814357801, 0.06146218037431117, 0.06026570348582028, 0.048091249771059164, 0.05406099312052104, 0.07164005045799027, 0.05426487875390262, 0.06221942655079715, 0.06309294308799696, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.12187505754552008, 0.12968565141361854, 0.13343835475141075, 0.1285197420060975, 0.12664663150044775, 0.1245574148846128, 0.17650032210793565, 0.1589923759565398, 0.14864372992321717, 0.15827104089980149, 0.1656370335024432, 0.14066075919037124, 0.18113980745037073, 0.16321733621699552, 0.16527212339788655, 0.2960791390090255, 0.26246678237114496, 0.19087368756471246, 0.1950963244818097, 0.054309287578139465, 0.05145922846532014, 0.23259193594670702, 0.2707515672218437, 0.2823672335697037, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.20577719842065834, 0.20699990165355775, 0.20528422953392433, 0.17498515070160703, 0.07664226249741135, 0.14082440667298812, 0.06566871175823419, 0.14857499314706368, 0.1850401517184196, 0.009125377217809372, 0.010944909194823271, 0.020147402688271532, 0.008849632849045719, 0.008849632849045719, 0.008849632849045719, 0.020191716630662437, 0.029288217259410332, 0.028686062588166306, 0.06410516601309613, 0.07664447221677206, 0.09608874162972547, 0.10021238058271176, 0.07989523882049776, 0.08785772988624796, 0.09016683048413976, 0.08640241655470382, 0.09441580212007794, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.01699134745530806, 0.016399234172049026, 0.009040362609332275, 0.01631030135373679, 0.014228732910347541, 0.017261712895492942, 0.05601601273592838, 0.059398993009646794, 0.05352019250512274, 0.060601894791828426, 0.05819797386706671, 0.07528345139876436, 0.05312863528609557, 0.06405229546951774, 0.06254556730532224, 0.40330387062872264, 0.41641911709432733, 0.3455565731080187, 0.33307223372433215, 0.3391642932178709, 0.34240024596412244, 0.41122133561101926, 0.36881584843335413, 0.3508025744068537, 0.0738055796473116, 0.049013286548511115, 0.06322413962528917, 0.05819132743312727, 0.06918422731678187, 0.06186722827766267, 0.05885229253016244, 0.05532443643735896, 0.0567633261967283, 0.13708895827583056, 0.15148147964616632, 0.1422818275880563, 0.13909827919565798, 0.14758017759818753, 0.12778361494370205, 0.12194143578654892, 0.1522306715521945, 0.1420984709710179, 0.20245209506405348, 0.2013317253338448, 0.20187997018652737, 0.18695799336926633, 0.1953600345908324, 0.1823460958874762, 0.17873292673034735, 0.15741259405234465, 0.16751653838132374, 0.14883176380732488, 0.13906376925894093, 0.14758703717185995, 0.13699781525411203, 0.1371022929305804, 0.13583853988849082, 0.12976263360692697, 0.1301331342986679, 0.13438302650077438, 0.14520850159205034, 0.1494591176410046, 0.15230038752351904, 0.14004872999697104, 0.1400477905142561, 0.15132825240171333, 0.15086791458735993, 0.14746171178447653, 0.1790545495915814, 0.10658149640599257, 0.0910592246193026, 0.08914590046374471, 0.12817336527629108, 0.14147708514514268, 0.10983773768937377, 0.16354505061405689, 0.16055929173760342, 0.13340152585980647, 0.33247190639822743, 0.3944494016197968, 0.16008313245141004, 0.3721545886169707, 0.3855691805296748, 0.15122125146968168, 0.36297881879480587, 0.3611072534425631, 0.36740542290677436, 0.3358614527695696, 0.35149196154987217, 0.4022230359479535, 0.14065797328225904, 0.13845162426413848, 0.10619821758204273, 0.32399761589233433, 0.32245229291695576, 0.297460840686134, 0.19135958826030042, 0.17684007362805665, 0.19534169774898014, 0.19423770729802814, 0.17654109559713704, 0.17544837651251943, 0.18300143566730853, 0.1852028202649355, 0.20421404996700865, 0.04804058418617918, 0.05299551547550996, 0.05889785289422611, 0.05419219823455301, 0.052549495644664046, 0.048334802650275566, 0.04671817254933652, 0.05754988369214209, 0.05419550684025054]}, "mutation_prompt": null}
{"id": "cfdccfb4-42af-41f9-a318-9f80016b94e7", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 20  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.covariance_threshold = 0.5  # New threshold to avoid large covariance\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n            covariance_norm = np.linalg.norm(new_covariance)\n            if covariance_norm > self.covariance_threshold:\n                new_covariance = self.covariance * 0.5  # Limit covariance to avoid large values\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy and Enhanced Differential Evolution.", "configspace": "", "generation": 85, "fitness": 0.1957254857924989, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "41960fd9-335a-4511-92c2-d1db86b13758", "metadata": {"aucs": [0.48612808860023937, 0.4878792374873584, 0.49211028268961754, 0.5074396717604517, 0.5202914883706768, 0.5041231086226313, 0.5183980252579263, 0.52392594009312, 0.5169274469650482, 0.2524602844666364, 0.23835247329110554, 0.1411756006488991, 0.24542835566138133, 0.26827613769425507, 0.26827613769425507, 0.24707158682762742, 0.23437955771337304, 0.18409643204034287, 0.06481528028260541, 0.07752404124036716, 0.06729881401954985, 0.0627622969684779, 0.05581535557982842, 0.06699526464161887, 0.06322498853239322, 0.05849817280241043, 0.059174865457410464, 0.06469072814357801, 0.06146218037431117, 0.06026570348582028, 0.048091249771059164, 0.05406099312052104, 0.07164005045799027, 0.05426487875390262, 0.06221942655079715, 0.06309294308799696, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.12187505754552008, 0.12968565141361854, 0.13343835475141075, 0.1285197420060975, 0.12664663150044775, 0.1245574148846128, 0.17650032210793565, 0.1589923759565398, 0.14864372992321717, 0.15827104089980149, 0.1656370335024432, 0.14066075919037124, 0.18113980745037073, 0.16321733621699552, 0.16527212339788655, 0.2960791390090255, 0.26246678237114496, 0.19087368756471246, 0.1950963244818097, 0.054309287578139465, 0.05145922846532014, 0.23259193594670702, 0.2707515672218437, 0.2823672335697037, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.20577719842065834, 0.20699990165355775, 0.20528422953392433, 0.17498515070160703, 0.07664226249741135, 0.14082440667298812, 0.06566871175823419, 0.14857499314706368, 0.1850401517184196, 0.009125377217809372, 0.010944909194823271, 0.020147402688271532, 0.008849632849045719, 0.008849632849045719, 0.008849632849045719, 0.020191716630662437, 0.029288217259410332, 0.028686062588166306, 0.06410516601309613, 0.07664447221677206, 0.09608874162972547, 0.10021238058271176, 0.07989523882049776, 0.08785772988624796, 0.09016683048413976, 0.08640241655470382, 0.09441580212007794, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.01699134745530806, 0.016399234172049026, 0.009040362609332275, 0.01631030135373679, 0.014228732910347541, 0.017261712895492942, 0.05601601273592838, 0.059398993009646794, 0.05352019250512274, 0.060601894791828426, 0.05819797386706671, 0.07528345139876436, 0.05312863528609557, 0.06405229546951774, 0.06254556730532224, 0.40330387062872264, 0.41641911709432733, 0.3455565731080187, 0.33307223372433215, 0.3391642932178709, 0.34240024596412244, 0.41122133561101926, 0.36881584843335413, 0.3508025744068537, 0.0738055796473116, 0.049013286548511115, 0.06322413962528917, 0.05819132743312727, 0.06918422731678187, 0.06186722827766267, 0.05885229253016244, 0.05532443643735896, 0.0567633261967283, 0.13708895827583056, 0.15148147964616632, 0.1422818275880563, 0.13909827919565798, 0.14758017759818753, 0.12778361494370205, 0.12194143578654892, 0.1522306715521945, 0.1420984709710179, 0.20245209506405348, 0.2013317253338448, 0.20187997018652737, 0.18695799336926633, 0.1953600345908324, 0.1823460958874762, 0.17873292673034735, 0.15741259405234465, 0.16751653838132374, 0.14883176380732488, 0.13906376925894093, 0.14758703717185995, 0.13699781525411203, 0.1371022929305804, 0.13583853988849082, 0.12976263360692697, 0.1301331342986679, 0.13438302650077438, 0.14520850159205034, 0.1494591176410046, 0.15230038752351904, 0.14004872999697104, 0.1400477905142561, 0.15132825240171333, 0.15086791458735993, 0.14746171178447653, 0.1790545495915814, 0.10658149640599257, 0.0910592246193026, 0.08914590046374471, 0.12817336527629108, 0.14147708514514268, 0.10983773768937377, 0.16354505061405689, 0.16055929173760342, 0.13340152585980647, 0.33247190639822743, 0.3944494016197968, 0.16008313245141004, 0.3721545886169707, 0.3855691805296748, 0.15122125146968168, 0.36297881879480587, 0.3611072534425631, 0.36740542290677436, 0.3358614527695696, 0.35149196154987217, 0.4022230359479535, 0.14065797328225904, 0.13845162426413848, 0.10619821758204273, 0.32399761589233433, 0.32245229291695576, 0.297460840686134, 0.19135958826030042, 0.17684007362805665, 0.19534169774898014, 0.19423770729802814, 0.17654109559713704, 0.17544837651251943, 0.18300143566730853, 0.1852028202649355, 0.20421404996700865, 0.04804058418617918, 0.05299551547550996, 0.05889785289422611, 0.05419219823455301, 0.052549495644664046, 0.048334802650275566, 0.04671817254933652, 0.05754988369214209, 0.05419550684025054]}, "mutation_prompt": null}
{"id": "06da0d3a-3a83-4d7a-a341-a7cb84c1f403", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 20  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.diff_evolution_max_iter = int(self.budget * 0.2)  # Increase differential evolution iterations\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed, maxiter=self.diff_evolution_max_iter)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 0.1, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy and Enhanced Differential Evolution.", "configspace": "", "generation": 86, "fitness": 0.1957254857924989, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "41960fd9-335a-4511-92c2-d1db86b13758", "metadata": {"aucs": [0.48612808860023937, 0.4878792374873584, 0.49211028268961754, 0.5074396717604517, 0.5202914883706768, 0.5041231086226313, 0.5183980252579263, 0.52392594009312, 0.5169274469650482, 0.2524602844666364, 0.23835247329110554, 0.1411756006488991, 0.24542835566138133, 0.26827613769425507, 0.26827613769425507, 0.24707158682762742, 0.23437955771337304, 0.18409643204034287, 0.06481528028260541, 0.07752404124036716, 0.06729881401954985, 0.0627622969684779, 0.05581535557982842, 0.06699526464161887, 0.06322498853239322, 0.05849817280241043, 0.059174865457410464, 0.06469072814357801, 0.06146218037431117, 0.06026570348582028, 0.048091249771059164, 0.05406099312052104, 0.07164005045799027, 0.05426487875390262, 0.06221942655079715, 0.06309294308799696, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.12187505754552008, 0.12968565141361854, 0.13343835475141075, 0.1285197420060975, 0.12664663150044775, 0.1245574148846128, 0.17650032210793565, 0.1589923759565398, 0.14864372992321717, 0.15827104089980149, 0.1656370335024432, 0.14066075919037124, 0.18113980745037073, 0.16321733621699552, 0.16527212339788655, 0.2960791390090255, 0.26246678237114496, 0.19087368756471246, 0.1950963244818097, 0.054309287578139465, 0.05145922846532014, 0.23259193594670702, 0.2707515672218437, 0.2823672335697037, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.20577719842065834, 0.20699990165355775, 0.20528422953392433, 0.17498515070160703, 0.07664226249741135, 0.14082440667298812, 0.06566871175823419, 0.14857499314706368, 0.1850401517184196, 0.009125377217809372, 0.010944909194823271, 0.020147402688271532, 0.008849632849045719, 0.008849632849045719, 0.008849632849045719, 0.020191716630662437, 0.029288217259410332, 0.028686062588166306, 0.06410516601309613, 0.07664447221677206, 0.09608874162972547, 0.10021238058271176, 0.07989523882049776, 0.08785772988624796, 0.09016683048413976, 0.08640241655470382, 0.09441580212007794, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.01699134745530806, 0.016399234172049026, 0.009040362609332275, 0.01631030135373679, 0.014228732910347541, 0.017261712895492942, 0.05601601273592838, 0.059398993009646794, 0.05352019250512274, 0.060601894791828426, 0.05819797386706671, 0.07528345139876436, 0.05312863528609557, 0.06405229546951774, 0.06254556730532224, 0.40330387062872264, 0.41641911709432733, 0.3455565731080187, 0.33307223372433215, 0.3391642932178709, 0.34240024596412244, 0.41122133561101926, 0.36881584843335413, 0.3508025744068537, 0.0738055796473116, 0.049013286548511115, 0.06322413962528917, 0.05819132743312727, 0.06918422731678187, 0.06186722827766267, 0.05885229253016244, 0.05532443643735896, 0.0567633261967283, 0.13708895827583056, 0.15148147964616632, 0.1422818275880563, 0.13909827919565798, 0.14758017759818753, 0.12778361494370205, 0.12194143578654892, 0.1522306715521945, 0.1420984709710179, 0.20245209506405348, 0.2013317253338448, 0.20187997018652737, 0.18695799336926633, 0.1953600345908324, 0.1823460958874762, 0.17873292673034735, 0.15741259405234465, 0.16751653838132374, 0.14883176380732488, 0.13906376925894093, 0.14758703717185995, 0.13699781525411203, 0.1371022929305804, 0.13583853988849082, 0.12976263360692697, 0.1301331342986679, 0.13438302650077438, 0.14520850159205034, 0.1494591176410046, 0.15230038752351904, 0.14004872999697104, 0.1400477905142561, 0.15132825240171333, 0.15086791458735993, 0.14746171178447653, 0.1790545495915814, 0.10658149640599257, 0.0910592246193026, 0.08914590046374471, 0.12817336527629108, 0.14147708514514268, 0.10983773768937377, 0.16354505061405689, 0.16055929173760342, 0.13340152585980647, 0.33247190639822743, 0.3944494016197968, 0.16008313245141004, 0.3721545886169707, 0.3855691805296748, 0.15122125146968168, 0.36297881879480587, 0.3611072534425631, 0.36740542290677436, 0.3358614527695696, 0.35149196154987217, 0.4022230359479535, 0.14065797328225904, 0.13845162426413848, 0.10619821758204273, 0.32399761589233433, 0.32245229291695576, 0.297460840686134, 0.19135958826030042, 0.17684007362805665, 0.19534169774898014, 0.19423770729802814, 0.17654109559713704, 0.17544837651251943, 0.18300143566730853, 0.1852028202649355, 0.20421404996700865, 0.04804058418617918, 0.05299551547550996, 0.05889785289422611, 0.05419219823455301, 0.052549495644664046, 0.048334802650275566, 0.04671817254933652, 0.05754988369214209, 0.05419550684025054]}, "mutation_prompt": null}
{"id": "35a2da51-8f58-4f18-87f8-a453456a26d3", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nfrom scipy.optimize import minimize\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 20  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.multi_objective = False  # Enable multi-objective optimization\n\n    def __call__(self, func, objective):\n        if self.multi_objective:\n            # Perform multi-objective optimization\n            objective_names = ['f1', 'f2']\n            constraints = ({'type': 'ineq', 'fun': lambda x: x[0]},\n                           {'type': 'ineq', 'fun': lambda x: x[1]})\n            res = minimize(lambda x: [func(x[0], x[1]), func(x[0], x[1])], [0, 0], method='SLSQP', constraints=constraints)\n            print(f\"Multi-Objective Best Solution: x = {res.x}, f(x) = {res.fun}\")\n        else:\n            for i in range(int(self.budget * self.covariance_update_rate)):\n                # Perform evolution strategy to update mean\n                new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n                new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n                new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n                # Perform genetic drift to update covariance\n                new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n                new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n                # Evaluate function at new mean\n                f_new = func(new_mean)\n\n                # Update mean and covariance\n                self.mean = new_mean\n                self.covariance = new_covariance\n\n                # Print current best solution\n                print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n            # Perform final optimization using differential evolution\n            bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n            res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n            print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ndef func2(x):\n    return x[0]**2 + x[1]**2 + x[2]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=3)\ncrowd_sourced(func, func2)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy and Enhanced Differential Evolution and Multi-Objective Optimization.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"CrowdSourcedMetaheuristic.__call__() missing 1 required positional argument: 'objective'\").", "error": "TypeError(\"CrowdSourcedMetaheuristic.__call__() missing 1 required positional argument: 'objective'\")", "parent_id": "41960fd9-335a-4511-92c2-d1db86b13758", "metadata": {}, "mutation_prompt": null}
{"id": "01cf57d6-8361-4eec-9f95-f7e854603c17", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\nfrom deap import base, creator, tools, algorithms\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 20  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.creators = [creator.CreativeStrategy(), creator.CreativeStrategy()]\n        self.tools = [tools.MutationDifferentialEvolution, toolsSelectionDifferentialEvolution]\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)\n\n# Improved code\n# The changes made were in the initialization of the creators and tools, which now include the DEAP library.\n# ```python\n# import numpy as np\n# from scipy.optimize import differential_evolution\n# import random\n# from deap import base, creator, tools, algorithms\n\n# class CrowdSourcedMetaheuristic:\n#     def __init__(self, budget, dim):\n#         self.budget = budget\n#         self.dim = dim\n#         self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n#         self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n#         self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n#         self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n#         self.population_size = 20  # Increase population size for better exploration\n#         self.adaptive_covariance = True  # Use adaptive covariance update\n#         self.differential_evolution_seed = 42  # Seed for differential evolution\n#         self.creators = [creator.CreativeStrategy(), creator.CreativeStrategy()]\n#         self.tools = [tools.MutationDifferentialEvolution, tools.SelectionDifferentialEvolution]\n\n#     def __call__(self, func):\n#         for i in range(int(self.budget * self.covariance_update_rate)):\n#             # Perform evolution strategy to update mean\n#             new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n#             new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n#             new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n#             # Perform genetic drift to update covariance\n#             new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n#             new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n#             # Evaluate function at new mean\n#             f_new = func(new_mean)\n\n#             # Update mean and covariance\n#             self.mean = new_mean\n#             self.covariance = new_covariance\n\n#             # Print current best solution\n#             print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n#         # Perform final optimization using differential evolution\n#         bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n#         res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n#         print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n#     def sample_strategy(self, mean):\n#         # Apply adaptive sampling strategy\n#         if self.adaptive_covariance:\n#             # Calculate the variance of the mean\n#             variance = np.var(mean)\n#             # Sample from a normal distribution with mean and variance\n#             new_mean = mean + np.random.normal(0, variance, size=self.dim)\n#             new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n#         else:\n#             # Randomly sample from the mean\n#             new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n#             new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n#         return new_mean\n\n# # Example usage\n# def func(x):\n#     return x[0]**2 + x[1]**2\n\n# crowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\n# crowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm using Evolution Strategies, Genetic Drift, and Adaptive Covariance Update with Improved Sampling Strategy and Enhanced Differential Evolution", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'deap'\").", "error": "ModuleNotFoundError(\"No module named 'deap'\")", "parent_id": "41960fd9-335a-4511-92c2-d1db86b13758", "metadata": {}, "mutation_prompt": null}
{"id": "1acfa7a4-397c-4f60-a08b-78990a892ff0", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\nimport matplotlib.pyplot as plt\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.5  # Update covariance at 50% of the budget\n        self.population_size = 20  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.learning_rate = 0.1  # Adaptive learning rate\n\n    def __call__(self, func):\n        # Initialize a list to store the convergence history\n        convergence_history = []\n\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Calculate the learning rate based on the current convergence\n            learning_rate = max(0.01, 0.1 - (i / (self.budget * self.covariance_update_rate)))\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + learning_rate * np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Store the current convergence history\n            convergence_history.append(f_new)\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n        # Plot the convergence history\n        plt.plot(convergence_history)\n        plt.xlabel(\"Iteration\")\n        plt.ylabel(\"Convergence\")\n        plt.title(\"Convergence History\")\n        plt.show()\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean\n            new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Refine the Crowd-Sourced Metaheuristic Algorithm by incorporating a novel adaptive learning rate strategy and a more efficient sampling method.", "configspace": "", "generation": 89, "fitness": 0.1957254857924989, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "41960fd9-335a-4511-92c2-d1db86b13758", "metadata": {"aucs": [0.48612808860023937, 0.4878792374873584, 0.49211028268961754, 0.5074396717604517, 0.5202914883706768, 0.5041231086226313, 0.5183980252579263, 0.52392594009312, 0.5169274469650482, 0.2524602844666364, 0.23835247329110554, 0.1411756006488991, 0.24542835566138133, 0.26827613769425507, 0.26827613769425507, 0.24707158682762742, 0.23437955771337304, 0.18409643204034287, 0.06481528028260541, 0.07752404124036716, 0.06729881401954985, 0.0627622969684779, 0.05581535557982842, 0.06699526464161887, 0.06322498853239322, 0.05849817280241043, 0.059174865457410464, 0.06469072814357801, 0.06146218037431117, 0.06026570348582028, 0.048091249771059164, 0.05406099312052104, 0.07164005045799027, 0.05426487875390262, 0.06221942655079715, 0.06309294308799696, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.12187505754552008, 0.12968565141361854, 0.13343835475141075, 0.1285197420060975, 0.12664663150044775, 0.1245574148846128, 0.17650032210793565, 0.1589923759565398, 0.14864372992321717, 0.15827104089980149, 0.1656370335024432, 0.14066075919037124, 0.18113980745037073, 0.16321733621699552, 0.16527212339788655, 0.2960791390090255, 0.26246678237114496, 0.19087368756471246, 0.1950963244818097, 0.054309287578139465, 0.05145922846532014, 0.23259193594670702, 0.2707515672218437, 0.2823672335697037, 0.22097984531687476, 0.22097984531687476, 0.22097984531687476, 0.20577719842065834, 0.20699990165355775, 0.20528422953392433, 0.17498515070160703, 0.07664226249741135, 0.14082440667298812, 0.06566871175823419, 0.14857499314706368, 0.1850401517184196, 0.009125377217809372, 0.010944909194823271, 0.020147402688271532, 0.008849632849045719, 0.008849632849045719, 0.008849632849045719, 0.020191716630662437, 0.029288217259410332, 0.028686062588166306, 0.06410516601309613, 0.07664447221677206, 0.09608874162972547, 0.10021238058271176, 0.07989523882049776, 0.08785772988624796, 0.09016683048413976, 0.08640241655470382, 0.09441580212007794, 0.0170646011339477, 0.0170646011339477, 0.0170646011339477, 0.01699134745530806, 0.016399234172049026, 0.009040362609332275, 0.01631030135373679, 0.014228732910347541, 0.017261712895492942, 0.05601601273592838, 0.059398993009646794, 0.05352019250512274, 0.060601894791828426, 0.05819797386706671, 0.07528345139876436, 0.05312863528609557, 0.06405229546951774, 0.06254556730532224, 0.40330387062872264, 0.41641911709432733, 0.3455565731080187, 0.33307223372433215, 0.3391642932178709, 0.34240024596412244, 0.41122133561101926, 0.36881584843335413, 0.3508025744068537, 0.0738055796473116, 0.049013286548511115, 0.06322413962528917, 0.05819132743312727, 0.06918422731678187, 0.06186722827766267, 0.05885229253016244, 0.05532443643735896, 0.0567633261967283, 0.13708895827583056, 0.15148147964616632, 0.1422818275880563, 0.13909827919565798, 0.14758017759818753, 0.12778361494370205, 0.12194143578654892, 0.1522306715521945, 0.1420984709710179, 0.20245209506405348, 0.2013317253338448, 0.20187997018652737, 0.18695799336926633, 0.1953600345908324, 0.1823460958874762, 0.17873292673034735, 0.15741259405234465, 0.16751653838132374, 0.14883176380732488, 0.13906376925894093, 0.14758703717185995, 0.13699781525411203, 0.1371022929305804, 0.13583853988849082, 0.12976263360692697, 0.1301331342986679, 0.13438302650077438, 0.14520850159205034, 0.1494591176410046, 0.15230038752351904, 0.14004872999697104, 0.1400477905142561, 0.15132825240171333, 0.15086791458735993, 0.14746171178447653, 0.1790545495915814, 0.10658149640599257, 0.0910592246193026, 0.08914590046374471, 0.12817336527629108, 0.14147708514514268, 0.10983773768937377, 0.16354505061405689, 0.16055929173760342, 0.13340152585980647, 0.33247190639822743, 0.3944494016197968, 0.16008313245141004, 0.3721545886169707, 0.3855691805296748, 0.15122125146968168, 0.36297881879480587, 0.3611072534425631, 0.36740542290677436, 0.3358614527695696, 0.35149196154987217, 0.4022230359479535, 0.14065797328225904, 0.13845162426413848, 0.10619821758204273, 0.32399761589233433, 0.32245229291695576, 0.297460840686134, 0.19135958826030042, 0.17684007362805665, 0.19534169774898014, 0.19423770729802814, 0.17654109559713704, 0.17544837651251943, 0.18300143566730853, 0.1852028202649355, 0.20421404996700865, 0.04804058418617918, 0.05299551547550996, 0.05889785289422611, 0.05419219823455301, 0.052549495644664046, 0.048334802650275566, 0.04671817254933652, 0.05754988369214209, 0.05419550684025054]}, "mutation_prompt": null}
{"id": "df3b3e58-16a6-46b7-afb1-60445c8ad79e", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance at 20% of the budget\n        self.population_size = 50  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.exploration_rate = 0.3  # Balance exploration and exploitation\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean with exploration rate\n            if np.random.rand() < self.exploration_rate:\n                new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            else:\n                new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Adaptive Covariance Update and Enhanced Exploration-Exploitation Trade-off.", "configspace": "", "generation": 90, "fitness": 0.3036033763944314, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "41960fd9-335a-4511-92c2-d1db86b13758", "metadata": {"aucs": [0.7580166870734517, 0.7554321781499018, 0.757125893754958, 0.7594165297271807, 0.7597227493905785, 0.7698227381048934, 0.7825325934814626, 0.7671954892519116, 0.7638070579994801, 0.5037839755664746, 0.49647788475459875, 0.23304240778325624, 0.5274219374578191, 0.32259956447916394, 0.5339626551741996, 0.5629329778673073, 0.5695051670937661, 0.36367789775253134, 0.11248277773886783, 0.11204219064339815, 0.12817997646025836, 0.11768542110439173, 0.11292980926769502, 0.1466235566299623, 0.13057986672556476, 0.13036697049100732, 0.24868970530615864, 0.10063379589323396, 0.09683299944203194, 0.09138482146145399, 0.10223066356176058, 0.10028285101348211, 0.1352576957619933, 0.2477632129805366, 0.09390059726893574, 0.09845166694017449, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.2654341281855572, 0.26709279135308217, 0.39255960228873465, 0.2872088782382134, 0.2874673713203093, 0.2849450198688208, 0.24428728528080956, 0.33754516853821503, 0.24497892207485128, 0.21853309014120936, 0.22832653413451043, 0.21346926315815895, 0.2584484339440898, 0.23208054924328625, 0.2808439523140033, 0.5820892134473437, 0.5888785572076396, 0.5827534060364821, 0.5694956140938161, 0.5660111159087847, 0.4834260217532679, 0.6300627695971783, 0.5657699806461824, 0.5079064928959471, 0.520979845316919, 0.520979845316919, 0.520979845316919, 0.4759371652770338, 0.4939197093368466, 0.4935343593570305, 0.5411626651372199, 0.47779776262942963, 0.48497384374581975, 0.5351265433512971, 0.5226069245701923, 0.4454223554311546, 0.10040244866645642, 0.10815466628769632, 0.06879220210194503, 0.0690825557788346, 0.0690825557788346, 0.0690825557788346, 0.10002548827435587, 0.20760557211931607, 0.11815116811375248, 0.1810638775725687, 0.18532567904857566, 0.15871390639240668, 0.2057970331360408, 0.1806739015256308, 0.20810020933121653, 0.18571222487650707, 0.24014511456549226, 0.21465237552879712, 0.1577235858269369, 0.10785550827395363, 0.1577235858269369, 0.09664035698639417, 0.03738309856317246, 0.07272835929972776, 0.06613859607523587, 0.059201775344413954, 0.042059623633091126, 0.15476913383246516, 0.18733823175313702, 0.15235133351225816, 0.17568190182661003, 0.16977748763520972, 0.17568190182661003, 0.24245467499378615, 0.15796964617989995, 0.24245467499378615, 0.6197598093308648, 0.5777648672674145, 0.617422044160988, 0.4673104555343418, 0.4715541836733309, 0.46821780331990315, 0.580555840573261, 0.6196039306664001, 0.5067000107495128, 0.09613023133322529, 0.08490508908021943, 0.09645580457270186, 0.10320787117766772, 0.0858102574795454, 0.08356501450362452, 0.07691561417002635, 0.07803401901378526, 0.0908712840407152, 0.13722658900752138, 0.14994990410570008, 0.12931446149093373, 0.13065059102579923, 0.15245867345381137, 0.12810527129362215, 0.1627082651882229, 0.16362965031106436, 0.13409099769835953, 0.25014894855600556, 0.2488191921705526, 0.2725805341519363, 0.2541904421786575, 0.2511845553540294, 0.2372917791178617, 0.174260384924955, 0.17601030251786542, 0.14619485939584953, 0.21251651890903234, 0.20615966639689176, 0.20780842085858153, 0.20785814269272707, 0.22302772656821523, 0.19925809573725317, 0.16617235212753656, 0.16696464014703327, 0.16780385261843767, 0.1722947570872042, 0.1773536658942969, 0.1751235064991985, 0.17743361465935015, 0.17741392226413188, 0.1844529638161625, 0.2047230710575515, 0.17796700773751783, 0.21879144913371318, 0.15209955756605487, 0.1444393174391273, 0.17115870533932354, 0.1719796022079143, 0.14946268120670392, 0.1529485825743313, 0.1861138912613194, 0.18110075066422737, 0.16002567488532093, 0.16806500286008086, 0.6177591792839808, 0.6576619474295722, 0.5603564951280475, 0.14547960123658266, 0.1557215833921024, 0.5659844650529584, 0.5641029109155156, 0.5677749961357296, 0.5638886716512024, 0.1420852372455209, 0.18280522344595762, 0.17169795711770386, 0.11479048042759366, 0.17425432376105587, 0.5214699029695109, 0.5244089038933769, 0.5111504504976778, 0.18970208280840883, 0.17875433711907174, 0.20752155347977952, 0.18754060977822584, 0.20078413460466848, 0.18256272042027777, 0.17627576400263512, 0.20444067587745207, 0.20591055793989688, 0.06697876062692609, 0.06815501688648895, 0.06833592241349273, 0.08297392106347945, 0.0683710897487041, 0.07177685112855647, 0.06598408991079086, 0.07546537222290695, 0.06528427784689117]}, "mutation_prompt": null}
{"id": "ad278e1e-3b53-417c-9aad-67dd55c2d363", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance at 20% of the budget\n        self.population_size = 50  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.exploration_rate = 0.3  # Balance exploration and exploitation\n        self.learning_rate = 0.1  # Adaptive learning rate for evolution strategy\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.learning_rate, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean with exploration rate\n            if np.random.rand() < self.exploration_rate:\n                new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            else:\n                # Incorporate covariance-aware sampling\n                covariance_terms = np.random.normal(0, 1.0, size=self.dim)\n                new_mean = mean + covariance_terms * np.linalg.inv(self.covariance) @ np.random.normal(0, 1.0, size=self.dim)\n                new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Refine CrowdSourcedMetaheuristic by incorporating a novel \"Covariance-Aware\" sampling strategy and adaptive learning rate for the evolution strategy.", "configspace": "", "generation": 91, "fitness": 0.29990102742680896, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "df3b3e58-16a6-46b7-afb1-60445c8ad79e", "metadata": {"aucs": [0.7576722676395867, 0.7417038397838195, 0.752841582912783, 0.7565757176947113, 0.7681043130130276, 0.7701241992845771, 0.7800267170558149, 0.7710867823037129, 0.7813493419071238, 0.48214525937801656, 0.25095370736824985, 0.5037839755664746, 0.3846167514498636, 0.41931244858883643, 0.5565700348749013, 0.3106449450314729, 0.5319780612949325, 0.5125563708818285, 0.11330477908811076, 0.11052785612158733, 0.12686832467482378, 0.3188022171778866, 0.33315275318461135, 0.10673184367531763, 0.11855852367899933, 0.12665844523746195, 0.12971462367788777, 0.11282070951951495, 0.08530492799282763, 0.10266636152730502, 0.11897354593988296, 0.10420825164002512, 0.16503769089077502, 0.09845166694017449, 0.09845166694017449, 0.09845166694017449, 0.9594150516350497, 0.9591404210787686, 0.914754122185717, 0.9675434720668958, 0.9992060775667901, 0.9580492461776124, 0.9290318481782596, 0.8517047019110845, 0.9751636146970513, 0.2621715127595934, 0.3093594032575584, 0.2804998913926352, 0.2896822795162559, 0.2838676122626256, 0.2838676122626256, 0.36734287494684614, 0.2311061730743661, 0.24449087761266708, 0.2171672715931735, 0.2384272531573024, 0.21993135077222703, 0.22143444744275897, 0.27818325900208163, 0.25301483387608037, 0.27081717595775867, 0.2884652133181237, 0.5576669688400024, 0.5576525238789853, 0.5573064917243082, 0.0939906999462986, 0.6300627695971783, 0.42446146896311476, 0.5495136142120782, 0.520979845316919, 0.520979845316919, 0.520979845316919, 0.4935343593570305, 0.4935343593570305, 0.49407641689758375, 0.4651390279901473, 0.4670441160328419, 0.3555366979996999, 0.48528760620238065, 0.4330819976322431, 0.4547675818576288, 0.08621641316420225, 0.0717303202544699, 0.07638404953375688, 0.08981009951690844, 0.0690825557788346, 0.0690825557788346, 0.1687070714000687, 0.11122593342674703, 0.21371980573145588, 0.15674094052939802, 0.15674094052939802, 0.2363071898079786, 0.17795641426972164, 0.2022408821559989, 0.1727207544787278, 0.2123760470235989, 0.23432922656391109, 0.21787019030780852, 0.11124698202202477, 0.1577235858269369, 0.1577235858269369, 0.05649005354648018, 0.13375321258126938, 0.06949177226393621, 0.0478890899953065, 0.035085042946013, 0.06613859607523587, 0.14653620798428602, 0.14181817565762145, 0.14964361499465917, 0.13941673946808952, 0.13941673946808952, 0.15919839877289577, 0.24245467499378615, 0.24245467499378615, 0.12599820222128588, 0.5439539974682692, 0.493175280813861, 0.5276179868751696, 0.46844716139464815, 0.4723686337385814, 0.46079664885139227, 0.513401922196309, 0.47438897117283885, 0.6049192911288714, 0.1166762104566782, 0.12436403574018617, 0.09499628751578826, 0.07925474866846782, 0.07826855455805504, 0.07395060977379742, 0.07249619045296951, 0.08442387150827202, 0.0839363505410583, 0.13999321684704613, 0.1366266468663072, 0.12515190809802168, 0.1486078480498103, 0.13168564688935258, 0.1249853571550491, 0.1470368437499241, 0.1432447501780958, 0.165536829337258, 0.23795723900877574, 0.2380045332746521, 0.2451603240460155, 0.24469131151099488, 0.24129349970805503, 0.23544410036332886, 0.17972949909278102, 0.1874654192572578, 0.181540483206862, 0.21203271170873772, 0.20402764667954465, 0.20501232492154597, 0.1892058305991735, 0.1852747264430875, 0.2063662439303473, 0.1671232496072793, 0.17078526660013338, 0.16453689238387126, 0.18099318481550997, 0.17233280155674657, 0.17345775761992066, 0.17938356405740874, 0.17173546753130053, 0.18223503220701542, 0.16577260253586223, 0.1822735504040205, 0.21313802304469354, 0.148261013830995, 0.16540070196523593, 0.1430931109491097, 0.13390455607191565, 0.1574247937377946, 0.15197695989308724, 0.1919646349191425, 0.16952195781017732, 0.1594517269952459, 0.1506417072653803, 0.6558833107754374, 0.15894804284952058, 0.6669384026899082, 0.6717236373709818, 0.6396206550545872, 0.5616721767980106, 0.5599509299695375, 0.5671550919735626, 0.6352350481644281, 0.4756254433189737, 0.51464349209146, 0.532529430865436, 0.11336734684387628, 0.16522860554747842, 0.5142078128956293, 0.5122549059880748, 0.5039223687810125, 0.18334802868270816, 0.18649960263163678, 0.18863581291543974, 0.19580284944690451, 0.18628464395529465, 0.19524828324362642, 0.19455791560059077, 0.17863974645601155, 0.18635286481639324, 0.06911408839325117, 0.06267531442299423, 0.06802967878507404, 0.0863347104274409, 0.08020222955977407, 0.07854817309385598, 0.07387203041622548, 0.06289633979493225, 0.0578659150826224]}, "mutation_prompt": null}
{"id": "c3b9c020-7ace-4d78-ae6c-73e91ed3b12d", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance at 20% of the budget\n        self.population_size = 50  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.exploration_rate = 0.3  # Balance exploration and exploitation\n        self.final_optimization_method = 'differential_evolution'  # Use differential evolution for final optimization\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean with exploration rate\n            if np.random.rand() < self.exploration_rate:\n                new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            else:\n                new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Adaptive Covariance Update and Enhanced Exploration-Exploitation Trade-off using Differential Evolution for Final Optimization.", "configspace": "", "generation": 92, "fitness": 0.3036033763944314, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "df3b3e58-16a6-46b7-afb1-60445c8ad79e", "metadata": {"aucs": [0.7580166870734517, 0.7554321781499018, 0.757125893754958, 0.7594165297271807, 0.7597227493905785, 0.7698227381048934, 0.7825325934814626, 0.7671954892519116, 0.7638070579994801, 0.5037839755664746, 0.49647788475459875, 0.23304240778325624, 0.5274219374578191, 0.32259956447916394, 0.5339626551741996, 0.5629329778673073, 0.5695051670937661, 0.36367789775253134, 0.11248277773886783, 0.11204219064339815, 0.12817997646025836, 0.11768542110439173, 0.11292980926769502, 0.1466235566299623, 0.13057986672556476, 0.13036697049100732, 0.24868970530615864, 0.10063379589323396, 0.09683299944203194, 0.09138482146145399, 0.10223066356176058, 0.10028285101348211, 0.1352576957619933, 0.2477632129805366, 0.09390059726893574, 0.09845166694017449, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.2654341281855572, 0.26709279135308217, 0.39255960228873465, 0.2872088782382134, 0.2874673713203093, 0.2849450198688208, 0.24428728528080956, 0.33754516853821503, 0.24497892207485128, 0.21853309014120936, 0.22832653413451043, 0.21346926315815895, 0.2584484339440898, 0.23208054924328625, 0.2808439523140033, 0.5820892134473437, 0.5888785572076396, 0.5827534060364821, 0.5694956140938161, 0.5660111159087847, 0.4834260217532679, 0.6300627695971783, 0.5657699806461824, 0.5079064928959471, 0.520979845316919, 0.520979845316919, 0.520979845316919, 0.4759371652770338, 0.4939197093368466, 0.4935343593570305, 0.5411626651372199, 0.47779776262942963, 0.48497384374581975, 0.5351265433512971, 0.5226069245701923, 0.4454223554311546, 0.10040244866645642, 0.10815466628769632, 0.06879220210194503, 0.0690825557788346, 0.0690825557788346, 0.0690825557788346, 0.10002548827435587, 0.20760557211931607, 0.11815116811375248, 0.1810638775725687, 0.18532567904857566, 0.15871390639240668, 0.2057970331360408, 0.1806739015256308, 0.20810020933121653, 0.18571222487650707, 0.24014511456549226, 0.21465237552879712, 0.1577235858269369, 0.10785550827395363, 0.1577235858269369, 0.09664035698639417, 0.03738309856317246, 0.07272835929972776, 0.06613859607523587, 0.059201775344413954, 0.042059623633091126, 0.15476913383246516, 0.18733823175313702, 0.15235133351225816, 0.17568190182661003, 0.16977748763520972, 0.17568190182661003, 0.24245467499378615, 0.15796964617989995, 0.24245467499378615, 0.6197598093308648, 0.5777648672674145, 0.617422044160988, 0.4673104555343418, 0.4715541836733309, 0.46821780331990315, 0.580555840573261, 0.6196039306664001, 0.5067000107495128, 0.09613023133322529, 0.08490508908021943, 0.09645580457270186, 0.10320787117766772, 0.0858102574795454, 0.08356501450362452, 0.07691561417002635, 0.07803401901378526, 0.0908712840407152, 0.13722658900752138, 0.14994990410570008, 0.12931446149093373, 0.13065059102579923, 0.15245867345381137, 0.12810527129362215, 0.1627082651882229, 0.16362965031106436, 0.13409099769835953, 0.25014894855600556, 0.2488191921705526, 0.2725805341519363, 0.2541904421786575, 0.2511845553540294, 0.2372917791178617, 0.174260384924955, 0.17601030251786542, 0.14619485939584953, 0.21251651890903234, 0.20615966639689176, 0.20780842085858153, 0.20785814269272707, 0.22302772656821523, 0.19925809573725317, 0.16617235212753656, 0.16696464014703327, 0.16780385261843767, 0.1722947570872042, 0.1773536658942969, 0.1751235064991985, 0.17743361465935015, 0.17741392226413188, 0.1844529638161625, 0.2047230710575515, 0.17796700773751783, 0.21879144913371318, 0.15209955756605487, 0.1444393174391273, 0.17115870533932354, 0.1719796022079143, 0.14946268120670392, 0.1529485825743313, 0.1861138912613194, 0.18110075066422737, 0.16002567488532093, 0.16806500286008086, 0.6177591792839808, 0.6576619474295722, 0.5603564951280475, 0.14547960123658266, 0.1557215833921024, 0.5659844650529584, 0.5641029109155156, 0.5677749961357296, 0.5638886716512024, 0.1420852372455209, 0.18280522344595762, 0.17169795711770386, 0.11479048042759366, 0.17425432376105587, 0.5214699029695109, 0.5244089038933769, 0.5111504504976778, 0.18970208280840883, 0.17875433711907174, 0.20752155347977952, 0.18754060977822584, 0.20078413460466848, 0.18256272042027777, 0.17627576400263512, 0.20444067587745207, 0.20591055793989688, 0.06697876062692609, 0.06815501688648895, 0.06833592241349273, 0.08297392106347945, 0.0683710897487041, 0.07177685112855647, 0.06598408991079086, 0.07546537222290695, 0.06528427784689117]}, "mutation_prompt": null}
{"id": "2694e3ee-1100-48d3-ae0e-83ce6b58d6b4", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance at 20% of the budget\n        self.population_size = 50  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.exploration_rate = 0.3  # Balance exploration and exploitation\n        self.final_optimization_method = 'differential_evolution'  # Use differential evolution for final optimization\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        if self.final_optimization_method == 'differential_evolution':\n            bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n            res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n            print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n        elif self.final_optimization_method == 'differential_evolution_with_restart':\n            bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n            res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed, maxiter=100)\n            print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean with exploration rate\n            if np.random.rand() < self.exploration_rate:\n                new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            else:\n                new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Adaptive Covariance Update and Enhanced Exploration-Exploitation Trade-off using Differential Evolution for Final Optimization.", "configspace": "", "generation": 93, "fitness": 0.3036033763944314, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "df3b3e58-16a6-46b7-afb1-60445c8ad79e", "metadata": {"aucs": [0.7580166870734517, 0.7554321781499018, 0.757125893754958, 0.7594165297271807, 0.7597227493905785, 0.7698227381048934, 0.7825325934814626, 0.7671954892519116, 0.7638070579994801, 0.5037839755664746, 0.49647788475459875, 0.23304240778325624, 0.5274219374578191, 0.32259956447916394, 0.5339626551741996, 0.5629329778673073, 0.5695051670937661, 0.36367789775253134, 0.11248277773886783, 0.11204219064339815, 0.12817997646025836, 0.11768542110439173, 0.11292980926769502, 0.1466235566299623, 0.13057986672556476, 0.13036697049100732, 0.24868970530615864, 0.10063379589323396, 0.09683299944203194, 0.09138482146145399, 0.10223066356176058, 0.10028285101348211, 0.1352576957619933, 0.2477632129805366, 0.09390059726893574, 0.09845166694017449, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.2654341281855572, 0.26709279135308217, 0.39255960228873465, 0.2872088782382134, 0.2874673713203093, 0.2849450198688208, 0.24428728528080956, 0.33754516853821503, 0.24497892207485128, 0.21853309014120936, 0.22832653413451043, 0.21346926315815895, 0.2584484339440898, 0.23208054924328625, 0.2808439523140033, 0.5820892134473437, 0.5888785572076396, 0.5827534060364821, 0.5694956140938161, 0.5660111159087847, 0.4834260217532679, 0.6300627695971783, 0.5657699806461824, 0.5079064928959471, 0.520979845316919, 0.520979845316919, 0.520979845316919, 0.4759371652770338, 0.4939197093368466, 0.4935343593570305, 0.5411626651372199, 0.47779776262942963, 0.48497384374581975, 0.5351265433512971, 0.5226069245701923, 0.4454223554311546, 0.10040244866645642, 0.10815466628769632, 0.06879220210194503, 0.0690825557788346, 0.0690825557788346, 0.0690825557788346, 0.10002548827435587, 0.20760557211931607, 0.11815116811375248, 0.1810638775725687, 0.18532567904857566, 0.15871390639240668, 0.2057970331360408, 0.1806739015256308, 0.20810020933121653, 0.18571222487650707, 0.24014511456549226, 0.21465237552879712, 0.1577235858269369, 0.10785550827395363, 0.1577235858269369, 0.09664035698639417, 0.03738309856317246, 0.07272835929972776, 0.06613859607523587, 0.059201775344413954, 0.042059623633091126, 0.15476913383246516, 0.18733823175313702, 0.15235133351225816, 0.17568190182661003, 0.16977748763520972, 0.17568190182661003, 0.24245467499378615, 0.15796964617989995, 0.24245467499378615, 0.6197598093308648, 0.5777648672674145, 0.617422044160988, 0.4673104555343418, 0.4715541836733309, 0.46821780331990315, 0.580555840573261, 0.6196039306664001, 0.5067000107495128, 0.09613023133322529, 0.08490508908021943, 0.09645580457270186, 0.10320787117766772, 0.0858102574795454, 0.08356501450362452, 0.07691561417002635, 0.07803401901378526, 0.0908712840407152, 0.13722658900752138, 0.14994990410570008, 0.12931446149093373, 0.13065059102579923, 0.15245867345381137, 0.12810527129362215, 0.1627082651882229, 0.16362965031106436, 0.13409099769835953, 0.25014894855600556, 0.2488191921705526, 0.2725805341519363, 0.2541904421786575, 0.2511845553540294, 0.2372917791178617, 0.174260384924955, 0.17601030251786542, 0.14619485939584953, 0.21251651890903234, 0.20615966639689176, 0.20780842085858153, 0.20785814269272707, 0.22302772656821523, 0.19925809573725317, 0.16617235212753656, 0.16696464014703327, 0.16780385261843767, 0.1722947570872042, 0.1773536658942969, 0.1751235064991985, 0.17743361465935015, 0.17741392226413188, 0.1844529638161625, 0.2047230710575515, 0.17796700773751783, 0.21879144913371318, 0.15209955756605487, 0.1444393174391273, 0.17115870533932354, 0.1719796022079143, 0.14946268120670392, 0.1529485825743313, 0.1861138912613194, 0.18110075066422737, 0.16002567488532093, 0.16806500286008086, 0.6177591792839808, 0.6576619474295722, 0.5603564951280475, 0.14547960123658266, 0.1557215833921024, 0.5659844650529584, 0.5641029109155156, 0.5677749961357296, 0.5638886716512024, 0.1420852372455209, 0.18280522344595762, 0.17169795711770386, 0.11479048042759366, 0.17425432376105587, 0.5214699029695109, 0.5244089038933769, 0.5111504504976778, 0.18970208280840883, 0.17875433711907174, 0.20752155347977952, 0.18754060977822584, 0.20078413460466848, 0.18256272042027777, 0.17627576400263512, 0.20444067587745207, 0.20591055793989688, 0.06697876062692609, 0.06815501688648895, 0.06833592241349273, 0.08297392106347945, 0.0683710897487041, 0.07177685112855647, 0.06598408991079086, 0.07546537222290695, 0.06528427784689117]}, "mutation_prompt": null}
{"id": "b5228693-f25b-4370-b60a-83794389bc0f", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance at 20% of the budget\n        self.population_size = 50  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.exploration_rate = 0.3  # Balance exploration and exploitation\n        self.final_optimization_method = 'DE'  # Use differential evolution for final optimization\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed, popsize=self.population_size)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean with exploration rate\n            if np.random.rand() < self.exploration_rate:\n                new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            else:\n                new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Adaptive Covariance Update and Enhanced Exploration-Exploitation Trade-off using Differential Evolution for Final Optimization.", "configspace": "", "generation": 94, "fitness": 0.19400578127513388, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.22.", "error": "", "parent_id": "df3b3e58-16a6-46b7-afb1-60445c8ad79e", "metadata": {"aucs": [0.5680560827551615, 0.5658914938920258, 0.5834964062588485, 0.6605488002474966, 0.6495572603817508, 0.6418943365676277, 0.6532878423693749, 0.6411441519930671, 0.6267153071515759, 0.0764634579790654, 0.06752816331602329, 0.12129772814710993, 0.09399146100939448, 0.07144761668991906, 0.06986448116769917, 0.0800435452689715, 0.05200310740343028, 0.0800435452689715, 0.07462813191757656, 0.07394506863396422, 0.07356954601720023, 0.07936163127145501, 0.08297671092577608, 0.0802390331805718, 0.06594004382362095, 0.06810850936968382, 0.07910561799526916, 0.06704721746448228, 0.07309855772309459, 0.06480944188724258, 0.06419455836278432, 0.05974454425820508, 0.06685521263646022, 0.05810041842632985, 0.06356149767961583, 0.07563089841538662, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.13374881789687865, 0.1373834484847486, 0.136080798910448, 0.1404235024706626, 0.13704889862249492, 0.12145865014058432, 0.13835406689491447, 0.14228336611838077, 0.13887175146139197, 0.19441690546448298, 0.1939096336476297, 0.1712326626227315, 0.2247394774086786, 0.2356221939436115, 0.21508588742249768, 0.1985340086767422, 0.2024929059520516, 0.20547541305198647, 0.07974271081667028, 0.09090563476797675, 0.07974271081667028, 0.36815330935600055, 0.25651294696796634, 0.25501617979428637, 0.08398325775664472, 0.12228159754136891, 0.09190153609769425, 0.07167813675968959, 0.05872845245891534, 0.05772184203983255, 0.11382761953592058, 0.11382761953592058, 0.11382761953592058, 0.09267602804994024, 0.1008466166906492, 0.09192587502797145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010781481504956725, 0.0021452041226454055, 0.007897126990590198, 9.999999999998899e-05, 9.999999999998899e-05, 0.06498528037535378, 0.1164416184798105, 0.06554736113720505, 0.09404163435970003, 0.09615508354051494, 0.0748339504393416, 0.057562725567970485, 0.08644962002558754, 0.09824509902520617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002824941979394646, 0.05367088197913128, 0.05367088197913128, 0.05367088197913128, 0.047254565144717375, 0.0574713639136859, 0.039609795006492976, 0.04999839234169334, 0.04283419888942974, 0.0533816497918439, 0.38943348874847317, 0.4753320830825747, 0.5008859495296318, 0.4451397727723502, 0.48178853778856967, 0.49589132476975895, 0.49124204776936453, 0.5108528885187874, 0.5005515067319816, 0.10197314527065338, 0.08131753023641397, 0.07979256371417232, 0.08410898137730294, 0.06665706339132815, 0.061897755657428166, 0.060034598564482455, 0.0631013234535529, 0.0656047653801366, 0.13708895827583056, 0.14994990410570008, 0.1701211902169798, 0.12454995784990008, 0.14758017759818753, 0.14969337539326788, 0.12980439886530237, 0.15106191240238098, 0.13730913120181754, 0.21986095826180074, 0.21794700110740572, 0.2068308314770153, 0.20515288069387305, 0.2141190839125623, 0.21787444062157146, 0.17872428713980115, 0.18607118579420012, 0.18509360061435287, 0.15928692305403913, 0.1541760945262608, 0.15534295799389275, 0.14118938510469925, 0.14583469989273778, 0.13779725291958167, 0.18794095239145614, 0.17067068350932346, 0.15117988253277148, 0.16869508890935447, 0.16506537453336279, 0.15842618687647103, 0.1713135393337326, 0.16572936885510936, 0.18638878320938002, 0.19224704215221833, 0.20750953765332303, 0.18856261377230188, 0.15202834715914104, 0.15202834715914104, 0.15202834715914104, 0.14412798345289046, 0.1417636885662008, 0.15337765218014132, 0.16850608279961576, 0.16238225036701204, 0.1506124402945307, 0.31570382287507404, 0.1582676908266687, 0.1545344516304531, 0.20810349600510414, 0.1993430491438577, 0.20910750706347792, 0.15072512088939927, 0.1977546628717911, 0.1525958758281466, 0.37824765032464525, 0.34715742936507554, 0.231355348482843, 0.35283690183274696, 0.3227227725317374, 0.3441553567701522, 0.17181694373558387, 0.16526965547991823, 0.2430308385289699, 0.17893368147508115, 0.17854123946405065, 0.19693810942387624, 0.1878397076707764, 0.1791682177968753, 0.17512100876859382, 0.1743399798191484, 0.1865620189952234, 0.20421404996700865, 0.0572356791406754, 0.056263171072695184, 0.06400161687101846, 0.06597094953616855, 0.06176312931057604, 0.06621338795667453, 0.05638216359784198, 0.05917998124242241, 0.06570250500863606]}, "mutation_prompt": null}
{"id": "01f4965d-2827-40fd-9171-6c51ae5f499a", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance at 20% of the budget\n        self.population_size = 50  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.exploration_rate = 0.3  # Balance exploration and exploitation\n        self.mutation_rate = 0.1  # Mutation rate for evolution strategy\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean with exploration rate\n            if np.random.rand() < self.exploration_rate:\n                new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            else:\n                # Apply mutation to the mean\n                if np.random.rand() < self.mutation_rate:\n                    new_mean = self.mean + np.random.normal(0, 0.1, size=self.dim)\n                new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Adaptive Covariance Update and Enhanced Exploration-Exploitation Trade-off using Evolution Strategies and Genetic Drift", "configspace": "", "generation": 95, "fitness": 0.3036033763944314, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "df3b3e58-16a6-46b7-afb1-60445c8ad79e", "metadata": {"aucs": [0.7580166870734517, 0.7554321781499018, 0.757125893754958, 0.7594165297271807, 0.7597227493905785, 0.7698227381048934, 0.7825325934814626, 0.7671954892519116, 0.7638070579994801, 0.5037839755664746, 0.49647788475459875, 0.23304240778325624, 0.5274219374578191, 0.32259956447916394, 0.5339626551741996, 0.5629329778673073, 0.5695051670937661, 0.36367789775253134, 0.11248277773886783, 0.11204219064339815, 0.12817997646025836, 0.11768542110439173, 0.11292980926769502, 0.1466235566299623, 0.13057986672556476, 0.13036697049100732, 0.24868970530615864, 0.10063379589323396, 0.09683299944203194, 0.09138482146145399, 0.10223066356176058, 0.10028285101348211, 0.1352576957619933, 0.2477632129805366, 0.09390059726893574, 0.09845166694017449, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.2654341281855572, 0.26709279135308217, 0.39255960228873465, 0.2872088782382134, 0.2874673713203093, 0.2849450198688208, 0.24428728528080956, 0.33754516853821503, 0.24497892207485128, 0.21853309014120936, 0.22832653413451043, 0.21346926315815895, 0.2584484339440898, 0.23208054924328625, 0.2808439523140033, 0.5820892134473437, 0.5888785572076396, 0.5827534060364821, 0.5694956140938161, 0.5660111159087847, 0.4834260217532679, 0.6300627695971783, 0.5657699806461824, 0.5079064928959471, 0.520979845316919, 0.520979845316919, 0.520979845316919, 0.4759371652770338, 0.4939197093368466, 0.4935343593570305, 0.5411626651372199, 0.47779776262942963, 0.48497384374581975, 0.5351265433512971, 0.5226069245701923, 0.4454223554311546, 0.10040244866645642, 0.10815466628769632, 0.06879220210194503, 0.0690825557788346, 0.0690825557788346, 0.0690825557788346, 0.10002548827435587, 0.20760557211931607, 0.11815116811375248, 0.1810638775725687, 0.18532567904857566, 0.15871390639240668, 0.2057970331360408, 0.1806739015256308, 0.20810020933121653, 0.18571222487650707, 0.24014511456549226, 0.21465237552879712, 0.1577235858269369, 0.10785550827395363, 0.1577235858269369, 0.09664035698639417, 0.03738309856317246, 0.07272835929972776, 0.06613859607523587, 0.059201775344413954, 0.042059623633091126, 0.15476913383246516, 0.18733823175313702, 0.15235133351225816, 0.17568190182661003, 0.16977748763520972, 0.17568190182661003, 0.24245467499378615, 0.15796964617989995, 0.24245467499378615, 0.6197598093308648, 0.5777648672674145, 0.617422044160988, 0.4673104555343418, 0.4715541836733309, 0.46821780331990315, 0.580555840573261, 0.6196039306664001, 0.5067000107495128, 0.09613023133322529, 0.08490508908021943, 0.09645580457270186, 0.10320787117766772, 0.0858102574795454, 0.08356501450362452, 0.07691561417002635, 0.07803401901378526, 0.0908712840407152, 0.13722658900752138, 0.14994990410570008, 0.12931446149093373, 0.13065059102579923, 0.15245867345381137, 0.12810527129362215, 0.1627082651882229, 0.16362965031106436, 0.13409099769835953, 0.25014894855600556, 0.2488191921705526, 0.2725805341519363, 0.2541904421786575, 0.2511845553540294, 0.2372917791178617, 0.174260384924955, 0.17601030251786542, 0.14619485939584953, 0.21251651890903234, 0.20615966639689176, 0.20780842085858153, 0.20785814269272707, 0.22302772656821523, 0.19925809573725317, 0.16617235212753656, 0.16696464014703327, 0.16780385261843767, 0.1722947570872042, 0.1773536658942969, 0.1751235064991985, 0.17743361465935015, 0.17741392226413188, 0.1844529638161625, 0.2047230710575515, 0.17796700773751783, 0.21879144913371318, 0.15209955756605487, 0.1444393174391273, 0.17115870533932354, 0.1719796022079143, 0.14946268120670392, 0.1529485825743313, 0.1861138912613194, 0.18110075066422737, 0.16002567488532093, 0.16806500286008086, 0.6177591792839808, 0.6576619474295722, 0.5603564951280475, 0.14547960123658266, 0.1557215833921024, 0.5659844650529584, 0.5641029109155156, 0.5677749961357296, 0.5638886716512024, 0.1420852372455209, 0.18280522344595762, 0.17169795711770386, 0.11479048042759366, 0.17425432376105587, 0.5214699029695109, 0.5244089038933769, 0.5111504504976778, 0.18970208280840883, 0.17875433711907174, 0.20752155347977952, 0.18754060977822584, 0.20078413460466848, 0.18256272042027777, 0.17627576400263512, 0.20444067587745207, 0.20591055793989688, 0.06697876062692609, 0.06815501688648895, 0.06833592241349273, 0.08297392106347945, 0.0683710897487041, 0.07177685112855647, 0.06598408991079086, 0.07546537222290695, 0.06528427784689117]}, "mutation_prompt": null}
{"id": "af1a6193-f17e-4d05-a91d-e948c365be52", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance at 20% of the budget\n        self.population_size = 100  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.exploration_rate = 0.3  # Balance exploration and exploitation\n        self.es_lambda = 0.1  # Evolution strategy lambda parameter\n        self.es_mu = 10  # Evolution strategy mu parameter\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, self.es_lambda, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean with exploration rate\n            if np.random.rand() < self.exploration_rate:\n                new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            else:\n                new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Adaptive Covariance Update and Enhanced Exploration-Exploitation Trade-off using Evolution Strategies and Differential Evolution.", "configspace": "", "generation": 96, "fitness": 0.29990102742680896, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "df3b3e58-16a6-46b7-afb1-60445c8ad79e", "metadata": {"aucs": [0.7576722676395867, 0.7417038397838195, 0.752841582912783, 0.7565757176947113, 0.7681043130130276, 0.7701241992845771, 0.7800267170558149, 0.7710867823037129, 0.7813493419071238, 0.48214525937801656, 0.25095370736824985, 0.5037839755664746, 0.3846167514498636, 0.41931244858883643, 0.5565700348749013, 0.3106449450314729, 0.5319780612949325, 0.5125563708818285, 0.11330477908811076, 0.11052785612158733, 0.12686832467482378, 0.3188022171778866, 0.33315275318461135, 0.10673184367531763, 0.11855852367899933, 0.12665844523746195, 0.12971462367788777, 0.11282070951951495, 0.08530492799282763, 0.10266636152730502, 0.11897354593988296, 0.10420825164002512, 0.16503769089077502, 0.09845166694017449, 0.09845166694017449, 0.09845166694017449, 0.9594150516350497, 0.9591404210787686, 0.914754122185717, 0.9675434720668958, 0.9992060775667901, 0.9580492461776124, 0.9290318481782596, 0.8517047019110845, 0.9751636146970513, 0.2621715127595934, 0.3093594032575584, 0.2804998913926352, 0.2896822795162559, 0.2838676122626256, 0.2838676122626256, 0.36734287494684614, 0.2311061730743661, 0.24449087761266708, 0.2171672715931735, 0.2384272531573024, 0.21993135077222703, 0.22143444744275897, 0.27818325900208163, 0.25301483387608037, 0.27081717595775867, 0.2884652133181237, 0.5576669688400024, 0.5576525238789853, 0.5573064917243082, 0.0939906999462986, 0.6300627695971783, 0.42446146896311476, 0.5495136142120782, 0.520979845316919, 0.520979845316919, 0.520979845316919, 0.4935343593570305, 0.4935343593570305, 0.49407641689758375, 0.4651390279901473, 0.4670441160328419, 0.3555366979996999, 0.48528760620238065, 0.4330819976322431, 0.4547675818576288, 0.08621641316420225, 0.0717303202544699, 0.07638404953375688, 0.08981009951690844, 0.0690825557788346, 0.0690825557788346, 0.1687070714000687, 0.11122593342674703, 0.21371980573145588, 0.15674094052939802, 0.15674094052939802, 0.2363071898079786, 0.17795641426972164, 0.2022408821559989, 0.1727207544787278, 0.2123760470235989, 0.23432922656391109, 0.21787019030780852, 0.11124698202202477, 0.1577235858269369, 0.1577235858269369, 0.05649005354648018, 0.13375321258126938, 0.06949177226393621, 0.0478890899953065, 0.035085042946013, 0.06613859607523587, 0.14653620798428602, 0.14181817565762145, 0.14964361499465917, 0.13941673946808952, 0.13941673946808952, 0.15919839877289577, 0.24245467499378615, 0.24245467499378615, 0.12599820222128588, 0.5439539974682692, 0.493175280813861, 0.5276179868751696, 0.46844716139464815, 0.4723686337385814, 0.46079664885139227, 0.513401922196309, 0.47438897117283885, 0.6049192911288714, 0.1166762104566782, 0.12436403574018617, 0.09499628751578826, 0.07925474866846782, 0.07826855455805504, 0.07395060977379742, 0.07249619045296951, 0.08442387150827202, 0.0839363505410583, 0.13999321684704613, 0.1366266468663072, 0.12515190809802168, 0.1486078480498103, 0.13168564688935258, 0.1249853571550491, 0.1470368437499241, 0.1432447501780958, 0.165536829337258, 0.23795723900877574, 0.2380045332746521, 0.2451603240460155, 0.24469131151099488, 0.24129349970805503, 0.23544410036332886, 0.17972949909278102, 0.1874654192572578, 0.181540483206862, 0.21203271170873772, 0.20402764667954465, 0.20501232492154597, 0.1892058305991735, 0.1852747264430875, 0.2063662439303473, 0.1671232496072793, 0.17078526660013338, 0.16453689238387126, 0.18099318481550997, 0.17233280155674657, 0.17345775761992066, 0.17938356405740874, 0.17173546753130053, 0.18223503220701542, 0.16577260253586223, 0.1822735504040205, 0.21313802304469354, 0.148261013830995, 0.16540070196523593, 0.1430931109491097, 0.13390455607191565, 0.1574247937377946, 0.15197695989308724, 0.1919646349191425, 0.16952195781017732, 0.1594517269952459, 0.1506417072653803, 0.6558833107754374, 0.15894804284952058, 0.6669384026899082, 0.6717236373709818, 0.6396206550545872, 0.5616721767980106, 0.5599509299695375, 0.5671550919735626, 0.6352350481644281, 0.4756254433189737, 0.51464349209146, 0.532529430865436, 0.11336734684387628, 0.16522860554747842, 0.5142078128956293, 0.5122549059880748, 0.5039223687810125, 0.18334802868270816, 0.18649960263163678, 0.18863581291543974, 0.19580284944690451, 0.18628464395529465, 0.19524828324362642, 0.19455791560059077, 0.17863974645601155, 0.18635286481639324, 0.06911408839325117, 0.06267531442299423, 0.06802967878507404, 0.0863347104274409, 0.08020222955977407, 0.07854817309385598, 0.07387203041622548, 0.06289633979493225, 0.0578659150826224]}, "mutation_prompt": null}
{"id": "bd9889e2-b59b-464e-8a06-3f1b20db7c60", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance at 20% of the budget\n        self.population_size = 50  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.exploration_rate = 0.3  # Balance exploration and exploitation\n        self.covariance_update_interval = int(self.budget * self.covariance_update_rate)\n\n    def __call__(self, func):\n        for i in range(self.covariance_update_interval):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean with exploration rate\n            if np.random.rand() < self.exploration_rate:\n                new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            else:\n                new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Adaptive Covariance Update and Enhanced Exploration-Exploitation Trade-off using Differential Evolution.", "configspace": "", "generation": 97, "fitness": 0.3036033763944314, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "df3b3e58-16a6-46b7-afb1-60445c8ad79e", "metadata": {"aucs": [0.7580166870734517, 0.7554321781499018, 0.757125893754958, 0.7594165297271807, 0.7597227493905785, 0.7698227381048934, 0.7825325934814626, 0.7671954892519116, 0.7638070579994801, 0.5037839755664746, 0.49647788475459875, 0.23304240778325624, 0.5274219374578191, 0.32259956447916394, 0.5339626551741996, 0.5629329778673073, 0.5695051670937661, 0.36367789775253134, 0.11248277773886783, 0.11204219064339815, 0.12817997646025836, 0.11768542110439173, 0.11292980926769502, 0.1466235566299623, 0.13057986672556476, 0.13036697049100732, 0.24868970530615864, 0.10063379589323396, 0.09683299944203194, 0.09138482146145399, 0.10223066356176058, 0.10028285101348211, 0.1352576957619933, 0.2477632129805366, 0.09390059726893574, 0.09845166694017449, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.2654341281855572, 0.26709279135308217, 0.39255960228873465, 0.2872088782382134, 0.2874673713203093, 0.2849450198688208, 0.24428728528080956, 0.33754516853821503, 0.24497892207485128, 0.21853309014120936, 0.22832653413451043, 0.21346926315815895, 0.2584484339440898, 0.23208054924328625, 0.2808439523140033, 0.5820892134473437, 0.5888785572076396, 0.5827534060364821, 0.5694956140938161, 0.5660111159087847, 0.4834260217532679, 0.6300627695971783, 0.5657699806461824, 0.5079064928959471, 0.520979845316919, 0.520979845316919, 0.520979845316919, 0.4759371652770338, 0.4939197093368466, 0.4935343593570305, 0.5411626651372199, 0.47779776262942963, 0.48497384374581975, 0.5351265433512971, 0.5226069245701923, 0.4454223554311546, 0.10040244866645642, 0.10815466628769632, 0.06879220210194503, 0.0690825557788346, 0.0690825557788346, 0.0690825557788346, 0.10002548827435587, 0.20760557211931607, 0.11815116811375248, 0.1810638775725687, 0.18532567904857566, 0.15871390639240668, 0.2057970331360408, 0.1806739015256308, 0.20810020933121653, 0.18571222487650707, 0.24014511456549226, 0.21465237552879712, 0.1577235858269369, 0.10785550827395363, 0.1577235858269369, 0.09664035698639417, 0.03738309856317246, 0.07272835929972776, 0.06613859607523587, 0.059201775344413954, 0.042059623633091126, 0.15476913383246516, 0.18733823175313702, 0.15235133351225816, 0.17568190182661003, 0.16977748763520972, 0.17568190182661003, 0.24245467499378615, 0.15796964617989995, 0.24245467499378615, 0.6197598093308648, 0.5777648672674145, 0.617422044160988, 0.4673104555343418, 0.4715541836733309, 0.46821780331990315, 0.580555840573261, 0.6196039306664001, 0.5067000107495128, 0.09613023133322529, 0.08490508908021943, 0.09645580457270186, 0.10320787117766772, 0.0858102574795454, 0.08356501450362452, 0.07691561417002635, 0.07803401901378526, 0.0908712840407152, 0.13722658900752138, 0.14994990410570008, 0.12931446149093373, 0.13065059102579923, 0.15245867345381137, 0.12810527129362215, 0.1627082651882229, 0.16362965031106436, 0.13409099769835953, 0.25014894855600556, 0.2488191921705526, 0.2725805341519363, 0.2541904421786575, 0.2511845553540294, 0.2372917791178617, 0.174260384924955, 0.17601030251786542, 0.14619485939584953, 0.21251651890903234, 0.20615966639689176, 0.20780842085858153, 0.20785814269272707, 0.22302772656821523, 0.19925809573725317, 0.16617235212753656, 0.16696464014703327, 0.16780385261843767, 0.1722947570872042, 0.1773536658942969, 0.1751235064991985, 0.17743361465935015, 0.17741392226413188, 0.1844529638161625, 0.2047230710575515, 0.17796700773751783, 0.21879144913371318, 0.15209955756605487, 0.1444393174391273, 0.17115870533932354, 0.1719796022079143, 0.14946268120670392, 0.1529485825743313, 0.1861138912613194, 0.18110075066422737, 0.16002567488532093, 0.16806500286008086, 0.6177591792839808, 0.6576619474295722, 0.5603564951280475, 0.14547960123658266, 0.1557215833921024, 0.5659844650529584, 0.5641029109155156, 0.5677749961357296, 0.5638886716512024, 0.1420852372455209, 0.18280522344595762, 0.17169795711770386, 0.11479048042759366, 0.17425432376105587, 0.5214699029695109, 0.5244089038933769, 0.5111504504976778, 0.18970208280840883, 0.17875433711907174, 0.20752155347977952, 0.18754060977822584, 0.20078413460466848, 0.18256272042027777, 0.17627576400263512, 0.20444067587745207, 0.20591055793989688, 0.06697876062692609, 0.06815501688648895, 0.06833592241349273, 0.08297392106347945, 0.0683710897487041, 0.07177685112855647, 0.06598408991079086, 0.07546537222290695, 0.06528427784689117]}, "mutation_prompt": null}
{"id": "2b7bb605-1e9d-4d3f-859c-7c74bcc81fc0", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance at 20% of the budget\n        self.population_size = 50  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.exploration_rate = 0.3  # Balance exploration and exploitation\n        self.mutation_rate = 0.1  # Mutation rate for evolution strategy\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            if np.random.rand() < self.mutation_rate:\n                new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n            self.mean = new_mean\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n        res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n        print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean with exploration rate\n            if np.random.rand() < self.exploration_rate:\n                new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            else:\n                new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Adaptive Covariance Update and Enhanced Exploration-Exploitation Trade-off using Evolution Strategies and Differential Evolution.", "configspace": "", "generation": 98, "fitness": 0.29529548926767757, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "df3b3e58-16a6-46b7-afb1-60445c8ad79e", "metadata": {"aucs": [0.7615974521666312, 0.7532597389866594, 0.7701139313612506, 0.7687622408769155, 0.7658371860561751, 0.7711758672976259, 0.7679617777160908, 0.7777739778297676, 0.7808325194927433, 0.5106131811858062, 0.3010839490414956, 0.5011424277353821, 0.570752968651147, 0.5397674016768095, 0.5339626551741996, 0.46587634271632195, 0.36367789775253134, 0.26732758982951743, 0.13155070259204205, 0.11327580135715876, 0.1293368437684942, 0.11167350602439186, 0.12072664740884342, 0.15016497518315575, 0.3195963168895619, 0.3006722137107668, 0.25561039224644533, 0.10273372527857083, 0.09387676430723946, 0.09455522369931901, 0.10579116687723056, 0.09541251403740114, 0.1354615008299126, 0.24962228747960102, 0.24014337043353384, 0.10002283529816836, 0.9619009818574051, 0.8576630153338862, 0.8253848529144264, 0.7382038133903386, 0.9090430919161364, 0.756247952276049, 0.9930065107336074, 0.6274730048793118, 0.5185899778274343, 0.2696306111442217, 0.30797374934748245, 0.3020633939255809, 0.29776769952180115, 0.29003950110041343, 0.28565478526905086, 0.2568240733981052, 0.3789680224073678, 0.2537560248719659, 0.25703893372211317, 0.1905421732382192, 0.21396852994588045, 0.25639695310771693, 0.25605793570143054, 0.2773200022118971, 0.5653920849878028, 0.5572132960806544, 0.28672928784701024, 0.5732180595707035, 0.563661732490178, 0.4834260217532679, 0.6006074396476396, 0.09845156404646604, 0.5125996187209281, 0.520979845316919, 0.520979845316919, 0.520979845316919, 0.4935343593570305, 0.538957709027079, 0.4935343593570305, 0.3752385747591629, 0.10051099092326843, 0.48497384374581975, 0.4503391905977361, 0.420774653966412, 0.4580287051775981, 0.09465877024815128, 0.09673146701946933, 0.06879220210194503, 0.09014731487489225, 0.09931628806486537, 0.0690825557788346, 0.11444104675180533, 0.08061451494045391, 0.11815116811375248, 0.1729203597770982, 0.2732079945156465, 0.15978052871682535, 0.18174031256640544, 0.18250685016755575, 0.24207306652817273, 0.2408383644887121, 0.2335413721805013, 0.22685596238379757, 0.1577235858269369, 0.1577235858269369, 0.1577235858269369, 0.06538957997523864, 0.10391953066089832, 0.09651008701056785, 0.06613859607523587, 0.06613859607523587, 0.042059623633091126, 0.1692662321050653, 0.16082174654630632, 0.14586137430036417, 0.14231148143773387, 0.20755557620369636, 0.2766359348695385, 0.24245467499378615, 0.2120192843814801, 0.24245467499378615, 0.5724210746184261, 0.5884630043653809, 0.4994883797576989, 0.4801182070263569, 0.47020239695336496, 0.47231882056231, 0.6516804886113335, 0.6107510865901006, 0.6164315185722193, 0.06902663046725577, 0.11645066606055476, 0.09891620905894905, 0.07343747056108041, 0.08145959080175924, 0.07573011836688093, 0.07550194433408797, 0.08822471997550962, 0.0696123680204408, 0.14864285836302027, 0.1387946048955142, 0.12832177360592834, 0.1262627410522773, 0.14026195272856234, 0.12512120130033422, 0.14565647821374295, 0.20982596861184033, 0.14613738325732029, 0.23136992233227538, 0.2615260390310483, 0.27573839173714443, 0.2507295671138511, 0.26629196890203244, 0.24437596525954863, 0.17447039689122523, 0.1849511171593411, 0.22981968269275166, 0.20975475827070933, 0.20793548734496803, 0.2120738574010087, 0.22246997070514218, 0.21325857886435984, 0.18777885403752148, 0.16647559490683994, 0.16575480203648474, 0.17076962011333197, 0.18054179945840554, 0.18906198837577248, 0.17622926889935575, 0.18551325913401018, 0.18065223131110908, 0.184936659928153, 0.19253440098834362, 0.21038801515028194, 0.2073122794351422, 0.16885058751444282, 0.1597308937890899, 0.18272796372926048, 0.17293462500087475, 0.16277422452025891, 0.1652909390512879, 0.15083119902601194, 0.1712917388080698, 0.15095479228014264, 0.17202342651655667, 0.17109068337161737, 0.17448205420196095, 0.17087861735741827, 0.6638899642690677, 0.5963626536308566, 0.5695320054747124, 0.5821664023401969, 0.5744683233321144, 0.47752188913195537, 0.4716597358929806, 0.1414972005484766, 0.17382043998807362, 0.17468665502598146, 0.5236997435052388, 0.5050055476870947, 0.5087308468948497, 0.5212714133119178, 0.18783659138056497, 0.19232497277269212, 0.18904697959406092, 0.18162863484515646, 0.1846682147762092, 0.1851749305892264, 0.1844958934384875, 0.18437698387759316, 0.20491169862172665, 0.07707644410052161, 0.06404672956720114, 0.06944175119632146, 0.07440476516732375, 0.08062614886167063, 0.07476986603595848, 0.06802050045695451, 0.07050883679681974, 0.06881663834794072]}, "mutation_prompt": null}
{"id": "bd8c8e34-6e64-490b-bd56-6164924cf0fb", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass CrowdSourcedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.search_space = np.array([-5.0, 5.0])  # Search space between -5.0 and 5.0\n        self.mean = np.random.uniform(self.search_space[0], self.search_space[1], size=self.dim)  # Initialize mean\n        self.covariance = np.eye(self.dim) * 1.0  # Initialize covariance matrix\n        self.covariance_update_rate = 0.2  # Update covariance at 20% of the budget\n        self.population_size = 50  # Increase population size for better exploration\n        self.adaptive_covariance = True  # Use adaptive covariance update\n        self.differential_evolution_seed = 42  # Seed for differential evolution\n        self.exploration_rate = 0.3  # Balance exploration and exploitation\n        self.final_optimization_method = 'DE'  # Use differential evolution for final optimization\n\n    def __call__(self, func):\n        for i in range(int(self.budget * self.covariance_update_rate)):\n            # Perform evolution strategy to update mean\n            new_mean = self.mean + np.random.normal(0, 1.0, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n            new_mean = self.sample_strategy(new_mean)  # Apply sampling strategy\n\n            # Perform genetic drift to update covariance\n            new_covariance = self.covariance + np.random.normal(0, 0.1, size=(self.dim, self.dim))\n            new_covariance = np.clip(new_covariance, 0, 1.0)  # Clip values to avoid negative covariance matrix\n\n            # Evaluate function at new mean\n            f_new = func(new_mean)\n\n            # Update mean and covariance\n            self.mean = new_mean\n            self.covariance = new_covariance\n\n            # Print current best solution\n            print(f\"Current best solution: x = {self.mean}, f(x) = {f_new}\")\n\n        # Perform final optimization using differential evolution\n        if self.final_optimization_method == 'DE':\n            bounds = [(self.search_space[0], self.search_space[1]) for _ in range(self.dim)]\n            res = differential_evolution(func, bounds, x0=self.mean, seed=self.differential_evolution_seed)\n            print(f\"Final best solution: x = {res.x}, f(x) = {res.fun}\")\n\n    def sample_strategy(self, mean):\n        # Apply adaptive sampling strategy\n        if self.adaptive_covariance:\n            # Calculate the variance of the mean\n            variance = np.var(mean)\n            # Sample from a normal distribution with mean and variance\n            new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        else:\n            # Randomly sample from the mean with exploration rate\n            if np.random.rand() < self.exploration_rate:\n                new_mean = mean + np.random.normal(0, 1.0, size=self.dim)\n            else:\n                new_mean = mean + np.random.normal(0, variance, size=self.dim)\n            new_mean = np.clip(new_mean, self.search_space[0], self.search_space[1])  # Clip values to search space\n        return new_mean\n\n# Example usage\ndef func(x):\n    return x[0]**2 + x[1]**2\n\ncrowd_sourced = CrowdSourcedMetaheuristic(budget=100, dim=2)\ncrowd_sourced(func)", "name": "CrowdSourcedMetaheuristic", "description": "Novel \"Crowd-Sourced\" Metaheuristic Algorithm with Improved Adaptive Covariance Update and Enhanced Exploration-Exploitation Trade-off using Differential Evolution for Final Optimization.", "configspace": "", "generation": 99, "fitness": 0.3036033763944314, "feedback": "The algorithm CrowdSourcedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "df3b3e58-16a6-46b7-afb1-60445c8ad79e", "metadata": {"aucs": [0.7580166870734517, 0.7554321781499018, 0.757125893754958, 0.7594165297271807, 0.7597227493905785, 0.7698227381048934, 0.7825325934814626, 0.7671954892519116, 0.7638070579994801, 0.5037839755664746, 0.49647788475459875, 0.23304240778325624, 0.5274219374578191, 0.32259956447916394, 0.5339626551741996, 0.5629329778673073, 0.5695051670937661, 0.36367789775253134, 0.11248277773886783, 0.11204219064339815, 0.12817997646025836, 0.11768542110439173, 0.11292980926769502, 0.1466235566299623, 0.13057986672556476, 0.13036697049100732, 0.24868970530615864, 0.10063379589323396, 0.09683299944203194, 0.09138482146145399, 0.10223066356176058, 0.10028285101348211, 0.1352576957619933, 0.2477632129805366, 0.09390059726893574, 0.09845166694017449, 0.9622761914933881, 0.9849124114314981, 0.9683880197507527, 0.9848368259978947, 0.9992057145044786, 0.9806375433663862, 0.954846400752426, 0.9921877402926825, 0.9863847120734176, 0.2654341281855572, 0.26709279135308217, 0.39255960228873465, 0.2872088782382134, 0.2874673713203093, 0.2849450198688208, 0.24428728528080956, 0.33754516853821503, 0.24497892207485128, 0.21853309014120936, 0.22832653413451043, 0.21346926315815895, 0.2584484339440898, 0.23208054924328625, 0.2808439523140033, 0.5820892134473437, 0.5888785572076396, 0.5827534060364821, 0.5694956140938161, 0.5660111159087847, 0.4834260217532679, 0.6300627695971783, 0.5657699806461824, 0.5079064928959471, 0.520979845316919, 0.520979845316919, 0.520979845316919, 0.4759371652770338, 0.4939197093368466, 0.4935343593570305, 0.5411626651372199, 0.47779776262942963, 0.48497384374581975, 0.5351265433512971, 0.5226069245701923, 0.4454223554311546, 0.10040244866645642, 0.10815466628769632, 0.06879220210194503, 0.0690825557788346, 0.0690825557788346, 0.0690825557788346, 0.10002548827435587, 0.20760557211931607, 0.11815116811375248, 0.1810638775725687, 0.18532567904857566, 0.15871390639240668, 0.2057970331360408, 0.1806739015256308, 0.20810020933121653, 0.18571222487650707, 0.24014511456549226, 0.21465237552879712, 0.1577235858269369, 0.10785550827395363, 0.1577235858269369, 0.09664035698639417, 0.03738309856317246, 0.07272835929972776, 0.06613859607523587, 0.059201775344413954, 0.042059623633091126, 0.15476913383246516, 0.18733823175313702, 0.15235133351225816, 0.17568190182661003, 0.16977748763520972, 0.17568190182661003, 0.24245467499378615, 0.15796964617989995, 0.24245467499378615, 0.6197598093308648, 0.5777648672674145, 0.617422044160988, 0.4673104555343418, 0.4715541836733309, 0.46821780331990315, 0.580555840573261, 0.6196039306664001, 0.5067000107495128, 0.09613023133322529, 0.08490508908021943, 0.09645580457270186, 0.10320787117766772, 0.0858102574795454, 0.08356501450362452, 0.07691561417002635, 0.07803401901378526, 0.0908712840407152, 0.13722658900752138, 0.14994990410570008, 0.12931446149093373, 0.13065059102579923, 0.15245867345381137, 0.12810527129362215, 0.1627082651882229, 0.16362965031106436, 0.13409099769835953, 0.25014894855600556, 0.2488191921705526, 0.2725805341519363, 0.2541904421786575, 0.2511845553540294, 0.2372917791178617, 0.174260384924955, 0.17601030251786542, 0.14619485939584953, 0.21251651890903234, 0.20615966639689176, 0.20780842085858153, 0.20785814269272707, 0.22302772656821523, 0.19925809573725317, 0.16617235212753656, 0.16696464014703327, 0.16780385261843767, 0.1722947570872042, 0.1773536658942969, 0.1751235064991985, 0.17743361465935015, 0.17741392226413188, 0.1844529638161625, 0.2047230710575515, 0.17796700773751783, 0.21879144913371318, 0.15209955756605487, 0.1444393174391273, 0.17115870533932354, 0.1719796022079143, 0.14946268120670392, 0.1529485825743313, 0.1861138912613194, 0.18110075066422737, 0.16002567488532093, 0.16806500286008086, 0.6177591792839808, 0.6576619474295722, 0.5603564951280475, 0.14547960123658266, 0.1557215833921024, 0.5659844650529584, 0.5641029109155156, 0.5677749961357296, 0.5638886716512024, 0.1420852372455209, 0.18280522344595762, 0.17169795711770386, 0.11479048042759366, 0.17425432376105587, 0.5214699029695109, 0.5244089038933769, 0.5111504504976778, 0.18970208280840883, 0.17875433711907174, 0.20752155347977952, 0.18754060977822584, 0.20078413460466848, 0.18256272042027777, 0.17627576400263512, 0.20444067587745207, 0.20591055793989688, 0.06697876062692609, 0.06815501688648895, 0.06833592241349273, 0.08297392106347945, 0.0683710897487041, 0.07177685112855647, 0.06598408991079086, 0.07546537222290695, 0.06528427784689117]}, "mutation_prompt": null}
