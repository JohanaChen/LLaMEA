{"id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.0840068750418842, "feedback": "The algorithm HybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "12cff04b-3ccb-43cb-a3e1-6e7b2e1df319", "solution": "import numpy as np\n\nclass DynamicInertiaHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        inertia_max = 0.9\n        inertia_min = 0.4\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        inertia_weight = inertia_max\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update with dynamic inertia weight\n                new_particle = particles[i] + inertia_weight * np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            inertia_weight = max(inertia_min, inertia_weight - (inertia_max - inertia_min) / max_iter)\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "DynamicInertiaHybridPSOSA", "description": "Refinement of HybridPSOSA using a dynamic inertia weight for improved convergence speed.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 28, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 28, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "5cfae293-83ad-40fc-ae49-e3bf57870b09", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "0ad5697c-ea45-4266-9be8-b4a5459ede25", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "cc520d75-7d4b-406b-913a-ee731f54fff3", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "22859a04-e3ad-4f92-8054-6d770c3914e8", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "e2cb937c-3b51-4a61-8360-044b030fa5dd", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "20e49b82-2fa2-48a1-8472-e24bf56015ea", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "5969bc35-4c7a-4851-b677-adaf7bf1c6f1", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # Enhanced PSO update with dynamic inertia weight\n                inertia_weight = 0.4 + 0.6 * (max_iter - _) / max_iter\n                new_particle = particles[i] + np.random.uniform() * inertia_weight * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "EnhancedHybridPSOSA", "description": "Enhancing the exploration-exploitation balance by incorporating a dynamic inertia weight in the Particle Swarm Optimization (PSO) update step.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "e511d5e4-2fa2-40da-b94d-4adc5046a0da", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        inertia_weight = 0.5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update with dynamic inertia weight\n                new_particle = particles[i] + inertia_weight * np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "Refine HybridPSOSA by incorporating a dynamic inertia weight for PSO update to balance exploration and exploitation.", "configspace": "", "generation": 9, "fitness": 0.06650000811205567, "feedback": "The algorithm HybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1343768646405541, 0.13083675581058773, 0.2196740472315667, 0.08943128444455783, 0.06946629874428822, 0.14118389510702523, 0.12889920950057643, 0.1275974454832447, 0.07901378011055438, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.019814608981235105, 0.05634811816858454, 0.014904395112078084, 0.03349635428640574, 0.04274569253344673, 0.054762697563091045, 0.026307723296875363, 0.0258199886552144, 0.03846499412990745, 0.023962966356042892, 0.03648004511395664, 0.006998869784692774, 0.019501673109857065, 0.015610861298592349, 0.018856137829617703, 0.0208493937937948, 0.0027785271982647686, 0.03259120187153419, 0.04508425064953203, 0.033570905689888075, 0.042782050486155465, 0.05324558914820887, 0.046780137227081964, 0.037332462972909486, 0.06379241875031183, 0.04889164439371507, 0.03910579656890367, 0.06024344694228678, 0.0, 0.028283100628315516, 0.06157292890802113, 0.03918087127035086, 0.03728760246192253, 0.0, 0.011194453811879113, 0.0, 0.10018685869140498, 0.09234888447879785, 0.09964558148669134, 0.06445163218668748, 0.04626620781231272, 0.0354702608385189, 0.0879760901630734, 0.059216496363662774, 0.030979243431686676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.033071003502584406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04203235577734721, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16880861860740515, 0.20746261608102545, 0.18380578837235684, 0.1342611780268499, 0.13189302460048202, 0.11432578434755558, 0.16181452273537722, 0.15670770423137814, 0.17349491886253832, 0.0, 0.0028898219321308316, 0.0, 0.07223352393043514, 0.014216403122232046, 0.04543289354652991, 0.040078731630053155, 0.047997516086565106, 0.036323200710063785, 0.1458463857052651, 0.09757640480356744, 0.10786384405017524, 0.11191789616394276, 0.10844057434014687, 0.11504443522128349, 0.08799080449359775, 0.11580294920362888, 0.1398872197391121, 0.1326214118370177, 0.14653459478206388, 0.121489839164723, 0.1659269383794426, 0.1853237922119898, 0.13863428013779844, 0.13647942988350992, 0.17369512487615102, 0.11839989423986375, 0.06145463518029648, 0.09974250458687584, 0.09855670233757352, 0.1320978149474089, 0.09487517830484882, 0.08855070408112586, 0.08480741590961605, 0.09376969834431781, 0.051671417894574745, 0.20111008618129467, 0.15960997424325962, 0.16895306611218097, 0.1634173408338906, 0.17119314678366648, 0.17056869432701605, 0.16475961679750784, 0.2112691229989403, 0.17979250010326397, 0.1352834745240934, 0.133632209734593, 0.1555546043815963, 0.12256010733251455, 0.1476828446698646, 0.0, 0.1454586987443789, 0.13599518951669287, 0.0, 0.1055963795638376, 0.15173068481978502, 0.08213467076659176, 0.1126375320984715, 0.12070353966556491, 0.08365783198779175, 0.07236292692505197, 0.09634568763971241, 0.11152932698860785, 0.06888359354687523, 0.06694005675780079, 0.16603200124737882, 0.09601103349902584, 0.10359942211392426, 0.17801235109641333, 0.09802184707000161, 0.06947784790311229, 0.04133833534604925, 0.16617972302448503, 0.18817440498713145, 0.18381358079470989, 0.1803564315478161, 0.17639793987224184, 0.19063965159598462, 0.1822678408423244, 0.1683678463829027, 0.2067311641459717, 0.08124046585549838, 0.05453475965886534, 0.043968299759269414, 0.0551130423008388, 0.056979613422055264, 0.05760959354022055, 0.05889215070182685, 0.061651249413858356, 0.0617140055959815]}, "mutation_prompt": null}
{"id": "3bdc9e59-5f32-40eb-8210-c3a4a414ddab", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "7d333e7e-f1ff-42e0-ac01-9ff57494f124", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "e6e9e1a3-e45a-4071-9d1a-4afb97352501", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "cd251ff4-a240-4e18-a9fa-60f0055efaa1", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "60560405-716d-4ef7-ac3e-c8ab8a699cba", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "da7c9710-85eb-4cf3-acbb-5b41ce21e7e5", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "b19f9b2f-4dd1-498a-ac76-957a5f45d0b0", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "91935f7a-e42e-4427-bac3-c1eaa99895cc", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "753ce663-877f-4b9d-b3b5-bac0efc7eb81", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "35137a4d-bef6-4238-8feb-f400e5154a59", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "2aa3e9fb-5e5a-421a-ba7b-5dc080a6fda3", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "f2dc38a8-03ef-420a-8677-63adcde9b529", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "bcd90425-0432-423a-a87c-698e1588c656", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "96916f86-46ac-41f8-9433-902d4ec94cab", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "bd8bbde7-2fec-49e2-8c36-3d0239d055da", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "7d59d471-20f6-4098-bf8e-ee67414b8452", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "5c129e5e-05e9-45ce-a037-5597e57ff3a3", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "37a930cf-60fc-49fb-a566-daed7d6b5ca6", "solution": "import numpy as np\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            # Levy flights for global exploration\n            levy = np.random.standard_cauchy(size=(n_particles, self.dim))\n            particles = particles + levy * np.random.uniform(0.01, 0.1)\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "ImprovedHybridPSOSA", "description": "Enhance the exploration capability by introducing Levy flights for global exploration in the search space.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "988d5b75-7612-44c5-8091-9190cbc3854a", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "9db6b222-c3b2-4c8b-993f-0be278800262", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        n_parents = 2\n        F = 0.5\n        CR = 0.7\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n                        \n                # Differential Evolution\n                parents = particles[np.random.choice(range(n_particles), n_parents, replace=False)]\n                donor_vector = parents[0] + F * (parents[1] - parents[2])\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial_particle = np.where(crossover_mask, donor_vector, particles[i])\n                \n                trial_cost = objective_function(trial_particle)\n                if trial_cost < new_cost:\n                    particles[i] = trial_particle\n                    cost = trial_cost\n                    \n                    if trial_cost < objective_function(best_particle):\n                        best_particle = trial_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "Enhancing the exploration capability by incorporating Differential Evolution for population diversity.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 30, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 30, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "81c6f549-6baf-4d5e-b928-8c1f55bda9a4", "solution": "import numpy as np\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n\n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n\n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n\n        T = T0\n        cost = objective_function(best_particle)\n\n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n\n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n\n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n\n            T = alpha * T\n            if T < T_min:\n                break\n\n            # Dynamic population adjustment based on fitness diversity\n            fitness_values = [objective_function(p) for p in particles]\n            diversity = np.std(fitness_values)\n            if diversity < 0.1:  # High diversity\n                n_particles = min(50, n_particles + 5)\n            elif diversity > 0.5:  # Low diversity\n                n_particles = max(10, n_particles - 5)\n            particles = np.concatenate((particles, np.random.uniform(-5.0, 5.0, size=(n_particles - len(particles), self.dim)))\n\n        return best_particle", "name": "ImprovedHybridPSOSA", "description": "Improve the exploration-exploitation balance by introducing a dynamic population size adjustment mechanism based on fitness diversity.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "1bcd22b3-5ccb-434e-a6a2-a44015101a9a", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "f5130999-fa60-4b3a-ae0c-dc6e5b8afaa2", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "2ad444bc-8423-4d76-b7ad-3cd557ec4848", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "6966d4fc-51c1-4954-a807-7745016c2571", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "5bece4e5-98c8-4ce5-a9bd-ef861d032103", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "b0ac0056-93e0-4ee3-99e2-951f5709da2b", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "cee9ec7f-84e9-4dd3-8dd8-20f563b94ce0", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "f8625836-c772-45e6-b726-da092307b5a9", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # Levy flight step for exploration\n                levy = np.random.standard_cauchy(size=self.dim)\n                new_particle += 0.01 * levy\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "EnhancedHybridPSOSA", "description": "Enhancing the exploration capability by introducing a Levy flight step for diversity in the search space.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "363cee6f-2cee-4383-ab5c-6c56c553bed5", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "3efbd65c-f8ab-432c-b01d-2bdbd5a595bf", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "95d4b5ec-4703-4449-b6c8-4271f1f7cd92", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "9d75ac33-8694-4547-b886-8800f95e4faa", "solution": "import numpy as np\n\nclass RefinedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # Levy flight update\n                if np.random.uniform() < 0.1:\n                    new_particle += 0.01 * np.random.standard_cauchy(size=self.dim)\n                \n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "RefinedHybridPSOSA", "description": "Refine the exploration of the search space by introducing Levy flight behavior to enhance global exploration capabilities.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "a5be5b61-c48a-4c52-9b80-21afcff38154", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "46663384-876c-44d3-9acf-556f1982c364", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "9bcebda3-b545-4827-bb1d-fa3d3cfe75ea", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "310a56b9-783f-4f85-b834-f59ff1f41413", "solution": "import numpy as np\n\nclass DynamicHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "DynamicHybridPSOSA", "description": "Improved hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) with a dynamic population size for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "72982d96-1cde-4346-ba09-a8103f4fbf3d", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "da923979-4c63-46f3-a06d-35f0b7c8ef22", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "690cdb3d-3e03-4188-9e95-a0099e6aef29", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "75231664-2401-4fd1-9484-9cff7e11e6dd", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "92fb7436-0864-43e7-b49c-1b4457c0e71c", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "d8433293-45b4-4e56-b07d-ee3a65b0ac91", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "4b3db251-73cf-4706-adce-1d52c3502326", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "e75be633-18cb-4d33-8d5a-9f3986efef46", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "50ef1c0a-218b-49e2-9b05-e7909f8f99d1", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "bcc7b2f8-76ec-4148-a59e-5aa71364d9f1", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "7cf588a1-476c-4ddd-b14f-fbfbffa3dc52", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "35157da6-d6b5-4d3b-be96-eb46e8ca235d", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # Levy flight as an enhancement for exploration\n                step_size = 0.01 * np.random.normal(0, 1, self.dim) / (np.abs(np.random.normal(0, 1)) ** (1 / 3))\n                new_particle += step_size\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "EnhancedHybridPSOSA", "description": "We enhance the exploration capability by introducing Levy flights to diversify the search process.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "c2231e95-f83a-4d0c-832f-d3994ad5a52d", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "21414a41-ee7c-4138-ae5c-1bcabdc84195", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "7bbe3747-b88d-4825-8ef5-ad1192243037", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "1f11f6b9-3719-46f7-9763-a1508abb9a01", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "f9bfd956-9f96-4c72-b0ba-0d107a13b9b3", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "2f882524-251e-4e28-850f-b73246d5324e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "7ab7fa23-8072-462c-bbc7-56848fb453aa", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "2946e69a-48bd-44d1-9063-96ef219d5671", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # Levy flights for exploration\n                if np.random.rand() < 0.05:\n                    particles[i] += 0.01 * np.random.standard_cauchy(self.dim)\n                else:\n                    # PSO update\n                    new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                    \n                    # SA update\n                    new_cost = objective_function(new_particle)\n                    if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                        particles[i] = new_particle\n                        cost = new_cost\n                        \n                        if new_cost < objective_function(best_particle):\n                            best_particle = new_particle\n                \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "EnhancedHybridPSOSA", "description": "Enhancing the exploration capability by introducing Levy flights for global search.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "c2267e2d-2ce2-49bf-af02-df6c0e149a4f", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "ad7bc5c0-6e94-4a97-9d02-758915c1318d", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "0de6807d-0b89-45d1-b0c3-dbea8475c93e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "d202a083-f7aa-4ee1-a17a-a6655f53d695", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "9ac0a8de-885c-46d2-8675-f4fb7ce6ae1e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "180a702c-bf01-44fc-addb-7c809eed1b16", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "b9033807-539a-4334-a532-50d2a3b73946", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update with dynamic population size adaptation\n                new_particle = particles[i] + np.random.uniform(size=self.dim) * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "EnhancedHybridPSOSA", "description": "Improved HybridPSOSA algorithm with dynamic population size adaptation to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "de2f5836-41e8-4365-a665-53a1ad5af2a3", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles)]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # Enhanced global search using Levy flights\n                if np.random.uniform() < 0.05:\n                    new_particle = new_particle + np.random.standard_cauchy(size=self.dim) / np.sqrt(np.arange(1, self.dim+1))\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "EnhancedHybridPSOSA", "description": "Enhancing the exploration capability by introducing Levy flights for global search while maintaining exploitation through PSO and SA for local optimization.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 25, 86, '        best_particle = particles[np.argmin([objective_function(p) for p in particles)]')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 25, 86, '        best_particle = particles[np.argmin([objective_function(p) for p in particles)]'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "aca6b3ca-a1f7-4bdc-884f-d2ea54c090ff", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "b6cb6563-3a18-4bad-aacb-7f5ff74b3ea4", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "6c83f4da-cc3d-4566-84a2-01e2645ee244", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        inertia_max = 0.9\n        inertia_min = 0.4\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        inertia_weight = inertia_max\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update with dynamic inertia weight\n                new_particle = particles[i] + inertia_weight * np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            inertia_weight = max(inertia_max - (_ / max_iter) * (inertia_max - inertia_min), inertia_min)\n            \n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "Enhancing the algorithm by incorporating a dynamic inertia weight factor in the Particle Swarm Optimization (PSO) component to balance exploration and exploitation.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 29, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 29, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "f9a50282-e8f0-4c4b-bb9f-e787861ace50", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        learning_rate = 0.1\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update with adaptive learning rate\n                new_particle = particles[i] + learning_rate * np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update with adaptive learning rate\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n                        \n                # Update learning rate dynamically\n                if new_cost > cost:\n                    learning_rate *= 0.9\n                else:\n                    learning_rate *= 1.1\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "EnhancedHybridPSOSA", "description": "Enhanced HybridPSOSA algorithm with adaptive learning rates for PSO and SA to dynamically adjust exploration and exploitation balance during optimization.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "68f3db06-fa2f-419a-9f0b-1ee9e09f99f8", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "92c1472b-a89d-4762-b1c8-3aa7db5a95cb", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "df15076c-1c4a-4c2c-afae-8cec81ce4829", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "14fff63f-4cf0-42a7-92b8-65191cf62e54", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "3c967223-d78f-4cfb-8a00-b5644465c86b", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "dbaeabd9-0bd7-4bf8-95ff-4f034cae6429", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles)]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # Levy flight update\n                if np.random.uniform() < 0.05:  # 5% chance for Levy flight\n                    new_particle = particles[i] + 0.01 * np.random.standard_cauchy(size=self.dim)\n                \n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "EnhancedHybridPSOSA", "description": "Enhancing the exploration phase by introducing Levy flights to jump to distant areas for improved global search.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 25, 86, '        best_particle = particles[np.argmin([objective_function(p) for p in particles)]')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 25, 86, '        best_particle = particles[np.argmin([objective_function(p) for p in particles)]'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "ca10aad5-15d8-4651-8a0d-29c8c83a86e8", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "f29b567b-89dd-4fe1-8121-d6f991d735a4", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "7f690491-908d-4e72-a863-c138672bf35b", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "03395062-a8a1-4fb1-8aae-cfdf1fae5050", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "9e78cbe4-4dae-430c-b1f7-022fb64bceed", "solution": "import numpy as np\n\nclass DynamicHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # Dynamic adjustment of exploration rates based on function landscape\n                exploration_rate = np.abs(np.mean(particles) - best_particle) / np.std(particles)\n                pso_rate = 0.5 + 0.3 * np.tanh(2 * exploration_rate)\n                sa_rate = 1 - pso_rate\n                \n                # PSO update with dynamic rate\n                new_particle = particles[i] + pso_rate * np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update with dynamic rate\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "DynamicHybridPSOSA", "description": "Improved HybridPSOSA algorithm by dynamically adjusting the PSO and SA exploration rates based on function landscape analysis.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 26, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 26, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "fce707bd-496e-42c9-96f0-8b01d03bbba1", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "75a0e3b0-9ee1-4067-bc78-cf03eb5472be", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "cfe69239-73db-422f-a6a3-3bb520d4363e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "19ec0551-6206-49e4-bfae-187465285df1", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "f6db1e08-1fe7-4c20-a387-8b0f49bb3743", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        levy_flight_beta = 1.5\n        \n        def levy_flight():\n            levy = np.zeros(self.dim)\n            for d in range(self.dim):\n                sigma = ((np.math.gamma(1 + levy_flight_beta) * np.math.sin(np.pi * levy_flight_beta / 2)) / (\n                            np.math.gamma((1 + levy_flight_beta) / 2) * levy_flight_beta * (2 ** ((levy_flight_beta - 1) / 2)))) ** (1 / levy_flight_beta)\n                u, v = np.random.normal(0, sigma), np.random.normal(0, sigma)\n                step = u / (abs(v) ** (1 / levy_flight_beta))\n                levy[d] = step\n            return levy\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_particle += levy_flight()  # Levy flight step\n                new_cost = objective_function(new_particle)\n                \n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "EnhancedHybridPSOSA", "description": "Enhancing the exploration capability by introducing Levy flights to allow for more diverse search in the solution space.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'acceptance_probability' is not defined\").", "error": "NameError(\"name 'acceptance_probability' is not defined\")", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "36ae2828-67d9-4ed4-b289-835621c109d8", "solution": "import numpy as np\n\nclass ImprovedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        inertia_weight = 0.5\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                new_particle = inertia_weight * particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            inertia_weight = 0.5 + 0.5 * (1 - T / T0)\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "ImprovedHybridPSOSA", "description": "Improved HybridPSOSA algorithm by incorporating adaptive inertia weight for better convergence speed and accuracy.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 26, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 26, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
{"id": "0a126cb3-9384-440d-8024-49c97600d500", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "75fb803f-417b-4b9d-b0dc-6977f54ddad4", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "025d50f9-fe3b-4155-9192-50bd42e117b8", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])]\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore and exploit the search space for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {"aucs": [0.1573579831596288, 0.1575753792400183, 0.3113662751609728, 0.10922917776561103, 0.08315265663091487, 0.14169826523369233, 0.12990858535176197, 0.12340994876303235, 0.0816679469728595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02464495006923373, 0.11737152034980392, 0.03831615991472537, 0.0844481084318901, 0.068062471145525, 0.08503003496103734, 0.06706934787951102, 0.0713329768904909, 0.05815607699002434, 0.04638060476084882, 0.05104727640083728, 0.021994343626966617, 0.06379530844878478, 0.04082919446032518, 0.005026114127040793, 0.022649125350447497, 0.021530126920559667, 0.03387989803263536, 0.0450842506495186, 0.0335709056898964, 0.04278205048615369, 0.05324558914821975, 0.046780137227085516, 0.037332462972916036, 0.06379241875030717, 0.048891644393718514, 0.03910579656890878, 0.0637268074537991, 0.027397175457126277, 0.03565455906198545, 0.07976790955872926, 0.0575002075787403, 0.02855252855807544, 0.005564478617044011, 0.017802515639128935, 0.0, 0.15454844343304108, 0.09150138844329792, 0.09198215825136957, 0.06095886702965325, 0.04601558783077675, 0.03242123737903635, 0.07824207660212157, 0.12989933525138564, 0.06746926850068435, 0.0, 0.0, 0.0, 0.0, 0.05920311802122891, 0.0, 0.019317198088761645, 0.0, 0.0, 0.09632025885246875, 0.027219310173772437, 0.06070581278901632, 0.02539611881294135, 0.0, 0.10103741945180589, 0.04208294262128165, 0.16298791444452765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060156932329639146, 0.023558159267196288, 0.07916039024315291, 0.06255526872518136, 0.0, 0.0, 0.09287560504062564, 0.05056036217006443, 0.036549623659439034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009347465544627398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20868467345060704, 0.16323676390775688, 0.18257506436777315, 0.1425364931099784, 0.13969788702398378, 0.11497136237289218, 0.19961133482908466, 0.30261834038910573, 0.23775209515522955, 0.0016050368106812485, 0.015091750613398847, 0.0, 0.06448555726191385, 0.06065428889884572, 0.05291587378278051, 0.08552752150132814, 0.05384966619779297, 0.06874161237907139, 0.13919403789657592, 0.13099373411460147, 0.11153926279599491, 0.11311929053625991, 0.13559253627473133, 0.11469687871958922, 0.11066309038258548, 0.11653638952310374, 0.14953945395309332, 0.13077337036121806, 0.2223582133582711, 0.12939048453568558, 0.15409146208808966, 0.2019112297017489, 0.1819817532008544, 0.13670678435742956, 0.21397709826556477, 0.1327982088290155, 0.08027425190125337, 0.07392435418371424, 0.08432605900882995, 0.13966395009720378, 0.17105549187078795, 0.12405684636721093, 0.08673062285996314, 0.1643002718676715, 0.055150635486558186, 0.2373257467544776, 0.18384778561128523, 0.20904621755822494, 0.18609641940929833, 0.18718116682418362, 0.19104133170064308, 0.23750081871595763, 0.20133058504809087, 0.17713955050517127, 0.07486808555644642, 0.15944024410607704, 0.15576393498135477, 0.15190812495189565, 0.18769817289009294, 0.1647007487556773, 0.16700366799259359, 0.17360217729341731, 0.1459246093295884, 0.1624631443882325, 0.16662446880369275, 0.10007796351694631, 0.16580472958928316, 0.1663148479658042, 0.1156485290575281, 0.1126394059376562, 0.11751812371624804, 0.11182827632150327, 0.17099594596123768, 0.09786845896435403, 0.04688767640299307, 0.09040459291604641, 0.1117351195431715, 0.050765805141345655, 0.10357024411860871, 0.2481844875859318, 0.0866485059551454, 0.19019775712602982, 0.18221938662275328, 0.18135412443572996, 0.17344328869850556, 0.18047219304785245, 0.17682110577919175, 0.1782171113860611, 0.16729030427267977, 0.17706976629140203, 0.10990843679482731, 0.06962265428611025, 0.06295042174631449, 0.08128548161072102, 0.08707368908713287, 0.08090063757373533, 0.06749205376730782, 0.0714694427682887, 0.08484279748467927]}, "mutation_prompt": null}
{"id": "e7bdf694-2668-4df2-95ab-e293c7a73f19", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n        \n        n_particles = 20\n        max_iter = self.budget // n_particles\n        alpha = 0.9\n        T0 = 1.0\n        T_min = 1e-5\n        \n        def acceptance_probability(cost, new_cost, T):\n            if new_cost < cost:\n                return 1.0\n            return np.exp((cost - new_cost) / T)\n        \n        # Initialize particles\n        particles = np.random.uniform(-5.0, 5.0, size=(n_particles, self.dim))\n        best_particle = particles[np.argmin([objective_function(p) for p in particles])\n        \n        T = T0\n        cost = objective_function(best_particle)\n        \n        for _ in range(max_iter):\n            for i in range(n_particles):\n                # PSO update\n                new_particle = particles[i] + np.random.uniform() * (best_particle - particles[i])\n                \n                # DE update\n                mutant = np.clip(particles[np.random.choice(n_particles, 3, replace=False)] + 0.5 * (particles[np.random.choice(n_particles)] - particles[np.random.choice(n_particles)]), -5.0, 5.0)\n                trial = particles[i] + 0.5 * (mutant - particles[i])\n                \n                # SA update\n                new_cost = objective_function(new_particle)\n                if acceptance_probability(cost, new_cost, T) > np.random.uniform():\n                    particles[i] = new_particle\n                    cost = new_cost\n                    \n                    if new_cost < objective_function(best_particle):\n                        best_particle = new_particle\n            \n            T = alpha * T\n            if T < T_min:\n                break\n        \n        return best_particle", "name": "HybridPSOSA", "description": "Implement differential evolution (DE) to enhance the exploration capability of the HybridPSOSA algorithm.", "configspace": "", "generation": 99, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 27, 9, '        T = T0\\n'))", "parent_id": "321f04c1-0c48-4b80-a377-af47de5b2d02", "metadata": {}, "mutation_prompt": null}
