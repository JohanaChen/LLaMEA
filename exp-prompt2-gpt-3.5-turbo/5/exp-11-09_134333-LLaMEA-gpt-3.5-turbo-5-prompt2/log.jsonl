{"id": "abe6b0f3-f77c-435d-bdff-56ab4f4fc544", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_search():\n            # PSO implementation\n            pass\n        \n        def sa_search():\n            # SA implementation\n            pass\n        \n        # Hybrid PSO-SA optimization\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search() if np.random.rand() < 0.5 else sa_search()\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) for black box optimization.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 23, in __call__\nTypeError: __call__(): incompatible function arguments. The following argument types are supported:\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\n\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, None\n.", "error": "TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, None')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 23, in __call__\nTypeError: __call__(): incompatible function arguments. The following argument types are supported:\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\n\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, None\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "a7fe5ae0-f850-44bd-889a-72369bb59c37", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def pso_search(best_solution):\n            # Dynamic PSO implementation based on problem landscape exploration\n            new_solution = best_solution + np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            # Dynamic SA implementation based on problem landscape exploration\n            new_solution = best_solution + np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        # Hybrid PSO-SA optimization\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "HybridPSOSA", "description": "Improved HybridPSOSA algorithm with dynamic adaptation of PSO and SA based on problem landscape exploration.", "configspace": "", "generation": 1, "fitness": 0.1833254573756615, "feedback": "The algorithm HybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "abe6b0f3-f77c-435d-bdff-56ab4f4fc544", "metadata": {"aucs": [0.3317962276259704, 0.31244033910598223, 0.34127813686817576, 0.31519986562007185, 0.29472455646014184, 0.32992433852519476, 0.28905260606758065, 0.30624051124691354, 0.33126479832956934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08512573216779551, 0.10644006071245526, 0.11767664049346782, 0.08475154033382937, 0.09039850996907406, 0.10101323725423395, 0.10729224724615127, 0.09488175831972889, 0.08438314528120705, 0.09226702427386024, 0.09480947583996435, 0.07320631812965872, 0.10084261383521576, 0.07153634225354977, 0.08296210826044592, 0.08447825198659775, 0.09309443760439629, 0.10234165447205668, 0.9962053143200178, 0.9927441960663249, 0.9898174225190134, 0.9943730953521378, 0.9931689043067302, 0.993011809717033, 0.9933883286610962, 0.9932808793509278, 0.996379209718854, 0.19532731124555158, 0.17581747154265936, 0.20303370946018173, 0.19577555321960405, 0.210334618504181, 0.23174878991402703, 0.17270254168811028, 0.2051937643153957, 0.1803910738955654, 0.21954679042550473, 0.2356942608850593, 0.2600705732625974, 0.23186942062583116, 0.26493743481166376, 0.2559912948214528, 0.23158176394971886, 0.21640787622103486, 0.21017158890585474, 0.12103621438483891, 0.11166346515912484, 0.11606246977359591, 0.11857332029865342, 0.10624194754083416, 0.1241513982361313, 0.12357662748705511, 0.1077587228264012, 0.1289601412174337, 0.11489736155059838, 0.09895749244003893, 0.1307616466994177, 0.08099376916341461, 0.103948278198432, 0.11146577322024187, 0.10784696277438965, 0.11564568726896196, 0.11558299312770637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07738066011614919, 0.0943726186254884, 0.17878921372840284, 0.061362848528946023, 0.0405737734177779, 0.05010094659980935, 0.1500282406225757, 0.04388814256518947, 0.15494307809634988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056179828960121414, 0.04258314462277668, 0.04381046031414515, 0.08471698187730858, 0.055598094004113974, 0.07521042936433531, 0.06364744267051048, 0.039878311817515555, 0.038373291275080046, 0.32252023277088104, 0.28382861831172945, 0.35010891417905143, 0.30803009710056095, 0.3074536386238038, 0.34670573776741676, 0.3242273212433928, 0.29477273636843937, 0.33114246867724684, 0.08884785501585302, 0.08799893163163142, 0.07812963388232552, 0.08620191734077631, 0.08626144986442086, 0.09209788971677413, 0.09124478159411209, 0.09495877715157586, 0.10164110090118061, 0.1669872536283945, 0.15125186847662042, 0.13948498213586757, 0.15270664161280145, 0.1738658949417703, 0.19371836658389252, 0.16051936212869822, 0.15347746354490555, 0.16567686015894068, 0.2430682369557967, 0.23768328701700125, 0.2103808693040018, 0.250869218357355, 0.22686304084419373, 0.2396495464142625, 0.21362623781339707, 0.2273621137643529, 0.1963952235004971, 0.16840119636332473, 0.18196041347620406, 0.11895356369257803, 0.17959987490345797, 0.16334654481819288, 0.1431003977011318, 0.14651383708681764, 0.1695234992192256, 0.17955727824578493, 0.19681439105965792, 0.1985781915623942, 0.1990269292902761, 0.21038571695608432, 0.19732342425355542, 0.20268028587054, 0.21367956687870193, 0.21257841177180814, 0.20286690060346635, 0.17700624843579005, 0.17902975542640054, 0.20005996089152456, 0.17355699273203595, 0.18555852903042258, 0.17946840835042366, 0.17206022684636268, 0.18050218987928002, 0.17766105654121855, 0.18452384999602256, 0.1356872870516882, 0.38889150652855065, 0.4052854107506152, 0.1258643068688311, 0.48794679095167603, 0.1274708603662681, 0.12257392219411556, 0.1728985272233926, 0.3853829241884892, 0.11184461301167137, 0.16893279644144477, 0.16909122214046401, 0.2048158133602015, 0.20731002091329653, 0.376181480909362, 0.16959350032311982, 0.316658397262763, 0.18251765523543195, 0.18959738392554248, 0.1808484472840305, 0.18462692829201977, 0.19123458469375043, 0.17980994780290915, 0.1862634344904729, 0.18124779883372344, 0.1979772892549705, 0.08705325271990405, 0.1158029304088748, 0.07815117962137885, 0.09386131411272147, 0.09166082676403164, 0.07210470592175422, 0.11204450074291927, 0.08715066682196626, 0.08519109996064256]}, "mutation_prompt": null}
{"id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating adaptive mutation rates for both PSO and SA to improve exploration-exploitation balance.", "configspace": "", "generation": 2, "fitness": 0.20858053118454786, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "a7fe5ae0-f850-44bd-889a-72369bb59c37", "metadata": {"aucs": [0.4270604789013708, 0.45131935529909684, 0.4621348722430687, 0.4392968784902834, 0.43426468246974503, 0.4314090665048471, 0.4426473908351969, 0.45978985946530027, 0.4275525718289692, 0.07753824413487431, 9.999999999998899e-05, 9.999999999998899e-05, 0.05098330224734893, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603961387383939, 9.999999999998899e-05, 9.999999999998899e-05, 0.09885055150950539, 0.10098606177844505, 0.08879443239764206, 0.09724900127256775, 0.09963539580453307, 0.07038645991642423, 0.09654859367883706, 0.11633096337954807, 0.07579352069103329, 0.09491708729214265, 0.10580153185465846, 0.08200999270348952, 0.058656325097576345, 0.0971353071077905, 0.07171784854144403, 0.11575955617943223, 0.08814517845712722, 0.076259555474947, 0.9918689928582102, 0.9881652530921214, 0.985354512965046, 0.986440424991337, 0.9900089626677763, 0.990864144012004, 0.9852204715504818, 0.9889390025607907, 0.9879475093093657, 0.3059737809263745, 0.30604458345769214, 0.2993917538422244, 0.3272855743000188, 0.31243994710921863, 0.29186765369684686, 0.322117985238362, 0.2973904894616932, 0.2958947884098785, 0.3369300009059345, 0.31265975405542723, 0.22703192697978758, 0.3788111797537713, 0.2424314359835753, 0.28056409463650567, 0.2319453204420876, 0.3520893257632487, 0.23652884108998373, 0.13312493378267065, 0.20315948498130665, 0.18196104899026044, 0.18296270524372116, 0.1657254617330185, 0.17409580296443106, 0.12982152988346074, 0.14523551801835288, 0.1612418667591886, 0.1421663848824719, 0.154579154192361, 0.20509062691795188, 0.1704978362360129, 0.21469635245084917, 0.13283746121274675, 0.1472443104586748, 0.16971693102972807, 0.1688978948076587, 0.04595430893155661, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560059179202201, 0.007398465977578206, 0.027113643011960065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046492147539177076, 0.04983753441868466, 0.18115315866870674, 0.10464627933868054, 0.014418980253140368, 0.057202176737864985, 0.18349627590837658, 0.055037363963772234, 0.12868309306605008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05657404380754305, 0.07339626850668868, 0.10725263783872307, 0.11773212920219545, 0.10256145348198553, 0.0952693824755586, 0.09715799847661488, 0.10236552364605545, 0.0892182411078043, 0.44820521991291085, 0.4168510394942858, 0.42638355203775835, 0.38904921453049324, 0.40296600104496216, 0.4542918786993688, 0.40634218589151017, 0.42589453080673756, 0.4020467294395994, 0.09281067853998959, 0.07576095666982641, 0.08447892559565995, 0.08939602827480886, 0.12154766556738617, 0.1406858290540549, 0.10374166808704488, 0.08361342228553381, 0.08500733306151742, 0.3137917058979801, 0.15765212746361412, 0.23818226442314483, 0.13363400197298558, 0.2693415611611292, 0.28025199291458414, 0.27799233241610677, 0.23461876319608177, 0.2673771714718951, 0.2888617363558553, 0.27830333558779785, 0.15613570384931186, 0.2498772435216695, 0.2867705965105203, 0.26016527298799796, 0.20388482730515145, 0.1929557883788663, 0.0970717004689231, 0.20428358406751246, 0.1756451355604136, 0.08360643116476918, 0.21333889129142447, 0.23523026762284194, 0.08846341531610957, 0.17401792488300594, 0.15525428523912266, 0.15531277320798986, 0.21417242810079218, 0.23917604196703934, 0.2020090074391051, 0.1932505242943957, 0.20028751106553178, 0.20273643581512368, 0.21414631641021786, 0.1875320593826787, 0.21344899025325204, 0.19291424106376975, 0.18052744478685367, 0.18850447532580183, 0.18668558232850863, 0.2297484701695438, 0.17392571954871416, 0.18949108387674873, 0.1878454860385117, 0.19440162380455628, 0.12356064249122378, 0.13720313694311959, 0.1747189247263805, 0.17603927513938777, 0.1516883020179859, 0.06205145272122192, 0.10893022360451432, 0.12606913945891196, 0.16877110748005109, 0.647040961734946, 0.11328163023600901, 0.15444905215299964, 0.1565548108302841, 0.21398003834178358, 0.20773432904577782, 0.5467841998481922, 0.1698424631338401, 0.41707877227892354, 0.1809800036119582, 0.19728996332959503, 0.18315319058419333, 0.1762261049140501, 0.1757418400765156, 0.18906907565173758, 0.1824599854673491, 0.19299348161915608, 0.1804860593397023, 0.07625177989648713, 0.11162443629045593, 0.07078384945333005, 0.08183718404257201, 0.0892677782471959, 0.10868337625331914, 0.10336350951915951, 0.07837405818515342, 0.0962950701070111]}, "mutation_prompt": null}
{"id": "188ef3ad-57e3-46ce-82ed-19acb01e2c33", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating adaptive mutation rates for both PSO and SA to improve exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.4270604789013708, 0.45131935529909684, 0.4621348722430687, 0.4392968784902834, 0.43426468246974503, 0.4314090665048471, 0.4426473908351969, 0.45978985946530027, 0.4275525718289692, 0.07753824413487431, 9.999999999998899e-05, 9.999999999998899e-05, 0.05098330224734893, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603961387383939, 9.999999999998899e-05, 9.999999999998899e-05, 0.09885055150950539, 0.10098606177844505, 0.08879443239764206, 0.09724900127256775, 0.09963539580453307, 0.07038645991642423, 0.09654859367883706, 0.11633096337954807, 0.07579352069103329, 0.09491708729214265, 0.10580153185465846, 0.08200999270348952, 0.058656325097576345, 0.0971353071077905, 0.07171784854144403, 0.11575955617943223, 0.08814517845712722, 0.076259555474947, 0.9918689928582102, 0.9881652530921214, 0.985354512965046, 0.986440424991337, 0.9900089626677763, 0.990864144012004, 0.9852204715504818, 0.9889390025607907, 0.9879475093093657, 0.3059737809263745, 0.30604458345769214, 0.2993917538422244, 0.3272855743000188, 0.31243994710921863, 0.29186765369684686, 0.322117985238362, 0.2973904894616932, 0.2958947884098785, 0.3369300009059345, 0.31265975405542723, 0.22703192697978758, 0.3788111797537713, 0.2424314359835753, 0.28056409463650567, 0.2319453204420876, 0.3520893257632487, 0.23652884108998373, 0.13312493378267065, 0.20315948498130665, 0.18196104899026044, 0.18296270524372116, 0.1657254617330185, 0.17409580296443106, 0.12982152988346074, 0.14523551801835288, 0.1612418667591886, 0.1421663848824719, 0.154579154192361, 0.20509062691795188, 0.1704978362360129, 0.21469635245084917, 0.13283746121274675, 0.1472443104586748, 0.16971693102972807, 0.1688978948076587, 0.04595430893155661, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560059179202201, 0.007398465977578206, 0.027113643011960065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046492147539177076, 0.04983753441868466, 0.18115315866870674, 0.10464627933868054, 0.014418980253140368, 0.057202176737864985, 0.18349627590837658, 0.055037363963772234, 0.12868309306605008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05657404380754305, 0.07339626850668868, 0.10725263783872307, 0.11773212920219545, 0.10256145348198553, 0.0952693824755586, 0.09715799847661488, 0.10236552364605545, 0.0892182411078043, 0.44820521991291085, 0.4168510394942858, 0.42638355203775835, 0.38904921453049324, 0.40296600104496216, 0.4542918786993688, 0.40634218589151017, 0.42589453080673756, 0.4020467294395994, 0.09281067853998959, 0.07576095666982641, 0.08447892559565995, 0.08939602827480886, 0.12154766556738617, 0.1406858290540549, 0.10374166808704488, 0.08361342228553381, 0.08500733306151742, 0.3137917058979801, 0.15765212746361412, 0.23818226442314483, 0.13363400197298558, 0.2693415611611292, 0.28025199291458414, 0.27799233241610677, 0.23461876319608177, 0.2673771714718951, 0.2888617363558553, 0.27830333558779785, 0.15613570384931186, 0.2498772435216695, 0.2867705965105203, 0.26016527298799796, 0.20388482730515145, 0.1929557883788663, 0.0970717004689231, 0.20428358406751246, 0.1756451355604136, 0.08360643116476918, 0.21333889129142447, 0.23523026762284194, 0.08846341531610957, 0.17401792488300594, 0.15525428523912266, 0.15531277320798986, 0.21417242810079218, 0.23917604196703934, 0.2020090074391051, 0.1932505242943957, 0.20028751106553178, 0.20273643581512368, 0.21414631641021786, 0.1875320593826787, 0.21344899025325204, 0.19291424106376975, 0.18052744478685367, 0.18850447532580183, 0.18668558232850863, 0.2297484701695438, 0.17392571954871416, 0.18949108387674873, 0.1878454860385117, 0.19440162380455628, 0.12356064249122378, 0.13720313694311959, 0.1747189247263805, 0.17603927513938777, 0.1516883020179859, 0.06205145272122192, 0.10893022360451432, 0.12606913945891196, 0.16877110748005109, 0.647040961734946, 0.11328163023600901, 0.15444905215299964, 0.1565548108302841, 0.21398003834178358, 0.20773432904577782, 0.5467841998481922, 0.1698424631338401, 0.41707877227892354, 0.1809800036119582, 0.19728996332959503, 0.18315319058419333, 0.1762261049140501, 0.1757418400765156, 0.18906907565173758, 0.1824599854673491, 0.19299348161915608, 0.1804860593397023, 0.07625177989648713, 0.11162443629045593, 0.07078384945333005, 0.08183718404257201, 0.0892677782471959, 0.10868337625331914, 0.10336350951915951, 0.07837405818515342, 0.0962950701070111]}, "mutation_prompt": null}
{"id": "4812cdc1-d80b-43f1-a1b8-1f7a52ab42e5", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating adaptive mutation rates for both PSO and SA to improve exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.4270604789013708, 0.45131935529909684, 0.4621348722430687, 0.4392968784902834, 0.43426468246974503, 0.4314090665048471, 0.4426473908351969, 0.45978985946530027, 0.4275525718289692, 0.07753824413487431, 9.999999999998899e-05, 9.999999999998899e-05, 0.05098330224734893, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603961387383939, 9.999999999998899e-05, 9.999999999998899e-05, 0.09885055150950539, 0.10098606177844505, 0.08879443239764206, 0.09724900127256775, 0.09963539580453307, 0.07038645991642423, 0.09654859367883706, 0.11633096337954807, 0.07579352069103329, 0.09491708729214265, 0.10580153185465846, 0.08200999270348952, 0.058656325097576345, 0.0971353071077905, 0.07171784854144403, 0.11575955617943223, 0.08814517845712722, 0.076259555474947, 0.9918689928582102, 0.9881652530921214, 0.985354512965046, 0.986440424991337, 0.9900089626677763, 0.990864144012004, 0.9852204715504818, 0.9889390025607907, 0.9879475093093657, 0.3059737809263745, 0.30604458345769214, 0.2993917538422244, 0.3272855743000188, 0.31243994710921863, 0.29186765369684686, 0.322117985238362, 0.2973904894616932, 0.2958947884098785, 0.3369300009059345, 0.31265975405542723, 0.22703192697978758, 0.3788111797537713, 0.2424314359835753, 0.28056409463650567, 0.2319453204420876, 0.3520893257632487, 0.23652884108998373, 0.13312493378267065, 0.20315948498130665, 0.18196104899026044, 0.18296270524372116, 0.1657254617330185, 0.17409580296443106, 0.12982152988346074, 0.14523551801835288, 0.1612418667591886, 0.1421663848824719, 0.154579154192361, 0.20509062691795188, 0.1704978362360129, 0.21469635245084917, 0.13283746121274675, 0.1472443104586748, 0.16971693102972807, 0.1688978948076587, 0.04595430893155661, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560059179202201, 0.007398465977578206, 0.027113643011960065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046492147539177076, 0.04983753441868466, 0.18115315866870674, 0.10464627933868054, 0.014418980253140368, 0.057202176737864985, 0.18349627590837658, 0.055037363963772234, 0.12868309306605008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05657404380754305, 0.07339626850668868, 0.10725263783872307, 0.11773212920219545, 0.10256145348198553, 0.0952693824755586, 0.09715799847661488, 0.10236552364605545, 0.0892182411078043, 0.44820521991291085, 0.4168510394942858, 0.42638355203775835, 0.38904921453049324, 0.40296600104496216, 0.4542918786993688, 0.40634218589151017, 0.42589453080673756, 0.4020467294395994, 0.09281067853998959, 0.07576095666982641, 0.08447892559565995, 0.08939602827480886, 0.12154766556738617, 0.1406858290540549, 0.10374166808704488, 0.08361342228553381, 0.08500733306151742, 0.3137917058979801, 0.15765212746361412, 0.23818226442314483, 0.13363400197298558, 0.2693415611611292, 0.28025199291458414, 0.27799233241610677, 0.23461876319608177, 0.2673771714718951, 0.2888617363558553, 0.27830333558779785, 0.15613570384931186, 0.2498772435216695, 0.2867705965105203, 0.26016527298799796, 0.20388482730515145, 0.1929557883788663, 0.0970717004689231, 0.20428358406751246, 0.1756451355604136, 0.08360643116476918, 0.21333889129142447, 0.23523026762284194, 0.08846341531610957, 0.17401792488300594, 0.15525428523912266, 0.15531277320798986, 0.21417242810079218, 0.23917604196703934, 0.2020090074391051, 0.1932505242943957, 0.20028751106553178, 0.20273643581512368, 0.21414631641021786, 0.1875320593826787, 0.21344899025325204, 0.19291424106376975, 0.18052744478685367, 0.18850447532580183, 0.18668558232850863, 0.2297484701695438, 0.17392571954871416, 0.18949108387674873, 0.1878454860385117, 0.19440162380455628, 0.12356064249122378, 0.13720313694311959, 0.1747189247263805, 0.17603927513938777, 0.1516883020179859, 0.06205145272122192, 0.10893022360451432, 0.12606913945891196, 0.16877110748005109, 0.647040961734946, 0.11328163023600901, 0.15444905215299964, 0.1565548108302841, 0.21398003834178358, 0.20773432904577782, 0.5467841998481922, 0.1698424631338401, 0.41707877227892354, 0.1809800036119582, 0.19728996332959503, 0.18315319058419333, 0.1762261049140501, 0.1757418400765156, 0.18906907565173758, 0.1824599854673491, 0.19299348161915608, 0.1804860593397023, 0.07625177989648713, 0.11162443629045593, 0.07078384945333005, 0.08183718404257201, 0.0892677782471959, 0.10868337625331914, 0.10336350951915951, 0.07837405818515342, 0.0962950701070111]}, "mutation_prompt": null}
{"id": "09b8ca0a-2554-447d-b010-9527fcf0b78d", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating adaptive mutation rates for both PSO and SA to improve exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.4270604789013708, 0.45131935529909684, 0.4621348722430687, 0.4392968784902834, 0.43426468246974503, 0.4314090665048471, 0.4426473908351969, 0.45978985946530027, 0.4275525718289692, 0.07753824413487431, 9.999999999998899e-05, 9.999999999998899e-05, 0.05098330224734893, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603961387383939, 9.999999999998899e-05, 9.999999999998899e-05, 0.09885055150950539, 0.10098606177844505, 0.08879443239764206, 0.09724900127256775, 0.09963539580453307, 0.07038645991642423, 0.09654859367883706, 0.11633096337954807, 0.07579352069103329, 0.09491708729214265, 0.10580153185465846, 0.08200999270348952, 0.058656325097576345, 0.0971353071077905, 0.07171784854144403, 0.11575955617943223, 0.08814517845712722, 0.076259555474947, 0.9918689928582102, 0.9881652530921214, 0.985354512965046, 0.986440424991337, 0.9900089626677763, 0.990864144012004, 0.9852204715504818, 0.9889390025607907, 0.9879475093093657, 0.3059737809263745, 0.30604458345769214, 0.2993917538422244, 0.3272855743000188, 0.31243994710921863, 0.29186765369684686, 0.322117985238362, 0.2973904894616932, 0.2958947884098785, 0.3369300009059345, 0.31265975405542723, 0.22703192697978758, 0.3788111797537713, 0.2424314359835753, 0.28056409463650567, 0.2319453204420876, 0.3520893257632487, 0.23652884108998373, 0.13312493378267065, 0.20315948498130665, 0.18196104899026044, 0.18296270524372116, 0.1657254617330185, 0.17409580296443106, 0.12982152988346074, 0.14523551801835288, 0.1612418667591886, 0.1421663848824719, 0.154579154192361, 0.20509062691795188, 0.1704978362360129, 0.21469635245084917, 0.13283746121274675, 0.1472443104586748, 0.16971693102972807, 0.1688978948076587, 0.04595430893155661, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560059179202201, 0.007398465977578206, 0.027113643011960065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046492147539177076, 0.04983753441868466, 0.18115315866870674, 0.10464627933868054, 0.014418980253140368, 0.057202176737864985, 0.18349627590837658, 0.055037363963772234, 0.12868309306605008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05657404380754305, 0.07339626850668868, 0.10725263783872307, 0.11773212920219545, 0.10256145348198553, 0.0952693824755586, 0.09715799847661488, 0.10236552364605545, 0.0892182411078043, 0.44820521991291085, 0.4168510394942858, 0.42638355203775835, 0.38904921453049324, 0.40296600104496216, 0.4542918786993688, 0.40634218589151017, 0.42589453080673756, 0.4020467294395994, 0.09281067853998959, 0.07576095666982641, 0.08447892559565995, 0.08939602827480886, 0.12154766556738617, 0.1406858290540549, 0.10374166808704488, 0.08361342228553381, 0.08500733306151742, 0.3137917058979801, 0.15765212746361412, 0.23818226442314483, 0.13363400197298558, 0.2693415611611292, 0.28025199291458414, 0.27799233241610677, 0.23461876319608177, 0.2673771714718951, 0.2888617363558553, 0.27830333558779785, 0.15613570384931186, 0.2498772435216695, 0.2867705965105203, 0.26016527298799796, 0.20388482730515145, 0.1929557883788663, 0.0970717004689231, 0.20428358406751246, 0.1756451355604136, 0.08360643116476918, 0.21333889129142447, 0.23523026762284194, 0.08846341531610957, 0.17401792488300594, 0.15525428523912266, 0.15531277320798986, 0.21417242810079218, 0.23917604196703934, 0.2020090074391051, 0.1932505242943957, 0.20028751106553178, 0.20273643581512368, 0.21414631641021786, 0.1875320593826787, 0.21344899025325204, 0.19291424106376975, 0.18052744478685367, 0.18850447532580183, 0.18668558232850863, 0.2297484701695438, 0.17392571954871416, 0.18949108387674873, 0.1878454860385117, 0.19440162380455628, 0.12356064249122378, 0.13720313694311959, 0.1747189247263805, 0.17603927513938777, 0.1516883020179859, 0.06205145272122192, 0.10893022360451432, 0.12606913945891196, 0.16877110748005109, 0.647040961734946, 0.11328163023600901, 0.15444905215299964, 0.1565548108302841, 0.21398003834178358, 0.20773432904577782, 0.5467841998481922, 0.1698424631338401, 0.41707877227892354, 0.1809800036119582, 0.19728996332959503, 0.18315319058419333, 0.1762261049140501, 0.1757418400765156, 0.18906907565173758, 0.1824599854673491, 0.19299348161915608, 0.1804860593397023, 0.07625177989648713, 0.11162443629045593, 0.07078384945333005, 0.08183718404257201, 0.0892677782471959, 0.10868337625331914, 0.10336350951915951, 0.07837405818515342, 0.0962950701070111]}, "mutation_prompt": null}
{"id": "a99adf0c-8c97-4918-929c-5ecf794462e1", "solution": "class DynamicEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, mutation_rate):\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution, mutation_rate):\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        mutation_rate = np.random.uniform(0.1, 1.0)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, mutation_rate) if np.random.rand() < 0.5 else sa_search(best_solution, mutation_rate)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                mutation_rate = min(1.0, mutation_rate * 1.1)  # Increase mutation rate if fitness improves\n        \n        return best_solution", "name": "DynamicEnhancedHybridPSOSA", "description": "Improving exploration by introducing a dynamic mutation rate adjustment based on fitness improvement.", "configspace": "", "generation": 6, "fitness": 0.18166949822186015, "feedback": "The algorithm DynamicEnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.3536925276770242, 0.2924323378884012, 0.3310498173988151, 0.36541352754248824, 0.3024064649476632, 0.3200855814113941, 0.2965924073417707, 0.3082069673882525, 0.36061940723662855, 9.999999999998899e-05, 0.003650064551906862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07705629498552813, 0.09186571487891337, 0.0797567266657968, 0.10327292247383302, 0.0902979413422701, 0.08044315623030762, 0.10653019838801703, 0.08978851593560355, 0.0853852950389361, 0.08373837505604009, 0.11021202978287403, 0.0808214867779048, 0.07013541119135114, 0.07399687835200186, 0.07899378363144749, 0.08590491454494664, 0.08647095785740622, 0.08707375275445006, 0.9964772759610585, 0.992140752453088, 0.9921623286385934, 0.9926037800347727, 0.9902266356483881, 0.9936534214836241, 0.9947323904371048, 0.9910018403598805, 0.9930985969914067, 0.1786695434540927, 0.20437439615086195, 0.20651222248771195, 0.2280160335335194, 0.20218669630406017, 0.19787026212342884, 0.19065193690652316, 0.18386434518728045, 0.20455474887583813, 0.23366024134551266, 0.2376785344362844, 0.32841096185181196, 0.22705566833135127, 0.252306885279453, 0.239544869618748, 0.25953181462283004, 0.2953415519874959, 0.2180065715613797, 0.09158044128566467, 0.11819235459230637, 0.12394277202485993, 0.12475394693610964, 0.11380603058764804, 0.10393997745375849, 0.14256865211280634, 0.10943531826189123, 0.11027953381123312, 0.11326773579163474, 0.10568038401127411, 0.04046918470160343, 0.1294063009181431, 0.11020441943246184, 0.1334066975461803, 0.11331141509884113, 0.11596141535084648, 0.12115156765842383, 0.0014181178869044908, 0.0015913362570573186, 9.999999999998899e-05, 0.007379301545531569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0043629798053501645, 0.066751710874146, 0.06706268592695142, 0.09663539495817153, 0.06964044469626463, 0.06078311964895455, 0.05680357054763285, 0.16854878626597203, 0.03356370319832591, 0.10208423547239909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06360858791741297, 0.02145656020302289, 0.05664771744715913, 0.04861657151119525, 0.06098487125198515, 0.0462849677604148, 0.05024639946218834, 0.05637343140149642, 0.04417898828527156, 0.3302162920560523, 0.35421371183534633, 0.3083437216447462, 0.3259434736648884, 0.3039030308252838, 0.3253778248043545, 0.3063168070483593, 0.32856670230591967, 0.31592971732146613, 0.10081108809654016, 0.07550655870873813, 0.0977128230268296, 0.09334527927478664, 0.08966314511795648, 0.08665656293957524, 0.0916036452871658, 0.1056726196305493, 0.09275178129720552, 0.15686237912477408, 0.1799511658103674, 0.2082613101386782, 0.14759854743873602, 0.18112941254608805, 0.1733435974937838, 0.13296235219417973, 0.16132993794330774, 0.18194585663436524, 0.23332159165161648, 0.214482537463192, 0.20778311625103207, 0.2292909979099138, 0.22138762325467265, 0.2780895488174887, 0.19917745837097578, 0.1733605857094953, 0.23247249080012822, 0.16910601905689704, 0.09282438533469961, 0.14026357664723277, 0.1590499351089233, 0.16114871110828155, 0.18964721057442535, 0.1531739867348153, 0.13869521527765105, 0.20063285221068206, 0.21873080216010876, 0.20737698000283522, 0.21316590340316, 0.1829554548341341, 0.18396174886456695, 0.19249781278452716, 0.22109791373202947, 0.19667127120371575, 0.20739372566340397, 0.1922515505951231, 0.20056715892705845, 0.18645867588417164, 0.1773637142972888, 0.18270800902557516, 0.17866294600552934, 0.17878959284570828, 0.18958949241781198, 0.18123375061652136, 0.1815588839656852, 0.13218061506235868, 0.40152510360801275, 0.4518954103451903, 0.14776358832341485, 0.12546124532884773, 0.10813218362585608, 0.12472192822447903, 0.17136117829720876, 0.4324981653188017, 0.1128071463911472, 0.1521522872775558, 0.1687426594433753, 0.2063482582585019, 0.20335956918811493, 0.40196287588510093, 0.16802997386303464, 0.2644567190341841, 0.18331008231097767, 0.18452517696864523, 0.17430908559593794, 0.1739992847222508, 0.1969855755486365, 0.1848912263136353, 0.19472852248099215, 0.18707861129146064, 0.18589920620848166, 0.09641421107060211, 0.07823415245847809, 0.0763217018947635, 0.08129047468907613, 0.08524046018849063, 0.09159825987602965, 0.087458157594273, 0.07653245091267347, 0.07672409936252111]}, "mutation_prompt": null}
{"id": "5b20e42f-efc2-4129-8d43-01dd864f86ee", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating adaptive mutation rates for both PSO and SA to improve exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.4270604789013708, 0.45131935529909684, 0.4621348722430687, 0.4392968784902834, 0.43426468246974503, 0.4314090665048471, 0.4426473908351969, 0.45978985946530027, 0.4275525718289692, 0.07753824413487431, 9.999999999998899e-05, 9.999999999998899e-05, 0.05098330224734893, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603961387383939, 9.999999999998899e-05, 9.999999999998899e-05, 0.09885055150950539, 0.10098606177844505, 0.08879443239764206, 0.09724900127256775, 0.09963539580453307, 0.07038645991642423, 0.09654859367883706, 0.11633096337954807, 0.07579352069103329, 0.09491708729214265, 0.10580153185465846, 0.08200999270348952, 0.058656325097576345, 0.0971353071077905, 0.07171784854144403, 0.11575955617943223, 0.08814517845712722, 0.076259555474947, 0.9918689928582102, 0.9881652530921214, 0.985354512965046, 0.986440424991337, 0.9900089626677763, 0.990864144012004, 0.9852204715504818, 0.9889390025607907, 0.9879475093093657, 0.3059737809263745, 0.30604458345769214, 0.2993917538422244, 0.3272855743000188, 0.31243994710921863, 0.29186765369684686, 0.322117985238362, 0.2973904894616932, 0.2958947884098785, 0.3369300009059345, 0.31265975405542723, 0.22703192697978758, 0.3788111797537713, 0.2424314359835753, 0.28056409463650567, 0.2319453204420876, 0.3520893257632487, 0.23652884108998373, 0.13312493378267065, 0.20315948498130665, 0.18196104899026044, 0.18296270524372116, 0.1657254617330185, 0.17409580296443106, 0.12982152988346074, 0.14523551801835288, 0.1612418667591886, 0.1421663848824719, 0.154579154192361, 0.20509062691795188, 0.1704978362360129, 0.21469635245084917, 0.13283746121274675, 0.1472443104586748, 0.16971693102972807, 0.1688978948076587, 0.04595430893155661, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560059179202201, 0.007398465977578206, 0.027113643011960065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046492147539177076, 0.04983753441868466, 0.18115315866870674, 0.10464627933868054, 0.014418980253140368, 0.057202176737864985, 0.18349627590837658, 0.055037363963772234, 0.12868309306605008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05657404380754305, 0.07339626850668868, 0.10725263783872307, 0.11773212920219545, 0.10256145348198553, 0.0952693824755586, 0.09715799847661488, 0.10236552364605545, 0.0892182411078043, 0.44820521991291085, 0.4168510394942858, 0.42638355203775835, 0.38904921453049324, 0.40296600104496216, 0.4542918786993688, 0.40634218589151017, 0.42589453080673756, 0.4020467294395994, 0.09281067853998959, 0.07576095666982641, 0.08447892559565995, 0.08939602827480886, 0.12154766556738617, 0.1406858290540549, 0.10374166808704488, 0.08361342228553381, 0.08500733306151742, 0.3137917058979801, 0.15765212746361412, 0.23818226442314483, 0.13363400197298558, 0.2693415611611292, 0.28025199291458414, 0.27799233241610677, 0.23461876319608177, 0.2673771714718951, 0.2888617363558553, 0.27830333558779785, 0.15613570384931186, 0.2498772435216695, 0.2867705965105203, 0.26016527298799796, 0.20388482730515145, 0.1929557883788663, 0.0970717004689231, 0.20428358406751246, 0.1756451355604136, 0.08360643116476918, 0.21333889129142447, 0.23523026762284194, 0.08846341531610957, 0.17401792488300594, 0.15525428523912266, 0.15531277320798986, 0.21417242810079218, 0.23917604196703934, 0.2020090074391051, 0.1932505242943957, 0.20028751106553178, 0.20273643581512368, 0.21414631641021786, 0.1875320593826787, 0.21344899025325204, 0.19291424106376975, 0.18052744478685367, 0.18850447532580183, 0.18668558232850863, 0.2297484701695438, 0.17392571954871416, 0.18949108387674873, 0.1878454860385117, 0.19440162380455628, 0.12356064249122378, 0.13720313694311959, 0.1747189247263805, 0.17603927513938777, 0.1516883020179859, 0.06205145272122192, 0.10893022360451432, 0.12606913945891196, 0.16877110748005109, 0.647040961734946, 0.11328163023600901, 0.15444905215299964, 0.1565548108302841, 0.21398003834178358, 0.20773432904577782, 0.5467841998481922, 0.1698424631338401, 0.41707877227892354, 0.1809800036119582, 0.19728996332959503, 0.18315319058419333, 0.1762261049140501, 0.1757418400765156, 0.18906907565173758, 0.1824599854673491, 0.19299348161915608, 0.1804860593397023, 0.07625177989648713, 0.11162443629045593, 0.07078384945333005, 0.08183718404257201, 0.0892677782471959, 0.10868337625331914, 0.10336350951915951, 0.07837405818515342, 0.0962950701070111]}, "mutation_prompt": null}
{"id": "53691c87-ddd3-4eba-9f2a-0e1c3039b372", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating adaptive mutation rates for both PSO and SA to improve exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.4270604789013708, 0.45131935529909684, 0.4621348722430687, 0.4392968784902834, 0.43426468246974503, 0.4314090665048471, 0.4426473908351969, 0.45978985946530027, 0.4275525718289692, 0.07753824413487431, 9.999999999998899e-05, 9.999999999998899e-05, 0.05098330224734893, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603961387383939, 9.999999999998899e-05, 9.999999999998899e-05, 0.09885055150950539, 0.10098606177844505, 0.08879443239764206, 0.09724900127256775, 0.09963539580453307, 0.07038645991642423, 0.09654859367883706, 0.11633096337954807, 0.07579352069103329, 0.09491708729214265, 0.10580153185465846, 0.08200999270348952, 0.058656325097576345, 0.0971353071077905, 0.07171784854144403, 0.11575955617943223, 0.08814517845712722, 0.076259555474947, 0.9918689928582102, 0.9881652530921214, 0.985354512965046, 0.986440424991337, 0.9900089626677763, 0.990864144012004, 0.9852204715504818, 0.9889390025607907, 0.9879475093093657, 0.3059737809263745, 0.30604458345769214, 0.2993917538422244, 0.3272855743000188, 0.31243994710921863, 0.29186765369684686, 0.322117985238362, 0.2973904894616932, 0.2958947884098785, 0.3369300009059345, 0.31265975405542723, 0.22703192697978758, 0.3788111797537713, 0.2424314359835753, 0.28056409463650567, 0.2319453204420876, 0.3520893257632487, 0.23652884108998373, 0.13312493378267065, 0.20315948498130665, 0.18196104899026044, 0.18296270524372116, 0.1657254617330185, 0.17409580296443106, 0.12982152988346074, 0.14523551801835288, 0.1612418667591886, 0.1421663848824719, 0.154579154192361, 0.20509062691795188, 0.1704978362360129, 0.21469635245084917, 0.13283746121274675, 0.1472443104586748, 0.16971693102972807, 0.1688978948076587, 0.04595430893155661, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560059179202201, 0.007398465977578206, 0.027113643011960065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046492147539177076, 0.04983753441868466, 0.18115315866870674, 0.10464627933868054, 0.014418980253140368, 0.057202176737864985, 0.18349627590837658, 0.055037363963772234, 0.12868309306605008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05657404380754305, 0.07339626850668868, 0.10725263783872307, 0.11773212920219545, 0.10256145348198553, 0.0952693824755586, 0.09715799847661488, 0.10236552364605545, 0.0892182411078043, 0.44820521991291085, 0.4168510394942858, 0.42638355203775835, 0.38904921453049324, 0.40296600104496216, 0.4542918786993688, 0.40634218589151017, 0.42589453080673756, 0.4020467294395994, 0.09281067853998959, 0.07576095666982641, 0.08447892559565995, 0.08939602827480886, 0.12154766556738617, 0.1406858290540549, 0.10374166808704488, 0.08361342228553381, 0.08500733306151742, 0.3137917058979801, 0.15765212746361412, 0.23818226442314483, 0.13363400197298558, 0.2693415611611292, 0.28025199291458414, 0.27799233241610677, 0.23461876319608177, 0.2673771714718951, 0.2888617363558553, 0.27830333558779785, 0.15613570384931186, 0.2498772435216695, 0.2867705965105203, 0.26016527298799796, 0.20388482730515145, 0.1929557883788663, 0.0970717004689231, 0.20428358406751246, 0.1756451355604136, 0.08360643116476918, 0.21333889129142447, 0.23523026762284194, 0.08846341531610957, 0.17401792488300594, 0.15525428523912266, 0.15531277320798986, 0.21417242810079218, 0.23917604196703934, 0.2020090074391051, 0.1932505242943957, 0.20028751106553178, 0.20273643581512368, 0.21414631641021786, 0.1875320593826787, 0.21344899025325204, 0.19291424106376975, 0.18052744478685367, 0.18850447532580183, 0.18668558232850863, 0.2297484701695438, 0.17392571954871416, 0.18949108387674873, 0.1878454860385117, 0.19440162380455628, 0.12356064249122378, 0.13720313694311959, 0.1747189247263805, 0.17603927513938777, 0.1516883020179859, 0.06205145272122192, 0.10893022360451432, 0.12606913945891196, 0.16877110748005109, 0.647040961734946, 0.11328163023600901, 0.15444905215299964, 0.1565548108302841, 0.21398003834178358, 0.20773432904577782, 0.5467841998481922, 0.1698424631338401, 0.41707877227892354, 0.1809800036119582, 0.19728996332959503, 0.18315319058419333, 0.1762261049140501, 0.1757418400765156, 0.18906907565173758, 0.1824599854673491, 0.19299348161915608, 0.1804860593397023, 0.07625177989648713, 0.11162443629045593, 0.07078384945333005, 0.08183718404257201, 0.0892677782471959, 0.10868337625331914, 0.10336350951915951, 0.07837405818515342, 0.0962950701070111]}, "mutation_prompt": null}
{"id": "8358d3e5-3b9c-4ff1-87d3-895c2bb47362", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating adaptive mutation rates for both PSO and SA to improve exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.4270604789013708, 0.45131935529909684, 0.4621348722430687, 0.4392968784902834, 0.43426468246974503, 0.4314090665048471, 0.4426473908351969, 0.45978985946530027, 0.4275525718289692, 0.07753824413487431, 9.999999999998899e-05, 9.999999999998899e-05, 0.05098330224734893, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603961387383939, 9.999999999998899e-05, 9.999999999998899e-05, 0.09885055150950539, 0.10098606177844505, 0.08879443239764206, 0.09724900127256775, 0.09963539580453307, 0.07038645991642423, 0.09654859367883706, 0.11633096337954807, 0.07579352069103329, 0.09491708729214265, 0.10580153185465846, 0.08200999270348952, 0.058656325097576345, 0.0971353071077905, 0.07171784854144403, 0.11575955617943223, 0.08814517845712722, 0.076259555474947, 0.9918689928582102, 0.9881652530921214, 0.985354512965046, 0.986440424991337, 0.9900089626677763, 0.990864144012004, 0.9852204715504818, 0.9889390025607907, 0.9879475093093657, 0.3059737809263745, 0.30604458345769214, 0.2993917538422244, 0.3272855743000188, 0.31243994710921863, 0.29186765369684686, 0.322117985238362, 0.2973904894616932, 0.2958947884098785, 0.3369300009059345, 0.31265975405542723, 0.22703192697978758, 0.3788111797537713, 0.2424314359835753, 0.28056409463650567, 0.2319453204420876, 0.3520893257632487, 0.23652884108998373, 0.13312493378267065, 0.20315948498130665, 0.18196104899026044, 0.18296270524372116, 0.1657254617330185, 0.17409580296443106, 0.12982152988346074, 0.14523551801835288, 0.1612418667591886, 0.1421663848824719, 0.154579154192361, 0.20509062691795188, 0.1704978362360129, 0.21469635245084917, 0.13283746121274675, 0.1472443104586748, 0.16971693102972807, 0.1688978948076587, 0.04595430893155661, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560059179202201, 0.007398465977578206, 0.027113643011960065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046492147539177076, 0.04983753441868466, 0.18115315866870674, 0.10464627933868054, 0.014418980253140368, 0.057202176737864985, 0.18349627590837658, 0.055037363963772234, 0.12868309306605008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05657404380754305, 0.07339626850668868, 0.10725263783872307, 0.11773212920219545, 0.10256145348198553, 0.0952693824755586, 0.09715799847661488, 0.10236552364605545, 0.0892182411078043, 0.44820521991291085, 0.4168510394942858, 0.42638355203775835, 0.38904921453049324, 0.40296600104496216, 0.4542918786993688, 0.40634218589151017, 0.42589453080673756, 0.4020467294395994, 0.09281067853998959, 0.07576095666982641, 0.08447892559565995, 0.08939602827480886, 0.12154766556738617, 0.1406858290540549, 0.10374166808704488, 0.08361342228553381, 0.08500733306151742, 0.3137917058979801, 0.15765212746361412, 0.23818226442314483, 0.13363400197298558, 0.2693415611611292, 0.28025199291458414, 0.27799233241610677, 0.23461876319608177, 0.2673771714718951, 0.2888617363558553, 0.27830333558779785, 0.15613570384931186, 0.2498772435216695, 0.2867705965105203, 0.26016527298799796, 0.20388482730515145, 0.1929557883788663, 0.0970717004689231, 0.20428358406751246, 0.1756451355604136, 0.08360643116476918, 0.21333889129142447, 0.23523026762284194, 0.08846341531610957, 0.17401792488300594, 0.15525428523912266, 0.15531277320798986, 0.21417242810079218, 0.23917604196703934, 0.2020090074391051, 0.1932505242943957, 0.20028751106553178, 0.20273643581512368, 0.21414631641021786, 0.1875320593826787, 0.21344899025325204, 0.19291424106376975, 0.18052744478685367, 0.18850447532580183, 0.18668558232850863, 0.2297484701695438, 0.17392571954871416, 0.18949108387674873, 0.1878454860385117, 0.19440162380455628, 0.12356064249122378, 0.13720313694311959, 0.1747189247263805, 0.17603927513938777, 0.1516883020179859, 0.06205145272122192, 0.10893022360451432, 0.12606913945891196, 0.16877110748005109, 0.647040961734946, 0.11328163023600901, 0.15444905215299964, 0.1565548108302841, 0.21398003834178358, 0.20773432904577782, 0.5467841998481922, 0.1698424631338401, 0.41707877227892354, 0.1809800036119582, 0.19728996332959503, 0.18315319058419333, 0.1762261049140501, 0.1757418400765156, 0.18906907565173758, 0.1824599854673491, 0.19299348161915608, 0.1804860593397023, 0.07625177989648713, 0.11162443629045593, 0.07078384945333005, 0.08183718404257201, 0.0892677782471959, 0.10868337625331914, 0.10336350951915951, 0.07837405818515342, 0.0962950701070111]}, "mutation_prompt": null}
{"id": "79305c75-1a6b-431e-a6ee-fb1907d5e6a4", "solution": "class DynamicMutationHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, mutation_rate):\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution, mutation_rate):\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        mutation_rate = np.random.uniform(0.1, 1.0)\n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, mutation_rate) if np.random.rand() < 0.5 else sa_search(best_solution, mutation_rate)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                mutation_rate = mutation_rate * 1.1  # Increase mutation rate when fitness improves\n        \n        return best_solution", "name": "DynamicMutationHybridPSOSA", "description": "Improving exploration by incorporating a dynamic mutation rate based on fitness improvement.", "configspace": "", "generation": 10, "fitness": 0.1578526527222363, "feedback": "The algorithm DynamicMutationHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.23625833857135414, 0.25652945317763265, 0.2914331554347541, 0.19067083945546315, 0.21462232112774693, 0.24849450956410624, 0.2557658494845313, 0.2672062777136772, 0.21667577357517298, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09141944928203938, 0.0782776310180816, 0.06572020599368023, 0.08933879133731426, 0.08613160675247777, 0.07294686728470079, 0.06585125887948928, 0.11358058383683378, 0.08316746247410156, 0.09850457591896866, 0.07828102649024837, 0.059085522840823246, 0.04702238092286948, 0.0705863635537306, 0.08705521299275676, 0.03254323810922799, 0.07471709723063036, 0.05728553226467281, 0.9971706724212277, 0.9933441184415474, 0.9931214984712107, 0.9950419436743595, 0.9933557972246767, 0.9957048767955335, 0.9961873256939915, 0.9933022114380258, 0.9954278290338562, 0.17978722018035476, 0.14017645358470532, 0.15475186393660556, 0.07812547299488137, 0.19037085131999698, 0.12592175628820623, 0.08846867391679192, 0.08224330539088531, 0.1303376801920032, 0.20615329704526686, 0.17921451409953149, 0.16764648025279516, 0.1923001662631526, 0.18168627396344206, 0.16983841076655803, 0.21297746191046685, 0.17074287416892164, 0.16616074109980405, 0.03417223634180122, 0.10354856200451945, 0.07860403572525754, 0.070428287345492, 0.0655354901211389, 0.07544934323894081, 0.1042777653164334, 0.020547728335760573, 0.07746301590712079, 0.07700264405317025, 0.07940775211554829, 0.05081705572949291, 0.0880400164796703, 0.07150882086679833, 0.035530037861182806, 0.07969106071069454, 0.10142771002842255, 0.06257009936784141, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06579254849183469, 0.08314168854987858, 0.08071073725143318, 0.06552101540987354, 0.057834327234578264, 0.050562302984132446, 0.16852848541066945, 0.03356370319832591, 0.07124643413073894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017207529848313197, 0.010495326712633313, 0.012150950634912783, 0.002073126431686223, 0.000770739321927616, 9.999999999998899e-05, 0.005066269391581946, 9.999999999998899e-05, 0.02153019551705526, 0.2849142367360862, 0.25057461823965754, 0.27872986864739135, 0.1953941535279834, 0.2108473481394344, 0.22017905725452103, 0.26921887851751114, 0.25196479656750825, 0.2753708164493953, 0.0767491514560441, 0.04389500629163723, 0.06928990033496663, 0.06531580698018569, 0.07677320178292835, 0.07474887781175965, 0.06714552356644876, 0.10016184115788196, 0.07556214981431097, 0.1685473598833478, 0.1799511658103674, 0.2082613101386782, 0.19618921469178185, 0.18112941254608805, 0.1733435974937838, 0.13276146765157337, 0.16132993794330774, 0.18160696794504305, 0.19571568820499963, 0.19192122041080595, 0.18409034100228094, 0.20801795235307186, 0.1991827583737329, 0.20177188735477802, 0.19425662428380752, 0.15566961576818616, 0.1863931295204463, 0.1596253927621215, 0.0804416738103868, 0.16117425702266008, 0.1443724381715321, 0.14878400196110797, 0.15688766644446428, 0.15111922975372694, 0.12807832383128115, 0.16188273141612664, 0.19455819057945423, 0.21128139653530587, 0.21316590340316, 0.196710469825495, 0.17611614106580875, 0.21876649391008385, 0.22294129604956947, 0.20169514924904763, 0.20247391811672455, 0.17975224115344668, 0.1720511816767024, 0.169179513626325, 0.16996892633728622, 0.1823763415315408, 0.1734039954097396, 0.17454468826726677, 0.15556485624206184, 0.16123479501317284, 0.16690147796980603, 0.1305068607210571, 0.33907008190377697, 0.17054308082175063, 0.16693720989106475, 0.14616650200075143, 0.11779534509816858, 0.12472192822447903, 0.27128415723862875, 0.35646490611363146, 0.1128071463911472, 0.1421533212112951, 0.25303278807679097, 0.18733047606852937, 0.18140963814218203, 0.2665644100230007, 0.16783776374202897, 0.22084641218578394, 0.18178880257698005, 0.18452517696864523, 0.18448575072841145, 0.19135259940217253, 0.1969855755486365, 0.1848912263136353, 0.1995258114080094, 0.18707861129146064, 0.18589920620848166, 0.07675826421093368, 0.06242745553960116, 0.07096124241617219, 0.076427873656018, 0.07824304197605436, 0.09255784555353164, 0.0806118801502731, 0.07560147554296126, 0.08470340694511358]}, "mutation_prompt": null}
{"id": "50834a39-fc76-456b-84e6-5989001a15f2", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating adaptive mutation rates for both PSO and SA to improve exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.4270604789013708, 0.45131935529909684, 0.4621348722430687, 0.4392968784902834, 0.43426468246974503, 0.4314090665048471, 0.4426473908351969, 0.45978985946530027, 0.4275525718289692, 0.07753824413487431, 9.999999999998899e-05, 9.999999999998899e-05, 0.05098330224734893, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603961387383939, 9.999999999998899e-05, 9.999999999998899e-05, 0.09885055150950539, 0.10098606177844505, 0.08879443239764206, 0.09724900127256775, 0.09963539580453307, 0.07038645991642423, 0.09654859367883706, 0.11633096337954807, 0.07579352069103329, 0.09491708729214265, 0.10580153185465846, 0.08200999270348952, 0.058656325097576345, 0.0971353071077905, 0.07171784854144403, 0.11575955617943223, 0.08814517845712722, 0.076259555474947, 0.9918689928582102, 0.9881652530921214, 0.985354512965046, 0.986440424991337, 0.9900089626677763, 0.990864144012004, 0.9852204715504818, 0.9889390025607907, 0.9879475093093657, 0.3059737809263745, 0.30604458345769214, 0.2993917538422244, 0.3272855743000188, 0.31243994710921863, 0.29186765369684686, 0.322117985238362, 0.2973904894616932, 0.2958947884098785, 0.3369300009059345, 0.31265975405542723, 0.22703192697978758, 0.3788111797537713, 0.2424314359835753, 0.28056409463650567, 0.2319453204420876, 0.3520893257632487, 0.23652884108998373, 0.13312493378267065, 0.20315948498130665, 0.18196104899026044, 0.18296270524372116, 0.1657254617330185, 0.17409580296443106, 0.12982152988346074, 0.14523551801835288, 0.1612418667591886, 0.1421663848824719, 0.154579154192361, 0.20509062691795188, 0.1704978362360129, 0.21469635245084917, 0.13283746121274675, 0.1472443104586748, 0.16971693102972807, 0.1688978948076587, 0.04595430893155661, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560059179202201, 0.007398465977578206, 0.027113643011960065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046492147539177076, 0.04983753441868466, 0.18115315866870674, 0.10464627933868054, 0.014418980253140368, 0.057202176737864985, 0.18349627590837658, 0.055037363963772234, 0.12868309306605008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05657404380754305, 0.07339626850668868, 0.10725263783872307, 0.11773212920219545, 0.10256145348198553, 0.0952693824755586, 0.09715799847661488, 0.10236552364605545, 0.0892182411078043, 0.44820521991291085, 0.4168510394942858, 0.42638355203775835, 0.38904921453049324, 0.40296600104496216, 0.4542918786993688, 0.40634218589151017, 0.42589453080673756, 0.4020467294395994, 0.09281067853998959, 0.07576095666982641, 0.08447892559565995, 0.08939602827480886, 0.12154766556738617, 0.1406858290540549, 0.10374166808704488, 0.08361342228553381, 0.08500733306151742, 0.3137917058979801, 0.15765212746361412, 0.23818226442314483, 0.13363400197298558, 0.2693415611611292, 0.28025199291458414, 0.27799233241610677, 0.23461876319608177, 0.2673771714718951, 0.2888617363558553, 0.27830333558779785, 0.15613570384931186, 0.2498772435216695, 0.2867705965105203, 0.26016527298799796, 0.20388482730515145, 0.1929557883788663, 0.0970717004689231, 0.20428358406751246, 0.1756451355604136, 0.08360643116476918, 0.21333889129142447, 0.23523026762284194, 0.08846341531610957, 0.17401792488300594, 0.15525428523912266, 0.15531277320798986, 0.21417242810079218, 0.23917604196703934, 0.2020090074391051, 0.1932505242943957, 0.20028751106553178, 0.20273643581512368, 0.21414631641021786, 0.1875320593826787, 0.21344899025325204, 0.19291424106376975, 0.18052744478685367, 0.18850447532580183, 0.18668558232850863, 0.2297484701695438, 0.17392571954871416, 0.18949108387674873, 0.1878454860385117, 0.19440162380455628, 0.12356064249122378, 0.13720313694311959, 0.1747189247263805, 0.17603927513938777, 0.1516883020179859, 0.06205145272122192, 0.10893022360451432, 0.12606913945891196, 0.16877110748005109, 0.647040961734946, 0.11328163023600901, 0.15444905215299964, 0.1565548108302841, 0.21398003834178358, 0.20773432904577782, 0.5467841998481922, 0.1698424631338401, 0.41707877227892354, 0.1809800036119582, 0.19728996332959503, 0.18315319058419333, 0.1762261049140501, 0.1757418400765156, 0.18906907565173758, 0.1824599854673491, 0.19299348161915608, 0.1804860593397023, 0.07625177989648713, 0.11162443629045593, 0.07078384945333005, 0.08183718404257201, 0.0892677782471959, 0.10868337625331914, 0.10336350951915951, 0.07837405818515342, 0.0962950701070111]}, "mutation_prompt": null}
{"id": "9cbaf268-3cbb-44ed-8cbb-863e3cb447cf", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating adaptive mutation rates for both PSO and SA to improve exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.4270604789013708, 0.45131935529909684, 0.4621348722430687, 0.4392968784902834, 0.43426468246974503, 0.4314090665048471, 0.4426473908351969, 0.45978985946530027, 0.4275525718289692, 0.07753824413487431, 9.999999999998899e-05, 9.999999999998899e-05, 0.05098330224734893, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603961387383939, 9.999999999998899e-05, 9.999999999998899e-05, 0.09885055150950539, 0.10098606177844505, 0.08879443239764206, 0.09724900127256775, 0.09963539580453307, 0.07038645991642423, 0.09654859367883706, 0.11633096337954807, 0.07579352069103329, 0.09491708729214265, 0.10580153185465846, 0.08200999270348952, 0.058656325097576345, 0.0971353071077905, 0.07171784854144403, 0.11575955617943223, 0.08814517845712722, 0.076259555474947, 0.9918689928582102, 0.9881652530921214, 0.985354512965046, 0.986440424991337, 0.9900089626677763, 0.990864144012004, 0.9852204715504818, 0.9889390025607907, 0.9879475093093657, 0.3059737809263745, 0.30604458345769214, 0.2993917538422244, 0.3272855743000188, 0.31243994710921863, 0.29186765369684686, 0.322117985238362, 0.2973904894616932, 0.2958947884098785, 0.3369300009059345, 0.31265975405542723, 0.22703192697978758, 0.3788111797537713, 0.2424314359835753, 0.28056409463650567, 0.2319453204420876, 0.3520893257632487, 0.23652884108998373, 0.13312493378267065, 0.20315948498130665, 0.18196104899026044, 0.18296270524372116, 0.1657254617330185, 0.17409580296443106, 0.12982152988346074, 0.14523551801835288, 0.1612418667591886, 0.1421663848824719, 0.154579154192361, 0.20509062691795188, 0.1704978362360129, 0.21469635245084917, 0.13283746121274675, 0.1472443104586748, 0.16971693102972807, 0.1688978948076587, 0.04595430893155661, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560059179202201, 0.007398465977578206, 0.027113643011960065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046492147539177076, 0.04983753441868466, 0.18115315866870674, 0.10464627933868054, 0.014418980253140368, 0.057202176737864985, 0.18349627590837658, 0.055037363963772234, 0.12868309306605008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05657404380754305, 0.07339626850668868, 0.10725263783872307, 0.11773212920219545, 0.10256145348198553, 0.0952693824755586, 0.09715799847661488, 0.10236552364605545, 0.0892182411078043, 0.44820521991291085, 0.4168510394942858, 0.42638355203775835, 0.38904921453049324, 0.40296600104496216, 0.4542918786993688, 0.40634218589151017, 0.42589453080673756, 0.4020467294395994, 0.09281067853998959, 0.07576095666982641, 0.08447892559565995, 0.08939602827480886, 0.12154766556738617, 0.1406858290540549, 0.10374166808704488, 0.08361342228553381, 0.08500733306151742, 0.3137917058979801, 0.15765212746361412, 0.23818226442314483, 0.13363400197298558, 0.2693415611611292, 0.28025199291458414, 0.27799233241610677, 0.23461876319608177, 0.2673771714718951, 0.2888617363558553, 0.27830333558779785, 0.15613570384931186, 0.2498772435216695, 0.2867705965105203, 0.26016527298799796, 0.20388482730515145, 0.1929557883788663, 0.0970717004689231, 0.20428358406751246, 0.1756451355604136, 0.08360643116476918, 0.21333889129142447, 0.23523026762284194, 0.08846341531610957, 0.17401792488300594, 0.15525428523912266, 0.15531277320798986, 0.21417242810079218, 0.23917604196703934, 0.2020090074391051, 0.1932505242943957, 0.20028751106553178, 0.20273643581512368, 0.21414631641021786, 0.1875320593826787, 0.21344899025325204, 0.19291424106376975, 0.18052744478685367, 0.18850447532580183, 0.18668558232850863, 0.2297484701695438, 0.17392571954871416, 0.18949108387674873, 0.1878454860385117, 0.19440162380455628, 0.12356064249122378, 0.13720313694311959, 0.1747189247263805, 0.17603927513938777, 0.1516883020179859, 0.06205145272122192, 0.10893022360451432, 0.12606913945891196, 0.16877110748005109, 0.647040961734946, 0.11328163023600901, 0.15444905215299964, 0.1565548108302841, 0.21398003834178358, 0.20773432904577782, 0.5467841998481922, 0.1698424631338401, 0.41707877227892354, 0.1809800036119582, 0.19728996332959503, 0.18315319058419333, 0.1762261049140501, 0.1757418400765156, 0.18906907565173758, 0.1824599854673491, 0.19299348161915608, 0.1804860593397023, 0.07625177989648713, 0.11162443629045593, 0.07078384945333005, 0.08183718404257201, 0.0892677782471959, 0.10868337625331914, 0.10336350951915951, 0.07837405818515342, 0.0962950701070111]}, "mutation_prompt": null}
{"id": "654d2540-c7a9-4768-8c27-24ea009a29d0", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating adaptive mutation rates for both PSO and SA to improve exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.4270604789013708, 0.45131935529909684, 0.4621348722430687, 0.4392968784902834, 0.43426468246974503, 0.4314090665048471, 0.4426473908351969, 0.45978985946530027, 0.4275525718289692, 0.07753824413487431, 9.999999999998899e-05, 9.999999999998899e-05, 0.05098330224734893, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603961387383939, 9.999999999998899e-05, 9.999999999998899e-05, 0.09885055150950539, 0.10098606177844505, 0.08879443239764206, 0.09724900127256775, 0.09963539580453307, 0.07038645991642423, 0.09654859367883706, 0.11633096337954807, 0.07579352069103329, 0.09491708729214265, 0.10580153185465846, 0.08200999270348952, 0.058656325097576345, 0.0971353071077905, 0.07171784854144403, 0.11575955617943223, 0.08814517845712722, 0.076259555474947, 0.9918689928582102, 0.9881652530921214, 0.985354512965046, 0.986440424991337, 0.9900089626677763, 0.990864144012004, 0.9852204715504818, 0.9889390025607907, 0.9879475093093657, 0.3059737809263745, 0.30604458345769214, 0.2993917538422244, 0.3272855743000188, 0.31243994710921863, 0.29186765369684686, 0.322117985238362, 0.2973904894616932, 0.2958947884098785, 0.3369300009059345, 0.31265975405542723, 0.22703192697978758, 0.3788111797537713, 0.2424314359835753, 0.28056409463650567, 0.2319453204420876, 0.3520893257632487, 0.23652884108998373, 0.13312493378267065, 0.20315948498130665, 0.18196104899026044, 0.18296270524372116, 0.1657254617330185, 0.17409580296443106, 0.12982152988346074, 0.14523551801835288, 0.1612418667591886, 0.1421663848824719, 0.154579154192361, 0.20509062691795188, 0.1704978362360129, 0.21469635245084917, 0.13283746121274675, 0.1472443104586748, 0.16971693102972807, 0.1688978948076587, 0.04595430893155661, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560059179202201, 0.007398465977578206, 0.027113643011960065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046492147539177076, 0.04983753441868466, 0.18115315866870674, 0.10464627933868054, 0.014418980253140368, 0.057202176737864985, 0.18349627590837658, 0.055037363963772234, 0.12868309306605008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05657404380754305, 0.07339626850668868, 0.10725263783872307, 0.11773212920219545, 0.10256145348198553, 0.0952693824755586, 0.09715799847661488, 0.10236552364605545, 0.0892182411078043, 0.44820521991291085, 0.4168510394942858, 0.42638355203775835, 0.38904921453049324, 0.40296600104496216, 0.4542918786993688, 0.40634218589151017, 0.42589453080673756, 0.4020467294395994, 0.09281067853998959, 0.07576095666982641, 0.08447892559565995, 0.08939602827480886, 0.12154766556738617, 0.1406858290540549, 0.10374166808704488, 0.08361342228553381, 0.08500733306151742, 0.3137917058979801, 0.15765212746361412, 0.23818226442314483, 0.13363400197298558, 0.2693415611611292, 0.28025199291458414, 0.27799233241610677, 0.23461876319608177, 0.2673771714718951, 0.2888617363558553, 0.27830333558779785, 0.15613570384931186, 0.2498772435216695, 0.2867705965105203, 0.26016527298799796, 0.20388482730515145, 0.1929557883788663, 0.0970717004689231, 0.20428358406751246, 0.1756451355604136, 0.08360643116476918, 0.21333889129142447, 0.23523026762284194, 0.08846341531610957, 0.17401792488300594, 0.15525428523912266, 0.15531277320798986, 0.21417242810079218, 0.23917604196703934, 0.2020090074391051, 0.1932505242943957, 0.20028751106553178, 0.20273643581512368, 0.21414631641021786, 0.1875320593826787, 0.21344899025325204, 0.19291424106376975, 0.18052744478685367, 0.18850447532580183, 0.18668558232850863, 0.2297484701695438, 0.17392571954871416, 0.18949108387674873, 0.1878454860385117, 0.19440162380455628, 0.12356064249122378, 0.13720313694311959, 0.1747189247263805, 0.17603927513938777, 0.1516883020179859, 0.06205145272122192, 0.10893022360451432, 0.12606913945891196, 0.16877110748005109, 0.647040961734946, 0.11328163023600901, 0.15444905215299964, 0.1565548108302841, 0.21398003834178358, 0.20773432904577782, 0.5467841998481922, 0.1698424631338401, 0.41707877227892354, 0.1809800036119582, 0.19728996332959503, 0.18315319058419333, 0.1762261049140501, 0.1757418400765156, 0.18906907565173758, 0.1824599854673491, 0.19299348161915608, 0.1804860593397023, 0.07625177989648713, 0.11162443629045593, 0.07078384945333005, 0.08183718404257201, 0.0892677782471959, 0.10868337625331914, 0.10336350951915951, 0.07837405818515342, 0.0962950701070111]}, "mutation_prompt": null}
{"id": "f5bde355-6a08-4231-a637-68a0b4cfbe26", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) if np.random.rand() < 0.9 else np.random.uniform(0.5, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim)\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) if np.random.rand() < 0.9 else np.random.uniform(0.5, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Improving exploration by adjusting mutation rates based on fitness improvement", "configspace": "", "generation": 14, "fitness": 0.20459859374088715, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.43795739236076614, 0.4370581707471173, 0.4555473450602465, 0.45866172710244835, 0.47101401256619724, 0.46000220091629673, 0.4672475489617529, 0.4150770942096428, 0.42240878390506054, 0.06221534999287848, 0.021450934884274075, 9.999999999998899e-05, 0.05051195647495765, 0.0471525212500854, 9.999999999998899e-05, 0.10369759065277395, 9.999999999998899e-05, 9.999999999998899e-05, 0.07268004009435425, 0.12132226558771797, 0.09283695744601972, 0.11955112852860839, 0.09955400434039097, 0.09734438866488038, 0.04870075463307022, 0.10857799519750666, 0.08583383794663935, 0.10405146157765377, 0.08456629110278824, 0.06478204228022821, 0.08386667011050541, 0.11956203386441555, 0.1001491240549165, 0.07985295409436455, 0.08308380286085881, 0.04101475918512476, 0.9908561456669543, 0.991589751525717, 0.9841302572138065, 0.9922749481374524, 0.9879879285532294, 0.9890045589754232, 0.9915026346718541, 0.9882869451591428, 0.9954880229991333, 0.304197217004738, 0.30371756468399125, 0.3075696481749204, 0.32138620687299013, 0.29446037828769345, 0.30655935359668496, 0.30732698913065637, 0.3361572137723112, 0.3256244344482946, 0.3674382961061998, 0.5290672034543098, 0.21023182989981515, 0.2746766620776445, 0.21603654853940701, 0.21186393903939182, 0.23739617270632918, 0.35386850590330154, 0.2521054499403117, 0.175107786521577, 0.1342426436360995, 0.15347397078609626, 0.19422028860398166, 0.14748988841792232, 0.15646981120560888, 0.17591506525291212, 0.16867626349569165, 0.17623028421819653, 0.18047452159403288, 0.15390232492374434, 0.1579207495000079, 0.16171173057039523, 0.12110537504651997, 0.14237054057999854, 0.2564887094464914, 0.1971048872409955, 0.1591039127210061, 0.027910181014829893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013137623945542187, 9.999999999998899e-05, 0.02941193997232261, 0.190857480955685, 0.03723429244168708, 0.12495355489611593, 0.10023659813440022, 0.0557488758159278, 0.061695807097797095, 0.14246997004595963, 0.045292410867648125, 0.029515397451566838, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03503035542920829, 0.08137766326843066, 0.09641898204542376, 0.10452684524042011, 0.06053037856293686, 0.04324075981808417, 0.04370807414082123, 0.11675387601804865, 0.06350634234750596, 0.4209509653564498, 0.39456904254943115, 0.4219508482202774, 0.457555743944587, 0.39593886432781633, 0.41013914726115797, 0.4241915556422926, 0.41581393010975676, 0.41437060539935133, 0.09401333165818049, 0.08257501037882853, 0.09864866021476959, 0.1030991643374557, 0.09104746300103472, 0.07989126733854124, 0.10227798339524619, 0.07972602002822782, 0.13008671283865914, 0.14988508601753148, 0.18281923719562587, 0.2604960266822983, 0.2391656106358978, 0.1269331023536261, 0.23960012491864247, 0.23707330945082727, 0.2773719601773229, 0.2619715372163628, 0.2841325688406475, 0.1703605139452551, 0.14260589094797438, 0.2374527002619471, 0.21004289804373122, 0.15177509967262615, 0.22405267083454405, 0.2496769032333508, 0.10555570511519341, 0.20461865819757552, 0.21269596881457487, 0.07394577208740827, 0.19334040265832975, 0.2440571302073169, 0.11966319038286288, 0.19220929613030335, 0.20749574549883365, 0.2031158504035967, 0.19379516542429298, 0.21291401965420176, 0.18643667809173348, 0.224861919721152, 0.1951719734976124, 0.2449180495516965, 0.21788920343482643, 0.21163056558061233, 0.18608432359166072, 0.2103663478095611, 0.19682784712061907, 0.20140697028778476, 0.1920476157462968, 0.20218061719788338, 0.21839106946324705, 0.20791101130830514, 0.22325837353166722, 0.20422795139490113, 0.16933613611646492, 0.13743349747051392, 0.16916601829019018, 0.17399379317207586, 0.15101288551853942, 0.10555753602295759, 0.10881520735543204, 0.11531388272369092, 0.15459588587865836, 0.531424274486501, 0.11340646303068647, 0.024508856003003676, 0.17036421142909786, 0.21374120316960665, 0.21337900821169498, 0.11349360643914075, 0.16861498713206258, 0.43252578510580386, 0.1921980972438727, 0.18776958196973326, 0.17342443842982136, 0.18104785448463667, 0.17439198429866742, 0.17269233375176196, 0.17668246864256398, 0.18717003874877214, 0.1751178420762548, 0.07844212856690624, 0.11404105525641772, 0.058067985034577, 0.06572848179144897, 0.07044011238621428, 0.08821454954052566, 0.1128949936286977, 0.07612501392946247, 0.0872809618929552]}, "mutation_prompt": null}
{"id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 15, "fitness": 0.22068165409565774, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "cac9402a-1a08-4abb-94ca-ed702c1dfde4", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "c5695cb5-7813-48ca-9d3e-c99c63f3096b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def local_search(solution, func):\n        perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n        new_solution = solution + perturbation\n        new_fitness = func(new_solution)\n        return new_solution if new_fitness < func(solution) else solution\n        \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_solution = local_search(new_solution, func)  # Integrate local search\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing EnhancedHybridPSOSA by introducing a local search mechanism to exploit promising regions and improve convergence speed.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'local_search' is not defined\").", "error": "NameError(\"name 'local_search' is not defined\")", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {}, "mutation_prompt": null}
{"id": "c4c363e7-5722-4828-accc-42f91938bc51", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "651a4c53-386f-434b-87de-5862b0ac418f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "c7c26ec1-283b-44f8-993a-393359edf2d2", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "95fed4cc-93de-450b-afd2-af581b31bb52", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "5fc43348-23d4-47b0-b578-59396c087fa3", "solution": "import numpy as np\n\nclass NovelDiversityEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def novel_mutation(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * (np.random.uniform(-1.0, 1.0, self.dim) + np.random.normal(0, 1.0, self.dim)) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = novel_mutation(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "NovelDiversityEnhancedHybridPSOSA", "description": "Enhancing the search diversity by introducing a novel mutation strategy that incorporates a blend of PSO and Differential Evolution operators.", "configspace": "", "generation": 21, "fitness": 0.2101197491302081, "feedback": "The algorithm NovelDiversityEnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.46002551644363365, 0.4567839507227336, 0.496685034695993, 0.47792310799157456, 0.4821196002690954, 0.48361810621149137, 0.48282296555295323, 0.4642021322032105, 0.45175036722438844, 0.08587927317637278, 9.999999999998899e-05, 9.999999999998899e-05, 0.06581573033826194, 0.037769521988268884, 9.999999999998899e-05, 9.999999999998899e-05, 0.031330693696805745, 9.999999999998899e-05, 0.11374720378942604, 0.08759375037451222, 0.08523429620612366, 0.1193284165402172, 0.10638529662171514, 0.08720636030826168, 0.099987516326008, 0.11396061267213098, 0.10377621039750229, 0.12732075649266295, 0.05934774913698637, 0.05947382447591443, 0.09867443677378451, 0.060210797395762294, 0.043173420377320526, 0.10060775490518425, 0.13944850620618077, 0.07562520883941393, 0.9855899123330203, 0.9896369555926945, 0.9865628892202669, 0.9885881400455733, 0.9858372012438095, 0.9838716866160176, 0.9915695465912784, 0.9852333893656553, 0.9901243274148469, 0.3170091661342618, 0.33398321184798285, 0.33000584852661174, 0.3128566975004259, 0.33546240653924464, 0.3258779657238421, 0.3431505436045923, 0.3230827124571607, 0.3330619733604191, 0.3740176524294594, 0.23769657132486222, 0.21451807561064407, 0.3727425774990023, 0.2820510670050993, 0.26300796675147464, 0.2381172177474824, 0.3188060883285623, 0.22770551905371217, 0.18094142822172876, 0.1770829228266093, 0.13262034641368714, 0.1775819854952717, 0.19613555463856092, 0.2201064353179394, 0.17379075753495543, 0.18469670383854042, 0.13189777627389754, 0.2112613571321278, 0.16908944886794486, 0.1271896295046443, 0.13551728251566253, 0.19989397343033277, 0.1536235748862178, 0.16765791826723597, 0.1549730760413246, 0.19879843892922178, 0.012818123699013806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04748675875143049, 0.050535625046292054, 9.999999999998899e-05, 9.999999999998899e-05, 0.08061562842853587, 0.13449477632095985, 0.06049751751327459, 0.1633731060956416, 0.09925118433309421, 0.013268865678392139, 0.06027667694579886, 0.16002149237679664, 0.04097664485803676, 0.07307182045856242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10644352486438113, 0.10800412963440886, 0.12382136217204154, 0.05619514736958686, 0.13512426597102545, 0.061510715167863994, 0.06436993762217402, 0.11851790925765127, 0.06969009401967874, 0.4158278446142303, 0.4304173199958856, 0.4043698162131967, 0.4357598015869638, 0.47123161699782434, 0.41348425557418, 0.4030505150761896, 0.45850338003156565, 0.41872682698939434, 0.12712723229528888, 0.09560910926170996, 0.12780323125151294, 0.08497711439501532, 0.08198350993249026, 0.13502310791476868, 0.06783411381604676, 0.11203114380229084, 0.11931151004461549, 0.1811515558254122, 0.1892212182550559, 0.17825768385021945, 0.23385084758585606, 0.1756486138213431, 0.21645989103155938, 0.2696857361397824, 0.14816744661321268, 0.28487546072366, 0.29626894040495777, 0.14178568407682268, 0.11841900703621777, 0.31141175663228704, 0.18266987228168552, 0.15199438814739819, 0.21144858202969097, 0.18127398310758525, 0.1537458912945785, 0.1777616168323457, 0.11499348133667497, 0.18040412692930718, 0.1871666745309355, 0.1908350621282855, 0.1204828691737253, 0.1804109301005774, 0.1246333488901501, 0.09315815862672061, 0.2348831690899097, 0.2383200956386069, 0.176239506396487, 0.25225311980897636, 0.214672298430017, 0.18387760277999632, 0.21883933180017634, 0.1729297562046822, 0.17075575480097338, 0.20120750290689238, 0.18291694466071662, 0.2001714575214375, 0.20405363509057917, 0.19507879483750334, 0.168958451989479, 0.17366125461769477, 0.17963599584389944, 0.21902986300677518, 0.12362996022162565, 0.13706807181061376, 0.1443476873901478, 0.5119630646405555, 0.06608240126303666, 0.06205865042545078, 0.10885816011698857, 0.12707838986896003, 0.1690638270508027, 0.6213306948116437, 0.1133544285565049, 0.08340732748867863, 0.1564711753697282, 0.2145796727239001, 0.2128805102212199, 0.4367153910680829, 0.16361350832213817, 0.5449900909498078, 0.18582764904151883, 0.21135134234828645, 0.19797231970663975, 0.19563789347349203, 0.18267624774461533, 0.20440724432441504, 0.17783512463974838, 0.21443053737276963, 0.18107779935861357, 0.08560027774137458, 0.0869582553571665, 0.0910539507639001, 0.06750048459534297, 0.08989592478930786, 0.10203515007117436, 0.1005257641485916, 0.07696960590139457, 0.0867590708802487]}, "mutation_prompt": null}
{"id": "5e7cc560-49fc-4eab-81c2-b9d0fc70172a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "cd0757a9-bc9b-4d1d-9269-07dc446ed7cc", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "1e07181a-1b2a-4af9-9477-62a8af69769e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "bd53b645-b8ef-47a3-82f7-2e61d950a15f", "solution": "class AdaptiveEnhancedHybridPSOSA(EnhancedHybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.population_size = 10\n\n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight, population_size):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n\n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n\n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight, self.population_size) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n\n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n\n        return best_solution", "name": "AdaptiveEnhancedHybridPSOSA", "description": "Improving search diversity by introducing adaptive population size in the PSO component.", "configspace": "", "generation": 25, "fitness": 0.22068165409565774, "feedback": "The algorithm AdaptiveEnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "975981f8-64ba-441e-80b8-b63e84d553ca", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "8e326e5c-3215-4eb7-8f81-911b05d0d2e7", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "c3a0077d-6ab5-40cc-93f3-bb358ee7ddf5", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "762a3c7b-2877-488d-a153-be7fc4af0f6e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "becc5f10-85c9-45c3-b76f-4f9b40b76974", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by combining Particle Swarm Optimization (PSO) with Simulated Annealing (SA) to leverage the strengths of both algorithms for improved optimization.", "configspace": "", "generation": 30, "fitness": 0.22068165409565774, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "570deed3-8ffe-4727-bd5d-308130bf5706", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "773c50e0-a693-44d1-87b0-2ba9988d3b29", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "68885e4c-a7cd-4d42-9fda-76b5375b470a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "331620d9-5089-4750-91d2-4da6d0eccc3a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "fc003f8f-2e96-424f-a64e-cd03141391bd", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "643b6974-e100-4e29-b0a4-e4ca3ac7465c", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def chaos_mapping(self, x):\n        return np.sin(x) * np.cos(x)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_solution += self.chaos_mapping(new_solution)  # Integrate chaotic mapping for exploration\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Introducing a chaotic mapping for enhanced exploration-exploitation balance in the optimization process.", "configspace": "", "generation": 36, "fitness": 0.14802643652827682, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.2638459092556833, 0.2411192644046859, 0.2598381031490269, 0.2413781204788068, 0.23068579829997748, 0.2470577648502701, 0.2218336802228309, 0.24656495731964467, 0.2194555222325114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07500753217065426, 0.0715291799135952, 0.08298559973120756, 0.0689918828254622, 0.057891940347205906, 0.06998576242870436, 0.041622189979560575, 0.050741809148323824, 0.04846414171681879, 0.08344335870413744, 0.09094282504178242, 0.07807902355546958, 0.0671640178987567, 0.05708589543683151, 0.049344727503810804, 0.0262899282449911, 0.05372471136417534, 0.04352351579738478, 0.9819007841508168, 0.9718773737962618, 0.9488890104594537, 0.9682775582625984, 0.9724147792110266, 0.963283287856106, 0.9700330283101679, 0.9698226860666039, 0.9669669923141008, 0.16721837890714109, 0.13072523235077338, 0.1389934771466862, 0.16968636681973803, 0.15309176723118612, 0.17127784475745944, 0.11407007146792147, 0.1147479169498552, 0.1262574391792437, 0.16737755990036207, 0.16127386060433602, 0.10758569245221827, 0.2830284679433317, 0.23512067207083143, 0.1372575938374142, 0.21228061310045465, 0.14120816356182953, 0.205564296141862, 0.0022337653860884377, 0.06551722163269713, 0.06042740496570076, 0.10888084528200803, 0.08661983423835495, 0.13753150329847608, 0.11435019874110297, 0.1018640719358005, 0.12015367635290863, 0.07652044944009706, 0.06540352067360056, 0.058641044199102876, 0.002838121951441286, 9.999999999998899e-05, 0.04108769340418161, 0.009237311310064777, 9.999999999998899e-05, 0.07312532766572588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0070718769914843715, 0.0008747237134186792, 0.07562394429385189, 0.07859454557512213, 0.05415888926234069, 0.0034896140320573865, 0.010438792527135976, 0.13562731617416934, 0.042357571710136876, 0.03548427503198559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022117651858253207, 0.011353912873851235, 0.003114062639383852, 0.005116532737767687, 0.0007392513717563443, 0.012283280900312055, 0.013214013759290877, 0.025884718483152547, 0.020376858568247225, 0.2744060157055471, 0.30809225914723015, 0.2975616650424847, 0.24401554645611778, 0.23366161136443153, 0.23402911082310218, 0.2644693168223956, 0.2718848604236018, 0.2931779457650381, 0.062411525704840876, 0.03513084140869527, 0.06564140399974983, 0.06404108164276678, 0.0828722375476183, 0.06545191089215163, 0.04399315091623501, 0.0639534975490309, 0.054158849107014406, 0.1563646452689632, 0.111821607958974, 0.11847276202754731, 0.13828078174902836, 0.11683775033704802, 0.1797165531143884, 0.12645237718589142, 0.1700980706219961, 0.17341823200249762, 0.20061203489040802, 0.12592149101983618, 0.13785935043839637, 0.18617347363109316, 0.1717074493735099, 0.20123316230319221, 0.1831161690394143, 0.18412650360700655, 0.14654840662712798, 0.18698781213969007, 0.03464669708739543, 0.05628034567598661, 0.14414392437005485, 0.15296565112436766, 0.07153376912954279, 0.12993031609461536, 0.0736421859937596, 0.13642418518796895, 0.15826453582502198, 0.1777334380785731, 0.19790471340300597, 0.20211531032617103, 0.15780031758794433, 0.21127891035803403, 0.19418428972325674, 0.16290257051597434, 0.18034720708333973, 0.17297748959019354, 0.1947948123001061, 0.1682421764133284, 0.16909095437955335, 0.16325903281044007, 0.1587070155979352, 0.16977172745341018, 0.17043652964901668, 0.1633532011160148, 0.14057078676027945, 0.12300136287478725, 0.30918611237078775, 0.3019285203298193, 0.09836169303070108, 0.05978676169759767, 0.10651199826540125, 0.11943965891539088, 0.15134704275195376, 0.3752795580184185, 0.1112460352501986, 0.12606349440715714, 0.14071483905789572, 0.16157156964726604, 0.15216581393824014, 0.17476635022374265, 0.16365993179497473, 0.17905799253204568, 0.1771822292151224, 0.17651632914641546, 0.18555338889938522, 0.17341214864064636, 0.17735657434755325, 0.19199805469507836, 0.1679654405302684, 0.17836983014207342, 0.18267829130661695, 0.051242661806848444, 0.10443737498122041, 0.07710335445836425, 0.09065817331681558, 0.08427242457779971, 0.12951034106840276, 0.11388953730891649, 0.08478324893137945, 0.06070669448599708]}, "mutation_prompt": null}
{"id": "427b304a-13cb-4182-b2f9-5169167dc291", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "2376f68b-72f3-43ea-9e2d-2cbc0c1b82c5", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) * (1 - 0.5 * np.exp(-best_fitness))  # Adaptive mutation rate based on fitness improvement\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing the PSO search by introducing adaptive mutation rates based on fitness improvement for faster convergence.", "configspace": "", "generation": 38, "fitness": 0.21284422642350606, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.4077859264646281, 0.43942544706534914, 0.39150533251351205, 0.033687071167314175, 9.999999999998899e-05, 9.999999999998899e-05, 0.0326336231745199, 9.999999999998899e-05, 9.999999999998899e-05, 0.0812144376270113, 0.0006959168303029006, 9.999999999998899e-05, 0.13310182632747347, 0.0899617459224148, 0.09036795166742684, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.07963373697545106, 0.10052944392860408, 0.08947054400786181, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9853662719714408, 0.9847251516358206, 0.9798281476721328, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667516857, 0.38186573263460266, 0.38634148378575905, 0.280128197690366, 0.2964099684563277, 0.28565841267752656, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.23460035928404588, 0.21702109877004472, 0.2945447984830455, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.1163074055807174, 0.16682146082653604, 0.1445403999654845, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.08493556197835639, 0.01090785922345372, 0.04021904175573254, 0.1946263333453635, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.0668892150135516, 0.09782649743045002, 0.07570425677495318, 0.10945339136071941, 0.06476616439802962, 0.06530495283225957, 0.3955481763434352, 0.40663124548875906, 0.38674147436070583, 0.37574649459986853, 0.4054034146568233, 0.4105883076849882, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.08135819103247699, 0.09551780621999917, 0.07684573960495145, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.1605178487103991, 0.17610475192220398, 0.2281938253887491, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.2672349688961171, 0.17710884203188415, 0.15237053946254875, 0.31570000109809593, 0.30236178491698174, 0.16368399098779518, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.20444565597268516, 0.16579154401889695, 0.0771151907419726, 0.24882256239138412, 0.21818735522530175, 0.11800415685385268, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.18346047081472472, 0.20693230124629558, 0.19191078297873765, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.17459618819800238, 0.18281941744027463, 0.17779911256974779, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17633840037355986, 0.15237360897062557, 0.062009409073458976, 0.10848061015084165, 0.11509101832900304, 0.1687370895576672, 0.5091158404703962, 0.11301704343087549, 0.1520490748504162, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.5373322410895527, 0.16768357963858105, 0.2780643116898466, 0.19931457380109519, 0.18732771495620693, 0.17670151089238317, 0.1989745299631248, 0.19016515631152364, 0.18901898737238765, 0.17791855530594491, 0.17863296026687658, 0.1702653317760554, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.08665760954276391]}, "mutation_prompt": null}
{"id": "52c12743-fbcb-4654-98f9-b5e64cdca11f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) * np.exp(-np.linalg.norm(best_solution) / 10)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) * np.exp(-np.linalg.norm(best_solution) / 10)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA with adaptive mutation strategy based on function landscape analysis to improve convergence speed.", "configspace": "", "generation": 39, "fitness": 0.21660487153434488, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5399897314806539, 0.5434790560384597, 0.5457974407534625, 0.5529447644227975, 0.5753239915318847, 0.5692260460035515, 0.5544663902704339, 0.5653981549947048, 0.5931384547640768, 0.06007726853258921, 0.018550201871323058, 9.999999999998899e-05, 0.12086537110508111, 0.0022877324635337537, 9.999999999998899e-05, 0.17560519825255394, 0.006486371866215257, 9.999999999998899e-05, 0.04297653817727409, 0.09187706536076878, 0.013592346641038922, 0.06998038645464078, 0.08254929972123048, 0.04826636197594436, 0.05002793314674692, 0.04743074954119142, 0.056339479508839774, 0.10296317199099647, 0.04935928068714823, 0.023086345433620425, 0.05630304347414128, 0.08397106131229104, 0.04707443157813196, 0.07103508651763446, 0.034634469611586116, 0.09829146794953925, 0.9729648919504575, 0.9717245202335112, 0.9535313066263308, 0.9634952128507456, 0.9722113946756602, 0.9678124813102196, 0.961459364769088, 0.9639080180382642, 0.9739747309450623, 0.41840192193506587, 0.3982433469998642, 0.3570325189985384, 0.4230235625570611, 0.3973324248937965, 0.4169231091318839, 0.38537586245782607, 0.4345567940754924, 0.3931959238848143, 0.17203545127177478, 0.2819381892563382, 0.4425381607490875, 0.3781242421467973, 0.20941608844696913, 0.24878826678235633, 0.21849800448566292, 0.34024169494375966, 0.5153859543634336, 0.19795779627534238, 0.29535768802536566, 0.13288697483650502, 0.1269346119038406, 0.31071431462719334, 0.22813949764879704, 0.26779882966293145, 0.22847320202807953, 0.2010574754355381, 0.1717613766838305, 0.18102378411958608, 0.13379811436411637, 0.18308836090568137, 0.23448354563738705, 0.13456278363445395, 0.22930380484345791, 0.2684547364976825, 0.1868917684107827, 0.02070206316526979, 9.999999999998899e-05, 9.999999999998899e-05, 0.054663756069563196, 0.0063976673314458665, 0.02094890930175386, 0.0014668729534814684, 9.999999999998899e-05, 0.0220220289357691, 0.06526071103511955, 0.05090711107863388, 0.191716967544727, 0.0992097456147003, 0.016699262186712804, 0.035606303278803875, 0.1952199269429099, 0.033600310318497195, 0.06717573352033646, 0.072604762711167, 0.018161828313392858, 0.026377793031687746, 0.003019328731125648, 0.017486114643039397, 0.05667100614786269, 0.010729643841959291, 0.029558518296498915, 9.999999999998899e-05, 0.02943025365273355, 0.08489009473312348, 0.10170359604446788, 0.15978552331612283, 0.159150417431285, 0.07442088218613263, 0.16095712622236846, 0.10642217167941403, 0.06277176360121306, 0.48206414674067455, 0.46033858266972183, 0.4724326485707151, 0.5196124565746729, 0.47546360804721277, 0.5095229076446324, 0.4829820456395819, 0.4795596445175746, 0.4748344140234282, 0.09005232302495769, 0.07045461436241096, 0.06094743627547128, 0.06477743851646356, 0.07589482795749913, 0.1422414844997809, 0.06766969676106094, 0.051617434693521314, 0.06816880113796175, 0.20917925044486174, 0.19578948257221396, 0.3565512863627537, 0.2772284503462108, 0.2093538641589311, 0.21702033278814836, 0.18699445136324144, 0.20543850005104947, 0.16676946528399783, 0.16330418959275195, 0.12878624165476737, 0.10615144229095963, 0.3100732954250084, 0.1763135298164501, 0.1631820127791006, 0.21475227698128385, 0.1554956676631073, 0.09584215632928439, 0.11256875947261835, 0.04747542251869474, 0.03955705588182501, 0.22288410262015956, 0.11473696109250664, 0.10693716754163762, 0.1821130224282097, 0.06492878680690972, 0.050557592483256086, 0.20179688768506399, 0.2311856886291026, 0.1930574157327798, 0.20773847723617778, 0.21482468275065592, 0.20244800898740112, 0.2315951413238504, 0.16884618565661436, 0.20480973775911193, 0.1890275707307062, 0.17479107135084104, 0.1772817812772477, 0.18285853468733237, 0.18697362675876794, 0.17936103418953864, 0.21244282435018724, 0.20082635993150266, 0.1742929917728887, 0.12360186376438609, 0.13724533799059413, 0.10394668383605798, 0.17416259715357285, 0.0658888227244373, 0.06205626973129452, 0.10892208376813728, 0.12661216292613353, 0.16902017348354892, 0.7442211386046311, 0.11330940381768617, 0.11230300382379488, 0.15732085151705455, 0.21320520720358405, 0.20601861843571345, 0.6507762217899173, 0.168314845272019, 0.4895041860354733, 0.19064960327983094, 0.18189871356577325, 0.18590836632531205, 0.1845115938232551, 0.19731053251993325, 0.1855201637326216, 0.19826221926519316, 0.19368710357387808, 0.19120195836004217, 0.0755110219362004, 0.09444858245968424, 0.06401446136134004, 0.07155175028427929, 0.05443201780587548, 0.11300614047507695, 0.13041847452225697, 0.03051880561633913, 0.0599389798006712]}, "mutation_prompt": null}
{"id": "04badd0e-14e1-4401-a145-b86277eef98a", "solution": "import numpy as np\n\nclass AdaptiveMutationHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def adaptive_mutation_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) * np.abs(np.mean(best_solution) - best_solution)  # Adaptive Mutation\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = adaptive_mutation_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "AdaptiveMutationHybridPSOSA", "description": "Enhancing the EnhancedHybridPSOSA algorithm by introducing a novel adaptive mutation strategy based on function variation for improved exploration-exploitation balance.", "configspace": "", "generation": 40, "fitness": 0.21567427447443568, "feedback": "The algorithm AdaptiveMutationHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.4964496083642298, 0.49974993735218487, 0.4708612868032138, 0.4572350597524264, 0.4227719497796979, 0.45319476922445523, 0.4708936319470548, 0.4842103987040348, 0.4861881966332505, 0.16549201094487076, 0.11558616176903069, 0.07205120570255363, 0.07544428959158778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08459896644537768, 0.08657538440110546, 0.08010764126240988, 0.07347232402588655, 0.09451597205296547, 0.07610106515048243, 0.09394725729814168, 0.0748954690206236, 0.07630032402757081, 0.1083762480430136, 0.06285786566342177, 0.06570098754948883, 0.06362032742194246, 0.09029926463005178, 0.09085467453880791, 0.0941688797565966, 0.12147084894430349, 0.06797564365525377, 0.9875228253821685, 0.9872578970789359, 0.9840922903627459, 0.9837068979416685, 0.9902341775927624, 0.9910013074096203, 0.9835013134581685, 0.9879201098596713, 0.9923075718098261, 0.31494754594522023, 0.3246470180993768, 0.35600140065525687, 0.3344376299302255, 0.3039378657125943, 0.34638492460711356, 0.2741888597415528, 0.31337661508457826, 0.2987023508117004, 0.29733082183067705, 0.648591283452981, 0.17698800976756157, 0.343480697440083, 0.2410264527113385, 0.9454394771644212, 0.23713231339438157, 0.34566716382256124, 0.21051190155003874, 0.1587839803259461, 0.161532761478833, 0.1298615808369088, 0.11996016687325772, 0.17285605066258236, 0.16941636742563893, 0.24767540557682732, 0.21295746437190044, 0.17844546151737106, 0.1755833086823746, 0.1335631450580771, 0.1333462008706343, 0.16194509153701853, 0.24177312293669007, 0.1337561488796427, 0.20039994821717433, 0.28476203487351226, 0.175905431330723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03280990051281274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06013069069261123, 0.09848395830345724, 0.14902920206255077, 0.1150364123603107, 0.015753993198335814, 0.02635779946434791, 0.2143757282072677, 0.03521953938810807, 0.12662219165689326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05291535766410582, 0.09965784725389604, 0.10081539254547878, 0.12398176932073124, 0.06630385414770879, 0.08881302583605977, 0.08980203188163594, 0.07320091764617265, 0.012396862406414244, 0.4344451009314019, 0.45788733316349306, 0.4615365337843579, 0.42359670265724825, 0.3677109252283357, 0.40929256964554117, 0.42178766956093827, 0.45395848668485705, 0.4122275600681925, 0.08087737521284721, 0.10609246312885712, 0.05214781359775511, 0.07129448529820204, 0.0899286899906867, 0.07986966409682394, 0.07493694513755511, 0.0863616501172304, 0.08019641752482642, 0.21040044398333246, 0.18825038947819894, 0.29911621302044455, 0.29193217212587375, 0.2555412667575574, 0.2639161976188794, 0.23306234781974722, 0.17050127182786368, 0.11872544761062731, 0.18675428424667817, 0.1844597777841207, 0.1352822962131317, 0.3096088856765369, 0.25592360839538464, 0.16924564769135264, 0.1775178811582555, 0.2956087234575251, 0.2682408726313792, 0.23309938175815537, 0.050170270181644105, 0.06449778242260307, 0.2074946417762379, 0.22323383003605068, 0.1312409932813362, 0.17830259237842183, 0.12067208175671729, 0.11013344430592809, 0.19976984981893953, 0.2793449966328694, 0.21386153493820725, 0.2076016675082979, 0.21349004421800832, 0.20980982038447693, 0.21400463819727067, 0.17076488010700663, 0.2115726888920325, 0.19055710098617407, 0.1775842375748874, 0.19108419949873934, 0.19265089414279735, 0.18484053968840386, 0.18316011633778395, 0.2088012162522449, 0.21101058139206874, 0.17876597024509233, 0.12337483215528722, 0.13652834489958254, 0.642880690991676, 0.17695680145696369, 0.11297704527708285, 0.06195483141821334, 0.10888435392750795, 0.12566696260439147, 0.16893668958786134, 0.5306488945465484, 0.1125948722217045, 0.5478426186179537, 0.15504117119224725, 0.2136812476336475, 0.20812464658955732, 0.5189244543700691, 0.16795843462497306, 0.3847654937762198, 0.18498335361706497, 0.1864738863405324, 0.18964365424712448, 0.18383243817013328, 0.18700500110125262, 0.17439569242188824, 0.18003674221235655, 0.1899409208046472, 0.1841192799504735, 0.06190353375660851, 0.09756916199207466, 0.055477596272136, 0.07856217965834245, 0.0847933572870554, 0.11056534131418505, 0.10047056793489773, 0.06949244617537353, 0.08014512021476727]}, "mutation_prompt": null}
{"id": "f9012cdc-e2ea-4fa8-bdb4-d0ac1cc6f2a7", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "215aef13-4dd9-4b31-b56f-9b50e25af27d", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) * max(0.1, min(1.0, 1.2 - 0.2 * self.budget / (10 * dim)))\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) * max(0.1, min(1.0, 1.2 - 0.2 * self.budget / (10 * dim)))\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "AdaptiveHybridPSOSA", "description": "Enhancing the exploration capability through adaptive mutation rates in PSO and SA searches.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'dim' is not defined\").", "error": "NameError(\"name 'dim' is not defined\")", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {}, "mutation_prompt": null}
{"id": "11d26fb3-9c58-4ad9-bdcf-66d89e370770", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "c3e18c82-9282-4dab-bf8d-8815e3006564", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution, mutation_rate):\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        mutation_rate_SA = np.random.uniform(0.1, 1.0)  # Initial mutation rate for SA\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution, mutation_rate_SA)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n                mutation_rate_SA = max(0.1, mutation_rate_SA * 0.995)  # Adjust mutation rate for SA\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Implement a self-adaptive mechanism to adjust the mutation rates in the SA search for improved exploration-exploitation balance.", "configspace": "", "generation": 44, "fitness": 0.20262303004341786, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.4960282125693668, 0.5073850195721339, 0.5524979403085988, 0.49570067270325513, 0.5410690925167165, 0.5109589800786964, 0.5109927796054167, 0.49848626597793677, 0.5162880471010378, 0.01411518738784523, 0.056595846487098256, 9.999999999998899e-05, 0.06953556409724315, 0.04863633053577543, 9.999999999998899e-05, 9.999999999998899e-05, 0.02099933567401857, 9.999999999998899e-05, 0.08419530174827594, 9.999999999998899e-05, 0.012838239757278491, 0.21721325044623607, 0.028616876395423985, 0.04979054620339052, 0.09474674829747032, 9.999999999998899e-05, 0.05576218079591966, 0.08648494795135198, 9.999999999998899e-05, 0.010521860758407109, 0.08496139861926699, 9.999999999998899e-05, 0.05837049624760271, 0.10022488780797612, 0.003893903922983055, 0.07382455767253338, 0.9895373495500996, 0.9726848266399835, 0.9738710163065056, 0.9831797387372898, 0.9702522322838204, 0.9844081656800555, 0.9878395933387712, 0.9748919496433555, 0.9867383836015838, 0.3665499915571012, 0.37253182043592536, 0.36860264189343606, 0.36571300990960454, 0.3627397832776943, 0.3545071917555751, 0.3501700082098791, 0.3593330317766046, 0.38439288392735016, 0.3226282156558742, 0.11181849268028454, 0.1527283433207013, 0.36592817431110136, 0.20803076618194238, 0.2801597271463162, 0.283512065996522, 0.06857485314171807, 0.16387086064596768, 0.1951104358813036, 0.13335463097304723, 0.19384759796251883, 0.15529833644887425, 0.19401486974794901, 0.17654720079048003, 0.15759822672893298, 0.2129428419396855, 0.17671459822346802, 0.22225435785571213, 0.19322423897059238, 0.1358950428688167, 0.17830114442297385, 0.2509004611214032, 0.13254015629259774, 0.16558123703961414, 0.2653299129511212, 0.15819836100805862, 9.999999999998899e-05, 9.999999999998899e-05, 0.008278296355735626, 0.03943694969833855, 0.0016870363796676058, 0.0002470084968634323, 0.0037930597454667314, 0.0044383669821354, 0.009168275178120688, 0.061803753404470085, 0.13708882412179935, 0.24217692064890628, 0.16726705906929384, 0.016189623309646572, 0.03541213506177465, 0.15097599860019695, 0.049142383434460535, 0.05413754681938865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0048998344592093845, 9.999999999998899e-05, 0.0005839622621016671, 9.999999999998899e-05, 0.00048575690557661755, 0.0004719644030237724, 0.16745466775994444, 0.13196930386710282, 0.0770125279523336, 0.09332132391174874, 0.14714068329150432, 0.13427817381508445, 0.08739517122594553, 0.08570079708355594, 0.03735588514605237, 0.494325906285356, 0.46359904857170875, 0.46536608179149497, 0.4666539582240592, 0.45672371081280805, 0.4605495033936938, 0.4772663864211304, 0.4689152465378116, 0.44955702103242345, 0.11277931323366353, 0.00038119518617241166, 0.06976790160129198, 0.07680614921476903, 0.018147177194159703, 0.09023932715544747, 0.09002403503988377, 0.05154413484420017, 0.07672595475594735, 0.22464536583613093, 0.23158889596168353, 0.33286043236300233, 0.19283205107616008, 0.2944158050173281, 0.16128198037993335, 0.2255587976183493, 0.18605510025106275, 0.2793242301569264, 0.3220508480808524, 0.11011787474075718, 0.11693374333160955, 0.3009261741502198, 0.09687611354897052, 0.11652497286290076, 0.23499222370271478, 0.0851543859623638, 0.09559145223594989, 0.11512305509133236, 0.05428809182430783, 0.04072255369406452, 0.19378328586267812, 0.06200885660675648, 0.08425359526126197, 0.21795473240538765, 0.049284352122512476, 0.027049011328784567, 0.22754706368013733, 0.1606091479760403, 0.21582472097562344, 0.22902850574920652, 0.1693595780537649, 0.18753221579867785, 0.23713228648172968, 0.16951122633978388, 0.20457765510765702, 0.22933901944657742, 0.1712304480344905, 0.18928622761511493, 0.200151111806404, 0.21130732367481175, 0.18892799986479503, 0.18092958015598337, 0.1775725580870514, 0.20419928134742393, 0.12282176350254104, 0.13745609649679935, 0.09882878097624614, 0.17404785048749272, 0.11278970686891077, 0.06201322221379468, 0.10889757996080551, 0.11531064736780006, 0.1686042080166804, 0.7314499721830989, 0.11362061740805218, 0.0658500929200474, 0.17034503120475497, 0.21347167594242966, 0.21437833376345083, 0.49184676441009356, 0.05923954730694991, 0.41913223857591075, 0.1765280998834391, 0.18441676537904483, 0.18284744852145451, 0.18861623204025668, 0.1882795943692238, 0.19960887227085844, 0.1946479457060556, 0.17911392093269207, 0.17728952271762122, 0.12672833552761276, 0.05437385183781118, 0.05575939520450679, 0.07852636309827543, 0.024157070657646385, 0.09237605360504708, 0.09395155793311549, 0.02623738217342142, 0.0529794354880998]}, "mutation_prompt": null}
{"id": "163f62f8-fb4b-48f5-bf7d-bbb104b775a8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "9a24a821-879f-4dac-9bd7-e4b15964b5d2", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "472dbdc1-bdfc-407e-bd1d-1c4b21123994", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "61ae5704-786b-469f-91cd-6d37e7e130c4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSAImproved(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            # Introduce Levy flight step for enhanced exploration\n            levy_step = 0.01 * np.random.standard_cauchy(self.dim)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight + levy_step\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSAImproved", "description": "Improving search diversity by incorporating a Levy flight step in PSO for enhanced exploration capabilities.", "configspace": "", "generation": 48, "fitness": 0.21787205763596187, "feedback": "The algorithm EnhancedHybridPSOSAImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.4885338383812997, 0.5061631446949132, 0.5083145078373537, 0.5143377124092257, 0.49350037126204294, 0.5298784916851463, 0.509353630582954, 0.48603115459469803, 0.5123545275799217, 0.03029045244693862, 0.022611469944658902, 9.999999999998899e-05, 0.02407281579217435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237899852615539, 0.08019785288371217, 0.06463385891802387, 0.11061121672978569, 0.10532757717103813, 0.08698395964226036, 0.07404844538759803, 0.10072494076771166, 0.06937429423969532, 0.11465886467136244, 0.11284324795242717, 0.08829528324682001, 0.0917638321357237, 0.08497071887610796, 0.08601549466341474, 0.12514013399559587, 0.10193771075237568, 0.08805343675613964, 0.9902587274816325, 0.9870278211891548, 0.9801365940813344, 0.9899144505775272, 0.9888291038798445, 0.9884750802349007, 0.9913006516550757, 0.986083584879146, 0.9922407508515599, 0.3648015115392066, 0.34923330913365946, 0.3598525912541132, 0.32794452367110893, 0.3427385428272399, 0.34038656424591207, 0.3568063399387532, 0.3707189961952325, 0.33985020069414096, 0.20571825728188564, 0.23527196317804566, 0.20100776249835617, 0.6904177235797293, 0.19156466519505178, 0.20297236893008663, 0.2371513075701046, 0.7901247401441129, 0.7337924570884626, 0.13706211474357755, 0.1788270930759387, 0.1959124577617245, 0.13547776416618162, 0.17690606377096396, 0.17447569905188154, 0.1922805272280721, 0.14788706015176034, 0.20279502875095767, 0.1859897081335533, 0.15289816506072873, 0.12612530768355812, 0.13605634575136716, 0.14603075914641472, 0.18323230207478458, 0.1324074039884956, 0.13099055643758784, 0.17277750423531868, 0.009228219863496312, 9.999999999998899e-05, 0.06760908254627318, 0.031766402046016995, 0.06221399353390411, 9.999999999998899e-05, 0.02506654110990636, 0.0063407255238701055, 0.0012115422042894286, 0.07363840530753007, 0.04420015314324477, 0.09338977272506, 0.11943129338654745, 0.024932782933194564, 0.048552842325273904, 0.22393398659881614, 0.04342588348534815, 0.053749880447886755, 0.03151870270964141, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018775121837132813, 0.1332600438934367, 0.1155772618524461, 0.06479991108137806, 0.13698622222491208, 0.03934102309920495, 0.15049547836361477, 0.13384990030078447, 0.08025780694517148, 0.06160413491595318, 0.4426902195047755, 0.44490624789999655, 0.45370654896101126, 0.5018969218051139, 0.4365390731817377, 0.44301239454887453, 0.45649642866056683, 0.4511372797750378, 0.4321918734870994, 0.09878998165362085, 0.07309507754543498, 0.1195002129825733, 0.0883144948798894, 0.059936396688520466, 0.07596267512469135, 0.10265845372391469, 0.11174048564959682, 0.07541881376885684, 0.28283007106292324, 0.19076918887594907, 0.2982654791520677, 0.260442233753334, 0.11840250346484626, 0.2688027729445355, 0.311517882512638, 0.1941415435900674, 0.18433046943953135, 0.30761970763226165, 0.18847133622305212, 0.15348777900136934, 0.24280501600620075, 0.2053643395906085, 0.11708605834267671, 0.213555545901854, 0.20898749486431767, 0.2660595685519376, 0.19916363229968614, 0.038506151273765554, 0.060840757869858875, 0.19055759328671562, 0.21671259083106043, 0.0873482050376202, 0.1826004888499244, 0.11790503886014281, 0.14823094089559707, 0.21785045575045348, 0.2001637021782492, 0.21129002623055626, 0.2218663954466198, 0.20084848979406056, 0.20838585023828415, 0.21213796041879374, 0.20051625088486558, 0.2079167188222556, 0.1950806882298134, 0.20965633748035528, 0.1944025776919046, 0.2062793043512634, 0.18188914134763, 0.19843526178792592, 0.17810927297758805, 0.17824405410145827, 0.19367102366961864, 0.12297988457027409, 0.13750801234110355, 0.10539549916197288, 0.17424604804848498, 0.17003032610416124, 0.06209115396250253, 0.10885048804542419, 0.11531702609773564, 0.1691955984914124, 0.5936667422092898, 0.11355832277372047, 0.5395927032789171, 0.15751503889815088, 0.2137140705863667, 0.21422911594238025, 0.7045731371275502, 0.1672480422584255, 0.4243406875634984, 0.18398359772789463, 0.18615778062723853, 0.17764606388584725, 0.17921444481788462, 0.18110142671371665, 0.19111219814810032, 0.17733778922787136, 0.18118062172012583, 0.18156466267578808, 0.07230293757577744, 0.11064421976856842, 0.061910858544546477, 0.07590817296982644, 0.07029839439223029, 0.11364950465127821, 0.11773048595802105, 0.059799398433772466, 0.06241696277050435]}, "mutation_prompt": null}
{"id": "6c6edfc2-0f69-4057-b6a7-edeada43f618", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight, mutation_rate):\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution, mutation_rate):\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  \n        mutation_rate = 0.5  # Initial mutation rate\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight, mutation_rate) if np.random.rand() < 0.5 else sa_search(best_solution, mutation_rate)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  \n                mutation_rate = max(0.1, mutation_rate * 0.98)  # Update mutation rate dynamically\n        \n        return best_solution", "name": "DynamicMutationHybridPSOSA", "description": "Improving convergence by introducing a dynamic mutation rate adaptation mechanism.", "configspace": "", "generation": 49, "fitness": 0.21359432418460395, "feedback": "The algorithm DynamicMutationHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.49202580184025657, 0.5292499535707882, 0.4931915844096808, 0.5841536290870469, 0.5676173808223595, 0.5725210093953853, 0.5699724259161706, 0.5345605270615962, 0.5529636948790133, 0.007678817481339917, 9.999999999998899e-05, 9.999999999998899e-05, 0.12468509326565091, 0.04910756779387415, 9.999999999998899e-05, 0.025898325243437825, 0.05959803005098563, 9.999999999998899e-05, 0.06340294427788218, 0.06366736308609744, 0.03045472086474621, 0.06669666337797242, 0.059617421606010024, 0.045765063623209756, 0.06948287702754752, 0.04695889654073038, 0.05602316997084522, 0.07914207772256321, 0.03489616364148862, 0.01564050694968444, 0.08838854632486015, 0.038306922459487414, 0.04165711575378506, 0.08368181055880086, 0.024440231729728312, 0.047771609603405873, 0.9776547954627159, 0.9431925060683422, 0.9435516522470278, 0.967600684101379, 0.94990804505565, 0.9562891316711519, 0.9563949122936222, 0.9585013477003613, 0.982380095850648, 0.41511764287225283, 0.40916748116308654, 0.4049771318909068, 0.4414949851798642, 0.3943569677725234, 0.43171152418478886, 0.4211753943250417, 0.4196596967857479, 0.48030452046629923, 0.22966288050522832, 0.15647623552283008, 0.13913136201780674, 0.2860764517432215, 0.026871288764979684, 0.14861221531911228, 0.17992870554785045, 0.08451689438429277, 0.06391217489776557, 0.2608032424233936, 0.2105819950321004, 0.22253063290101904, 0.22609887284311958, 0.22515321614787576, 0.21260552647342124, 0.22570435675180156, 0.13615757902245296, 0.13574859582525656, 0.1874945671672983, 0.21718956379207588, 0.13467020024599696, 0.21274120534075014, 0.22816079660452115, 0.23396933125655706, 0.20400354445866087, 0.24243868673863733, 0.21929663053498238, 0.007769057606855312, 9.999999999998899e-05, 0.0899567288425307, 0.09728612152595362, 0.03935048998980306, 9.999999999998899e-05, 0.004667060394488942, 9.999999999998899e-05, 0.05381644234221661, 0.08763476587473107, 0.1052698967063539, 0.20073162781797782, 0.09020720390912507, 0.029502105464329853, 0.028302829043841626, 0.18324040016547383, 0.038443726928288235, 0.03747985672150156, 9.999999999998899e-05, 9.999999999998899e-05, 0.09747275808970446, 9.999999999998899e-05, 0.0070324892765391, 0.004907699944518784, 0.009108284973870617, 9.999999999998899e-05, 0.030572964417618254, 0.049981682423892226, 0.11328382397991388, 0.1800283080586036, 0.09877865322600043, 0.12235698714820809, 0.07034397012483073, 0.15693466710927173, 0.17905487792275965, 0.09276815942049033, 0.549442137457425, 0.5073446799813837, 0.4597034843863178, 0.5010077967909725, 0.5133800924627854, 0.5022287550704408, 0.5060729525947836, 0.5097892496704473, 0.4996893585082316, 0.0784263442334373, 0.004131817738704413, 0.019888192671930982, 0.016549626170956122, 0.04015852326022795, 0.06980498649272882, 0.06659780773529977, 0.0848503062424385, 0.056549474627169416, 0.31488868797632796, 0.14863268644189886, 0.17413283031328486, 0.32047544672727113, 0.2286847825566234, 0.1301728588720491, 0.2735525518629265, 0.2422769747575103, 0.16466662354976525, 0.3141618806678713, 0.12599174323755413, 0.11574217287140831, 0.31349548851455256, 0.1670665204720142, 0.11740411946907059, 0.15718029048991233, 0.09714119887419981, 0.09057747790672444, 0.14853144437802512, 0.045453792690347106, 0.06283593824813416, 0.22507369555339574, 0.16889632969023738, 0.0956245770483527, 0.1775584645873356, 0.09379249892295372, 0.03124076134499787, 0.18857931717285548, 0.270777945989531, 0.20565152910893958, 0.22333032609810344, 0.20137776960524634, 0.18291139951542068, 0.1931118654231977, 0.18937828281643054, 0.18518419582557677, 0.18096641236467637, 0.19583380786043503, 0.19654733388462808, 0.1829837990535047, 0.2507886196898007, 0.2104694047863832, 0.17591194024899703, 0.21144698106592363, 0.2108324327849812, 0.08035085162760458, 0.13778960070504365, 0.09920922874314841, 0.17393224469696555, 0.06599492668199725, 0.062083077378666696, 0.10888879515475836, 0.11540358843184861, 0.16899660279076434, 0.8302770147401858, 0.11359847786460164, 0.08323011051578344, 0.1701606597536427, 0.21477334036620166, 0.7464689782010088, 0.6140812887646688, 0.16798508026702041, 0.6646177698997523, 0.1826609950242486, 0.18806202277691497, 0.19042069158377195, 0.17865808129840843, 0.20594134388124774, 0.1877582457901369, 0.18413647554609425, 0.17476386060770344, 0.18267290091799926, 0.08714905231001935, 0.0913917163842245, 0.057784638571783065, 0.06397682327378029, 0.06474609918920327, 0.12319820493873013, 0.10664126248021655, 0.06874894288571054, 0.06229338967499465]}, "mutation_prompt": null}
{"id": "cda557c9-1316-4ee8-abdf-b05d4fdda51b", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "6394754f-90f7-4d4f-abef-c736c2de03cb", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "3aeb866d-6b2e-4cab-bf87-694c15c04690", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) * (1.0 - np.exp(-0.1 * np.random.rand() * self.budget))  # Adaptive mutation rate\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "AdaptiveHybridPSOSA", "description": "Improving convergence by adding adaptive mutation rate in the PSO search.", "configspace": "", "generation": 52, "fitness": 0.21841758284264165, "feedback": "The algorithm AdaptiveHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5195199384198519, 0.5194315711362926, 0.5318271962118892, 0.5152433538995913, 0.5014296731928949, 0.502267574751813, 0.5066799358892502, 0.5014328137109534, 0.5483047454539149, 9.999999999998899e-05, 0.048145987677421176, 9.999999999998899e-05, 0.07594279832288287, 0.024159234057410273, 9.999999999998899e-05, 0.02100687156359038, 0.028385101417661485, 9.999999999998899e-05, 0.06744994335401133, 0.07344672208694336, 0.03453526843409749, 0.07236281589033866, 0.10331554183435654, 0.0695757425594069, 0.08193165697148486, 0.09202936074948176, 0.08437746802563961, 0.07359395458449058, 0.0939515341513768, 0.06104839658767558, 0.07767729101238552, 0.09110581144351504, 0.0748004251444534, 0.057938734412134374, 0.09000432491574806, 0.0565863620385213, 0.9912317053154612, 0.9895669096717523, 0.9797422015803774, 0.9850019118899012, 0.984137938541352, 0.9842150072142586, 0.9841716128316885, 0.9835528395354964, 0.9885768097433947, 0.3896024642705008, 0.36060075584592244, 0.38379570172580013, 0.38993561611878935, 0.3654673681075198, 0.3728680795332593, 0.3571329897894445, 0.3815052948757467, 0.3774738440733527, 0.43598985255551925, 0.19161142398005593, 0.22542864964330078, 0.8144749661406937, 0.26327862070465247, 0.21142299610262716, 0.22436259263426062, 0.31514924289570967, 0.2382876675885447, 0.21323172574429117, 0.2428741061015125, 0.1876619004248149, 0.2753292024692394, 0.13818289088228974, 0.20162248540088035, 0.23027514377525227, 0.21251279028994363, 0.19635135186826647, 0.16925820624970855, 0.19087018581014592, 0.12370117504625266, 0.13444848641015217, 0.13577595274818233, 0.13344328181115905, 0.2105783075157378, 0.18357521085114137, 0.1707693549273861, 9.999999999998899e-05, 9.999999999998899e-05, 0.10372829881603407, 0.10297239712737827, 0.02784995804584467, 0.00028801327663352527, 0.006158481042944697, 0.026095307528966938, 0.03518661877514406, 0.10511080994776678, 0.1680958279919732, 0.14565879627368994, 0.10166083543385884, 0.0299302171347976, 0.06917047796738407, 0.14836897951282513, 0.04049377791739661, 0.028839684483678463, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015210840363389933, 9.999999999998899e-05, 0.006738902748950948, 0.006630740885618769, 0.005155477348434023, 0.00015949976766427287, 9.999999999998899e-05, 0.017517156876020068, 0.11672446666989289, 0.0764348974375696, 0.055484927223862224, 0.07156145701297012, 0.06289219241929767, 0.14179674086935323, 0.06106319788357528, 0.0918077313838217, 0.43210887840264856, 0.4623446215996204, 0.4807790867892271, 0.4480957882853348, 0.46195136017302174, 0.4700269957824841, 0.4468193723298829, 0.4542038395376601, 0.4554294695875546, 0.07635467792365724, 0.06499149542007943, 0.08184968088099431, 0.046931351678453526, 0.07348961533283893, 0.08602842115595244, 0.15120237074035214, 0.12206173497280759, 0.09370195666192827, 0.30949354237851057, 0.21998667510619285, 0.17412837860506913, 0.17256361073665993, 0.3185463601935026, 0.2879435169292035, 0.2890937308183952, 0.22613085047692771, 0.12702663014016302, 0.1891718736459559, 0.2294181357190297, 0.1598708855143064, 0.34399040119690893, 0.29127189757390737, 0.12359913465236183, 0.19978667989075816, 0.1691644423141332, 0.1239032337727538, 0.11513457496990087, 0.07677466179826786, 0.06337053566404849, 0.24859201073068016, 0.20426149664979576, 0.14864211827851903, 0.18908114424632172, 0.11522110016621645, 0.11724518753791013, 0.22605273371816137, 0.21051781601443464, 0.2090282594474555, 0.1962325058174521, 0.1985035118840457, 0.19392413049821544, 0.2181930548229709, 0.1672930007061999, 0.21429979556411427, 0.18674915310213935, 0.18162270050326756, 0.19099459557889298, 0.1760510904201037, 0.19418144785509617, 0.19270896649333402, 0.1821604530570724, 0.18297082291175037, 0.1930463979094249, 0.12362651136861369, 0.13706871767429296, 0.7631468045063259, 0.17387875068885839, 0.1124709250178616, 0.06206309197845061, 0.12093738241462015, 0.12730212891845605, 0.1689732974262168, 0.6224109199597039, 0.11328525063916661, 0.04431183129214955, 0.15676628793965008, 0.21261439944884108, 0.2137547918776086, 0.6387671728419118, 0.16817908466839848, 0.5380217594873473, 0.18656740038122321, 0.19448331395954355, 0.18303459159181368, 0.19008951846691857, 0.1826686245630521, 0.1821850262461434, 0.19322360319331267, 0.1855127548833, 0.1832442193147673, 0.08224458382401878, 0.07674946556330176, 0.07726948070407247, 0.11316133266092043, 0.08713842423461449, 0.08469143707611693, 0.08135177312937725, 0.08047737788446607, 0.08555996994322923]}, "mutation_prompt": null}
{"id": "ec6f9501-c558-4e50-9a6c-f9d21acc7886", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "aa136518-38d3-4a82-b02e-539bfcfa438f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "0936efe5-36d5-436c-b105-65e51b23a681", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "876286df-f8a2-4da7-9d7d-60a653f51167", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "5ff244e0-c2ce-4884-ac59-e6b1968f9d7e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "18193fcc-20a9-49d2-ab6b-5d8f54288e10", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "c1213a18-832b-497e-8fe8-fb80aafc405f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "3cc5627f-eb8d-4dde-b6d6-d0f714fc5196", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "03ce4a67-2b8b-48ed-9524-5e715429b2a8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "7bf7be1a-efed-4795-98f2-b09939cce6d4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "3c589237-c209-45ae-9498-e7305ba28d86", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            mutation_vector = np.random.uniform(-1.0, 1.0, self.dim)\n            new_solution = best_solution + mutation_rate * mutation_vector * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            mutation_vector = np.random.normal(0, 1.0, self.dim)\n            new_solution = best_solution + mutation_rate * mutation_vector\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Improving the search diversity by introducing a mutation adaptation mechanism to balance exploration and exploitation.", "configspace": "", "generation": 63, "fitness": 0.22068165409565774, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "e23a98ed-e7f7-4405-a934-7112a7998f2f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "131c61f0-9b22-414f-a62f-1dfaed860147", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "bac96402-4c91-4b42-b868-5fe89696f8a1", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "6b655d13-e9c2-4151-85f1-87f9d74198a6", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.clip(np.random.normal(0.5, 0.2), 0.1, 1.0)  # Dynamic mutation rate\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.clip(np.random.normal(0.5, 0.2), 0.1, 1.0)  # Dynamic mutation rate\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Improving convergence by implementing a dynamic mutation rate based on optimization progress.", "configspace": "", "generation": 67, "fitness": 0.21970688619316506, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.4929957959652197, 0.5543550484320512, 0.539983118766906, 0.6041954994867734, 0.4992697189279972, 0.5084570793991343, 0.5228116000753883, 0.5375601866522526, 0.4906526504835489, 0.12311781132260491, 9.999999999998899e-05, 9.999999999998899e-05, 0.03253153676756615, 0.05492266922245048, 9.999999999998899e-05, 0.016556987970856585, 9.999999999998899e-05, 9.999999999998899e-05, 0.09302950448870284, 0.11903610992050107, 0.03280931016723476, 0.0978236488554659, 0.10192079609787374, 0.07452512155943058, 0.07932717726286065, 0.08056396712703973, 0.06418254192655404, 0.10859985325458765, 0.09597442350603158, 0.03190343817588148, 0.0452001002774699, 0.07474338653165813, 0.05242667552544167, 0.07105793197962396, 0.09418285972690887, 0.051703881086863634, 0.9909896349949379, 0.9855620810106616, 0.9753783713849558, 0.9877462464629265, 0.9855166710644977, 0.9883015935890487, 0.9877880914768602, 0.9834668105245709, 0.989987608131854, 0.36570955807244954, 0.34725083247727284, 0.34102609420239227, 0.3602884064400177, 0.3861489997619655, 0.3603452848036951, 0.40039518659234186, 0.3439568181428253, 0.3723590877325349, 0.2194705089728679, 0.19322646307515334, 0.20167890247875186, 0.8964414604145858, 0.28319343996750646, 0.26777398618921966, 0.6087832150946233, 0.1692805037300552, 0.33465998488564264, 0.18599877104760631, 0.20273587843519092, 0.15109380244418769, 0.18552938045325396, 0.13955768560163706, 0.20070872398237927, 0.1823062509949941, 0.2678322602449549, 0.18571825434307976, 0.16973750670999976, 0.1319744494178411, 0.13450024873571542, 0.194068289191476, 0.171979859416171, 0.13471589791479766, 0.24298616886004298, 0.2708460059138713, 0.1460619690879894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009161721162456504, 0.06849288325386604, 0.006051982319929983, 0.00992003359449134, 0.02094361820531032, 0.07437851711526533, 0.11692524303940877, 0.10599054082189774, 0.21602452556807905, 0.0865641337773082, 0.05462183248014696, 0.03837382147000967, 0.1938404609260278, 0.08347484308837883, 0.08148663070378193, 0.010822216202042712, 9.999999999998899e-05, 9.999999999998899e-05, 0.03441111458019952, 9.999999999998899e-05, 0.0014714798224498837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08575807201230767, 0.1186933632523034, 0.12273321908589752, 0.0903867684216797, 0.10023357021754542, 0.07502326467356901, 0.09924592338408689, 0.04917620493049635, 0.06232813164590245, 0.4792799059600149, 0.43662983606640915, 0.43399633443943886, 0.47430178123371214, 0.4513429009786709, 0.44535389782470847, 0.4578651418715681, 0.43697908167801136, 0.43835289276339606, 0.08595206025798707, 0.13721075717412845, 0.08107039341454891, 0.0775002545525435, 0.12412854253334404, 0.08119787970950965, 0.0934007915598315, 0.13427842950943236, 0.11242620848450768, 0.19649726362973174, 0.19504016717249173, 0.17664725176603024, 0.1829202769954602, 0.18236754165935487, 0.25784413657419814, 0.23809723656704795, 0.1458112028586609, 0.24412737898317416, 0.31294386366002236, 0.15410593500231207, 0.12543761300777856, 0.32176801323742177, 0.328428698154128, 0.11652150779420423, 0.16571806288230806, 0.2671970872738417, 0.204521931495399, 0.11446423114101656, 0.20844094412546832, 0.06777275726160281, 0.21988822648941553, 0.21361435222904612, 0.0858237444977622, 0.2031282045151055, 0.20423508404852342, 0.028104065515643595, 0.20452413424765892, 0.20778671771791024, 0.18428660415252285, 0.20003825716137724, 0.24829943639615326, 0.22495826591453083, 0.2218880179391326, 0.18561164926529683, 0.22508626229099282, 0.1851370836384003, 0.21361518238013655, 0.1731667155810399, 0.18277697324264686, 0.19677889312660257, 0.19871039753970543, 0.24918077840943664, 0.19083550444988773, 0.1988888272925866, 0.12359877064815905, 0.13782972968844387, 0.10688343463230632, 0.1741741420381635, 0.11301343448988721, 0.062065647955022674, 0.10890878870895049, 0.11537214434641152, 0.16836788595575203, 0.8582367624580751, 0.11346086042233838, 0.5523566777260878, 0.08326587268900132, 0.2144038947906296, 0.21254049840415457, 0.529636625832026, 0.1690764398116782, 0.4491178742347075, 0.19430967268761956, 0.1829074628108368, 0.19080643137108322, 0.19372325119880185, 0.18630923836538493, 0.17865119046569, 0.18030488826618873, 0.18368179600705925, 0.1854581814578401, 0.08035958626378992, 0.07637290272330233, 0.07351220800689573, 0.0673038330027288, 0.07930959536191329, 0.07979895014654559, 0.07201242713516964, 0.06439703486051529, 0.07142392229843209]}, "mutation_prompt": null}
{"id": "0d1f7ebe-e3b8-4262-b391-3d3f8917041c", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "678c82fd-15c5-491d-aced-85441b8f578d", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "d2331bb7-a9a7-4aa0-b605-71426a14b308", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def adaptive_mutation(best_solution, inertia_weight, best_fitness):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            if np.random.rand() < 0.5 or func(best_solution + np.random.normal(0, 1.0, self.dim)) < best_fitness:\n                new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            else:\n                new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = adaptive_mutation(best_solution, inertia_weight, best_fitness)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "AdaptiveHybridPSOSA", "description": "Enhancing HybridPSOSA by adding a mutation strategy that adaptively adjusts the step sizes based on the fitness landscape to improve exploration-exploitation balance.", "configspace": "", "generation": 70, "fitness": 0.20897785789785872, "feedback": "The algorithm AdaptiveHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5114903569676497, 0.4890752157438164, 0.48984412476253925, 0.4981883577983959, 0.49550504734606715, 0.5107165795233821, 0.48528117241462765, 0.5047571121309198, 0.538938977834994, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04494118768446986, 0.00674870222312407, 9.999999999998899e-05, 9.999999999998899e-05, 0.032671495932564576, 9.999999999998899e-05, 0.10768999959063441, 0.06723042588419825, 0.08767337977040734, 0.07358813192743308, 0.08998176777335098, 0.10643759166907873, 0.09253488505109564, 0.07420626854757573, 0.11779020997622502, 0.10062995730609492, 0.062449385877154207, 0.07356036930445753, 0.10720298083052493, 0.09243926834947525, 0.06977227672243203, 0.06752687498516374, 0.06305607917795386, 0.06087857903396032, 0.9769245681878898, 0.9652204108776946, 0.9614695657375071, 0.9755864816033126, 0.9756912795758689, 0.9693410532119024, 0.9785828421414905, 0.9697237639633373, 0.978223347362687, 0.36350475084670364, 0.36273024710672985, 0.346160061031787, 0.392701181610293, 0.3673691200258413, 0.35542104552781406, 0.3507767720286614, 0.3641843926439461, 0.3373558573698451, 0.2053236633455774, 0.1895376228147707, 0.32258667340075486, 0.2831591414057715, 0.35036775839203005, 0.27872098082162444, 0.22997205509366625, 0.1956530106924501, 0.21029772929349622, 0.20056998900366174, 0.12850004966062334, 0.18326179665559017, 0.11981525747438959, 0.15347220514955917, 0.17599742666448637, 0.13527186127582702, 0.17187592523865036, 0.1568392867407742, 0.22025949108933662, 0.15510610655305368, 0.15471002405108158, 0.1768162585790154, 0.19554280536448676, 0.13350368078270292, 0.1738771540186006, 0.14958077814993354, 0.1667670138744476, 0.025734400509073385, 0.058238313406222764, 0.038358099267238877, 0.028558564371331863, 0.04997468233939362, 0.02401070795816118, 0.003584418273503198, 9.999999999998899e-05, 9.999999999998899e-05, 0.1431351110516491, 0.04174066300480683, 0.13612016546210703, 0.11296316052599609, 0.028883750759943205, 0.038497642012387034, 0.15582918195833662, 0.028695974600694174, 0.0713005299859567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12158543514878861, 0.05981663165684892, 0.122734401692849, 0.07459863448731197, 0.1347867760986171, 0.051212258068698446, 0.051771177072767016, 0.11325746251988345, 0.05103337271242947, 0.44567378596302065, 0.4335685720475412, 0.44103576311768367, 0.46156403242958854, 0.4576398001514651, 0.4479276617675261, 0.44091120660021066, 0.4669758816694536, 0.41392331795633497, 0.10026894285769883, 0.053705870224596275, 0.07921760288337831, 0.07066034812980126, 0.09535051767690694, 0.0676059946034322, 0.11678658924482266, 0.06744369836768038, 0.10497148576798987, 0.13119962381557448, 0.18606703916798217, 0.2672892519932891, 0.15544555411883232, 0.1753492548750344, 0.23808565125404535, 0.18547713269897081, 0.1910778649319348, 0.1965524344585089, 0.16163727264057948, 0.16344689435541038, 0.1651474829165871, 0.31974973303728305, 0.23465169683981701, 0.15195323386153248, 0.16001535734645533, 0.24318029506231664, 0.22867148518037284, 0.1417111173802934, 0.08640902945940909, 0.0710594956110937, 0.1873149876621576, 0.17576618721570958, 0.09355095051344764, 0.20000345109571038, 0.12378581702562275, 0.16227353944884637, 0.2199895444407507, 0.22537025444865977, 0.21747009432757836, 0.22789718141145554, 0.21643174939444132, 0.18746623366806747, 0.19385027026685353, 0.170650729505884, 0.19464134790621224, 0.19558191776726863, 0.20414526702067692, 0.16848187830021055, 0.18111283642890652, 0.21375004121664154, 0.1838802591637695, 0.1658844644731382, 0.1878183326127426, 0.17540298504220975, 0.189547868203797, 0.1373777419938622, 0.7753721026907654, 0.17709370667670332, 0.06582768779894632, 0.06201206434183382, 0.10863534379132578, 0.12655561241165159, 0.16753556387477786, 0.5383582231771618, 0.11292657525117378, 0.6726848784045774, 0.15662685930952247, 0.21288243356467706, 0.213186947811293, 0.1692155275128564, 0.16706249695884745, 0.46326705319150074, 0.17083736381810288, 0.18779553193168796, 0.1718520589463729, 0.18134347837605858, 0.1766757844385367, 0.19356076004439138, 0.21931485610617096, 0.19378887754552343, 0.19698262140792078, 0.08963964713610151, 0.12041250412655058, 0.07257174162751767, 0.07006602862078071, 0.06188683779532367, 0.10451359068300026, 0.0799263851208023, 0.06650068651814034, 0.07417080838337331]}, "mutation_prompt": null}
{"id": "aece1ab2-8599-4581-a60a-dd402d55b7f4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0)\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing HybridPSOSA by incorporating a dynamic inertia weight to adapt the search behavior based on the optimization progress.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.5212155138210888, 0.5074042674078314, 0.5213981710473662, 0.4935781767080323, 0.5603108166824725, 0.5098352715237229, 0.5035445209614997, 0.5023681204897013, 0.5270255428786565, 0.05127143894930919, 0.01551100317861731, 9.999999999998899e-05, 0.09354003093198571, 9.999999999998899e-05, 9.999999999998899e-05, 0.0804646839666171, 0.000695880063295018, 9.999999999998899e-05, 0.08463614478577763, 0.08277883431721622, 0.061046628729725994, 0.13104951767490514, 0.10135727291793606, 0.11454447608247287, 0.07419075926836027, 0.07309433599761284, 0.06804474789493453, 0.12257513592158653, 0.11779428070097597, 0.07648574542481879, 0.05810214313853179, 0.08385507342403575, 0.08563331401309915, 0.08345220306151968, 0.06793033353394351, 0.04260406345375445, 0.9852825572753267, 0.987109832527841, 0.9792360490653488, 0.9766179896757702, 0.9878963081348688, 0.9858286591968614, 0.9771669072134784, 0.9861937679749091, 0.9858307142607543, 0.35276195773729546, 0.3407801517231459, 0.37576220565183627, 0.38609148667521, 0.38186573263460266, 0.38634148378575905, 0.34662857776111355, 0.36749141677581043, 0.3561347131073923, 0.21800536716749153, 0.3169054809013474, 0.22624767978007654, 0.3798978308200497, 0.21174421053597214, 0.3812719711939718, 0.19209108041284462, 0.21702109877004472, 0.36219393212130335, 0.17880315459472584, 0.2153346364321158, 0.1670637143455801, 0.18231753569812803, 0.18088806064646545, 0.18508337485596216, 0.25828711757151346, 0.25891307064565383, 0.19200185205340536, 0.1799332356211064, 0.1687856116703359, 0.166588986558445, 0.17883640214249463, 0.25193755121283135, 0.13699621768536108, 0.2299744339059655, 0.2812136650915561, 0.23726518988257084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04335558510344417, 0.006239210252661165, 0.014771293616492542, 0.007011241327699591, 0.0045481572932826175, 0.00020610404413223815, 0.08193688758982642, 0.04110682344479555, 0.20406881203283045, 0.09788179099900829, 0.01090785922346893, 0.040219054201918514, 0.1946263340151153, 0.046241023255446656, 0.07611959033505733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042897218540297266, 0.03585423751027306, 0.13277216774444645, 0.15124915017253315, 0.1287822848212118, 0.12383278114434837, 0.11889479337809439, 0.13299874042671112, 0.06732349473410681, 0.45511336405688274, 0.45366343864161707, 0.47011236834033043, 0.4463606315500389, 0.45132530470943477, 0.4799273884964953, 0.4337945211126334, 0.4653030572223603, 0.44889980933025886, 0.09018398588732235, 0.1139052011583177, 0.10171192053765332, 0.0995511579101378, 0.06321632637696462, 0.09166212455137479, 0.061561407969813464, 0.06767701456626363, 0.08015886133569239, 0.2811113822084583, 0.19052662243722973, 0.22575247997235726, 0.18606754379569734, 0.16533592028067867, 0.22140256435184325, 0.2959406899427124, 0.18290867619166562, 0.2355612607817078, 0.30427750602647197, 0.1633955638978063, 0.11053507365801596, 0.31569999420737893, 0.3023617854055972, 0.163683990976896, 0.1710802288491301, 0.2114320258116965, 0.14014314465057653, 0.11842292216688655, 0.10570521477670514, 0.07700946884804338, 0.24882256268257608, 0.21818735515148424, 0.11800415685380194, 0.21583801810327663, 0.134561817138671, 0.0998740093833419, 0.22297165140304565, 0.18095013088298018, 0.21253611526717442, 0.2229622353738242, 0.2248491792084858, 0.19715611861158922, 0.2200741585591668, 0.18403350925061446, 0.2038209196229367, 0.18166340136903514, 0.18499399575414632, 0.2031168041774123, 0.17430691159235578, 0.19436968038972036, 0.18539446290598716, 0.21139903371787938, 0.1680644941584576, 0.18612667768955493, 0.12359855057085334, 0.13728858145467293, 0.774251081216058, 0.17645617116951362, 0.15215492124880237, 0.062009409073460975, 0.10891344063633279, 0.11537954704502318, 0.1692976303861058, 0.6644213405399886, 0.11335031105834636, 0.14794320962283292, 0.1570379187802129, 0.2139792685146379, 0.683432154910268, 0.6512879892488064, 0.16828666988618168, 0.47426638862100223, 0.19932278364479483, 0.1873456537371717, 0.17680718469382517, 0.18527281697943987, 0.18977740488617478, 0.19706178615707937, 0.18181334673734195, 0.17626328584161055, 0.18786321919935312, 0.06996339921157035, 0.10252168049545618, 0.08177496615530677, 0.07884991178185341, 0.08936654077301287, 0.0788251708728227, 0.0774008885312849, 0.06702965154659812, 0.0866576095423579]}, "mutation_prompt": null}
{"id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Refining PSO and SA search strategies by introducing a dynamic mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 72, "fitness": 0.23518023551494452, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "977fe53a-698d-45c4-a5d8-222bc66aa037", "metadata": {"aucs": [0.6874385655523725, 0.6927801710329259, 0.6762296920637241, 0.7166119905419954, 0.694627561329521, 0.7016963756304824, 0.6899642850727522, 0.6812513837222912, 0.6645936527897061, 0.14976110360976014, 0.10657717938829359, 9.999999999998899e-05, 0.1373465095141604, 9.999999999998899e-05, 9.999999999998899e-05, 0.15267865146705406, 0.0020994619287203475, 9.999999999998899e-05, 0.10851574995048208, 0.13611987600404596, 0.04945275540240113, 0.09750256661941747, 0.07609667016006494, 0.04974640089702009, 0.08037450319183792, 0.07796026242709775, 0.043721616479280745, 0.08741153339495489, 0.10287711826807722, 0.019580875572833056, 0.06034061620857101, 0.0808918402006722, 0.05490296473381118, 0.0777715406011108, 0.035746894473789315, 0.06963374971600755, 0.9824872281500887, 0.9818732138978133, 0.9703280058615056, 0.9716976532288005, 0.9819743092175427, 0.9807482166930428, 0.9684624887591645, 0.9823673013872843, 0.9817871806758922, 0.497759416006032, 0.49480222584378275, 0.5007946342338476, 0.5281122576231065, 0.5260798907671602, 0.5087742818825487, 0.5040281688900996, 0.5057511528622358, 0.5410462900846749, 0.20310166853821487, 0.17998220349614535, 0.31861123413279746, 0.24968040408918968, 0.19140823231150828, 0.2740329286141352, 0.2997347764378856, 0.27902009159452046, 0.1699980049506612, 0.20981088787357538, 0.23844765317332162, 0.18164477511643284, 0.11843120328378898, 0.2450019920932116, 0.21117351942052354, 0.27958899004750815, 0.23340131774480888, 0.20058689513566963, 0.1967431476982171, 0.23290912982770173, 0.1335768172833376, 0.22094492711549552, 0.2914003768003539, 0.13500207753573812, 0.2411508789548571, 0.23695912532215624, 0.19564700855939332, 0.05601292430408866, 9.999999999998899e-05, 9.999999999998899e-05, 0.08324224260233204, 0.004436704013666026, 0.025743899823444716, 0.006003075362131849, 0.004617559949901762, 0.04547510382513442, 0.04509275551358716, 0.040251855624716115, 0.1463133576610528, 0.09174896796159682, 0.015827957054327824, 0.021579219807115302, 0.16937275135222807, 0.03590561983301577, 0.07171015488807642, 0.10152953921066343, 0.04786126705536753, 0.14381012017316241, 0.0991525159964769, 0.10895826756792193, 0.12552085599330354, 0.10647139381156301, 0.10550206654376648, 0.050286960865835506, 0.04011549361058986, 0.07302602182863016, 0.12657243014190533, 0.0850336329937963, 0.08868351180598988, 0.15571637514663283, 0.16779452855745802, 0.07088982400961319, 0.024746191908533777, 0.5145420645904146, 0.5359469063397556, 0.5259725684039029, 0.5505984214548576, 0.4924614991702084, 0.5020097124937574, 0.5202403084832936, 0.5357560497611612, 0.5434313455398445, 0.06885742576834908, 0.08274877060184405, 0.06931092585325127, 0.06573818337712312, 0.080709556237333, 0.07978739245471644, 0.0767681509792777, 0.06948692943581503, 0.0501736258466291, 0.1696538771134377, 0.17256997592382228, 0.2024177358944662, 0.1333326034624126, 0.1994407226707643, 0.26804860837339206, 0.19505333024428884, 0.20486195733920898, 0.26445750343874264, 0.26840176473069766, 0.1468476262910473, 0.1055862250228089, 0.309411214156996, 0.17402772437223213, 0.1716478495320678, 0.15893881750038852, 0.2376802933279457, 0.10189821499408425, 0.11604327465004138, 0.05534375938661429, 0.1467859578878259, 0.2718922437086492, 0.2073606922309974, 0.1007497310418386, 0.2158607793461943, 0.12059906579930757, 0.06691829811932803, 0.234471528666658, 0.21132232803088713, 0.1901081779998407, 0.21762509720248369, 0.14838907531160495, 0.204171750184443, 0.18833110926715535, 0.17422036634551863, 0.2360986098327491, 0.19682559868289395, 0.17373436136183495, 0.17491921072742667, 0.1795354101974408, 0.1821966208468634, 0.1781114229235018, 0.21314109068724907, 0.1918782515639289, 0.18387975714102467, 0.12354390386067748, 0.137239519392239, 0.939532859213205, 0.17414146247232076, 0.1521202454717866, 0.06199671914973137, 0.10888656594266066, 0.126713529852009, 0.16904373110509774, 0.7782708387020054, 0.11325236082042689, 0.1473377594280928, 0.15707679997707547, 0.21321153549365668, 0.20558259868958761, 0.657343177459433, 0.16850736315959125, 0.10984061321520822, 0.24542994212409097, 0.2306993306415821, 0.1818386202820097, 0.20883147704267235, 0.20691602595952896, 0.22770533896307155, 0.22741792016430162, 0.23628932299316752, 0.22323663761203927, 0.08203484206323863, 0.07923101842687352, 0.06894321718311203, 0.08144824013437901, 0.049458744293175316, 0.06917030693302417, 0.07680588552426793, 0.044058214262985174, 0.06167130493642148]}, "mutation_prompt": null}
{"id": "aca9c8fe-740d-4039-9140-91ac424740b8", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Refining PSO and SA search strategies by introducing a dynamic mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.6874385655523725, 0.6927801710329259, 0.6762296920637241, 0.7166119905419954, 0.694627561329521, 0.7016963756304824, 0.6899642850727522, 0.6812513837222912, 0.6645936527897061, 0.14976110360976014, 0.10657717938829359, 9.999999999998899e-05, 0.1373465095141604, 9.999999999998899e-05, 9.999999999998899e-05, 0.15267865146705406, 0.0020994619287203475, 9.999999999998899e-05, 0.10851574995048208, 0.13611987600404596, 0.04945275540240113, 0.09750256661941747, 0.07609667016006494, 0.04974640089702009, 0.08037450319183792, 0.07796026242709775, 0.043721616479280745, 0.08741153339495489, 0.10287711826807722, 0.019580875572833056, 0.06034061620857101, 0.0808918402006722, 0.05490296473381118, 0.0777715406011108, 0.035746894473789315, 0.06963374971600755, 0.9824872281500887, 0.9818732138978133, 0.9703280058615056, 0.9716976532288005, 0.9819743092175427, 0.9807482166930428, 0.9684624887591645, 0.9823673013872843, 0.9817871806758922, 0.497759416006032, 0.49480222584378275, 0.5007946342338476, 0.5281122576231065, 0.5260798907671602, 0.5087742818825487, 0.5040281688900996, 0.5057511528622358, 0.5410462900846749, 0.20310166853821487, 0.17998220349614535, 0.31861123413279746, 0.24968040408918968, 0.19140823231150828, 0.2740329286141352, 0.2997347764378856, 0.27902009159452046, 0.1699980049506612, 0.20981088787357538, 0.23844765317332162, 0.18164477511643284, 0.11843120328378898, 0.2450019920932116, 0.21117351942052354, 0.27958899004750815, 0.23340131774480888, 0.20058689513566963, 0.1967431476982171, 0.23290912982770173, 0.1335768172833376, 0.22094492711549552, 0.2914003768003539, 0.13500207753573812, 0.2411508789548571, 0.23695912532215624, 0.19564700855939332, 0.05601292430408866, 9.999999999998899e-05, 9.999999999998899e-05, 0.08324224260233204, 0.004436704013666026, 0.025743899823444716, 0.006003075362131849, 0.004617559949901762, 0.04547510382513442, 0.04509275551358716, 0.040251855624716115, 0.1463133576610528, 0.09174896796159682, 0.015827957054327824, 0.021579219807115302, 0.16937275135222807, 0.03590561983301577, 0.07171015488807642, 0.10152953921066343, 0.04786126705536753, 0.14381012017316241, 0.0991525159964769, 0.10895826756792193, 0.12552085599330354, 0.10647139381156301, 0.10550206654376648, 0.050286960865835506, 0.04011549361058986, 0.07302602182863016, 0.12657243014190533, 0.0850336329937963, 0.08868351180598988, 0.15571637514663283, 0.16779452855745802, 0.07088982400961319, 0.024746191908533777, 0.5145420645904146, 0.5359469063397556, 0.5259725684039029, 0.5505984214548576, 0.4924614991702084, 0.5020097124937574, 0.5202403084832936, 0.5357560497611612, 0.5434313455398445, 0.06885742576834908, 0.08274877060184405, 0.06931092585325127, 0.06573818337712312, 0.080709556237333, 0.07978739245471644, 0.0767681509792777, 0.06948692943581503, 0.0501736258466291, 0.1696538771134377, 0.17256997592382228, 0.2024177358944662, 0.1333326034624126, 0.1994407226707643, 0.26804860837339206, 0.19505333024428884, 0.20486195733920898, 0.26445750343874264, 0.26840176473069766, 0.1468476262910473, 0.1055862250228089, 0.309411214156996, 0.17402772437223213, 0.1716478495320678, 0.15893881750038852, 0.2376802933279457, 0.10189821499408425, 0.11604327465004138, 0.05534375938661429, 0.1467859578878259, 0.2718922437086492, 0.2073606922309974, 0.1007497310418386, 0.2158607793461943, 0.12059906579930757, 0.06691829811932803, 0.234471528666658, 0.21132232803088713, 0.1901081779998407, 0.21762509720248369, 0.14838907531160495, 0.204171750184443, 0.18833110926715535, 0.17422036634551863, 0.2360986098327491, 0.19682559868289395, 0.17373436136183495, 0.17491921072742667, 0.1795354101974408, 0.1821966208468634, 0.1781114229235018, 0.21314109068724907, 0.1918782515639289, 0.18387975714102467, 0.12354390386067748, 0.137239519392239, 0.939532859213205, 0.17414146247232076, 0.1521202454717866, 0.06199671914973137, 0.10888656594266066, 0.126713529852009, 0.16904373110509774, 0.7782708387020054, 0.11325236082042689, 0.1473377594280928, 0.15707679997707547, 0.21321153549365668, 0.20558259868958761, 0.657343177459433, 0.16850736315959125, 0.10984061321520822, 0.24542994212409097, 0.2306993306415821, 0.1818386202820097, 0.20883147704267235, 0.20691602595952896, 0.22770533896307155, 0.22741792016430162, 0.23628932299316752, 0.22323663761203927, 0.08203484206323863, 0.07923101842687352, 0.06894321718311203, 0.08144824013437901, 0.049458744293175316, 0.06917030693302417, 0.07680588552426793, 0.044058214262985174, 0.06167130493642148]}, "mutation_prompt": null}
{"id": "98c13f6f-34b7-4627-949f-29f20fd16909", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Refining PSO and SA search strategies by introducing a dynamic mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.6874385655523725, 0.6927801710329259, 0.6762296920637241, 0.7166119905419954, 0.694627561329521, 0.7016963756304824, 0.6899642850727522, 0.6812513837222912, 0.6645936527897061, 0.14976110360976014, 0.10657717938829359, 9.999999999998899e-05, 0.1373465095141604, 9.999999999998899e-05, 9.999999999998899e-05, 0.15267865146705406, 0.0020994619287203475, 9.999999999998899e-05, 0.10851574995048208, 0.13611987600404596, 0.04945275540240113, 0.09750256661941747, 0.07609667016006494, 0.04974640089702009, 0.08037450319183792, 0.07796026242709775, 0.043721616479280745, 0.08741153339495489, 0.10287711826807722, 0.019580875572833056, 0.06034061620857101, 0.0808918402006722, 0.05490296473381118, 0.0777715406011108, 0.035746894473789315, 0.06963374971600755, 0.9824872281500887, 0.9818732138978133, 0.9703280058615056, 0.9716976532288005, 0.9819743092175427, 0.9807482166930428, 0.9684624887591645, 0.9823673013872843, 0.9817871806758922, 0.497759416006032, 0.49480222584378275, 0.5007946342338476, 0.5281122576231065, 0.5260798907671602, 0.5087742818825487, 0.5040281688900996, 0.5057511528622358, 0.5410462900846749, 0.20310166853821487, 0.17998220349614535, 0.31861123413279746, 0.24968040408918968, 0.19140823231150828, 0.2740329286141352, 0.2997347764378856, 0.27902009159452046, 0.1699980049506612, 0.20981088787357538, 0.23844765317332162, 0.18164477511643284, 0.11843120328378898, 0.2450019920932116, 0.21117351942052354, 0.27958899004750815, 0.23340131774480888, 0.20058689513566963, 0.1967431476982171, 0.23290912982770173, 0.1335768172833376, 0.22094492711549552, 0.2914003768003539, 0.13500207753573812, 0.2411508789548571, 0.23695912532215624, 0.19564700855939332, 0.05601292430408866, 9.999999999998899e-05, 9.999999999998899e-05, 0.08324224260233204, 0.004436704013666026, 0.025743899823444716, 0.006003075362131849, 0.004617559949901762, 0.04547510382513442, 0.04509275551358716, 0.040251855624716115, 0.1463133576610528, 0.09174896796159682, 0.015827957054327824, 0.021579219807115302, 0.16937275135222807, 0.03590561983301577, 0.07171015488807642, 0.10152953921066343, 0.04786126705536753, 0.14381012017316241, 0.0991525159964769, 0.10895826756792193, 0.12552085599330354, 0.10647139381156301, 0.10550206654376648, 0.050286960865835506, 0.04011549361058986, 0.07302602182863016, 0.12657243014190533, 0.0850336329937963, 0.08868351180598988, 0.15571637514663283, 0.16779452855745802, 0.07088982400961319, 0.024746191908533777, 0.5145420645904146, 0.5359469063397556, 0.5259725684039029, 0.5505984214548576, 0.4924614991702084, 0.5020097124937574, 0.5202403084832936, 0.5357560497611612, 0.5434313455398445, 0.06885742576834908, 0.08274877060184405, 0.06931092585325127, 0.06573818337712312, 0.080709556237333, 0.07978739245471644, 0.0767681509792777, 0.06948692943581503, 0.0501736258466291, 0.1696538771134377, 0.17256997592382228, 0.2024177358944662, 0.1333326034624126, 0.1994407226707643, 0.26804860837339206, 0.19505333024428884, 0.20486195733920898, 0.26445750343874264, 0.26840176473069766, 0.1468476262910473, 0.1055862250228089, 0.309411214156996, 0.17402772437223213, 0.1716478495320678, 0.15893881750038852, 0.2376802933279457, 0.10189821499408425, 0.11604327465004138, 0.05534375938661429, 0.1467859578878259, 0.2718922437086492, 0.2073606922309974, 0.1007497310418386, 0.2158607793461943, 0.12059906579930757, 0.06691829811932803, 0.234471528666658, 0.21132232803088713, 0.1901081779998407, 0.21762509720248369, 0.14838907531160495, 0.204171750184443, 0.18833110926715535, 0.17422036634551863, 0.2360986098327491, 0.19682559868289395, 0.17373436136183495, 0.17491921072742667, 0.1795354101974408, 0.1821966208468634, 0.1781114229235018, 0.21314109068724907, 0.1918782515639289, 0.18387975714102467, 0.12354390386067748, 0.137239519392239, 0.939532859213205, 0.17414146247232076, 0.1521202454717866, 0.06199671914973137, 0.10888656594266066, 0.126713529852009, 0.16904373110509774, 0.7782708387020054, 0.11325236082042689, 0.1473377594280928, 0.15707679997707547, 0.21321153549365668, 0.20558259868958761, 0.657343177459433, 0.16850736315959125, 0.10984061321520822, 0.24542994212409097, 0.2306993306415821, 0.1818386202820097, 0.20883147704267235, 0.20691602595952896, 0.22770533896307155, 0.22741792016430162, 0.23628932299316752, 0.22323663761203927, 0.08203484206323863, 0.07923101842687352, 0.06894321718311203, 0.08144824013437901, 0.049458744293175316, 0.06917030693302417, 0.07680588552426793, 0.044058214262985174, 0.06167130493642148]}, "mutation_prompt": null}
{"id": "6d489108-0db5-440e-b8d0-e20c480a1013", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Refining PSO and SA search strategies by introducing a dynamic mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.6874385655523725, 0.6927801710329259, 0.6762296920637241, 0.7166119905419954, 0.694627561329521, 0.7016963756304824, 0.6899642850727522, 0.6812513837222912, 0.6645936527897061, 0.14976110360976014, 0.10657717938829359, 9.999999999998899e-05, 0.1373465095141604, 9.999999999998899e-05, 9.999999999998899e-05, 0.15267865146705406, 0.0020994619287203475, 9.999999999998899e-05, 0.10851574995048208, 0.13611987600404596, 0.04945275540240113, 0.09750256661941747, 0.07609667016006494, 0.04974640089702009, 0.08037450319183792, 0.07796026242709775, 0.043721616479280745, 0.08741153339495489, 0.10287711826807722, 0.019580875572833056, 0.06034061620857101, 0.0808918402006722, 0.05490296473381118, 0.0777715406011108, 0.035746894473789315, 0.06963374971600755, 0.9824872281500887, 0.9818732138978133, 0.9703280058615056, 0.9716976532288005, 0.9819743092175427, 0.9807482166930428, 0.9684624887591645, 0.9823673013872843, 0.9817871806758922, 0.497759416006032, 0.49480222584378275, 0.5007946342338476, 0.5281122576231065, 0.5260798907671602, 0.5087742818825487, 0.5040281688900996, 0.5057511528622358, 0.5410462900846749, 0.20310166853821487, 0.17998220349614535, 0.31861123413279746, 0.24968040408918968, 0.19140823231150828, 0.2740329286141352, 0.2997347764378856, 0.27902009159452046, 0.1699980049506612, 0.20981088787357538, 0.23844765317332162, 0.18164477511643284, 0.11843120328378898, 0.2450019920932116, 0.21117351942052354, 0.27958899004750815, 0.23340131774480888, 0.20058689513566963, 0.1967431476982171, 0.23290912982770173, 0.1335768172833376, 0.22094492711549552, 0.2914003768003539, 0.13500207753573812, 0.2411508789548571, 0.23695912532215624, 0.19564700855939332, 0.05601292430408866, 9.999999999998899e-05, 9.999999999998899e-05, 0.08324224260233204, 0.004436704013666026, 0.025743899823444716, 0.006003075362131849, 0.004617559949901762, 0.04547510382513442, 0.04509275551358716, 0.040251855624716115, 0.1463133576610528, 0.09174896796159682, 0.015827957054327824, 0.021579219807115302, 0.16937275135222807, 0.03590561983301577, 0.07171015488807642, 0.10152953921066343, 0.04786126705536753, 0.14381012017316241, 0.0991525159964769, 0.10895826756792193, 0.12552085599330354, 0.10647139381156301, 0.10550206654376648, 0.050286960865835506, 0.04011549361058986, 0.07302602182863016, 0.12657243014190533, 0.0850336329937963, 0.08868351180598988, 0.15571637514663283, 0.16779452855745802, 0.07088982400961319, 0.024746191908533777, 0.5145420645904146, 0.5359469063397556, 0.5259725684039029, 0.5505984214548576, 0.4924614991702084, 0.5020097124937574, 0.5202403084832936, 0.5357560497611612, 0.5434313455398445, 0.06885742576834908, 0.08274877060184405, 0.06931092585325127, 0.06573818337712312, 0.080709556237333, 0.07978739245471644, 0.0767681509792777, 0.06948692943581503, 0.0501736258466291, 0.1696538771134377, 0.17256997592382228, 0.2024177358944662, 0.1333326034624126, 0.1994407226707643, 0.26804860837339206, 0.19505333024428884, 0.20486195733920898, 0.26445750343874264, 0.26840176473069766, 0.1468476262910473, 0.1055862250228089, 0.309411214156996, 0.17402772437223213, 0.1716478495320678, 0.15893881750038852, 0.2376802933279457, 0.10189821499408425, 0.11604327465004138, 0.05534375938661429, 0.1467859578878259, 0.2718922437086492, 0.2073606922309974, 0.1007497310418386, 0.2158607793461943, 0.12059906579930757, 0.06691829811932803, 0.234471528666658, 0.21132232803088713, 0.1901081779998407, 0.21762509720248369, 0.14838907531160495, 0.204171750184443, 0.18833110926715535, 0.17422036634551863, 0.2360986098327491, 0.19682559868289395, 0.17373436136183495, 0.17491921072742667, 0.1795354101974408, 0.1821966208468634, 0.1781114229235018, 0.21314109068724907, 0.1918782515639289, 0.18387975714102467, 0.12354390386067748, 0.137239519392239, 0.939532859213205, 0.17414146247232076, 0.1521202454717866, 0.06199671914973137, 0.10888656594266066, 0.126713529852009, 0.16904373110509774, 0.7782708387020054, 0.11325236082042689, 0.1473377594280928, 0.15707679997707547, 0.21321153549365668, 0.20558259868958761, 0.657343177459433, 0.16850736315959125, 0.10984061321520822, 0.24542994212409097, 0.2306993306415821, 0.1818386202820097, 0.20883147704267235, 0.20691602595952896, 0.22770533896307155, 0.22741792016430162, 0.23628932299316752, 0.22323663761203927, 0.08203484206323863, 0.07923101842687352, 0.06894321718311203, 0.08144824013437901, 0.049458744293175316, 0.06917030693302417, 0.07680588552426793, 0.044058214262985174, 0.06167130493642148]}, "mutation_prompt": null}
{"id": "5d9132f7-7dbd-4e95-be08-3d2473e50ee6", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Refining PSO and SA search strategies by introducing a dynamic mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.6874385655523725, 0.6927801710329259, 0.6762296920637241, 0.7166119905419954, 0.694627561329521, 0.7016963756304824, 0.6899642850727522, 0.6812513837222912, 0.6645936527897061, 0.14976110360976014, 0.10657717938829359, 9.999999999998899e-05, 0.1373465095141604, 9.999999999998899e-05, 9.999999999998899e-05, 0.15267865146705406, 0.0020994619287203475, 9.999999999998899e-05, 0.10851574995048208, 0.13611987600404596, 0.04945275540240113, 0.09750256661941747, 0.07609667016006494, 0.04974640089702009, 0.08037450319183792, 0.07796026242709775, 0.043721616479280745, 0.08741153339495489, 0.10287711826807722, 0.019580875572833056, 0.06034061620857101, 0.0808918402006722, 0.05490296473381118, 0.0777715406011108, 0.035746894473789315, 0.06963374971600755, 0.9824872281500887, 0.9818732138978133, 0.9703280058615056, 0.9716976532288005, 0.9819743092175427, 0.9807482166930428, 0.9684624887591645, 0.9823673013872843, 0.9817871806758922, 0.497759416006032, 0.49480222584378275, 0.5007946342338476, 0.5281122576231065, 0.5260798907671602, 0.5087742818825487, 0.5040281688900996, 0.5057511528622358, 0.5410462900846749, 0.20310166853821487, 0.17998220349614535, 0.31861123413279746, 0.24968040408918968, 0.19140823231150828, 0.2740329286141352, 0.2997347764378856, 0.27902009159452046, 0.1699980049506612, 0.20981088787357538, 0.23844765317332162, 0.18164477511643284, 0.11843120328378898, 0.2450019920932116, 0.21117351942052354, 0.27958899004750815, 0.23340131774480888, 0.20058689513566963, 0.1967431476982171, 0.23290912982770173, 0.1335768172833376, 0.22094492711549552, 0.2914003768003539, 0.13500207753573812, 0.2411508789548571, 0.23695912532215624, 0.19564700855939332, 0.05601292430408866, 9.999999999998899e-05, 9.999999999998899e-05, 0.08324224260233204, 0.004436704013666026, 0.025743899823444716, 0.006003075362131849, 0.004617559949901762, 0.04547510382513442, 0.04509275551358716, 0.040251855624716115, 0.1463133576610528, 0.09174896796159682, 0.015827957054327824, 0.021579219807115302, 0.16937275135222807, 0.03590561983301577, 0.07171015488807642, 0.10152953921066343, 0.04786126705536753, 0.14381012017316241, 0.0991525159964769, 0.10895826756792193, 0.12552085599330354, 0.10647139381156301, 0.10550206654376648, 0.050286960865835506, 0.04011549361058986, 0.07302602182863016, 0.12657243014190533, 0.0850336329937963, 0.08868351180598988, 0.15571637514663283, 0.16779452855745802, 0.07088982400961319, 0.024746191908533777, 0.5145420645904146, 0.5359469063397556, 0.5259725684039029, 0.5505984214548576, 0.4924614991702084, 0.5020097124937574, 0.5202403084832936, 0.5357560497611612, 0.5434313455398445, 0.06885742576834908, 0.08274877060184405, 0.06931092585325127, 0.06573818337712312, 0.080709556237333, 0.07978739245471644, 0.0767681509792777, 0.06948692943581503, 0.0501736258466291, 0.1696538771134377, 0.17256997592382228, 0.2024177358944662, 0.1333326034624126, 0.1994407226707643, 0.26804860837339206, 0.19505333024428884, 0.20486195733920898, 0.26445750343874264, 0.26840176473069766, 0.1468476262910473, 0.1055862250228089, 0.309411214156996, 0.17402772437223213, 0.1716478495320678, 0.15893881750038852, 0.2376802933279457, 0.10189821499408425, 0.11604327465004138, 0.05534375938661429, 0.1467859578878259, 0.2718922437086492, 0.2073606922309974, 0.1007497310418386, 0.2158607793461943, 0.12059906579930757, 0.06691829811932803, 0.234471528666658, 0.21132232803088713, 0.1901081779998407, 0.21762509720248369, 0.14838907531160495, 0.204171750184443, 0.18833110926715535, 0.17422036634551863, 0.2360986098327491, 0.19682559868289395, 0.17373436136183495, 0.17491921072742667, 0.1795354101974408, 0.1821966208468634, 0.1781114229235018, 0.21314109068724907, 0.1918782515639289, 0.18387975714102467, 0.12354390386067748, 0.137239519392239, 0.939532859213205, 0.17414146247232076, 0.1521202454717866, 0.06199671914973137, 0.10888656594266066, 0.126713529852009, 0.16904373110509774, 0.7782708387020054, 0.11325236082042689, 0.1473377594280928, 0.15707679997707547, 0.21321153549365668, 0.20558259868958761, 0.657343177459433, 0.16850736315959125, 0.10984061321520822, 0.24542994212409097, 0.2306993306415821, 0.1818386202820097, 0.20883147704267235, 0.20691602595952896, 0.22770533896307155, 0.22741792016430162, 0.23628932299316752, 0.22323663761203927, 0.08203484206323863, 0.07923101842687352, 0.06894321718311203, 0.08144824013437901, 0.049458744293175316, 0.06917030693302417, 0.07680588552426793, 0.044058214262985174, 0.06167130493642148]}, "mutation_prompt": null}
{"id": "a7b84318-3e31-43dd-86fd-201047a123a4", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Refining PSO and SA search strategies by introducing a dynamic mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.6874385655523725, 0.6927801710329259, 0.6762296920637241, 0.7166119905419954, 0.694627561329521, 0.7016963756304824, 0.6899642850727522, 0.6812513837222912, 0.6645936527897061, 0.14976110360976014, 0.10657717938829359, 9.999999999998899e-05, 0.1373465095141604, 9.999999999998899e-05, 9.999999999998899e-05, 0.15267865146705406, 0.0020994619287203475, 9.999999999998899e-05, 0.10851574995048208, 0.13611987600404596, 0.04945275540240113, 0.09750256661941747, 0.07609667016006494, 0.04974640089702009, 0.08037450319183792, 0.07796026242709775, 0.043721616479280745, 0.08741153339495489, 0.10287711826807722, 0.019580875572833056, 0.06034061620857101, 0.0808918402006722, 0.05490296473381118, 0.0777715406011108, 0.035746894473789315, 0.06963374971600755, 0.9824872281500887, 0.9818732138978133, 0.9703280058615056, 0.9716976532288005, 0.9819743092175427, 0.9807482166930428, 0.9684624887591645, 0.9823673013872843, 0.9817871806758922, 0.497759416006032, 0.49480222584378275, 0.5007946342338476, 0.5281122576231065, 0.5260798907671602, 0.5087742818825487, 0.5040281688900996, 0.5057511528622358, 0.5410462900846749, 0.20310166853821487, 0.17998220349614535, 0.31861123413279746, 0.24968040408918968, 0.19140823231150828, 0.2740329286141352, 0.2997347764378856, 0.27902009159452046, 0.1699980049506612, 0.20981088787357538, 0.23844765317332162, 0.18164477511643284, 0.11843120328378898, 0.2450019920932116, 0.21117351942052354, 0.27958899004750815, 0.23340131774480888, 0.20058689513566963, 0.1967431476982171, 0.23290912982770173, 0.1335768172833376, 0.22094492711549552, 0.2914003768003539, 0.13500207753573812, 0.2411508789548571, 0.23695912532215624, 0.19564700855939332, 0.05601292430408866, 9.999999999998899e-05, 9.999999999998899e-05, 0.08324224260233204, 0.004436704013666026, 0.025743899823444716, 0.006003075362131849, 0.004617559949901762, 0.04547510382513442, 0.04509275551358716, 0.040251855624716115, 0.1463133576610528, 0.09174896796159682, 0.015827957054327824, 0.021579219807115302, 0.16937275135222807, 0.03590561983301577, 0.07171015488807642, 0.10152953921066343, 0.04786126705536753, 0.14381012017316241, 0.0991525159964769, 0.10895826756792193, 0.12552085599330354, 0.10647139381156301, 0.10550206654376648, 0.050286960865835506, 0.04011549361058986, 0.07302602182863016, 0.12657243014190533, 0.0850336329937963, 0.08868351180598988, 0.15571637514663283, 0.16779452855745802, 0.07088982400961319, 0.024746191908533777, 0.5145420645904146, 0.5359469063397556, 0.5259725684039029, 0.5505984214548576, 0.4924614991702084, 0.5020097124937574, 0.5202403084832936, 0.5357560497611612, 0.5434313455398445, 0.06885742576834908, 0.08274877060184405, 0.06931092585325127, 0.06573818337712312, 0.080709556237333, 0.07978739245471644, 0.0767681509792777, 0.06948692943581503, 0.0501736258466291, 0.1696538771134377, 0.17256997592382228, 0.2024177358944662, 0.1333326034624126, 0.1994407226707643, 0.26804860837339206, 0.19505333024428884, 0.20486195733920898, 0.26445750343874264, 0.26840176473069766, 0.1468476262910473, 0.1055862250228089, 0.309411214156996, 0.17402772437223213, 0.1716478495320678, 0.15893881750038852, 0.2376802933279457, 0.10189821499408425, 0.11604327465004138, 0.05534375938661429, 0.1467859578878259, 0.2718922437086492, 0.2073606922309974, 0.1007497310418386, 0.2158607793461943, 0.12059906579930757, 0.06691829811932803, 0.234471528666658, 0.21132232803088713, 0.1901081779998407, 0.21762509720248369, 0.14838907531160495, 0.204171750184443, 0.18833110926715535, 0.17422036634551863, 0.2360986098327491, 0.19682559868289395, 0.17373436136183495, 0.17491921072742667, 0.1795354101974408, 0.1821966208468634, 0.1781114229235018, 0.21314109068724907, 0.1918782515639289, 0.18387975714102467, 0.12354390386067748, 0.137239519392239, 0.939532859213205, 0.17414146247232076, 0.1521202454717866, 0.06199671914973137, 0.10888656594266066, 0.126713529852009, 0.16904373110509774, 0.7782708387020054, 0.11325236082042689, 0.1473377594280928, 0.15707679997707547, 0.21321153549365668, 0.20558259868958761, 0.657343177459433, 0.16850736315959125, 0.10984061321520822, 0.24542994212409097, 0.2306993306415821, 0.1818386202820097, 0.20883147704267235, 0.20691602595952896, 0.22770533896307155, 0.22741792016430162, 0.23628932299316752, 0.22323663761203927, 0.08203484206323863, 0.07923101842687352, 0.06894321718311203, 0.08144824013437901, 0.049458744293175316, 0.06917030693302417, 0.07680588552426793, 0.044058214262985174, 0.06167130493642148]}, "mutation_prompt": null}
{"id": "5fd6870f-326b-4a1f-aeaa-f439841f9dbf", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Refining PSO and SA search strategies by introducing a dynamic mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.6874385655523725, 0.6927801710329259, 0.6762296920637241, 0.7166119905419954, 0.694627561329521, 0.7016963756304824, 0.6899642850727522, 0.6812513837222912, 0.6645936527897061, 0.14976110360976014, 0.10657717938829359, 9.999999999998899e-05, 0.1373465095141604, 9.999999999998899e-05, 9.999999999998899e-05, 0.15267865146705406, 0.0020994619287203475, 9.999999999998899e-05, 0.10851574995048208, 0.13611987600404596, 0.04945275540240113, 0.09750256661941747, 0.07609667016006494, 0.04974640089702009, 0.08037450319183792, 0.07796026242709775, 0.043721616479280745, 0.08741153339495489, 0.10287711826807722, 0.019580875572833056, 0.06034061620857101, 0.0808918402006722, 0.05490296473381118, 0.0777715406011108, 0.035746894473789315, 0.06963374971600755, 0.9824872281500887, 0.9818732138978133, 0.9703280058615056, 0.9716976532288005, 0.9819743092175427, 0.9807482166930428, 0.9684624887591645, 0.9823673013872843, 0.9817871806758922, 0.497759416006032, 0.49480222584378275, 0.5007946342338476, 0.5281122576231065, 0.5260798907671602, 0.5087742818825487, 0.5040281688900996, 0.5057511528622358, 0.5410462900846749, 0.20310166853821487, 0.17998220349614535, 0.31861123413279746, 0.24968040408918968, 0.19140823231150828, 0.2740329286141352, 0.2997347764378856, 0.27902009159452046, 0.1699980049506612, 0.20981088787357538, 0.23844765317332162, 0.18164477511643284, 0.11843120328378898, 0.2450019920932116, 0.21117351942052354, 0.27958899004750815, 0.23340131774480888, 0.20058689513566963, 0.1967431476982171, 0.23290912982770173, 0.1335768172833376, 0.22094492711549552, 0.2914003768003539, 0.13500207753573812, 0.2411508789548571, 0.23695912532215624, 0.19564700855939332, 0.05601292430408866, 9.999999999998899e-05, 9.999999999998899e-05, 0.08324224260233204, 0.004436704013666026, 0.025743899823444716, 0.006003075362131849, 0.004617559949901762, 0.04547510382513442, 0.04509275551358716, 0.040251855624716115, 0.1463133576610528, 0.09174896796159682, 0.015827957054327824, 0.021579219807115302, 0.16937275135222807, 0.03590561983301577, 0.07171015488807642, 0.10152953921066343, 0.04786126705536753, 0.14381012017316241, 0.0991525159964769, 0.10895826756792193, 0.12552085599330354, 0.10647139381156301, 0.10550206654376648, 0.050286960865835506, 0.04011549361058986, 0.07302602182863016, 0.12657243014190533, 0.0850336329937963, 0.08868351180598988, 0.15571637514663283, 0.16779452855745802, 0.07088982400961319, 0.024746191908533777, 0.5145420645904146, 0.5359469063397556, 0.5259725684039029, 0.5505984214548576, 0.4924614991702084, 0.5020097124937574, 0.5202403084832936, 0.5357560497611612, 0.5434313455398445, 0.06885742576834908, 0.08274877060184405, 0.06931092585325127, 0.06573818337712312, 0.080709556237333, 0.07978739245471644, 0.0767681509792777, 0.06948692943581503, 0.0501736258466291, 0.1696538771134377, 0.17256997592382228, 0.2024177358944662, 0.1333326034624126, 0.1994407226707643, 0.26804860837339206, 0.19505333024428884, 0.20486195733920898, 0.26445750343874264, 0.26840176473069766, 0.1468476262910473, 0.1055862250228089, 0.309411214156996, 0.17402772437223213, 0.1716478495320678, 0.15893881750038852, 0.2376802933279457, 0.10189821499408425, 0.11604327465004138, 0.05534375938661429, 0.1467859578878259, 0.2718922437086492, 0.2073606922309974, 0.1007497310418386, 0.2158607793461943, 0.12059906579930757, 0.06691829811932803, 0.234471528666658, 0.21132232803088713, 0.1901081779998407, 0.21762509720248369, 0.14838907531160495, 0.204171750184443, 0.18833110926715535, 0.17422036634551863, 0.2360986098327491, 0.19682559868289395, 0.17373436136183495, 0.17491921072742667, 0.1795354101974408, 0.1821966208468634, 0.1781114229235018, 0.21314109068724907, 0.1918782515639289, 0.18387975714102467, 0.12354390386067748, 0.137239519392239, 0.939532859213205, 0.17414146247232076, 0.1521202454717866, 0.06199671914973137, 0.10888656594266066, 0.126713529852009, 0.16904373110509774, 0.7782708387020054, 0.11325236082042689, 0.1473377594280928, 0.15707679997707547, 0.21321153549365668, 0.20558259868958761, 0.657343177459433, 0.16850736315959125, 0.10984061321520822, 0.24542994212409097, 0.2306993306415821, 0.1818386202820097, 0.20883147704267235, 0.20691602595952896, 0.22770533896307155, 0.22741792016430162, 0.23628932299316752, 0.22323663761203927, 0.08203484206323863, 0.07923101842687352, 0.06894321718311203, 0.08144824013437901, 0.049458744293175316, 0.06917030693302417, 0.07680588552426793, 0.044058214262985174, 0.06167130493642148]}, "mutation_prompt": null}
{"id": "5799c795-8ff4-45fd-8071-4cee728c0808", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Refining PSO and SA search strategies by introducing a dynamic mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.6874385655523725, 0.6927801710329259, 0.6762296920637241, 0.7166119905419954, 0.694627561329521, 0.7016963756304824, 0.6899642850727522, 0.6812513837222912, 0.6645936527897061, 0.14976110360976014, 0.10657717938829359, 9.999999999998899e-05, 0.1373465095141604, 9.999999999998899e-05, 9.999999999998899e-05, 0.15267865146705406, 0.0020994619287203475, 9.999999999998899e-05, 0.10851574995048208, 0.13611987600404596, 0.04945275540240113, 0.09750256661941747, 0.07609667016006494, 0.04974640089702009, 0.08037450319183792, 0.07796026242709775, 0.043721616479280745, 0.08741153339495489, 0.10287711826807722, 0.019580875572833056, 0.06034061620857101, 0.0808918402006722, 0.05490296473381118, 0.0777715406011108, 0.035746894473789315, 0.06963374971600755, 0.9824872281500887, 0.9818732138978133, 0.9703280058615056, 0.9716976532288005, 0.9819743092175427, 0.9807482166930428, 0.9684624887591645, 0.9823673013872843, 0.9817871806758922, 0.497759416006032, 0.49480222584378275, 0.5007946342338476, 0.5281122576231065, 0.5260798907671602, 0.5087742818825487, 0.5040281688900996, 0.5057511528622358, 0.5410462900846749, 0.20310166853821487, 0.17998220349614535, 0.31861123413279746, 0.24968040408918968, 0.19140823231150828, 0.2740329286141352, 0.2997347764378856, 0.27902009159452046, 0.1699980049506612, 0.20981088787357538, 0.23844765317332162, 0.18164477511643284, 0.11843120328378898, 0.2450019920932116, 0.21117351942052354, 0.27958899004750815, 0.23340131774480888, 0.20058689513566963, 0.1967431476982171, 0.23290912982770173, 0.1335768172833376, 0.22094492711549552, 0.2914003768003539, 0.13500207753573812, 0.2411508789548571, 0.23695912532215624, 0.19564700855939332, 0.05601292430408866, 9.999999999998899e-05, 9.999999999998899e-05, 0.08324224260233204, 0.004436704013666026, 0.025743899823444716, 0.006003075362131849, 0.004617559949901762, 0.04547510382513442, 0.04509275551358716, 0.040251855624716115, 0.1463133576610528, 0.09174896796159682, 0.015827957054327824, 0.021579219807115302, 0.16937275135222807, 0.03590561983301577, 0.07171015488807642, 0.10152953921066343, 0.04786126705536753, 0.14381012017316241, 0.0991525159964769, 0.10895826756792193, 0.12552085599330354, 0.10647139381156301, 0.10550206654376648, 0.050286960865835506, 0.04011549361058986, 0.07302602182863016, 0.12657243014190533, 0.0850336329937963, 0.08868351180598988, 0.15571637514663283, 0.16779452855745802, 0.07088982400961319, 0.024746191908533777, 0.5145420645904146, 0.5359469063397556, 0.5259725684039029, 0.5505984214548576, 0.4924614991702084, 0.5020097124937574, 0.5202403084832936, 0.5357560497611612, 0.5434313455398445, 0.06885742576834908, 0.08274877060184405, 0.06931092585325127, 0.06573818337712312, 0.080709556237333, 0.07978739245471644, 0.0767681509792777, 0.06948692943581503, 0.0501736258466291, 0.1696538771134377, 0.17256997592382228, 0.2024177358944662, 0.1333326034624126, 0.1994407226707643, 0.26804860837339206, 0.19505333024428884, 0.20486195733920898, 0.26445750343874264, 0.26840176473069766, 0.1468476262910473, 0.1055862250228089, 0.309411214156996, 0.17402772437223213, 0.1716478495320678, 0.15893881750038852, 0.2376802933279457, 0.10189821499408425, 0.11604327465004138, 0.05534375938661429, 0.1467859578878259, 0.2718922437086492, 0.2073606922309974, 0.1007497310418386, 0.2158607793461943, 0.12059906579930757, 0.06691829811932803, 0.234471528666658, 0.21132232803088713, 0.1901081779998407, 0.21762509720248369, 0.14838907531160495, 0.204171750184443, 0.18833110926715535, 0.17422036634551863, 0.2360986098327491, 0.19682559868289395, 0.17373436136183495, 0.17491921072742667, 0.1795354101974408, 0.1821966208468634, 0.1781114229235018, 0.21314109068724907, 0.1918782515639289, 0.18387975714102467, 0.12354390386067748, 0.137239519392239, 0.939532859213205, 0.17414146247232076, 0.1521202454717866, 0.06199671914973137, 0.10888656594266066, 0.126713529852009, 0.16904373110509774, 0.7782708387020054, 0.11325236082042689, 0.1473377594280928, 0.15707679997707547, 0.21321153549365668, 0.20558259868958761, 0.657343177459433, 0.16850736315959125, 0.10984061321520822, 0.24542994212409097, 0.2306993306415821, 0.1818386202820097, 0.20883147704267235, 0.20691602595952896, 0.22770533896307155, 0.22741792016430162, 0.23628932299316752, 0.22323663761203927, 0.08203484206323863, 0.07923101842687352, 0.06894321718311203, 0.08144824013437901, 0.049458744293175316, 0.06917030693302417, 0.07680588552426793, 0.044058214262985174, 0.06167130493642148]}, "mutation_prompt": null}
{"id": "5b10fabd-5e7e-4232-97de-23538757c193", "solution": "class EnhancedHybridPSOSAImproved(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        def opposition_based_search(solution):\n            opposite_solution = -solution\n            return solution if func(solution) < func(opposite_solution) else opposite_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            selected_search = pso_search if np.random.rand() < 0.4 else (sa_search if np.random.rand() < 0.8 else opposition_based_search)\n            new_solution = selected_search(best_solution, inertia_weight)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSAImproved", "description": "Improving exploration by incorporating opposition-based learning to enhance solution diversity and convergence speed.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('sa_search() takes 1 positional argument but 2 were given').", "error": "TypeError('sa_search() takes 1 positional argument but 2 were given')", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {}, "mutation_prompt": null}
{"id": "0f0069b0-91f0-4577-90da-452a0fb1b225", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Refining PSO and SA search strategies by introducing a dynamic mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.6874385655523725, 0.6927801710329259, 0.6762296920637241, 0.7166119905419954, 0.694627561329521, 0.7016963756304824, 0.6899642850727522, 0.6812513837222912, 0.6645936527897061, 0.14976110360976014, 0.10657717938829359, 9.999999999998899e-05, 0.1373465095141604, 9.999999999998899e-05, 9.999999999998899e-05, 0.15267865146705406, 0.0020994619287203475, 9.999999999998899e-05, 0.10851574995048208, 0.13611987600404596, 0.04945275540240113, 0.09750256661941747, 0.07609667016006494, 0.04974640089702009, 0.08037450319183792, 0.07796026242709775, 0.043721616479280745, 0.08741153339495489, 0.10287711826807722, 0.019580875572833056, 0.06034061620857101, 0.0808918402006722, 0.05490296473381118, 0.0777715406011108, 0.035746894473789315, 0.06963374971600755, 0.9824872281500887, 0.9818732138978133, 0.9703280058615056, 0.9716976532288005, 0.9819743092175427, 0.9807482166930428, 0.9684624887591645, 0.9823673013872843, 0.9817871806758922, 0.497759416006032, 0.49480222584378275, 0.5007946342338476, 0.5281122576231065, 0.5260798907671602, 0.5087742818825487, 0.5040281688900996, 0.5057511528622358, 0.5410462900846749, 0.20310166853821487, 0.17998220349614535, 0.31861123413279746, 0.24968040408918968, 0.19140823231150828, 0.2740329286141352, 0.2997347764378856, 0.27902009159452046, 0.1699980049506612, 0.20981088787357538, 0.23844765317332162, 0.18164477511643284, 0.11843120328378898, 0.2450019920932116, 0.21117351942052354, 0.27958899004750815, 0.23340131774480888, 0.20058689513566963, 0.1967431476982171, 0.23290912982770173, 0.1335768172833376, 0.22094492711549552, 0.2914003768003539, 0.13500207753573812, 0.2411508789548571, 0.23695912532215624, 0.19564700855939332, 0.05601292430408866, 9.999999999998899e-05, 9.999999999998899e-05, 0.08324224260233204, 0.004436704013666026, 0.025743899823444716, 0.006003075362131849, 0.004617559949901762, 0.04547510382513442, 0.04509275551358716, 0.040251855624716115, 0.1463133576610528, 0.09174896796159682, 0.015827957054327824, 0.021579219807115302, 0.16937275135222807, 0.03590561983301577, 0.07171015488807642, 0.10152953921066343, 0.04786126705536753, 0.14381012017316241, 0.0991525159964769, 0.10895826756792193, 0.12552085599330354, 0.10647139381156301, 0.10550206654376648, 0.050286960865835506, 0.04011549361058986, 0.07302602182863016, 0.12657243014190533, 0.0850336329937963, 0.08868351180598988, 0.15571637514663283, 0.16779452855745802, 0.07088982400961319, 0.024746191908533777, 0.5145420645904146, 0.5359469063397556, 0.5259725684039029, 0.5505984214548576, 0.4924614991702084, 0.5020097124937574, 0.5202403084832936, 0.5357560497611612, 0.5434313455398445, 0.06885742576834908, 0.08274877060184405, 0.06931092585325127, 0.06573818337712312, 0.080709556237333, 0.07978739245471644, 0.0767681509792777, 0.06948692943581503, 0.0501736258466291, 0.1696538771134377, 0.17256997592382228, 0.2024177358944662, 0.1333326034624126, 0.1994407226707643, 0.26804860837339206, 0.19505333024428884, 0.20486195733920898, 0.26445750343874264, 0.26840176473069766, 0.1468476262910473, 0.1055862250228089, 0.309411214156996, 0.17402772437223213, 0.1716478495320678, 0.15893881750038852, 0.2376802933279457, 0.10189821499408425, 0.11604327465004138, 0.05534375938661429, 0.1467859578878259, 0.2718922437086492, 0.2073606922309974, 0.1007497310418386, 0.2158607793461943, 0.12059906579930757, 0.06691829811932803, 0.234471528666658, 0.21132232803088713, 0.1901081779998407, 0.21762509720248369, 0.14838907531160495, 0.204171750184443, 0.18833110926715535, 0.17422036634551863, 0.2360986098327491, 0.19682559868289395, 0.17373436136183495, 0.17491921072742667, 0.1795354101974408, 0.1821966208468634, 0.1781114229235018, 0.21314109068724907, 0.1918782515639289, 0.18387975714102467, 0.12354390386067748, 0.137239519392239, 0.939532859213205, 0.17414146247232076, 0.1521202454717866, 0.06199671914973137, 0.10888656594266066, 0.126713529852009, 0.16904373110509774, 0.7782708387020054, 0.11325236082042689, 0.1473377594280928, 0.15707679997707547, 0.21321153549365668, 0.20558259868958761, 0.657343177459433, 0.16850736315959125, 0.10984061321520822, 0.24542994212409097, 0.2306993306415821, 0.1818386202820097, 0.20883147704267235, 0.20691602595952896, 0.22770533896307155, 0.22741792016430162, 0.23628932299316752, 0.22323663761203927, 0.08203484206323863, 0.07923101842687352, 0.06894321718311203, 0.08144824013437901, 0.049458744293175316, 0.06917030693302417, 0.07680588552426793, 0.044058214262985174, 0.06167130493642148]}, "mutation_prompt": null}
{"id": "163579cb-0d35-40c1-992d-a94093f888dc", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Refining PSO and SA search strategies by introducing a dynamic mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.6874385655523725, 0.6927801710329259, 0.6762296920637241, 0.7166119905419954, 0.694627561329521, 0.7016963756304824, 0.6899642850727522, 0.6812513837222912, 0.6645936527897061, 0.14976110360976014, 0.10657717938829359, 9.999999999998899e-05, 0.1373465095141604, 9.999999999998899e-05, 9.999999999998899e-05, 0.15267865146705406, 0.0020994619287203475, 9.999999999998899e-05, 0.10851574995048208, 0.13611987600404596, 0.04945275540240113, 0.09750256661941747, 0.07609667016006494, 0.04974640089702009, 0.08037450319183792, 0.07796026242709775, 0.043721616479280745, 0.08741153339495489, 0.10287711826807722, 0.019580875572833056, 0.06034061620857101, 0.0808918402006722, 0.05490296473381118, 0.0777715406011108, 0.035746894473789315, 0.06963374971600755, 0.9824872281500887, 0.9818732138978133, 0.9703280058615056, 0.9716976532288005, 0.9819743092175427, 0.9807482166930428, 0.9684624887591645, 0.9823673013872843, 0.9817871806758922, 0.497759416006032, 0.49480222584378275, 0.5007946342338476, 0.5281122576231065, 0.5260798907671602, 0.5087742818825487, 0.5040281688900996, 0.5057511528622358, 0.5410462900846749, 0.20310166853821487, 0.17998220349614535, 0.31861123413279746, 0.24968040408918968, 0.19140823231150828, 0.2740329286141352, 0.2997347764378856, 0.27902009159452046, 0.1699980049506612, 0.20981088787357538, 0.23844765317332162, 0.18164477511643284, 0.11843120328378898, 0.2450019920932116, 0.21117351942052354, 0.27958899004750815, 0.23340131774480888, 0.20058689513566963, 0.1967431476982171, 0.23290912982770173, 0.1335768172833376, 0.22094492711549552, 0.2914003768003539, 0.13500207753573812, 0.2411508789548571, 0.23695912532215624, 0.19564700855939332, 0.05601292430408866, 9.999999999998899e-05, 9.999999999998899e-05, 0.08324224260233204, 0.004436704013666026, 0.025743899823444716, 0.006003075362131849, 0.004617559949901762, 0.04547510382513442, 0.04509275551358716, 0.040251855624716115, 0.1463133576610528, 0.09174896796159682, 0.015827957054327824, 0.021579219807115302, 0.16937275135222807, 0.03590561983301577, 0.07171015488807642, 0.10152953921066343, 0.04786126705536753, 0.14381012017316241, 0.0991525159964769, 0.10895826756792193, 0.12552085599330354, 0.10647139381156301, 0.10550206654376648, 0.050286960865835506, 0.04011549361058986, 0.07302602182863016, 0.12657243014190533, 0.0850336329937963, 0.08868351180598988, 0.15571637514663283, 0.16779452855745802, 0.07088982400961319, 0.024746191908533777, 0.5145420645904146, 0.5359469063397556, 0.5259725684039029, 0.5505984214548576, 0.4924614991702084, 0.5020097124937574, 0.5202403084832936, 0.5357560497611612, 0.5434313455398445, 0.06885742576834908, 0.08274877060184405, 0.06931092585325127, 0.06573818337712312, 0.080709556237333, 0.07978739245471644, 0.0767681509792777, 0.06948692943581503, 0.0501736258466291, 0.1696538771134377, 0.17256997592382228, 0.2024177358944662, 0.1333326034624126, 0.1994407226707643, 0.26804860837339206, 0.19505333024428884, 0.20486195733920898, 0.26445750343874264, 0.26840176473069766, 0.1468476262910473, 0.1055862250228089, 0.309411214156996, 0.17402772437223213, 0.1716478495320678, 0.15893881750038852, 0.2376802933279457, 0.10189821499408425, 0.11604327465004138, 0.05534375938661429, 0.1467859578878259, 0.2718922437086492, 0.2073606922309974, 0.1007497310418386, 0.2158607793461943, 0.12059906579930757, 0.06691829811932803, 0.234471528666658, 0.21132232803088713, 0.1901081779998407, 0.21762509720248369, 0.14838907531160495, 0.204171750184443, 0.18833110926715535, 0.17422036634551863, 0.2360986098327491, 0.19682559868289395, 0.17373436136183495, 0.17491921072742667, 0.1795354101974408, 0.1821966208468634, 0.1781114229235018, 0.21314109068724907, 0.1918782515639289, 0.18387975714102467, 0.12354390386067748, 0.137239519392239, 0.939532859213205, 0.17414146247232076, 0.1521202454717866, 0.06199671914973137, 0.10888656594266066, 0.126713529852009, 0.16904373110509774, 0.7782708387020054, 0.11325236082042689, 0.1473377594280928, 0.15707679997707547, 0.21321153549365668, 0.20558259868958761, 0.657343177459433, 0.16850736315959125, 0.10984061321520822, 0.24542994212409097, 0.2306993306415821, 0.1818386202820097, 0.20883147704267235, 0.20691602595952896, 0.22770533896307155, 0.22741792016430162, 0.23628932299316752, 0.22323663761203927, 0.08203484206323863, 0.07923101842687352, 0.06894321718311203, 0.08144824013437901, 0.049458744293175316, 0.06917030693302417, 0.07680588552426793, 0.044058214262985174, 0.06167130493642148]}, "mutation_prompt": null}
{"id": "ce2ccb18-60e7-4276-a1a9-73c7fcee26f9", "solution": "import numpy as np\n\nclass EnhancedHybridPSOSAImproved(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            mutation_step = np.random.uniform(0.1, 0.5)  # Adaptive mutation step size\n            new_solution = best_solution + mutation_rate * mutation_step * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            mutation_step = np.random.uniform(0.1, 0.5)  # Adaptive mutation step size\n            new_solution = best_solution + mutation_rate * mutation_step * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedHybridPSOSAImproved", "description": "Improving the mutation strategy by incorporating adaptive mutation step sizes based on function landscape curvature.", "configspace": "", "generation": 83, "fitness": 0.2207818158653975, "feedback": "The algorithm EnhancedHybridPSOSAImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.25.", "error": "", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.8083748296020603, 0.7693842727756368, 0.7872902426641275, 0.8054555773722172, 0.7765910646831922, 0.8007032915388446, 0.7831935884427068, 0.8095407228035146, 0.7960818082224365, 0.013578587350982163, 0.023456587485185643, 9.999999999998899e-05, 0.297190804987412, 0.0742508428867793, 9.999999999998899e-05, 9.999999999998899e-05, 0.019068260119541103, 9.999999999998899e-05, 0.062215861949031726, 0.02708638532616603, 0.009325200913455567, 0.025481428125966654, 0.01696880506934062, 0.006035441759908666, 0.0666215963828044, 9.999999999998899e-05, 0.021178139401652696, 0.0739378294364631, 0.027193062926138212, 0.004588512046446169, 0.026244892359471805, 0.020138323213957254, 0.022227067173772208, 0.022845075940303827, 0.02082680050621133, 0.021621625659893118, 0.9407621557523612, 0.9225650918916004, 0.9254624263201213, 0.9379012037799478, 0.9504510882612818, 0.957242261945594, 0.9422184815912925, 0.9505493372653894, 0.9455468653783431, 0.5802398030065125, 0.5681704658372859, 0.5607105911653983, 0.5802117089691938, 0.5792593671045267, 0.5851388785285047, 0.5840146388988344, 0.5791665282010192, 0.5702354551418087, 0.13584627629970514, 0.10560812299232492, 0.10847181540899997, 0.27126115588874455, 0.16562707646663655, 0.1433643647564189, 0.27843359334574647, 0.1326512686841843, 0.16576807012643657, 0.3909081017026237, 0.22468171147635396, 0.2345068670649585, 0.2624438988365442, 0.22079809397908345, 0.21602158018882034, 0.2439936188913362, 0.2221662620680288, 0.22954831224787908, 0.23311907978237034, 0.2088831550808662, 0.13768393722490235, 0.22828708438681533, 0.3218359742285217, 0.24262566157318577, 0.2581302704542442, 0.33669477784098156, 0.21114920644268798, 0.09070751019298173, 9.999999999998899e-05, 0.00935171802463286, 0.012725797860955734, 0.062429491657680636, 0.0001043566837066745, 0.004013546736432949, 9.999999999998899e-05, 0.08366696746413527, 0.12462862167105904, 0.09049388020700844, 0.1611489672930977, 0.07978996448412712, 0.01379240435040574, 0.034452941828239436, 0.1586777705962319, 0.027461718041887573, 0.06910232891698564, 0.23803037073971678, 0.045369868470196306, 0.19813383677136986, 0.2373192392981126, 0.19429026903351898, 0.05079752872274457, 0.2121901309888672, 0.12346039384452234, 0.059013624715212654, 0.03034018886179235, 0.25436541491340026, 0.07899979171546345, 0.10223078088332971, 0.1667137988508215, 0.06412085643698406, 0.09437809973144085, 0.03577351985017485, 0.038080263552414007, 0.5513441035543866, 0.5268589382532777, 0.5403089311725827, 0.535916533557582, 0.5489909295932176, 0.5556199506278807, 0.5494657770458653, 0.5168038783152282, 0.5218514418218675, 0.015333843153591986, 0.004273802776369351, 0.03244034944734431, 0.005994969002544148, 0.028228313116984816, 0.015038159292835362, 0.004798922712861753, 0.03952730985666897, 0.02428889120578237, 0.1395419928692112, 0.21561977616895533, 0.2707989971339476, 0.0964859094704632, 0.18514831944336185, 0.13323149511614663, 0.09983643983379331, 0.174978764129602, 0.10910577315453707, 0.11710858545434288, 0.10199802783683731, 0.10425949212042274, 0.2359228976151082, 0.08410774316014391, 0.13737036062800312, 0.1754965604322848, 0.08346411289274125, 0.09746014617822651, 0.05814844248211615, 0.04690191651010178, 0.05092630763759387, 0.1274437430365961, 0.01992609007155155, 0.09387329396518618, 0.07366144800322472, 0.03801315649104586, 0.02861770628538396, 0.20965097799771093, 0.14623631337931253, 0.19102026297423902, 0.1917384395951709, 0.12908328728897922, 0.1555109268707049, 0.20017408075646403, 0.1447518769596834, 0.1414702238116501, 0.16365424195276446, 0.1880802254932883, 0.1690323211367828, 0.1801139225279228, 0.18414587199809818, 0.19852746974462, 0.17071575759924196, 0.17735382431377766, 0.1752281111413866, 0.12282361139263465, 0.1370533372301217, 0.09884845083585347, 0.17331533712230285, 0.06574136977514211, 0.061846798919319546, 0.10850012987119428, 0.11529692626987431, 0.16712385273266994, 0.7806211731227075, 0.11335693239534139, 0.0654206971930491, 0.015878944559558295, 0.21113234534081848, 0.19809909756990385, 0.08270597868612894, 0.14159208349085106, 0.5893093940345534, 0.2622314292737281, 0.20483964819077582, 0.2155946587928943, 0.23221878886136205, 0.2508967078126507, 0.22547546710274546, 0.1872927312479985, 0.2542926188494816, 0.21999843255636464, 0.0355169060786753, 0.025983772813838013, 0.03895053152860095, 0.04250391010582277, 0.015984821076641453, 0.022047818400875663, 0.0479419298357725, 0.013099520044478452, 0.03640721664784452]}, "mutation_prompt": null}
{"id": "9ed3ffdb-94a9-4008-b8c8-493a732cfedf", "solution": "import numpy as np\n\nclass EnhancedLevyHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n        \n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution + levy_flight(self.dim)\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution + levy_flight(self.dim)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n        \n        return best_solution", "name": "EnhancedLevyHybridPSOSA", "description": "Enhancing exploration by incorporating Levy flights for more diverse search trajectories.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {}, "mutation_prompt": null}
{"id": "012d4024-af48-4b41-895a-7bf6e78d1481", "solution": "class EnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        population_size = 10  # Initial population size\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n                \n                # Dynamic population size adjustment\n                population_size = min(50, population_size + 1) if np.random.rand() < 0.1 else population_size\n                \n        return best_solution", "name": "EnhancedHybridPSOSA", "description": "Enhancing convergence by incorporating a dynamic population size adjustment mechanism.", "configspace": "", "generation": 85, "fitness": 0.2307469274886742, "feedback": "The algorithm EnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.6922264090100794, 0.6954983200518687, 0.6867770851965808, 0.7034654728894326, 0.6706403996204104, 0.6954383406983515, 0.6861825384352976, 0.7063110300429927, 0.6908950755239025, 0.05847017148747069, 0.05758178467213715, 9.999999999998899e-05, 0.0309035012375507, 9.999999999998899e-05, 9.999999999998899e-05, 0.04982963935182527, 9.999999999998899e-05, 9.999999999998899e-05, 0.07750402240480547, 0.04906106689537115, 0.04278968370471725, 0.08040845878910063, 0.08263490572913701, 0.06615075893117228, 0.1146436699747655, 0.12097955816656902, 0.0765895847711352, 0.09945933903068271, 0.05814049405682109, 0.044188249393274925, 0.0721107663351791, 0.06542177867047672, 0.06307200378371458, 0.04496796009341575, 0.077147384933417, 0.06499561148501365, 0.9784477396421221, 0.9832338966063595, 0.9738268626260806, 0.9811454563049443, 0.9770891892311262, 0.9834021184642096, 0.9840233560549888, 0.9759454707027324, 0.985525850529998, 0.5317023425389606, 0.525113119196071, 0.49963369415840353, 0.49382189524546294, 0.5204249888456196, 0.4920143991618222, 0.4877706646623675, 0.4859759041453454, 0.47850199359606294, 0.22486381184675042, 0.15888703804328974, 0.21492035099723372, 0.271293289680117, 0.18896958724237434, 0.22833542851567112, 0.22956711741593028, 0.20217990457418245, 0.2335501762354928, 0.20682389780436328, 0.23424707128493727, 0.1306699915488252, 0.29425102287382143, 0.2303115555113976, 0.19225263215529298, 0.3100521980939277, 0.1671223610394138, 0.1899356795851962, 0.22465008577118983, 0.24701659196671544, 0.14000212371575183, 0.1645667884966746, 0.24304163956800762, 0.17353581277050634, 0.2445340053696312, 0.24850803236654273, 0.18260787523621258, 9.999999999998899e-05, 9.999999999998899e-05, 0.04679826382294339, 0.019681523496265618, 0.057141941406742225, 0.0036323855226453317, 0.0056723052558826925, 0.00924503034339419, 0.019177441135927675, 0.14525305428758217, 0.1162514877589943, 0.15814780381903437, 0.0927446082753608, 0.0005515514406344568, 0.009793548207264191, 0.1796971581946033, 0.045940367888211986, 0.09440652228393998, 0.11180087778379733, 0.03924602040071534, 0.07225957608164169, 0.05165820411327027, 0.15054197505638822, 0.04159144234913714, 0.11338995384035733, 0.14272223791640848, 0.02354933700884998, 0.100915327830434, 0.03704178494146926, 0.051502285103526835, 0.07800948702073296, 0.1507152603452212, 0.04540038404841429, 0.20622283357853477, 0.08404907997661248, 0.11025230916501005, 0.5252529800859094, 0.5232650649556476, 0.5604867426304742, 0.5515285372411178, 0.49988813769617246, 0.5144518138158884, 0.48884904465131707, 0.5937723751568931, 0.5392835633700244, 0.08175240279498508, 0.04749614661447832, 0.05561513853449085, 0.0713754306246932, 0.07351792212801778, 0.08153848470566316, 0.06550992572349568, 0.0851040608823811, 0.060669777047185014, 0.1777322910710678, 0.17202790715480332, 0.16621226732465344, 0.33061100189883375, 0.1922818668793782, 0.14128074089286058, 0.3320429796032066, 0.1618233551492373, 0.22464217049650403, 0.27906991347731225, 0.1770508408246746, 0.1085759109003287, 0.41403631705682165, 0.15928186104077013, 0.20159123074533702, 0.17763555138743992, 0.1605657857827698, 0.08842653876304174, 0.12054722985133792, 0.04361286526301922, 0.07811635336643863, 0.16621113998204784, 0.10769759925728395, 0.08651156033500973, 0.16051148032004925, 0.10425273241020372, 0.07554529765583484, 0.22145295981543267, 0.21162297473020286, 0.17934802757856394, 0.25896403339087715, 0.1594174208349386, 0.21097090625827408, 0.23587482864001674, 0.1701091846467241, 0.21672138360570126, 0.17347010367073867, 0.1743918847735264, 0.1871908966814846, 0.1935931532498152, 0.215148246671922, 0.19687189917041192, 0.18796034147544205, 0.178900458517542, 0.19882386014735043, 0.12251310503039547, 0.13760023372755537, 0.13131210372169044, 0.1742726103589639, 0.06595407537456044, 0.09881862736607494, 0.10897200208594204, 0.11540318612008194, 0.1678068613994418, 0.8083468405763885, 0.11354100705205783, 0.08302441667440819, 0.08321421278209895, 0.21358981057024706, 0.2134731950780019, 0.5911319469334761, 0.16824830509804778, 0.5195999300312817, 0.24542685373703665, 0.22592514127114494, 0.24907751561438818, 0.21449262293871552, 0.24038568579105357, 0.21737776281925258, 0.21946472691060148, 0.22860659887581924, 0.22926770062541824, 0.1370647228584928, 0.08449799340524167, 0.06125398408868965, 0.11698165644577507, 0.08854259626667627, 0.0836944773404984, 0.11227225958775466, 0.042794834940558246, 0.07481838615898762]}, "mutation_prompt": null}
{"id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 86, "fitness": 0.2431359080841586, "feedback": "The algorithm CrowdingEnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "f8b0a543-36d7-467d-bb0b-96a93983c9f2", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "ac9f7247-3876-45a5-ae94-091760cb793b", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "9235a185-df24-48d4-b4ee-f34951c3dab6", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "1bbd566d-f66d-4521-a101-977b5ca8c5ca", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "b2671c6b-ee9c-4112-b1a1-50d00d9030fa", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "696a0a41-17ec-459f-ba13-d6c07ffa2787", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "b76188df-8045-4e14-ba86-7fbe93cb6705", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "b6742204-0768-4568-96cb-996eabe9202e", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "77dc6bea-f212-48a3-ab09-8b6ea2a8abac", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "4b539b80-e0b4-4463-9925-203d92b482c9", "solution": "class ImprovedCrowdingEnhancedHybridPSOSA(CrowdingEnhancedHybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight, mutation_rate):\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution, mutation_rate):\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2 if best_fitness <= func(best_solution) else np.random.uniform(0.1, 1.0)\n            new_solution = pso_search(best_solution, inertia_weight, mutation_rate) if np.random.rand() < 0.5 else sa_search(best_solution, mutation_rate)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "ImprovedCrowdingEnhancedHybridPSOSA", "description": "Incorporating a dynamic mutation rate based on fitness improvements to adapt the search behavior during optimization.", "configspace": "", "generation": 95, "fitness": 0.20912762037638805, "feedback": "The algorithm ImprovedCrowdingEnhancedHybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.6819408888495027, 0.6576764380353046, 0.6782964529799003, 0.6676055701775723, 0.6475840872601952, 0.6742747847296623, 0.640938848154551, 0.6602455705429439, 0.6419728283091628, 9.999999999998899e-05, 0.025144221521406496, 9.999999999998899e-05, 9.999999999998899e-05, 0.007321149879969346, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04842154110466601, 0.05586793300553805, 0.0397244152316214, 0.06147710195203504, 0.06801725869846831, 0.04635052459836586, 0.08090398590892878, 0.0737077560808228, 0.04467778416578827, 0.07824459334492928, 0.06942633783301955, 0.01587904214991198, 0.07898034518637964, 0.05743806913924254, 0.04631563734427491, 0.04734583286108174, 0.05362202178636488, 0.03862356472108508, 0.9688505496731541, 0.9616749177725978, 0.9245649512630307, 0.9641838805568832, 0.9569265179995079, 0.9506922410404348, 0.9568776702576638, 0.9551457361273002, 0.9704397423908653, 0.4258979854883166, 0.4686026093492037, 0.39975846100088397, 0.42731535567385504, 0.4414246548311417, 0.4416743776402262, 0.4575453259621929, 0.45402483721726794, 0.44206468542485655, 0.1436303819693563, 0.17785968876737823, 0.1326387717309523, 0.2763081074653231, 0.22441903647373762, 0.2130141647204591, 0.32953451163035086, 0.17048213908220933, 0.14587569320627225, 0.1704115528823631, 0.18842490962358183, 0.1751722727124203, 0.20438585950265054, 0.19223029910163203, 0.12818365043117064, 0.218796365577845, 0.1843093243505698, 0.18356325527015238, 0.18210051505766, 0.12933405154391164, 0.1285162315170788, 0.2501527838621156, 0.190794151450144, 0.18638339450642638, 0.13050879367362245, 0.17208874927007745, 0.18104757519438963, 0.054011365563141456, 9.999999999998899e-05, 0.05323023902557067, 0.07938425489522338, 9.999999999998899e-05, 0.04938843623843481, 9.999999999998899e-05, 9.999999999998899e-05, 0.02173036366323855, 0.06720179758113609, 0.04110325904152523, 0.19711642257652584, 0.08408479902560595, 0.006335412374424365, 0.018418478883185485, 0.14632972710440406, 0.025633819421092774, 0.07275329286266019, 0.09597482175829897, 0.055830253221267, 0.08328681335650168, 0.09358696927135335, 0.09950296493438948, 0.011931938141329534, 0.05176130804011614, 0.07634473151576027, 0.10150558475943472, 0.13156993430221386, 0.0472518325108946, 0.07559153406402419, 0.14149127252172733, 0.09661980943072213, 0.03209000145587593, 0.08535684567202129, 0.09149703325156455, 0.07048777806452222, 0.4838624809694877, 0.497715917636412, 0.48882548692883476, 0.4983302913321582, 0.49004453664804826, 0.4761466386975326, 0.48709377412066357, 0.49699904844684395, 0.5265647615503964, 0.07673904148546151, 0.054786426258189524, 0.07684055384442234, 0.06356959207005841, 0.07655548129914913, 0.07895486930276552, 0.0417507746089556, 0.08295230674191645, 0.07280713056932508, 0.204038975582858, 0.15273104107474933, 0.210263642478422, 0.2157799481929198, 0.1398600310454844, 0.1913162294506736, 0.20528406211269334, 0.16872090300998466, 0.13299613746902872, 0.17964188232850353, 0.1507484857301784, 0.12644022728946025, 0.20198798240695004, 0.2080670672632483, 0.17780226248054465, 0.16167957555621737, 0.11574228102821837, 0.09329072813961703, 0.14177711022365624, 0.04346425513574248, 0.03803614735034666, 0.14861218899409945, 0.115851483605246, 0.09341415940746645, 0.16984371638159934, 0.08776488788777537, 0.054366996938285284, 0.1859711292630657, 0.1429065967096771, 0.16736441545497327, 0.16298427364752044, 0.13634540075600265, 0.15415346298481714, 0.24158135389507585, 0.15080862215651103, 0.1612258301361471, 0.17072233354710575, 0.18535058346059297, 0.16995792563923096, 0.18923418047890428, 0.1931149386437767, 0.18559765441525677, 0.20439188914724238, 0.18310969786456954, 0.18196406701023848, 0.15957155636290776, 0.13684992814124108, 0.15194287652623406, 0.17404310828215908, 0.11108337347008923, 0.06174521409859701, 0.10853214502778008, 0.12646778367775113, 0.16743930507200477, 0.7945589618425603, 0.11328890345197562, 0.08255534131299447, 0.08323137070744202, 0.2117601549567354, 0.2116303437578393, 0.482838115937106, 0.1680980227866361, 0.34767036868311185, 0.23991739034183435, 0.18240251830685694, 0.18549174886029718, 0.2176975748928307, 0.2077608532480142, 0.2118791514203876, 0.22386987555720772, 0.21641202517178004, 0.18751600832673898, 0.053490226228894655, 0.06256739365451558, 0.037561189016099394, 0.07400879431623908, 0.048564289510988456, 0.04530151564456897, 0.08131602936499782, 0.045438257971955553, 0.06485999876103166]}, "mutation_prompt": null}
{"id": "7b2e6716-777c-4b45-8123-2f80f900bd1a", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "07e73aee-064c-457b-b74a-7357e2db31f6", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "c7d52c67-b6f2-4300-b47a-3efbaea8200f", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
{"id": "5264b5a5-6520-4665-80db-025db16553db", "solution": "class CrowdingEnhancedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        def pso_search(best_solution, inertia_weight):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * inertia_weight\n            return new_solution\n        \n        def sa_search(best_solution):\n            mutation_rate = np.random.uniform(0.1, 1.0) ** 2\n            new_solution = best_solution + mutation_rate * np.random.normal(0, 1.0, self.dim)\n            return new_solution\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        inertia_weight = 0.5  # Initial inertia weight\n        \n        for _ in range(self.budget):\n            new_solution = pso_search(best_solution, inertia_weight) if np.random.rand() < 0.5 else sa_search(best_solution)\n            new_fitness = func(new_solution)\n            \n            if new_fitness < best_fitness:\n                best_solution = new_solution\n                best_fitness = new_fitness\n                inertia_weight = max(0.4, inertia_weight * 0.99)  # Update inertia weight dynamically\n            elif np.random.rand() < 0.1:  # Introduce crowding-based selection\n                crowding_solution = best_solution + 0.05 * np.random.uniform(-1.0, 1.0, self.dim)\n                crowding_fitness = func(crowding_solution)\n                if crowding_fitness < best_fitness:\n                    best_solution = crowding_solution\n                    best_fitness = crowding_fitness\n        \n        return best_solution", "name": "CrowdingEnhancedHybridPSOSA", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to balance exploration and exploitation during the optimization process.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d10d1e8d-11f3-4cea-b676-74dc79bef587", "metadata": {"aucs": [0.676953796513726, 0.6568868635964057, 0.709217573729765, 0.6809534325880621, 0.6843731578825434, 0.706255469946055, 0.6941579791043022, 0.7696756883436082, 0.6995831784489518, 9.999999999998899e-05, 0.01054950407427846, 9.999999999998899e-05, 0.04697292799169339, 0.0698425063806064, 9.999999999998899e-05, 0.06683362794191927, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816016874380785, 0.05980415717585641, 0.06560512745291036, 0.05230254965516601, 0.08182564687087557, 0.09906829196100975, 0.07918222000362807, 0.04989834685791461, 0.06995449045267921, 0.12722454843071795, 0.0401581720074482, 0.030847647636456865, 0.04113509388300518, 0.07256550937830875, 0.05644357877087747, 0.05336728703090865, 0.09050145321095138, 0.05416079105665561, 0.9797647954416047, 0.9771909969206887, 0.9743033487399745, 0.9787201445174697, 0.9802852029904938, 0.9802926190814143, 0.9806001847648274, 0.9822080479909595, 0.9866784725300831, 0.48468795581702184, 0.514194225708192, 0.4784307375322683, 0.5238240558352416, 0.5044865399965988, 0.5118598223438757, 0.4971534269874779, 0.5268295000729534, 0.4982711936760428, 0.8597343027671047, 0.18500379926924349, 0.21052356039789, 0.8964869495517704, 0.8939065341351229, 0.1918584147896253, 0.21208356880339885, 0.21769085287598533, 0.251339692317875, 0.13799619037644084, 0.20677225841128233, 0.1392636058251654, 0.2219914276007081, 0.223471653294661, 0.2121706223199924, 0.135298109601115, 0.23180641310405692, 0.21273965554233487, 0.198314831580106, 0.20841644428727624, 0.13524460278033568, 0.20386887990372293, 0.21712414384160206, 0.13368622130069596, 0.25376169807513704, 0.17125150123241017, 0.19610697643121144, 9.999999999998899e-05, 0.0014503592337808957, 9.999999999998899e-05, 0.061219210691598525, 0.0614274542991452, 0.0834244802322226, 0.005112597354992254, 9.999999999998899e-05, 0.0789989565934156, 0.08919206282782122, 0.06750184121843483, 0.16783159135708725, 0.07958959085310058, 0.021877373736328032, 0.05184063483243084, 0.16252058786909251, 0.04360782887314185, 0.06298771764723965, 0.16507473917691318, 0.025275169602727132, 0.10615266658145395, 0.09015785370334817, 0.1049367061668589, 0.04824087432733981, 0.07094213528204907, 0.05654251617890804, 0.08475262985437348, 0.21337835668568528, 0.22790368786290727, 0.07615606911603723, 0.03443508344965762, 0.12458717259857255, 0.08248152855850344, 0.060751601553089896, 0.06322625718241592, 0.04565688469535811, 0.5252267752330955, 0.5155316183523645, 0.5646946763200886, 0.5192612465448967, 0.519218699501532, 0.5872631535393026, 0.5288772514563203, 0.517925739587694, 0.5559831757952747, 0.04261501713504734, 0.07560141099992723, 0.03617533595961797, 0.08378167976358253, 0.12003703533564258, 0.0922095963348244, 0.044759216447677996, 0.08314427286039605, 0.07552899929234846, 0.1617509743175839, 0.1358052507401042, 0.16837928915762146, 0.14516911630298523, 0.17338760545353926, 0.18858178338515186, 0.27022234026624203, 0.22642342792482106, 0.16798029043406404, 0.15147720832390676, 0.17757483516195427, 0.14920420972145043, 0.2151476989054112, 0.33575061491937286, 0.1621687893497219, 0.149564434025519, 0.15416606314067904, 0.1088279377060466, 0.11960895152956741, 0.23766127738218745, 0.07187040737763961, 0.247362937717706, 0.1821784729380248, 0.08766606010809175, 0.17878853702954933, 0.16950542970337046, 0.06326890656547401, 0.1983581033541968, 0.17718493725304485, 0.1753949275902602, 0.19600340600132338, 0.22289969543868227, 0.17023032401101845, 0.22365324819210985, 0.24523812579951287, 0.16563410191126626, 0.17544016164509157, 0.18855719609450217, 0.21428292719786135, 0.1840368078696032, 0.18446243972406207, 0.18780138196132157, 0.1724085241720752, 0.19438319096593681, 0.1781481187801739, 0.1898786442234769, 0.13750904422339294, 0.9585100736962799, 0.17372719827459637, 0.11261530362263128, 0.06207987368230683, 0.10885424310640557, 0.11536118524293237, 0.1689011469107492, 0.9471428358314663, 0.11357768319649075, 0.08307677463716567, 0.15757680502533733, 0.21172090678970246, 0.2122044079344243, 0.7383040541171992, 0.16871695098113648, 0.5359428233711931, 0.2209383201568892, 0.22847304171518323, 0.2315269482829182, 0.20768796469498996, 0.203605900368393, 0.19871698866269205, 0.2125945260679103, 0.2308674621578244, 0.223884046855372, 0.10690344411692965, 0.09720463732751305, 0.07737828456188311, 0.05345854803876482, 0.06503036033572951, 0.10284112066484963, 0.09341379338501488, 0.07429017346336009, 0.035764555070839976]}, "mutation_prompt": null}
