{"id": "922f21b9-897d-4a7e-ba59-af8c715152da", "solution": "import numpy as np\n\nclass PSO_DE_Metaheuristic:\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.pso_w = pso_w\n        self.pso_c1 = pso_c1\n        self.pso_c2 = pso_c2\n        self.de_f = de_f\n        self.de_cr = de_cr\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for _ in range(self.budget):\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = self.pso_w * velocities + self.pso_c1 * r1 * (personal_best - swarm) + self.pso_c2 * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < self.de_cr or j == j_rand:\n                            trial[j] = a[j] + self.de_f * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "PSO_DE_Metaheuristic", "description": "Metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.3424025528467531, "feedback": "The algorithm PSO_DE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": null, "metadata": {"aucs": [0.845539308878076, 0.844224782188431, 0.8555184064285496, 0.8459229961465456, 0.842382006559246, 0.8330961267630177, 0.8495340560978284, 0.8449130452674073, 0.8389496009003423, 0.6962879559102008, 0.702393931177579, 0.6950848479314985, 0.7235046049097422, 0.6955791972061739, 0.7094302176845406, 0.6947721375915292, 0.6838827672753331, 0.7152197762142334, 0.15295959463447872, 0.13880591255378893, 0.1281361050058284, 0.13735119225420223, 0.14184973195009298, 0.1418077374080542, 0.13150792608578954, 0.1684658647806384, 0.1658096395113534, 0.14590467777686134, 0.10935489795690123, 0.13725919815557486, 0.09897780921780319, 0.11997971259529827, 0.13192799873340355, 0.13284770289638692, 0.13794002434739083, 0.11136537686560355, 0.989054586744259, 0.9917037911644666, 0.9892775751985323, 0.989093676187814, 0.9883513490809223, 0.9870724069309348, 0.9890435878733695, 0.9861701645974825, 0.9896985440030966, 0.6845651413235054, 0.6693122932654789, 0.6561116516590236, 0.6668268437188634, 0.6883982318359354, 0.6731301195414708, 0.6633891083880625, 0.6506362252803387, 0.653478684355345, 0.22386921102113955, 0.2205921265811468, 0.8399504226884602, 0.2743989406691306, 0.8677473208363536, 0.7987143646098239, 0.8072939184176458, 0.8204411175286296, 0.22432251723854824, 0.23808530845869624, 0.21680420623462504, 0.2197848823937395, 0.21675389809404033, 0.30137013532796, 0.23502446945169142, 0.24790813725747807, 0.2246074059040628, 0.37304506872119314, 0.24621914917511079, 0.08724619084925811, 0.24291500085739737, 0.13121408667726608, 0.24729892470732706, 0.24777181232033563, 0.2684594456244709, 0.22678077349974857, 0.271826249101221, 0.07735939888944066, 0.056470950438671896, 0.013497725609965316, 0.051205442834121984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02708498558356298, 0.07922689730673516, 0.08707942720744088, 0.17212183715441065, 0.06992422050616387, 0.01673192975239779, 0.039032220575157206, 0.017679714519445056, 0.1208826147093578, 0.00738888493630474, 9.999999999998899e-05, 0.24109182970463072, 0.16948775013004147, 0.325760608858626, 0.1633904207754534, 0.12603026899973646, 0.23347373947789452, 0.2158190561472414, 0.03822211081216098, 0.107860913846477, 0.2495303001920568, 0.1927752704099377, 0.38163705601356046, 0.09763809846847049, 0.16582374961936563, 0.26376328104466806, 0.12251590013699754, 0.07994255910140824, 0.5761269692033562, 0.6073635215316739, 0.5785054665538341, 0.5568014714171006, 0.5833153481524502, 0.5370347465551534, 0.6153389554898049, 0.5587274131485097, 0.588452630357107, 0.12161961134712018, 0.11673663130481438, 0.13224642609964288, 0.12266577049506455, 0.33347061077543205, 0.139921155166029, 0.11167763811696918, 0.1026828347457649, 0.16355570119043683, 0.24787460018142526, 0.1413022567900012, 0.2559420906717612, 0.2910235728598952, 0.41521926133412435, 0.21030340152703753, 0.37898498977256867, 0.23358831287953552, 0.5372969334274633, 0.6008061709719212, 0.3316634967555063, 0.5443138756789994, 0.5488238042377296, 0.503860406595753, 0.41521858838250714, 0.6368011893262134, 0.6423232852405305, 0.5919193579409268, 0.2980944373758806, 0.26868372834945553, 0.4590353673755002, 0.2975391492818469, 0.18853572781374173, 0.3290748433317272, 0.24502174596651594, 0.3021116711828704, 0.235604536453888, 0.221366048368565, 0.20659176940124802, 0.22140945105691412, 0.22405816260926203, 0.20985134687942186, 0.21968114495709312, 0.21849974253569093, 0.21159528839056851, 0.2328497430680001, 0.7087678118983973, 0.23996980549493974, 0.19882528248179754, 0.23162776458085532, 0.23886740634292214, 0.19192756153825608, 0.2446504199006032, 0.20336823148514327, 0.21914288536905557, 0.20999820470706432, 0.17398603481592145, 0.15186150194064263, 0.17151061843390214, 0.19881548770194113, 0.1986415438787863, 0.12970856158852073, 0.16685353348159115, 0.8958040767874772, 0.8100363255048286, 0.15539450210975936, 0.207418384401178, 0.8101258143276311, 0.20245334658656744, 0.21106555682218386, 0.10386227119883662, 0.1047377103811481, 0.7721014561056636, 0.183389530026009, 0.21270625603459514, 0.20079376609494415, 0.18048440878449223, 0.17125385713670094, 0.18054684303090185, 0.179860755592277, 0.19087249356894254, 0.1878137142156977, 0.13707816886946234, 0.08815534910006628, 0.09048203496045082, 0.0948706488705453, 0.0874163309098609, 0.08092747351240837, 0.10405041824807726, 0.08586561826756656, 0.10255415017067937]}, "mutation_prompt": null}
{"id": "69192e7f-85d8-47df-bb3b-3291775c81e5", "solution": "class Enhanced_PSO_DE_Metaheuristic(PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w_min=0.4, pso_w_max=0.9, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_c1, pso_c2, de_f, de_cr)\n        self.pso_w_min = pso_w_min\n        self.pso_w_max = pso_w_max\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for t in range(self.budget):\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                inertia_weight = self.pso_w_max - (t / self.budget) * (self.pso_w_max - self.pso_w_min)\n                velocities = inertia_weight * velocities + self.pso_c1 * r1 * (personal_best - swarm) + self.pso_c2 * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < self.de_cr or j == j_rand:\n                            trial[j] = a[j] + self.de_f * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_PSO_DE_Metaheuristic", "description": "Enhanced PSO_DE_Metaheuristic with adaptive inertia weight for improved convergence behavior.", "configspace": "", "generation": 1, "fitness": 0.10555318858206031, "feedback": "The algorithm Enhanced_PSO_DE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "922f21b9-897d-4a7e-ba59-af8c715152da", "metadata": {"aucs": [0.16220720297030589, 0.16062367236167652, 0.20574517289634364, 0.16147547149610653, 0.14796259640563547, 0.16638852989969166, 0.14272602870315965, 0.17011241897219753, 0.14762264978609385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04648310972685887, 0.04966224449647505, 0.035188722520084204, 0.028158046990748753, 0.03361095741617903, 0.04279253257061011, 0.03803936857845569, 0.02584168706052603, 0.0293142176460649, 0.0248451752912755, 0.012577105649620224, 0.021054184663718445, 0.023207371360600693, 0.02438310130575594, 0.0023385384438708856, 0.017388480727593913, 0.018219100256234966, 0.015957286438571416, 0.9908482395828061, 0.9883861618139829, 0.9890895115592727, 0.9814767050770999, 0.9827702311754479, 0.9876122412876486, 0.9861979242656356, 0.9879515764059921, 0.9894359256295812, 0.10230232268389317, 0.024916439668282497, 0.0030469053328819884, 0.031960843765998836, 0.019168659894478912, 0.08444983506158787, 9.999999999998899e-05, 0.021477074384378625, 9.999999999998899e-05, 0.11772740011619875, 0.07926697453251219, 0.09385285030437829, 0.10405576017055451, 0.08071544988569235, 0.08897257045726892, 0.08163975538199031, 0.0750494095146581, 0.04960188221691897, 9.999999999998899e-05, 9.999999999998899e-05, 0.000810103871762835, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001289189800649515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002353815656028768, 0.0011835852691137738, 0.0017101893685039782, 0.0055297283906180494, 0.0007091872016189438, 9.999999999998899e-05, 9.999999999998899e-05, 0.00045247505917489494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01549463015661845, 9.999999999998899e-05, 0.03980031934552386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15663533483984426, 0.18138092324180077, 0.1948520712731221, 0.19196864676180225, 0.1585770471275244, 0.16716594995769807, 0.1858197775819218, 0.16600185424962433, 0.16375070810363013, 0.032261568795574735, 0.026325134787830384, 0.01816234207083256, 0.03896316396622623, 0.02641088087280763, 0.058302101122317485, 0.01628270272521115, 0.025165501818072533, 0.030700088866361108, 0.10905785343277408, 0.0882559154586745, 0.1114462926005162, 0.09855305120349966, 0.1118061870062651, 0.10256088030021326, 0.10948381033210097, 0.08852672765327041, 0.1233847864352059, 0.1604743428261991, 0.13193309897915728, 0.14436080010846875, 0.15611570433686683, 0.13566405494282185, 0.17122024029837812, 0.14054801717506438, 0.17377774300845283, 0.14005763209209432, 0.08609012490068801, 0.06906689612813588, 0.08725167544172274, 0.10371180146674919, 0.08495055241988247, 0.10595460773330201, 0.09630740336556431, 0.10204936516659668, 0.08904825231130487, 0.13581720316124535, 0.13672585893807554, 0.15444672438795481, 0.14551311860731875, 0.15923762074306447, 0.13125840564109004, 0.1311727472996903, 0.16527892145261813, 0.147149455012633, 0.05442470432298341, 0.05061816666837882, 0.15187558488643005, 0.09864203337312571, 0.1280201201175183, 0.0976052004311645, 0.15250545356291934, 0.10176881611318533, 0.06564507044765744, 0.10188038888582884, 0.0965661627959753, 0.09372131823926388, 0.1793156824018982, 0.1207914665021157, 0.16002120670460995, 0.0968048646339954, 0.10081388433244498, 0.1109155508022086, 0.1356089472437485, 0.10051730792859848, 0.08154065417242817, 0.10729142821525006, 0.10871146412214439, 0.07582283329708517, 0.0774457060070366, 0.07009523881785795, 0.09842979374456207, 0.14095318606461404, 0.1484572324444967, 0.15884340974423428, 0.15068153645011317, 0.16206619331250383, 0.16560299928921451, 0.16269606015247284, 0.13018182697562408, 0.14895937934318138, 0.03854055969599102, 0.036672147727093596, 0.0586163607072272, 0.04454446593876982, 0.040303428520154894, 0.039585831562685914, 0.044876571695731005, 0.03306669325765743, 0.04088755344035888]}, "mutation_prompt": null}
{"id": "8870fc4b-d5c3-4c1b-90ae-1a5c42629ecf", "solution": "import numpy as np\n\nclass PSO_DE_Metaheuristic:\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.pso_w = pso_w\n        self.pso_c1 = pso_c1\n        self.pso_c2 = pso_c2\n        self.de_f = de_f\n        self.de_cr = de_cr\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for _ in range(self.budget):\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = self.pso_w * velocities + self.pso_c1 * r1 * (personal_best - swarm) + self.pso_c2 * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < self.de_cr or j == j_rand:\n                            trial[j] = a[j] + self.de_f * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "PSO_DE_Metaheuristic", "description": "Metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "922f21b9-897d-4a7e-ba59-af8c715152da", "metadata": {"aucs": [0.845539308878076, 0.844224782188431, 0.8555184064285496, 0.8459229961465456, 0.842382006559246, 0.8330961267630177, 0.8495340560978284, 0.8449130452674073, 0.8389496009003423, 0.6962879559102008, 0.702393931177579, 0.6950848479314985, 0.7235046049097422, 0.6955791972061739, 0.7094302176845406, 0.6947721375915292, 0.6838827672753331, 0.7152197762142334, 0.15295959463447872, 0.13880591255378893, 0.1281361050058284, 0.13735119225420223, 0.14184973195009298, 0.1418077374080542, 0.13150792608578954, 0.1684658647806384, 0.1658096395113534, 0.14590467777686134, 0.10935489795690123, 0.13725919815557486, 0.09897780921780319, 0.11997971259529827, 0.13192799873340355, 0.13284770289638692, 0.13794002434739083, 0.11136537686560355, 0.989054586744259, 0.9917037911644666, 0.9892775751985323, 0.989093676187814, 0.9883513490809223, 0.9870724069309348, 0.9890435878733695, 0.9861701645974825, 0.9896985440030966, 0.6845651413235054, 0.6693122932654789, 0.6561116516590236, 0.6668268437188634, 0.6883982318359354, 0.6731301195414708, 0.6633891083880625, 0.6506362252803387, 0.653478684355345, 0.22386921102113955, 0.2205921265811468, 0.8399504226884602, 0.2743989406691306, 0.8677473208363536, 0.7987143646098239, 0.8072939184176458, 0.8204411175286296, 0.22432251723854824, 0.23808530845869624, 0.21680420623462504, 0.2197848823937395, 0.21675389809404033, 0.30137013532796, 0.23502446945169142, 0.24790813725747807, 0.2246074059040628, 0.37304506872119314, 0.24621914917511079, 0.08724619084925811, 0.24291500085739737, 0.13121408667726608, 0.24729892470732706, 0.24777181232033563, 0.2684594456244709, 0.22678077349974857, 0.271826249101221, 0.07735939888944066, 0.056470950438671896, 0.013497725609965316, 0.051205442834121984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02708498558356298, 0.07922689730673516, 0.08707942720744088, 0.17212183715441065, 0.06992422050616387, 0.01673192975239779, 0.039032220575157206, 0.017679714519445056, 0.1208826147093578, 0.00738888493630474, 9.999999999998899e-05, 0.24109182970463072, 0.16948775013004147, 0.325760608858626, 0.1633904207754534, 0.12603026899973646, 0.23347373947789452, 0.2158190561472414, 0.03822211081216098, 0.107860913846477, 0.2495303001920568, 0.1927752704099377, 0.38163705601356046, 0.09763809846847049, 0.16582374961936563, 0.26376328104466806, 0.12251590013699754, 0.07994255910140824, 0.5761269692033562, 0.6073635215316739, 0.5785054665538341, 0.5568014714171006, 0.5833153481524502, 0.5370347465551534, 0.6153389554898049, 0.5587274131485097, 0.588452630357107, 0.12161961134712018, 0.11673663130481438, 0.13224642609964288, 0.12266577049506455, 0.33347061077543205, 0.139921155166029, 0.11167763811696918, 0.1026828347457649, 0.16355570119043683, 0.24787460018142526, 0.1413022567900012, 0.2559420906717612, 0.2910235728598952, 0.41521926133412435, 0.21030340152703753, 0.37898498977256867, 0.23358831287953552, 0.5372969334274633, 0.6008061709719212, 0.3316634967555063, 0.5443138756789994, 0.5488238042377296, 0.503860406595753, 0.41521858838250714, 0.6368011893262134, 0.6423232852405305, 0.5919193579409268, 0.2980944373758806, 0.26868372834945553, 0.4590353673755002, 0.2975391492818469, 0.18853572781374173, 0.3290748433317272, 0.24502174596651594, 0.3021116711828704, 0.235604536453888, 0.221366048368565, 0.20659176940124802, 0.22140945105691412, 0.22405816260926203, 0.20985134687942186, 0.21968114495709312, 0.21849974253569093, 0.21159528839056851, 0.2328497430680001, 0.7087678118983973, 0.23996980549493974, 0.19882528248179754, 0.23162776458085532, 0.23886740634292214, 0.19192756153825608, 0.2446504199006032, 0.20336823148514327, 0.21914288536905557, 0.20999820470706432, 0.17398603481592145, 0.15186150194064263, 0.17151061843390214, 0.19881548770194113, 0.1986415438787863, 0.12970856158852073, 0.16685353348159115, 0.8958040767874772, 0.8100363255048286, 0.15539450210975936, 0.207418384401178, 0.8101258143276311, 0.20245334658656744, 0.21106555682218386, 0.10386227119883662, 0.1047377103811481, 0.7721014561056636, 0.183389530026009, 0.21270625603459514, 0.20079376609494415, 0.18048440878449223, 0.17125385713670094, 0.18054684303090185, 0.179860755592277, 0.19087249356894254, 0.1878137142156977, 0.13707816886946234, 0.08815534910006628, 0.09048203496045082, 0.0948706488705453, 0.0874163309098609, 0.08092747351240837, 0.10405041824807726, 0.08586561826756656, 0.10255415017067937]}, "mutation_prompt": null}
{"id": "4de68bd2-a3d6-432e-9cc5-37b076942a46", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Metaheuristic(PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, levy_mu=1, levy_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.levy_mu = levy_mu\n        self.levy_scale = levy_scale\n\n    def __call__(self, func):\n        def pso_de_levy_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for _ in range(self.budget):\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = self.pso_w * velocities + self.pso_c1 * r1 * (personal_best - swarm) + self.pso_c2 * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < self.de_cr or j == j_rand:\n                            trial[j] = a[j] + self.de_f * (b[j] - c[j])\n                    # Incorporating Levy flights for global exploration\n                    levy = np.random.standard_cauchy(self.dim) * self.levy_scale / (np.abs(np.random.normal(0, self.levy_mu, self.dim)) ** (1 / self.levy_mu))\n                    trial += levy\n                    trial = np.clip(trial, -5.0, 5.0)\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_levy_optimizer()", "name": "Enhanced_PSO_DE_Metaheuristic", "description": "Enhancing the exploration capability of the algorithm by incorporating Levy flights for global search.", "configspace": "", "generation": 3, "fitness": 0.20161357843971606, "feedback": "The algorithm Enhanced_PSO_DE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "922f21b9-897d-4a7e-ba59-af8c715152da", "metadata": {"aucs": [0.3717829535795736, 0.36944477246609764, 0.3928656245205794, 0.39322894729967284, 0.38049938160835195, 0.3850610140995073, 0.3914172365630013, 0.38731915192209654, 0.3734606775750572, 0.029281747934672087, 0.007995113210213511, 0.023988599818917877, 0.026912639894683288, 0.04683860220713121, 0.03806950641325979, 0.02966973079420221, 0.03717820013561046, 0.0195769546392206, 0.1298389600785267, 0.09858811475231488, 0.09032673390870682, 0.09741027215359266, 0.10975459718637648, 0.10546830493868764, 0.09562462058920318, 0.09011822971188665, 0.09388241903111771, 0.08326306384832571, 0.10242469607612714, 0.08074095292282524, 0.10394069318595667, 0.08470802993681514, 0.08260071500873933, 0.07490112774417523, 0.06762187126978547, 0.08779270988663646, 0.9875254453437081, 0.9833148091250411, 0.98836555186681, 0.9853564042755688, 0.991206260813416, 0.9618576815065716, 0.9905023040030099, 0.9887983558226192, 0.9771446730802594, 0.2236564030765148, 0.23009930918569, 0.25046902779268043, 0.23634199814508294, 0.22070150632689223, 0.2366461355896914, 0.23356259907944898, 0.24318406256881397, 0.2513784088355079, 0.2999352934315027, 0.25340671651100843, 0.28155948329483427, 0.23385938569366327, 0.24604235390480267, 0.24107180368823133, 0.263897929076352, 0.2176918283373922, 0.2753644473643079, 0.12164915951578226, 0.12600549631524027, 0.14527934185178604, 0.14038624184383752, 0.12862152538311056, 0.13046749412087943, 0.1305914226195366, 0.13166503761689097, 0.13659260859163747, 0.14029891659401583, 0.08189124833738881, 0.11230804779914705, 0.12949661600877893, 0.10838891307786269, 0.14899924523031405, 0.1371389454661608, 0.11208418450656277, 0.13331811225578782, 0.003381060703172456, 0.015813749632998086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009402122920606382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055628466290829404, 0.052492943039321505, 0.057096516095144545, 0.11662067075505944, 0.022760157476136578, 0.08897873932271583, 0.08335454104858031, 0.09075830177411393, 0.11040738389709515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07674047630092462, 0.05371126469445675, 0.0707603269353313, 0.08380625926176488, 0.08431168801017175, 0.0697144810740028, 0.0645372096870831, 0.055052965279660415, 0.08092995381686974, 0.3540086411198987, 0.367701522517326, 0.3702612901338084, 0.36175990939635183, 0.3646146701480585, 0.35082866545551905, 0.35480181942681444, 0.38815709083189287, 0.3699616938692195, 0.09787452344452197, 0.08874676765320744, 0.08639399820526417, 0.09770984763198998, 0.09246321953601622, 0.0922109035295029, 0.08811005468269362, 0.10050520425866416, 0.09659022287748831, 0.14566028725276936, 0.13901074086752174, 0.20429783079330255, 0.1400125854641674, 0.14003723546398672, 0.14966685437992233, 0.14839480198730948, 0.18649473191887367, 0.14181634509989727, 0.2701045085520375, 0.273238367911931, 0.26097647458274764, 0.25226641114064985, 0.2550778261372232, 0.2567579772839934, 0.2609586599030299, 0.26411319966899804, 0.26338598607952346, 0.19727119775860402, 0.1931758036136748, 0.19118661654937807, 0.18903123413498957, 0.20318914631193008, 0.20711379211098602, 0.18911810038988408, 0.17996380507329812, 0.1952885226292832, 0.19053770538506554, 0.18484904520779155, 0.2231432164502788, 0.19306900168219965, 0.1990836670063646, 0.21274109725026424, 0.24022991989895615, 0.19213287682285307, 0.22290411547111055, 0.18030329037453174, 0.19415078647797068, 0.1949959734798914, 0.19984569392830642, 0.1773192472243338, 0.1821652233464044, 0.17857852719517864, 0.17049149993531298, 0.18042205873478212, 0.5783363882716217, 0.16756144377459536, 0.15285450059735617, 0.5198643783574641, 0.19452174778115505, 0.5290996174719657, 0.48639139720830193, 0.1956467210943803, 0.46853188962189474, 0.38283070141444975, 0.35226277306286113, 0.16476575678502248, 0.46307550231976735, 0.3002070355983091, 0.20659704390491174, 0.1045427416418444, 0.2081042422148569, 0.2055263124917217, 0.17649779531882415, 0.17201163884290893, 0.17281220751652893, 0.20510699118608977, 0.18043790289739192, 0.18533246421946958, 0.19846143565793684, 0.1859923703561288, 0.19151847485231688, 0.08146199193638726, 0.09379755774492582, 0.08097999072200635, 0.0817440164873513, 0.07591868815616798, 0.07388124327707413, 0.08932882895973548, 0.07611896450076983, 0.08965917328260387]}, "mutation_prompt": null}
{"id": "3ec88f41-dea1-49db-8c1e-dda3e2c392a9", "solution": "import numpy as np\n\nclass Adaptive_PSO_DE_Metaheuristic(PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.pso_w_range = [0.4, 0.9]\n        self.pso_c1_range = [1.0, 2.0]\n        self.pso_c2_range = [1.0, 2.0]\n        self.de_f_range = [0.4, 0.9]\n        self.de_cr_range = [0.7, 1.0]\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for _ in range(self.budget):\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                self.pso_w = np.clip(self.pso_w, *self.pso_w_range)\n                self.pso_c1 = np.clip(self.pso_c1, *self.pso_c1_range)\n                self.pso_c2 = np.clip(self.pso_c2, *self.pso_c2_range)\n                self.de_f = np.clip(self.de_f, *self.de_f_range)\n                self.de_cr = np.clip(self.de_cr, *self.de_cr_range)\n                velocities = self.pso_w * velocities + self.pso_c1 * r1 * (personal_best - swarm) + self.pso_c2 * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < self.de_cr or j == j_rand:\n                            trial[j] = a[j] + self.de_f * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_PSO_DE_Metaheuristic", "description": "Improved PSO_DE_Metaheuristic algorithm with adaptive parameters for better exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": 0.3424025528467531, "feedback": "The algorithm Adaptive_PSO_DE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "922f21b9-897d-4a7e-ba59-af8c715152da", "metadata": {"aucs": [0.845539308878076, 0.844224782188431, 0.8555184064285496, 0.8459229961465456, 0.842382006559246, 0.8330961267630177, 0.8495340560978284, 0.8449130452674073, 0.8389496009003423, 0.6962879559102008, 0.702393931177579, 0.6950848479314985, 0.7235046049097422, 0.6955791972061739, 0.7094302176845406, 0.6947721375915292, 0.6838827672753331, 0.7152197762142334, 0.15295959463447872, 0.13880591255378893, 0.1281361050058284, 0.13735119225420223, 0.14184973195009298, 0.1418077374080542, 0.13150792608578954, 0.1684658647806384, 0.1658096395113534, 0.14590467777686134, 0.10935489795690123, 0.13725919815557486, 0.09897780921780319, 0.11997971259529827, 0.13192799873340355, 0.13284770289638692, 0.13794002434739083, 0.11136537686560355, 0.989054586744259, 0.9917037911644666, 0.9892775751985323, 0.989093676187814, 0.9883513490809223, 0.9870724069309348, 0.9890435878733695, 0.9861701645974825, 0.9896985440030966, 0.6845651413235054, 0.6693122932654789, 0.6561116516590236, 0.6668268437188634, 0.6883982318359354, 0.6731301195414708, 0.6633891083880625, 0.6506362252803387, 0.653478684355345, 0.22386921102113955, 0.2205921265811468, 0.8399504226884602, 0.2743989406691306, 0.8677473208363536, 0.7987143646098239, 0.8072939184176458, 0.8204411175286296, 0.22432251723854824, 0.23808530845869624, 0.21680420623462504, 0.2197848823937395, 0.21675389809404033, 0.30137013532796, 0.23502446945169142, 0.24790813725747807, 0.2246074059040628, 0.37304506872119314, 0.24621914917511079, 0.08724619084925811, 0.24291500085739737, 0.13121408667726608, 0.24729892470732706, 0.24777181232033563, 0.2684594456244709, 0.22678077349974857, 0.271826249101221, 0.07735939888944066, 0.056470950438671896, 0.013497725609965316, 0.051205442834121984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02708498558356298, 0.07922689730673516, 0.08707942720744088, 0.17212183715441065, 0.06992422050616387, 0.01673192975239779, 0.039032220575157206, 0.017679714519445056, 0.1208826147093578, 0.00738888493630474, 9.999999999998899e-05, 0.24109182970463072, 0.16948775013004147, 0.325760608858626, 0.1633904207754534, 0.12603026899973646, 0.23347373947789452, 0.2158190561472414, 0.03822211081216098, 0.107860913846477, 0.2495303001920568, 0.1927752704099377, 0.38163705601356046, 0.09763809846847049, 0.16582374961936563, 0.26376328104466806, 0.12251590013699754, 0.07994255910140824, 0.5761269692033562, 0.6073635215316739, 0.5785054665538341, 0.5568014714171006, 0.5833153481524502, 0.5370347465551534, 0.6153389554898049, 0.5587274131485097, 0.588452630357107, 0.12161961134712018, 0.11673663130481438, 0.13224642609964288, 0.12266577049506455, 0.33347061077543205, 0.139921155166029, 0.11167763811696918, 0.1026828347457649, 0.16355570119043683, 0.24787460018142526, 0.1413022567900012, 0.2559420906717612, 0.2910235728598952, 0.41521926133412435, 0.21030340152703753, 0.37898498977256867, 0.23358831287953552, 0.5372969334274633, 0.6008061709719212, 0.3316634967555063, 0.5443138756789994, 0.5488238042377296, 0.503860406595753, 0.41521858838250714, 0.6368011893262134, 0.6423232852405305, 0.5919193579409268, 0.2980944373758806, 0.26868372834945553, 0.4590353673755002, 0.2975391492818469, 0.18853572781374173, 0.3290748433317272, 0.24502174596651594, 0.3021116711828704, 0.235604536453888, 0.221366048368565, 0.20659176940124802, 0.22140945105691412, 0.22405816260926203, 0.20985134687942186, 0.21968114495709312, 0.21849974253569093, 0.21159528839056851, 0.2328497430680001, 0.7087678118983973, 0.23996980549493974, 0.19882528248179754, 0.23162776458085532, 0.23886740634292214, 0.19192756153825608, 0.2446504199006032, 0.20336823148514327, 0.21914288536905557, 0.20999820470706432, 0.17398603481592145, 0.15186150194064263, 0.17151061843390214, 0.19881548770194113, 0.1986415438787863, 0.12970856158852073, 0.16685353348159115, 0.8958040767874772, 0.8100363255048286, 0.15539450210975936, 0.207418384401178, 0.8101258143276311, 0.20245334658656744, 0.21106555682218386, 0.10386227119883662, 0.1047377103811481, 0.7721014561056636, 0.183389530026009, 0.21270625603459514, 0.20079376609494415, 0.18048440878449223, 0.17125385713670094, 0.18054684303090185, 0.179860755592277, 0.19087249356894254, 0.1878137142156977, 0.13707816886946234, 0.08815534910006628, 0.09048203496045082, 0.0948706488705453, 0.0874163309098609, 0.08092747351240837, 0.10405041824807726, 0.08586561826756656, 0.10255415017067937]}, "mutation_prompt": null}
{"id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "solution": "import numpy as np\n\nclass Improved_PSO_DE_Metaheuristic(PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.initial_budget = budget\n        self.dynamic_threshold = 0.1\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_PSO_DE_Metaheuristic", "description": "Improved version of PSO_DE_Metaheuristic by adding a dynamic adjustment mechanism for the algorithm parameters based on the search progress.", "configspace": "", "generation": 5, "fitness": 0.3496493568428097, "feedback": "The algorithm Improved_PSO_DE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "922f21b9-897d-4a7e-ba59-af8c715152da", "metadata": {"aucs": [0.8554825585643644, 0.8625289939042767, 0.8562857245079174, 0.8470094528088556, 0.8489241113411456, 0.8360300788752331, 0.8495683463871515, 0.8428211659792448, 0.8376893784775765, 0.6951303792376844, 0.6902783877453433, 0.7064354092620415, 0.6965515504017982, 0.7069846386504476, 0.716285166032121, 0.7042338872778857, 0.681136166638733, 0.7033986233236084, 0.1439082916535508, 0.15126326070844243, 0.1458348122649732, 0.15033065923389388, 0.12470828405324608, 0.13709434882247473, 0.6264765034522255, 0.17230684495252713, 0.17506945787654626, 0.13200783019880913, 0.14398135370812748, 0.13760275128149602, 0.10998087639412879, 0.11193269861333865, 0.1347282787272852, 0.10429676887138195, 0.11163103939501307, 0.13097619001589678, 0.9890544840017738, 0.9917037033248258, 0.9892771497646852, 0.9890938170349517, 0.9883512322812326, 0.9870723808773648, 0.9890434998425124, 0.9861701372529823, 0.9896976820618211, 0.6920296074640185, 0.6510182473400217, 0.6584908998904702, 0.6722489673373009, 0.6831604969296642, 0.6863588056210382, 0.6705805177338762, 0.6482310371330091, 0.6530582327434846, 0.780717176656177, 0.2028351341158935, 0.8430818076147916, 0.2751308014859939, 0.8760226113810464, 0.2737012507979958, 0.8139620384562893, 0.8114905727035564, 0.22717837642600713, 0.20268915877449956, 0.12599624503502294, 0.23444721994547146, 0.24368755612331194, 0.39313701689575997, 0.21636900604596732, 0.5259726146633081, 0.5862065026044322, 0.15214775856178753, 0.21848270749647458, 0.11449675215522692, 0.22798801632413956, 0.23512239799573553, 0.23455319869898872, 0.2449169224686789, 0.2685499766779692, 0.25058584307632237, 0.2659191782138828, 0.024059081788567305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05753390315817819, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013640251835029815, 0.006985011813520403, 0.14099962761650553, 0.054770494930273306, 0.17339726093928443, 0.08560602025643782, 9.999999999998899e-05, 0.047396649268432345, 0.09637345308212775, 0.17968556979552375, 0.03942459184806757, 9.999999999998899e-05, 0.35760759483413973, 0.09978670337449425, 0.0547863232250555, 0.12261941546423605, 0.08014873892503782, 0.27115537143846846, 0.13891124701373314, 0.0484515953063952, 0.1264095590980422, 0.2058518291010505, 0.1351159510177562, 0.1690132561126153, 0.17361648921343442, 0.1979410669950118, 0.18782429636174713, 0.12803835612171355, 0.12733049588302237, 0.5596172558453325, 0.5933338482685826, 0.5995445391456616, 0.5831370230384159, 0.5925121658215959, 0.5972126929755631, 0.578922599907663, 0.579042257710662, 0.5713555575164075, 0.12961854000704987, 0.11386197151745725, 0.5202545906658549, 0.14600596221954731, 0.12924183959805247, 0.09957576446218408, 0.12692157931298875, 0.13596804177174893, 0.13982894785400146, 0.22170897014246826, 0.19751267251457172, 0.2044627539555125, 0.13465808900178378, 0.2583558642695388, 0.2060999930434244, 0.33264649680915204, 0.2974864101332979, 0.36691289894942336, 0.5416994491659968, 0.44714126474423654, 0.46733066879550555, 0.4722445940374127, 0.6119416139489682, 0.6235504006606085, 0.5717665103432886, 0.6366053368461491, 0.6114928760177447, 0.4138075986021037, 0.25944849377637647, 0.33368198545314, 0.28005002128818646, 0.19018535787373503, 0.3334153492302151, 0.3616563777074754, 0.41224727978048836, 0.3978216350696996, 0.2233682000144135, 0.2090035976262017, 0.20250077723349313, 0.21921196433208678, 0.24530256453687582, 0.21919638075300352, 0.2064775005958599, 0.18348622002660564, 0.2353262250963405, 0.24787647163617377, 0.20711954514800424, 0.21753037396843478, 0.7076793942074995, 0.20297586471715856, 0.21663336872783479, 0.24256091297862836, 0.19963401867096886, 0.24186460475781824, 0.2100637290567312, 0.18480805376789444, 0.15203076133340931, 0.8761571999944279, 0.19882257753936605, 0.19866692022802823, 0.12943192766995348, 0.16656478900187344, 0.914295585963258, 0.830134168636997, 0.15544004747388185, 0.20766860915743401, 0.8102760555696612, 0.20274659001517326, 0.2107319317170805, 0.10374733761680999, 0.10474233645997066, 0.8078069808118165, 0.1831510009244094, 0.1724615263354934, 0.17877546232559016, 0.17729870102455425, 0.17824140177368974, 0.17747848459389404, 0.21450806061526195, 0.17827872279421786, 0.17686663043616901, 0.114757316296202, 0.08984098571520593, 0.08914369909376141, 0.08567550768550103, 0.09443086037145698, 0.08935364115383526, 0.08698812841823766, 0.08738741490170066, 0.10201681791234773]}, "mutation_prompt": null}
{"id": "252582d3-f5bc-4262-a01a-676043b8f858", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Metaheuristic(Improved_PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, levy_beta=1.5):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.levy_beta = levy_beta\n\n    def __call__(self, func):\n        def pso_de_levy_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    \n                    # Integrate Levy flight mutation\n                    levy_step = np.random.standard_cauchy(self.dim) / np.power(np.abs(np.random.normal()) + 1e-20, 1 / self.levy_beta)\n                    trial += levy_step\n\n                    trial = np.clip(trial, -5.0, 5.0)\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_levy_optimizer()", "name": "Enhanced_PSO_DE_Metaheuristic", "description": "Further enhance the PSO-DE hybrid algorithm by incorporating a mutation strategy based on Levy flights to explore the search space more efficiently.", "configspace": "", "generation": 6, "fitness": 0.1489358409389003, "feedback": "The algorithm Enhanced_PSO_DE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.24049433951934318, 0.25575140947406727, 0.2701842757979883, 0.2511817129496683, 0.25017485964592134, 0.272305093058512, 0.2355085653419564, 0.24924908442898241, 0.2695373449640531, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07293347352066615, 0.06557105832886923, 0.06191996693833057, 0.05948272159970469, 0.06325830975039792, 0.05965041516667846, 0.09049424284896324, 0.07443924567749804, 0.06198799512624387, 0.055468695050495787, 0.048367503330203565, 0.049133324835739955, 0.05063575165702838, 0.05646602144734203, 0.05427548416467276, 0.054643569017502, 0.053722946359695434, 0.05602850610042276, 0.9830523344363047, 0.9920898640211874, 0.9863179261340417, 0.9880166595766675, 0.9939705812818936, 0.9942671271179988, 0.992990571977881, 0.9906547050590552, 0.9918802010580003, 0.13115983064653192, 0.11735115948302788, 0.10404708034055166, 0.13345315223790566, 0.12381561111351291, 0.11270025783111393, 0.14399635161862911, 0.1166293309750307, 0.1168058046439594, 0.17295904894730252, 0.1502493751015629, 0.157091489120187, 0.19223529227362302, 0.17533711882767788, 0.16535236296325495, 0.16963182368386698, 0.15483265173964522, 0.1567274126554521, 0.0447073909737159, 0.05382561119111562, 0.058859560389338594, 0.03778381666732733, 0.052629960670460996, 0.0566138921325946, 0.007580198512295633, 0.05620612015172133, 0.10006731485031595, 0.04303478206434119, 0.026547492769368186, 0.0191731551273846, 0.04004110822446605, 0.05050235857419905, 0.05825086694561854, 0.003704554907652202, 0.05641206967887413, 0.03732005955351436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05474169080101565, 0.023980186145790006, 0.048933066545586046, 0.06297250718258018, 0.03677589370803003, 0.03562257206566133, 0.04441636818823902, 0.03663181011504002, 0.07019284187919805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007381091950525165, 0.00805975770182199, 0.005264587152900679, 0.022091155159911446, 0.032440631972644796, 0.011007890203396875, 0.023056420135720734, 0.027985702789986466, 0.03193138177041943, 0.2582563826529076, 0.23702117332093908, 0.25290644865657463, 0.2698079648235435, 0.23541608874621556, 0.2428371245229295, 0.2411149413859831, 0.23249014080355446, 0.24833862831596243, 0.06154250970703912, 0.06811356631733156, 0.055299138618892685, 0.08934108754812209, 0.07044536931000367, 0.07656842756331805, 0.06972319888943479, 0.07640362778917875, 0.07154863128230549, 0.1811098036242288, 0.1479782153901924, 0.1326116895734165, 0.1375091296598956, 0.18065480346968765, 0.13283774070909837, 0.13859418627210252, 0.13040839031316953, 0.1291288594350628, 0.1892132802181581, 0.19946497546110353, 0.1882083060679155, 0.19175117478711545, 0.19161837692575245, 0.19955703995369456, 0.20409699332942077, 0.2220239088219873, 0.1948626312166608, 0.14113658902658988, 0.14304183708259677, 0.12011690211706594, 0.11926047691446162, 0.13516235797681675, 0.1368330051819434, 0.14926728622722873, 0.14439200958112397, 0.1759342374310945, 0.1678890267628218, 0.16799333765411195, 0.16404010849353545, 0.1661612899408509, 0.16421321981418657, 0.1674453635289077, 0.17365599318870373, 0.16049052362468008, 0.16605290210825474, 0.15896150640153828, 0.1563050889813623, 0.17695944364478056, 0.1675408448357748, 0.17054724606513538, 0.16195884049252418, 0.1599551817613064, 0.15085566677927453, 0.15551676299241335, 0.2948728572483523, 0.22345411102371826, 0.13905184106289237, 0.21944657417272373, 0.22761956388617433, 0.15021226580398472, 0.1319005981065049, 0.16710173060889444, 0.13350894385505852, 0.21762111878914225, 0.17957471213869192, 0.16150505466706855, 0.17211427074533092, 0.1992102516565989, 0.21341415185183354, 0.19057085965226328, 0.24697593747196156, 0.1947332935549383, 0.17971957674604055, 0.18465977285293433, 0.18720918408761567, 0.1718224453381103, 0.1837524214837435, 0.1879353033202097, 0.176110840316983, 0.19312215125645038, 0.1873517385167185, 0.07970875807152356, 0.0672121434165025, 0.07491283128939052, 0.062238149925295194, 0.06087634038683809, 0.05372701576591521, 0.07391850660242305, 0.06937507303252455, 0.06318334018555016]}, "mutation_prompt": null}
{"id": "c4ae110b-4d32-4506-85cc-974d08a97105", "solution": "import numpy as np\nfrom scipy.stats import logistic\n\nclass Chaotic_Improved_PSO_DE_Metaheuristic(Improved_PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, chaotic_factor=0.01):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.chaotic_factor = chaotic_factor\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                \n                # Introducing chaotic perturbation\n                chaotic_values = logistic.cdf(np.arange(self.swarm_size * self.dim)).reshape(self.swarm_size, self.dim)\n                swarm += self.chaotic_factor * chaotic_values * np.random.uniform(low=-1, high=1, size=(self.swarm_size, self.dim))\n                \n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Chaotic_Improved_PSO_DE_Metaheuristic", "description": "Introducing a chaotic perturbation for exploration and exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.08811393815662034, "feedback": "The algorithm Chaotic_Improved_PSO_DE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.16587867276090218, 0.15565586126963626, 0.17648004807364503, 0.12815595171838845, 0.1461795037979473, 0.15530723926212253, 0.18848390128560133, 0.19758403431174998, 0.16065090376998126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053680139073360444, 0.045039604835263924, 0.04241238600648545, 0.044315304099888264, 0.033413004445041916, 0.039628007458673564, 0.037745782007459594, 0.027399419368002276, 0.045467202798105455, 0.049025470863162224, 0.024146980161066867, 0.028017549002195996, 0.038339624339339795, 0.027659658405523646, 0.032519325642725416, 0.0319255964858437, 0.025451894410719933, 0.023032570149048137, 0.09412645079639237, 0.2076021976816067, 0.08500039482406518, 0.10231487241198611, 0.09226362476783656, 0.10600587015852292, 0.12836119501226206, 0.09083591465489604, 0.09253889654223224, 0.07633849488578492, 0.08020729142091454, 0.11076869447700011, 0.09237093532703877, 0.040169026212346526, 0.06770197718294313, 0.04985833537658624, 0.07448450880778235, 0.07144756366989236, 0.12436713822751588, 0.11175967374896367, 0.11652581033932907, 0.11943506292638106, 0.11766528859119407, 0.10373628394172063, 0.10671151921699051, 0.12338409747848744, 0.11294267393280077, 0.00023726683177449637, 0.01109341417735743, 0.013752301210942064, 9.999999999998899e-05, 0.019096327932402568, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02049149636046499, 9.999999999998899e-05, 0.012560322712692362, 0.0008468339278159265, 9.999999999998899e-05, 0.019603601058228892, 0.0007224671977114072, 9.999999999998899e-05, 0.03382534223285982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04114554576295426, 0.031479858015504014, 0.06456853582781719, 0.040631378655055284, 0.06510739183953507, 0.04382707977573341, 0.06777213778223468, 0.04035897498911112, 0.025714272268740235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2014324696045835, 0.1670657373785367, 0.19537143186521866, 0.1967876443163089, 0.16862245768652662, 0.2130111135478472, 0.2004297613782775, 0.17327751534816904, 0.21098167707337345, 0.02790587494167318, 0.033181780081430357, 0.014821112368497813, 0.056295863067177154, 0.0360135299827139, 0.04630181626125596, 0.05795194552852423, 0.031222859343261522, 0.04339144154446406, 0.12941616064746608, 0.13194350122069298, 0.12154028764682911, 0.12860118904129414, 0.1397405343633522, 0.2269004321757172, 0.12761303714792016, 0.12448180867670622, 0.13176414137794512, 0.1502384689969002, 0.14643055601085253, 0.15542336722927308, 0.1658166849952336, 0.18583251704111925, 0.15579090271223106, 0.16643012729774076, 0.17377774300845283, 0.15166835462235617, 0.09325733017780857, 0.10919796555019223, 0.10373791569134261, 0.10699847866425283, 0.147479997025051, 0.11281142800608668, 0.10064568562272613, 0.10127132048892362, 0.09377347001865621, 0.16153215015089206, 0.1564689603193372, 0.1648565818606752, 0.1525482420116585, 0.17871294795419124, 0.1742313281218658, 0.15601085844797613, 0.1269283437940143, 0.15874566355507336, 0.13944549518437765, 0.13567463382674272, 0.14737893666190682, 0.14674284910601854, 0.15296815159158172, 0.140465858675352, 0.16500962194447144, 0.1489547995640853, 0.14662036733429595, 0.20331545637698345, 0.21058169464066023, 0.16107523144178992, 0.2184459259551116, 0.14583720564638258, 0.21568796465763407, 0.16470321770736285, 0.12043907517498642, 0.15285970247550318, 0.13967541054563282, 0.24278649148221432, 0.17914463410347203, 0.16823188560376567, 0.13557533385427178, 0.13515764361923155, 0.13946143950984247, 0.23998980921330815, 0.1251928597879436, 0.17572220582206644, 0.17663608293438027, 0.17109514511505675, 0.16879769839749692, 0.17979064530890432, 0.17931887571865357, 0.19745141969503943, 0.17388168558235284, 0.17597847672382938, 0.043846888327767175, 0.04134374142528974, 0.05430726925061646, 0.04866786198111184, 0.05045709055281766, 0.05130790292712595, 0.03996398642250765, 0.05293459384806809, 0.06324888614704505]}, "mutation_prompt": null}
{"id": "1d484f5b-1c96-4e6c-b818-64e5f44b9c66", "solution": "import numpy as np\n\nclass Improved_PSO_DE_Metaheuristic(PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.initial_budget = budget\n        self.dynamic_threshold = 0.1\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_PSO_DE_Metaheuristic", "description": "Improved version of PSO_DE_Metaheuristic by adding a dynamic adjustment mechanism for the algorithm parameters based on the search progress.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.8554825585643644, 0.8625289939042767, 0.8562857245079174, 0.8470094528088556, 0.8489241113411456, 0.8360300788752331, 0.8495683463871515, 0.8428211659792448, 0.8376893784775765, 0.6951303792376844, 0.6902783877453433, 0.7064354092620415, 0.6965515504017982, 0.7069846386504476, 0.716285166032121, 0.7042338872778857, 0.681136166638733, 0.7033986233236084, 0.1439082916535508, 0.15126326070844243, 0.1458348122649732, 0.15033065923389388, 0.12470828405324608, 0.13709434882247473, 0.6264765034522255, 0.17230684495252713, 0.17506945787654626, 0.13200783019880913, 0.14398135370812748, 0.13760275128149602, 0.10998087639412879, 0.11193269861333865, 0.1347282787272852, 0.10429676887138195, 0.11163103939501307, 0.13097619001589678, 0.9890544840017738, 0.9917037033248258, 0.9892771497646852, 0.9890938170349517, 0.9883512322812326, 0.9870723808773648, 0.9890434998425124, 0.9861701372529823, 0.9896976820618211, 0.6920296074640185, 0.6510182473400217, 0.6584908998904702, 0.6722489673373009, 0.6831604969296642, 0.6863588056210382, 0.6705805177338762, 0.6482310371330091, 0.6530582327434846, 0.780717176656177, 0.2028351341158935, 0.8430818076147916, 0.2751308014859939, 0.8760226113810464, 0.2737012507979958, 0.8139620384562893, 0.8114905727035564, 0.22717837642600713, 0.20268915877449956, 0.12599624503502294, 0.23444721994547146, 0.24368755612331194, 0.39313701689575997, 0.21636900604596732, 0.5259726146633081, 0.5862065026044322, 0.15214775856178753, 0.21848270749647458, 0.11449675215522692, 0.22798801632413956, 0.23512239799573553, 0.23455319869898872, 0.2449169224686789, 0.2685499766779692, 0.25058584307632237, 0.2659191782138828, 0.024059081788567305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05753390315817819, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013640251835029815, 0.006985011813520403, 0.14099962761650553, 0.054770494930273306, 0.17339726093928443, 0.08560602025643782, 9.999999999998899e-05, 0.047396649268432345, 0.09637345308212775, 0.17968556979552375, 0.03942459184806757, 9.999999999998899e-05, 0.35760759483413973, 0.09978670337449425, 0.0547863232250555, 0.12261941546423605, 0.08014873892503782, 0.27115537143846846, 0.13891124701373314, 0.0484515953063952, 0.1264095590980422, 0.2058518291010505, 0.1351159510177562, 0.1690132561126153, 0.17361648921343442, 0.1979410669950118, 0.18782429636174713, 0.12803835612171355, 0.12733049588302237, 0.5596172558453325, 0.5933338482685826, 0.5995445391456616, 0.5831370230384159, 0.5925121658215959, 0.5972126929755631, 0.578922599907663, 0.579042257710662, 0.5713555575164075, 0.12961854000704987, 0.11386197151745725, 0.5202545906658549, 0.14600596221954731, 0.12924183959805247, 0.09957576446218408, 0.12692157931298875, 0.13596804177174893, 0.13982894785400146, 0.22170897014246826, 0.19751267251457172, 0.2044627539555125, 0.13465808900178378, 0.2583558642695388, 0.2060999930434244, 0.33264649680915204, 0.2974864101332979, 0.36691289894942336, 0.5416994491659968, 0.44714126474423654, 0.46733066879550555, 0.4722445940374127, 0.6119416139489682, 0.6235504006606085, 0.5717665103432886, 0.6366053368461491, 0.6114928760177447, 0.4138075986021037, 0.25944849377637647, 0.33368198545314, 0.28005002128818646, 0.19018535787373503, 0.3334153492302151, 0.3616563777074754, 0.41224727978048836, 0.3978216350696996, 0.2233682000144135, 0.2090035976262017, 0.20250077723349313, 0.21921196433208678, 0.24530256453687582, 0.21919638075300352, 0.2064775005958599, 0.18348622002660564, 0.2353262250963405, 0.24787647163617377, 0.20711954514800424, 0.21753037396843478, 0.7076793942074995, 0.20297586471715856, 0.21663336872783479, 0.24256091297862836, 0.19963401867096886, 0.24186460475781824, 0.2100637290567312, 0.18480805376789444, 0.15203076133340931, 0.8761571999944279, 0.19882257753936605, 0.19866692022802823, 0.12943192766995348, 0.16656478900187344, 0.914295585963258, 0.830134168636997, 0.15544004747388185, 0.20766860915743401, 0.8102760555696612, 0.20274659001517326, 0.2107319317170805, 0.10374733761680999, 0.10474233645997066, 0.8078069808118165, 0.1831510009244094, 0.1724615263354934, 0.17877546232559016, 0.17729870102455425, 0.17824140177368974, 0.17747848459389404, 0.21450806061526195, 0.17827872279421786, 0.17686663043616901, 0.114757316296202, 0.08984098571520593, 0.08914369909376141, 0.08567550768550103, 0.09443086037145698, 0.08935364115383526, 0.08698812841823766, 0.08738741490170066, 0.10201681791234773]}, "mutation_prompt": null}
{"id": "9a7eff59-0c72-47e1-8c7e-d728aba56bed", "solution": "import numpy as np\n\nclass Improved_PSO_DE_Metaheuristic(PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.initial_budget = budget\n        self.dynamic_threshold = 0.1\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_PSO_DE_Metaheuristic", "description": "Improved version of PSO_DE_Metaheuristic by adding a dynamic adjustment mechanism for the algorithm parameters based on the search progress.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.8554825585643644, 0.8625289939042767, 0.8562857245079174, 0.8470094528088556, 0.8489241113411456, 0.8360300788752331, 0.8495683463871515, 0.8428211659792448, 0.8376893784775765, 0.6951303792376844, 0.6902783877453433, 0.7064354092620415, 0.6965515504017982, 0.7069846386504476, 0.716285166032121, 0.7042338872778857, 0.681136166638733, 0.7033986233236084, 0.1439082916535508, 0.15126326070844243, 0.1458348122649732, 0.15033065923389388, 0.12470828405324608, 0.13709434882247473, 0.6264765034522255, 0.17230684495252713, 0.17506945787654626, 0.13200783019880913, 0.14398135370812748, 0.13760275128149602, 0.10998087639412879, 0.11193269861333865, 0.1347282787272852, 0.10429676887138195, 0.11163103939501307, 0.13097619001589678, 0.9890544840017738, 0.9917037033248258, 0.9892771497646852, 0.9890938170349517, 0.9883512322812326, 0.9870723808773648, 0.9890434998425124, 0.9861701372529823, 0.9896976820618211, 0.6920296074640185, 0.6510182473400217, 0.6584908998904702, 0.6722489673373009, 0.6831604969296642, 0.6863588056210382, 0.6705805177338762, 0.6482310371330091, 0.6530582327434846, 0.780717176656177, 0.2028351341158935, 0.8430818076147916, 0.2751308014859939, 0.8760226113810464, 0.2737012507979958, 0.8139620384562893, 0.8114905727035564, 0.22717837642600713, 0.20268915877449956, 0.12599624503502294, 0.23444721994547146, 0.24368755612331194, 0.39313701689575997, 0.21636900604596732, 0.5259726146633081, 0.5862065026044322, 0.15214775856178753, 0.21848270749647458, 0.11449675215522692, 0.22798801632413956, 0.23512239799573553, 0.23455319869898872, 0.2449169224686789, 0.2685499766779692, 0.25058584307632237, 0.2659191782138828, 0.024059081788567305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05753390315817819, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013640251835029815, 0.006985011813520403, 0.14099962761650553, 0.054770494930273306, 0.17339726093928443, 0.08560602025643782, 9.999999999998899e-05, 0.047396649268432345, 0.09637345308212775, 0.17968556979552375, 0.03942459184806757, 9.999999999998899e-05, 0.35760759483413973, 0.09978670337449425, 0.0547863232250555, 0.12261941546423605, 0.08014873892503782, 0.27115537143846846, 0.13891124701373314, 0.0484515953063952, 0.1264095590980422, 0.2058518291010505, 0.1351159510177562, 0.1690132561126153, 0.17361648921343442, 0.1979410669950118, 0.18782429636174713, 0.12803835612171355, 0.12733049588302237, 0.5596172558453325, 0.5933338482685826, 0.5995445391456616, 0.5831370230384159, 0.5925121658215959, 0.5972126929755631, 0.578922599907663, 0.579042257710662, 0.5713555575164075, 0.12961854000704987, 0.11386197151745725, 0.5202545906658549, 0.14600596221954731, 0.12924183959805247, 0.09957576446218408, 0.12692157931298875, 0.13596804177174893, 0.13982894785400146, 0.22170897014246826, 0.19751267251457172, 0.2044627539555125, 0.13465808900178378, 0.2583558642695388, 0.2060999930434244, 0.33264649680915204, 0.2974864101332979, 0.36691289894942336, 0.5416994491659968, 0.44714126474423654, 0.46733066879550555, 0.4722445940374127, 0.6119416139489682, 0.6235504006606085, 0.5717665103432886, 0.6366053368461491, 0.6114928760177447, 0.4138075986021037, 0.25944849377637647, 0.33368198545314, 0.28005002128818646, 0.19018535787373503, 0.3334153492302151, 0.3616563777074754, 0.41224727978048836, 0.3978216350696996, 0.2233682000144135, 0.2090035976262017, 0.20250077723349313, 0.21921196433208678, 0.24530256453687582, 0.21919638075300352, 0.2064775005958599, 0.18348622002660564, 0.2353262250963405, 0.24787647163617377, 0.20711954514800424, 0.21753037396843478, 0.7076793942074995, 0.20297586471715856, 0.21663336872783479, 0.24256091297862836, 0.19963401867096886, 0.24186460475781824, 0.2100637290567312, 0.18480805376789444, 0.15203076133340931, 0.8761571999944279, 0.19882257753936605, 0.19866692022802823, 0.12943192766995348, 0.16656478900187344, 0.914295585963258, 0.830134168636997, 0.15544004747388185, 0.20766860915743401, 0.8102760555696612, 0.20274659001517326, 0.2107319317170805, 0.10374733761680999, 0.10474233645997066, 0.8078069808118165, 0.1831510009244094, 0.1724615263354934, 0.17877546232559016, 0.17729870102455425, 0.17824140177368974, 0.17747848459389404, 0.21450806061526195, 0.17827872279421786, 0.17686663043616901, 0.114757316296202, 0.08984098571520593, 0.08914369909376141, 0.08567550768550103, 0.09443086037145698, 0.08935364115383526, 0.08698812841823766, 0.08738741490170066, 0.10201681791234773]}, "mutation_prompt": null}
{"id": "fbee905d-dd24-4a80-855b-14096234fd30", "solution": "import numpy as np\n\nclass Levy_PSO_DE_Metaheuristic(PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.initial_budget = budget\n        self.dynamic_threshold = 0.1\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                \n                # Integrate Levy flight for exploration\n                levy = np.random.standard_cauchy((self.swarm_size, self.dim))\n                swarm += velocities + 0.01 * levy\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Levy_PSO_DE_Metaheuristic", "description": "Enhance the exploration-exploitation balance by incorporating a Levy flight strategy to update particle positions in the search space.", "configspace": "", "generation": 10, "fitness": 0.22454036848549275, "feedback": "The algorithm Levy_PSO_DE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.4582955156510482, 0.44174845500408744, 0.4619967378033353, 0.4678420521203135, 0.4425147902095474, 0.47152999559472486, 0.4362853755677497, 0.5081651551023467, 0.4390089004867944, 0.06852391687400505, 0.061571736934164845, 0.04978589913102427, 0.06368219474444048, 0.04753224318094129, 0.05514864790840346, 0.058249934334168585, 0.03981531456818843, 0.0614556191898904, 0.13529813726689843, 0.13823521780930403, 0.1184313925923196, 0.09697445093785029, 0.10234762525065177, 0.1219078800393254, 0.12098306802819714, 0.11742090543367634, 0.12573659422810413, 0.10425703888359039, 0.1083991841827514, 0.10471268066326433, 0.11041747046047645, 0.11391177927701579, 0.11099205140560697, 0.10616414399037077, 0.10451454586593478, 0.10375093198781271, 0.9899945251236432, 0.9914462842672793, 0.9914907968915393, 0.9860237615198506, 0.986022100879339, 0.9885088926458049, 0.9888239261169086, 0.9904576370808902, 0.9832695596085256, 0.29400479983899575, 0.29777014541150415, 0.3019335613957118, 0.2962796543687921, 0.29583805066247937, 0.3084901220593895, 0.29418576412016806, 0.2769360640776637, 0.2826093202965281, 0.2784615140688457, 0.3103598121767164, 0.6653314776203781, 0.27024466720657314, 0.3644008770270589, 0.3998832654041268, 0.4958141806243448, 0.2871913280262598, 0.23335244933866128, 0.2019420545395717, 0.15588677292854713, 0.15197774905104156, 0.16893247606451334, 0.14101643275200526, 0.17504956477692013, 0.16606192765273609, 0.15688736561532768, 0.20288239001988417, 0.1493388324218482, 0.15119045164307077, 0.17891790484667758, 0.16785203923037495, 0.1588805627318981, 0.16138958959064964, 0.12197508739866758, 0.14418173395385292, 0.17809187090946377, 9.999999999998899e-05, 9.999999999998899e-05, 0.03849693020343836, 9.999999999998899e-05, 9.999999999998899e-05, 0.017123946738341722, 0.01286144467220407, 9.999999999998899e-05, 0.027364786036892075, 0.06524928150955078, 0.03195327209346854, 0.04149380747797171, 0.042496549111267656, 0.05936533189374438, 0.03585597950010355, 0.027467425055346384, 0.13394177831940013, 0.08758407003111202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09663304308330023, 0.07178618887506671, 0.10153132556559308, 0.10332545108200741, 0.09699738072625774, 0.10443549014993281, 0.09382755426024503, 0.1117759283273907, 0.0876675433450742, 0.3857597004798159, 0.3960731035764996, 0.3993636320339238, 0.4092302501040984, 0.4020954629540906, 0.4260875233499971, 0.40124693779288445, 0.40585584377108586, 0.41062468127474216, 0.11595409362086939, 0.0886119899665988, 0.10928148810588922, 0.0995604629553567, 0.1042834537878694, 0.09187016942467785, 0.11319677546992823, 0.09150802935133995, 0.10472599308183472, 0.12902156590533065, 0.24202298746123252, 0.1276785665203355, 0.2233787012270384, 0.1766310923197465, 0.20135830159614965, 0.19207500811598188, 0.16590422794582393, 0.22157889520384666, 0.29866557615068245, 0.29636678075563894, 0.303062887214664, 0.280954312725073, 0.2998144514174087, 0.2906732846927711, 0.29364533103401635, 0.30635094009231123, 0.31622750541931144, 0.2522150578980573, 0.24169290967666146, 0.21828547989752412, 0.2509015934394888, 0.19544995403622778, 0.2276621707588613, 0.23728642065493077, 0.2478499182874747, 0.24648263421380634, 0.23428874823582369, 0.24720102829401336, 0.19409035879790482, 0.19262432029648757, 0.2009737163816535, 0.21063854081300426, 0.19670051456924598, 0.20221358034608827, 0.21758022606754257, 0.23403046484196666, 0.20141651763839086, 0.23014762632434516, 0.19972241308183902, 0.21797101011128994, 0.2101527911282547, 0.21939766810346806, 0.18888787201548107, 0.21286377868304152, 0.5771007717043435, 0.19352656561897563, 0.14651914984894188, 0.6923812750424956, 0.19801224102208714, 0.16820441934823738, 0.12141136222295701, 0.1683930902748112, 0.6693162786964222, 0.592692283312146, 0.1547382485632981, 0.2061634998113937, 0.2135144771168842, 0.16781037018828937, 0.1525949156409735, 0.2093693338673055, 0.16449838852499798, 0.43458034843668214, 0.17776325629484868, 0.19520155782954407, 0.20675325801792765, 0.17330221513409594, 0.1849217545837618, 0.2187342746015717, 0.18657561010686086, 0.1668196567471708, 0.17883102848558063, 0.09490626653713985, 0.07924841538999772, 0.08593223412611073, 0.08731603109967112, 0.08395828779838299, 0.09252299752855486, 0.09854356502534933, 0.07944660620747213, 0.07982680186835367]}, "mutation_prompt": null}
{"id": "e7dbff23-7d35-4513-9410-ef43eb2116f6", "solution": "import numpy as np\n\nclass Improved_PSO_DE_Metaheuristic(PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.initial_budget = budget\n        self.dynamic_threshold = 0.1\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_PSO_DE_Metaheuristic", "description": "Improved version of PSO_DE_Metaheuristic by adding a dynamic adjustment mechanism for the algorithm parameters based on the search progress.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.8554825585643644, 0.8625289939042767, 0.8562857245079174, 0.8470094528088556, 0.8489241113411456, 0.8360300788752331, 0.8495683463871515, 0.8428211659792448, 0.8376893784775765, 0.6951303792376844, 0.6902783877453433, 0.7064354092620415, 0.6965515504017982, 0.7069846386504476, 0.716285166032121, 0.7042338872778857, 0.681136166638733, 0.7033986233236084, 0.1439082916535508, 0.15126326070844243, 0.1458348122649732, 0.15033065923389388, 0.12470828405324608, 0.13709434882247473, 0.6264765034522255, 0.17230684495252713, 0.17506945787654626, 0.13200783019880913, 0.14398135370812748, 0.13760275128149602, 0.10998087639412879, 0.11193269861333865, 0.1347282787272852, 0.10429676887138195, 0.11163103939501307, 0.13097619001589678, 0.9890544840017738, 0.9917037033248258, 0.9892771497646852, 0.9890938170349517, 0.9883512322812326, 0.9870723808773648, 0.9890434998425124, 0.9861701372529823, 0.9896976820618211, 0.6920296074640185, 0.6510182473400217, 0.6584908998904702, 0.6722489673373009, 0.6831604969296642, 0.6863588056210382, 0.6705805177338762, 0.6482310371330091, 0.6530582327434846, 0.780717176656177, 0.2028351341158935, 0.8430818076147916, 0.2751308014859939, 0.8760226113810464, 0.2737012507979958, 0.8139620384562893, 0.8114905727035564, 0.22717837642600713, 0.20268915877449956, 0.12599624503502294, 0.23444721994547146, 0.24368755612331194, 0.39313701689575997, 0.21636900604596732, 0.5259726146633081, 0.5862065026044322, 0.15214775856178753, 0.21848270749647458, 0.11449675215522692, 0.22798801632413956, 0.23512239799573553, 0.23455319869898872, 0.2449169224686789, 0.2685499766779692, 0.25058584307632237, 0.2659191782138828, 0.024059081788567305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05753390315817819, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013640251835029815, 0.006985011813520403, 0.14099962761650553, 0.054770494930273306, 0.17339726093928443, 0.08560602025643782, 9.999999999998899e-05, 0.047396649268432345, 0.09637345308212775, 0.17968556979552375, 0.03942459184806757, 9.999999999998899e-05, 0.35760759483413973, 0.09978670337449425, 0.0547863232250555, 0.12261941546423605, 0.08014873892503782, 0.27115537143846846, 0.13891124701373314, 0.0484515953063952, 0.1264095590980422, 0.2058518291010505, 0.1351159510177562, 0.1690132561126153, 0.17361648921343442, 0.1979410669950118, 0.18782429636174713, 0.12803835612171355, 0.12733049588302237, 0.5596172558453325, 0.5933338482685826, 0.5995445391456616, 0.5831370230384159, 0.5925121658215959, 0.5972126929755631, 0.578922599907663, 0.579042257710662, 0.5713555575164075, 0.12961854000704987, 0.11386197151745725, 0.5202545906658549, 0.14600596221954731, 0.12924183959805247, 0.09957576446218408, 0.12692157931298875, 0.13596804177174893, 0.13982894785400146, 0.22170897014246826, 0.19751267251457172, 0.2044627539555125, 0.13465808900178378, 0.2583558642695388, 0.2060999930434244, 0.33264649680915204, 0.2974864101332979, 0.36691289894942336, 0.5416994491659968, 0.44714126474423654, 0.46733066879550555, 0.4722445940374127, 0.6119416139489682, 0.6235504006606085, 0.5717665103432886, 0.6366053368461491, 0.6114928760177447, 0.4138075986021037, 0.25944849377637647, 0.33368198545314, 0.28005002128818646, 0.19018535787373503, 0.3334153492302151, 0.3616563777074754, 0.41224727978048836, 0.3978216350696996, 0.2233682000144135, 0.2090035976262017, 0.20250077723349313, 0.21921196433208678, 0.24530256453687582, 0.21919638075300352, 0.2064775005958599, 0.18348622002660564, 0.2353262250963405, 0.24787647163617377, 0.20711954514800424, 0.21753037396843478, 0.7076793942074995, 0.20297586471715856, 0.21663336872783479, 0.24256091297862836, 0.19963401867096886, 0.24186460475781824, 0.2100637290567312, 0.18480805376789444, 0.15203076133340931, 0.8761571999944279, 0.19882257753936605, 0.19866692022802823, 0.12943192766995348, 0.16656478900187344, 0.914295585963258, 0.830134168636997, 0.15544004747388185, 0.20766860915743401, 0.8102760555696612, 0.20274659001517326, 0.2107319317170805, 0.10374733761680999, 0.10474233645997066, 0.8078069808118165, 0.1831510009244094, 0.1724615263354934, 0.17877546232559016, 0.17729870102455425, 0.17824140177368974, 0.17747848459389404, 0.21450806061526195, 0.17827872279421786, 0.17686663043616901, 0.114757316296202, 0.08984098571520593, 0.08914369909376141, 0.08567550768550103, 0.09443086037145698, 0.08935364115383526, 0.08698812841823766, 0.08738741490170066, 0.10201681791234773]}, "mutation_prompt": null}
{"id": "8a718c00-d29c-4fb4-ab0f-c94e11bfd7de", "solution": "import numpy as np\n\nclass Improved_PSO_DE_Metaheuristic(PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.initial_budget = budget\n        self.dynamic_threshold = 0.1\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_PSO_DE_Metaheuristic", "description": "Improved version of PSO_DE_Metaheuristic by adding a dynamic adjustment mechanism for the algorithm parameters based on the search progress.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.8554825585643644, 0.8625289939042767, 0.8562857245079174, 0.8470094528088556, 0.8489241113411456, 0.8360300788752331, 0.8495683463871515, 0.8428211659792448, 0.8376893784775765, 0.6951303792376844, 0.6902783877453433, 0.7064354092620415, 0.6965515504017982, 0.7069846386504476, 0.716285166032121, 0.7042338872778857, 0.681136166638733, 0.7033986233236084, 0.1439082916535508, 0.15126326070844243, 0.1458348122649732, 0.15033065923389388, 0.12470828405324608, 0.13709434882247473, 0.6264765034522255, 0.17230684495252713, 0.17506945787654626, 0.13200783019880913, 0.14398135370812748, 0.13760275128149602, 0.10998087639412879, 0.11193269861333865, 0.1347282787272852, 0.10429676887138195, 0.11163103939501307, 0.13097619001589678, 0.9890544840017738, 0.9917037033248258, 0.9892771497646852, 0.9890938170349517, 0.9883512322812326, 0.9870723808773648, 0.9890434998425124, 0.9861701372529823, 0.9896976820618211, 0.6920296074640185, 0.6510182473400217, 0.6584908998904702, 0.6722489673373009, 0.6831604969296642, 0.6863588056210382, 0.6705805177338762, 0.6482310371330091, 0.6530582327434846, 0.780717176656177, 0.2028351341158935, 0.8430818076147916, 0.2751308014859939, 0.8760226113810464, 0.2737012507979958, 0.8139620384562893, 0.8114905727035564, 0.22717837642600713, 0.20268915877449956, 0.12599624503502294, 0.23444721994547146, 0.24368755612331194, 0.39313701689575997, 0.21636900604596732, 0.5259726146633081, 0.5862065026044322, 0.15214775856178753, 0.21848270749647458, 0.11449675215522692, 0.22798801632413956, 0.23512239799573553, 0.23455319869898872, 0.2449169224686789, 0.2685499766779692, 0.25058584307632237, 0.2659191782138828, 0.024059081788567305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05753390315817819, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013640251835029815, 0.006985011813520403, 0.14099962761650553, 0.054770494930273306, 0.17339726093928443, 0.08560602025643782, 9.999999999998899e-05, 0.047396649268432345, 0.09637345308212775, 0.17968556979552375, 0.03942459184806757, 9.999999999998899e-05, 0.35760759483413973, 0.09978670337449425, 0.0547863232250555, 0.12261941546423605, 0.08014873892503782, 0.27115537143846846, 0.13891124701373314, 0.0484515953063952, 0.1264095590980422, 0.2058518291010505, 0.1351159510177562, 0.1690132561126153, 0.17361648921343442, 0.1979410669950118, 0.18782429636174713, 0.12803835612171355, 0.12733049588302237, 0.5596172558453325, 0.5933338482685826, 0.5995445391456616, 0.5831370230384159, 0.5925121658215959, 0.5972126929755631, 0.578922599907663, 0.579042257710662, 0.5713555575164075, 0.12961854000704987, 0.11386197151745725, 0.5202545906658549, 0.14600596221954731, 0.12924183959805247, 0.09957576446218408, 0.12692157931298875, 0.13596804177174893, 0.13982894785400146, 0.22170897014246826, 0.19751267251457172, 0.2044627539555125, 0.13465808900178378, 0.2583558642695388, 0.2060999930434244, 0.33264649680915204, 0.2974864101332979, 0.36691289894942336, 0.5416994491659968, 0.44714126474423654, 0.46733066879550555, 0.4722445940374127, 0.6119416139489682, 0.6235504006606085, 0.5717665103432886, 0.6366053368461491, 0.6114928760177447, 0.4138075986021037, 0.25944849377637647, 0.33368198545314, 0.28005002128818646, 0.19018535787373503, 0.3334153492302151, 0.3616563777074754, 0.41224727978048836, 0.3978216350696996, 0.2233682000144135, 0.2090035976262017, 0.20250077723349313, 0.21921196433208678, 0.24530256453687582, 0.21919638075300352, 0.2064775005958599, 0.18348622002660564, 0.2353262250963405, 0.24787647163617377, 0.20711954514800424, 0.21753037396843478, 0.7076793942074995, 0.20297586471715856, 0.21663336872783479, 0.24256091297862836, 0.19963401867096886, 0.24186460475781824, 0.2100637290567312, 0.18480805376789444, 0.15203076133340931, 0.8761571999944279, 0.19882257753936605, 0.19866692022802823, 0.12943192766995348, 0.16656478900187344, 0.914295585963258, 0.830134168636997, 0.15544004747388185, 0.20766860915743401, 0.8102760555696612, 0.20274659001517326, 0.2107319317170805, 0.10374733761680999, 0.10474233645997066, 0.8078069808118165, 0.1831510009244094, 0.1724615263354934, 0.17877546232559016, 0.17729870102455425, 0.17824140177368974, 0.17747848459389404, 0.21450806061526195, 0.17827872279421786, 0.17686663043616901, 0.114757316296202, 0.08984098571520593, 0.08914369909376141, 0.08567550768550103, 0.09443086037145698, 0.08935364115383526, 0.08698812841823766, 0.08738741490170066, 0.10201681791234773]}, "mutation_prompt": null}
{"id": "f27e871b-7ea9-4a45-9e06-d158d3e10252", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Metaheuristic(Improved_PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_rate=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, \n                                    self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n                if gbest_fitness < np.min(pbest_fitness):  # Introduce dynamic mutation based on global best\n                    mutation_rate = self.mutation_rate + 0.1\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < mutation_rate or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_PSO_DE_Metaheuristic", "description": "Enhance the exploration capability by introducing a dynamic mutation strategy that adapts based on the global best solution.", "configspace": "", "generation": 13, "fitness": 0.3496493568428097, "feedback": "The algorithm Enhanced_PSO_DE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.8554825585643644, 0.8625289939042767, 0.8562857245079174, 0.8470094528088556, 0.8489241113411456, 0.8360300788752331, 0.8495683463871515, 0.8428211659792448, 0.8376893784775765, 0.6951303792376844, 0.6902783877453433, 0.7064354092620415, 0.6965515504017982, 0.7069846386504476, 0.716285166032121, 0.7042338872778857, 0.681136166638733, 0.7033986233236084, 0.1439082916535508, 0.15126326070844243, 0.1458348122649732, 0.15033065923389388, 0.12470828405324608, 0.13709434882247473, 0.6264765034522255, 0.17230684495252713, 0.17506945787654626, 0.13200783019880913, 0.14398135370812748, 0.13760275128149602, 0.10998087639412879, 0.11193269861333865, 0.1347282787272852, 0.10429676887138195, 0.11163103939501307, 0.13097619001589678, 0.9890544840017738, 0.9917037033248258, 0.9892771497646852, 0.9890938170349517, 0.9883512322812326, 0.9870723808773648, 0.9890434998425124, 0.9861701372529823, 0.9896976820618211, 0.6920296074640185, 0.6510182473400217, 0.6584908998904702, 0.6722489673373009, 0.6831604969296642, 0.6863588056210382, 0.6705805177338762, 0.6482310371330091, 0.6530582327434846, 0.780717176656177, 0.2028351341158935, 0.8430818076147916, 0.2751308014859939, 0.8760226113810464, 0.2737012507979958, 0.8139620384562893, 0.8114905727035564, 0.22717837642600713, 0.20268915877449956, 0.12599624503502294, 0.23444721994547146, 0.24368755612331194, 0.39313701689575997, 0.21636900604596732, 0.5259726146633081, 0.5862065026044322, 0.15214775856178753, 0.21848270749647458, 0.11449675215522692, 0.22798801632413956, 0.23512239799573553, 0.23455319869898872, 0.2449169224686789, 0.2685499766779692, 0.25058584307632237, 0.2659191782138828, 0.024059081788567305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05753390315817819, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013640251835029815, 0.006985011813520403, 0.14099962761650553, 0.054770494930273306, 0.17339726093928443, 0.08560602025643782, 9.999999999998899e-05, 0.047396649268432345, 0.09637345308212775, 0.17968556979552375, 0.03942459184806757, 9.999999999998899e-05, 0.35760759483413973, 0.09978670337449425, 0.0547863232250555, 0.12261941546423605, 0.08014873892503782, 0.27115537143846846, 0.13891124701373314, 0.0484515953063952, 0.1264095590980422, 0.2058518291010505, 0.1351159510177562, 0.1690132561126153, 0.17361648921343442, 0.1979410669950118, 0.18782429636174713, 0.12803835612171355, 0.12733049588302237, 0.5596172558453325, 0.5933338482685826, 0.5995445391456616, 0.5831370230384159, 0.5925121658215959, 0.5972126929755631, 0.578922599907663, 0.579042257710662, 0.5713555575164075, 0.12961854000704987, 0.11386197151745725, 0.5202545906658549, 0.14600596221954731, 0.12924183959805247, 0.09957576446218408, 0.12692157931298875, 0.13596804177174893, 0.13982894785400146, 0.22170897014246826, 0.19751267251457172, 0.2044627539555125, 0.13465808900178378, 0.2583558642695388, 0.2060999930434244, 0.33264649680915204, 0.2974864101332979, 0.36691289894942336, 0.5416994491659968, 0.44714126474423654, 0.46733066879550555, 0.4722445940374127, 0.6119416139489682, 0.6235504006606085, 0.5717665103432886, 0.6366053368461491, 0.6114928760177447, 0.4138075986021037, 0.25944849377637647, 0.33368198545314, 0.28005002128818646, 0.19018535787373503, 0.3334153492302151, 0.3616563777074754, 0.41224727978048836, 0.3978216350696996, 0.2233682000144135, 0.2090035976262017, 0.20250077723349313, 0.21921196433208678, 0.24530256453687582, 0.21919638075300352, 0.2064775005958599, 0.18348622002660564, 0.2353262250963405, 0.24787647163617377, 0.20711954514800424, 0.21753037396843478, 0.7076793942074995, 0.20297586471715856, 0.21663336872783479, 0.24256091297862836, 0.19963401867096886, 0.24186460475781824, 0.2100637290567312, 0.18480805376789444, 0.15203076133340931, 0.8761571999944279, 0.19882257753936605, 0.19866692022802823, 0.12943192766995348, 0.16656478900187344, 0.914295585963258, 0.830134168636997, 0.15544004747388185, 0.20766860915743401, 0.8102760555696612, 0.20274659001517326, 0.2107319317170805, 0.10374733761680999, 0.10474233645997066, 0.8078069808118165, 0.1831510009244094, 0.1724615263354934, 0.17877546232559016, 0.17729870102455425, 0.17824140177368974, 0.17747848459389404, 0.21450806061526195, 0.17827872279421786, 0.17686663043616901, 0.114757316296202, 0.08984098571520593, 0.08914369909376141, 0.08567550768550103, 0.09443086037145698, 0.08935364115383526, 0.08698812841823766, 0.08738741490170066, 0.10201681791234773]}, "mutation_prompt": null}
{"id": "4897fcd8-88b1-4b5c-b9c9-d5d0f8582c16", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Metaheuristic(Improved_PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_std = 0.1  # Introducing mutation standard deviation\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                            trial[j] += np.random.normal(0, self.mutation_std)  # Mutation step\n                            trial[j] = min(max(trial[j], -5.0), 5.0)  # Boundary handling\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_PSO_DE_Metaheuristic", "description": "Introducing a mutation strategy that incorporates a Gaussian perturbation to enhance exploration capability.", "configspace": "", "generation": 14, "fitness": 0.24822115901077513, "feedback": "The algorithm Enhanced_PSO_DE_Metaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.4889224574411495, 0.4735910586074016, 0.46737532065745924, 0.476568825802285, 0.48960632071451893, 0.4859636386364846, 0.47923977182447186, 0.476571890217634, 0.4702413566514414, 0.13964856160954553, 0.08789944766778357, 0.13955242967464931, 0.16487497759515168, 0.06003090220178131, 0.16072770930300917, 0.11544653424614537, 0.12962766847872698, 0.1418091252100354, 0.1203993944080487, 0.11985030705327404, 0.1408246834332092, 0.12923730211768925, 0.13115026029234889, 0.14714958579343385, 0.1342354112240346, 0.11637259048158088, 0.1405187362436191, 0.10365358318629203, 0.12383433223120277, 0.10548873324687524, 0.1047449072193809, 0.11778194808913633, 0.10693331455319344, 0.13589864939321528, 0.10301603017810956, 0.10872368310480107, 0.9873955228621664, 0.9921289052356455, 0.990572595023152, 0.9889547288024912, 0.9778290747382049, 0.9902518767573377, 0.9891321222642993, 0.9895232524832622, 0.9779269542788361, 0.31122767803514206, 0.3081436849263428, 0.3293290487013668, 0.34162193181338396, 0.32191882618377354, 0.38662716946525466, 0.3368112813619416, 0.3294256414897886, 0.3082669751886358, 0.2235636447144893, 0.723869987788664, 0.22377412907175187, 0.7345507312904145, 0.2117273239924098, 0.2740204766972575, 0.5999617018480945, 0.7106789138620173, 0.3784347829792538, 0.17436514155150995, 0.19729340738699952, 0.16421080029745938, 0.12669268208316475, 0.16516066960996467, 0.1888554482890319, 0.1735888045852516, 0.19571144193161238, 0.1714164712229994, 0.1732136286891124, 0.11623932649325486, 0.1755293088632539, 0.18126874829306638, 0.1636054251268535, 0.18072324244314153, 0.188885213970156, 0.175461128277842, 0.18857594607031591, 0.0452753915344456, 9.999999999998899e-05, 0.031470163852365896, 0.0020474651504764907, 9.999999999998899e-05, 0.02259518976192454, 9.999999999998899e-05, 0.0025294060249121397, 0.008768449813692847, 0.10876709884071822, 0.05319195054366932, 0.07650577383385859, 0.09805508497527493, 0.023804497100514688, 0.08183255823461444, 0.1234229290372274, 0.0983336575801308, 0.12866610749872054, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08923067779503979, 0.14385617191139777, 0.1172804637717505, 0.12964541285538578, 0.12039904804233759, 0.10125427224543926, 0.09466126139674302, 0.11690194503621676, 0.10699424325636142, 0.4464419557801361, 0.43460380883255145, 0.462939084349168, 0.46650362116917, 0.4523241725526653, 0.4299291471969513, 0.4295582344086841, 0.4530376280525199, 0.40815938684770325, 0.1356451763665395, 0.1257826298989243, 0.12894942060478043, 0.12147335173494012, 0.1434530275536332, 0.11942369416739163, 0.22058950093234975, 0.14763257976579558, 0.11622964726161189, 0.16639896497068585, 0.1593283772349221, 0.1852781238913519, 0.21224505338866595, 0.21073461659919612, 0.2232893844622118, 0.1907322497395384, 0.2546559678778578, 0.2693884621852223, 0.306054223748333, 0.30886036081150137, 0.328586427491078, 0.29427127728646874, 0.20485802668135833, 0.31972723539637726, 0.3119997371925416, 0.3129030670704773, 0.303091763646569, 0.2479026489140117, 0.26473930556399305, 0.25894395283851834, 0.24799524528978611, 0.1900584864003746, 0.24667773602872445, 0.2663682310993608, 0.25286226086264607, 0.24715247497535797, 0.2310589792479706, 0.21874079943350666, 0.20704885686791363, 0.23884864431114428, 0.2494638258876759, 0.25686477221169546, 0.2064092621350052, 0.20884548302045558, 0.22360216184989523, 0.22891696358722335, 0.24221945237139153, 0.20347017810273582, 0.23597734807936455, 0.23221919881443143, 0.20746605419691522, 0.2404048519706583, 0.19181837192226225, 0.29984865855530585, 0.7551146547002873, 0.17675247052572918, 0.15342429872360064, 0.7192425813350148, 0.7501070057598481, 0.15164798095802856, 0.12415120654383605, 0.16895356221158908, 0.7174815754417827, 0.5730649678278762, 0.6204060742723801, 0.11019418707290074, 0.20677594436909807, 0.166959361523337, 0.20844492198044795, 0.1049443324642032, 0.10448495891275522, 0.521699040251641, 0.1975391713165835, 0.18813178572869638, 0.1907088029095132, 0.1698501378107441, 0.19534443588638994, 0.17684908336729055, 0.1797550722677128, 0.1971583399659116, 0.19528143331983516, 0.08849379414701175, 0.08502482263166689, 0.09226615182701792, 0.09276906754200753, 0.08694235421129581, 0.08815546849710676, 0.1222578307477914, 0.09512190763406891, 0.08660150403152944]}, "mutation_prompt": null}
{"id": "3b7e2b9f-b35f-49cd-acda-214666335eb3", "solution": "import numpy as np\n\nclass Improved_PSO_DE_Metaheuristic(PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.initial_budget = budget\n        self.dynamic_threshold = 0.1\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.swarm_size, self.dim))\n            velocities = np.zeros((self.swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.swarm_size, self.dim), np.random.rand(self.swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                for i in range(self.swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(self.swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_PSO_DE_Metaheuristic", "description": "Improved version of PSO_DE_Metaheuristic by adding a dynamic adjustment mechanism for the algorithm parameters based on the search progress.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.8554825585643644, 0.8625289939042767, 0.8562857245079174, 0.8470094528088556, 0.8489241113411456, 0.8360300788752331, 0.8495683463871515, 0.8428211659792448, 0.8376893784775765, 0.6951303792376844, 0.6902783877453433, 0.7064354092620415, 0.6965515504017982, 0.7069846386504476, 0.716285166032121, 0.7042338872778857, 0.681136166638733, 0.7033986233236084, 0.1439082916535508, 0.15126326070844243, 0.1458348122649732, 0.15033065923389388, 0.12470828405324608, 0.13709434882247473, 0.6264765034522255, 0.17230684495252713, 0.17506945787654626, 0.13200783019880913, 0.14398135370812748, 0.13760275128149602, 0.10998087639412879, 0.11193269861333865, 0.1347282787272852, 0.10429676887138195, 0.11163103939501307, 0.13097619001589678, 0.9890544840017738, 0.9917037033248258, 0.9892771497646852, 0.9890938170349517, 0.9883512322812326, 0.9870723808773648, 0.9890434998425124, 0.9861701372529823, 0.9896976820618211, 0.6920296074640185, 0.6510182473400217, 0.6584908998904702, 0.6722489673373009, 0.6831604969296642, 0.6863588056210382, 0.6705805177338762, 0.6482310371330091, 0.6530582327434846, 0.780717176656177, 0.2028351341158935, 0.8430818076147916, 0.2751308014859939, 0.8760226113810464, 0.2737012507979958, 0.8139620384562893, 0.8114905727035564, 0.22717837642600713, 0.20268915877449956, 0.12599624503502294, 0.23444721994547146, 0.24368755612331194, 0.39313701689575997, 0.21636900604596732, 0.5259726146633081, 0.5862065026044322, 0.15214775856178753, 0.21848270749647458, 0.11449675215522692, 0.22798801632413956, 0.23512239799573553, 0.23455319869898872, 0.2449169224686789, 0.2685499766779692, 0.25058584307632237, 0.2659191782138828, 0.024059081788567305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05753390315817819, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013640251835029815, 0.006985011813520403, 0.14099962761650553, 0.054770494930273306, 0.17339726093928443, 0.08560602025643782, 9.999999999998899e-05, 0.047396649268432345, 0.09637345308212775, 0.17968556979552375, 0.03942459184806757, 9.999999999998899e-05, 0.35760759483413973, 0.09978670337449425, 0.0547863232250555, 0.12261941546423605, 0.08014873892503782, 0.27115537143846846, 0.13891124701373314, 0.0484515953063952, 0.1264095590980422, 0.2058518291010505, 0.1351159510177562, 0.1690132561126153, 0.17361648921343442, 0.1979410669950118, 0.18782429636174713, 0.12803835612171355, 0.12733049588302237, 0.5596172558453325, 0.5933338482685826, 0.5995445391456616, 0.5831370230384159, 0.5925121658215959, 0.5972126929755631, 0.578922599907663, 0.579042257710662, 0.5713555575164075, 0.12961854000704987, 0.11386197151745725, 0.5202545906658549, 0.14600596221954731, 0.12924183959805247, 0.09957576446218408, 0.12692157931298875, 0.13596804177174893, 0.13982894785400146, 0.22170897014246826, 0.19751267251457172, 0.2044627539555125, 0.13465808900178378, 0.2583558642695388, 0.2060999930434244, 0.33264649680915204, 0.2974864101332979, 0.36691289894942336, 0.5416994491659968, 0.44714126474423654, 0.46733066879550555, 0.4722445940374127, 0.6119416139489682, 0.6235504006606085, 0.5717665103432886, 0.6366053368461491, 0.6114928760177447, 0.4138075986021037, 0.25944849377637647, 0.33368198545314, 0.28005002128818646, 0.19018535787373503, 0.3334153492302151, 0.3616563777074754, 0.41224727978048836, 0.3978216350696996, 0.2233682000144135, 0.2090035976262017, 0.20250077723349313, 0.21921196433208678, 0.24530256453687582, 0.21919638075300352, 0.2064775005958599, 0.18348622002660564, 0.2353262250963405, 0.24787647163617377, 0.20711954514800424, 0.21753037396843478, 0.7076793942074995, 0.20297586471715856, 0.21663336872783479, 0.24256091297862836, 0.19963401867096886, 0.24186460475781824, 0.2100637290567312, 0.18480805376789444, 0.15203076133340931, 0.8761571999944279, 0.19882257753936605, 0.19866692022802823, 0.12943192766995348, 0.16656478900187344, 0.914295585963258, 0.830134168636997, 0.15544004747388185, 0.20766860915743401, 0.8102760555696612, 0.20274659001517326, 0.2107319317170805, 0.10374733761680999, 0.10474233645997066, 0.8078069808118165, 0.1831510009244094, 0.1724615263354934, 0.17877546232559016, 0.17729870102455425, 0.17824140177368974, 0.17747848459389404, 0.21450806061526195, 0.17827872279421786, 0.17686663043616901, 0.114757316296202, 0.08984098571520593, 0.08914369909376141, 0.08567550768550103, 0.09443086037145698, 0.08935364115383526, 0.08698812841823766, 0.08738741490170066, 0.10201681791234773]}, "mutation_prompt": null}
{"id": "8c5b311f-f0fd-4c27-b4e8-4b1536e994cf", "solution": "import numpy as np\n\nclass Dynamic_Population_Resizing(Improved_PSO_DE_Metaheuristic):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.dynamic_threshold = 0.1\n        self.min_swarm_size = 10\n        self.max_swarm_size = 50\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Dynamic_Population_Resizing", "description": "Implementing a dynamic population resizing mechanism to adapt the swarm size during optimization based on the search progress.", "configspace": "", "generation": 16, "fitness": 0.35084688216002613, "feedback": "The algorithm Dynamic_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.31.", "error": "", "parent_id": "15383a0d-daee-49ce-b5c8-4bdad63eeaac", "metadata": {"aucs": [0.9245571643367593, 0.9276270385454249, 0.920894207905441, 0.9268934832560776, 0.9212105999649743, 0.9230486689701844, 0.9105768615624111, 0.9230923572981855, 0.921115621185373, 0.869904424131103, 0.8785360284325163, 0.8713896776600354, 0.8758346959992813, 0.876159267735902, 0.8826039250557184, 0.8595538629354352, 0.8652213585350292, 0.8795162302967875, 0.18274827874224908, 0.1311822374006395, 0.11551348428508645, 0.14178909367850323, 0.1444976448844365, 0.14517752466185063, 0.15971705218425725, 0.16156082859058973, 0.16037316836826743, 0.14350338501472015, 0.07869316144174432, 0.11678999280992497, 0.0956067098821044, 0.10467221974142327, 0.09601025959667009, 0.11473925137567897, 0.08229182268472379, 0.09997313973721533, 0.9917698350482119, 0.9917378796365955, 0.9920136372057006, 0.9913639700918931, 0.9904387503706001, 0.9868944459400133, 0.990889890036391, 0.9890250789868228, 0.990085789515688, 0.8474795673829326, 0.8605479437741816, 0.8580890185714741, 0.8495013137763583, 0.8532263042460503, 0.8588286536807621, 0.8419247078986083, 0.8668720639284342, 0.8577785837176386, 0.22731501387764752, 0.8896852676997228, 0.3599071883127023, 0.2772936354366097, 0.16858979734784074, 0.379042534445728, 0.2227942692949516, 0.17787702928527982, 0.179968809590087, 0.2504939462865974, 0.275040818963426, 0.25261887100019154, 0.12755611841507775, 0.2604813930499086, 0.2544963380604015, 0.28653526959536635, 0.25663563655440313, 0.24206061925304223, 0.2544739902247478, 0.08471255225205421, 0.29891188504191746, 0.26923615944650814, 0.27474648276526614, 0.29797468717958786, 0.1320512946533674, 0.262796666564182, 0.1263084325967624, 0.008306209604857062, 0.10501692658046236, 9.999999999998899e-05, 0.04810289770881537, 9.999999999998899e-05, 0.02280442187915177, 0.0064230180848205976, 0.0061145322741633645, 0.019459439559824765, 0.03936014401304333, 0.031038713133110463, 0.08273214392205241, 0.0940694515740701, 9.999999999998899e-05, 0.01823549464920582, 0.10371135807675602, 0.09200986588594062, 0.07229242607102426, 0.31379869481379696, 0.1824981001023953, 0.13131078136897645, 0.13113812482575726, 0.15827287420900682, 0.05180894915129486, 0.17978179881023681, 0.6467696498455273, 0.037310694095979535, 0.1208552511548796, 0.21949874630986854, 0.12278192066565097, 0.10342836657802668, 0.25403758403843735, 0.3412195082040772, 0.18015778763269497, 0.10099525942025889, 0.12412409402559899, 0.5457643031601108, 0.5428691397530545, 0.5524687124639376, 0.6193681865614344, 0.7117338492393541, 0.6161829401200833, 0.5850672172900626, 0.5779055236158033, 0.6026971477545613, 0.13825584865124585, 0.14253587500437348, 0.10536960600053713, 0.1154366724420457, 0.09181004433129314, 0.12360155037447007, 0.07921706594293643, 0.09532561141701268, 0.09916125102058726, 0.247625055886594, 0.3166048913773326, 0.58385121745574, 0.2906440791946062, 0.24620463807413495, 0.23661086777290163, 0.16778295600329451, 0.23749026822303054, 0.1924065592606472, 0.39794764531868276, 0.41649209377751184, 0.24171942084889186, 0.34166921938184625, 0.3152827421907577, 0.6864948255763129, 0.32628786981780533, 0.5200602732444362, 0.5114278277366879, 0.19761671938787018, 0.33261823026565107, 0.29537119681845414, 0.2718267660947242, 0.22179034673870845, 0.26361244226713143, 0.2520023243678665, 0.32981255733501347, 0.22823374895926662, 0.213712092843641, 0.19795277157903024, 0.20218470823324686, 0.24337242848501406, 0.2300065581478682, 0.21574285837750318, 0.22214394017682582, 0.3239970481803772, 0.1965696412752712, 0.22639511057910244, 0.19116940327333554, 0.20790964659304756, 0.253120810262469, 0.2238489985222486, 0.19846518656253198, 0.23070660918431762, 0.18702141110545312, 0.1773426217273838, 0.1868443317946098, 0.1262680576982882, 0.17226669526636884, 0.1470633443920435, 0.9424208267409693, 0.19918247140532364, 0.12201055557619545, 0.16791479942227394, 0.931815599282239, 0.8699041161062082, 0.15621255582506366, 0.20907262330605525, 0.9114380096396472, 0.7714663045951643, 0.21187134840678068, 0.8723521813016911, 0.1049559926991609, 0.8910573164012755, 0.19444519033509966, 0.1802757924920454, 0.1878747277078724, 0.16958098808445232, 0.1922510017236031, 0.19907551242536803, 0.18264900643039517, 0.1772509913222149, 0.18439379332392636, 0.1281107632228724, 0.09542742362427781, 0.09397729548141598, 0.09671483948936843, 0.10156833057494352, 0.1090571583842751, 0.08411925305266377, 0.07725606791209716, 0.09845000933369596]}, "mutation_prompt": null}
{"id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 17, "fitness": 0.36636894324499164, "feedback": "The algorithm Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "8c5b311f-f0fd-4c27-b4e8-4b1536e994cf", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "84cb4aec-c7a9-406b-93e0-c34dae5c385d", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "c3a1f86b-ce50-40e7-8263-9d6204ab0b21", "solution": "class Dynamic_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Mutation Strategy\n                mutation_probs = [min(0.5, max(0.05, p * (1 - progress))) for p in self.mutation_prob]\n                for i in range(swarm_size):\n                    for j in range(self.dim):\n                        if np.random.rand() < mutation_probs[j]:\n                            swarm[i][j] = np.random.uniform(low=-5.0, high=5.0)\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Dynamic_Mutation_Population_Resizing", "description": "Utilizing a dynamic mutation strategy based on individual performance for enhanced exploration and exploitation in the optimization process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'float' object is not iterable\").", "error": "TypeError(\"'float' object is not iterable\")", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {}, "mutation_prompt": null}
{"id": "2d367a75-c386-4de3-83cf-5d1fb251ac7c", "solution": "import chaospy as cp\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, chaos_strength=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.chaos_strength = chaos_strength\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                chaos_dist = cp.Uniform(-self.chaos_strength, self.chaos_strength)\n                                trial[j] = chaos_dist.sample()\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing diversity and exploration by introducing a chaotic search strategy for mutation.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'chaospy'\").", "error": "ModuleNotFoundError(\"No module named 'chaospy'\")", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {}, "mutation_prompt": null}
{"id": "1611b11c-0ed0-4f22-bbe3-b8c06b5f2479", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "c9a21b06-34dc-45b6-a2e3-82e3d353775a", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "79f1ba45-ff26-4789-b76b-5de60c232ee7", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, cauchy_scale=0.1, gaussian_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.cauchy_scale = cauchy_scale\n        self.gaussian_scale = gaussian_scale\n\n    def __call__(self, func):\n        def enhanced_pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                if np.random.rand() < 0.5:\n                                    trial[j] = trial[j] + np.random.standard_cauchy() * self.cauchy_scale\n                                else:\n                                    trial[j] = trial[j] + np.random.normal() * self.gaussian_scale\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return enhanced_pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing diversity by incorporating a hybrid mutation strategy combining Cauchy and Gaussian distributions.", "configspace": "", "generation": 23, "fitness": 0.36548631822836314, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9262157274742228, 0.9218545387295685, 0.9244969941098997, 0.9296512320698093, 0.9241971622446741, 0.9142181125596095, 0.9202892769919565, 0.9227739691598539, 0.92564824239091, 0.8670072827923149, 0.8584289662006267, 0.865659043761793, 0.8762366332433456, 0.8755590405030607, 0.8576203903335594, 0.8697546814861109, 0.8645367939434214, 0.8700997717073995, 0.690108329475803, 0.4623407127444866, 0.1801577301501942, 0.41452871462463503, 0.17734456985430402, 0.17143463090132194, 0.404961019082799, 0.409962454208718, 0.18246135708951028, 0.30845213625810164, 0.15972144151812695, 0.7026821103901729, 0.6308596394124216, 0.17159040601303333, 0.17881553929905025, 0.39911667639132775, 0.15593471555446525, 0.16644458127368, 0.9902712964345395, 0.9922378636360926, 0.9914956727472898, 0.9883296958516712, 0.9862576909833687, 0.9890143789486655, 0.9889205990857892, 0.9891632829386858, 0.9892699441445929, 0.8237234543833964, 0.7441752320146495, 0.8354209363015354, 0.832039670650794, 0.8606457669624313, 0.8505955702949629, 0.8342550362391933, 0.8405432009627409, 0.8484066598496468, 0.3973279990473707, 0.21339749041097233, 0.2283979392823865, 0.19635651029494006, 0.9163389125093607, 0.2119910128979262, 0.23288591561956995, 0.2331169699589707, 0.233905309961694, 0.32414480734475903, 0.22833198174160696, 0.22791209404105028, 0.2210474148412992, 0.22531145018384446, 0.23993658336218615, 0.23111173278464525, 0.22168058005236235, 0.21359442140633844, 0.23389233203465476, 0.1319294027428567, 0.19344999627841075, 0.22870079880964012, 0.23598658438801956, 0.13410052442524323, 0.2558243607379128, 0.2370705568238456, 0.11924798877755327, 0.02594737578980455, 9.999999999998899e-05, 0.12011460658052964, 9.999999999998899e-05, 9.999999999998899e-05, 0.006253601685823895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09622262739399434, 0.08601066028745319, 0.03783518882421777, 0.015175705917731874, 0.029207654288399887, 0.02578288184802191, 0.028096327087718587, 0.10993273816757743, 0.07570115233362862, 0.10089050547518197, 0.10596150383547898, 0.07451405382141352, 0.10545734903111315, 0.1257209300940938, 0.07289707863822636, 0.23977385263099948, 0.1670858356687439, 0.077903272906233, 0.17059989235511896, 0.09430209297874337, 0.16152253331953148, 0.12837723044543814, 0.03842079869906645, 0.22783153169404236, 0.24034972971083435, 0.3033417474814454, 0.3353641476375341, 0.5442816310749921, 0.5324629778880481, 0.5384379586123549, 0.5378791749266404, 0.5175724673037536, 0.5246531076898981, 0.5882703863117912, 0.5266413307728929, 0.5980363773422865, 0.11667195847998646, 0.10965311200401173, 0.11653341175871224, 0.183253549789689, 0.11709834723659529, 0.15653697826530555, 0.1150099515354539, 0.15420833932367894, 0.1385200674477146, 0.27135075017341503, 0.47339690927428735, 0.26847199302664815, 0.35982995556500963, 0.31758568590236025, 0.2076087374502691, 0.42197965760029565, 0.2986681714900705, 0.36593021313586327, 0.4299681263014481, 0.5364281413999847, 0.4798940176142812, 0.3971411735774253, 0.41225774032804496, 0.38857090713532405, 0.6722105524934265, 0.36745235744644034, 0.4458061076963341, 0.29810455466375807, 0.3604425789978334, 0.3791371517140465, 0.2302638138948817, 0.17271763566758147, 0.3232928708004097, 0.28358795480086296, 0.4386339837027714, 0.22055126756458687, 0.19689788748271198, 0.22984084091382495, 0.2000885034156441, 0.20097788195473443, 0.2573140195763859, 0.23404069288743323, 0.22717380816976585, 0.2124803008025965, 0.221777560746085, 0.22966479214580393, 0.20683731367504132, 0.21130626503387517, 0.2022600722060437, 0.2126691028471447, 0.1760842033600748, 0.18877463727138089, 0.1763350740299764, 0.8663193679688672, 0.9429557625680806, 0.18720702769990194, 0.152707366573973, 0.9391895753511053, 0.9353802436359133, 0.1985011652649843, 0.12220746645539071, 0.16863240838845162, 0.940419634729371, 0.6743545404913492, 0.15619500268725228, 0.21034571636554356, 0.21062960027301825, 0.16823113670292567, 0.2121927081220759, 0.833932880751758, 0.10506857212246723, 0.16747868376645259, 0.1904034960949299, 0.19981262092905483, 0.2003584277349475, 0.19213456976624776, 0.17496807635156397, 0.20458052673860427, 0.1844206493419871, 0.2177047172779577, 0.17532086997398588, 0.0880147005394869, 0.09507941716664847, 0.11381976987071651, 0.08766704997411268, 0.08156881021280005, 0.09562362767599608, 0.10084376856077704, 0.0905642601498945, 0.08856657158598302]}, "mutation_prompt": null}
{"id": "65e9fd70-49be-4e5b-b882-196a64598921", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "805e650e-c4ed-4c4c-b264-11d2fef1f5d3", "solution": "class Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mut_prob_decay=0.9):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mut_prob_decay = mut_prob_decay\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n            \n            mut_prob = self.mutation_prob\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < mut_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n                \n                mut_prob *= self.mut_prob_decay\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhance adaptive mutation probability based on individual performance for better exploration-exploitation balance.", "configspace": "", "generation": 25, "fitness": 0.36216049495613417, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.32.", "error": "", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9298089085344686, 0.9248425245789668, 0.929001786691021, 0.9232221155365692, 0.9175072065823652, 0.9352279760699006, 0.9182615914674577, 0.9254155839439355, 0.9265706136676902, 0.8651831580995499, 0.8768327740837843, 0.8793948303473414, 0.8695677722842494, 0.8829802240411047, 0.8748672689412478, 0.8781694973273734, 0.8558695230358614, 0.872980757314717, 0.12422827676301806, 0.1169567375931323, 0.16089236471159052, 0.15846938330149318, 0.1594073215095586, 0.16145113073220707, 0.8301691126215966, 0.08816488265563294, 0.11605197865632344, 0.096128883278214, 0.8292676670166494, 0.13333575825370603, 0.11546018749448994, 0.13102581691221515, 0.0815512685050328, 0.11006843064833816, 0.15936355131312374, 0.09593155822228894, 0.9879127138213147, 0.9908381222211203, 0.9914236455688591, 0.9877407949090121, 0.9917463067472957, 0.9882823817318347, 0.991852587794081, 0.990924346200439, 0.9870809623193744, 0.8516832754468999, 0.8349419058733908, 0.8380655030970668, 0.8405984410104788, 0.8468239228721235, 0.8796277764477006, 0.8394789193415593, 0.8597851926175365, 0.8390934577908946, 0.18522524823325626, 0.22350386584739435, 0.16934712832856658, 0.19287962473962894, 0.2795418944515974, 0.334533309144985, 0.23607336062598983, 0.1736460905682492, 0.23474845273835998, 0.24933765288144583, 0.2758294570947336, 0.24863811509938472, 0.23401574881024034, 0.21899058313577202, 0.26981894693761876, 0.24371628523235556, 0.1323169745971109, 0.275826863565111, 0.24630805894399144, 0.25638452871215234, 0.25573581266816026, 0.2697382989196624, 0.13307977966552575, 0.1341576666298261, 0.2906487806554253, 0.1310494801613128, 0.2796279127467788, 0.0283201604469967, 0.0012652181756191982, 0.0035873591150508144, 9.999999999998899e-05, 0.0757946798842124, 0.06547753144800095, 0.010804109851647481, 0.0038697370373989015, 0.006663955416875589, 0.044086711293158665, 0.04200406604248963, 0.16396123325506828, 0.054350705454508486, 9.999999999998899e-05, 0.023870652956417104, 0.15378457525802092, 0.025435883429057116, 0.04406145868532807, 0.08525197957501263, 0.11330765408818311, 0.17856055577512164, 0.029541807710389167, 0.06740913131951942, 0.08061080846958812, 0.2645433745280322, 0.05429189399879686, 0.022928466086935773, 0.1612393098080489, 0.11327792776498102, 0.17157652942151513, 0.21699997608568578, 0.12305161695447664, 0.1349440217173805, 0.15118846760988291, 0.14122947516623696, 0.09802259628579035, 0.5393412835421971, 0.5645889217859009, 0.7844137893345545, 0.5747326305014402, 0.5787397678034493, 0.5570611938030889, 0.5851283823365063, 0.5835453686892458, 0.6153186721072617, 0.1139008504122887, 0.11518108011046002, 0.12213297501590314, 0.1054025996215674, 0.09215881404388615, 0.11735985152304729, 0.14434174975391756, 0.11602155127149105, 0.11722722392680807, 0.3852275251544335, 0.2188576668227662, 0.17590933970614364, 0.2093113115451556, 0.2690899665334153, 0.28424519576310603, 0.21223682566470803, 0.22736094860671596, 0.21439827959372726, 0.4203635238319986, 0.31620870827329783, 0.5298674676790417, 0.4956892270026203, 0.3708950119792598, 0.34583857863433787, 0.37598277855172324, 0.6039359243253325, 0.26045200248963707, 0.42360836831187354, 0.4147724590000169, 0.27599068731414966, 0.3124517906390549, 0.33874795121504353, 0.3872607808535087, 0.4083570491501676, 0.3803626476174885, 0.29736427155113987, 0.1874733609268041, 0.18893472562008296, 0.19733462990113826, 0.2481529124159001, 0.24466966848976424, 0.26610833797604583, 0.21609771727532823, 0.17827507890175365, 0.23012542345334053, 0.2535323973727637, 0.22432069409455713, 0.2514853566638311, 0.21137895590149136, 0.882536924388069, 0.18515231647266528, 0.19943474641546122, 0.25253194272932156, 0.22736871265348657, 0.926577453915528, 0.197604039017787, 0.15170943442909324, 0.9412180486304599, 0.924167446201669, 0.19897138721335816, 0.1219848710683098, 0.9227867552151522, 0.9422180131387543, 0.6568357160379708, 0.156279658102503, 0.11154844860940649, 0.8720040938894441, 0.7957211365071382, 0.2098129378427367, 0.1660690586823813, 0.8291089961323916, 0.8292768782155745, 0.18382543596964296, 0.17977071285569857, 0.1883455373863817, 0.17806011996008086, 0.17422098914809137, 0.18182834079583998, 0.2020457672557081, 0.19113921238889198, 0.18889123976069222, 0.10486294417367537, 0.08911126787578083, 0.08972624399270968, 0.08624650339111628, 0.0954763219238064, 0.10357083525390043, 0.1004651751764215, 0.09395643216258287, 0.09317033336234859]}, "mutation_prompt": null}
{"id": "c3683ecf-7144-44eb-b984-ecb1e4ff3921", "solution": "import numpy as np\n\nclass Improved_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, chaotic_map_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.chaotic_map_prob = chaotic_map_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                if np.random.rand() < self.chaotic_map_prob:\n                                    trial[j] = self.chaotic_map(trial[j])\n                                else:\n                                    trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()\n\n    def chaotic_map(self, x):\n        return 3.9 * x * (1 - x)\n", "name": "Improved_Adaptive_Mutation_Population_Resizing", "description": "Integrate a chaotic map for diversity enhancement and local search in the optimization process.", "configspace": "", "generation": 26, "fitness": 0.36192098157863445, "feedback": "The algorithm Improved_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.30.", "error": "", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9194979022485847, 0.917746915859659, 0.921367313365064, 0.9190974261640261, 0.9137433550052836, 0.9129947322630674, 0.9143209497619609, 0.914499779163082, 0.9107678898170624, 0.8555280613600441, 0.8662376133775246, 0.84415540850447, 0.847033147156846, 0.8588838951716938, 0.8660963774911852, 0.850500390984817, 0.8414191025711233, 0.8714175388569456, 0.1736357444966503, 0.46760032275541963, 0.5638280862175502, 0.35020088505251123, 0.29773726716693294, 0.37090026335639037, 0.3801587417702995, 0.7022902305101488, 0.17838430567294694, 0.6696537678077564, 0.5830398423754994, 0.4058562272534233, 0.15397484764946945, 0.3129091328361985, 0.2215933757455708, 0.48315392778136956, 0.16200905468291638, 0.16825723259238146, 0.9913892235712312, 0.9935450904821317, 0.9906826819085867, 0.9900260807934178, 0.9885480973436489, 0.9830121312882717, 0.9915123238764509, 0.9899912829442447, 0.9888770339154067, 0.7754498797111875, 0.7191831343818098, 0.8160765164049733, 0.794697394469612, 0.7886925606190782, 0.7999937013677855, 0.8240402664558288, 0.8126617903433185, 0.8053495342060503, 0.35073879007378195, 0.16996638755786841, 0.22618264773288288, 0.21043723815064486, 0.19152026566945857, 0.2780970626153736, 0.23281896533769697, 0.21324332252221967, 0.4014660912323452, 0.21209051609711393, 0.2118194685556123, 0.23902575006530713, 0.27110003464997867, 0.2117222747273123, 0.23051100919813605, 0.24413619271264497, 0.19524515338245207, 0.19974805548239927, 0.23091971801672084, 0.2190900862549685, 0.1789336681974406, 0.22055058170311725, 0.2170143849654732, 0.2351115415563121, 0.24731940537886954, 0.24663938779433026, 0.22926794127224515, 0.003054707561681469, 0.0024159807361134877, 0.08126347711634463, 0.055794135895358865, 0.0399537825767422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06590782036133658, 0.036774577406936126, 0.0678240804407142, 0.07856286895033993, 9.999999999998899e-05, 0.025619148109437107, 0.10040008814116141, 0.04633880384383826, 0.04524048929625801, 0.13512929383187566, 0.18194980470235922, 0.13322814219906742, 0.026223519234880976, 0.06832344753667807, 0.11933110179389605, 0.21706986101903336, 0.13960685566823106, 0.20648903767517823, 0.16334478877866365, 0.14083518444552412, 0.14743197694077714, 0.20240793131062684, 0.15570207037960537, 0.23726253033459854, 0.06274462404838055, 0.2340756009748045, 0.049823043171430936, 0.513148559053086, 0.5300850023231941, 0.5653196833845527, 0.5243285229434462, 0.5717120755053224, 0.537571007530028, 0.563266878770281, 0.5457878362769178, 0.5831382867762589, 0.10863537237584042, 0.121446108567832, 0.1101396964726542, 0.10695693614985158, 0.09533392446983358, 0.09209887422640528, 0.14284733908138147, 0.1431836044064161, 0.18268344222641908, 0.36157609282392533, 0.17995330933406473, 0.6163326200921573, 0.25503009733043513, 0.3592081855963535, 0.1964746195595788, 0.29562948023318836, 0.18526569218071076, 0.22638417747605222, 0.3265130141679752, 0.34432699318047955, 0.5194232261223859, 0.43784663716473127, 0.24840915757577242, 0.3384450796526084, 0.7364926002764385, 0.5779444119743582, 0.4268837723543647, 0.3150439151038191, 0.32321623982842806, 0.3011957606168999, 0.2677853120693703, 0.2078878887805975, 0.3136902646847337, 0.24520969896602218, 0.19595783015094725, 0.2248882550288427, 0.23545724782256439, 0.22316064279136738, 0.198287960254795, 0.19876447813835563, 0.21956323932458088, 0.1737652244902702, 0.23792493780477864, 0.24224836764837565, 0.24391462391449925, 0.2011653214728033, 0.20524594076002156, 0.20778037378589376, 0.21576345165434552, 0.8251164045908309, 0.8792221907327038, 0.19036762274774843, 0.21756936910081148, 0.843004572041179, 0.9396959736833169, 0.18674576822941458, 0.15025205014958742, 0.9099147712534459, 0.19988512280110904, 0.2007593140007431, 0.14293156006417373, 0.16771518246774653, 0.9324932186411753, 0.6418835858024963, 0.15464118837885177, 0.7755901072799292, 0.2098927764145484, 0.16626339552239078, 0.4449695732667589, 0.20739598209800736, 0.10411029749891809, 0.09425793164485019, 0.17377633400390513, 0.18404283388605713, 0.17514075030507503, 0.1652887456337263, 0.180967002017403, 0.19292990947744315, 0.17644451830475372, 0.1900657139812152, 0.2201075590996826, 0.09023346276121702, 0.09053777173729227, 0.08224046953970132, 0.08995713008369677, 0.09978820061668414, 0.09406595777533, 0.09829699267030012, 0.093523559611292, 0.10554336402841002]}, "mutation_prompt": null}
{"id": "389b4681-b62c-403e-9114-c4dc46e79389", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "6f8412ef-8ed8-4b24-9e08-09d5c34fb8b3", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "e718e72f-8923-4d4d-9941-9e1cf27e2b7d", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "9eab1a17-8b28-4c74-9b3f-303bf7a13386", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "bb48370a-dc7b-415b-85a2-2dc25700beb2", "solution": "class Improved_Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_rate_decay=0.95):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n        self.mutation_rate_decay = mutation_rate_decay\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n            mutation_rate = self.mutation_prob\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < mutation_rate:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n                    mutation_rate *= self.mutation_rate_decay\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_Adaptive_Mutation_Population_Resizing", "description": "Improving diversity through dynamic mutation rate adaptation during optimization.", "configspace": "", "generation": 31, "fitness": 0.34409960053406874, "feedback": "The algorithm Improved_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.31.", "error": "", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.922240065494604, 0.9213216749199058, 0.922178703295058, 0.9229628505106791, 0.9256620534675373, 0.9252477406932222, 0.9200987053433054, 0.9190867951507695, 0.9176941392653439, 0.8618453571903266, 0.8702158262621318, 0.8699206258387547, 0.8517011440342295, 0.8451244645057148, 0.8719307085889098, 0.8714182130568608, 0.8765675777826467, 0.8839655484439494, 0.1440696992554713, 0.1608248979464768, 0.13074940822637637, 0.11770633047148271, 0.1225079385659843, 0.15871798659075298, 0.12226936196372806, 0.13342100325078132, 0.11730183518126946, 0.14073907586311385, 0.15839574331820327, 0.1159428229089926, 0.10503909721205129, 0.09059138116807186, 0.1420358813739474, 0.14167618611429567, 0.12207002445337689, 0.12391595836043556, 0.9908196896787752, 0.9933082993022279, 0.989151205726645, 0.9868475231428705, 0.9903833252738076, 0.9866270034879844, 0.9913654557689087, 0.989800633995704, 0.9885503829461558, 0.8492837570078321, 0.8611802245008517, 0.8563684628875581, 0.8605670774420934, 0.8823454988362165, 0.8592367722435275, 0.8395581956408662, 0.8341674262372033, 0.8400097719258295, 0.2546364321401571, 0.22490954062049573, 0.2154347092656429, 0.27952489232470856, 0.19074346705397527, 0.380904495165444, 0.23397891858614728, 0.13848118788608177, 0.40329068513691824, 0.237820297457074, 0.23957903478713438, 0.25152638764990354, 0.2606323281408942, 0.25699538330882166, 0.24695954972741352, 0.2668344754890716, 0.256099221765261, 0.26143937870634615, 0.27440712524516064, 0.25174257942382383, 0.251987853956115, 0.2737975741789038, 0.29402904577697586, 0.276543765777276, 0.13391335295719275, 0.12273608486657672, 0.27388842443706474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02772617416486245, 0.05847414431135345, 9.999999999998899e-05, 0.0446522772920529, 9.999999999998899e-05, 0.07093120081147519, 0.02247895729920235, 0.026328878491503227, 0.12203856672486657, 0.030710203713990802, 0.034258325429265435, 0.04583266109720752, 0.044508206351919766, 9.999999999998899e-05, 0.1235006183831554, 0.15617261431696539, 0.19898293833963765, 0.05542035266875811, 0.03750436672359336, 0.0788338482160239, 0.13309403390529928, 0.08281450754798447, 0.220408214281128, 0.049553641929855785, 0.14830724076604307, 0.043655777351623515, 0.25039436059893716, 0.15291131789789103, 0.2098238678079838, 0.20226133737409746, 0.025701175395545728, 0.045872134633312966, 0.05170513734780979, 0.5791930575673427, 0.596622144374266, 0.5362968786853799, 0.5582005304785942, 0.5639304059972562, 0.5611058760582475, 0.616157506684069, 0.6532809345286327, 0.6548737199057952, 0.11620922342417728, 0.12442826626192527, 0.15636074503507713, 0.15580642570579017, 0.14307238324144778, 0.15114906792672078, 0.13029365700892304, 0.14273653924834395, 0.08231208388346845, 0.16529944964382737, 0.21842190025763863, 0.26774647956618847, 0.45867473041244133, 0.3442158303964937, 0.35992413716717897, 0.21296882480158041, 0.21550794852964628, 0.25219398459615383, 0.4537050764553183, 0.48965915754908973, 0.564949809382196, 0.39459676499825613, 0.3025081403240182, 0.48765562517848815, 0.31771264888300876, 0.5480691500925396, 0.2656652779098103, 0.25774434467501117, 0.21153344456568646, 0.2521410688014716, 0.27025933776015887, 0.24812507760701052, 0.19181561888715437, 0.4449717258305831, 0.3275833161429692, 0.23156586909441834, 0.22865189700636146, 0.19644423180631732, 0.2594310888461281, 0.25314411743094856, 0.18208175778165991, 0.21401193718852352, 0.20827926206244762, 0.242014847222358, 0.2500318173615649, 0.20920814957871048, 0.17787358312497692, 0.17598297315723466, 0.21247555454190548, 0.2291146297914325, 0.1827301909364697, 0.19771586151348775, 0.1905154818129038, 0.1784442912531109, 0.9267194134088297, 0.9300128367762054, 0.17283330684528753, 0.9422088246830991, 0.20114110725994228, 0.19838682432037802, 0.1359646948222265, 0.1682960131947282, 0.9342289593787235, 0.7913230913444986, 0.15570878680815203, 0.21018106814499804, 0.20605484820845754, 0.1676267725998123, 0.21058176087592229, 0.8702337467701913, 0.10422682534687244, 0.8072013271834773, 0.19770502903714393, 0.1779350064452455, 0.18604469815551794, 0.19625448030588688, 0.17933985774548689, 0.2090262970365544, 0.1795759591798637, 0.18046379175312066, 0.17762579033439474, 0.09436312601641161, 0.09866292302260748, 0.09304627743457072, 0.0811901216882821, 0.09137228923259333, 0.08793889469793825, 0.13305427492748245, 0.087495185648918, 0.09107284166693896]}, "mutation_prompt": null}
{"id": "123cb984-d955-4f1f-9505-d22e171a61f3", "solution": "class Improved_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, dynamic_mutation=True):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.dynamic_mutation = dynamic_mutation\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob if not self.dynamic_mutation else self.mutation_prob * progress):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_Adaptive_Mutation_Population_Resizing", "description": "Introducing a dynamic mutation probability that adjusts based on the optimization progress to balance exploration and exploitation effectively.", "configspace": "", "generation": 32, "fitness": 0.3398845066379832, "feedback": "The algorithm Improved_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9240095090344809, 0.9215531501514829, 0.9277424054705483, 0.9226707224413984, 0.9228215003224874, 0.9235502628123925, 0.9189121804612196, 0.9271715412077262, 0.9308682636132348, 0.8725031590073424, 0.8629791916501066, 0.8627634694509351, 0.8781583284212346, 0.8731572161041417, 0.8757081755597553, 0.8545508826290296, 0.872420604234349, 0.8724695170881387, 0.1862901478560749, 0.1438428199194468, 0.12528843890311003, 0.1301743324093355, 0.13046926017115368, 0.13100857850951486, 0.12895552946888145, 0.16035595280476067, 0.15125073886470786, 0.12831678806888358, 0.13027148128298682, 0.10968085957520146, 0.1376852989407058, 0.15814790872246853, 0.11479834651372456, 0.10433650383087278, 0.11664480877227301, 0.13012041013089914, 0.9910016393968899, 0.9934794652336977, 0.9913733753349672, 0.9884692804210722, 0.9912631711205935, 0.9867570613420548, 0.9913419681003552, 0.991277115082796, 0.9878141107266658, 0.8624897493818118, 0.8483047768033709, 0.8545162052796582, 0.8287448815149612, 0.8604128191799756, 0.8570602777340471, 0.8155452839510462, 0.8404423291281177, 0.8514737678622288, 0.21270885288087304, 0.22642888524418991, 0.17097805576220726, 0.19219448938957384, 0.2122703353866896, 0.26922968262523606, 0.22940332293692567, 0.15103863658021455, 0.1766725865342642, 0.2437540481656485, 0.2500875402855257, 0.11514960130780472, 0.28190203165864713, 0.2610930885513004, 0.23950988057427403, 0.26369819706922715, 0.2951402619491267, 0.25781405272697544, 0.24854626069958308, 0.2621829689181908, 0.1340893792856419, 0.2875632486090397, 0.2773620783356753, 0.28852486453741444, 0.27897061772607334, 0.1273914330525997, 0.2688513268021966, 9.999999999998899e-05, 9.999999999998899e-05, 0.006344687243802993, 9.999999999998899e-05, 0.0009739615015016412, 9.999999999998899e-05, 0.0005555374088819232, 0.0007061308295682744, 0.0038963638581442916, 0.028459575791763392, 0.05095905197340089, 0.04071668280485541, 0.07507781362348376, 0.011472319895746708, 0.05403771547776304, 0.1036067544948659, 0.043425153709881315, 0.0006800219837197474, 0.05611125481997192, 0.29672718329891834, 0.21266976906028567, 0.04021114045581087, 0.13055813004114913, 0.20500960999877937, 0.1517848755895227, 0.10636536014250109, 0.22088864279248965, 0.12987884968192098, 0.12486646858876371, 0.12010128557275257, 0.11604934107078879, 0.07326590830852853, 0.2457006186596815, 0.13994837120578374, 0.1361330808269735, 0.08342487529221165, 0.5714651045136672, 0.6437088509441842, 0.5650230738542708, 0.5606287027147091, 0.5387058091859773, 0.5428878758534003, 0.5960854064968173, 0.5738682965775703, 0.5930965216383401, 0.12298278995949807, 0.18691112354604233, 0.10846752988765418, 0.08555790450420353, 0.18727580451117343, 0.13096307991566614, 0.1573079306415358, 0.14025016242757682, 0.11648090801874533, 0.2679510393877419, 0.2859338282829249, 0.3886852034395324, 0.27199476882394, 0.2794119069639166, 0.20719530975275025, 0.22093249769404766, 0.2248825096331749, 0.3488577841368662, 0.3767387122128748, 0.4621157810470151, 0.2551876277094358, 0.41577310104115695, 0.4906446241251785, 0.3168994395006086, 0.6430064229504299, 0.33780705637093256, 0.5791702078377249, 0.3377149183801029, 0.2582849792207954, 0.26447636976101174, 0.3781164367861183, 0.3287278920232477, 0.24133280235976073, 0.24519866187976103, 0.23623698237025303, 0.3810024965907167, 0.23779705199708467, 0.20127760769364167, 0.20549826836290908, 0.19945657918512738, 0.24269007761976202, 0.22811807990780186, 0.19769750820344767, 0.216107238237508, 0.2296019576011601, 0.19905167743873864, 0.19372052774810444, 0.20742505203060446, 0.2296000430091376, 0.21117407177691128, 0.22319237374648204, 0.2016552222184833, 0.20903370055839765, 0.2517848058458093, 0.9299472758365545, 0.1752177462837624, 0.17373130862023933, 0.9437208693645948, 0.20002595085188335, 0.20024112989610876, 0.12238861697665959, 0.16755639177640147, 0.9402422447379277, 0.6894255986721562, 0.16797773514553105, 0.8374133440429679, 0.21043073619613206, 0.16803391364177733, 0.2107328366557526, 0.1051807805266688, 0.1659109284367729, 0.8627701761048022, 0.17042837028132485, 0.18738639546029834, 0.1871031089542956, 0.18112691082327614, 0.19407536028778394, 0.17693985383475752, 0.18284524491569432, 0.17721548612634253, 0.20860992226346087, 0.10080894888197434, 0.07196331485858154, 0.08136541066150949, 0.10028770422886557, 0.08760006330938541, 0.09279322367461829, 0.09472707702996763, 0.08703786678265824, 0.08398568341007961]}, "mutation_prompt": null}
{"id": "fb761a86-a674-43a7-b79f-6529bfacd304", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "38ee13e0-a2a0-4773-85e9-8a66aa8770a4", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "4f431a56-8d08-4204-961d-62ca85bc65ea", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "b41fe7aa-59de-4e19-8835-653c72e8a3e0", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "bc304279-5384-4d97-be6d-6cd8521e80fb", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "71fa1456-9c75-493c-bbe0-a78cd056a869", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "fa7b23f2-b4a6-454f-bb19-055e354f8fd6", "solution": "class Improved_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_rate:  # Modified to use the updated mutation rate\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_Adaptive_Mutation_Population_Resizing", "description": "Improve exploration by introducing a novel adaptive strategy for mutation rates based on the fitness landscape analysis.", "configspace": "", "generation": 39, "fitness": 0.36636894324499164, "feedback": "The algorithm Improved_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "4b504ef1-d1b9-4414-b7fd-d2e2543346f0", "solution": "class Adaptive_Mutation_Population_Resizing(Dynamic_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                trial[j] = a[j] + dynamic_params[3] * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Mutation_Population_Resizing", "description": "Implementing an adaptive mutation strategy to enhance diversity and exploration in the optimization process.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.9193289019201776, 0.915133461514086, 0.9254615843425942, 0.9104004827203995, 0.9116708414236907, 0.9172751260942477, 0.915296915221179, 0.9163588330790972, 0.9134986468014286, 0.8556245712013899, 0.8443605751024659, 0.8466595032764647, 0.8572888943054424, 0.8613454931924469, 0.8695492691432528, 0.8459593608826184, 0.8657465591293134, 0.8488446592606098, 0.6237912063570911, 0.5154841960218969, 0.4714998556826355, 0.4628815421558188, 0.3511933480868853, 0.3147819880261934, 0.6930983869461942, 0.6800703861562825, 0.72646024487967, 0.7753172462434276, 0.16344055640416266, 0.4515302492301484, 0.47223921481433884, 0.36999270511168325, 0.5712534162823262, 0.4984945528808733, 0.33431715431903786, 0.588487907853213, 0.9896757233805517, 0.990509382422554, 0.9914236455688591, 0.9878884937564508, 0.9888253620005322, 0.9817459280393508, 0.991852587794081, 0.9916244660223591, 0.9864593061782811, 0.7362785791747182, 0.780719207260665, 0.7902728002731743, 0.8037966411690626, 0.8277234302663256, 0.6239596768605982, 0.7184346981103304, 0.836166185820106, 0.7807619406238415, 0.22688764201786948, 0.223903737073038, 0.1341932098519204, 0.215306935913137, 0.37593971684105176, 0.3597243290714399, 0.18323596131377184, 0.9017381811942267, 0.35188552334415846, 0.25149469912787326, 0.23820849313623427, 0.1964077978673785, 0.2106482163209904, 0.21184967869118299, 0.2191915604803929, 0.22391942841613155, 0.21195569174201678, 0.21917280439624465, 0.24372016529177742, 0.21096205623333486, 0.11761319146091687, 0.24802610786916368, 0.21580054926254322, 0.2579165294260931, 0.23259614962090114, 0.25179850825028316, 0.1301351741635708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06592259309278703, 0.023138120775342053, 9.999999999998899e-05, 0.028898693171110268, 0.0076085978555554545, 0.07475029038697234, 0.03488443255262119, 0.11898079683375729, 0.010245769656223147, 9.999999999998899e-05, 0.046695782174637546, 0.10270613950070728, 0.04435368109179594, 0.0733571333721551, 0.09486451784758188, 0.10737633229495547, 0.16801503296380327, 0.2127021564109185, 0.06934802777521287, 0.1580111470907839, 0.0625320125708555, 0.17317078012607834, 0.10031247797772846, 0.09256431872760662, 0.07523632329318009, 0.10166518946826986, 0.11159332403052502, 0.22163192374335727, 0.1315718551784577, 0.07206757886816961, 0.08947503210382146, 0.16686468423884393, 0.5089378581366029, 0.573807614621346, 0.5560448736050339, 0.5648966863056347, 0.5171235107762124, 0.5616028505658386, 0.5376510185730383, 0.5409449050744077, 0.5733673681352704, 0.0940616687467245, 0.15217997490799406, 0.14264729483421124, 0.13984590436036592, 0.12039794284267413, 0.10376455966605813, 0.11348008423104183, 0.11935778049918822, 0.15603221590546912, 0.3900897867339338, 0.41496089755861765, 0.19363011409981046, 0.27585292913294124, 0.29358454644479615, 0.26192817004274627, 0.2421550594633467, 0.16061650154468243, 0.21255862967706574, 0.27335112957194285, 0.3463752240133403, 0.4717903881940456, 0.39059725792265687, 0.30962018827754534, 0.32274809632190093, 0.4340191229713283, 0.35734755515897687, 0.444874052528772, 0.30511488569610534, 0.23679167555521863, 0.3540707777865659, 0.273092307330028, 0.2512464983136773, 0.2313762720069349, 0.18656352031330226, 0.2874952159433265, 0.41579324642474846, 0.2040117845414191, 0.1924514648486637, 0.20522250696505562, 0.21807786602526835, 0.1959476009887987, 0.22814347596887574, 0.1983104081609165, 0.2065005329528269, 0.20289249182336477, 0.19206931605892885, 0.20937525517911615, 0.19856255934936373, 0.20729406252370286, 0.1972842164759513, 0.22681351330048882, 0.6844546089621459, 0.20041525916554737, 0.18917237145829302, 0.18434908814590034, 0.1853800752460707, 0.14655357763691335, 0.9188358627965787, 0.7914245444227114, 0.18997038876693062, 0.9292435197059633, 0.16854741712929577, 0.9317755567167941, 0.6203244472982672, 0.15534391830810657, 0.17491310537152638, 0.20964284209651218, 0.16777835979979505, 0.6316154233511228, 0.20631939298156388, 0.16660278517265392, 0.7827374579560021, 0.17249791045550678, 0.18047546165174622, 0.18388750572157297, 0.218063539507793, 0.17123787550142644, 0.18354950302023088, 0.2020457672557081, 0.18753580153931348, 0.18500376784897954, 0.07884985263257838, 0.08267213666799345, 0.08587999862313822, 0.09676861686317939, 0.11047199552058828, 0.09812090362265513, 0.08242745562585385, 0.0879402241990298, 0.08848553185791608]}, "mutation_prompt": null}
{"id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 41, "fitness": 0.366467990593556, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "d91ab2d1-a2cf-46fc-8e57-4d6a1f5502e5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "cf15aafd-34ef-4c51-8006-c8801605bd7b", "solution": "import numpy as np\n\nclass Improved_Levy_Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Levy Flight Step\n                levy = np.random.standard_cauchy((swarm_size, self.dim)) / (np.power(iter_count + 1, 1.5))\n                swarm = swarm + levy\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_Levy_Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Improving exploration by adding a Levy flight step to diversify the search process.", "configspace": "", "generation": 42, "fitness": 0.25615508816342647, "feedback": "The algorithm Improved_Levy_Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.5769701779879648, 0.5717212753773878, 0.5700420464755933, 0.5753444863465947, 0.5718314317468993, 0.5702998031641613, 0.552452118144696, 0.5760943156502323, 0.5947979986064191, 0.19879697322839063, 0.20880419362997538, 0.21395941050135803, 0.17867230555847313, 0.1930833357861187, 0.21611038120456594, 0.20901971111702156, 0.19423557140896497, 0.19867750975815623, 0.13333378103219384, 0.14977062886076897, 0.16343488934379746, 0.14833025095649777, 0.12691033593673218, 0.13354589995405952, 0.13748793502158974, 0.13138300886701904, 0.21336929125420578, 0.13530940742051312, 0.13190526007594783, 0.10538098459601009, 0.1323360946812283, 0.10181470421455519, 0.11860722986997774, 0.1324757282790392, 0.10892013328387895, 0.1012787968356883, 0.9942111951665179, 0.9921310494416969, 0.9906558399286098, 0.9941348802018225, 0.9928595582228592, 0.98738743815076, 0.9909082518925834, 0.9915875782016813, 0.9871655726094475, 0.3478966866490898, 0.3376082170070407, 0.34344619744714044, 0.33747501334100616, 0.3492134986318002, 0.3695360141923253, 0.32911800934802116, 0.3554168709992226, 0.32934533996635595, 0.6627032592617388, 0.6124224940900959, 0.2003622049439442, 0.709283658650412, 0.6908872819153101, 0.2498041767675787, 0.22459855431602593, 0.22384968860827226, 0.21283586864873805, 0.1688576345357451, 0.15345517563734434, 0.15780217140222452, 0.17598511186369892, 0.1670093346557111, 0.1577711339521939, 0.16702740766634638, 0.15313062286974166, 0.1701257378071217, 0.16822439234003828, 0.16609198703869354, 0.16365960251181755, 0.1347846199773023, 0.15166037899792262, 0.15525291780266492, 0.17152554781562468, 0.16662002334192183, 0.0780720476727047, 0.024598625060467172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009744810168118567, 9.999999999998899e-05, 0.028611098045588146, 0.030736899317354127, 0.016513281782525202, 0.04062652383513066, 0.09121206089581368, 0.06048795758086711, 0.01766276053950422, 0.02625311187255852, 0.03726859481466016, 0.02263041264870047, 0.04133584081626629, 0.10108265803568428, 0.042876553807484896, 0.07553853478378592, 0.01159232407744426, 0.06488227148931291, 0.013978618015594635, 0.07554078554618404, 0.08103332895606907, 0.05779667730953719, 0.16078236395211076, 0.047840591944904864, 0.07391303180702746, 0.17269331772390528, 0.14929908913040912, 0.09587000904629728, 0.1284696388034896, 0.17063797231637723, 0.09266704915503565, 0.4593953874752723, 0.4392822984738658, 0.4419311218179013, 0.4453412375476813, 0.45665749169353953, 0.4510160737818034, 0.48336638693007183, 0.46957365863239076, 0.453466575339736, 0.10985714769812205, 0.0890771719242075, 0.11068068647332618, 0.12309688753821868, 0.10595492355464375, 0.08266654474330826, 0.08425584625802529, 0.12339239283962311, 0.09122361894842146, 0.13041984347270785, 0.13549667451791225, 0.1360531286305421, 0.13348102726963895, 0.2754963187912568, 0.22813602478391426, 0.1629037540873165, 0.1498455398574281, 0.13483688453294163, 0.3318006094726691, 0.2631215656560313, 0.3528235844133992, 0.2712244886494385, 0.3469074337727458, 0.30704812857991426, 0.35150790915534036, 0.3633427152396119, 0.3402019948376154, 0.23148978632066863, 0.28931429151295285, 0.23931421727348523, 0.28062739927103664, 0.16505881084480334, 0.24537782407055975, 0.19806707681621927, 0.2904632348514915, 0.19979697991129786, 0.19642663583057163, 0.1745606945751259, 0.19395379213417874, 0.20583131485286965, 0.1920840751485523, 0.21290207307208764, 0.19980805282705882, 0.1870250742350531, 0.20340410956493393, 0.3131309292744435, 0.31999239707182126, 0.22243031545638037, 0.2118965542565986, 0.20108209103984243, 0.25834425807815287, 0.21117384548433826, 0.19741895032434564, 0.38600092786795537, 0.1778755095491802, 0.6827551270433512, 0.1824004597288169, 0.7586963345101136, 0.7457464121688697, 0.16487221114249018, 0.7312763072712356, 0.18202954218205258, 0.2011098516099974, 0.4093355114846794, 0.474714054701156, 0.1579814290154683, 0.204542601558946, 0.6277523841916774, 0.2050886514009056, 0.5538803450378937, 0.3959295877092609, 0.3679908721910251, 0.1898801974509272, 0.19329161595450894, 0.19272310966133566, 0.18536813785863437, 0.17723972553373446, 0.16596270894438825, 0.18685564543719746, 0.16958363282249322, 0.1982005943433417, 0.07474047659149996, 0.07742411129316262, 0.07219131045740268, 0.07563035675121987, 0.08322423424046976, 0.07747415081720233, 0.09409047094219714, 0.09029386633156078, 0.0731745992218299]}, "mutation_prompt": null}
{"id": "2f489fd0-8d01-47a4-a737-a5978345c39e", "solution": "import numpy as np\n\nclass Hybridized_Enhanced_Adaptive_Mutation_Population_Resizing(Enhanced_Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Hybridization with Particle Swarm Optimization\n                if np.random.rand() < 0.1:  # 10% chance for hybridization\n                    pso_swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n                    pso_fitness = np.array([func(ind) for ind in pso_swarm])\n                    pso_gbest_idx = np.argmin(pso_fitness)\n                    pso_gbest = pso_swarm[pso_gbest_idx]\n                    swarm = np.vstack((swarm, pso_gbest))\n                    velocities = np.vstack((velocities, np.zeros(self.dim)))\n                    personal_best = np.vstack((personal_best, pso_gbest))\n                    pbest_fitness = np.concatenate((pbest_fitness, [pso_fitness[pso_gbest_idx]]))\n                    swarm_size += 1\n                \n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Hybridized_Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Introducing a hybridization step with Particle Swarm Optimization to enhance diversity and global search capabilities.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,5) (11,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,5) (11,5) ')", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {}, "mutation_prompt": null}
{"id": "a23ba670-7768-4c29-9bfe-e40efe8f32fd", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "623b7956-3b00-4345-9865-5ae480fab48a", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "36318c8e-8b41-4b14-9505-acc00af4107d", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < dynamic_params[4] * 0.8:  # Dynamically adjusting the mutation scaling factor\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer with dynamic mutation scaling.", "configspace": "", "generation": 46, "fitness": 0.16873706416063172, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.15.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.3277301241210444, 0.3736278371465367, 0.31482474937838967, 0.33378179540359776, 0.31181243679577175, 0.3151139220973934, 0.30287807422949053, 0.3066373441100877, 0.3571639080679784, 0.08906566062237631, 0.08073739353820997, 0.16789886440783708, 0.10991997109657181, 0.12610882695944015, 0.1115530843865119, 0.13007431978112327, 0.15592109017078515, 0.15401602283092108, 0.06419923695271901, 0.08359046947319315, 0.11071641664539589, 0.06868860941510757, 0.10386126502715376, 0.08916247587623383, 0.10441354086218668, 0.07517179468596402, 0.06547314960745865, 0.07206774856389908, 0.07145961831400072, 0.07346276953122144, 0.06616270272354963, 0.06631339559187766, 0.07061377161276794, 0.08918553023455789, 0.09174739520075614, 0.07141064932844243, 0.8962596559720938, 0.6837351077876821, 0.8933264249475978, 0.6741842814044792, 0.9373350271701559, 0.231684305499121, 0.7556212895193855, 0.6803560265449347, 0.7778935717812999, 0.15580062126324556, 0.15720438050510532, 0.16930468388851005, 0.17297871704741719, 0.15773685956600947, 0.19983190341211876, 0.15862197950435275, 0.14657676316115542, 0.13382504821249697, 0.17874467918019477, 0.17242978603323134, 0.21338637157026974, 0.18661691444321493, 0.21763238405795093, 0.21686108522275638, 0.21767634565916982, 0.194066110346241, 0.2628046526322084, 0.06574240566262579, 0.10821112348992534, 0.06424509415888702, 0.0853221869576688, 0.09515735122619384, 0.09847563108345325, 0.08958275407633409, 0.07709754403081859, 0.11600972348158844, 0.10578742580245104, 0.10604181365899568, 0.10322670962795932, 0.10001288919631957, 0.0939227651127601, 0.09607003257107405, 0.11300216405129981, 0.09931552975391766, 0.09256208283596079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06708966288241658, 0.044814754768374376, 0.06306133686349225, 0.07887351158217937, 0.05614191501859589, 0.02420439061806956, 0.04213670982711515, 0.13275408323061533, 0.07931253688521556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006860384244131712, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06231978209134703, 0.03921122930345555, 0.05789014422766248, 0.04507295853913407, 0.05567012916191105, 0.050037616442732746, 0.04199065408945213, 0.050802305062781494, 0.03742868303154534, 0.3346973084599786, 0.2996840173260755, 0.3180487579467641, 0.3489508397525912, 0.31753688611764797, 0.31071618110187615, 0.3239985685009158, 0.35393562454785854, 0.3236451877934634, 0.05622992443494801, 0.07537989736409667, 0.05948416010824753, 0.060742894728354035, 0.06116535757349162, 0.06011072453164412, 0.06271017202927998, 0.07934418826271028, 0.05974642286128351, 0.13343772890391137, 0.12023276502290536, 0.11883393773178519, 0.15487570699733455, 0.13343410887761964, 0.14896536413636985, 0.13674495403846032, 0.1558404724690301, 0.13286235561022708, 0.22380816680033955, 0.21758205635732908, 0.24682860078767677, 0.21920438441463153, 0.22662456595453784, 0.21332580961965686, 0.23441399632774962, 0.213614853301055, 0.23869345378419138, 0.14026795713903595, 0.16665087779167553, 0.15242699172196006, 0.15055351875041068, 0.15004305338377744, 0.15377045918510412, 0.18267681334809405, 0.16539652801803273, 0.1578286511795517, 0.1802989604836579, 0.17317698746901844, 0.1799127296147346, 0.17411663230215946, 0.16884802266414067, 0.17072721137309654, 0.20366193886300754, 0.1729997647599042, 0.17002746094444865, 0.18120598705147262, 0.16445654330738302, 0.1622048571125584, 0.19042960071515114, 0.15843899963799046, 0.16596797541367847, 0.1699448531783635, 0.1798837868868719, 0.16860736681574673, 0.16723206972866878, 0.2830691143013656, 0.31912386027363737, 0.3640540060102502, 0.34184859489710284, 0.3622437586416656, 0.24595706216093471, 0.1674244131623327, 0.3290484338586558, 0.23029056680246462, 0.17610256064079244, 0.17847177097950062, 0.1929273410244038, 0.22907107948769656, 0.21007155975062208, 0.3925988931315706, 0.23623614413288874, 0.35565595552689144, 0.18164847852137678, 0.19180618421710582, 0.17120524986696106, 0.18675525500779688, 0.19544882045482725, 0.1797341645155639, 0.17478289749369036, 0.17479247180562785, 0.19358594270232543, 0.06286305113641044, 0.05683775683148484, 0.06642528812850146, 0.07365896321489929, 0.07668433229849436, 0.06362816497909318, 0.05911081048742184, 0.07234504565692401, 0.06444626322774816]}, "mutation_prompt": null}
{"id": "f428444a-5250-4cec-a5e5-c0d2a3f0eb47", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "9c5b986a-77ec-474b-98f5-124d5c1b0495", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "44a12a50-1c06-4b42-ab6c-466808c7b78d", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "bc91232b-1863-45fa-b666-d4dceaee9510", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "16fa8a60-4b45-4579-9027-4a5545409778", "solution": "import numpy as np\n\nclass Dynamic_Inertia_Weight_Adaptation(Enhanced_Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                inertia_weight = dynamic_params[0] * np.exp(-5 * progress)  # Dynamic inertia weight adaptation\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = inertia_weight * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Dynamic_Inertia_Weight_Adaptation", "description": "Utilizing a novel dynamic inertia weight adaptation strategy to enhance the optimization process by adjusting the exploration and exploitation trade-off dynamically.", "configspace": "", "generation": 51, "fitness": 0.3591220434482317, "feedback": "The algorithm Dynamic_Inertia_Weight_Adaptation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.895590571619647, 0.9065956606640742, 0.8954609032381478, 0.899815520731438, 0.9010950166115471, 0.8921558006094038, 0.9054317694339854, 0.8977850180317606, 0.9065449970385919, 0.8230876772680314, 0.8232257738193545, 0.8303961516301002, 0.8250961438288665, 0.825522125754492, 0.8279811609532094, 0.8467924909432376, 0.8256687813872872, 0.8407580839808506, 0.7051164684836657, 0.7937707414875198, 0.5457347265333443, 0.5789129902722201, 0.635570299306405, 0.26637623023299195, 0.5346804205334831, 0.16664138139825357, 0.5244933075566989, 0.5607912291440655, 0.1446540370176841, 0.36594242674191757, 0.5552313711426848, 0.17167548479005323, 0.6888536086219953, 0.4169834983113422, 0.22609524404116998, 0.7941603475801593, 0.9882964718143479, 0.9928175271510618, 0.9871012059067075, 0.9913032093873703, 0.9874899571210216, 0.9887675040592852, 0.9894446741069969, 0.9887365821934746, 0.9875049897837013, 0.7899133007071143, 0.7897068622396382, 0.7315724929770195, 0.6834638679203568, 0.7358551659892241, 0.8024846454279662, 0.7894603073736294, 0.7801357865298965, 0.7602484888386499, 0.3783277144257654, 0.2244297360374552, 0.27968186866177747, 0.8967091756246646, 0.2105414312875189, 0.20926418370880073, 0.3300151191805507, 0.21734791035422518, 0.1721059980259515, 0.19447606662895933, 0.2098357986524606, 0.18794729019145584, 0.19989260230001948, 0.19920658882345743, 0.20197181865130343, 0.24823025305067548, 0.19758884004743826, 0.20361644889667985, 0.2189585646278821, 0.051453721966308374, 0.18615930182437435, 0.13016811732896771, 0.2147774433050904, 0.21997652032249637, 0.21883908762302773, 0.2532217080482686, 0.24323470758439192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005562639808520675, 0.0835457565609733, 0.06935791703058836, 0.09147681421800624, 0.037143118915638706, 0.06440742243949649, 9.999999999998899e-05, 0.028037301936591708, 0.10141536300979948, 0.09842994007190431, 0.0351478800345727, 0.11665848307351845, 0.17662485866351085, 0.32133444571898817, 0.0690094828882829, 0.13160280345165976, 0.10444759530429437, 0.2099773221146446, 0.12868618410886234, 0.1408301091395051, 0.1590393914249817, 0.13998120116853263, 0.19730626530300155, 0.20328496747742386, 0.13197841760608675, 0.12212166080553688, 0.05921414356258081, 0.29581991981636324, 0.09501685868902732, 0.515206738556838, 0.5341461690087465, 0.5117982405647556, 0.5028572978783685, 0.5226272101246593, 0.6117043041049817, 0.5632911160984152, 0.5209430766238505, 0.5371178674100325, 0.17872021014751138, 0.13717492959629618, 0.156349427692963, 0.10836475204247131, 0.09269407996653789, 0.13972550927363314, 0.1701242340715735, 0.1009812257405398, 0.17509138944835845, 0.161450980307839, 0.23912364521107177, 0.16900254553419813, 0.24092902770174096, 0.16426149995959782, 0.1572870236035342, 0.1381157635552831, 0.21441412184619202, 0.2215038413530297, 0.32794632629643716, 0.30959942687549524, 0.4191261078490035, 0.5457854341175625, 0.3979420924570364, 0.3759904516035374, 0.39926177580311273, 0.6034967909461375, 0.5822449969929673, 0.26064771211824356, 0.31059508734656405, 0.26932256291960144, 0.3314000639815282, 0.19951360412845776, 0.23131215252339532, 0.24595269412880982, 0.21965585985802072, 0.2905282698043148, 0.2577486312270597, 0.22059094079073738, 0.2184805609142113, 0.18995806452137398, 0.1961224782644888, 0.17515098819215913, 0.20007008702021867, 0.2152073609375631, 0.2194789188724875, 0.19194264072583356, 0.20655145672903563, 0.18176815669100033, 0.24564115006954157, 0.21940897192940678, 0.2502605883905432, 0.2122309548325877, 0.18972282685523956, 0.18654015232944354, 0.17488197669423333, 0.1673874525202067, 0.15065413957979656, 0.9163912776634531, 0.19890371357912873, 0.19969822876263066, 0.9038611683250778, 0.16845008393226402, 0.9000561612600053, 0.6019584399826079, 0.15482172000460337, 0.16575770990467487, 0.5187956890606892, 0.20491795508313904, 0.21115511438264134, 0.6987724258982122, 0.1664617896648386, 0.858448515367901, 0.17051285729624854, 0.17404412885375298, 0.17931392522671796, 0.18826245490813487, 0.17848160551321746, 0.18415583352981957, 0.17712304242836652, 0.17935865995777112, 0.17366004106483857, 0.0812894238916757, 0.07590517199295732, 0.07717220335883701, 0.10180095955527835, 0.08311317703120435, 0.08073672089694106, 0.10772877319738106, 0.09432267942186812, 0.0945768167707467]}, "mutation_prompt": null}
{"id": "2bfd9cc4-b0c5-46c0-86ee-0eaaff13cf0b", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Mutation Threshold Adjustment\n                mutation_prob = self.mutation_prob * (1 - progress)\n                \n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < mutation_prob:  # Updated mutation probability\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by introducing a novel adaptive mutation mechanism based on dynamic threshold adjustments.", "configspace": "", "generation": 52, "fitness": 0.3058448119417654, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.7870155472065716, 0.7888129930731262, 0.7876918209424717, 0.7634470559194055, 0.7573706250316726, 0.7564285107783615, 0.7716302867146119, 0.7812321452999531, 0.7836643161147795, 0.6032534960835123, 0.6018552966497738, 0.5908870505137072, 0.615219567971295, 0.6212378976076625, 0.597070040235985, 0.577019281757653, 0.5784173560776549, 0.6267938388957967, 0.3507586620537342, 0.18147470989601966, 0.13052788252392233, 0.36176763910243526, 0.14155839749957155, 0.3457559852145572, 0.20758459615219405, 0.15059936077694946, 0.15882135862908942, 0.1378249612081941, 0.1950357208284521, 0.13957698531909757, 0.13503825882052156, 0.16384278154397436, 0.1345473831873496, 0.21615088466080012, 0.1563084618905044, 0.13467284521475398, 0.985493765099399, 0.9911667583821947, 0.9899776059581202, 0.9888906132581005, 0.9887880752450076, 0.9905869568616901, 0.9917794456655213, 0.9894421345011486, 0.9892773250202922, 0.45579198794504705, 0.47992924451047714, 0.5081895246045606, 0.46431290998088004, 0.4664186566921735, 0.5274703875135586, 0.48147188761552684, 0.47800177048328485, 0.42039801960093814, 0.3270322109756424, 0.3290905096190365, 0.21514928036045455, 0.264688551309207, 0.26306547132409974, 0.20954399988973937, 0.6197156971049992, 0.22495088069091074, 0.22042723532419028, 0.2209237058857404, 0.18100234003256233, 0.1851070310934242, 0.16478388729708038, 0.17302195304090162, 0.18347364987858283, 0.19771950254742343, 0.18209973936532542, 0.17118715339073265, 0.122956653306599, 0.17814740013635455, 0.17867387380345134, 0.18315580575292123, 0.1873643329882514, 0.17579433430874525, 0.21959017502408074, 0.1173720623059773, 0.20985282257163684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005098675703639088, 9.999999999998899e-05, 0.0005185688296520663, 0.00721955662942253, 0.019580471505612707, 0.08555791280146263, 0.07796514230974483, 0.0059088783861889205, 0.07512955065766291, 0.08386128322005515, 0.003018493034975145, 0.08505388712572726, 0.08222030724522555, 0.05570312273368072, 0.1374491325826337, 0.19381408712070747, 0.06690092939236714, 0.09582663623199694, 0.019635562378904958, 0.028665145630840327, 0.04992396689215872, 0.08780147211261158, 0.05358167432807781, 0.23486435073198186, 0.11101890699011674, 0.1310925145099664, 0.17517138928744203, 0.09040387483418488, 0.06839734088533511, 0.09862159113836955, 0.1324656117587576, 0.09144688369691012, 0.5063197170263093, 0.5076251292391337, 0.5103232837529548, 0.5092993949264502, 0.489811036992745, 0.5262308269807623, 0.511382066161844, 0.5394862953493753, 0.5055505497787055, 0.16623928260276755, 0.08900019056560193, 0.0939119087762107, 0.08111739028716403, 0.11794700533461278, 0.11207396370716849, 0.12383300632591487, 0.11076967922074576, 0.1258619037795906, 0.15204102458226676, 0.16069934636486483, 0.28023465756130805, 0.1350470332772007, 0.2378163616527108, 0.14108512298636033, 0.12270925779889952, 0.12060195134090368, 0.1342760135813904, 0.4648163896139824, 0.3641395659185861, 0.4887298111994651, 0.40682935062031034, 0.3205904882167949, 0.3795088717681979, 0.47041336701636105, 0.47671086228246584, 0.45568725981889346, 0.2658644520557395, 0.25163525859172753, 0.3684962898330335, 0.26340692523449893, 0.2794412436563789, 0.2873309828019007, 0.282510160219977, 0.30766582330799985, 0.2769951451032313, 0.18216079377947592, 0.18086392919322603, 0.19351184597086557, 0.19982232231885477, 0.21097769436456204, 0.2121590523117165, 0.21344555947932708, 0.21184295850228874, 0.19633570364924524, 0.2334555372865601, 0.22320837232863533, 0.5408146004081038, 0.23022030630377632, 0.22485043317394426, 0.23796659306038193, 0.2117683491125013, 0.1849204081435164, 0.21708377256634093, 0.7941999542038178, 0.6619493373180596, 0.14929052271635979, 0.8484852879721551, 0.7959702391725265, 0.1975124897264522, 0.15953120651011143, 0.662012617748365, 0.8481930986077852, 0.44374168642240364, 0.15381015254012187, 0.5407050998270774, 0.5817725319706637, 0.48665293727345915, 0.20408231194568183, 0.10421642997379699, 0.4605466768551898, 0.5702105821888896, 0.17326498707301985, 0.1713661717670406, 0.18620087284155928, 0.17954735724369641, 0.17181986822158002, 0.22102022058552095, 0.1811980054003246, 0.17499722022964503, 0.1916765141983957, 0.07910405814949695, 0.08772810810654663, 0.0849442166619323, 0.0827087012267973, 0.08794161256742095, 0.0811952248495873, 0.08743721923503345, 0.07316351439519808, 0.07822021418026182]}, "mutation_prompt": null}
{"id": "063bfabc-b047-4224-aac1-99074a631cd7", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "50450ef9-81d5-459f-8e5b-3331b76e97d6", "solution": "import numpy as np\n\nclass Dynamic_Mutation_PSO_DE(Enhanced_Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n                \n                # Dynamic mutation probability adjustment\n                mutation_prob = max(0.05, min(0.5, self.mutation_prob + (progress - 0.5) * 0.1))\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Dynamic_Mutation_PSO_DE", "description": "Introducing a dynamic mechanism to adjust the mutation probability based on the convergence progress to enhance exploration and exploitation balance.", "configspace": "", "generation": 54, "fitness": 0.3600417755363931, "feedback": "The algorithm Dynamic_Mutation_PSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.30.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.9048654045990304, 0.9024833515494105, 0.9092248541431215, 0.9003562131640879, 0.9030171473063145, 0.9060960339254128, 0.9098122848570028, 0.9127958955803193, 0.9048923790664568, 0.8376973066483602, 0.8380899287973559, 0.8296905162526296, 0.8477998368408137, 0.8391756080485752, 0.8386044506304295, 0.8361045102242177, 0.8367716829103555, 0.8422995922330139, 0.8109657777870358, 0.7575321896701741, 0.5377674859257655, 0.17235969970145382, 0.4683027330162457, 0.4216303430426701, 0.5759138535697979, 0.19808339014830656, 0.7567670806922308, 0.1562569533072241, 0.15411818261207522, 0.4174186386791303, 0.31735934824794687, 0.45477816991225495, 0.15304996868572185, 0.5077313584300645, 0.1854988007018612, 0.17555804338300418, 0.9867827500128854, 0.9916347774372111, 0.9906246924019668, 0.9844581413044291, 0.987680679492711, 0.9882470284058774, 0.9878655981540557, 0.9890302193977801, 0.9905349579234151, 0.783495991277507, 0.7964638525581325, 0.8043154272165786, 0.8125831992956554, 0.7945005072089394, 0.7955074064375149, 0.7613749832129835, 0.7791105038486914, 0.7681715234588107, 0.2261778909271357, 0.21781775112515156, 0.19690592375205573, 0.2756759714320721, 0.2738438447067736, 0.2758269551998421, 0.3586842407294446, 0.2314825054410169, 0.24271956019583207, 0.23062273717016668, 0.21184986117253934, 0.20267121736059823, 0.2294475114333463, 0.20560597170428996, 0.2054090005815027, 0.21589259506489633, 0.23221035075600205, 0.2173858630168075, 0.13020024046698198, 0.10785606737813136, 0.21467612584656415, 0.1915550618875076, 0.22622978275267525, 0.22985313861994772, 0.25360975070763236, 0.22963087105293511, 0.23763615511053915, 9.999999999998899e-05, 9.999999999998899e-05, 0.029979334072640418, 0.09860115950799209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010261565693341357, 0.05044670146537722, 0.09923571898313166, 0.020975918809961747, 0.004039774223495662, 0.04780198386739831, 0.1583355784044903, 0.053969080621590226, 0.019973999938857068, 0.09173936968368313, 0.209149497074689, 0.11935294326499168, 0.01650368485157727, 0.04685503820909376, 0.052768897095506695, 0.08215751968503371, 0.14704049460908575, 0.28228493002418653, 0.06651327695178877, 0.09353757970049903, 0.135590768051432, 0.22256298447100697, 0.13777722540996384, 0.07461308062304217, 0.05558301857009096, 0.16450457843643507, 0.17556021881696615, 0.5267935176000145, 0.5263242235950096, 0.5860766842645115, 0.5525235862548932, 0.5333468786879532, 0.5459267552288818, 0.5745426256663553, 0.5684868554471788, 0.5387490721079116, 0.12303149808564717, 0.15522635997804413, 0.12991132061940114, 0.09908628960950483, 0.11484670965854127, 0.16036976951572102, 0.08596764743430685, 0.14701154310791376, 0.1251052748709388, 0.19700330337510563, 0.23014596286842237, 0.18750584717909935, 0.26743366212094755, 0.1763967738071751, 0.21409168926878797, 0.2713341640481288, 0.2491262671806328, 0.17804815010955555, 0.40510591843877963, 0.39899004419737083, 0.42328602974019236, 0.4461785110380855, 0.5480934928582806, 0.3883369334772365, 0.4924860477173887, 0.46692079929622643, 0.43420715368613083, 0.27791727448124803, 0.24347314100005502, 0.20703860457718526, 0.2702688748978075, 0.32298756349712276, 0.2484419110295839, 0.2047730937005411, 0.354539039774848, 0.24068209485200087, 0.20589308832102182, 0.21229444426099753, 0.22488555076620942, 0.22128341390160355, 0.22344991540834125, 0.21343128774622733, 0.2213034164940475, 0.2445435726563151, 0.21774051018285223, 0.8103441427145678, 0.25011559171009434, 0.19724728774831346, 0.25062855162146835, 0.7513490417534034, 0.20698373269892767, 0.2249836523668718, 0.21558119327851433, 0.20321960182583843, 0.18395541234335733, 0.1250535351180453, 0.1508841632807123, 0.9341580873305348, 0.2002323904968798, 0.19855291319890134, 0.15952038351064535, 0.16923620495509584, 0.9258864431047357, 0.8736154130633547, 0.157011357812324, 0.20740644900783523, 0.20876224577584535, 0.6688301924156399, 0.20702975450141814, 0.8640813524667026, 0.8501162884102944, 0.8549457930912258, 0.19527403770768148, 0.18330402303275273, 0.1897204398065141, 0.19555092684653907, 0.17660004352385217, 0.17669043871420909, 0.18048674335562187, 0.17289145343494616, 0.18316259887249575, 0.0789767565651548, 0.0968344891520001, 0.0794458612977409, 0.10155765245523074, 0.1034123034022707, 0.09002959824584977, 0.13545919260037675, 0.12562075644676463, 0.08740215419034614]}, "mutation_prompt": null}
{"id": "9d21a975-825e-4cfb-81d6-9d79cb9c85eb", "solution": "import numpy as np\n\nclass Cooperative_Coevolution_Enhanced_AMPR(Enhanced_Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, num_subpopulations=5, subpopulation_size=10, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, num_subpopulations * subpopulation_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.num_subpopulations = num_subpopulations\n        self.subpopulation_size = subpopulation_size\n    \n    def __call__(self, func):\n        def pso_de_cc_optimizer():\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(self.num_subpopulations * self.subpopulation_size, self.dim))\n            velocities = np.zeros((self.num_subpopulations * self.subpopulation_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(self.num_subpopulations * self.subpopulation_size, self.dim), np.random.rand(self.num_subpopulations * self.subpopulation_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(self.num_subpopulations):\n                    subpop = swarm[i * self.subpopulation_size: (i + 1) * self.subpopulation_size]\n                    subpop_best_idx = np.argmin(pbest_fitness[i * self.subpopulation_size: (i + 1) * self.subpopulation_size])\n                    subpop_best = personal_best[subpop_best_idx]\n                    for j in range(self.subpopulation_size):\n                        subpop[j] = subpop_best  # Cooperative Coevolution Strategy\n\n                    for j in range(self.subpopulation_size):\n                        trial = subpop[j].copy()\n                        idxs = list(range(self.num_subpopulations * self.subpopulation_size))\n                        idxs.remove(i * self.subpopulation_size + j)\n                        a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                        j_rand = np.random.randint(0, self.dim)\n                        for k in range(self.dim):\n                            if np.random.rand() < dynamic_params[4] or k == j_rand:\n                                if np.random.rand() < self.mutation_prob:\n                                    trial[k] = np.random.uniform(low=-5.0, high=5.0)\n                                else:\n                                    beta = np.random.normal(0, 1, 1)[0]\n                                    trial[k] = a[k] + beta * (b[k] - c[k])\n                        trial_fitness = func(trial)\n                        if trial_fitness < pbest_fitness[i * self.subpopulation_size + j]:\n                            pbest_fitness[i * self.subpopulation_size + j] = trial_fitness\n                            personal_best[i * self.subpopulation_size + j] = trial\n                            if trial_fitness < gbest_fitness:\n                                gbest_fitness = trial_fitness\n                                gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_cc_optimizer()", "name": "Cooperative_Coevolution_Enhanced_AMPR", "description": "Introducing cooperative coevolution strategy to enhance diversity and global search capability in the population-based optimizer.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 49 is out of bounds for axis 0 with size 49').", "error": "IndexError('index 49 is out of bounds for axis 0 with size 49')", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {}, "mutation_prompt": null}
{"id": "19e19cec-ed47-469c-a9ab-440348ab807a", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Search Space Adaptation\n                search_space = 5.0 - 10.0 * progress  # Dynamic search space within [-5.0, 5.0]\n                swarm = np.clip(swarm, -search_space, search_space)\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-search_space, high=search_space)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing exploration by introducing a dynamic search space adaptation during optimization.", "configspace": "", "generation": 56, "fitness": 0.28204614719609356, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.7820051535448456, 0.7891219195083525, 0.7816859236897542, 0.7875968779764481, 0.7998680585705406, 0.8023915481702601, 0.8003163083710851, 0.7817045515917737, 0.7786841924504921, 0.6246150315651046, 0.6208313182535181, 0.6346711282094688, 0.593801593363906, 0.6416840757858518, 0.6371656985026843, 0.6130268005274835, 0.6275654876134298, 0.6401202011213727, 0.24077394377126293, 0.1477902321317448, 0.13954147662646688, 0.19162391036476367, 0.16941226060954417, 0.12104197081185153, 0.35675466162324665, 0.30113889729228716, 0.17572454064315535, 0.14622280485508055, 0.15675260595200036, 0.21618495233774004, 0.18379516837887733, 0.14739992316960038, 0.12716852719554295, 0.13719432754887007, 0.1968698935401787, 0.17512648920557672, 0.39074052315379626, 0.3673006999022973, 0.38011337389159394, 0.32532335877543983, 0.31438473147988344, 0.43465507162717554, 0.32600792162263237, 0.31452399533846853, 0.3334646018006241, 0.5413802308393609, 0.5103433973606755, 0.4882987862704383, 0.5744707484466758, 0.5020158885603929, 0.5369814884476066, 0.5249935191836825, 0.5442988857900825, 0.5262691468734746, 0.22281592970775543, 0.318373227559103, 0.6647104273037412, 0.20825609418131785, 0.1896458429006571, 0.2623321145076912, 0.7893107343148105, 0.21938291713101643, 0.21921205566490953, 0.16991453122779532, 0.1739946468187713, 0.175227335838667, 0.19351800731009572, 0.18505102509131144, 0.18154806050094807, 0.19303291195446703, 0.17871103834151403, 0.17670000559977161, 0.1784206080024524, 0.11623867256525189, 0.1742143060723529, 0.22832284948908044, 0.16893637259543703, 0.1781202788355185, 0.21368195400703482, 0.10349631108890722, 0.20542773371568912, 0.05112842178956012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003806816527901935, 0.04902195973177603, 0.0856166295274916, 0.09192931760370793, 0.08882959761024412, 0.05659850217126061, 0.03517392677313491, 0.02379109534027235, 0.07318514177103719, 0.030148603009722552, 0.04932936165187496, 0.14319284192713533, 0.12651267328258475, 0.08439834792447654, 0.0852157987266261, 0.1257332377765642, 0.09977924178220599, 0.15708392343886768, 0.06321045391080227, 0.1350965395201873, 0.11151698579461367, 0.04378465285835009, 0.11184225339081055, 0.10072001315765011, 0.06366398506027404, 0.1693177463452752, 0.1413628533013378, 0.18811124917105704, 0.11568473572859328, 0.4853679656456613, 0.49157089617230987, 0.5229493765063002, 0.52278146950159, 0.5045604744499818, 0.5140315997049223, 0.5322954640139015, 0.577188775978424, 0.5531558801488374, 0.1265429552805174, 0.134844954855178, 0.1353549239684254, 0.10260136721454804, 0.13017697004776418, 0.09782250909711243, 0.09663383116145763, 0.1286589045328912, 0.09770952937042454, 0.1854392211321072, 0.14931628212449655, 0.2846165833801729, 0.12638110786275902, 0.3537578562515685, 0.141598267585197, 0.17268483784598376, 0.14979844819974264, 0.12748038643838133, 0.43497501137442773, 0.26698275165264573, 0.32076911068599834, 0.48195084702287794, 0.4828655466779501, 0.37620322715911425, 0.4994738042809257, 0.4456694733921198, 0.46148054740921074, 0.22538961703251414, 0.40722341419315233, 0.2680135747465374, 0.26558440134253003, 0.2090108558373357, 0.3030488254905611, 0.30094828164199994, 0.35891964141604726, 0.22752409140343288, 0.2069369312861301, 0.2158137088940465, 0.19486786676056722, 0.2049548084502827, 0.20908449846063848, 0.21120259440004252, 0.19652057652058852, 0.18784022540012923, 0.1955786005730139, 0.24142991978021522, 0.21931108851503855, 0.4643589668364654, 0.19389213388729087, 0.5588935918680051, 0.20083442622692804, 0.20394624755950586, 0.2150024691036807, 0.2276075199829095, 0.8514026460179648, 0.8320918818419246, 0.15258554616753994, 0.8105861976140213, 0.19696797503678642, 0.20038817396837827, 0.1297143744276129, 0.16750164426136438, 0.8547346643454075, 0.4542028646587537, 0.15530372696030603, 0.48923337848724946, 0.5332034046812746, 0.5363669377370142, 0.16434254988791763, 0.20926316718726035, 0.10433261749617018, 0.5512831934974671, 0.20871318193213972, 0.17596323119040314, 0.1692190161237399, 0.1783580009569241, 0.18294091604403195, 0.1856351108776768, 0.20360799170916632, 0.16487710242629894, 0.17909186726105364, 0.08450948810582526, 0.09358330648932767, 0.0786067394128418, 0.09226913152673444, 0.08524831764041796, 0.0798669944339635, 0.07786830256861754, 0.07817490055755438, 0.08357749191962716]}, "mutation_prompt": null}
{"id": "c884cee8-603b-4826-a33b-226de77738d3", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "811a3659-ae40-42ab-bc81-7cafc6fa95f2", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Chaos_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Chaos-based perturbation\n                chaos = np.sin(swarm)\n                swarm = swarm + chaos\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Chaos_Population_Resizing", "description": "Introducing chaos-based perturbation to enhance exploration and diversity in the population optimization process.", "configspace": "", "generation": 58, "fitness": 0.1487992465179295, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Chaos_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.22499567253375152, 0.21459629910496503, 0.23019855976670234, 0.22759045095024266, 0.2181147884621073, 0.23396968770694682, 0.23377338105020629, 0.2499261910996936, 0.22786574815328753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06789029986320783, 0.06859862928859695, 0.06027179425214613, 0.08545205928852595, 0.0975358863403859, 0.06868954923470538, 0.08209729390225984, 0.06909212181023938, 0.07995768518573931, 0.0732113892859374, 0.06319382339373292, 0.06320318010733039, 0.04738458479982377, 0.043452865449338574, 0.05791119634800401, 0.062088754670894364, 0.060543329138059154, 0.05029662953748504, 0.9881677597493037, 0.9908645824021676, 0.9911942124398436, 0.9874064696571057, 0.9887733118143812, 0.9861425736592809, 0.9902093320453229, 0.9912557361644962, 0.9882649803684286, 0.12321896481579242, 0.1435828007454294, 0.1483132293494458, 0.13475273440849755, 0.09076311853221852, 0.11348766078201278, 0.18595138531511424, 0.16680407827748367, 0.16211113645723685, 0.18771624098068584, 0.07893544976506439, 0.14832787139306547, 0.18686270140223882, 0.17063898440538583, 0.13728329936766404, 0.13203242514017788, 0.17166210152271977, 0.12197311505905473, 0.025077797640780997, 0.0004339295939367327, 0.05177255594919372, 0.06943363778161216, 0.09028758941384607, 0.09590719731105068, 0.09497429916019606, 0.07643629243685324, 0.0592034810499692, 0.003718638686317388, 0.05929330734820759, 9.999999999998899e-05, 0.008772573486660273, 0.0027702785049458223, 0.00015119304839794623, 0.004358102137652198, 0.005425773806184253, 0.006045911554637851, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043284340956997736, 0.06438236962290134, 0.0377644630096724, 0.0051127142189550945, 0.012675938384478447, 0.011546758028641357, 0.04545948459624105, 0.025897018708499697, 0.005761580817459588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012954641837118697, 0.017686999664447867, 0.015312790301789225, 0.00908387706214675, 0.011060644089768146, 0.0117966010291648, 0.009683413937307539, 0.020618914693974366, 0.038935242099254364, 0.2353444375806879, 0.2773802981424498, 0.2346573438822681, 0.23895395889575033, 0.2531418967106851, 0.24409091950601958, 0.2200791785751891, 0.21120637984606105, 0.241779066900213, 0.10419157287306957, 0.08498082801093132, 0.10994947831512325, 0.08040443023942967, 0.08069006724750383, 0.06804547152107754, 0.06419910511929261, 0.07393965201458264, 0.06763415782144189, 0.13313957678483201, 0.14577979551970477, 0.1298722179353312, 0.12436669773015185, 0.15341805153079457, 0.12936940453283385, 0.16409033592864475, 0.14001098320939764, 0.1305701496687901, 0.2018674857644941, 0.2023402119572325, 0.20280373083072656, 0.18371655967427525, 0.20074185096760944, 0.17237339179002897, 0.1858288914282037, 0.20423940776309768, 0.19040629529267394, 0.1736157282249403, 0.1496959924821103, 0.14523281657613984, 0.11861885078511436, 0.11829698788116771, 0.1230534085819539, 0.1413126112500016, 0.13978677322120547, 0.1470500594730575, 0.15508271931492323, 0.1479906581631918, 0.1666044616495943, 0.2068599386677854, 0.1747728336081278, 0.1772997624227064, 0.14998511861702213, 0.14529825802867236, 0.20391574568705906, 0.16501823405669092, 0.16744047782754168, 0.14589794347045149, 0.16902788394974233, 0.17276274581989814, 0.1315523897543961, 0.16771535144561933, 0.15419641693229746, 0.15613770386163028, 0.3074806147755028, 0.15625211633261427, 0.2841642210262797, 0.33629363418551506, 0.2439602420353193, 0.26719352708432165, 0.21369407725520995, 0.16079261673296674, 0.25803064812503695, 0.2286783603430621, 0.1270181874029338, 0.2372695646127132, 0.24861531518112767, 0.1650796793347008, 0.160725329594408, 0.2733866903997929, 0.2184326426651596, 0.16611547613461353, 0.17654993910120576, 0.17235818962905236, 0.16097580341146966, 0.17681187296932965, 0.1865829438218195, 0.17678668282380694, 0.18933550295039925, 0.17687380151061238, 0.17327697314209833, 0.06089056648817637, 0.06792906154418688, 0.05881773269988566, 0.06465069786913447, 0.06183530617830113, 0.06503717284671107, 0.06531640685410345, 0.06535160561142761, 0.06377043322293885]}, "mutation_prompt": null}
{"id": "fa41a5c6-d476-4446-a344-324328dc8948", "solution": "import numpy as np\n\nclass Enhanced_Chaotic_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, chaos_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.chaos_prob = chaos_prob  # New parameter for chaotic search\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Chaotic Search Component\n                if np.random.rand() < self.chaos_prob:\n                    swarm = swarm + 0.1 * np.random.normal(size=(swarm_size, self.dim))  # Introduce a small chaotic perturbation\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Chaotic_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration by introducing a chaotic search component to improve global search capabilities.", "configspace": "", "generation": 59, "fitness": 0.31015829897853914, "feedback": "The algorithm Enhanced_Chaotic_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8310495933526014, 0.8169246008802662, 0.8004361691638388, 0.822252146540679, 0.7996144789483524, 0.7945178154476478, 0.828464538794785, 0.8151886630020746, 0.7792582909000461, 0.44529981351084047, 0.4819230922848289, 0.3680436935312906, 0.4337345765158489, 0.5152916384761801, 0.3749134929400668, 0.42426511360122754, 0.4777419132695284, 0.36306435594218434, 0.16922210837774732, 0.17129075836698793, 0.12831348636176243, 0.3575674061442645, 0.23009981071585517, 0.13971080979887085, 0.15867140940396252, 0.15458907359053242, 0.15573572031579386, 0.1408887697872485, 0.148187583657448, 0.1370526642153418, 0.1501620704581348, 0.16653392553308966, 0.15690204359339188, 0.14105040465074814, 0.1513320237123842, 0.1369974606698513, 0.9892741130631942, 0.9916492522008312, 0.9890966329402184, 0.9916989621480978, 0.9888686071628935, 0.9874279220303658, 0.9906345273383312, 0.9937765529071757, 0.9905699734912355, 0.5515726253849981, 0.5322199029511467, 0.5426969274135263, 0.5577210142056981, 0.5253765458030628, 0.5024714487609013, 0.5206911906598874, 0.5337026737182238, 0.501968133819956, 0.22512149906141854, 0.47111193985120836, 0.16744644114132812, 0.8679191216213289, 0.20378021706548766, 0.6133729293297204, 0.22110333685126338, 0.23631534330908222, 0.36420237140887635, 0.21865472999828905, 0.1845701619838116, 0.1789325847338612, 0.18209520141244362, 0.18655211686807394, 0.16321016761701868, 0.23404458128790906, 0.18745553068777532, 0.18589644868154442, 0.19701884691141025, 0.19450465113792403, 0.1148110755858397, 0.19959036945628672, 0.19721584713780926, 0.1922602827673322, 0.23213751266981275, 0.1996820212706707, 0.2149623250313374, 0.0787781539142528, 9.999999999998899e-05, 0.05844861991565142, 0.003120263564165726, 9.999999999998899e-05, 0.07351510525649607, 0.02344925081810456, 9.999999999998899e-05, 9.999999999998899e-05, 0.09561413428350496, 0.04431486396503337, 0.07569612536889359, 0.05581450928090104, 0.006637251056590854, 0.00220716900440876, 0.14138208133193797, 0.10624604492373924, 0.11038670399749628, 0.07772244349280322, 0.1383094780565849, 0.1245444218247459, 0.033489468988205595, 0.3436186110761391, 0.014757692871636419, 0.07756402625150116, 0.09361805370923826, 0.04044360883058107, 0.07618194097738884, 0.1673563886119307, 0.22489286034154132, 0.06030165184456926, 0.07576564587524792, 0.16923097058183378, 0.22473306882791833, 0.21302196569385123, 0.10198083221319754, 0.5069180720860373, 0.524069917188833, 0.49198192483423275, 0.5030658694811796, 0.5232503001199658, 0.5090482348159873, 0.49596627114728364, 0.49268039053351853, 0.5255023389006539, 0.11265810226912476, 0.11007542711825613, 0.12520301887457375, 0.12345889038494329, 0.17324617388832575, 0.14102996384746946, 0.12430803280522595, 0.13579217607138272, 0.06957199199182873, 0.25408849541114, 0.14675492820592795, 0.20503308961993538, 0.2872784798942146, 0.1770404051376805, 0.2147207125169065, 0.20484334032842655, 0.2005162021296495, 0.17586657978882736, 0.33836179025972335, 0.4256322114261558, 0.41864634111495913, 0.3840057921956189, 0.2608867504745598, 0.4433836814229013, 0.47781024769672964, 0.4316253981632464, 0.45365529085918443, 0.2960347080285667, 0.3028103611356012, 0.206418650010196, 0.2296786576425216, 0.2052321091662973, 0.2596902568068755, 0.25511529113435916, 0.36456336807781076, 0.2946482174086793, 0.2061926039512174, 0.19665186045108718, 0.20436978587386223, 0.1949613549638154, 0.21049001731486416, 0.2006048861130556, 0.21329414071442454, 0.2177246053413887, 0.19088232933388083, 0.2077144109487754, 0.24195822193163852, 0.24088890356175496, 0.23877380632181466, 0.2190791902737056, 0.20297490526231554, 0.24268975307781204, 0.2105751903923585, 0.20788515176787803, 0.8836447832974247, 0.16806787722355565, 0.15418585985414812, 0.9081218937887755, 0.1994840173286484, 0.19773416842840563, 0.8613268590313448, 0.16938070081983891, 0.8812819189419141, 0.8290358136532188, 0.1547664147159037, 0.48115612223874626, 0.5894190284167578, 0.20703567445612236, 0.6264914787115573, 0.5978216569834058, 0.6443024293915489, 0.7955863075108582, 0.168595214741026, 0.1783234116481488, 0.1781007229430186, 0.18092979085969307, 0.18611609985287692, 0.17513130156577594, 0.18563803899560893, 0.1806817511065958, 0.18993958117051324, 0.08170494241089543, 0.08899732303972174, 0.09166127185828898, 0.07913434384969409, 0.07779800783978319, 0.0854728813622152, 0.0820793950956118, 0.08613553336427071, 0.08381080877297131]}, "mutation_prompt": null}
{"id": "ab61f6b0-0222-441a-804f-2253cc51154d", "solution": "import numpy as np\n\nclass Improved_Levy_Flights_Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                \n                # Introducing Levy flights for global search\n                step = 0.01 * np.random.standard_cauchy((swarm_size, self.dim))\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm) + step\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Improved_Levy_Flights_Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Improving exploration by introducing Levy flights for global search capability enhancement.", "configspace": "", "generation": 60, "fitness": 0.2286181488612805, "feedback": "The algorithm Improved_Levy_Flights_Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.43219149189360884, 0.455135354470509, 0.4792544840183359, 0.47156884692135137, 0.4494152030738444, 0.45531634879002203, 0.4587868961312921, 0.44660583037921997, 0.4530789294672196, 0.04069731560977374, 0.06468151962868596, 0.040245756710495906, 0.06613808440457491, 0.07392187224516655, 0.061549729098947514, 0.06501196555922306, 0.0787163697982678, 0.0683359411118849, 0.12042143874415456, 0.13569340483422498, 0.10824828999913516, 0.1263346027634641, 0.10788689994491962, 0.11580813086281583, 0.10332125747509713, 0.13971074934501826, 0.11195168558737878, 0.12279541195923704, 0.10159150278980122, 0.10877850938676037, 0.10512616429698751, 0.11735063750151242, 0.11056924321987405, 0.1208539437605356, 0.10399079361018937, 0.09353591057986776, 0.9887469591310075, 0.9906014553485514, 0.9879311569394228, 0.9890266515882729, 0.9874377396287557, 0.9864012823197574, 0.9935898686810957, 0.9914759379195018, 0.988479935150192, 0.30495408227225573, 0.28348244711817594, 0.30342911564949593, 0.314650124047125, 0.3259913772110541, 0.30064165492435746, 0.2796074414463494, 0.3307733240438905, 0.28799985457887556, 0.3476392779061852, 0.2659729054563259, 0.3458029647862517, 0.2678563696657815, 0.34832078176923986, 0.26740470485400814, 0.3383903492518955, 0.2155292700116811, 0.28490033741880516, 0.18370709411368313, 9.999999999998899e-05, 0.1819409317709486, 0.1615255259272118, 0.15270287071282873, 0.1590017745374651, 0.14814099262646974, 0.16057769982202408, 0.14216373032018115, 0.15999433709306665, 0.15984162802396162, 0.1483115968920372, 0.1568368198081569, 0.1408845120351776, 0.17248120112527943, 0.168012344756435, 0.14500642713590828, 0.12334778835230098, 0.0013010993324896747, 9.999999999998899e-05, 9.999999999998899e-05, 0.0071550933835135, 0.003954135557387106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07905350195000915, 0.01721796505524764, 0.08946476021942995, 0.06726496606476962, 0.07590490929222071, 0.02243304104474797, 0.07334215866531446, 0.07476024993771813, 0.05134373102907652, 0.0053025282222515235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10592718798423262, 0.08244211005433988, 0.11301691619056053, 0.10337073484992776, 0.10768308071248944, 0.10182999555785499, 0.08202457628629889, 0.031166911984681023, 0.06039055445200303, 0.3993305434758937, 0.44144133436868893, 0.4086496849809911, 0.4166195129757956, 0.40361121936564137, 0.40692594737847554, 0.4362694451553454, 0.39427067854771536, 0.43018577475215747, 0.12024919523416044, 0.093443942617501, 0.11797062801238312, 0.10575618885026561, 0.08148805321457764, 0.08761971001576008, 0.11883448520913475, 0.08623203109658462, 0.11633130457185759, 0.2498701134216591, 0.22349813506248584, 0.17742590824921045, 0.13022069437576833, 0.16271432196624425, 0.17759759929076624, 0.19643900833684624, 0.21456937971105328, 0.22874583583258823, 0.2823575937851749, 0.28291077078130034, 0.29770322129302706, 0.29602278770742674, 0.30049887097670125, 0.27438195993918835, 0.29859524218219236, 0.2917907365927327, 0.2829996709699094, 0.23053932941717337, 0.226558096569226, 0.23100914941037476, 0.2180787766829677, 0.2579013084093681, 0.1947386622127829, 0.2385787100657477, 0.250523398759285, 0.21401078250569994, 0.21199782938190115, 0.19673812860987838, 0.2084847193385767, 0.18393978530377209, 0.1949961599307034, 0.18058922145519152, 0.21682118738316336, 0.19957008645729657, 0.21580284318886178, 0.21899441812325549, 0.2074824315840782, 0.1902752433155812, 0.24679129330397875, 0.2122412804377911, 0.18783965346682208, 0.2556130308816936, 0.2307964130127832, 0.2259060139874821, 0.6687260259588912, 0.16832860914308112, 0.5776646424116036, 0.4198393313741512, 0.6751845197539864, 0.3200041953414974, 0.1584903994701563, 0.16939031319509845, 0.758823857564008, 0.45762333618528794, 0.43886438352241053, 0.1512807091713868, 0.4992180230933274, 0.1680231184564802, 0.20848895137126622, 0.4855065694107744, 0.5735647455696361, 0.1636659521858257, 0.17717120508405693, 0.1901476319186356, 0.2133158523121097, 0.19131713885707535, 0.17658659538797528, 0.16979822612159345, 0.16568275464880466, 0.18645169730643196, 0.16773922159594223, 0.07531238379847582, 0.07876529087272177, 0.07993759272810241, 0.08955867663766293, 0.08489098203987377, 0.08864726250209787, 0.08366307013546725, 0.07626681104072908, 0.08920522640591988]}, "mutation_prompt": null}
{"id": "841964e7-b070-42f0-aec9-386950a81c2e", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "3ac2da8c-cc42-49a7-9a21-2b71d8cd08de", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "9063ea50-5aa0-4f96-bf8f-c68f0096ee99", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def quasi_random_search(self, low, high, dim):\n        return np.array([np.linspace(low, high, dim) + np.random.uniform(-0.1, 0.1, dim) for _ in range(self.swarm_size)])\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = self.quasi_random_search(-5.0, 5.0, self.dim)\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Incorporating a quasi-random global search strategy to enhance diversity and global exploration capability in the optimization process.", "configspace": "", "generation": 63, "fitness": 0.34454084357813186, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8871103585398474, 0.9004529437547454, 0.8952277550490049, 0.8928338681905019, 0.9022309488445879, 0.8944281976929461, 0.9061297825081231, 0.8950172490236816, 0.8989537260751133, 0.8221130893088388, 0.823148273554064, 0.8160951695358529, 0.8218148858941585, 0.8241498537873146, 0.817659794570963, 0.8208605181152491, 0.8219849171343103, 0.8399773016694934, 0.5611667547857356, 0.5753742281775147, 0.5275794081425006, 0.7444992739350808, 0.4952784442704856, 0.25049368995825694, 0.7017231788659664, 0.4587734080831384, 0.5307632639141765, 0.6125738750094756, 0.1644324685027585, 0.5005256589012208, 0.16785985194293263, 0.16561233360409156, 0.6609201578921393, 0.4363405640374083, 0.15056925930471843, 0.4925081080669462, 0.9843743159462526, 0.9835598164614546, 0.9734659985398585, 0.9843338494256023, 0.9875697117177108, 0.9855810946108324, 0.9828609584717186, 0.9858968682696131, 0.9884002761836165, 0.7321024034625734, 0.7846608449489402, 0.8014505543126049, 0.7861154266163197, 0.701843648411337, 0.7734699914838346, 0.7398911546996418, 0.7681440644412284, 0.7468447169850471, 0.22610483482323174, 0.34435798984925736, 0.3780355695708614, 0.20923561024444115, 0.26834612027789895, 0.8723534412189622, 0.19635571141870867, 0.22676448494774082, 0.16185155729601552, 0.19644533980450818, 0.2129555112987752, 0.23711294987081633, 0.3240031103830181, 0.19720792430694456, 0.20834293574718665, 0.19908324557792467, 0.21913232176664665, 0.21455144037819196, 0.21161075455182066, 0.20837858538418264, 0.12469108442563248, 0.19664953860906986, 0.20447957323064858, 0.2374995929267011, 0.20605113283020515, 0.2374751561627152, 0.332496976818764, 0.022981896422074377, 0.09164774191195901, 0.020047106020091854, 0.030389964515374568, 9.999999999998899e-05, 9.999999999998899e-05, 0.08398597980913314, 9.999999999998899e-05, 0.008115007551936282, 0.11818176107357958, 0.0943121859153272, 0.12063545333641268, 9.999999999998899e-05, 0.06929069320411929, 0.0501099012553734, 0.027556417522972554, 0.08253327407365874, 9.999999999998899e-05, 0.06554614994276109, 0.06745205587543335, 0.07664128285493788, 0.07141759233317158, 0.012787839081813912, 0.005393729863483743, 0.02398351934516163, 0.14993396713239238, 0.21146150903006777, 0.08816805057249344, 0.16439276836064598, 0.18527976226445797, 0.13188414964172368, 0.261273730548899, 0.13308218063349342, 0.07797502500132236, 0.17823918982622378, 0.04735009364807141, 0.4963755615609262, 0.5769875752965467, 0.49326542897177394, 0.5299262687403256, 0.5291514158712494, 0.5530624724967991, 0.6161466657817753, 0.5227716347079596, 0.5183917643216648, 0.09378496459580887, 0.084149227064242, 0.12101696364844561, 0.1042393109992178, 0.14187950642019365, 0.13916946195270918, 0.1735568672982708, 0.08777805949489903, 0.12034865403107309, 0.27627880445705977, 0.3624481193552721, 0.21841128875910376, 0.18677520560886418, 0.2649161851155689, 0.253102413937081, 0.1828307326368811, 0.2004253747721455, 0.17140571670422455, 0.31930439374500874, 0.49888484884246775, 0.26503939491656336, 0.3618449010262135, 0.37078392742143773, 0.3098545727532436, 0.589018737142676, 0.3529104472145512, 0.5968679708626385, 0.30689445798433035, 0.25777600788931476, 0.22359763857383597, 0.22408711542583026, 0.24937758277619682, 0.21131258510312367, 0.25559103500782376, 0.23759732920779064, 0.14186580629453005, 0.1920810581562219, 0.2098415736651803, 0.21261060056481174, 0.19546097044896538, 0.23149813486806703, 0.19200373555489014, 0.22013724473582252, 0.18188300268474045, 0.20607031703393897, 0.2092444211140767, 0.21972936481936645, 0.1839621860607834, 0.20754734253787088, 0.20365836400859494, 0.20921417672445153, 0.20466833730685363, 0.21716309310720217, 0.2356636882887907, 0.1509390616627434, 0.14564815476380755, 0.8796300422269062, 0.15616716356344262, 0.8958070011375534, 0.9128357738201267, 0.19198648266844487, 0.14985246339042058, 0.9107765100002979, 0.1455588259597922, 0.1393199839629149, 0.14913732228338228, 0.12741438033457253, 0.12668888297060799, 0.1272969103517726, 0.08197087716011242, 0.08170983956268152, 0.08210948133436846, 0.1632232620440096, 0.18896820804689218, 0.17269047729745668, 0.18732877116303748, 0.18299016385456413, 0.1764625511754423, 0.18510523508047527, 0.19400502563945532, 0.19160368303402797, 0.09323320055624684, 0.09717204461583862, 0.08242446006863846, 0.09467155931602633, 0.08418968843371244, 0.08237121620065846, 0.11069944433531642, 0.07700723071011395, 0.08631409776136956]}, "mutation_prompt": null}
{"id": "e9910967-2a0c-4732-912c-04d49dfce9b5", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "dcb6ad1a-fdb0-40b6-9581-353f90934376", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "3c9842c3-259c-468b-89c8-6bc4798f5b66", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "3ba4c779-514a-4e3c-ae7d-bbb2eda298ec", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism with dynamic parameter adjustments within the population-based optimizer.", "configspace": "", "generation": 67, "fitness": 0.366467990593556, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "cdf19c0d-327c-4a8a-96da-21d888c2265b", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "f8402e84-a2c8-43dc-9d9e-3ea2d80729ce", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                # Introducing chaotic mapping for diversity\n                chaotic_map = np.sin(swarm) * np.cos(swarm)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm) + chaotic_map\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Improving exploration by introducing chaotic mapping to enhance population diversity.", "configspace": "", "generation": 69, "fitness": 0.18652183958477728, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.34074565583863536, 0.3292013807087474, 0.32533658566429813, 0.3273643977405871, 0.3249001726084334, 0.3110712655990422, 0.34108790485938334, 0.3398185728373718, 0.29439779864104754, 0.0015348669568507889, 9.999999999998899e-05, 0.001478840982636065, 0.0017119011420103636, 0.021040580448331236, 0.0019621177743344154, 9.999999999998899e-05, 0.013694382226281832, 9.999999999998899e-05, 0.08990504536176724, 0.09675524877423669, 0.09160870023292589, 0.09014532302277567, 0.08276374254495089, 0.09714566516534362, 0.08702675659364756, 0.08727530627768632, 0.07844533845770951, 0.09468974614042969, 0.08620632538546746, 0.09755936053966541, 0.07327112397863478, 0.07545140541358053, 0.07477560373532799, 0.07879594235029364, 0.06837576411343449, 0.09275358425844915, 0.9916546886534106, 0.9914092089410018, 0.9848167881578124, 0.991255650309568, 0.9876802585685933, 0.986807476490277, 0.9893613133438506, 0.9876311022152137, 0.988470468526924, 0.20100115945396713, 0.20793514163420257, 0.21376625353730094, 0.19922002256695548, 0.24508719508601384, 0.22095501581058163, 0.16187262314915662, 0.17623847157035066, 0.18042475005455838, 0.23663555146727522, 0.215396136452366, 0.2181876838889245, 0.3138721901668219, 0.3240374981194969, 0.2707843962561307, 0.2305435563570314, 0.21564391405233296, 0.25624343334110167, 0.11998785324552375, 0.08457507616082549, 0.11675053466256469, 0.11362541240129576, 0.15643552804669691, 0.11080846032025271, 0.16368467521067598, 0.13980465624019855, 0.08301370088369764, 0.12011108773252, 0.09320865809753809, 0.10421530328711615, 0.0874115834025957, 0.10355204568562859, 0.10742697727579764, 0.10298095208714331, 0.0979030582306113, 0.10804028411291233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015839945310908154, 0.062018286676010614, 0.06495350889173046, 0.0470029436020335, 0.040463008670111766, 0.040485441783275955, 0.007060599620496766, 0.07266054622590923, 0.09743533957911243, 0.0013199104736452139, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06946083774954093, 0.05793938635940099, 0.024308743297707047, 0.057150017414939414, 0.054690287830276296, 0.058432826426151996, 0.05778749968428021, 0.03945656629168692, 0.05721342679384456, 0.3432634806657656, 0.3354052072033543, 0.33896854717142655, 0.3048780692534522, 0.2879803084344261, 0.3150763016268806, 0.3726402506534793, 0.33073912329192334, 0.3284927608396858, 0.08840892018149715, 0.08616042424298553, 0.08675852796033068, 0.10124331780151297, 0.0921414357649295, 0.0889401611278301, 0.08836553931734292, 0.0926302887999867, 0.08871277079297302, 0.1557160903060485, 0.15575590589809252, 0.15481580017866525, 0.1494787898619968, 0.1861685603890081, 0.13838366613019137, 0.15399663630076832, 0.1683094171619519, 0.147279212560829, 0.2690979451238501, 0.27438976990057373, 0.26766864607518315, 0.23831321187650423, 0.19705604194264714, 0.25426739627443895, 0.2173396526445096, 0.22977722020436409, 0.22972668233473292, 0.20968464750579374, 0.20451586688307, 0.2083712544272397, 0.16923078546226877, 0.16902224389866005, 0.19368923361415225, 0.17679292059136154, 0.18057402443682458, 0.21269930124334901, 0.2166280423210697, 0.17744283064321809, 0.1841275256324687, 0.19321166629945752, 0.21845758324958953, 0.20219856556209248, 0.1909986431085765, 0.19569873896430023, 0.18912592936582973, 0.1766555537717759, 0.18013352183255016, 0.1930141727923823, 0.1938858352953453, 0.18032605203075613, 0.18741388929642466, 0.183714045454492, 0.1955095046368639, 0.1815192322616539, 0.1639827550946107, 0.18166430154089186, 0.455168598108427, 0.4407652577634177, 0.24137607911416958, 0.3526034936031398, 0.5206061992418514, 0.1331338543859898, 0.5248506754480629, 0.41364746516788975, 0.15287814148858925, 0.40247834335355925, 0.18691293156565525, 0.1495013659982074, 0.19880842886479466, 0.10325891504853113, 0.10310375478227274, 0.16016557408702048, 0.174637130838164, 0.1653460140344969, 0.20170725550412194, 0.17345997133976054, 0.17760910876198654, 0.17650309685099397, 0.1771703211146871, 0.18587249265934902, 0.20733599673115644, 0.08302114226180635, 0.09404228949479598, 0.10322537748854554, 0.07897868334072011, 0.08163971618166233, 0.09515930622345081, 0.10145717870801163, 0.0802829332713485, 0.09118813644367418]}, "mutation_prompt": null}
{"id": "a272c06d-4899-4c42-801f-da75460d89a6", "solution": "import numpy as np\n\nclass Dynamic_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Dynamic_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a dynamic updating mechanism for the population size within the optimizer.", "configspace": "", "generation": 70, "fitness": 0.366467990593556, "feedback": "The algorithm Dynamic_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "5632399e-eb5e-48e3-980a-57d2f695fa52", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "b84bedc6-3de2-439b-b0c1-b8df871b5751", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "6000d4ab-46e3-4ff5-aaa6-7d583c1b84ab", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Enhancing the exploration and exploitation balance by incorporating a self-adaptive differential evolution mechanism within the population-based optimizer.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "57373c61-cb13-46c7-a7a8-8e638ce76f71", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Local_Search(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    \n                    # Dynamic Mutation Probability Adjustment\n                    local_search_prob = np.exp(-0.2 * np.abs(trial - swarm[i]))\n                    mutation_prob = np.clip(np.mean(local_search_prob), 0.01, 0.3)\n                    \n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Local_Search", "description": "Implementing a dynamic mutation probability adaptation mechanism based on local search behavior.", "configspace": "", "generation": 74, "fitness": 0.366467990593556, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Local_Search got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8866004046988178, 0.8903913988640341, 0.9051193579559944, 0.9032259895926256, 0.8926265886830146, 0.8821618811587707, 0.8897081467438053, 0.8974230981064938, 0.9166845383456027, 0.8171534004960225, 0.8011834848346018, 0.8105356151132894, 0.8227839683267885, 0.8154856518270057, 0.8299065132998134, 0.8206278849834515, 0.8204266955118613, 0.8306421082527862, 0.7032035162238879, 0.4450584558187465, 0.6533870244454417, 0.5600765272869995, 0.6420998922688421, 0.7001061479757276, 0.6006386940275396, 0.42297406399365456, 0.6250550594155894, 0.5698000262743055, 0.1607770983257587, 0.488877463702863, 0.5902633344884876, 0.1618529857912281, 0.6310242677718826, 0.31255564536145874, 0.21992136111110505, 0.1561747357578559, 0.9882971753879076, 0.9928175456949256, 0.9871002430820154, 0.9913032056864255, 0.9874898913525463, 0.9887675543623079, 0.9894448361726881, 0.9887365414317069, 0.9875049729879157, 0.7617624563841692, 0.7324575713296181, 0.7863287918328751, 0.7574731849155658, 0.709523943338585, 0.7783128339050474, 0.8120891732906315, 0.7281965257868166, 0.7708414357488227, 0.2269442719967404, 0.32917014303485237, 0.38814718487893574, 0.21042481620466946, 0.33834525868004517, 0.1854208047560727, 0.21865361444891462, 0.1566480336661109, 0.17501581112506015, 0.21235425018698695, 0.3265742402307915, 0.2103181024578069, 0.2064344341647163, 0.2392369593182282, 0.2060084319756964, 0.2866862951249797, 0.21468517017669875, 0.1950617590423943, 0.18814009807850596, 0.05259377342635019, 0.2150093066647335, 0.20796781619970173, 0.20539261780941964, 0.22521237427790397, 0.25574714012687716, 0.254345930925845, 0.24499466929525338, 9.999999999998899e-05, 9.999999999998899e-05, 0.003948345219117466, 0.05147815250567689, 9.999999999998899e-05, 0.00010017430375630632, 0.0017950292433970283, 0.013605298365691354, 9.999999999998899e-05, 0.10926447864748157, 0.09872493346305733, 0.11615523582936826, 0.07723288966166242, 0.03496718518938213, 0.027544104859139606, 0.04679914512202343, 0.0837288761284426, 0.032216775644675955, 0.20405637062724258, 0.18632925451166138, 0.23428415442479833, 0.12886611487256594, 0.1929136748984649, 0.13377694016649766, 0.24047826340645428, 0.11508190767081106, 0.1303061649444489, 0.13184301028769585, 0.18951710695283375, 0.17232903595075533, 0.14646356215972478, 0.10545991443472191, 0.12001137719173516, 0.06718947472060677, 0.1793338440914013, 0.11174335910360056, 0.5068840938806953, 0.5198788139066033, 0.519728679175767, 0.5968928533390638, 0.5534288015527936, 0.5107796275832275, 0.5544112533287637, 0.5446195040219974, 0.6700211346961591, 0.10239068998968381, 0.12644072956736707, 0.11669354730676496, 0.1414648219145831, 0.09721352304767694, 0.0931430923453005, 0.12622115680844415, 0.1289311944970254, 0.1772636253289882, 0.25415694558367674, 0.15443260908103862, 0.2903199459826551, 0.2844745779388609, 0.7856705227175764, 0.1921030061815574, 0.23423504582611887, 0.18449953447611422, 0.14786793549866994, 0.33438348983731003, 0.4025656578894784, 0.4015817969544945, 0.5254804973018392, 0.7171631154777452, 0.4055885351326377, 0.44184157243079336, 0.40218721973806315, 0.6532382621805859, 0.38725277745535835, 0.2557140503812537, 0.31546388039767925, 0.28152589495888625, 0.19805032157893465, 0.33627316889967207, 0.17655594412114028, 0.2440553208538302, 0.2445171150005241, 0.20662339322881407, 0.20261580556348513, 0.2034483789924566, 0.1916929090509295, 0.2344978331012606, 0.1928851066464159, 0.24067954646210832, 0.17287378636243356, 0.20602712080802, 0.197386744504349, 0.24596705198992264, 0.19768507790184497, 0.19080034125337886, 0.20707796499063114, 0.19105759319504445, 0.23348864049644058, 0.186466653010253, 0.2206268620901809, 0.1827050441455037, 0.16712261165481357, 0.15116582379126153, 0.9173896072212006, 0.1988174958675607, 0.9299586065107461, 0.900689293984526, 0.16890158976346448, 0.9083987909114248, 0.5789444555767674, 0.15566282318849334, 0.16530260990358492, 0.6191439404854625, 0.20700904991427138, 0.2106825721752169, 0.7149530893253251, 0.1668426120070553, 0.8265060030535867, 0.1727451149130962, 0.18133849506479327, 0.18392632245167673, 0.19193901315782058, 0.19449381083168527, 0.16961628294006992, 0.18598675030757805, 0.17708494957676235, 0.18983626081637717, 0.09071090280856664, 0.10921180560582378, 0.0872044265044597, 0.08281968079546753, 0.08838622056627388, 0.08347231340470229, 0.08885763596240648, 0.08361702855281872, 0.08767786625216434]}, "mutation_prompt": null}
{"id": "f51fe8f4-5e40-4b12-8093-c2b11d3848b2", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            # Introducing chaotic initialization for population diversity\n            swarm += 0.1 * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Introducing a chaotic initialization technique to enhance the diversity of the population and improve exploration capabilities.", "configspace": "", "generation": 75, "fitness": 0.3672614394152498, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "f35cf9cb-60f8-4d35-b3c3-4f5aacd58ff5", "metadata": {"aucs": [0.8993723868652213, 0.9011336994235679, 0.9077848515280128, 0.9060027807837625, 0.8960547762898553, 0.8987637865447087, 0.891147185179619, 0.8938164740528707, 0.9078977720528207, 0.8275928923781458, 0.8136289542393045, 0.834394650175048, 0.839997586016309, 0.811953230268686, 0.840424656611636, 0.825164196715072, 0.8138422186017242, 0.8292379899434776, 0.5927016416311826, 0.7278659023379899, 0.5852314625172867, 0.7091497398821309, 0.7298713393571361, 0.26112337479717973, 0.7112637952102774, 0.7989387881702902, 0.6126219214188803, 0.5351704793097747, 0.6177849910486364, 0.3489003135419205, 0.1679549713617462, 0.5827056013194348, 0.5482170678365217, 0.44086194218820096, 0.15876193238036795, 0.15647010072778067, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7398499634160178, 0.7712572445321413, 0.7806593767490917, 0.7594516559261979, 0.7340126896434309, 0.7762156810962814, 0.7322080178436934, 0.7564888844286574, 0.7818454527810995, 0.20777795903593888, 0.21449663545587005, 0.23873248926116952, 0.27571742926307874, 0.2700160825084852, 0.3748402195484679, 0.14418035865612622, 0.1742931149784055, 0.22562575300897292, 0.18851363343783833, 0.20669933253098582, 0.3074955576326981, 0.19500620874291885, 0.213565144391201, 0.2067001828998023, 0.19761135321831702, 0.20276951868224136, 0.19221782737250492, 0.22363245439473245, 0.32897767464695216, 0.26726562907168316, 0.19229904538417975, 0.22457767696568942, 0.2117134289506697, 0.21850511295832786, 0.24120490297685826, 0.35899321406769713, 0.0030483487032554324, 9.999999999998899e-05, 9.999999999998899e-05, 0.013812204292494745, 9.999999999998899e-05, 0.00028255067827287483, 0.03334741264445329, 0.00010017374482707009, 0.054319207529536784, 0.0703637259865818, 0.04881073587289697, 0.07627091331960933, 0.12737653109463443, 9.999999999998899e-05, 0.05877985219444248, 0.09301516133847654, 0.03926334116208963, 0.12474559938725738, 0.2217925834425326, 0.1618770257161154, 0.10452860654064444, 0.04354678417582347, 0.281633791460434, 0.022588825041282012, 0.20824545235693648, 0.029258791791736405, 0.023957164657683605, 0.10241643617036045, 0.12480625736944473, 0.03861325693712514, 0.12153054627728821, 0.032990813340837866, 0.16397970539468842, 0.15352852846802345, 0.08462308056888801, 0.062148896618306804, 0.5023741705454967, 0.49870120559072073, 0.5278919429587998, 0.5534667888589486, 0.6042628926808089, 0.5604831545904331, 0.552973553822196, 0.5764251851750667, 0.5600591307021259, 0.14413219349276019, 0.15931245963485563, 0.17891655983411658, 0.12572369491303803, 0.12565761774669537, 0.1380833956720955, 0.1381495210642777, 0.12877115689825536, 0.13673277488208369, 0.21926324944511766, 0.2688289598530612, 0.14890430821998146, 0.27515575656788394, 0.23923742055089292, 0.14938991381121702, 0.34197077280960797, 0.2554649902253707, 0.17707827863473702, 0.3613921785044242, 0.4045828245015459, 0.3970591090681631, 0.4909087616929252, 0.4468257336939596, 0.5276852047987786, 0.548563266678203, 0.531016914774948, 0.4638794572990692, 0.23102570840023418, 0.26526092764642983, 0.3042372650055476, 0.28811188657089437, 0.2556835373672258, 0.29718094931864414, 0.30032437839337667, 0.24063738317814898, 0.2103091196990906, 0.2174684191004539, 0.18366454312229918, 0.2348218469362534, 0.2242546431833301, 0.20544778020775467, 0.1898293218209507, 0.19402877653912398, 0.23116489181505628, 0.2054022859372936, 0.2429028191906526, 0.21438912030456925, 0.2505280334682488, 0.2057647003199694, 0.20975847921722557, 0.2448325850255263, 0.22408088451479902, 0.8116801550779008, 0.7477249425825117, 0.17242918476826674, 0.18505449484207093, 0.14632264262894257, 0.9082022630608385, 0.9089721215622655, 0.19861410062836826, 0.16556040119903936, 0.16851279418309573, 0.9177952945157752, 0.8720527950385505, 0.15397535536172746, 0.6289131201710798, 0.5896535258569287, 0.167758909821781, 0.20715039386252942, 0.7127833245274681, 0.16326748188184848, 0.15365292191209212, 0.17971109164780463, 0.18034233583562964, 0.16998922808501316, 0.18003038197861898, 0.1742790576939891, 0.1816140242110008, 0.17521873753063433, 0.17803751641068344, 0.18692509196778095, 0.10054489274870249, 0.08812153019783653, 0.08956281791551046, 0.08214307757704953, 0.09400070011461537, 0.09616648793046567, 0.08030810434972135, 0.1026080335446683, 0.0854362818207528]}, "mutation_prompt": null}
{"id": "220e2b0f-fffb-44fd-bd24-b86e014ba75a", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            # Introducing chaotic initialization for population diversity\n            swarm += 0.1 * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Introducing a chaotic initialization technique to enhance the diversity of the population and improve exploration capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f51fe8f4-5e40-4b12-8093-c2b11d3848b2", "metadata": {"aucs": [0.8993723868652213, 0.9011336994235679, 0.9077848515280128, 0.9060027807837625, 0.8960547762898553, 0.8987637865447087, 0.891147185179619, 0.8938164740528707, 0.9078977720528207, 0.8275928923781458, 0.8136289542393045, 0.834394650175048, 0.839997586016309, 0.811953230268686, 0.840424656611636, 0.825164196715072, 0.8138422186017242, 0.8292379899434776, 0.5927016416311826, 0.7278659023379899, 0.5852314625172867, 0.7091497398821309, 0.7298713393571361, 0.26112337479717973, 0.7112637952102774, 0.7989387881702902, 0.6126219214188803, 0.5351704793097747, 0.6177849910486364, 0.3489003135419205, 0.1679549713617462, 0.5827056013194348, 0.5482170678365217, 0.44086194218820096, 0.15876193238036795, 0.15647010072778067, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7398499634160178, 0.7712572445321413, 0.7806593767490917, 0.7594516559261979, 0.7340126896434309, 0.7762156810962814, 0.7322080178436934, 0.7564888844286574, 0.7818454527810995, 0.20777795903593888, 0.21449663545587005, 0.23873248926116952, 0.27571742926307874, 0.2700160825084852, 0.3748402195484679, 0.14418035865612622, 0.1742931149784055, 0.22562575300897292, 0.18851363343783833, 0.20669933253098582, 0.3074955576326981, 0.19500620874291885, 0.213565144391201, 0.2067001828998023, 0.19761135321831702, 0.20276951868224136, 0.19221782737250492, 0.22363245439473245, 0.32897767464695216, 0.26726562907168316, 0.19229904538417975, 0.22457767696568942, 0.2117134289506697, 0.21850511295832786, 0.24120490297685826, 0.35899321406769713, 0.0030483487032554324, 9.999999999998899e-05, 9.999999999998899e-05, 0.013812204292494745, 9.999999999998899e-05, 0.00028255067827287483, 0.03334741264445329, 0.00010017374482707009, 0.054319207529536784, 0.0703637259865818, 0.04881073587289697, 0.07627091331960933, 0.12737653109463443, 9.999999999998899e-05, 0.05877985219444248, 0.09301516133847654, 0.03926334116208963, 0.12474559938725738, 0.2217925834425326, 0.1618770257161154, 0.10452860654064444, 0.04354678417582347, 0.281633791460434, 0.022588825041282012, 0.20824545235693648, 0.029258791791736405, 0.023957164657683605, 0.10241643617036045, 0.12480625736944473, 0.03861325693712514, 0.12153054627728821, 0.032990813340837866, 0.16397970539468842, 0.15352852846802345, 0.08462308056888801, 0.062148896618306804, 0.5023741705454967, 0.49870120559072073, 0.5278919429587998, 0.5534667888589486, 0.6042628926808089, 0.5604831545904331, 0.552973553822196, 0.5764251851750667, 0.5600591307021259, 0.14413219349276019, 0.15931245963485563, 0.17891655983411658, 0.12572369491303803, 0.12565761774669537, 0.1380833956720955, 0.1381495210642777, 0.12877115689825536, 0.13673277488208369, 0.21926324944511766, 0.2688289598530612, 0.14890430821998146, 0.27515575656788394, 0.23923742055089292, 0.14938991381121702, 0.34197077280960797, 0.2554649902253707, 0.17707827863473702, 0.3613921785044242, 0.4045828245015459, 0.3970591090681631, 0.4909087616929252, 0.4468257336939596, 0.5276852047987786, 0.548563266678203, 0.531016914774948, 0.4638794572990692, 0.23102570840023418, 0.26526092764642983, 0.3042372650055476, 0.28811188657089437, 0.2556835373672258, 0.29718094931864414, 0.30032437839337667, 0.24063738317814898, 0.2103091196990906, 0.2174684191004539, 0.18366454312229918, 0.2348218469362534, 0.2242546431833301, 0.20544778020775467, 0.1898293218209507, 0.19402877653912398, 0.23116489181505628, 0.2054022859372936, 0.2429028191906526, 0.21438912030456925, 0.2505280334682488, 0.2057647003199694, 0.20975847921722557, 0.2448325850255263, 0.22408088451479902, 0.8116801550779008, 0.7477249425825117, 0.17242918476826674, 0.18505449484207093, 0.14632264262894257, 0.9082022630608385, 0.9089721215622655, 0.19861410062836826, 0.16556040119903936, 0.16851279418309573, 0.9177952945157752, 0.8720527950385505, 0.15397535536172746, 0.6289131201710798, 0.5896535258569287, 0.167758909821781, 0.20715039386252942, 0.7127833245274681, 0.16326748188184848, 0.15365292191209212, 0.17971109164780463, 0.18034233583562964, 0.16998922808501316, 0.18003038197861898, 0.1742790576939891, 0.1816140242110008, 0.17521873753063433, 0.17803751641068344, 0.18692509196778095, 0.10054489274870249, 0.08812153019783653, 0.08956281791551046, 0.08214307757704953, 0.09400070011461537, 0.09616648793046567, 0.08030810434972135, 0.1026080335446683, 0.0854362818207528]}, "mutation_prompt": null}
{"id": "df1bc6d3-0e38-4b50-8afb-cf3f07f4c419", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            # Introducing chaotic initialization for population diversity\n            swarm += 0.1 * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Introducing a chaotic initialization technique to enhance the diversity of the population and improve exploration capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f51fe8f4-5e40-4b12-8093-c2b11d3848b2", "metadata": {"aucs": [0.8993723868652213, 0.9011336994235679, 0.9077848515280128, 0.9060027807837625, 0.8960547762898553, 0.8987637865447087, 0.891147185179619, 0.8938164740528707, 0.9078977720528207, 0.8275928923781458, 0.8136289542393045, 0.834394650175048, 0.839997586016309, 0.811953230268686, 0.840424656611636, 0.825164196715072, 0.8138422186017242, 0.8292379899434776, 0.5927016416311826, 0.7278659023379899, 0.5852314625172867, 0.7091497398821309, 0.7298713393571361, 0.26112337479717973, 0.7112637952102774, 0.7989387881702902, 0.6126219214188803, 0.5351704793097747, 0.6177849910486364, 0.3489003135419205, 0.1679549713617462, 0.5827056013194348, 0.5482170678365217, 0.44086194218820096, 0.15876193238036795, 0.15647010072778067, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7398499634160178, 0.7712572445321413, 0.7806593767490917, 0.7594516559261979, 0.7340126896434309, 0.7762156810962814, 0.7322080178436934, 0.7564888844286574, 0.7818454527810995, 0.20777795903593888, 0.21449663545587005, 0.23873248926116952, 0.27571742926307874, 0.2700160825084852, 0.3748402195484679, 0.14418035865612622, 0.1742931149784055, 0.22562575300897292, 0.18851363343783833, 0.20669933253098582, 0.3074955576326981, 0.19500620874291885, 0.213565144391201, 0.2067001828998023, 0.19761135321831702, 0.20276951868224136, 0.19221782737250492, 0.22363245439473245, 0.32897767464695216, 0.26726562907168316, 0.19229904538417975, 0.22457767696568942, 0.2117134289506697, 0.21850511295832786, 0.24120490297685826, 0.35899321406769713, 0.0030483487032554324, 9.999999999998899e-05, 9.999999999998899e-05, 0.013812204292494745, 9.999999999998899e-05, 0.00028255067827287483, 0.03334741264445329, 0.00010017374482707009, 0.054319207529536784, 0.0703637259865818, 0.04881073587289697, 0.07627091331960933, 0.12737653109463443, 9.999999999998899e-05, 0.05877985219444248, 0.09301516133847654, 0.03926334116208963, 0.12474559938725738, 0.2217925834425326, 0.1618770257161154, 0.10452860654064444, 0.04354678417582347, 0.281633791460434, 0.022588825041282012, 0.20824545235693648, 0.029258791791736405, 0.023957164657683605, 0.10241643617036045, 0.12480625736944473, 0.03861325693712514, 0.12153054627728821, 0.032990813340837866, 0.16397970539468842, 0.15352852846802345, 0.08462308056888801, 0.062148896618306804, 0.5023741705454967, 0.49870120559072073, 0.5278919429587998, 0.5534667888589486, 0.6042628926808089, 0.5604831545904331, 0.552973553822196, 0.5764251851750667, 0.5600591307021259, 0.14413219349276019, 0.15931245963485563, 0.17891655983411658, 0.12572369491303803, 0.12565761774669537, 0.1380833956720955, 0.1381495210642777, 0.12877115689825536, 0.13673277488208369, 0.21926324944511766, 0.2688289598530612, 0.14890430821998146, 0.27515575656788394, 0.23923742055089292, 0.14938991381121702, 0.34197077280960797, 0.2554649902253707, 0.17707827863473702, 0.3613921785044242, 0.4045828245015459, 0.3970591090681631, 0.4909087616929252, 0.4468257336939596, 0.5276852047987786, 0.548563266678203, 0.531016914774948, 0.4638794572990692, 0.23102570840023418, 0.26526092764642983, 0.3042372650055476, 0.28811188657089437, 0.2556835373672258, 0.29718094931864414, 0.30032437839337667, 0.24063738317814898, 0.2103091196990906, 0.2174684191004539, 0.18366454312229918, 0.2348218469362534, 0.2242546431833301, 0.20544778020775467, 0.1898293218209507, 0.19402877653912398, 0.23116489181505628, 0.2054022859372936, 0.2429028191906526, 0.21438912030456925, 0.2505280334682488, 0.2057647003199694, 0.20975847921722557, 0.2448325850255263, 0.22408088451479902, 0.8116801550779008, 0.7477249425825117, 0.17242918476826674, 0.18505449484207093, 0.14632264262894257, 0.9082022630608385, 0.9089721215622655, 0.19861410062836826, 0.16556040119903936, 0.16851279418309573, 0.9177952945157752, 0.8720527950385505, 0.15397535536172746, 0.6289131201710798, 0.5896535258569287, 0.167758909821781, 0.20715039386252942, 0.7127833245274681, 0.16326748188184848, 0.15365292191209212, 0.17971109164780463, 0.18034233583562964, 0.16998922808501316, 0.18003038197861898, 0.1742790576939891, 0.1816140242110008, 0.17521873753063433, 0.17803751641068344, 0.18692509196778095, 0.10054489274870249, 0.08812153019783653, 0.08956281791551046, 0.08214307757704953, 0.09400070011461537, 0.09616648793046567, 0.08030810434972135, 0.1026080335446683, 0.0854362818207528]}, "mutation_prompt": null}
{"id": "1a091141-739f-4b03-aaa3-af1c3224dc85", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_rate=0.5):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_rate = mutation_rate\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            # Introducing chaotic initialization for population diversity\n            swarm += 0.1 * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr, self.mutation_rate]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < dynamic_params[5]:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Improving population diversity by incorporating adaptive mutation rates based on individual performance.", "configspace": "", "generation": 78, "fitness": 0.24445729683147838, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "f51fe8f4-5e40-4b12-8093-c2b11d3848b2", "metadata": {"aucs": [0.6387597016256763, 0.6585244347346562, 0.6587717091564023, 0.6933038181756991, 0.575827385461913, 0.5401656274758782, 0.69552020731267, 0.6720533298663609, 0.6066244120661622, 0.37626219679290784, 0.4512601102970353, 0.4709206041014009, 0.4236968081294107, 0.5175446553476762, 0.4645220849132661, 0.3942422476965679, 0.45827246918124454, 0.28288934409401667, 0.2545950350218834, 0.11112589409837059, 0.13050677634460117, 0.10715819623351996, 0.1353330849936374, 0.10674026606636777, 0.10537757243075063, 0.14384928418229703, 0.138193278246589, 0.09386373104990475, 0.11398340765783066, 0.11702223559866398, 0.09388946259036879, 0.10325713217474441, 0.13541904457122855, 0.10251702947241026, 0.09698227248696711, 0.11542263152965515, 0.9789457950700714, 0.9603908202775369, 0.9415918219084366, 0.9604934982385023, 0.9837770570458142, 0.9841410607414562, 0.9705608937325986, 0.9607127541306906, 0.9739606520486367, 0.22202204866268227, 0.24511491303212363, 0.19154872756654762, 0.27605260897434447, 0.24475770685214415, 0.25586486601335534, 0.2053923935847567, 0.2401660698303072, 0.19998541952078863, 0.2871916708543457, 0.219588363536819, 0.15944989402123033, 0.17974526606090824, 0.26003887669041614, 0.25567275589886396, 0.22375295348521995, 0.20296918583646062, 0.21772331516888344, 0.1945301262686422, 0.20032426230094358, 0.19984777010414678, 0.16240928495661588, 0.1517970440609515, 0.13976762909607532, 0.1440815320532094, 0.15478394735730705, 0.14345699886454422, 0.11373452625891756, 0.13284965649790104, 0.15075383677463816, 0.12847342910866777, 0.14023841348814947, 0.12304734069739076, 0.11218970413698481, 0.15634693012791867, 0.14798143391137364, 0.024546737882571112, 0.004218649446223521, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035819386635490558, 0.01174745358915208, 0.002551000074746068, 0.006503090063999073, 0.013925033779229712, 0.07740508399246815, 0.06830925585905989, 0.09848968489861831, 0.08583821557260418, 0.057584553043975584, 0.06459276494863297, 0.07278457297181318, 0.07406936608204129, 0.032985743296043424, 0.034234784194179024, 0.13450013042909503, 0.13267501981472052, 0.058634092869267795, 0.004904104961282241, 0.04115023460083833, 0.1565534659807667, 0.07863481191506749, 0.07282896141967143, 0.06013397309028512, 0.12668278017540835, 0.19706890963560064, 0.06283201304625619, 0.1545666041559991, 0.002156112439545166, 0.11366433563396372, 0.047791699813598654, 0.08552641187691512, 0.3917816989836488, 0.45276924631362736, 0.3793275560363535, 0.4251106876503451, 0.43543349694882705, 0.4172367816932039, 0.38798349359410933, 0.4255456894476862, 0.3954256477447441, 0.10148826630918117, 0.08185781763317213, 0.10322436023054271, 0.07934279880633444, 0.06440001167242737, 0.0933711623348139, 0.08060582746181955, 0.12067961585005871, 0.07712986711649483, 0.1313701638830438, 0.16602023343308536, 0.12095343891331578, 0.14149860362057787, 0.12766385162367333, 0.1374725536842044, 0.1676552497549787, 0.13709418251863648, 0.1584155942285057, 0.3467303101592777, 0.3259640696096462, 0.3218536047825673, 0.2585393225389546, 0.2820576573405218, 0.30919713986797437, 0.2823399879505104, 0.3285110371112764, 0.2547600953093785, 0.2588716446799626, 0.20567572298707326, 0.22482482751757127, 0.18746619396104924, 0.24265683538128469, 0.242442331848442, 0.23411712160719378, 0.2342746003003825, 0.22630013220562062, 0.21015087994341164, 0.22504764821640788, 0.19760127594598953, 0.1839261661849032, 0.18448839022756403, 0.17929894095854215, 0.20337306220943618, 0.17614111149503475, 0.2090701725210491, 0.18983827199799164, 0.20088915335326263, 0.4461148674456681, 0.18722625837147466, 0.17332107002444486, 0.18895411010392416, 0.19115000386735714, 0.22743847326650246, 0.17882584877544583, 0.5268612976035243, 0.18106635669515303, 0.1802430896338596, 0.6456564037285601, 0.5119739859620585, 0.1654610980654454, 0.5443630929651118, 0.15907868139714287, 0.7860087861456458, 0.3423900268953014, 0.1508424257297447, 0.20139758913972616, 0.29119812392110567, 0.26877153589444447, 0.38945419724395247, 0.1635169546248899, 0.44721139452370307, 0.6526102880328549, 0.17827676352433008, 0.19595107612414964, 0.17703336683478532, 0.180054627720865, 0.15892203325547638, 0.19405579984052024, 0.18611948089955876, 0.18779149818912655, 0.19206044442901749, 0.08012800689007094, 0.07351782194709944, 0.07909424475391591, 0.06400237131146969, 0.06892246871915109, 0.07918910948265712, 0.08532150940419703, 0.0807467855490811, 0.06669281472288113]}, "mutation_prompt": null}
{"id": "58c95a1c-a9f7-4b77-8478-81a2312bd814", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            # Introducing chaotic initialization for population diversity\n            swarm += 0.1 * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Introducing a chaotic initialization technique to enhance the diversity of the population and improve exploration capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f51fe8f4-5e40-4b12-8093-c2b11d3848b2", "metadata": {"aucs": [0.8993723868652213, 0.9011336994235679, 0.9077848515280128, 0.9060027807837625, 0.8960547762898553, 0.8987637865447087, 0.891147185179619, 0.8938164740528707, 0.9078977720528207, 0.8275928923781458, 0.8136289542393045, 0.834394650175048, 0.839997586016309, 0.811953230268686, 0.840424656611636, 0.825164196715072, 0.8138422186017242, 0.8292379899434776, 0.5927016416311826, 0.7278659023379899, 0.5852314625172867, 0.7091497398821309, 0.7298713393571361, 0.26112337479717973, 0.7112637952102774, 0.7989387881702902, 0.6126219214188803, 0.5351704793097747, 0.6177849910486364, 0.3489003135419205, 0.1679549713617462, 0.5827056013194348, 0.5482170678365217, 0.44086194218820096, 0.15876193238036795, 0.15647010072778067, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7398499634160178, 0.7712572445321413, 0.7806593767490917, 0.7594516559261979, 0.7340126896434309, 0.7762156810962814, 0.7322080178436934, 0.7564888844286574, 0.7818454527810995, 0.20777795903593888, 0.21449663545587005, 0.23873248926116952, 0.27571742926307874, 0.2700160825084852, 0.3748402195484679, 0.14418035865612622, 0.1742931149784055, 0.22562575300897292, 0.18851363343783833, 0.20669933253098582, 0.3074955576326981, 0.19500620874291885, 0.213565144391201, 0.2067001828998023, 0.19761135321831702, 0.20276951868224136, 0.19221782737250492, 0.22363245439473245, 0.32897767464695216, 0.26726562907168316, 0.19229904538417975, 0.22457767696568942, 0.2117134289506697, 0.21850511295832786, 0.24120490297685826, 0.35899321406769713, 0.0030483487032554324, 9.999999999998899e-05, 9.999999999998899e-05, 0.013812204292494745, 9.999999999998899e-05, 0.00028255067827287483, 0.03334741264445329, 0.00010017374482707009, 0.054319207529536784, 0.0703637259865818, 0.04881073587289697, 0.07627091331960933, 0.12737653109463443, 9.999999999998899e-05, 0.05877985219444248, 0.09301516133847654, 0.03926334116208963, 0.12474559938725738, 0.2217925834425326, 0.1618770257161154, 0.10452860654064444, 0.04354678417582347, 0.281633791460434, 0.022588825041282012, 0.20824545235693648, 0.029258791791736405, 0.023957164657683605, 0.10241643617036045, 0.12480625736944473, 0.03861325693712514, 0.12153054627728821, 0.032990813340837866, 0.16397970539468842, 0.15352852846802345, 0.08462308056888801, 0.062148896618306804, 0.5023741705454967, 0.49870120559072073, 0.5278919429587998, 0.5534667888589486, 0.6042628926808089, 0.5604831545904331, 0.552973553822196, 0.5764251851750667, 0.5600591307021259, 0.14413219349276019, 0.15931245963485563, 0.17891655983411658, 0.12572369491303803, 0.12565761774669537, 0.1380833956720955, 0.1381495210642777, 0.12877115689825536, 0.13673277488208369, 0.21926324944511766, 0.2688289598530612, 0.14890430821998146, 0.27515575656788394, 0.23923742055089292, 0.14938991381121702, 0.34197077280960797, 0.2554649902253707, 0.17707827863473702, 0.3613921785044242, 0.4045828245015459, 0.3970591090681631, 0.4909087616929252, 0.4468257336939596, 0.5276852047987786, 0.548563266678203, 0.531016914774948, 0.4638794572990692, 0.23102570840023418, 0.26526092764642983, 0.3042372650055476, 0.28811188657089437, 0.2556835373672258, 0.29718094931864414, 0.30032437839337667, 0.24063738317814898, 0.2103091196990906, 0.2174684191004539, 0.18366454312229918, 0.2348218469362534, 0.2242546431833301, 0.20544778020775467, 0.1898293218209507, 0.19402877653912398, 0.23116489181505628, 0.2054022859372936, 0.2429028191906526, 0.21438912030456925, 0.2505280334682488, 0.2057647003199694, 0.20975847921722557, 0.2448325850255263, 0.22408088451479902, 0.8116801550779008, 0.7477249425825117, 0.17242918476826674, 0.18505449484207093, 0.14632264262894257, 0.9082022630608385, 0.9089721215622655, 0.19861410062836826, 0.16556040119903936, 0.16851279418309573, 0.9177952945157752, 0.8720527950385505, 0.15397535536172746, 0.6289131201710798, 0.5896535258569287, 0.167758909821781, 0.20715039386252942, 0.7127833245274681, 0.16326748188184848, 0.15365292191209212, 0.17971109164780463, 0.18034233583562964, 0.16998922808501316, 0.18003038197861898, 0.1742790576939891, 0.1816140242110008, 0.17521873753063433, 0.17803751641068344, 0.18692509196778095, 0.10054489274870249, 0.08812153019783653, 0.08956281791551046, 0.08214307757704953, 0.09400070011461537, 0.09616648793046567, 0.08030810434972135, 0.1026080335446683, 0.0854362818207528]}, "mutation_prompt": null}
{"id": "f0d85d42-ebce-449f-8096-76a589249916", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            # Introducing chaotic initialization for population diversity\n            swarm += 0.1 * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Introducing a chaotic initialization technique to enhance the diversity of the population and improve exploration capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f51fe8f4-5e40-4b12-8093-c2b11d3848b2", "metadata": {"aucs": [0.8993723868652213, 0.9011336994235679, 0.9077848515280128, 0.9060027807837625, 0.8960547762898553, 0.8987637865447087, 0.891147185179619, 0.8938164740528707, 0.9078977720528207, 0.8275928923781458, 0.8136289542393045, 0.834394650175048, 0.839997586016309, 0.811953230268686, 0.840424656611636, 0.825164196715072, 0.8138422186017242, 0.8292379899434776, 0.5927016416311826, 0.7278659023379899, 0.5852314625172867, 0.7091497398821309, 0.7298713393571361, 0.26112337479717973, 0.7112637952102774, 0.7989387881702902, 0.6126219214188803, 0.5351704793097747, 0.6177849910486364, 0.3489003135419205, 0.1679549713617462, 0.5827056013194348, 0.5482170678365217, 0.44086194218820096, 0.15876193238036795, 0.15647010072778067, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7398499634160178, 0.7712572445321413, 0.7806593767490917, 0.7594516559261979, 0.7340126896434309, 0.7762156810962814, 0.7322080178436934, 0.7564888844286574, 0.7818454527810995, 0.20777795903593888, 0.21449663545587005, 0.23873248926116952, 0.27571742926307874, 0.2700160825084852, 0.3748402195484679, 0.14418035865612622, 0.1742931149784055, 0.22562575300897292, 0.18851363343783833, 0.20669933253098582, 0.3074955576326981, 0.19500620874291885, 0.213565144391201, 0.2067001828998023, 0.19761135321831702, 0.20276951868224136, 0.19221782737250492, 0.22363245439473245, 0.32897767464695216, 0.26726562907168316, 0.19229904538417975, 0.22457767696568942, 0.2117134289506697, 0.21850511295832786, 0.24120490297685826, 0.35899321406769713, 0.0030483487032554324, 9.999999999998899e-05, 9.999999999998899e-05, 0.013812204292494745, 9.999999999998899e-05, 0.00028255067827287483, 0.03334741264445329, 0.00010017374482707009, 0.054319207529536784, 0.0703637259865818, 0.04881073587289697, 0.07627091331960933, 0.12737653109463443, 9.999999999998899e-05, 0.05877985219444248, 0.09301516133847654, 0.03926334116208963, 0.12474559938725738, 0.2217925834425326, 0.1618770257161154, 0.10452860654064444, 0.04354678417582347, 0.281633791460434, 0.022588825041282012, 0.20824545235693648, 0.029258791791736405, 0.023957164657683605, 0.10241643617036045, 0.12480625736944473, 0.03861325693712514, 0.12153054627728821, 0.032990813340837866, 0.16397970539468842, 0.15352852846802345, 0.08462308056888801, 0.062148896618306804, 0.5023741705454967, 0.49870120559072073, 0.5278919429587998, 0.5534667888589486, 0.6042628926808089, 0.5604831545904331, 0.552973553822196, 0.5764251851750667, 0.5600591307021259, 0.14413219349276019, 0.15931245963485563, 0.17891655983411658, 0.12572369491303803, 0.12565761774669537, 0.1380833956720955, 0.1381495210642777, 0.12877115689825536, 0.13673277488208369, 0.21926324944511766, 0.2688289598530612, 0.14890430821998146, 0.27515575656788394, 0.23923742055089292, 0.14938991381121702, 0.34197077280960797, 0.2554649902253707, 0.17707827863473702, 0.3613921785044242, 0.4045828245015459, 0.3970591090681631, 0.4909087616929252, 0.4468257336939596, 0.5276852047987786, 0.548563266678203, 0.531016914774948, 0.4638794572990692, 0.23102570840023418, 0.26526092764642983, 0.3042372650055476, 0.28811188657089437, 0.2556835373672258, 0.29718094931864414, 0.30032437839337667, 0.24063738317814898, 0.2103091196990906, 0.2174684191004539, 0.18366454312229918, 0.2348218469362534, 0.2242546431833301, 0.20544778020775467, 0.1898293218209507, 0.19402877653912398, 0.23116489181505628, 0.2054022859372936, 0.2429028191906526, 0.21438912030456925, 0.2505280334682488, 0.2057647003199694, 0.20975847921722557, 0.2448325850255263, 0.22408088451479902, 0.8116801550779008, 0.7477249425825117, 0.17242918476826674, 0.18505449484207093, 0.14632264262894257, 0.9082022630608385, 0.9089721215622655, 0.19861410062836826, 0.16556040119903936, 0.16851279418309573, 0.9177952945157752, 0.8720527950385505, 0.15397535536172746, 0.6289131201710798, 0.5896535258569287, 0.167758909821781, 0.20715039386252942, 0.7127833245274681, 0.16326748188184848, 0.15365292191209212, 0.17971109164780463, 0.18034233583562964, 0.16998922808501316, 0.18003038197861898, 0.1742790576939891, 0.1816140242110008, 0.17521873753063433, 0.17803751641068344, 0.18692509196778095, 0.10054489274870249, 0.08812153019783653, 0.08956281791551046, 0.08214307757704953, 0.09400070011461537, 0.09616648793046567, 0.08030810434972135, 0.1026080335446683, 0.0854362818207528]}, "mutation_prompt": null}
{"id": "b15d8cb2-a21d-447e-9865-0c64d54a20a0", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            # Introducing chaotic initialization for population diversity\n            swarm += 0.1 * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                # Dynamic Swarm Size Adjustment\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < self.mutation_prob:\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Introducing a chaotic initialization technique to enhance the diversity of the population and improve exploration capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f51fe8f4-5e40-4b12-8093-c2b11d3848b2", "metadata": {"aucs": [0.8993723868652213, 0.9011336994235679, 0.9077848515280128, 0.9060027807837625, 0.8960547762898553, 0.8987637865447087, 0.891147185179619, 0.8938164740528707, 0.9078977720528207, 0.8275928923781458, 0.8136289542393045, 0.834394650175048, 0.839997586016309, 0.811953230268686, 0.840424656611636, 0.825164196715072, 0.8138422186017242, 0.8292379899434776, 0.5927016416311826, 0.7278659023379899, 0.5852314625172867, 0.7091497398821309, 0.7298713393571361, 0.26112337479717973, 0.7112637952102774, 0.7989387881702902, 0.6126219214188803, 0.5351704793097747, 0.6177849910486364, 0.3489003135419205, 0.1679549713617462, 0.5827056013194348, 0.5482170678365217, 0.44086194218820096, 0.15876193238036795, 0.15647010072778067, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7398499634160178, 0.7712572445321413, 0.7806593767490917, 0.7594516559261979, 0.7340126896434309, 0.7762156810962814, 0.7322080178436934, 0.7564888844286574, 0.7818454527810995, 0.20777795903593888, 0.21449663545587005, 0.23873248926116952, 0.27571742926307874, 0.2700160825084852, 0.3748402195484679, 0.14418035865612622, 0.1742931149784055, 0.22562575300897292, 0.18851363343783833, 0.20669933253098582, 0.3074955576326981, 0.19500620874291885, 0.213565144391201, 0.2067001828998023, 0.19761135321831702, 0.20276951868224136, 0.19221782737250492, 0.22363245439473245, 0.32897767464695216, 0.26726562907168316, 0.19229904538417975, 0.22457767696568942, 0.2117134289506697, 0.21850511295832786, 0.24120490297685826, 0.35899321406769713, 0.0030483487032554324, 9.999999999998899e-05, 9.999999999998899e-05, 0.013812204292494745, 9.999999999998899e-05, 0.00028255067827287483, 0.03334741264445329, 0.00010017374482707009, 0.054319207529536784, 0.0703637259865818, 0.04881073587289697, 0.07627091331960933, 0.12737653109463443, 9.999999999998899e-05, 0.05877985219444248, 0.09301516133847654, 0.03926334116208963, 0.12474559938725738, 0.2217925834425326, 0.1618770257161154, 0.10452860654064444, 0.04354678417582347, 0.281633791460434, 0.022588825041282012, 0.20824545235693648, 0.029258791791736405, 0.023957164657683605, 0.10241643617036045, 0.12480625736944473, 0.03861325693712514, 0.12153054627728821, 0.032990813340837866, 0.16397970539468842, 0.15352852846802345, 0.08462308056888801, 0.062148896618306804, 0.5023741705454967, 0.49870120559072073, 0.5278919429587998, 0.5534667888589486, 0.6042628926808089, 0.5604831545904331, 0.552973553822196, 0.5764251851750667, 0.5600591307021259, 0.14413219349276019, 0.15931245963485563, 0.17891655983411658, 0.12572369491303803, 0.12565761774669537, 0.1380833956720955, 0.1381495210642777, 0.12877115689825536, 0.13673277488208369, 0.21926324944511766, 0.2688289598530612, 0.14890430821998146, 0.27515575656788394, 0.23923742055089292, 0.14938991381121702, 0.34197077280960797, 0.2554649902253707, 0.17707827863473702, 0.3613921785044242, 0.4045828245015459, 0.3970591090681631, 0.4909087616929252, 0.4468257336939596, 0.5276852047987786, 0.548563266678203, 0.531016914774948, 0.4638794572990692, 0.23102570840023418, 0.26526092764642983, 0.3042372650055476, 0.28811188657089437, 0.2556835373672258, 0.29718094931864414, 0.30032437839337667, 0.24063738317814898, 0.2103091196990906, 0.2174684191004539, 0.18366454312229918, 0.2348218469362534, 0.2242546431833301, 0.20544778020775467, 0.1898293218209507, 0.19402877653912398, 0.23116489181505628, 0.2054022859372936, 0.2429028191906526, 0.21438912030456925, 0.2505280334682488, 0.2057647003199694, 0.20975847921722557, 0.2448325850255263, 0.22408088451479902, 0.8116801550779008, 0.7477249425825117, 0.17242918476826674, 0.18505449484207093, 0.14632264262894257, 0.9082022630608385, 0.9089721215622655, 0.19861410062836826, 0.16556040119903936, 0.16851279418309573, 0.9177952945157752, 0.8720527950385505, 0.15397535536172746, 0.6289131201710798, 0.5896535258569287, 0.167758909821781, 0.20715039386252942, 0.7127833245274681, 0.16326748188184848, 0.15365292191209212, 0.17971109164780463, 0.18034233583562964, 0.16998922808501316, 0.18003038197861898, 0.1742790576939891, 0.1816140242110008, 0.17521873753063433, 0.17803751641068344, 0.18692509196778095, 0.10054489274870249, 0.08812153019783653, 0.08956281791551046, 0.08214307757704953, 0.09400070011461537, 0.09616648793046567, 0.08030810434972135, 0.1026080335446683, 0.0854362818207528]}, "mutation_prompt": null}
{"id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Evolving the algorithm by incorporating a dynamic mutation strategy based on individual fitness to enhance exploitation capabilities.", "configspace": "", "generation": 82, "fitness": 0.3685775610082842, "feedback": "The algorithm Enhanced_Dynamic_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "f51fe8f4-5e40-4b12-8093-c2b11d3848b2", "metadata": {"aucs": [0.9000216072287747, 0.9044379153934036, 0.9074999397355055, 0.9013327546351437, 0.8909150571948965, 0.8978055348912986, 0.8928607481894201, 0.891773952768284, 0.9107258053087457, 0.8305454648828767, 0.8176648330452447, 0.8210694532540056, 0.8306273531454529, 0.8119562902293729, 0.8205738086389519, 0.8223952858791607, 0.8162643806778458, 0.8432583945642081, 0.6125788196576921, 0.7286121946355827, 0.4381131957955636, 0.42378111825230513, 0.787385809989885, 0.5995336698203179, 0.6602337490702814, 0.8002449936442435, 0.6977977505623536, 0.594560110319613, 0.6962493293050954, 0.16322748042579893, 0.5559234236066357, 0.5690747197846142, 0.5497009704060261, 0.6972921562836049, 0.1798282719529214, 0.319771995446151, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7371214301201493, 0.8126175937885755, 0.7300369624954731, 0.7725713405118018, 0.6988195736072447, 0.8123854163528037, 0.7126715647318277, 0.7344244878145334, 0.7202255886074445, 0.2122525839800462, 0.1667908684113779, 0.23978614829897693, 0.27571742926307874, 0.26927587894623195, 0.3751939615501251, 0.1436487592848269, 0.1742931149784055, 0.17281709870985795, 0.1949057095556851, 0.1896051671696477, 0.2882351548083887, 0.19828958411920417, 0.20329358166586464, 0.1978973700990878, 0.19724271181284536, 0.21971424918272875, 0.2046270764417254, 0.21830384319171603, 0.3340423912633913, 0.26656341741840905, 0.1869920725824834, 0.22568547765576086, 0.197982606930035, 0.22301839694323133, 0.24970474534924725, 0.349315449510026, 0.0071355193456713595, 0.0036284863898506936, 9.999999999998899e-05, 0.00802217978644948, 9.999999999998899e-05, 0.0345789557463031, 0.02971045174401754, 9.999999999998899e-05, 0.037929896297903554, 0.07255329562775081, 0.0539498783872705, 0.06731203191190949, 0.09168034880376785, 0.0023847921348140177, 0.04221259953078149, 0.06974192206816843, 0.054206614459845315, 0.10347287632641333, 0.22539601910604057, 0.16327844574608386, 0.09342306238070486, 0.04270072798223756, 0.2874768095904313, 0.02563357091495877, 0.2034294462711318, 0.02987274933636619, 0.02359610220066244, 0.10216992410953574, 0.1259137844546161, 0.035786606447825386, 0.12228979052237832, 0.029300308986852208, 0.16185545547960833, 0.15338625509510417, 0.0850042197724592, 0.0627246058377845, 0.5085961882352468, 0.5026350413742497, 0.5193541785421696, 0.5466502546408544, 0.5433241819412541, 0.5626278734256596, 0.5211334002482264, 0.5332900653132773, 0.5252802929041285, 0.1359101477493827, 0.13093822284901957, 0.1758825307086217, 0.1519400526826985, 0.12248725734353083, 0.1689361443128934, 0.13824807924654192, 0.12956240346838332, 0.1318569079200086, 0.31291168781485523, 0.23922818647793975, 0.21937903028375505, 0.28343732259889043, 0.1950957997759447, 0.1812938684751917, 0.24405280987579103, 0.26121668063843784, 0.46395489605037343, 0.38018122646791486, 0.4666889763019614, 0.4644731305004616, 0.6160195387471588, 0.3819837764956857, 0.4224294292702553, 0.44028481024355337, 0.6033056186038588, 0.5248379455085144, 0.2514179911777181, 0.2846320474946544, 0.27832972227921804, 0.2799006248352319, 0.26906118922182654, 0.2977336880218887, 0.27770123031441984, 0.23569042512021376, 0.22472301690401753, 0.21129827351046215, 0.19638807771441236, 0.21845797976104708, 0.203207477970208, 0.21336123447647237, 0.21486397130113688, 0.1949989454869545, 0.21233667526905464, 0.2155167800543013, 0.2404817891834098, 0.243022617718875, 0.2486781636827694, 0.20583897799685225, 0.2097733969477935, 0.21289221353593513, 0.22075797000003383, 0.8168188551974792, 0.21693522746095562, 0.17243204612110785, 0.1850545519709501, 0.14632308182016873, 0.903960312593666, 0.9048829939971027, 0.19861997552924482, 0.16556041382377384, 0.16851281166582555, 0.9160252682983813, 0.8547994700886983, 0.15398574467037507, 0.719851951669856, 0.5851334288546927, 0.16775890793414838, 0.20709007711935312, 0.7089751927048746, 0.1632319707538904, 0.15364739107346792, 0.17892509661722156, 0.17881273399824926, 0.16535477748341176, 0.1849760267895939, 0.17952694719906048, 0.17709760342949776, 0.20588529696577584, 0.1911941294591445, 0.18953554652129156, 0.09862115100374957, 0.08389178737038361, 0.09031393207371052, 0.07880043643525714, 0.10035303909619964, 0.08442806687667204, 0.07924811866425863, 0.0797791654678478, 0.09445648467257184]}, "mutation_prompt": null}
{"id": "c4de93a0-cbb8-4e79-bc34-cc8213c82380", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Evolving the algorithm by incorporating a dynamic mutation strategy based on individual fitness to enhance exploitation capabilities.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.9000216072287747, 0.9044379153934036, 0.9074999397355055, 0.9013327546351437, 0.8909150571948965, 0.8978055348912986, 0.8928607481894201, 0.891773952768284, 0.9107258053087457, 0.8305454648828767, 0.8176648330452447, 0.8210694532540056, 0.8306273531454529, 0.8119562902293729, 0.8205738086389519, 0.8223952858791607, 0.8162643806778458, 0.8432583945642081, 0.6125788196576921, 0.7286121946355827, 0.4381131957955636, 0.42378111825230513, 0.787385809989885, 0.5995336698203179, 0.6602337490702814, 0.8002449936442435, 0.6977977505623536, 0.594560110319613, 0.6962493293050954, 0.16322748042579893, 0.5559234236066357, 0.5690747197846142, 0.5497009704060261, 0.6972921562836049, 0.1798282719529214, 0.319771995446151, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7371214301201493, 0.8126175937885755, 0.7300369624954731, 0.7725713405118018, 0.6988195736072447, 0.8123854163528037, 0.7126715647318277, 0.7344244878145334, 0.7202255886074445, 0.2122525839800462, 0.1667908684113779, 0.23978614829897693, 0.27571742926307874, 0.26927587894623195, 0.3751939615501251, 0.1436487592848269, 0.1742931149784055, 0.17281709870985795, 0.1949057095556851, 0.1896051671696477, 0.2882351548083887, 0.19828958411920417, 0.20329358166586464, 0.1978973700990878, 0.19724271181284536, 0.21971424918272875, 0.2046270764417254, 0.21830384319171603, 0.3340423912633913, 0.26656341741840905, 0.1869920725824834, 0.22568547765576086, 0.197982606930035, 0.22301839694323133, 0.24970474534924725, 0.349315449510026, 0.0071355193456713595, 0.0036284863898506936, 9.999999999998899e-05, 0.00802217978644948, 9.999999999998899e-05, 0.0345789557463031, 0.02971045174401754, 9.999999999998899e-05, 0.037929896297903554, 0.07255329562775081, 0.0539498783872705, 0.06731203191190949, 0.09168034880376785, 0.0023847921348140177, 0.04221259953078149, 0.06974192206816843, 0.054206614459845315, 0.10347287632641333, 0.22539601910604057, 0.16327844574608386, 0.09342306238070486, 0.04270072798223756, 0.2874768095904313, 0.02563357091495877, 0.2034294462711318, 0.02987274933636619, 0.02359610220066244, 0.10216992410953574, 0.1259137844546161, 0.035786606447825386, 0.12228979052237832, 0.029300308986852208, 0.16185545547960833, 0.15338625509510417, 0.0850042197724592, 0.0627246058377845, 0.5085961882352468, 0.5026350413742497, 0.5193541785421696, 0.5466502546408544, 0.5433241819412541, 0.5626278734256596, 0.5211334002482264, 0.5332900653132773, 0.5252802929041285, 0.1359101477493827, 0.13093822284901957, 0.1758825307086217, 0.1519400526826985, 0.12248725734353083, 0.1689361443128934, 0.13824807924654192, 0.12956240346838332, 0.1318569079200086, 0.31291168781485523, 0.23922818647793975, 0.21937903028375505, 0.28343732259889043, 0.1950957997759447, 0.1812938684751917, 0.24405280987579103, 0.26121668063843784, 0.46395489605037343, 0.38018122646791486, 0.4666889763019614, 0.4644731305004616, 0.6160195387471588, 0.3819837764956857, 0.4224294292702553, 0.44028481024355337, 0.6033056186038588, 0.5248379455085144, 0.2514179911777181, 0.2846320474946544, 0.27832972227921804, 0.2799006248352319, 0.26906118922182654, 0.2977336880218887, 0.27770123031441984, 0.23569042512021376, 0.22472301690401753, 0.21129827351046215, 0.19638807771441236, 0.21845797976104708, 0.203207477970208, 0.21336123447647237, 0.21486397130113688, 0.1949989454869545, 0.21233667526905464, 0.2155167800543013, 0.2404817891834098, 0.243022617718875, 0.2486781636827694, 0.20583897799685225, 0.2097733969477935, 0.21289221353593513, 0.22075797000003383, 0.8168188551974792, 0.21693522746095562, 0.17243204612110785, 0.1850545519709501, 0.14632308182016873, 0.903960312593666, 0.9048829939971027, 0.19861997552924482, 0.16556041382377384, 0.16851281166582555, 0.9160252682983813, 0.8547994700886983, 0.15398574467037507, 0.719851951669856, 0.5851334288546927, 0.16775890793414838, 0.20709007711935312, 0.7089751927048746, 0.1632319707538904, 0.15364739107346792, 0.17892509661722156, 0.17881273399824926, 0.16535477748341176, 0.1849760267895939, 0.17952694719906048, 0.17709760342949776, 0.20588529696577584, 0.1911941294591445, 0.18953554652129156, 0.09862115100374957, 0.08389178737038361, 0.09031393207371052, 0.07880043643525714, 0.10035303909619964, 0.08442806687667204, 0.07924811866425863, 0.0797791654678478, 0.09445648467257184]}, "mutation_prompt": null}
{"id": "62e45010-a9f5-4694-a6ff-c1f9d38ff901", "solution": "import numpy as np\n\nclass Chaotic_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                                \n                    # Introducing chaotic maps mutation operator\n                    chaotic_vals = chaotic_map(trial)  # Function to generate chaotic values\n                    trial += chaotic_vals\n\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()\n\ndef chaotic_map(x):\n    # Implement your chaotic map here\n    return np.sin(x)  # Placeholder example", "name": "Chaotic_Population_Resizing", "description": "Enhancing the population diversity by introducing a novel mutation operator based on chaotic maps to explore the search space effectively.", "configspace": "", "generation": 84, "fitness": 0.13317655223678065, "feedback": "The algorithm Chaotic_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.2149385855755398, 0.1916540067589897, 0.18836736407911836, 0.21101635937321594, 0.2098838576843468, 0.19647723324774602, 0.22706227416805136, 0.22825848929215042, 0.2469466164142925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047388393414854235, 0.06506344975661904, 0.05391452999967239, 0.056445953936886895, 0.04945930032520596, 0.05734563173706397, 0.07533158044447552, 0.088962677317727, 0.10162006755762976, 0.028327280319791148, 0.03849046481645657, 0.0329053003289036, 0.030877347224256835, 0.041129385587565404, 0.032752667768208066, 0.05153238192822607, 0.040080192554086125, 0.04781205741287342, 0.9882047182167992, 0.9914479949551811, 0.9908715632124686, 0.9905750543194868, 0.9861526269247464, 0.9867336358916098, 0.9917883877380994, 0.9878820546976944, 0.9873065875306637, 0.11159449715232272, 0.15867733821376118, 0.11422611497194923, 0.10637829578916824, 0.09241775810380826, 0.10245455714765772, 0.18163162463765448, 0.16241813357303714, 0.0823089157252942, 0.19629670946079636, 0.14602609664399457, 0.06465974555050813, 0.17090087851504687, 0.164758439683532, 0.1778318678941363, 0.11656709666062037, 0.17512563165070605, 0.10963585492744787, 9.999999999998899e-05, 0.011309361902210324, 0.03225574308135637, 0.08246103346381461, 0.07529580322557083, 0.052906197486898954, 9.999999999998899e-05, 0.023024754137425774, 0.04518231882250234, 0.028439765958567786, 0.012143538821076771, 0.013737346687195506, 0.02673635390989315, 0.014965333465295272, 0.04223803000210358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03841819307855476, 0.04188783184002254, 0.010184523899844367, 0.024530832604040875, 9.999999999998899e-05, 0.062421506383552705, 0.010835350180847803, 0.01128384728401799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003251365617374713, 0.007936727029107749, 0.008483530451284471, 0.012013070925285696, 9.999999999998899e-05, 0.015228549011661596, 0.02149360604518258, 0.20716804190269444, 0.22276233225156006, 0.21521133670530768, 0.21612572708546074, 0.23306045567229228, 0.22437034510593046, 0.17954848245588617, 0.1731512565075558, 0.18959298088752474, 0.07664908709632579, 0.0951820962286889, 0.08673052931570291, 0.07608033388355873, 0.05321517615245408, 0.07360649345029047, 0.05889976742433101, 0.044605686701828184, 0.060034204854522266, 0.1445245577012454, 0.14522944826483963, 0.13086754290446911, 0.17310963881508157, 0.1367327945839717, 0.13870694871814526, 0.15748721891713902, 0.12332846420811783, 0.14825202490181544, 0.1684524621246759, 0.17905948134891636, 0.1809995266810912, 0.16023342816995612, 0.1536714479769009, 0.15577830679740112, 0.1837366874601063, 0.1830955234119066, 0.18376276107034384, 0.10967554347975561, 0.12735661659730557, 0.11133802468000376, 0.09253560027512808, 0.10564376215902305, 0.11798420766610995, 0.1444959260324462, 0.14017272008549442, 0.13796795177046628, 0.14689551544975488, 0.14597162639310968, 0.17241343490178918, 0.15361913642435976, 0.16604073571154476, 0.1614143177544678, 0.16026945361408285, 0.15540085418063432, 0.15932560479596436, 0.10810410254508185, 0.14592897179355346, 0.09425499124645154, 0.11224378223457321, 0.06353579904315665, 0.10147474451729943, 0.10752842730136802, 0.12913179423269672, 0.16780901638464074, 0.14900267356429908, 0.13616595517621533, 0.12093560418217508, 0.15586850018096976, 0.2325473287319627, 0.1578236640357129, 0.1358738918082525, 0.11537406383416238, 0.1500057777054159, 0.2663473497266202, 0.11169395874236265, 0.10677136862746939, 0.16816373705387921, 0.13868042575495088, 0.1474767786836223, 0.31955829309524075, 0.1134390276486813, 0.11612837582202917, 0.1788443810117618, 0.1704294908253281, 0.18963745221312167, 0.1766631621065783, 0.17182608435629132, 0.17890712676605303, 0.17865699176473315, 0.16993635868680668, 0.18163266652252108, 0.05599513298556813, 0.06135217343723032, 0.06471681344524749, 0.061179797526384805, 0.06502125643239398, 0.05980116683637915, 0.05382255329629748, 0.05728023315841346, 0.05574026426435663]}, "mutation_prompt": null}
{"id": "9877f6bc-cf77-4380-acde-9ace5ed960e0", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n        self.adaptive_mutation_rates = np.full(dim, mutation_scale)\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                mutation_rate = self.adaptive_mutation_rates[j] * (1 - progress)\n                                trial[j] = a[j] + beta * mutation_rate * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Enhancing the diversity maintenance of the algorithm by introducing a novel mutation strategy based on adaptive mutation rates for each dimension to improve exploration capabilities.", "configspace": "", "generation": 85, "fitness": 0.34847604545414773, "feedback": "The algorithm Enhanced_Dynamic_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.9333351603173105, 0.928629940040012, 0.9351685650357106, 0.9315666587241029, 0.9215656974140438, 0.9263855483420702, 0.9341803404938802, 0.928370370994182, 0.9270095400114559, 0.8799290230038046, 0.8841334037350742, 0.8901933928834342, 0.8836969992499393, 0.8934017910370381, 0.8870665444166869, 0.8868706851636845, 0.8858635192361496, 0.8861496906290407, 0.801100645456224, 0.6756214222165976, 0.7356624888285809, 0.8299311495558643, 0.7717407629097293, 0.8368812076312616, 0.7421686596305568, 0.5839676551349695, 0.5983328319027119, 0.7107723430848758, 0.629805813101523, 0.1779594104919051, 0.33806549627343807, 0.5072187927098484, 0.6712877603718816, 0.18413368675180253, 0.5860982250703322, 0.33882582324653254, 0.9867534389984804, 0.9878554226499261, 0.9910959329977373, 0.9887935018255597, 0.9872072430318414, 0.9878859072248538, 0.9865526461988373, 0.9840689118853415, 0.9819149285532806, 0.42178917632474566, 0.6574234627047422, 0.5352277833415345, 0.4894503740187617, 0.6512504734208443, 0.38373032892886105, 0.7464875565647568, 0.8242985066132573, 0.5392256876395269, 0.3595466734408803, 0.15715942170572195, 0.17134262766635622, 0.9457963008647706, 0.17381688383989535, 0.31470533022403846, 0.17518988174710048, 0.23820603171799826, 0.23331440174759577, 0.21904181747782836, 0.15983921400818213, 0.3684708573934037, 0.17734656309930574, 0.17126594099135506, 0.21089683720284402, 0.186697205764508, 0.1971883723879082, 0.17986314282206328, 0.2215374992161664, 0.12406670806660747, 0.17436003914390819, 0.19309599136814293, 0.20188665108824366, 0.19838093889235742, 0.1282750137713643, 0.2088012325613131, 0.21526350507924386, 9.999999999998899e-05, 9.999999999998899e-05, 0.019022155991931355, 0.07302587796351867, 0.03858225278793692, 9.999999999998899e-05, 0.09457020466387533, 9.999999999998899e-05, 0.09878280949488183, 0.1086380338966364, 0.04628859992585144, 0.049156796779332046, 0.11571299684903058, 0.00037841488469603224, 0.03121575985339553, 0.08739947192916275, 0.10482034621211156, 0.038497233620615745, 0.0758853981237062, 0.09369942416126575, 0.20659064105519265, 0.10529687103803331, 0.045545877730997386, 0.09527600471753561, 0.15541341621323645, 0.10794343206490487, 0.04335944804367331, 0.201581857162497, 0.09676122276288956, 0.17021474524458957, 0.04065658022301777, 0.16371706420919563, 0.13635911144621693, 0.1953911663225787, 0.226416907281475, 0.1495262718653736, 0.4944700577538681, 0.494714374457741, 0.4842387554107703, 0.48672809810655704, 0.5404212537735771, 0.5596217725430301, 0.5076933369795849, 0.5627370541133017, 0.6049012873801584, 0.11303698831277909, 0.14460014260896858, 0.07039028151218385, 0.12447994335998114, 0.0913147281710115, 0.14683331062563687, 0.10168853644013975, 0.14601767159411305, 0.08314887114617564, 0.24018318144080275, 0.23389235955398557, 0.19682332195785157, 0.24864522366489794, 0.20870645765285, 0.1721228689912283, 0.23977672334728195, 0.18315358258748826, 0.2457895620812407, 0.2567385115971138, 0.28979963453258795, 0.3794668970779701, 0.2925110369327648, 0.22667086128694347, 0.32378164581130753, 0.3807286504365568, 0.3441021424452225, 0.37663894829028655, 0.23999175252122973, 0.271079020405417, 0.29885099830778605, 0.25130889874020135, 0.20050532278159294, 0.28797184400833, 0.25400336963432746, 0.2382972666301525, 0.21726352663478665, 0.23682210432011264, 0.2179720432658382, 0.2430851640110242, 0.21350642104169726, 0.22882748042498224, 0.2079640391376565, 0.21452084732032395, 0.28148807098949646, 0.21690083038397756, 0.22667521336601826, 0.18692042822587196, 0.21044050075170007, 0.2025191785717756, 0.19015214848601325, 0.20799915073921837, 0.6981254565355892, 0.21946399304217823, 0.19832643515510529, 0.18512063846322946, 0.1881607290958186, 0.15349731864882854, 0.9115594633207653, 0.2013286996787691, 0.19962667830387515, 0.09979282080737306, 0.17011286590520958, 0.21329376516030607, 0.463019298171096, 0.1560508431409091, 0.31985417848300457, 0.21116339378281757, 0.16808538707195586, 0.5435186976040642, 0.10463547115742944, 0.1658970458985235, 0.16823163333317936, 0.17997634337375423, 0.1936758369087832, 0.23995629986988842, 0.19167409844683048, 0.21610384991202103, 0.1958786848736912, 0.17788229196126937, 0.22058626192081765, 0.2455051482910945, 0.10280495356315367, 0.11374748634317944, 0.07309939906215623, 0.08700139642718097, 0.0991893600159236, 0.061754762078029324, 0.11246174548731691, 0.08559793795403514, 0.07784764834167912]}, "mutation_prompt": null}
{"id": "9599bf2c-8693-45c8-a2fc-c50a43e77364", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Evolving the algorithm by incorporating a dynamic mutation strategy based on individual fitness to enhance exploitation capabilities.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.9000216072287747, 0.9044379153934036, 0.9074999397355055, 0.9013327546351437, 0.8909150571948965, 0.8978055348912986, 0.8928607481894201, 0.891773952768284, 0.9107258053087457, 0.8305454648828767, 0.8176648330452447, 0.8210694532540056, 0.8306273531454529, 0.8119562902293729, 0.8205738086389519, 0.8223952858791607, 0.8162643806778458, 0.8432583945642081, 0.6125788196576921, 0.7286121946355827, 0.4381131957955636, 0.42378111825230513, 0.787385809989885, 0.5995336698203179, 0.6602337490702814, 0.8002449936442435, 0.6977977505623536, 0.594560110319613, 0.6962493293050954, 0.16322748042579893, 0.5559234236066357, 0.5690747197846142, 0.5497009704060261, 0.6972921562836049, 0.1798282719529214, 0.319771995446151, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7371214301201493, 0.8126175937885755, 0.7300369624954731, 0.7725713405118018, 0.6988195736072447, 0.8123854163528037, 0.7126715647318277, 0.7344244878145334, 0.7202255886074445, 0.2122525839800462, 0.1667908684113779, 0.23978614829897693, 0.27571742926307874, 0.26927587894623195, 0.3751939615501251, 0.1436487592848269, 0.1742931149784055, 0.17281709870985795, 0.1949057095556851, 0.1896051671696477, 0.2882351548083887, 0.19828958411920417, 0.20329358166586464, 0.1978973700990878, 0.19724271181284536, 0.21971424918272875, 0.2046270764417254, 0.21830384319171603, 0.3340423912633913, 0.26656341741840905, 0.1869920725824834, 0.22568547765576086, 0.197982606930035, 0.22301839694323133, 0.24970474534924725, 0.349315449510026, 0.0071355193456713595, 0.0036284863898506936, 9.999999999998899e-05, 0.00802217978644948, 9.999999999998899e-05, 0.0345789557463031, 0.02971045174401754, 9.999999999998899e-05, 0.037929896297903554, 0.07255329562775081, 0.0539498783872705, 0.06731203191190949, 0.09168034880376785, 0.0023847921348140177, 0.04221259953078149, 0.06974192206816843, 0.054206614459845315, 0.10347287632641333, 0.22539601910604057, 0.16327844574608386, 0.09342306238070486, 0.04270072798223756, 0.2874768095904313, 0.02563357091495877, 0.2034294462711318, 0.02987274933636619, 0.02359610220066244, 0.10216992410953574, 0.1259137844546161, 0.035786606447825386, 0.12228979052237832, 0.029300308986852208, 0.16185545547960833, 0.15338625509510417, 0.0850042197724592, 0.0627246058377845, 0.5085961882352468, 0.5026350413742497, 0.5193541785421696, 0.5466502546408544, 0.5433241819412541, 0.5626278734256596, 0.5211334002482264, 0.5332900653132773, 0.5252802929041285, 0.1359101477493827, 0.13093822284901957, 0.1758825307086217, 0.1519400526826985, 0.12248725734353083, 0.1689361443128934, 0.13824807924654192, 0.12956240346838332, 0.1318569079200086, 0.31291168781485523, 0.23922818647793975, 0.21937903028375505, 0.28343732259889043, 0.1950957997759447, 0.1812938684751917, 0.24405280987579103, 0.26121668063843784, 0.46395489605037343, 0.38018122646791486, 0.4666889763019614, 0.4644731305004616, 0.6160195387471588, 0.3819837764956857, 0.4224294292702553, 0.44028481024355337, 0.6033056186038588, 0.5248379455085144, 0.2514179911777181, 0.2846320474946544, 0.27832972227921804, 0.2799006248352319, 0.26906118922182654, 0.2977336880218887, 0.27770123031441984, 0.23569042512021376, 0.22472301690401753, 0.21129827351046215, 0.19638807771441236, 0.21845797976104708, 0.203207477970208, 0.21336123447647237, 0.21486397130113688, 0.1949989454869545, 0.21233667526905464, 0.2155167800543013, 0.2404817891834098, 0.243022617718875, 0.2486781636827694, 0.20583897799685225, 0.2097733969477935, 0.21289221353593513, 0.22075797000003383, 0.8168188551974792, 0.21693522746095562, 0.17243204612110785, 0.1850545519709501, 0.14632308182016873, 0.903960312593666, 0.9048829939971027, 0.19861997552924482, 0.16556041382377384, 0.16851281166582555, 0.9160252682983813, 0.8547994700886983, 0.15398574467037507, 0.719851951669856, 0.5851334288546927, 0.16775890793414838, 0.20709007711935312, 0.7089751927048746, 0.1632319707538904, 0.15364739107346792, 0.17892509661722156, 0.17881273399824926, 0.16535477748341176, 0.1849760267895939, 0.17952694719906048, 0.17709760342949776, 0.20588529696577584, 0.1911941294591445, 0.18953554652129156, 0.09862115100374957, 0.08389178737038361, 0.09031393207371052, 0.07880043643525714, 0.10035303909619964, 0.08442806687667204, 0.07924811866425863, 0.0797791654678478, 0.09445648467257184]}, "mutation_prompt": null}
{"id": "09256d4b-b14b-4e19-b784-495a803495c4", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Enhanced_Dynamic_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1, historical_performance=[]):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob, mutation_scale)\n        self.historical_performance = historical_performance\n    \n    def __call__(self, func):\n        def adaptive_pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress) * (1 + np.mean(self.historical_performance) - self.historical_performance[i])):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n                    self.historical_performance[i] = 0.9 * self.historical_performance[i] + 0.1 * (trial_fitness - pbest_fitness[i])\n\n            return gbest, gbest_fitness\n\n        return adaptive_pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Introducing a novel adaptive mutation strategy based on individual historical performance to dynamically adjust mutation probabilities.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {}, "mutation_prompt": null}
{"id": "c6859bbc-c314-47f7-87cd-294f1553493e", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Dynamic_Mutation_Population_Resizing(Enhanced_Dynamic_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob, mutation_scale)\n        self.dynamic_mutation_scale = mutation_scale\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.dynamic_mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n                \n                if np.random.rand() < 0.1:  # 10% rate of change\n                    self.dynamic_mutation_scale *= (1 - progress)  # Adjust mutation scale based on progress\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Dynamic_Mutation_Population_Resizing", "description": "Introducing a dynamic mutation scaling strategy based on the convergence progress to adaptively adjust the mutation scale during optimization.", "configspace": "", "generation": 88, "fitness": 0.35996069410245907, "feedback": "The algorithm Enhanced_Adaptive_Dynamic_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.30.", "error": "", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.8984967191816273, 0.9000233814002391, 0.9024375062169464, 0.8841328011339171, 0.8931577123886559, 0.8978056614373406, 0.8897845559998661, 0.902741144130889, 0.8958712209795612, 0.8179973921753868, 0.8164847801562038, 0.8166723512829697, 0.8155057818876376, 0.8205025387862599, 0.8245733887991078, 0.8146889403830797, 0.8289033395430925, 0.8267156627376209, 0.29930354041248575, 0.6346140531325359, 0.6193916466521184, 0.27411472022526073, 0.6048486582681882, 0.7958328445130525, 0.7584307058190575, 0.7546039996111401, 0.6449750457424505, 0.311118168680409, 0.28940850625514136, 0.16368372745434423, 0.16777034020069037, 0.6002224060844588, 0.4188485985500955, 0.15520596684226606, 0.28019373463052233, 0.16316813995062585, 0.9895168963693596, 0.9896165191446937, 0.9917407634652904, 0.9918140995864559, 0.9864864969250373, 0.9869311735135631, 0.9917940433773715, 0.9892935394906035, 0.9875658500707508, 0.7884200107650374, 0.7642123622919375, 0.7169352261343847, 0.7728017006753711, 0.7882121017607326, 0.7740146098793947, 0.7605430847102367, 0.754473130253138, 0.7530151864695369, 0.22397621588095484, 0.1267097191674348, 0.17040340743440086, 0.21044178612454156, 0.2151599777208436, 0.21112910720846434, 0.21859952317677422, 0.17452034640046876, 0.24008922644854236, 0.2006647248762844, 0.28306888062117197, 0.20616320980960212, 0.1984269400082761, 0.20834490724435584, 0.21007680028165487, 0.21003790972277747, 0.19889919216266394, 0.2005796227167076, 0.26703958572363207, 0.21560985969275404, 0.2184464717644944, 0.2255335935832512, 0.22142557971970822, 0.20998426580310658, 0.23850300257455925, 0.23873394816054683, 0.23076352036171488, 0.0005402976878132737, 0.011817228902098909, 9.999999999998899e-05, 0.050655413469707256, 9.999999999998899e-05, 9.999999999998899e-05, 0.08822347787115925, 0.03334425442824718, 9.999999999998899e-05, 0.10959693063197828, 0.05648806355705438, 0.14378997691550666, 0.09869607319609097, 0.010638575909668213, 0.04242314589849416, 0.12947257853009997, 0.02071296666746325, 0.17396464593791838, 0.15058427720820833, 0.23954175478725548, 0.10524322143357734, 0.01796356380900066, 0.26928282674412185, 0.07355060417650716, 0.07970210136680211, 0.08425318601732257, 0.04511633078723298, 0.08876516927537648, 0.18318966449428997, 0.1489141739209383, 0.04751673543993662, 0.16714880384028385, 0.08688599273249542, 0.05349349352535204, 0.10171426101278325, 0.047716707067805286, 0.5646214366843294, 0.525173917091805, 0.5120382871420979, 0.5342930842656556, 0.5172842986173937, 0.4972795876878138, 0.5594710650862369, 0.5993021912898935, 0.5696108308278554, 0.09839968499684582, 0.09096565040459315, 0.1763832002929061, 0.13032226480988052, 0.08864953199754433, 0.10558809888876008, 0.11176742877120849, 0.12048990801156867, 0.14756490739948236, 0.16351646527310437, 0.20870249948949782, 0.302834752958448, 0.25750047382651187, 0.3128114813559003, 0.3594874138561913, 0.18707865038086524, 0.2756136436968183, 0.19124830873513676, 0.3822100841845758, 0.4024057488273064, 0.4573004087652456, 0.4392433973561024, 0.43051595232085127, 0.4707151032217408, 0.4869583514661593, 0.3999274780774287, 0.4689689095383669, 0.28875603723512944, 0.19922896906902166, 0.26583350843731923, 0.22444939005175057, 0.2514174006294134, 0.34012812562249684, 0.40460484235565275, 0.31300181197192745, 0.26884361867465223, 0.18645116121153682, 0.22164259185031732, 0.2122520735097133, 0.20484637973786513, 0.20244923966490824, 0.21908593098687457, 0.21183609373693257, 0.20341577382388354, 0.1981042244389576, 0.22334516219917555, 0.24242381223638132, 0.2077519371606359, 0.8151396663891823, 0.8305006212460222, 0.20444240406517378, 0.20943542081768862, 0.19010566859913636, 0.2210323568460426, 0.18475201130660268, 0.19466877860077436, 0.1462813215444465, 0.9014161057799949, 0.9069350233096789, 0.16867818862958994, 0.2022147943832131, 0.16794362772838556, 0.8955464348953682, 0.612752355842884, 0.15461908149758496, 0.20796359211785276, 0.1649839264306423, 0.2064959198974763, 0.20876125114310984, 0.8322087713922302, 0.8048018268749353, 0.7850591683069642, 0.1793533558001854, 0.17559977613929278, 0.172984086979321, 0.1829763435018883, 0.194048277656799, 0.1762980640336027, 0.1927003924524524, 0.17121993093329746, 0.17345087050869623, 0.09326475539944079, 0.09549242396666324, 0.08932810177065098, 0.0865156514139751, 0.08663884913881736, 0.0742883125153283, 0.08611344989745662, 0.08708145442927784, 0.08701063158795719]}, "mutation_prompt": null}
{"id": "a249cee8-8362-410b-a7b5-5094ae0a66ee", "solution": "import numpy as np\n\nclass Enhanced_Opposition_Based_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n                # Opposition-based learning\n                opposition_swarm = 2 * np.mean(swarm) - swarm\n                opposition_fitness = np.array([func(ind) for ind in opposition_swarm])\n                for i in range(swarm_size):\n                    if opposition_fitness[i] < pbest_fitness[i]:\n                        pbest_fitness[i] = opposition_fitness[i]\n                        personal_best[i] = opposition_swarm[i]\n                        if opposition_fitness[i] < gbest_fitness:\n                            gbest_fitness = opposition_fitness[i]\n                            gbest = opposition_swarm[i]\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Opposition_Based_Dynamic_Mutation_Population_Resizing", "description": "Enhancing the exploration capability by introducing a novel opposition-based learning mechanism to diversify the search process.", "configspace": "", "generation": 89, "fitness": 0.3044327699855015, "feedback": "The algorithm Enhanced_Opposition_Based_Dynamic_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.8128482976477149, 0.7928008707289764, 0.817986299258694, 0.7968749841103449, 0.7915530958930843, 0.8027846497778369, 0.7974948405545068, 0.8033743220385472, 0.8121911056581178, 0.6323010136669467, 0.6565648593642361, 0.6734264843982147, 0.6680151217556645, 0.6441155065429056, 0.6963034229738057, 0.6435951457047817, 0.6378921177624322, 0.6638552877155759, 0.2467671048015857, 0.3350391930667448, 0.16856900788231965, 0.2133913885633304, 0.26288788157868137, 0.18757384233215024, 0.41364761807630046, 0.12173628700978056, 0.42888166995521426, 0.15786353804852737, 0.1367300309743651, 0.12627710690501082, 0.15051864800189707, 0.1253779097822928, 0.11852742356121126, 0.15414649291193205, 0.11754088618394087, 0.12326646031988553, 0.9846786627263536, 0.9863302528624582, 0.9866494553282913, 0.9853901120080433, 0.9810818681153008, 0.9859769987248994, 0.9867557077357374, 0.9807878494538735, 0.9795752121426177, 0.5195017731159701, 0.533187407619983, 0.5633840765343008, 0.515782013259402, 0.38469906517410524, 0.5687104389053723, 0.4771766745776951, 0.5042631516317521, 0.5676618017044777, 0.7789376105182145, 0.16373477673653192, 0.1911175725035943, 0.265002507290631, 0.2578922047507608, 0.26029640376596785, 0.22487417764332707, 0.3124113129240905, 0.21877533013633088, 0.19263183676825724, 0.1695139460511227, 0.16843831035090884, 0.11370945399113974, 0.18046457801028393, 0.15222449567709917, 0.17998391370952138, 0.1447435131179503, 0.166079654147968, 0.26532487145721484, 0.19328525369117955, 0.18837902779518578, 0.20012445442392834, 0.15712887185959845, 0.26724515951609473, 0.22835454795447196, 0.22183364513031723, 0.19756593671412526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000672830959561721, 9.999999999998899e-05, 9.999999999998899e-05, 0.07902658071076984, 9.999999999998899e-05, 0.024778352611037002, 0.07955547036545307, 0.14866273612460934, 0.0716539015074017, 0.07993622400451239, 0.0021683466373185745, 0.014918575233939357, 0.09255708054060374, 0.07017657396961952, 0.1062233648722144, 0.04289368626622547, 0.08366467298761049, 0.34921291463784965, 0.00878121010514843, 0.2387678974675317, 0.021542424913881808, 0.0772034563070707, 0.06559174612805896, 0.00676530060717051, 0.11954069349274432, 0.0750218654228556, 0.09683892040991127, 0.10503322513126989, 0.14117334801714765, 0.14804670979609202, 0.14607414077206482, 0.13116173232044126, 0.06570127688595861, 0.45163239141530254, 0.5027892146389725, 0.46592684682734187, 0.49585643323334794, 0.48258890844766833, 0.5009569765109744, 0.4951840438013867, 0.4748386154021019, 0.5309727125228564, 0.10444261595088977, 0.12902464716829787, 0.09479731093629928, 0.09327113073202564, 0.10011146709709995, 0.1380421008141005, 0.11872921029923489, 0.10756234736434978, 0.08750299523077032, 0.12658961911412958, 0.1337977074278589, 0.13924975909307358, 0.15550582284558367, 0.12080852725425428, 0.1715262786932642, 0.15587723884671922, 0.12913197197941684, 0.13338656787934, 0.34898431333043445, 0.2984412094290092, 0.2644436698974004, 0.2978351182780319, 0.23168289182234247, 0.25827168320441274, 0.5262558235869848, 0.46354395396539705, 0.3401253099132491, 0.28909711779397407, 0.21661050234183998, 0.2739117717083873, 0.3422750032690711, 0.2727678076681065, 0.19213600446309886, 0.23546948231628462, 0.3140328997820726, 0.2491648619370902, 0.20195902894624862, 0.2610206807490043, 0.21021156963010135, 0.22620060585469237, 0.22313677689189626, 0.20730602056105418, 0.23824696864956285, 0.19294914167406996, 0.22995514855871846, 0.19827061215504038, 0.203211363092478, 0.512913429684939, 0.1951559714750516, 0.20008047028722753, 0.19098321560313403, 0.23817946854964367, 0.19407689469819833, 0.2060621246257638, 0.7492514726344324, 0.18182830036728104, 0.7260024418552385, 0.7571071311366809, 0.7520817275500516, 0.7680003405688339, 0.11280754596198295, 0.7516959552314003, 0.6795623156433153, 0.444672951932672, 0.1462878197474512, 0.1605859536147275, 0.19890960205081065, 0.5633871892633856, 0.19980994993278278, 0.10246136381835003, 0.5253152455195567, 0.40893199245196965, 0.1773009996339966, 0.18438495973741642, 0.18080401578276717, 0.17644927706709168, 0.18894740147490152, 0.18475143542126793, 0.19009409341982053, 0.1754575969490354, 0.19515764470060903, 0.0714324338636585, 0.0813183116718228, 0.08100527507006428, 0.0877426854026695, 0.08892491410109649, 0.0691269253840443, 0.07084656374943132, 0.06939513842767442, 0.09223590483928779]}, "mutation_prompt": null}
{"id": "97510699-f74a-4286-bf39-120a2153104a", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Evolving the algorithm by incorporating a dynamic mutation strategy based on individual fitness to enhance exploitation capabilities.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.9000216072287747, 0.9044379153934036, 0.9074999397355055, 0.9013327546351437, 0.8909150571948965, 0.8978055348912986, 0.8928607481894201, 0.891773952768284, 0.9107258053087457, 0.8305454648828767, 0.8176648330452447, 0.8210694532540056, 0.8306273531454529, 0.8119562902293729, 0.8205738086389519, 0.8223952858791607, 0.8162643806778458, 0.8432583945642081, 0.6125788196576921, 0.7286121946355827, 0.4381131957955636, 0.42378111825230513, 0.787385809989885, 0.5995336698203179, 0.6602337490702814, 0.8002449936442435, 0.6977977505623536, 0.594560110319613, 0.6962493293050954, 0.16322748042579893, 0.5559234236066357, 0.5690747197846142, 0.5497009704060261, 0.6972921562836049, 0.1798282719529214, 0.319771995446151, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7371214301201493, 0.8126175937885755, 0.7300369624954731, 0.7725713405118018, 0.6988195736072447, 0.8123854163528037, 0.7126715647318277, 0.7344244878145334, 0.7202255886074445, 0.2122525839800462, 0.1667908684113779, 0.23978614829897693, 0.27571742926307874, 0.26927587894623195, 0.3751939615501251, 0.1436487592848269, 0.1742931149784055, 0.17281709870985795, 0.1949057095556851, 0.1896051671696477, 0.2882351548083887, 0.19828958411920417, 0.20329358166586464, 0.1978973700990878, 0.19724271181284536, 0.21971424918272875, 0.2046270764417254, 0.21830384319171603, 0.3340423912633913, 0.26656341741840905, 0.1869920725824834, 0.22568547765576086, 0.197982606930035, 0.22301839694323133, 0.24970474534924725, 0.349315449510026, 0.0071355193456713595, 0.0036284863898506936, 9.999999999998899e-05, 0.00802217978644948, 9.999999999998899e-05, 0.0345789557463031, 0.02971045174401754, 9.999999999998899e-05, 0.037929896297903554, 0.07255329562775081, 0.0539498783872705, 0.06731203191190949, 0.09168034880376785, 0.0023847921348140177, 0.04221259953078149, 0.06974192206816843, 0.054206614459845315, 0.10347287632641333, 0.22539601910604057, 0.16327844574608386, 0.09342306238070486, 0.04270072798223756, 0.2874768095904313, 0.02563357091495877, 0.2034294462711318, 0.02987274933636619, 0.02359610220066244, 0.10216992410953574, 0.1259137844546161, 0.035786606447825386, 0.12228979052237832, 0.029300308986852208, 0.16185545547960833, 0.15338625509510417, 0.0850042197724592, 0.0627246058377845, 0.5085961882352468, 0.5026350413742497, 0.5193541785421696, 0.5466502546408544, 0.5433241819412541, 0.5626278734256596, 0.5211334002482264, 0.5332900653132773, 0.5252802929041285, 0.1359101477493827, 0.13093822284901957, 0.1758825307086217, 0.1519400526826985, 0.12248725734353083, 0.1689361443128934, 0.13824807924654192, 0.12956240346838332, 0.1318569079200086, 0.31291168781485523, 0.23922818647793975, 0.21937903028375505, 0.28343732259889043, 0.1950957997759447, 0.1812938684751917, 0.24405280987579103, 0.26121668063843784, 0.46395489605037343, 0.38018122646791486, 0.4666889763019614, 0.4644731305004616, 0.6160195387471588, 0.3819837764956857, 0.4224294292702553, 0.44028481024355337, 0.6033056186038588, 0.5248379455085144, 0.2514179911777181, 0.2846320474946544, 0.27832972227921804, 0.2799006248352319, 0.26906118922182654, 0.2977336880218887, 0.27770123031441984, 0.23569042512021376, 0.22472301690401753, 0.21129827351046215, 0.19638807771441236, 0.21845797976104708, 0.203207477970208, 0.21336123447647237, 0.21486397130113688, 0.1949989454869545, 0.21233667526905464, 0.2155167800543013, 0.2404817891834098, 0.243022617718875, 0.2486781636827694, 0.20583897799685225, 0.2097733969477935, 0.21289221353593513, 0.22075797000003383, 0.8168188551974792, 0.21693522746095562, 0.17243204612110785, 0.1850545519709501, 0.14632308182016873, 0.903960312593666, 0.9048829939971027, 0.19861997552924482, 0.16556041382377384, 0.16851281166582555, 0.9160252682983813, 0.8547994700886983, 0.15398574467037507, 0.719851951669856, 0.5851334288546927, 0.16775890793414838, 0.20709007711935312, 0.7089751927048746, 0.1632319707538904, 0.15364739107346792, 0.17892509661722156, 0.17881273399824926, 0.16535477748341176, 0.1849760267895939, 0.17952694719906048, 0.17709760342949776, 0.20588529696577584, 0.1911941294591445, 0.18953554652129156, 0.09862115100374957, 0.08389178737038361, 0.09031393207371052, 0.07880043643525714, 0.10035303909619964, 0.08442806687667204, 0.07924811866425863, 0.0797791654678478, 0.09445648467257184]}, "mutation_prompt": null}
{"id": "09adf5ca-0353-4339-afcb-51443ecd625d", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Population_Resizing", "description": "Introduce a dynamic population size adaptation strategy based on fitness progress to enhance exploration capabilities.", "configspace": "", "generation": 91, "fitness": 0.3685775610082842, "feedback": "The algorithm Enhanced_Adaptive_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.9000216072287747, 0.9044379153934036, 0.9074999397355055, 0.9013327546351437, 0.8909150571948965, 0.8978055348912986, 0.8928607481894201, 0.891773952768284, 0.9107258053087457, 0.8305454648828767, 0.8176648330452447, 0.8210694532540056, 0.8306273531454529, 0.8119562902293729, 0.8205738086389519, 0.8223952858791607, 0.8162643806778458, 0.8432583945642081, 0.6125788196576921, 0.7286121946355827, 0.4381131957955636, 0.42378111825230513, 0.787385809989885, 0.5995336698203179, 0.6602337490702814, 0.8002449936442435, 0.6977977505623536, 0.594560110319613, 0.6962493293050954, 0.16322748042579893, 0.5559234236066357, 0.5690747197846142, 0.5497009704060261, 0.6972921562836049, 0.1798282719529214, 0.319771995446151, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7371214301201493, 0.8126175937885755, 0.7300369624954731, 0.7725713405118018, 0.6988195736072447, 0.8123854163528037, 0.7126715647318277, 0.7344244878145334, 0.7202255886074445, 0.2122525839800462, 0.1667908684113779, 0.23978614829897693, 0.27571742926307874, 0.26927587894623195, 0.3751939615501251, 0.1436487592848269, 0.1742931149784055, 0.17281709870985795, 0.1949057095556851, 0.1896051671696477, 0.2882351548083887, 0.19828958411920417, 0.20329358166586464, 0.1978973700990878, 0.19724271181284536, 0.21971424918272875, 0.2046270764417254, 0.21830384319171603, 0.3340423912633913, 0.26656341741840905, 0.1869920725824834, 0.22568547765576086, 0.197982606930035, 0.22301839694323133, 0.24970474534924725, 0.349315449510026, 0.0071355193456713595, 0.0036284863898506936, 9.999999999998899e-05, 0.00802217978644948, 9.999999999998899e-05, 0.0345789557463031, 0.02971045174401754, 9.999999999998899e-05, 0.037929896297903554, 0.07255329562775081, 0.0539498783872705, 0.06731203191190949, 0.09168034880376785, 0.0023847921348140177, 0.04221259953078149, 0.06974192206816843, 0.054206614459845315, 0.10347287632641333, 0.22539601910604057, 0.16327844574608386, 0.09342306238070486, 0.04270072798223756, 0.2874768095904313, 0.02563357091495877, 0.2034294462711318, 0.02987274933636619, 0.02359610220066244, 0.10216992410953574, 0.1259137844546161, 0.035786606447825386, 0.12228979052237832, 0.029300308986852208, 0.16185545547960833, 0.15338625509510417, 0.0850042197724592, 0.0627246058377845, 0.5085961882352468, 0.5026350413742497, 0.5193541785421696, 0.5466502546408544, 0.5433241819412541, 0.5626278734256596, 0.5211334002482264, 0.5332900653132773, 0.5252802929041285, 0.1359101477493827, 0.13093822284901957, 0.1758825307086217, 0.1519400526826985, 0.12248725734353083, 0.1689361443128934, 0.13824807924654192, 0.12956240346838332, 0.1318569079200086, 0.31291168781485523, 0.23922818647793975, 0.21937903028375505, 0.28343732259889043, 0.1950957997759447, 0.1812938684751917, 0.24405280987579103, 0.26121668063843784, 0.46395489605037343, 0.38018122646791486, 0.4666889763019614, 0.4644731305004616, 0.6160195387471588, 0.3819837764956857, 0.4224294292702553, 0.44028481024355337, 0.6033056186038588, 0.5248379455085144, 0.2514179911777181, 0.2846320474946544, 0.27832972227921804, 0.2799006248352319, 0.26906118922182654, 0.2977336880218887, 0.27770123031441984, 0.23569042512021376, 0.22472301690401753, 0.21129827351046215, 0.19638807771441236, 0.21845797976104708, 0.203207477970208, 0.21336123447647237, 0.21486397130113688, 0.1949989454869545, 0.21233667526905464, 0.2155167800543013, 0.2404817891834098, 0.243022617718875, 0.2486781636827694, 0.20583897799685225, 0.2097733969477935, 0.21289221353593513, 0.22075797000003383, 0.8168188551974792, 0.21693522746095562, 0.17243204612110785, 0.1850545519709501, 0.14632308182016873, 0.903960312593666, 0.9048829939971027, 0.19861997552924482, 0.16556041382377384, 0.16851281166582555, 0.9160252682983813, 0.8547994700886983, 0.15398574467037507, 0.719851951669856, 0.5851334288546927, 0.16775890793414838, 0.20709007711935312, 0.7089751927048746, 0.1632319707538904, 0.15364739107346792, 0.17892509661722156, 0.17881273399824926, 0.16535477748341176, 0.1849760267895939, 0.17952694719906048, 0.17709760342949776, 0.20588529696577584, 0.1911941294591445, 0.18953554652129156, 0.09862115100374957, 0.08389178737038361, 0.09031393207371052, 0.07880043643525714, 0.10035303909619964, 0.08442806687667204, 0.07924811866425863, 0.0797791654678478, 0.09445648467257184]}, "mutation_prompt": null}
{"id": "952187c9-13f8-4897-81c6-17bbdd6c4cec", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Evolving the algorithm by incorporating a dynamic mutation strategy based on individual fitness to enhance exploitation capabilities.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.9000216072287747, 0.9044379153934036, 0.9074999397355055, 0.9013327546351437, 0.8909150571948965, 0.8978055348912986, 0.8928607481894201, 0.891773952768284, 0.9107258053087457, 0.8305454648828767, 0.8176648330452447, 0.8210694532540056, 0.8306273531454529, 0.8119562902293729, 0.8205738086389519, 0.8223952858791607, 0.8162643806778458, 0.8432583945642081, 0.6125788196576921, 0.7286121946355827, 0.4381131957955636, 0.42378111825230513, 0.787385809989885, 0.5995336698203179, 0.6602337490702814, 0.8002449936442435, 0.6977977505623536, 0.594560110319613, 0.6962493293050954, 0.16322748042579893, 0.5559234236066357, 0.5690747197846142, 0.5497009704060261, 0.6972921562836049, 0.1798282719529214, 0.319771995446151, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7371214301201493, 0.8126175937885755, 0.7300369624954731, 0.7725713405118018, 0.6988195736072447, 0.8123854163528037, 0.7126715647318277, 0.7344244878145334, 0.7202255886074445, 0.2122525839800462, 0.1667908684113779, 0.23978614829897693, 0.27571742926307874, 0.26927587894623195, 0.3751939615501251, 0.1436487592848269, 0.1742931149784055, 0.17281709870985795, 0.1949057095556851, 0.1896051671696477, 0.2882351548083887, 0.19828958411920417, 0.20329358166586464, 0.1978973700990878, 0.19724271181284536, 0.21971424918272875, 0.2046270764417254, 0.21830384319171603, 0.3340423912633913, 0.26656341741840905, 0.1869920725824834, 0.22568547765576086, 0.197982606930035, 0.22301839694323133, 0.24970474534924725, 0.349315449510026, 0.0071355193456713595, 0.0036284863898506936, 9.999999999998899e-05, 0.00802217978644948, 9.999999999998899e-05, 0.0345789557463031, 0.02971045174401754, 9.999999999998899e-05, 0.037929896297903554, 0.07255329562775081, 0.0539498783872705, 0.06731203191190949, 0.09168034880376785, 0.0023847921348140177, 0.04221259953078149, 0.06974192206816843, 0.054206614459845315, 0.10347287632641333, 0.22539601910604057, 0.16327844574608386, 0.09342306238070486, 0.04270072798223756, 0.2874768095904313, 0.02563357091495877, 0.2034294462711318, 0.02987274933636619, 0.02359610220066244, 0.10216992410953574, 0.1259137844546161, 0.035786606447825386, 0.12228979052237832, 0.029300308986852208, 0.16185545547960833, 0.15338625509510417, 0.0850042197724592, 0.0627246058377845, 0.5085961882352468, 0.5026350413742497, 0.5193541785421696, 0.5466502546408544, 0.5433241819412541, 0.5626278734256596, 0.5211334002482264, 0.5332900653132773, 0.5252802929041285, 0.1359101477493827, 0.13093822284901957, 0.1758825307086217, 0.1519400526826985, 0.12248725734353083, 0.1689361443128934, 0.13824807924654192, 0.12956240346838332, 0.1318569079200086, 0.31291168781485523, 0.23922818647793975, 0.21937903028375505, 0.28343732259889043, 0.1950957997759447, 0.1812938684751917, 0.24405280987579103, 0.26121668063843784, 0.46395489605037343, 0.38018122646791486, 0.4666889763019614, 0.4644731305004616, 0.6160195387471588, 0.3819837764956857, 0.4224294292702553, 0.44028481024355337, 0.6033056186038588, 0.5248379455085144, 0.2514179911777181, 0.2846320474946544, 0.27832972227921804, 0.2799006248352319, 0.26906118922182654, 0.2977336880218887, 0.27770123031441984, 0.23569042512021376, 0.22472301690401753, 0.21129827351046215, 0.19638807771441236, 0.21845797976104708, 0.203207477970208, 0.21336123447647237, 0.21486397130113688, 0.1949989454869545, 0.21233667526905464, 0.2155167800543013, 0.2404817891834098, 0.243022617718875, 0.2486781636827694, 0.20583897799685225, 0.2097733969477935, 0.21289221353593513, 0.22075797000003383, 0.8168188551974792, 0.21693522746095562, 0.17243204612110785, 0.1850545519709501, 0.14632308182016873, 0.903960312593666, 0.9048829939971027, 0.19861997552924482, 0.16556041382377384, 0.16851281166582555, 0.9160252682983813, 0.8547994700886983, 0.15398574467037507, 0.719851951669856, 0.5851334288546927, 0.16775890793414838, 0.20709007711935312, 0.7089751927048746, 0.1632319707538904, 0.15364739107346792, 0.17892509661722156, 0.17881273399824926, 0.16535477748341176, 0.1849760267895939, 0.17952694719906048, 0.17709760342949776, 0.20588529696577584, 0.1911941294591445, 0.18953554652129156, 0.09862115100374957, 0.08389178737038361, 0.09031393207371052, 0.07880043643525714, 0.10035303909619964, 0.08442806687667204, 0.07924811866425863, 0.0797791654678478, 0.09445648467257184]}, "mutation_prompt": null}
{"id": "dc8fbcad-6f0a-4a35-9983-2568595c18a6", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1, adaptive_mutation_ratio=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n        self.adaptive_mutation_ratio = adaptive_mutation_ratio\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n                self.mutation_scale *= 1 + self.adaptive_mutation_ratio * (1 - gbest_fitness)\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Adaptive_Mutation_Population_Resizing", "description": "Introducing a dynamic adaptation of mutation scale based on individual fitness to improve exploration capabilities.", "configspace": "", "generation": 93, "fitness": 0.3685775610082842, "feedback": "The algorithm Enhanced_Adaptive_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.9000216072287747, 0.9044379153934036, 0.9074999397355055, 0.9013327546351437, 0.8909150571948965, 0.8978055348912986, 0.8928607481894201, 0.891773952768284, 0.9107258053087457, 0.8305454648828767, 0.8176648330452447, 0.8210694532540056, 0.8306273531454529, 0.8119562902293729, 0.8205738086389519, 0.8223952858791607, 0.8162643806778458, 0.8432583945642081, 0.6125788196576921, 0.7286121946355827, 0.4381131957955636, 0.42378111825230513, 0.787385809989885, 0.5995336698203179, 0.6602337490702814, 0.8002449936442435, 0.6977977505623536, 0.594560110319613, 0.6962493293050954, 0.16322748042579893, 0.5559234236066357, 0.5690747197846142, 0.5497009704060261, 0.6972921562836049, 0.1798282719529214, 0.319771995446151, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7371214301201493, 0.8126175937885755, 0.7300369624954731, 0.7725713405118018, 0.6988195736072447, 0.8123854163528037, 0.7126715647318277, 0.7344244878145334, 0.7202255886074445, 0.2122525839800462, 0.1667908684113779, 0.23978614829897693, 0.27571742926307874, 0.26927587894623195, 0.3751939615501251, 0.1436487592848269, 0.1742931149784055, 0.17281709870985795, 0.1949057095556851, 0.1896051671696477, 0.2882351548083887, 0.19828958411920417, 0.20329358166586464, 0.1978973700990878, 0.19724271181284536, 0.21971424918272875, 0.2046270764417254, 0.21830384319171603, 0.3340423912633913, 0.26656341741840905, 0.1869920725824834, 0.22568547765576086, 0.197982606930035, 0.22301839694323133, 0.24970474534924725, 0.349315449510026, 0.0071355193456713595, 0.0036284863898506936, 9.999999999998899e-05, 0.00802217978644948, 9.999999999998899e-05, 0.0345789557463031, 0.02971045174401754, 9.999999999998899e-05, 0.037929896297903554, 0.07255329562775081, 0.0539498783872705, 0.06731203191190949, 0.09168034880376785, 0.0023847921348140177, 0.04221259953078149, 0.06974192206816843, 0.054206614459845315, 0.10347287632641333, 0.22539601910604057, 0.16327844574608386, 0.09342306238070486, 0.04270072798223756, 0.2874768095904313, 0.02563357091495877, 0.2034294462711318, 0.02987274933636619, 0.02359610220066244, 0.10216992410953574, 0.1259137844546161, 0.035786606447825386, 0.12228979052237832, 0.029300308986852208, 0.16185545547960833, 0.15338625509510417, 0.0850042197724592, 0.0627246058377845, 0.5085961882352468, 0.5026350413742497, 0.5193541785421696, 0.5466502546408544, 0.5433241819412541, 0.5626278734256596, 0.5211334002482264, 0.5332900653132773, 0.5252802929041285, 0.1359101477493827, 0.13093822284901957, 0.1758825307086217, 0.1519400526826985, 0.12248725734353083, 0.1689361443128934, 0.13824807924654192, 0.12956240346838332, 0.1318569079200086, 0.31291168781485523, 0.23922818647793975, 0.21937903028375505, 0.28343732259889043, 0.1950957997759447, 0.1812938684751917, 0.24405280987579103, 0.26121668063843784, 0.46395489605037343, 0.38018122646791486, 0.4666889763019614, 0.4644731305004616, 0.6160195387471588, 0.3819837764956857, 0.4224294292702553, 0.44028481024355337, 0.6033056186038588, 0.5248379455085144, 0.2514179911777181, 0.2846320474946544, 0.27832972227921804, 0.2799006248352319, 0.26906118922182654, 0.2977336880218887, 0.27770123031441984, 0.23569042512021376, 0.22472301690401753, 0.21129827351046215, 0.19638807771441236, 0.21845797976104708, 0.203207477970208, 0.21336123447647237, 0.21486397130113688, 0.1949989454869545, 0.21233667526905464, 0.2155167800543013, 0.2404817891834098, 0.243022617718875, 0.2486781636827694, 0.20583897799685225, 0.2097733969477935, 0.21289221353593513, 0.22075797000003383, 0.8168188551974792, 0.21693522746095562, 0.17243204612110785, 0.1850545519709501, 0.14632308182016873, 0.903960312593666, 0.9048829939971027, 0.19861997552924482, 0.16556041382377384, 0.16851281166582555, 0.9160252682983813, 0.8547994700886983, 0.15398574467037507, 0.719851951669856, 0.5851334288546927, 0.16775890793414838, 0.20709007711935312, 0.7089751927048746, 0.1632319707538904, 0.15364739107346792, 0.17892509661722156, 0.17881273399824926, 0.16535477748341176, 0.1849760267895939, 0.17952694719906048, 0.17709760342949776, 0.20588529696577584, 0.1911941294591445, 0.18953554652129156, 0.09862115100374957, 0.08389178737038361, 0.09031393207371052, 0.07880043643525714, 0.10035303909619964, 0.08442806687667204, 0.07924811866425863, 0.0797791654678478, 0.09445648467257184]}, "mutation_prompt": null}
{"id": "1b791ddb-3485-4018-8468-5f82c920900e", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Evolving the algorithm by incorporating a dynamic mutation strategy based on individual fitness to enhance exploitation capabilities.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.9000216072287747, 0.9044379153934036, 0.9074999397355055, 0.9013327546351437, 0.8909150571948965, 0.8978055348912986, 0.8928607481894201, 0.891773952768284, 0.9107258053087457, 0.8305454648828767, 0.8176648330452447, 0.8210694532540056, 0.8306273531454529, 0.8119562902293729, 0.8205738086389519, 0.8223952858791607, 0.8162643806778458, 0.8432583945642081, 0.6125788196576921, 0.7286121946355827, 0.4381131957955636, 0.42378111825230513, 0.787385809989885, 0.5995336698203179, 0.6602337490702814, 0.8002449936442435, 0.6977977505623536, 0.594560110319613, 0.6962493293050954, 0.16322748042579893, 0.5559234236066357, 0.5690747197846142, 0.5497009704060261, 0.6972921562836049, 0.1798282719529214, 0.319771995446151, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7371214301201493, 0.8126175937885755, 0.7300369624954731, 0.7725713405118018, 0.6988195736072447, 0.8123854163528037, 0.7126715647318277, 0.7344244878145334, 0.7202255886074445, 0.2122525839800462, 0.1667908684113779, 0.23978614829897693, 0.27571742926307874, 0.26927587894623195, 0.3751939615501251, 0.1436487592848269, 0.1742931149784055, 0.17281709870985795, 0.1949057095556851, 0.1896051671696477, 0.2882351548083887, 0.19828958411920417, 0.20329358166586464, 0.1978973700990878, 0.19724271181284536, 0.21971424918272875, 0.2046270764417254, 0.21830384319171603, 0.3340423912633913, 0.26656341741840905, 0.1869920725824834, 0.22568547765576086, 0.197982606930035, 0.22301839694323133, 0.24970474534924725, 0.349315449510026, 0.0071355193456713595, 0.0036284863898506936, 9.999999999998899e-05, 0.00802217978644948, 9.999999999998899e-05, 0.0345789557463031, 0.02971045174401754, 9.999999999998899e-05, 0.037929896297903554, 0.07255329562775081, 0.0539498783872705, 0.06731203191190949, 0.09168034880376785, 0.0023847921348140177, 0.04221259953078149, 0.06974192206816843, 0.054206614459845315, 0.10347287632641333, 0.22539601910604057, 0.16327844574608386, 0.09342306238070486, 0.04270072798223756, 0.2874768095904313, 0.02563357091495877, 0.2034294462711318, 0.02987274933636619, 0.02359610220066244, 0.10216992410953574, 0.1259137844546161, 0.035786606447825386, 0.12228979052237832, 0.029300308986852208, 0.16185545547960833, 0.15338625509510417, 0.0850042197724592, 0.0627246058377845, 0.5085961882352468, 0.5026350413742497, 0.5193541785421696, 0.5466502546408544, 0.5433241819412541, 0.5626278734256596, 0.5211334002482264, 0.5332900653132773, 0.5252802929041285, 0.1359101477493827, 0.13093822284901957, 0.1758825307086217, 0.1519400526826985, 0.12248725734353083, 0.1689361443128934, 0.13824807924654192, 0.12956240346838332, 0.1318569079200086, 0.31291168781485523, 0.23922818647793975, 0.21937903028375505, 0.28343732259889043, 0.1950957997759447, 0.1812938684751917, 0.24405280987579103, 0.26121668063843784, 0.46395489605037343, 0.38018122646791486, 0.4666889763019614, 0.4644731305004616, 0.6160195387471588, 0.3819837764956857, 0.4224294292702553, 0.44028481024355337, 0.6033056186038588, 0.5248379455085144, 0.2514179911777181, 0.2846320474946544, 0.27832972227921804, 0.2799006248352319, 0.26906118922182654, 0.2977336880218887, 0.27770123031441984, 0.23569042512021376, 0.22472301690401753, 0.21129827351046215, 0.19638807771441236, 0.21845797976104708, 0.203207477970208, 0.21336123447647237, 0.21486397130113688, 0.1949989454869545, 0.21233667526905464, 0.2155167800543013, 0.2404817891834098, 0.243022617718875, 0.2486781636827694, 0.20583897799685225, 0.2097733969477935, 0.21289221353593513, 0.22075797000003383, 0.8168188551974792, 0.21693522746095562, 0.17243204612110785, 0.1850545519709501, 0.14632308182016873, 0.903960312593666, 0.9048829939971027, 0.19861997552924482, 0.16556041382377384, 0.16851281166582555, 0.9160252682983813, 0.8547994700886983, 0.15398574467037507, 0.719851951669856, 0.5851334288546927, 0.16775890793414838, 0.20709007711935312, 0.7089751927048746, 0.1632319707538904, 0.15364739107346792, 0.17892509661722156, 0.17881273399824926, 0.16535477748341176, 0.1849760267895939, 0.17952694719906048, 0.17709760342949776, 0.20588529696577584, 0.1911941294591445, 0.18953554652129156, 0.09862115100374957, 0.08389178737038361, 0.09031393207371052, 0.07880043643525714, 0.10035303909619964, 0.08442806687667204, 0.07924811866425863, 0.0797791654678478, 0.09445648467257184]}, "mutation_prompt": null}
{"id": "d8b1572d-bf10-47fa-8964-fc3395033344", "solution": "import numpy as np\n\nclass Adaptive_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n\n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                self.mutation_scale = 0.1 + 0.9 * (1 - progress)  # Adaptive mutation scale update based on optimization progress\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Adaptive_Dynamic_Mutation_Population_Resizing", "description": "Introducing an adaptive mutation strategy based on individual performance to dynamically adjust the mutation scale during optimization.", "configspace": "", "generation": 95, "fitness": 0.30528066157029565, "feedback": "The algorithm Adaptive_Dynamic_Mutation_Population_Resizing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.7837986705869454, 0.7595689682676241, 0.7744519326704332, 0.7665483637199249, 0.7780766375846775, 0.7727306899029307, 0.7904323564259992, 0.800204645523265, 0.76436293799596, 0.5919449307674514, 0.5990689613620068, 0.5835980576650026, 0.5821370806799389, 0.6286408893923647, 0.6085033952846266, 0.5643339694384231, 0.6027325704007094, 0.6252435766261318, 0.15861297204292513, 0.14250796745033856, 0.16269037557510635, 0.11741606090243095, 0.23500830850446963, 0.16941524320656842, 0.31392088001141416, 0.1373704453601946, 0.2198910006816277, 0.12111686548234879, 0.12003065261517076, 0.12872705326561296, 0.187750427002508, 0.1596774741413941, 0.18556861783860812, 0.14987293287898573, 0.17911627263315222, 0.1952263689363707, 0.987918905262809, 0.9913063385854981, 0.9902945723319762, 0.990913113019951, 0.9823799731922386, 0.9873199607138858, 0.9870665784634417, 0.9913763722834499, 0.9908368687792962, 0.46905801572649475, 0.4502231705520442, 0.48947219570787515, 0.47891683319027867, 0.4932624249880845, 0.46642053836756137, 0.42366571758920324, 0.4603188983148607, 0.45958757613660906, 0.34617521676446483, 0.35623296154973205, 0.21838366193228298, 0.21145846309144378, 0.7862005750314086, 0.26118396894814655, 0.7348117237079492, 0.7544114891939284, 0.21823629980789572, 0.17741890545637162, 0.17812964474603743, 0.17804484572663604, 0.19292449039887627, 0.17408417197397807, 0.15895826160553483, 0.1677123800562964, 0.19573421661140167, 0.19801531178705467, 0.16556573235609306, 0.15328865386684887, 0.2039163753996338, 0.11853643601037533, 0.18546794325311078, 0.1855403073263976, 0.2074499734858346, 0.2444965549379201, 0.18819092529841142, 0.024155421043003833, 0.04285105937025513, 0.00032438796485401156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01924206404274864, 0.04352708769138369, 0.09783384190612743, 0.04171316416116644, 0.008286480023847242, 0.06394039323931888, 0.08283652427712895, 9.999999999998899e-05, 0.01631509309593948, 0.08529336008912136, 0.0669837104414821, 0.08460443840546428, 0.11750807844027367, 0.1480787290930139, 0.1311292657322085, 0.05903007834160856, 0.15278140412481334, 0.009968159826640122, 0.3043959268512987, 0.19400091083988558, 0.02970420781588179, 0.1698320586923241, 0.10052608087131432, 0.23446041064040124, 0.11862385215355065, 0.18289594577486612, 0.11665143488833551, 0.12236742755935193, 0.09684939725605723, 0.06230701747353118, 0.4644775985402876, 0.49818721018382617, 0.5257246964924667, 0.49249769677675626, 0.5363964635592363, 0.5241186603332697, 0.535264031944286, 0.5184367971154239, 0.5198699231599865, 0.11195728975808683, 0.11855211155342149, 0.09230043553152123, 0.11133488744486697, 0.10579574523107693, 0.10794699694544307, 0.09419791134481492, 0.11862704246657885, 0.11532884025809931, 0.13667140746884943, 0.13360835961972384, 0.12321317879102267, 0.13239635939965577, 0.14082291777042333, 0.13217593701774988, 0.13389263007124885, 0.2364900686388699, 0.13788977979514516, 0.28192478716704006, 0.4720822254436843, 0.36064007695021416, 0.24837472438413544, 0.3690697768128187, 0.4427048394523675, 0.48141421106594784, 0.48965050493511875, 0.4808716369767845, 0.24882865913738705, 0.266822212993455, 0.3596666311637321, 0.2727984687702023, 0.3547136307867076, 0.25363476381195227, 0.3290726429016875, 0.33774030302490143, 0.23215876114630973, 0.2172497443538356, 0.20641029164382507, 0.20271577131000496, 0.2029624914464987, 0.1967740197135216, 0.1930362462310541, 0.20016440886686782, 0.18998218050869298, 0.23498020427537902, 0.5465010654879667, 0.31390555557969924, 0.49092660799175136, 0.5501534519812616, 0.1921743597838954, 0.2292175591427108, 0.20134173573784697, 0.19200113974145128, 0.5300144072839325, 0.1777800257063915, 0.16981310683848028, 0.14988532461251436, 0.7870462955982613, 0.19716369081665075, 0.16699379303208484, 0.7820568526737844, 0.7865007641177096, 0.8267495911829696, 0.5029083166398036, 0.37766236563798194, 0.2036961530995649, 0.20331028789249017, 0.11848621563849315, 0.20673564250295873, 0.09253885161468789, 0.5831885831177687, 0.16222756332155552, 0.18146439801809078, 0.1714851019849375, 0.17528141206236492, 0.2049031894706953, 0.17384363718520313, 0.18139942094301198, 0.18963285256545237, 0.16079446682852316, 0.2230482574795023, 0.07131726507472158, 0.08973270036569192, 0.08591351885232013, 0.09802086628217088, 0.08178473510276585, 0.08405884201167424, 0.08775426886228366, 0.08764212216648826, 0.08632383618657202]}, "mutation_prompt": null}
{"id": "d9a279a1-7630-4c71-9652-1e17fb9437ea", "solution": "import numpy as np\n\nclass Levy_Enhanced_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def levy_flight(self, dim):\n        beta = 1.5\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / (np.abs(v))**(1 / beta)\n        return 0.01 * step\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n                \n                # Integrate Levy flight behavior for exploration\n                for i in range(swarm_size):\n                    swarm[i] += self.levy_flight(self.dim)\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Levy_Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Introduce Levy flight behavior to enhance exploration capabilities in the algorithm.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {}, "mutation_prompt": null}
{"id": "b48e2476-2e39-4e52-8b1c-149ffb03b47a", "solution": "import numpy as np\n\nclass Adaptive_Enhanced_Dynamic_Mutation_Population_Resizing(Enhanced_Dynamic_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1, historical_info=[]):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob, mutation_scale)\n        self.historical_info = historical_info\n    \n    def __call__(self, func):\n        def enhanced_pso_de_optimizer():\n            # Existing code remains unchanged up to this point\n            # Integrate novel adaptive mutation strategy based on historical search information\n            if self.historical_info:\n                self.mutation_scale *= np.mean(self.historical_info)  # Adapt mutation scale based on historical information\n                self.pso_w *= np.mean(self.historical_info)  # Adapt PSO inertia weight based on historical information\n\n            return pso_de_optimizer()\n\n        return enhanced_pso_de_optimizer()", "name": "Adaptive_Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Enhance the exploitation capability by integrating a novel adaptive mutation strategy based on historical search information.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'pso_de_optimizer' is not defined\").", "error": "NameError(\"name 'pso_de_optimizer' is not defined\")", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {}, "mutation_prompt": null}
{"id": "a7053cd9-a8d3-4184-9e94-e1a655ecbee1", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Evolving the algorithm by incorporating a dynamic mutation strategy based on individual fitness to enhance exploitation capabilities.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.9000216072287747, 0.9044379153934036, 0.9074999397355055, 0.9013327546351437, 0.8909150571948965, 0.8978055348912986, 0.8928607481894201, 0.891773952768284, 0.9107258053087457, 0.8305454648828767, 0.8176648330452447, 0.8210694532540056, 0.8306273531454529, 0.8119562902293729, 0.8205738086389519, 0.8223952858791607, 0.8162643806778458, 0.8432583945642081, 0.6125788196576921, 0.7286121946355827, 0.4381131957955636, 0.42378111825230513, 0.787385809989885, 0.5995336698203179, 0.6602337490702814, 0.8002449936442435, 0.6977977505623536, 0.594560110319613, 0.6962493293050954, 0.16322748042579893, 0.5559234236066357, 0.5690747197846142, 0.5497009704060261, 0.6972921562836049, 0.1798282719529214, 0.319771995446151, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7371214301201493, 0.8126175937885755, 0.7300369624954731, 0.7725713405118018, 0.6988195736072447, 0.8123854163528037, 0.7126715647318277, 0.7344244878145334, 0.7202255886074445, 0.2122525839800462, 0.1667908684113779, 0.23978614829897693, 0.27571742926307874, 0.26927587894623195, 0.3751939615501251, 0.1436487592848269, 0.1742931149784055, 0.17281709870985795, 0.1949057095556851, 0.1896051671696477, 0.2882351548083887, 0.19828958411920417, 0.20329358166586464, 0.1978973700990878, 0.19724271181284536, 0.21971424918272875, 0.2046270764417254, 0.21830384319171603, 0.3340423912633913, 0.26656341741840905, 0.1869920725824834, 0.22568547765576086, 0.197982606930035, 0.22301839694323133, 0.24970474534924725, 0.349315449510026, 0.0071355193456713595, 0.0036284863898506936, 9.999999999998899e-05, 0.00802217978644948, 9.999999999998899e-05, 0.0345789557463031, 0.02971045174401754, 9.999999999998899e-05, 0.037929896297903554, 0.07255329562775081, 0.0539498783872705, 0.06731203191190949, 0.09168034880376785, 0.0023847921348140177, 0.04221259953078149, 0.06974192206816843, 0.054206614459845315, 0.10347287632641333, 0.22539601910604057, 0.16327844574608386, 0.09342306238070486, 0.04270072798223756, 0.2874768095904313, 0.02563357091495877, 0.2034294462711318, 0.02987274933636619, 0.02359610220066244, 0.10216992410953574, 0.1259137844546161, 0.035786606447825386, 0.12228979052237832, 0.029300308986852208, 0.16185545547960833, 0.15338625509510417, 0.0850042197724592, 0.0627246058377845, 0.5085961882352468, 0.5026350413742497, 0.5193541785421696, 0.5466502546408544, 0.5433241819412541, 0.5626278734256596, 0.5211334002482264, 0.5332900653132773, 0.5252802929041285, 0.1359101477493827, 0.13093822284901957, 0.1758825307086217, 0.1519400526826985, 0.12248725734353083, 0.1689361443128934, 0.13824807924654192, 0.12956240346838332, 0.1318569079200086, 0.31291168781485523, 0.23922818647793975, 0.21937903028375505, 0.28343732259889043, 0.1950957997759447, 0.1812938684751917, 0.24405280987579103, 0.26121668063843784, 0.46395489605037343, 0.38018122646791486, 0.4666889763019614, 0.4644731305004616, 0.6160195387471588, 0.3819837764956857, 0.4224294292702553, 0.44028481024355337, 0.6033056186038588, 0.5248379455085144, 0.2514179911777181, 0.2846320474946544, 0.27832972227921804, 0.2799006248352319, 0.26906118922182654, 0.2977336880218887, 0.27770123031441984, 0.23569042512021376, 0.22472301690401753, 0.21129827351046215, 0.19638807771441236, 0.21845797976104708, 0.203207477970208, 0.21336123447647237, 0.21486397130113688, 0.1949989454869545, 0.21233667526905464, 0.2155167800543013, 0.2404817891834098, 0.243022617718875, 0.2486781636827694, 0.20583897799685225, 0.2097733969477935, 0.21289221353593513, 0.22075797000003383, 0.8168188551974792, 0.21693522746095562, 0.17243204612110785, 0.1850545519709501, 0.14632308182016873, 0.903960312593666, 0.9048829939971027, 0.19861997552924482, 0.16556041382377384, 0.16851281166582555, 0.9160252682983813, 0.8547994700886983, 0.15398574467037507, 0.719851951669856, 0.5851334288546927, 0.16775890793414838, 0.20709007711935312, 0.7089751927048746, 0.1632319707538904, 0.15364739107346792, 0.17892509661722156, 0.17881273399824926, 0.16535477748341176, 0.1849760267895939, 0.17952694719906048, 0.17709760342949776, 0.20588529696577584, 0.1911941294591445, 0.18953554652129156, 0.09862115100374957, 0.08389178737038361, 0.09031393207371052, 0.07880043643525714, 0.10035303909619964, 0.08442806687667204, 0.07924811866425863, 0.0797791654678478, 0.09445648467257184]}, "mutation_prompt": null}
{"id": "98a098f6-b1a5-4b2a-875d-19aba17fa5de", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_Mutation_Population_Resizing(Adaptive_Mutation_Population_Resizing):\n    def __init__(self, budget, dim, swarm_size=30, pso_w=0.5, pso_c1=1.5, pso_c2=1.5, de_f=0.5, de_cr=0.9, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, swarm_size, pso_w, pso_c1, pso_c2, de_f, de_cr, mutation_prob)\n        self.mutation_scale = mutation_scale\n    \n    def __call__(self, func):\n        def pso_de_optimizer():\n            swarm_size = self.swarm_size\n            swarm = np.random.uniform(low=-5.0, high=5.0, size=(swarm_size, self.dim))\n            swarm += self.mutation_scale * np.random.uniform(low=-1.0, high=1.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_best = swarm.copy()\n            pbest_fitness = np.array([func(ind) for ind in swarm])\n            gbest_fitness = np.min(pbest_fitness)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = swarm[gbest_idx]\n\n            for iter_count in range(self.budget):\n                progress = iter_count / self.initial_budget\n                dynamic_params = [(1 - progress) * p + progress * p * self.dynamic_threshold for p in [self.pso_w, self.pso_c1, self.pso_c2, self.de_f, self.de_cr]]\n\n                r1, r2 = np.random.rand(swarm_size, self.dim), np.random.rand(swarm_size, self.dim)\n                velocities = dynamic_params[0] * velocities + dynamic_params[1] * r1 * (personal_best - swarm) + dynamic_params[2] * r2 * (gbest - swarm)\n                swarm = swarm + velocities\n\n                swarm_size = max(self.min_swarm_size, min(self.max_swarm_size, int(self.swarm_size * (1 - progress))))\n                if swarm_size != self.swarm_size:\n                    self.swarm_size = swarm_size\n                    velocities = velocities[:swarm_size]\n                    swarm = swarm[:swarm_size]\n                    personal_best = personal_best[:swarm_size]\n                    pbest_fitness = pbest_fitness[:swarm_size]\n\n                for i in range(swarm_size):\n                    trial = swarm[i].copy()\n                    idxs = list(range(swarm_size))\n                    idxs.remove(i)\n                    a, b, c = swarm[np.random.choice(idxs, 3, replace=False)]\n                    j_rand = np.random.randint(0, self.dim)\n                    for j in range(self.dim):\n                        if np.random.rand() < dynamic_params[4] or j == j_rand:\n                            if np.random.rand() < (self.mutation_prob * (1 - progress)):\n                                trial[j] = np.random.uniform(low=-5.0, high=5.0)\n                            else:\n                                beta = np.random.normal(0, 1, 1)[0]\n                                trial[j] = a[j] + beta * (b[j] - c[j])\n                    trial_fitness = func(trial)\n                    if trial_fitness < pbest_fitness[i]:\n                        pbest_fitness[i] = trial_fitness\n                        personal_best[i] = trial\n                        if trial_fitness < gbest_fitness:\n                            gbest_fitness = trial_fitness\n                            gbest = trial\n\n            return gbest, gbest_fitness\n\n        return pso_de_optimizer()", "name": "Enhanced_Dynamic_Mutation_Population_Resizing", "description": "Evolving the algorithm by incorporating a dynamic mutation strategy based on individual fitness to enhance exploitation capabilities.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2e7f343-6303-4cac-b7f7-ad0edd4c9fb3", "metadata": {"aucs": [0.9000216072287747, 0.9044379153934036, 0.9074999397355055, 0.9013327546351437, 0.8909150571948965, 0.8978055348912986, 0.8928607481894201, 0.891773952768284, 0.9107258053087457, 0.8305454648828767, 0.8176648330452447, 0.8210694532540056, 0.8306273531454529, 0.8119562902293729, 0.8205738086389519, 0.8223952858791607, 0.8162643806778458, 0.8432583945642081, 0.6125788196576921, 0.7286121946355827, 0.4381131957955636, 0.42378111825230513, 0.787385809989885, 0.5995336698203179, 0.6602337490702814, 0.8002449936442435, 0.6977977505623536, 0.594560110319613, 0.6962493293050954, 0.16322748042579893, 0.5559234236066357, 0.5690747197846142, 0.5497009704060261, 0.6972921562836049, 0.1798282719529214, 0.319771995446151, 0.989906951476084, 0.9914954835721118, 0.9917969843375244, 0.9906407493637884, 0.9889438439087291, 0.9876502635553518, 0.9918796220494802, 0.98856040247406, 0.9868215479955228, 0.7371214301201493, 0.8126175937885755, 0.7300369624954731, 0.7725713405118018, 0.6988195736072447, 0.8123854163528037, 0.7126715647318277, 0.7344244878145334, 0.7202255886074445, 0.2122525839800462, 0.1667908684113779, 0.23978614829897693, 0.27571742926307874, 0.26927587894623195, 0.3751939615501251, 0.1436487592848269, 0.1742931149784055, 0.17281709870985795, 0.1949057095556851, 0.1896051671696477, 0.2882351548083887, 0.19828958411920417, 0.20329358166586464, 0.1978973700990878, 0.19724271181284536, 0.21971424918272875, 0.2046270764417254, 0.21830384319171603, 0.3340423912633913, 0.26656341741840905, 0.1869920725824834, 0.22568547765576086, 0.197982606930035, 0.22301839694323133, 0.24970474534924725, 0.349315449510026, 0.0071355193456713595, 0.0036284863898506936, 9.999999999998899e-05, 0.00802217978644948, 9.999999999998899e-05, 0.0345789557463031, 0.02971045174401754, 9.999999999998899e-05, 0.037929896297903554, 0.07255329562775081, 0.0539498783872705, 0.06731203191190949, 0.09168034880376785, 0.0023847921348140177, 0.04221259953078149, 0.06974192206816843, 0.054206614459845315, 0.10347287632641333, 0.22539601910604057, 0.16327844574608386, 0.09342306238070486, 0.04270072798223756, 0.2874768095904313, 0.02563357091495877, 0.2034294462711318, 0.02987274933636619, 0.02359610220066244, 0.10216992410953574, 0.1259137844546161, 0.035786606447825386, 0.12228979052237832, 0.029300308986852208, 0.16185545547960833, 0.15338625509510417, 0.0850042197724592, 0.0627246058377845, 0.5085961882352468, 0.5026350413742497, 0.5193541785421696, 0.5466502546408544, 0.5433241819412541, 0.5626278734256596, 0.5211334002482264, 0.5332900653132773, 0.5252802929041285, 0.1359101477493827, 0.13093822284901957, 0.1758825307086217, 0.1519400526826985, 0.12248725734353083, 0.1689361443128934, 0.13824807924654192, 0.12956240346838332, 0.1318569079200086, 0.31291168781485523, 0.23922818647793975, 0.21937903028375505, 0.28343732259889043, 0.1950957997759447, 0.1812938684751917, 0.24405280987579103, 0.26121668063843784, 0.46395489605037343, 0.38018122646791486, 0.4666889763019614, 0.4644731305004616, 0.6160195387471588, 0.3819837764956857, 0.4224294292702553, 0.44028481024355337, 0.6033056186038588, 0.5248379455085144, 0.2514179911777181, 0.2846320474946544, 0.27832972227921804, 0.2799006248352319, 0.26906118922182654, 0.2977336880218887, 0.27770123031441984, 0.23569042512021376, 0.22472301690401753, 0.21129827351046215, 0.19638807771441236, 0.21845797976104708, 0.203207477970208, 0.21336123447647237, 0.21486397130113688, 0.1949989454869545, 0.21233667526905464, 0.2155167800543013, 0.2404817891834098, 0.243022617718875, 0.2486781636827694, 0.20583897799685225, 0.2097733969477935, 0.21289221353593513, 0.22075797000003383, 0.8168188551974792, 0.21693522746095562, 0.17243204612110785, 0.1850545519709501, 0.14632308182016873, 0.903960312593666, 0.9048829939971027, 0.19861997552924482, 0.16556041382377384, 0.16851281166582555, 0.9160252682983813, 0.8547994700886983, 0.15398574467037507, 0.719851951669856, 0.5851334288546927, 0.16775890793414838, 0.20709007711935312, 0.7089751927048746, 0.1632319707538904, 0.15364739107346792, 0.17892509661722156, 0.17881273399824926, 0.16535477748341176, 0.1849760267895939, 0.17952694719906048, 0.17709760342949776, 0.20588529696577584, 0.1911941294591445, 0.18953554652129156, 0.09862115100374957, 0.08389178737038361, 0.09031393207371052, 0.07880043643525714, 0.10035303909619964, 0.08442806687667204, 0.07924811866425863, 0.0797791654678478, 0.09445648467257184]}, "mutation_prompt": null}
