{"id": "701ae1a5-8d12-4186-9bf2-3b89a474e206", "solution": "import numpy as np\n\nclass DE_DPAC:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n        return pop[np.argmin(fitness)]", "name": "DE_DPAC", "description": "Differential Evolution with Dynamic Population and Adaptive Crossover (DE-DPAC) adapts population size and crossover rate dynamically to balance exploration and exploitation for black box optimization.", "configspace": "", "generation": 0, "fitness": 0.16258190489951138, "feedback": "The algorithm DE_DPAC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": null, "metadata": {"aucs": [0.26680029096626345, 0.20766172101192293, 0.2488214390474549, 0.30045876287871875, 0.2638926348673797, 0.3173636866390157, 0.24203188204029247, 0.2766359762639288, 0.20841247678122865, 9.999999999998899e-05, 0.007037383259370977, 0.010879376469653423, 0.14273758872771214, 9.999999999998899e-05, 0.026814648856652634, 0.18143191969852546, 0.04224334789249318, 9.999999999998899e-05, 0.11554673247888825, 0.0998969341390441, 0.08651255716534179, 0.10312480211566621, 0.06356060376147521, 0.13566833461975003, 0.1661451024603342, 0.09133025890784197, 0.09669326182453952, 0.07093111143570463, 0.0263778338659304, 0.06081202584071421, 0.09897344218905779, 0.03909131517736619, 0.1720524693432871, 0.0872734097059189, 0.028050024703116683, 0.09915709160969022, 0.9298546561267269, 0.06010854545861932, 0.9299591968507834, 0.943240632185662, 0.3564009876278207, 0.9520038507500382, 0.9269199344850794, 0.9162735971777971, 0.9768968427763114, 0.11692427064797772, 0.06332120027556809, 0.1484509387356937, 0.11622942605750408, 0.07507390304310957, 0.024892878093401127, 0.11095221826509039, 0.04274995211225119, 0.1228839639923639, 0.2166265338660539, 0.11582235784397144, 0.2987088165969237, 0.21388052441680439, 0.32935803591313884, 0.260012104322208, 0.1451559359599427, 0.10879773099955292, 0.21558083281215057, 0.12205243177898517, 0.03798981313339067, 0.21012778099549878, 0.13130166617360683, 0.12454655635593603, 0.026628232010005415, 0.1550348208886022, 0.12684808561569205, 0.08006372952072993, 0.16492711698968343, 0.07308240917667552, 0.12245872092198407, 0.15982523242335223, 0.038174772431801784, 0.14826132253467605, 9.999999999998899e-05, 0.08294917941069213, 0.0996240668637034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09523724258947863, 0.01110800208318452, 0.008920254095866054, 9.999999999998899e-05, 9.999999999998899e-05, 0.03813502881806563, 0.012585665493147102, 0.0670573136821333, 0.05398404639745391, 0.025391886458344004, 0.017361299935718444, 0.029000513590003885, 0.07704024838692436, 0.13184533084197647, 0.17027821114943997, 9.999999999998899e-05, 9.999999999998899e-05, 0.002876420265226609, 0.01905389165917115, 9.999999999998899e-05, 9.999999999998899e-05, 0.01966843025094167, 9.999999999998899e-05, 0.001309758415201201, 9.999999999998899e-05, 0.006501340756607021, 0.08251867475911534, 0.016036572379358627, 0.03176924449726937, 0.10528923405175372, 0.019450082012032355, 0.019325441994610393, 0.020439291728390874, 0.21617972526033014, 0.2307218452724581, 0.41652284964353425, 0.33149307659508565, 0.15797719865831727, 0.2308405042514149, 0.260527719346899, 0.14848078530088482, 0.4073707089714498, 0.07750619886920906, 0.04124291050257267, 0.11464286902383769, 0.08068758302164902, 0.052427226327885545, 0.05345793276666955, 0.10968793970389035, 0.11139962141541526, 0.10091138489079998, 0.12909404580601436, 0.17287167706294226, 0.16113886704837443, 0.17481674161628047, 0.11879770625136188, 0.1378955267206451, 0.23036605402569765, 0.19227659579474088, 0.2466928858029056, 0.2540884204900967, 0.2263781737311198, 0.191164057991849, 0.2573256632766362, 0.235054408373652, 0.15626105705347149, 0.28003477645783714, 0.20955997564354956, 0.231373991871072, 0.19646766403986526, 0.15813664244453596, 0.201648036493293, 0.190374547523529, 0.16149530845011195, 0.26261634758652286, 0.2551510599805469, 0.18229058973633605, 0.20538051651026812, 0.16345814862038865, 0.19578937301674249, 0.18674587308309043, 0.2289072209196764, 0.17759174234939368, 0.16079936469187628, 0.20083137909596693, 0.20536799942610784, 0.20328375302168478, 0.20355563328742643, 0.16360315064051634, 0.1807589580156197, 0.19523717685220754, 0.21089731628892283, 0.20401642043859225, 0.15937300231388385, 0.17386399516854745, 0.2373069063335872, 0.2463101441008837, 0.16422795860806239, 0.16217645919062307, 0.3030044421441237, 0.16603477340814754, 0.1623752493457421, 0.12778582156496265, 0.15598212486322705, 0.1608944706399248, 0.4214539830526771, 0.1550292089795583, 0.3010056735083686, 0.2573676017385058, 0.15390763877154645, 0.14901087962802484, 0.1516876795797949, 0.17225554185648595, 0.20125595672624552, 0.1899209317511822, 0.18316798651240584, 0.21225149638997964, 0.18704941014873644, 0.174007249810342, 0.21442076538481147, 0.19671872988492345, 0.19606793404027245, 0.19458880620693642, 0.07453505078027467, 0.06411914619704617, 0.07133251324202428, 0.08185610973653623, 0.05672370586900455, 0.07970364193715063, 0.06726227572516108, 0.0728049879319036, 0.08809860021581639]}, "mutation_prompt": null}
{"id": "20963bd3-a93c-4d7f-b419-c6e7a6f3e23c", "solution": "import numpy as np\n\nclass DE_DPAC:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n        return pop[np.argmin(fitness)]", "name": "DE_DPAC", "description": "Differential Evolution with Dynamic Population and Adaptive Crossover (DE-DPAC) adapts population size and crossover rate dynamically to balance exploration and exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "701ae1a5-8d12-4186-9bf2-3b89a474e206", "metadata": {"aucs": [0.26680029096626345, 0.20766172101192293, 0.2488214390474549, 0.30045876287871875, 0.2638926348673797, 0.3173636866390157, 0.24203188204029247, 0.2766359762639288, 0.20841247678122865, 9.999999999998899e-05, 0.007037383259370977, 0.010879376469653423, 0.14273758872771214, 9.999999999998899e-05, 0.026814648856652634, 0.18143191969852546, 0.04224334789249318, 9.999999999998899e-05, 0.11554673247888825, 0.0998969341390441, 0.08651255716534179, 0.10312480211566621, 0.06356060376147521, 0.13566833461975003, 0.1661451024603342, 0.09133025890784197, 0.09669326182453952, 0.07093111143570463, 0.0263778338659304, 0.06081202584071421, 0.09897344218905779, 0.03909131517736619, 0.1720524693432871, 0.0872734097059189, 0.028050024703116683, 0.09915709160969022, 0.9298546561267269, 0.06010854545861932, 0.9299591968507834, 0.943240632185662, 0.3564009876278207, 0.9520038507500382, 0.9269199344850794, 0.9162735971777971, 0.9768968427763114, 0.11692427064797772, 0.06332120027556809, 0.1484509387356937, 0.11622942605750408, 0.07507390304310957, 0.024892878093401127, 0.11095221826509039, 0.04274995211225119, 0.1228839639923639, 0.2166265338660539, 0.11582235784397144, 0.2987088165969237, 0.21388052441680439, 0.32935803591313884, 0.260012104322208, 0.1451559359599427, 0.10879773099955292, 0.21558083281215057, 0.12205243177898517, 0.03798981313339067, 0.21012778099549878, 0.13130166617360683, 0.12454655635593603, 0.026628232010005415, 0.1550348208886022, 0.12684808561569205, 0.08006372952072993, 0.16492711698968343, 0.07308240917667552, 0.12245872092198407, 0.15982523242335223, 0.038174772431801784, 0.14826132253467605, 9.999999999998899e-05, 0.08294917941069213, 0.0996240668637034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09523724258947863, 0.01110800208318452, 0.008920254095866054, 9.999999999998899e-05, 9.999999999998899e-05, 0.03813502881806563, 0.012585665493147102, 0.0670573136821333, 0.05398404639745391, 0.025391886458344004, 0.017361299935718444, 0.029000513590003885, 0.07704024838692436, 0.13184533084197647, 0.17027821114943997, 9.999999999998899e-05, 9.999999999998899e-05, 0.002876420265226609, 0.01905389165917115, 9.999999999998899e-05, 9.999999999998899e-05, 0.01966843025094167, 9.999999999998899e-05, 0.001309758415201201, 9.999999999998899e-05, 0.006501340756607021, 0.08251867475911534, 0.016036572379358627, 0.03176924449726937, 0.10528923405175372, 0.019450082012032355, 0.019325441994610393, 0.020439291728390874, 0.21617972526033014, 0.2307218452724581, 0.41652284964353425, 0.33149307659508565, 0.15797719865831727, 0.2308405042514149, 0.260527719346899, 0.14848078530088482, 0.4073707089714498, 0.07750619886920906, 0.04124291050257267, 0.11464286902383769, 0.08068758302164902, 0.052427226327885545, 0.05345793276666955, 0.10968793970389035, 0.11139962141541526, 0.10091138489079998, 0.12909404580601436, 0.17287167706294226, 0.16113886704837443, 0.17481674161628047, 0.11879770625136188, 0.1378955267206451, 0.23036605402569765, 0.19227659579474088, 0.2466928858029056, 0.2540884204900967, 0.2263781737311198, 0.191164057991849, 0.2573256632766362, 0.235054408373652, 0.15626105705347149, 0.28003477645783714, 0.20955997564354956, 0.231373991871072, 0.19646766403986526, 0.15813664244453596, 0.201648036493293, 0.190374547523529, 0.16149530845011195, 0.26261634758652286, 0.2551510599805469, 0.18229058973633605, 0.20538051651026812, 0.16345814862038865, 0.19578937301674249, 0.18674587308309043, 0.2289072209196764, 0.17759174234939368, 0.16079936469187628, 0.20083137909596693, 0.20536799942610784, 0.20328375302168478, 0.20355563328742643, 0.16360315064051634, 0.1807589580156197, 0.19523717685220754, 0.21089731628892283, 0.20401642043859225, 0.15937300231388385, 0.17386399516854745, 0.2373069063335872, 0.2463101441008837, 0.16422795860806239, 0.16217645919062307, 0.3030044421441237, 0.16603477340814754, 0.1623752493457421, 0.12778582156496265, 0.15598212486322705, 0.1608944706399248, 0.4214539830526771, 0.1550292089795583, 0.3010056735083686, 0.2573676017385058, 0.15390763877154645, 0.14901087962802484, 0.1516876795797949, 0.17225554185648595, 0.20125595672624552, 0.1899209317511822, 0.18316798651240584, 0.21225149638997964, 0.18704941014873644, 0.174007249810342, 0.21442076538481147, 0.19671872988492345, 0.19606793404027245, 0.19458880620693642, 0.07453505078027467, 0.06411914619704617, 0.07133251324202428, 0.08185610973653623, 0.05672370586900455, 0.07970364193715063, 0.06726227572516108, 0.0728049879319036, 0.08809860021581639]}, "mutation_prompt": null}
{"id": "9d5c6b68-a9ce-4fed-9d68-ef1035d302c1", "solution": "import numpy as np\n\nclass DE_DPAC:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n        return pop[np.argmin(fitness)]", "name": "DE_DPAC", "description": "Differential Evolution with Dynamic Population and Adaptive Crossover (DE-DPAC) adapts population size and crossover rate dynamically to balance exploration and exploitation for black box optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "701ae1a5-8d12-4186-9bf2-3b89a474e206", "metadata": {"aucs": [0.26680029096626345, 0.20766172101192293, 0.2488214390474549, 0.30045876287871875, 0.2638926348673797, 0.3173636866390157, 0.24203188204029247, 0.2766359762639288, 0.20841247678122865, 9.999999999998899e-05, 0.007037383259370977, 0.010879376469653423, 0.14273758872771214, 9.999999999998899e-05, 0.026814648856652634, 0.18143191969852546, 0.04224334789249318, 9.999999999998899e-05, 0.11554673247888825, 0.0998969341390441, 0.08651255716534179, 0.10312480211566621, 0.06356060376147521, 0.13566833461975003, 0.1661451024603342, 0.09133025890784197, 0.09669326182453952, 0.07093111143570463, 0.0263778338659304, 0.06081202584071421, 0.09897344218905779, 0.03909131517736619, 0.1720524693432871, 0.0872734097059189, 0.028050024703116683, 0.09915709160969022, 0.9298546561267269, 0.06010854545861932, 0.9299591968507834, 0.943240632185662, 0.3564009876278207, 0.9520038507500382, 0.9269199344850794, 0.9162735971777971, 0.9768968427763114, 0.11692427064797772, 0.06332120027556809, 0.1484509387356937, 0.11622942605750408, 0.07507390304310957, 0.024892878093401127, 0.11095221826509039, 0.04274995211225119, 0.1228839639923639, 0.2166265338660539, 0.11582235784397144, 0.2987088165969237, 0.21388052441680439, 0.32935803591313884, 0.260012104322208, 0.1451559359599427, 0.10879773099955292, 0.21558083281215057, 0.12205243177898517, 0.03798981313339067, 0.21012778099549878, 0.13130166617360683, 0.12454655635593603, 0.026628232010005415, 0.1550348208886022, 0.12684808561569205, 0.08006372952072993, 0.16492711698968343, 0.07308240917667552, 0.12245872092198407, 0.15982523242335223, 0.038174772431801784, 0.14826132253467605, 9.999999999998899e-05, 0.08294917941069213, 0.0996240668637034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09523724258947863, 0.01110800208318452, 0.008920254095866054, 9.999999999998899e-05, 9.999999999998899e-05, 0.03813502881806563, 0.012585665493147102, 0.0670573136821333, 0.05398404639745391, 0.025391886458344004, 0.017361299935718444, 0.029000513590003885, 0.07704024838692436, 0.13184533084197647, 0.17027821114943997, 9.999999999998899e-05, 9.999999999998899e-05, 0.002876420265226609, 0.01905389165917115, 9.999999999998899e-05, 9.999999999998899e-05, 0.01966843025094167, 9.999999999998899e-05, 0.001309758415201201, 9.999999999998899e-05, 0.006501340756607021, 0.08251867475911534, 0.016036572379358627, 0.03176924449726937, 0.10528923405175372, 0.019450082012032355, 0.019325441994610393, 0.020439291728390874, 0.21617972526033014, 0.2307218452724581, 0.41652284964353425, 0.33149307659508565, 0.15797719865831727, 0.2308405042514149, 0.260527719346899, 0.14848078530088482, 0.4073707089714498, 0.07750619886920906, 0.04124291050257267, 0.11464286902383769, 0.08068758302164902, 0.052427226327885545, 0.05345793276666955, 0.10968793970389035, 0.11139962141541526, 0.10091138489079998, 0.12909404580601436, 0.17287167706294226, 0.16113886704837443, 0.17481674161628047, 0.11879770625136188, 0.1378955267206451, 0.23036605402569765, 0.19227659579474088, 0.2466928858029056, 0.2540884204900967, 0.2263781737311198, 0.191164057991849, 0.2573256632766362, 0.235054408373652, 0.15626105705347149, 0.28003477645783714, 0.20955997564354956, 0.231373991871072, 0.19646766403986526, 0.15813664244453596, 0.201648036493293, 0.190374547523529, 0.16149530845011195, 0.26261634758652286, 0.2551510599805469, 0.18229058973633605, 0.20538051651026812, 0.16345814862038865, 0.19578937301674249, 0.18674587308309043, 0.2289072209196764, 0.17759174234939368, 0.16079936469187628, 0.20083137909596693, 0.20536799942610784, 0.20328375302168478, 0.20355563328742643, 0.16360315064051634, 0.1807589580156197, 0.19523717685220754, 0.21089731628892283, 0.20401642043859225, 0.15937300231388385, 0.17386399516854745, 0.2373069063335872, 0.2463101441008837, 0.16422795860806239, 0.16217645919062307, 0.3030044421441237, 0.16603477340814754, 0.1623752493457421, 0.12778582156496265, 0.15598212486322705, 0.1608944706399248, 0.4214539830526771, 0.1550292089795583, 0.3010056735083686, 0.2573676017385058, 0.15390763877154645, 0.14901087962802484, 0.1516876795797949, 0.17225554185648595, 0.20125595672624552, 0.1899209317511822, 0.18316798651240584, 0.21225149638997964, 0.18704941014873644, 0.174007249810342, 0.21442076538481147, 0.19671872988492345, 0.19606793404027245, 0.19458880620693642, 0.07453505078027467, 0.06411914619704617, 0.07133251324202428, 0.08185610973653623, 0.05672370586900455, 0.07970364193715063, 0.06726227572516108, 0.0728049879319036, 0.08809860021581639]}, "mutation_prompt": null}
{"id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": 0.25691982252574413, "feedback": "The algorithm DE_DPAC_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "701ae1a5-8d12-4186-9bf2-3b89a474e206", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "009e00fc-3b28-4741-900b-169a780fb0ff", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "cf2b7699-6676-4e53-b71a-6d322422a55e", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Enhanced:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, inject_interval=10):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.inject_interval = inject_interval\n        self.inject_counter = 0\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            if self.inject_counter == self.inject_interval:\n                pop[np.random.randint(self.pop_size)] = np.random.uniform(-5.0, 5.0, self.dim)\n                self.inject_counter = 0\n            \n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            self.inject_counter += 1\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Enhanced", "description": "Enhancing the diversity of the population by introducing a mechanism to inject new random individuals periodically during optimization.", "configspace": "", "generation": 5, "fitness": 0.24908536799977007, "feedback": "The algorithm DE_DPAC_Improved_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.6890430732506365, 0.6494847113573547, 0.6447906501242682, 0.7047431054634248, 0.6342437114987813, 0.6829620727648775, 0.6106900051114521, 0.7130187369321233, 0.6667497915025264, 0.3381481244020915, 0.4062320296710321, 0.4026983577915272, 0.36772483214217166, 0.37085451315371865, 0.37065759735985837, 0.39576428533514063, 0.3544597999685426, 0.4385001078439358, 0.1496482205954679, 0.28768559072801814, 0.16696911366003675, 0.40348809668283714, 0.15707213395397934, 0.15604484264408292, 0.3299763708157344, 0.1540631557937755, 0.32162316473937436, 0.13506790255488266, 0.0850041150409152, 0.12226959261936265, 0.16967613845501106, 0.14486537668734834, 0.14092101372014054, 0.28824375831670523, 0.11406813139521588, 0.13220495846855973, 0.8814526813480609, 0.8978450427948079, 0.8918501510195447, 0.860102865601091, 0.8743797669404394, 0.9333359897109571, 0.8784982179845578, 0.8868344784884797, 0.9470192603071914, 0.16778090124658318, 0.16302904780861627, 0.174893051767959, 0.26233719208313033, 0.1253939415953086, 0.20270775450310907, 0.1489721539173845, 0.14609434106683916, 0.2003347460847188, 0.20214218653972704, 0.16851453676635864, 0.22574483261598977, 0.19595902212872984, 0.8178744495321616, 0.2845082849252172, 0.2699513553355518, 0.197596742700348, 0.17142345903679068, 0.14135680973721787, 0.12954126592187043, 0.16029067006055242, 0.18059218945726152, 0.1301346075867983, 0.1470179968759472, 0.24962099869308207, 0.15951083091933393, 0.16813894046237343, 0.14863792095450878, 0.1428246482183253, 0.11234447872927844, 0.11837624439504724, 0.18879369339049368, 0.12370452449706903, 0.15799218376152602, 0.10281365646997054, 0.11553491352388101, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03972671418931151, 9.999999999998899e-05, 9.999999999998899e-05, 0.03492662792560408, 0.0005576036659398209, 0.03554035417873347, 0.07782980978835985, 0.06774115643003675, 0.15942889791043147, 0.09992854542673701, 0.06660634062631998, 0.07488288244501096, 0.1912906633286846, 0.17199262661990256, 0.10369586458693159, 0.07838291595970803, 0.09819766626258786, 0.1252703335210188, 0.08739850759776824, 0.08564158583758397, 0.06541817407096717, 0.07263849873805284, 0.09199992501666876, 0.056193175394344874, 0.17086205178767344, 0.07754608901495341, 0.11468203222822326, 0.09546110306082267, 0.16357458543441006, 0.11145231797309973, 0.1602646120254534, 0.1701457528033501, 0.08304387613927833, 0.45924961569399303, 0.3987238260594278, 0.46347470257845247, 0.4589992048069279, 0.4711919966854332, 0.5053332538549076, 0.4697605101307176, 0.46442366560903514, 0.4375787831926201, 0.11219503364751438, 0.09571244876240248, 0.07370475507787855, 0.10425489772284802, 0.13389928103755266, 0.11009611624996929, 0.10139283416791878, 0.08149066069161615, 0.11712732948075588, 0.22925141274175065, 0.16763914131484547, 0.18135539985870042, 0.22615919710528865, 0.16635742742723036, 0.21822308995264839, 0.20998438785149498, 0.1712761199156797, 0.15438917842850075, 0.27959377165456456, 0.3267781275224243, 0.3141372098198527, 0.2653889854217274, 0.30656557279373753, 0.3001270236329173, 0.298698173326869, 0.37605989651484184, 0.34559101102204715, 0.1403607247994434, 0.29942477716966887, 0.2255206226177935, 0.17580126669903806, 0.17552467575166752, 0.2735440578417171, 0.19988375138583214, 0.16823838734752172, 0.22902152199800563, 0.20567015427429414, 0.17188675231048833, 0.17756368371176345, 0.19226512558360986, 0.19146912372025404, 0.22186015638692236, 0.19007914747528898, 0.19146216048271303, 0.21902524140213275, 0.22642901004895144, 0.1813188777314193, 0.2245403473499047, 0.21501119739902697, 0.2014234366787938, 0.21222085849851025, 0.19812171772332765, 0.21795610057569204, 0.3292355368273505, 0.1806358431827908, 0.5482475978284163, 0.16700312355369207, 0.16553679006858946, 0.18998432127206977, 0.29057280894407234, 0.6461825567583175, 0.17386047704027774, 0.3122970541356479, 0.43625346043570656, 0.5303117708257156, 0.19215405499332927, 0.24343239126150595, 0.17194368392309112, 0.21929954368289095, 0.3672282183415234, 0.3396140459892133, 0.22107256105824813, 0.1914489684448032, 0.17503976274575328, 0.1872248777085429, 0.16694491061060324, 0.1982866679334836, 0.16549440364601908, 0.19739401159125114, 0.19968014202582451, 0.17038097384529205, 0.07019111024028424, 0.07243836128943637, 0.07601274658312251, 0.08231586846252537, 0.08293699784438069, 0.08265554349870141, 0.08162501408199418, 0.0737670024588788, 0.09564786606104847]}, "mutation_prompt": null}
{"id": "cecf12e5-dbd5-438f-ab01-904049fdeebc", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "73347735-00ce-4d73-ae2b-d6c14c650a9e", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Dynamic population size adaptation based on success rates\n            if np.random.rand() < 0.1:\n                successful_inds = np.where(success_rates > np.mean(success_rates))[0]\n                failed_inds = np.where(success_rates <= np.mean(success_rates))[0]\n                if len(successful_inds) > len(failed_inds):\n                    if self.pop_size < 100:\n                        self.pop_size += 1\n                elif len(successful_inds) < len(failed_inds):\n                    if self.pop_size > 10:\n                        self.pop_size -= 1\n                pop = np.vstack([pop[successful_inds], np.random.uniform(-5.0, 5.0, (self.pop_size - len(successful_inds), self.dim))])\n                fitness = np.array([func(ind) for ind in pop])\n                success_rates = np.zeros(self.pop_size)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Introducing a dynamic population size adaptation mechanism based on the success rates of individuals to enhance exploration and exploitation balance in DE_DPAC optimization.", "configspace": "", "generation": 7, "fitness": 0.16454455507728985, "feedback": "The algorithm DE_DPAC_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.3419716333352034, 0.28529879364247723, 0.30299284408366156, 0.31752780042589324, 0.34227504075668724, 0.28123380894434746, 0.35781888526186467, 0.37242174441164244, 0.3034537293852124, 9.999999999998899e-05, 0.1843178968521353, 0.01853022248689362, 0.090597709862836, 0.019859134394629274, 0.004329997311390388, 0.16961817711730343, 0.17263279469245885, 9.999999999998899e-05, 0.09963740357020201, 0.10978903394623285, 0.0912836299796812, 0.1382121156877214, 0.09833524732154642, 0.11254018889538309, 0.09582574186642179, 0.08831122699064431, 0.09588212893263848, 0.09033776600532151, 0.07805455822680318, 0.11196417412772375, 0.11076546536475362, 0.10353688797430294, 0.10049423119682765, 0.09325907865143002, 0.07302049318352288, 0.0769611075637846, 0.8573562056615049, 0.8884579642990645, 0.8040003795594977, 0.856667673995094, 0.8522748775490447, 0.7846755756189322, 0.7660768022103283, 0.8374543382878786, 0.8112882819324675, 0.10791542109550156, 0.112744916786925, 0.10036676535136924, 0.10579578307028314, 0.16622153336624246, 0.10150709300537786, 0.10109263845156657, 0.08385584248363065, 0.11563740442489834, 0.15495541920158595, 0.15726746114769152, 0.18703755203207983, 0.17144528826699712, 0.20097282215861123, 0.24968538573216237, 0.16982220078640753, 0.1556287824427396, 0.17419275594509998, 0.11022448846104438, 0.039619407251599625, 0.05999874759531809, 0.07012807862158865, 0.05205329087433708, 0.11216408759560215, 0.052540320722750056, 0.06255681639466926, 0.12303218427257856, 0.03957276979612012, 0.06248384893977221, 0.0963063173264247, 0.05842522677383333, 0.11178658377135764, 0.09683513662870336, 0.08000863751553866, 0.032524661388502185, 0.07148214701036326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012460129977538426, 9.999999999998899e-05, 0.08154611630870079, 0.05716782677300414, 0.08483877842213428, 0.07602249979418452, 0.08369017901467835, 0.17187293543643323, 0.11168935172053185, 0.12825856988338424, 0.08760339212152646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027934460181394782, 0.014290721904237413, 0.03265681996551539, 0.07452247286442437, 0.016348943079336653, 0.08714663655279253, 0.020620571440015056, 0.0499071605694793, 0.05586186047927899, 0.28320694991501505, 0.35709256955223134, 0.303803263366192, 0.23120650670494547, 0.27825268717809226, 0.2671131750471404, 0.25632533690427184, 0.2685473515250988, 0.3549847575145094, 0.06596635811607243, 0.08522608320467939, 0.12154166639421471, 0.07080599548649302, 0.08694577104332568, 0.06947493775987279, 0.06998006716743999, 0.07773982255690348, 0.0735090283102392, 0.15857535035995118, 0.12967616433856943, 0.16227691744731843, 0.1667727047917288, 0.14838805545235167, 0.14301687401959717, 0.13278721239204028, 0.15256561704224658, 0.14685008169646407, 0.2166188191912225, 0.19199834481567268, 0.238618609954089, 0.1922977135527345, 0.2271726997679947, 0.22281183652503944, 0.22810890224310576, 0.2120127136587876, 0.223162579526879, 0.12616590459148702, 0.20698738913700332, 0.13842740367089046, 0.1620109769687781, 0.1497915215774941, 0.19293923268764746, 0.16425947629165694, 0.1483515251496803, 0.15031467557782052, 0.17755312757398312, 0.1912123527128453, 0.18161851735327006, 0.19426625897684602, 0.1819475747317768, 0.17106319439264972, 0.20318234359761622, 0.1724603751747087, 0.20171869163554457, 0.17337373224668806, 0.18172313686752162, 0.20143911882177312, 0.17470475307448108, 0.15732836475207623, 0.17717986732926838, 0.18668195277946742, 0.1713293868937502, 0.19120233333662584, 0.16304957489029892, 0.4902356035205466, 0.15688800506480927, 0.19834493228907923, 0.30051901726207597, 0.25238321518128637, 0.18849426095231148, 0.2376095760360858, 0.21761544287967238, 0.2696215729610235, 0.1591380624224339, 0.15662942093178556, 0.16172478114962996, 0.1843728267228174, 0.23446169812436024, 0.15391678988051227, 0.20441891529867184, 0.2416704400986197, 0.19856754884341898, 0.1722753688408497, 0.1825778312766, 0.17939215363892091, 0.17347625297658342, 0.1771181005370801, 0.1904715861735473, 0.1748225282452489, 0.17515213583042932, 0.0727606703044017, 0.06826716515189635, 0.0691834726987336, 0.06626391502096918, 0.05762191037862485, 0.06787333900096071, 0.06450036670131254, 0.06183435107541735, 0.06934843414624314]}, "mutation_prompt": null}
{"id": "d62b14cc-425b-40f1-b547-884dcd7d2dd1", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "15e0aba6-a1b9-4794-9e76-8c8b3af44336", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "958e07d1-56ac-49c4-8959-bb6d1d255234", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "08aa1926-5229-42df-b548-d94f9bfce76b", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "23efe425-0429-4b2d-a9db-c9c1826e1074", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "3522c83e-e2bb-4b83-9829-29eba3a16b00", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "337497d9-1045-4d23-a547-06934ec37c6e", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            scaling_factor = np.random.normal(0.5, 0.1, size=(self.pop_size, self.dim))\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c) * scaling_factor[i], -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity by introducing a novel mutation strategy that incorporates a random scaling factor for better exploration.", "configspace": "", "generation": 14, "fitness": 0.22305566348117195, "feedback": "The algorithm DE_DPAC_Improved_Diversity got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.18.", "error": "", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.41222690487008773, 0.35867712660028206, 0.681145944311548, 0.6652406201388555, 0.5484624561093625, 0.7000178323017769, 0.7388997999492666, 0.5794781823796944, 0.6946273626427493, 0.20976963254070546, 0.47753551735856836, 0.46276373869958054, 0.5138540055505152, 0.12164328729921414, 0.5115042839221398, 0.4298200258736967, 0.20362710073686985, 0.5091799991305421, 0.5288172386368393, 0.4368722798353437, 0.5132261582229158, 0.24237532319555088, 0.09132961448012045, 0.1701959685361304, 0.11760902012249896, 0.16723577390411082, 0.15043990704206878, 0.14245254009221864, 0.17614355698491468, 0.11633344273816326, 0.16962488043566504, 0.11799521563459492, 0.11158433765749265, 0.1481325195516574, 0.13221933405113073, 0.10811545659535626, 0.11633013540785198, 0.13057364456567755, 0.7768922353595209, 0.8925507980261708, 0.852466519109629, 0.860389873557666, 0.23916939703907913, 0.3557023608539934, 0.8869101470464009, 0.14018944436478564, 0.0855855731869295, 0.1877005597261171, 0.09595180020739169, 0.10034180136133508, 0.0988566008167332, 0.18400468505219536, 0.07888184634310969, 0.15152347849001313, 0.20400729208852075, 0.23909335538615029, 0.3264663561402088, 0.2550084228295473, 0.26141104661134473, 0.24940311927530978, 0.20135063369420192, 0.7098205594844477, 0.32540889059739475, 0.1931618022028595, 0.17845744649630957, 0.22461216383552596, 0.14394373240401803, 0.10941466994072147, 0.1288017145101712, 0.16620519278994328, 0.22619734784652923, 0.1592885763933627, 0.11986447074996376, 0.12001398741365887, 0.12038056174189438, 0.05486720573212245, 0.14284036728541927, 0.1567176024321616, 0.13915187752489055, 0.15811991652465007, 0.15192743803842934, 0.027131542669877717, 9.999999999998899e-05, 0.002504878574766334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00562238535771431, 0.01977333647744295, 0.12761805079170174, 0.07156546609735692, 0.07715755062790008, 0.08490091841094094, 0.014685055522700496, 0.01890624478524483, 0.08168185156782315, 0.1021324758243547, 0.08657375007558765, 0.10072709329909069, 0.03097911130033737, 0.11742222420512594, 0.06440007062038333, 0.05445631888925251, 0.05360050723308485, 0.1278285003596049, 0.07140886370789246, 0.1125325588864382, 0.1323334999165019, 0.08807963192447765, 0.09317356813905575, 0.1580047855912653, 0.14250270604439996, 0.10593462737346948, 0.11827736520600007, 0.12017435026119494, 0.10599599774702007, 0.38902005164191855, 0.3108502504993148, 0.43131652457847347, 0.3900246163675851, 0.41090032805882215, 0.48170671082598115, 0.4345303691458072, 0.36192888049005456, 0.47332931958303304, 0.0746465624949535, 0.09214907990982879, 0.11880002981523063, 0.08554751135088501, 0.10528593200738379, 0.13374418620798334, 0.0895165389275353, 0.10731889160184349, 0.08930946181676369, 0.2233917750370401, 0.1736515741919029, 0.15725411100690656, 0.1406115452182949, 0.16035851586050653, 0.22133174381457643, 0.27869345966657577, 0.1720943500622898, 0.18838037194136592, 0.2028669476071595, 0.2510555073876788, 0.3741802765169494, 0.29967588508850573, 0.27475811837449104, 0.26688069139344384, 0.2286077170948293, 0.36151267637088635, 0.3926520348118523, 0.255623705469059, 0.1786008167286658, 0.22359052635565135, 0.20084509588623, 0.20509199149484192, 0.29833196415496854, 0.1835216074960675, 0.21339138944888913, 0.20491180360344596, 0.20251186175816982, 0.21280174727807177, 0.2128784071255576, 0.2255639892399801, 0.2289827435749181, 0.20227266932416754, 0.19804135517012145, 0.20921937031663362, 0.2184767902169188, 0.23053982135426765, 0.24288117445690194, 0.23231083626184013, 0.19131842193610882, 0.19793711447427087, 0.3932354640154032, 0.21384710913636762, 0.21892187820142028, 0.21287692661801738, 0.17063638348831534, 0.18488536500488129, 0.25847357901834034, 0.652186971539165, 0.17108433497465902, 0.35576678155546815, 0.14195480769320779, 0.16716169894786037, 0.1660781240195951, 0.1976319787342291, 0.2694423569745833, 0.16389668577224714, 0.19377219276527646, 0.16035285624236528, 0.1605967890609985, 0.15823016328176653, 0.15979274830750778, 0.35641630532972424, 0.1779842304092002, 0.1979459478448029, 0.183230966357958, 0.1840629524297881, 0.18080008286624694, 0.18975353646989956, 0.19449412273146993, 0.1809211813307533, 0.18791626798681482, 0.07706622375922056, 0.09028220363517281, 0.08792665164489932, 0.07281453117314163, 0.09558841957010156, 0.07871538802512112, 0.08281367173300969, 0.07795310171366987, 0.11726625557147852]}, "mutation_prompt": null}
{"id": "e28accf7-c6c2-4e18-b066-8aead616eee3", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Enhanced:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, K=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.K = K\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            K = np.clip(np.random.normal(self.K, 0.1), 0.1, 0.9)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + K * F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F, CR, and K based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            self.K = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Enhanced", "description": "Enhancing the mutation strategy by incorporating a differential weight factor to adaptively adjust the mutation step size based on individual performance for better convergence.", "configspace": "", "generation": 15, "fitness": 0.1490850727795704, "feedback": "The algorithm DE_DPAC_Improved_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.10.", "error": "", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.37086804447188837, 0.3313410855636262, 0.20710684127838364, 0.28151009852223274, 0.248997274549552, 0.18430399665998498, 0.30096213099591795, 0.29447931341732314, 0.30535576415894683, 9.999999999998899e-05, 0.07897829312187277, 9.999999999998899e-05, 9.999999999998899e-05, 0.030007338135752626, 0.05941361927424749, 9.999999999998899e-05, 0.12850964770076012, 0.07130854331415026, 0.17631825922333833, 0.11554290434849968, 0.10114094291658349, 0.13300981944108858, 0.15442773046195413, 0.10954123871543908, 0.08040987522201071, 0.17096724927087037, 0.14775464345742872, 0.13167095729496892, 0.11992720505476628, 0.09620072105173094, 0.12290133692571747, 0.14318399206474774, 0.10360383380520599, 0.1139653260900948, 0.09370977128788704, 0.13579182566394143, 0.12875784240736243, 0.19725998204427686, 0.16432965356825258, 0.11552928052453659, 0.16287367473982084, 0.283446052936666, 0.12564978592201548, 0.16754824711451055, 0.20805276090769598, 0.19893900753502347, 0.07390612312556644, 0.10959737743565512, 0.07190173045352988, 0.049150901384245826, 0.0908526795090473, 0.10794154193788219, 0.05226446576535948, 0.15192218094988763, 0.20680107341254383, 0.19519870298060182, 0.20083475649649096, 0.18737520189027745, 0.19076441046390724, 0.2578306103634719, 0.1109819982491439, 0.17323090524500218, 0.15827237437714758, 0.0680751129474555, 0.10552741661212128, 0.1648324618776036, 0.11020321723589166, 0.16537031328125373, 0.10000163411219887, 0.05354642442585622, 0.06563006718358733, 0.1964953544402569, 0.12635953819942658, 0.08836200965170304, 0.3322512567571323, 0.07893569353886198, 0.05835440899498934, 0.12218193533534161, 0.05402752442414749, 0.11468573657098169, 0.13738224672917276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006186774240225512, 9.999999999998899e-05, 9.999999999998899e-05, 0.005988589167304048, 9.999999999998899e-05, 9.999999999998899e-05, 0.07744343191219616, 0.042476030191389014, 0.038209456589000323, 0.13781071178148563, 0.043694530012422406, 0.07464369958073436, 0.10967092203578233, 0.05975561915949823, 0.06706622629373127, 9.999999999998899e-05, 0.04416767713353298, 9.999999999998899e-05, 9.999999999998899e-05, 0.06522740506304292, 0.003998702467353232, 0.04719452923154399, 9.999999999998899e-05, 9.999999999998899e-05, 0.011432021034641582, 0.05433972961935707, 0.03168256551652071, 9.999999999998899e-05, 0.060485283338784224, 0.10700213260959757, 9.999999999998899e-05, 0.05191623387975974, 0.0540632415394674, 0.3954233691627447, 0.4305760469410824, 0.287635066474621, 0.28235156881371715, 0.2471303649244263, 0.21573541400359686, 0.24638638238857236, 0.20129042238288197, 0.24341529957466224, 0.11455913165502296, 0.09070882781829026, 0.10549594818565255, 0.11300154374517302, 0.049338859989677575, 0.11879575699999645, 0.10372029103886071, 0.08739407056129422, 0.10837495607104353, 0.1907538343337266, 0.227016986096933, 0.19357089152517426, 0.12512663889491682, 0.18755735431844878, 0.16094772607283903, 0.1661465236758608, 0.23284741380045593, 0.23990727162214676, 0.20224570938861341, 0.21903931683293387, 0.220636758636503, 0.19554726996411886, 0.2642504800693216, 0.18376579877550525, 0.19340054196193313, 0.2563892977864374, 0.27221508639379677, 0.23592534235392804, 0.21553802189016558, 0.1458896883130978, 0.1779214761260106, 0.17522322627211984, 0.23556481282741004, 0.16834699824197452, 0.1555829069546436, 0.1770603642338432, 0.2176113792448967, 0.19149375236084687, 0.20615808153482018, 0.20219166294004232, 0.1760851425830111, 0.2387343270172, 0.2373238333341584, 0.3215418981420819, 0.26473154958132583, 0.18065738051940317, 0.2054918211353488, 0.1811672809069701, 0.19120839659316868, 0.17375782027727893, 0.19260335465086598, 0.21724290727025475, 0.204781924021747, 0.1866765194124047, 0.17508416083708767, 0.5410204994367442, 0.29922019473217, 0.16647954892893535, 0.1793795162677123, 0.2921049437290749, 0.16072907694735428, 0.16781125864785373, 0.16173974016094594, 0.5457847483832032, 0.18543972099899964, 0.1769317632780425, 0.1563712872838916, 0.1741680194759505, 0.45224778785092845, 0.23694935970492859, 0.15206287681963682, 0.16687829247429398, 0.1860167593747215, 0.18869226417243068, 0.17151649165992844, 0.18639612352955992, 0.23405614470436487, 0.19022480820294618, 0.22631176240981754, 0.17958951519545185, 0.1852830180735483, 0.08689493494314648, 0.08225460703924325, 0.08980580209752975, 0.08426993868753763, 0.09579284003054767, 0.07677240171691735, 0.11314434659611339, 0.08184590016651161, 0.08099436629294088]}, "mutation_prompt": null}
{"id": "dcdab9c8-4e4a-447d-a199-4dd64d20c865", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "fa96d442-3977-4a72-a617-6a5b745e8a42", "solution": "import numpy as np\n\nclass DE_DPAC_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            # Update F and CR based on the success rates\n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved", "description": "Implementing DE_DPAC with a mechanism to dynamically update the mutation factor and crossover rate based on individual success rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.708756998139749, 0.681718542714044, 0.6698940113257749, 0.6849134427101703, 0.6661513290787968, 0.7078021171585265, 0.6481679684841253, 0.6805208172369572, 0.6890643581890716, 0.40229364724299954, 0.4069789543485631, 0.41892611959480497, 0.43792447936183054, 0.4196329548945904, 0.4107747017213901, 0.43078653803028466, 0.41849892699479097, 0.4016246527085725, 0.30062222007134864, 0.2964696664795199, 0.45848868599236947, 0.10184628095325043, 0.4310399426705338, 0.11081631676395332, 0.47900666698109384, 0.14133582911949238, 0.15302036727448864, 0.12728102571521327, 0.11449140948045788, 0.111718514526427, 0.133370141398247, 0.1406674278567248, 0.14561007375176216, 0.16441831124824835, 0.14023417430523366, 0.10793232443019529, 0.9104240459632315, 0.908241957888627, 0.8618137913896615, 0.8776979070680273, 0.9134000432643108, 0.9402692985631309, 0.8658126766569523, 0.8884150124594667, 0.9169521482061529, 0.2251677507377725, 0.20449887420992408, 0.23345947692503521, 0.24624327227746245, 0.2110660614873081, 0.15126525672132718, 0.08490360911488748, 0.20346717520165558, 0.1885332146995954, 0.15713253301206642, 0.20029189833610683, 0.22462571049441749, 0.20677920816304618, 0.36529245029597757, 0.259102117970488, 0.2901248119065545, 0.666516087298481, 0.21880739199735677, 0.1405980370647809, 0.16764975787253422, 0.12350905853407568, 0.2070079457410664, 0.1403709558704963, 0.13227624043342545, 0.14075905489484553, 0.1522714483172145, 0.23051158616101453, 0.12413528418067232, 0.1289969795605881, 0.10714014064797373, 0.1287403220502511, 0.13842274116204534, 0.2148741829258729, 0.12371797832937359, 0.13031833441400342, 0.16303413160695468, 9.999999999998899e-05, 0.032176794970925626, 0.08246283927677378, 9.999999999998899e-05, 0.09805675970529659, 9.999999999998899e-05, 0.002129067858948619, 0.051374864870130654, 0.06078423830807422, 0.03555932856650579, 0.0949170274505603, 0.21010451298181454, 0.12819268957818275, 0.10535989181178917, 0.09131350655009451, 0.11512939257895471, 0.17709433860924362, 0.08098995130596742, 0.033900426595236954, 0.09025487483558192, 0.14010247798254694, 0.06704960290442541, 0.14787325205217816, 0.10342285342802238, 0.13633068245431368, 0.09511922731232902, 0.06272167546650875, 0.06878039954678039, 0.09912738012629707, 0.07897364305177379, 0.078285261831465, 0.15792916913681854, 0.11160423081906812, 0.08577532142937039, 0.1621187812829349, 0.09468157730848303, 0.4441828659322943, 0.4512175563001083, 0.5144036993587963, 0.4614637884344651, 0.4862345921593465, 0.44006677708515907, 0.44277022030915414, 0.4524784075983024, 0.4892013339208614, 0.10755685436562812, 0.09456568750627414, 0.19316900735721276, 0.14190485415843324, 0.1251939301371221, 0.11580892815667398, 0.0829366665194673, 0.11850061818909796, 0.12351826618882822, 0.18362723096908995, 0.2080915376026412, 0.15242802457910332, 0.19425690307352173, 0.24670122018321572, 0.12960247057654428, 0.20847115652715287, 0.3437842520452751, 0.20421370039091946, 0.24567200207921547, 0.33755370305155874, 0.33982800031170957, 0.27383124107292234, 0.327071972233121, 0.33935212945320625, 0.2672822775071769, 0.23489483578130088, 0.36649921969328936, 0.24348406968861214, 0.24720351923936446, 0.29468595039807355, 0.312167461261322, 0.20524917531183928, 0.27227056036275676, 0.21267570240494715, 0.2503981930123572, 0.23817052150694573, 0.2057421264117445, 0.1878766797955711, 0.20987318745966477, 0.2074269447241721, 0.19322432115689625, 0.2025205519722848, 0.16748800407584163, 0.1941423370352725, 0.17712943476188525, 0.5493726023581553, 0.2944753009504095, 0.19909560052279185, 0.22376230190543145, 0.2224301239890789, 0.20754614253276793, 0.44512942677809586, 0.1945968387040028, 0.18759608883821455, 0.1812316914477865, 0.24198413996888457, 0.14479174030011632, 0.6490433670239163, 0.16270372162941515, 0.19909191376613344, 0.1644846273239997, 0.18652770307225652, 0.7177617830160286, 0.4474998247517422, 0.16869984071283728, 0.2276126180794642, 0.24461153557666215, 0.1983885286033752, 0.17154416068068967, 0.19462446435263336, 0.2610507875220639, 0.20470355475982727, 0.1897742486437578, 0.19116831787963684, 0.184824028220816, 0.1824454675439049, 0.1982866679334836, 0.1675714942705746, 0.19739401159125114, 0.19968014202582451, 0.19384046564747193, 0.08312199984972501, 0.08699232011241875, 0.0856972943008435, 0.09379272955644102, 0.0732272488109722, 0.07938578845568223, 0.07862525425304734, 0.09176481307911377, 0.07923032981403044]}, "mutation_prompt": null}
{"id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 18, "fitness": 0.2682985004018446, "feedback": "The algorithm DE_DPAC_Improved_Diversity got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "cc6a3905-b28c-4ced-a157-74d9ff0aa809", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "15133df6-5dc8-41d7-9a84-b46f69e570e3", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "6cad41db-2bfe-4d6c-845b-585309b9e081", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "e16caf48-cd71-4639-9f65-b96b66e283d0", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "68ea4f0d-37fb-4bcd-a242-3bc0f05b6142", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "4e530488-d2d7-413d-92b0-a2add83cd33e", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "6362547c-c67f-441f-8c12-670c9310d51d", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.clip(np.random.normal(self.F, self.adapt_rate), 0.1, 0.9) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by introducing a dynamic adaptation mechanism for mutation scaling factor.", "configspace": "", "generation": 24, "fitness": 0.22035278885705173, "feedback": "The algorithm DE_DPAC_Improved_Diversity got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.16.", "error": "", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6925032548124461, 0.645044506854503, 0.5541805234052061, 0.3964758474044988, 0.7450664178081858, 0.742071261016346, 0.4360553424664425, 0.7242278642901728, 0.6954167417361765, 0.46161173701504987, 0.2419604068457697, 0.15153075709963792, 0.5298038606153421, 0.3536104271926762, 0.5455809777880019, 0.014956111596545307, 0.2402524474830654, 0.21331437189569846, 0.26915953592478703, 0.4251494669229211, 0.16464314019676107, 0.5383494311874572, 0.1704900087836797, 0.14628876376836364, 0.44365504842152104, 0.4164662531659923, 0.17520470786425502, 0.321881626930666, 0.13894143094483535, 0.3486488090496911, 0.16974237711943674, 0.10939801219708212, 0.1476082712536414, 0.10491252267134021, 0.2221785064855989, 0.12155222852798253, 0.725794565606151, 0.13731410924141962, 0.7373921507422909, 0.19112494330078322, 0.1822792434884436, 0.8229409896416037, 0.2369604628789349, 0.7080699111270126, 0.14151208040208352, 0.14913516613266498, 0.13633396189307345, 0.039735678932141694, 0.02496801901489798, 0.05525157508092238, 0.14193287063862003, 0.08965195290803873, 0.08821580214899494, 0.17074175813908787, 0.2187003534213129, 0.1790523691654895, 0.34819828930305463, 0.26661528210254715, 0.35568735366076043, 0.2016449813629425, 0.25844229530339846, 0.3347661094854949, 0.6822897619240615, 0.23111746376807618, 0.13889416024003765, 0.2210430881392682, 0.2444527392893182, 0.12498436259814028, 0.14340610431116352, 0.22234424326394353, 0.12406265085419166, 0.1387287668797419, 0.2225840243037519, 0.1358170743866074, 0.2635565134297727, 0.12446593216696022, 0.13867888790341953, 0.15363068143358216, 0.12849630027648073, 0.11928301339974501, 0.12909200527383835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005829629057314767, 9.999999999998899e-05, 0.028637752038481623, 0.03686841398604557, 9.999999999998899e-05, 0.008106172176576498, 0.09183626572380488, 0.09605030508166879, 0.10717275840831497, 0.07106420945899294, 0.08750994479176422, 0.09834984279595393, 0.15457932948717767, 0.10595262992401966, 0.10488603779930727, 0.03306765459200056, 0.1011977383864271, 9.999999999998899e-05, 0.0592395635254821, 0.059601963270606406, 0.11691258279930317, 9.999999999998899e-05, 0.12259271557846019, 0.18263037983955366, 0.1236626334788351, 0.08184704497400253, 0.12382720001466063, 0.05918991801129436, 0.11520089984231596, 0.03947567784692674, 0.08924387676324408, 0.0583545532442038, 0.09713194570166184, 0.41503640041983303, 0.4274020731901058, 0.278964465064346, 0.3196243212646631, 0.36833717926894005, 0.33006425500591763, 0.32879559536375713, 0.3148016061543065, 0.2794141193279984, 0.10389673490559181, 0.09609430880230252, 0.07660502658035961, 0.1460341950595423, 0.15009411857973987, 0.10534731446867884, 0.09765407676168947, 0.09545480586928112, 0.09903070323425267, 0.18800988574245436, 0.1951885240359994, 0.2260839801706449, 0.27306699625646935, 0.21373117745556114, 0.16588907762344074, 0.19584782807014267, 0.1442050658131131, 0.1721919402036678, 0.3034663943292404, 0.22690183739849268, 0.3567464889325541, 0.28940631899968516, 0.2726886761578121, 0.2600228393468229, 0.22372914910731556, 0.2612578753101691, 0.27092808595979845, 0.16930095868570494, 0.27273565051736026, 0.24366280201152768, 0.2387808190028401, 0.2999256625157747, 0.2741946767422905, 0.2214211569646256, 0.18795545518200552, 0.22393672162685463, 0.20047648222247338, 0.21436021761864854, 0.21146087889341947, 0.2109401075658055, 0.2075803618835398, 0.21849773416302265, 0.2192207605975871, 0.1954195882822446, 0.2093609203739708, 0.19621147181626297, 0.35551693109248195, 0.22484302604295492, 0.23379789140173268, 0.23156360755548566, 0.19280931709931048, 0.23430312186472335, 0.20796844466843767, 0.1871759689239505, 0.18108675906811678, 0.6862891356538411, 0.14474874274857574, 0.1680648461696621, 0.1959314145106127, 0.19494866725755322, 0.16410689759259078, 0.183000081767261, 0.1553612801381563, 0.5692624261233552, 0.238809732152363, 0.26296156531215653, 0.20842400904015623, 0.20817348478812747, 0.3793974684623804, 0.15167227705921993, 0.4148933347509838, 0.31648714998878347, 0.19025219571130014, 0.16935317158487762, 0.19503519383305157, 0.2016232119432646, 0.20097693232940916, 0.20121029915702737, 0.1738616728257535, 0.196844842538907, 0.18680303488547356, 0.10583607534744299, 0.08043607092770122, 0.07789263679815195, 0.08947985282757398, 0.08660683776594191, 0.0813909983344342, 0.0992582939579213, 0.08309584333859621, 0.08914909457828057]}, "mutation_prompt": null}
{"id": "70864d54-1cd4-4ca0-bb26-491f4a14f68d", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "412764d4-fb75-4a64-9b97-70aeabd14313", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "804d9042-4ff9-4904-8719-b378653f7ffb", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "96c3d6f3-eb97-48a4-83bf-50262bf6afcb", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "359bbba2-a57b-4be6-b245-bd754f166b06", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "0f7f13c0-02a3-4e9a-b226-71ae47e74413", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "f4d5c284-dee0-468f-a992-e7bf88459020", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "8f49799e-2503-4973-9725-beed8c8c8a85", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "15386b76-0575-472b-ab5d-ba65cdac9e67", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "9ec13b85-cfa2-4682-aa46-b2f1c1d95b67", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "6e39ae7a-11bc-4c1e-b32c-bbad1f311429", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "ed651ab5-b43a-40de-a193-0acc84c18f5b", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "83fbac79-c628-4007-a7cf-78d2e905b704", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "4aabbd92-a233-42b7-8637-5807d127ba25", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "23a411ec-8492-46bb-b8eb-438be5cf863c", "solution": "import numpy as np\n\nclass DE_DPAC_Improved_Diversity:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                mutant = np.clip(a + F * (b - c) + self.alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Improved_Diversity", "description": "Enhancing diversity maintenance by incorporating a mechanism to encourage dispersion among solutions during the mutation process.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6744045552547185, 0.7019462056734533, 0.684722094081107, 0.6500717362915075, 0.6740655947429592, 0.7083467883631589, 0.6881459942500402, 0.715189835982013, 0.6773727194650723, 0.39710317994949285, 0.44333836832306595, 0.4606102238365595, 0.4416188106675901, 0.47561696956987, 0.44814820933782984, 0.41419494037579585, 0.4699156566117697, 0.44615876807846644, 0.37807717939869867, 0.17227955691694175, 0.20945122338839306, 0.1691151183135915, 0.32180379504059453, 0.22065397048093904, 0.15459964575265572, 0.3781198724442154, 0.15306223453857437, 0.13145373615854827, 0.18555749297590574, 0.15838690040379533, 0.14655496969143, 0.14582273882835328, 0.13862080568844526, 0.14085304781788544, 0.2826087876601978, 0.1313181426146679, 0.9193001519730741, 0.8550279982382085, 0.900198285015996, 0.9105399257413649, 0.8573414192592378, 0.9387371644996959, 0.9572730514635117, 0.8450765200391755, 0.9247268109429584, 0.171275082495015, 0.2589600306261738, 0.21451613388325297, 0.2407389127125854, 0.14551146847613983, 0.21384121574486192, 0.18495767736251412, 0.18338140275055215, 0.1930396666698968, 0.5338662010902362, 0.7207807070914409, 0.6454707871150076, 0.3890188488217573, 0.3452733814479507, 0.5791835664743967, 0.1979625717319503, 0.28925444844386616, 0.552419349177601, 0.1582191211968138, 0.1648732335077644, 0.21647955577268907, 0.16152848685781573, 0.23509084902303945, 0.19526292667748935, 0.21492193128261416, 0.19640782048065952, 0.17212377204953222, 0.17920573783567484, 0.13700892212272242, 0.13476897378528918, 0.18162773996961556, 0.14892957887752567, 0.1688876128256538, 0.13564924642591958, 0.1472263060136345, 0.12753754743240153, 0.03835749853446213, 0.0016832774829664832, 0.025694441468976592, 0.02390681216392654, 0.05780290205648286, 0.0006644047382787788, 0.01725918994753861, 0.06714998177593479, 0.036434277371458657, 0.06216216277216391, 0.07702830248031911, 0.10306888863959429, 0.05396339055103494, 0.09960664438689659, 0.06551501314432795, 0.12379931900542795, 0.08469024415833815, 0.09776755380666313, 0.01968302941513067, 0.0882992161672077, 0.06645304385763906, 0.05946635549123602, 0.00048566154173168563, 9.999999999998899e-05, 0.010416215047744815, 0.034649488089122826, 0.11084567324135097, 0.1664375191139037, 0.07430938052650782, 0.14337706806987038, 0.1175305511397633, 0.17516020309115687, 0.1334352761933738, 0.1251348474365337, 0.08357556045483072, 0.10713273795143485, 0.4930953842566894, 0.5088363761483019, 0.4307043757516922, 0.44041810509672297, 0.48483076153342486, 0.46068409119847786, 0.48787429367208324, 0.3090136268458423, 0.4921187274109212, 0.1114158514516419, 0.12975018676704042, 0.12703437375759763, 0.09096145241630771, 0.1439628087775433, 0.10985599694320514, 0.13956430479399073, 0.13304021490883566, 0.10521210197280528, 0.19386927928909914, 0.15909681485266558, 0.34109144728815044, 0.16594697669628455, 0.14413803196860586, 0.17711565367173554, 0.1922572229751448, 0.15999881515683245, 0.17525459014119593, 0.30153987858830456, 0.3065611730748331, 0.3209823611826411, 0.3342865964826883, 0.37149454995869036, 0.355971213170752, 0.3633757229543614, 0.3674119135747729, 0.3568619210879034, 0.2416771988753864, 0.2531541030599387, 0.24469203620781987, 0.2779726110151477, 0.21787262435954413, 0.23546083584306265, 0.3259912234146023, 0.1866891524018628, 0.23715249027681928, 0.20713701444877786, 0.20767690697767516, 0.20801769359000177, 0.23008980825475156, 0.1894704330722381, 0.1875235781774114, 0.20043197803578483, 0.19888135075657687, 0.20200231798892132, 0.2040351625996415, 0.22967221416818984, 0.19817149491285624, 0.22450690141743124, 0.21818479794875834, 0.300231249678913, 0.19731086491305094, 0.2590561098145677, 0.20348973688252792, 0.21517327924863117, 0.17596694017303338, 0.7708978481675408, 0.1677291501742093, 0.19238865273985772, 0.6264899955247052, 0.1695239784307374, 0.37489397857132856, 0.5114890435892652, 0.43606943955341826, 0.16841427131514897, 0.5147215813860655, 0.28520498508628367, 0.1753302998548263, 0.2518539050563374, 0.27794932604420797, 0.365527714866712, 0.15458404745608167, 0.20566089256851183, 0.18405189669780087, 0.19752021201597858, 0.18387793980553135, 0.1992456073864064, 0.19129245182974386, 0.19787231248979387, 0.17900245869788411, 0.1772574300605052, 0.08090637794459832, 0.0905331101158714, 0.07086356537161809, 0.08603375840149075, 0.07825951970504141, 0.0919670070022588, 0.08176994306403484, 0.08166396561933453, 0.08253197416669211]}, "mutation_prompt": null}
{"id": "2ca12420-27a2-49e8-9b4b-d9c18467345e", "solution": "import numpy as np\n\nclass DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Adaptive_Mutation", "description": "Introduce a dynamic mechanism to adapt the mutation strategy based on individual success rates.", "configspace": "", "generation": 40, "fitness": 0.26854893647153605, "feedback": "The algorithm DE_DPAC_Adaptive_Mutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "8e1aed3f-5c12-4906-979c-4d4b79df35d9", "metadata": {"aucs": [0.6300935343697185, 0.7239660784896078, 0.6610104655516607, 0.6427989715579707, 0.6612300676414422, 0.6712135230489547, 0.7006698547200652, 0.7320118174272328, 0.6867696700857132, 0.44463394593013195, 0.4748700381770463, 0.3760065394576264, 0.4109062943184357, 0.4780351414191728, 0.3867952696813406, 0.4400134447239046, 0.4864021307197546, 0.4188685040475242, 0.39448751846803054, 0.157686182518462, 0.1604112069703595, 0.27149673426108634, 0.1348189429388612, 0.24505777817003793, 0.1958317228664901, 0.4190605780396448, 0.25379789271298436, 0.14441569855537872, 0.12342424410566277, 0.14325119642040718, 0.11547425866021555, 0.10825347529368223, 0.1589715856992876, 0.12874657952062574, 0.15401274104433382, 0.16500121992021144, 0.9192921687717315, 0.9076284748356767, 0.8879826744302023, 0.9091726161609884, 0.8396225115975015, 0.9403693868032902, 0.8719983058287373, 0.876212034472137, 0.9632598901906113, 0.16111541048853573, 0.12944036871651665, 0.21379157878505617, 0.2514345542084341, 0.20200081010880622, 0.2721937982111956, 0.22133936252593278, 0.15775161306816987, 0.20441017781477, 0.3047694449556597, 0.3004076340979934, 0.515937910249352, 0.20776329207663902, 0.2610634011382582, 0.6929766767813764, 0.19856106075325874, 0.556417706369762, 0.5328737344557988, 0.14426659271422848, 0.23737302443894592, 0.23348809186163522, 0.1488720754130829, 0.26113816513718646, 0.24403843416433768, 0.21968134857620303, 0.34310617294998214, 0.1595926464127675, 0.18866709203079401, 0.1507937871471613, 0.1163116146041866, 0.15086053307507863, 0.14923046597695977, 0.18692802375606865, 0.12169926204287895, 0.1419225068715041, 0.12259579576067026, 0.017467443952836725, 0.011120402275542784, 0.01797036194408097, 0.001673918157290455, 0.017483867906200268, 9.999999999998899e-05, 0.03694649325632959, 0.029757639064455166, 0.05062091180947059, 0.10695248015334002, 0.06471205201338148, 0.09161805046377047, 0.09505316355584525, 0.08390779098077217, 0.05651801007063273, 0.08556787020747325, 0.1506422452038103, 0.09611472959906442, 0.025799297333392812, 0.08436329546982346, 0.17961257812540665, 0.02439685711943307, 0.09172964322407384, 0.08716340646735388, 0.08407935801258826, 0.06803066479403519, 0.0024259521066902767, 0.11694823394655818, 0.105986702062844, 0.13589552796320858, 0.1340959891557586, 0.12491015300561881, 0.1103434560551968, 0.11844657453327379, 0.14741191004475895, 0.12257958005169312, 0.49252343240099783, 0.44722670769049533, 0.4536151985530432, 0.4943789779700475, 0.45768221385209684, 0.471042235857976, 0.4954071382351133, 0.38808122550069324, 0.5044562976966268, 0.11465089933513317, 0.11182621772833934, 0.10989764120377898, 0.11330002468672806, 0.10405120625060371, 0.1677030258214871, 0.08787136305848164, 0.1379860336345906, 0.10071106233335081, 0.20472845819977037, 0.16194282211085442, 0.14698894275737262, 0.193741497618232, 0.14263752662172668, 0.22870190559305392, 0.1661045337100373, 0.15694598894478917, 0.2529378406735695, 0.25977185011479165, 0.27892921173146623, 0.3166002301796813, 0.32700380069357127, 0.3367130278857675, 0.35299289208580387, 0.3129570825905945, 0.3523436035480658, 0.34015262505370036, 0.23271336898197958, 0.26612374432086294, 0.26405809039645634, 0.23830247969118135, 0.186136109019709, 0.2530632819383042, 0.27252031662143195, 0.25300323856966045, 0.20256874889465448, 0.19882870981330092, 0.20035769545087945, 0.1967967057000246, 0.18547848332750805, 0.2267539097265634, 0.20884732845591691, 0.1983998555436528, 0.1998701881803414, 0.179578916349173, 0.20705656454107757, 0.21235006451002592, 0.21310029876954972, 0.29657030427685205, 0.22238117743136476, 0.4304336617698076, 0.23779382882948152, 0.22354889346752915, 0.219063727170434, 0.20026825872092957, 0.49274449677778287, 0.6668617489170658, 0.6855065575438659, 0.18977373546520837, 0.5274168497397547, 0.17094524396461697, 0.46427003701467506, 0.598005971894772, 0.5921778361392253, 0.168566864261541, 0.33780721922768076, 0.3189174882887904, 0.19616846645552588, 0.1629819807309626, 0.1493498433406788, 0.3218768426833585, 0.2007674919114647, 0.182971377264181, 0.19544425982904967, 0.2044491162925619, 0.18931935263633481, 0.198872592799744, 0.19072451478742947, 0.1802039319354175, 0.19543166554804758, 0.18962217257238623, 0.07982995091293799, 0.08624136833053653, 0.07663049073805539, 0.09386573462324055, 0.07612299857708293, 0.08098084090045288, 0.07874028609859451, 0.07774115591487663, 0.07537341289366883]}, "mutation_prompt": null}
{"id": "e751ff8c-9506-4283-a856-ebf917844a26", "solution": "import numpy as np\n\nclass DE_DPAC_Adaptive_Mutation_Improved:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1, exploration_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n        self.exploration_rate = exploration_rate\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > self.exploration_rate else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Adaptive_Mutation_Improved", "description": "Improve diversity maintenance by introducing a novel mechanism to encourage exploration through adaptive control of mutation and crossover rates.", "configspace": "", "generation": 41, "fitness": 0.26854893647153605, "feedback": "The algorithm DE_DPAC_Adaptive_Mutation_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "2ca12420-27a2-49e8-9b4b-d9c18467345e", "metadata": {"aucs": [0.6300935343697185, 0.7239660784896078, 0.6610104655516607, 0.6427989715579707, 0.6612300676414422, 0.6712135230489547, 0.7006698547200652, 0.7320118174272328, 0.6867696700857132, 0.44463394593013195, 0.4748700381770463, 0.3760065394576264, 0.4109062943184357, 0.4780351414191728, 0.3867952696813406, 0.4400134447239046, 0.4864021307197546, 0.4188685040475242, 0.39448751846803054, 0.157686182518462, 0.1604112069703595, 0.27149673426108634, 0.1348189429388612, 0.24505777817003793, 0.1958317228664901, 0.4190605780396448, 0.25379789271298436, 0.14441569855537872, 0.12342424410566277, 0.14325119642040718, 0.11547425866021555, 0.10825347529368223, 0.1589715856992876, 0.12874657952062574, 0.15401274104433382, 0.16500121992021144, 0.9192921687717315, 0.9076284748356767, 0.8879826744302023, 0.9091726161609884, 0.8396225115975015, 0.9403693868032902, 0.8719983058287373, 0.876212034472137, 0.9632598901906113, 0.16111541048853573, 0.12944036871651665, 0.21379157878505617, 0.2514345542084341, 0.20200081010880622, 0.2721937982111956, 0.22133936252593278, 0.15775161306816987, 0.20441017781477, 0.3047694449556597, 0.3004076340979934, 0.515937910249352, 0.20776329207663902, 0.2610634011382582, 0.6929766767813764, 0.19856106075325874, 0.556417706369762, 0.5328737344557988, 0.14426659271422848, 0.23737302443894592, 0.23348809186163522, 0.1488720754130829, 0.26113816513718646, 0.24403843416433768, 0.21968134857620303, 0.34310617294998214, 0.1595926464127675, 0.18866709203079401, 0.1507937871471613, 0.1163116146041866, 0.15086053307507863, 0.14923046597695977, 0.18692802375606865, 0.12169926204287895, 0.1419225068715041, 0.12259579576067026, 0.017467443952836725, 0.011120402275542784, 0.01797036194408097, 0.001673918157290455, 0.017483867906200268, 9.999999999998899e-05, 0.03694649325632959, 0.029757639064455166, 0.05062091180947059, 0.10695248015334002, 0.06471205201338148, 0.09161805046377047, 0.09505316355584525, 0.08390779098077217, 0.05651801007063273, 0.08556787020747325, 0.1506422452038103, 0.09611472959906442, 0.025799297333392812, 0.08436329546982346, 0.17961257812540665, 0.02439685711943307, 0.09172964322407384, 0.08716340646735388, 0.08407935801258826, 0.06803066479403519, 0.0024259521066902767, 0.11694823394655818, 0.105986702062844, 0.13589552796320858, 0.1340959891557586, 0.12491015300561881, 0.1103434560551968, 0.11844657453327379, 0.14741191004475895, 0.12257958005169312, 0.49252343240099783, 0.44722670769049533, 0.4536151985530432, 0.4943789779700475, 0.45768221385209684, 0.471042235857976, 0.4954071382351133, 0.38808122550069324, 0.5044562976966268, 0.11465089933513317, 0.11182621772833934, 0.10989764120377898, 0.11330002468672806, 0.10405120625060371, 0.1677030258214871, 0.08787136305848164, 0.1379860336345906, 0.10071106233335081, 0.20472845819977037, 0.16194282211085442, 0.14698894275737262, 0.193741497618232, 0.14263752662172668, 0.22870190559305392, 0.1661045337100373, 0.15694598894478917, 0.2529378406735695, 0.25977185011479165, 0.27892921173146623, 0.3166002301796813, 0.32700380069357127, 0.3367130278857675, 0.35299289208580387, 0.3129570825905945, 0.3523436035480658, 0.34015262505370036, 0.23271336898197958, 0.26612374432086294, 0.26405809039645634, 0.23830247969118135, 0.186136109019709, 0.2530632819383042, 0.27252031662143195, 0.25300323856966045, 0.20256874889465448, 0.19882870981330092, 0.20035769545087945, 0.1967967057000246, 0.18547848332750805, 0.2267539097265634, 0.20884732845591691, 0.1983998555436528, 0.1998701881803414, 0.179578916349173, 0.20705656454107757, 0.21235006451002592, 0.21310029876954972, 0.29657030427685205, 0.22238117743136476, 0.4304336617698076, 0.23779382882948152, 0.22354889346752915, 0.219063727170434, 0.20026825872092957, 0.49274449677778287, 0.6668617489170658, 0.6855065575438659, 0.18977373546520837, 0.5274168497397547, 0.17094524396461697, 0.46427003701467506, 0.598005971894772, 0.5921778361392253, 0.168566864261541, 0.33780721922768076, 0.3189174882887904, 0.19616846645552588, 0.1629819807309626, 0.1493498433406788, 0.3218768426833585, 0.2007674919114647, 0.182971377264181, 0.19544425982904967, 0.2044491162925619, 0.18931935263633481, 0.198872592799744, 0.19072451478742947, 0.1802039319354175, 0.19543166554804758, 0.18962217257238623, 0.07982995091293799, 0.08624136833053653, 0.07663049073805539, 0.09386573462324055, 0.07612299857708293, 0.08098084090045288, 0.07874028609859451, 0.07774115591487663, 0.07537341289366883]}, "mutation_prompt": null}
{"id": "5d1b9c47-3d07-485d-a637-97b8117e1190", "solution": "import numpy as np\n\nclass DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Adaptive_Mutation", "description": "Introduce a dynamic mechanism to adapt the mutation strategy based on individual success rates.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ca12420-27a2-49e8-9b4b-d9c18467345e", "metadata": {"aucs": [0.6300935343697185, 0.7239660784896078, 0.6610104655516607, 0.6427989715579707, 0.6612300676414422, 0.6712135230489547, 0.7006698547200652, 0.7320118174272328, 0.6867696700857132, 0.44463394593013195, 0.4748700381770463, 0.3760065394576264, 0.4109062943184357, 0.4780351414191728, 0.3867952696813406, 0.4400134447239046, 0.4864021307197546, 0.4188685040475242, 0.39448751846803054, 0.157686182518462, 0.1604112069703595, 0.27149673426108634, 0.1348189429388612, 0.24505777817003793, 0.1958317228664901, 0.4190605780396448, 0.25379789271298436, 0.14441569855537872, 0.12342424410566277, 0.14325119642040718, 0.11547425866021555, 0.10825347529368223, 0.1589715856992876, 0.12874657952062574, 0.15401274104433382, 0.16500121992021144, 0.9192921687717315, 0.9076284748356767, 0.8879826744302023, 0.9091726161609884, 0.8396225115975015, 0.9403693868032902, 0.8719983058287373, 0.876212034472137, 0.9632598901906113, 0.16111541048853573, 0.12944036871651665, 0.21379157878505617, 0.2514345542084341, 0.20200081010880622, 0.2721937982111956, 0.22133936252593278, 0.15775161306816987, 0.20441017781477, 0.3047694449556597, 0.3004076340979934, 0.515937910249352, 0.20776329207663902, 0.2610634011382582, 0.6929766767813764, 0.19856106075325874, 0.556417706369762, 0.5328737344557988, 0.14426659271422848, 0.23737302443894592, 0.23348809186163522, 0.1488720754130829, 0.26113816513718646, 0.24403843416433768, 0.21968134857620303, 0.34310617294998214, 0.1595926464127675, 0.18866709203079401, 0.1507937871471613, 0.1163116146041866, 0.15086053307507863, 0.14923046597695977, 0.18692802375606865, 0.12169926204287895, 0.1419225068715041, 0.12259579576067026, 0.017467443952836725, 0.011120402275542784, 0.01797036194408097, 0.001673918157290455, 0.017483867906200268, 9.999999999998899e-05, 0.03694649325632959, 0.029757639064455166, 0.05062091180947059, 0.10695248015334002, 0.06471205201338148, 0.09161805046377047, 0.09505316355584525, 0.08390779098077217, 0.05651801007063273, 0.08556787020747325, 0.1506422452038103, 0.09611472959906442, 0.025799297333392812, 0.08436329546982346, 0.17961257812540665, 0.02439685711943307, 0.09172964322407384, 0.08716340646735388, 0.08407935801258826, 0.06803066479403519, 0.0024259521066902767, 0.11694823394655818, 0.105986702062844, 0.13589552796320858, 0.1340959891557586, 0.12491015300561881, 0.1103434560551968, 0.11844657453327379, 0.14741191004475895, 0.12257958005169312, 0.49252343240099783, 0.44722670769049533, 0.4536151985530432, 0.4943789779700475, 0.45768221385209684, 0.471042235857976, 0.4954071382351133, 0.38808122550069324, 0.5044562976966268, 0.11465089933513317, 0.11182621772833934, 0.10989764120377898, 0.11330002468672806, 0.10405120625060371, 0.1677030258214871, 0.08787136305848164, 0.1379860336345906, 0.10071106233335081, 0.20472845819977037, 0.16194282211085442, 0.14698894275737262, 0.193741497618232, 0.14263752662172668, 0.22870190559305392, 0.1661045337100373, 0.15694598894478917, 0.2529378406735695, 0.25977185011479165, 0.27892921173146623, 0.3166002301796813, 0.32700380069357127, 0.3367130278857675, 0.35299289208580387, 0.3129570825905945, 0.3523436035480658, 0.34015262505370036, 0.23271336898197958, 0.26612374432086294, 0.26405809039645634, 0.23830247969118135, 0.186136109019709, 0.2530632819383042, 0.27252031662143195, 0.25300323856966045, 0.20256874889465448, 0.19882870981330092, 0.20035769545087945, 0.1967967057000246, 0.18547848332750805, 0.2267539097265634, 0.20884732845591691, 0.1983998555436528, 0.1998701881803414, 0.179578916349173, 0.20705656454107757, 0.21235006451002592, 0.21310029876954972, 0.29657030427685205, 0.22238117743136476, 0.4304336617698076, 0.23779382882948152, 0.22354889346752915, 0.219063727170434, 0.20026825872092957, 0.49274449677778287, 0.6668617489170658, 0.6855065575438659, 0.18977373546520837, 0.5274168497397547, 0.17094524396461697, 0.46427003701467506, 0.598005971894772, 0.5921778361392253, 0.168566864261541, 0.33780721922768076, 0.3189174882887904, 0.19616846645552588, 0.1629819807309626, 0.1493498433406788, 0.3218768426833585, 0.2007674919114647, 0.182971377264181, 0.19544425982904967, 0.2044491162925619, 0.18931935263633481, 0.198872592799744, 0.19072451478742947, 0.1802039319354175, 0.19543166554804758, 0.18962217257238623, 0.07982995091293799, 0.08624136833053653, 0.07663049073805539, 0.09386573462324055, 0.07612299857708293, 0.08098084090045288, 0.07874028609859451, 0.07774115591487663, 0.07537341289366883]}, "mutation_prompt": null}
{"id": "8e4634c7-48ba-454a-a457-6964bca3e929", "solution": "import numpy as np\n\nclass DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Adaptive_Mutation", "description": "Introduce a dynamic mechanism to adapt the mutation strategy based on individual success rates.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ca12420-27a2-49e8-9b4b-d9c18467345e", "metadata": {"aucs": [0.6300935343697185, 0.7239660784896078, 0.6610104655516607, 0.6427989715579707, 0.6612300676414422, 0.6712135230489547, 0.7006698547200652, 0.7320118174272328, 0.6867696700857132, 0.44463394593013195, 0.4748700381770463, 0.3760065394576264, 0.4109062943184357, 0.4780351414191728, 0.3867952696813406, 0.4400134447239046, 0.4864021307197546, 0.4188685040475242, 0.39448751846803054, 0.157686182518462, 0.1604112069703595, 0.27149673426108634, 0.1348189429388612, 0.24505777817003793, 0.1958317228664901, 0.4190605780396448, 0.25379789271298436, 0.14441569855537872, 0.12342424410566277, 0.14325119642040718, 0.11547425866021555, 0.10825347529368223, 0.1589715856992876, 0.12874657952062574, 0.15401274104433382, 0.16500121992021144, 0.9192921687717315, 0.9076284748356767, 0.8879826744302023, 0.9091726161609884, 0.8396225115975015, 0.9403693868032902, 0.8719983058287373, 0.876212034472137, 0.9632598901906113, 0.16111541048853573, 0.12944036871651665, 0.21379157878505617, 0.2514345542084341, 0.20200081010880622, 0.2721937982111956, 0.22133936252593278, 0.15775161306816987, 0.20441017781477, 0.3047694449556597, 0.3004076340979934, 0.515937910249352, 0.20776329207663902, 0.2610634011382582, 0.6929766767813764, 0.19856106075325874, 0.556417706369762, 0.5328737344557988, 0.14426659271422848, 0.23737302443894592, 0.23348809186163522, 0.1488720754130829, 0.26113816513718646, 0.24403843416433768, 0.21968134857620303, 0.34310617294998214, 0.1595926464127675, 0.18866709203079401, 0.1507937871471613, 0.1163116146041866, 0.15086053307507863, 0.14923046597695977, 0.18692802375606865, 0.12169926204287895, 0.1419225068715041, 0.12259579576067026, 0.017467443952836725, 0.011120402275542784, 0.01797036194408097, 0.001673918157290455, 0.017483867906200268, 9.999999999998899e-05, 0.03694649325632959, 0.029757639064455166, 0.05062091180947059, 0.10695248015334002, 0.06471205201338148, 0.09161805046377047, 0.09505316355584525, 0.08390779098077217, 0.05651801007063273, 0.08556787020747325, 0.1506422452038103, 0.09611472959906442, 0.025799297333392812, 0.08436329546982346, 0.17961257812540665, 0.02439685711943307, 0.09172964322407384, 0.08716340646735388, 0.08407935801258826, 0.06803066479403519, 0.0024259521066902767, 0.11694823394655818, 0.105986702062844, 0.13589552796320858, 0.1340959891557586, 0.12491015300561881, 0.1103434560551968, 0.11844657453327379, 0.14741191004475895, 0.12257958005169312, 0.49252343240099783, 0.44722670769049533, 0.4536151985530432, 0.4943789779700475, 0.45768221385209684, 0.471042235857976, 0.4954071382351133, 0.38808122550069324, 0.5044562976966268, 0.11465089933513317, 0.11182621772833934, 0.10989764120377898, 0.11330002468672806, 0.10405120625060371, 0.1677030258214871, 0.08787136305848164, 0.1379860336345906, 0.10071106233335081, 0.20472845819977037, 0.16194282211085442, 0.14698894275737262, 0.193741497618232, 0.14263752662172668, 0.22870190559305392, 0.1661045337100373, 0.15694598894478917, 0.2529378406735695, 0.25977185011479165, 0.27892921173146623, 0.3166002301796813, 0.32700380069357127, 0.3367130278857675, 0.35299289208580387, 0.3129570825905945, 0.3523436035480658, 0.34015262505370036, 0.23271336898197958, 0.26612374432086294, 0.26405809039645634, 0.23830247969118135, 0.186136109019709, 0.2530632819383042, 0.27252031662143195, 0.25300323856966045, 0.20256874889465448, 0.19882870981330092, 0.20035769545087945, 0.1967967057000246, 0.18547848332750805, 0.2267539097265634, 0.20884732845591691, 0.1983998555436528, 0.1998701881803414, 0.179578916349173, 0.20705656454107757, 0.21235006451002592, 0.21310029876954972, 0.29657030427685205, 0.22238117743136476, 0.4304336617698076, 0.23779382882948152, 0.22354889346752915, 0.219063727170434, 0.20026825872092957, 0.49274449677778287, 0.6668617489170658, 0.6855065575438659, 0.18977373546520837, 0.5274168497397547, 0.17094524396461697, 0.46427003701467506, 0.598005971894772, 0.5921778361392253, 0.168566864261541, 0.33780721922768076, 0.3189174882887904, 0.19616846645552588, 0.1629819807309626, 0.1493498433406788, 0.3218768426833585, 0.2007674919114647, 0.182971377264181, 0.19544425982904967, 0.2044491162925619, 0.18931935263633481, 0.198872592799744, 0.19072451478742947, 0.1802039319354175, 0.19543166554804758, 0.18962217257238623, 0.07982995091293799, 0.08624136833053653, 0.07663049073805539, 0.09386573462324055, 0.07612299857708293, 0.08098084090045288, 0.07874028609859451, 0.07774115591487663, 0.07537341289366883]}, "mutation_prompt": null}
{"id": "a2e67115-1c8c-407b-b486-053ee774c973", "solution": "import numpy as np\n\nclass DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n        self.success_rates = np.zeros(self.pop_size)\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n\n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = self.success_rates[i] / (np.sum(self.success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    self.success_rates[i] += 1\n                else:\n                    self.success_rates[i] -= 1\n            \n            self.success_rates[self.success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(self.success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(self.success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Adaptive_Mutation", "description": "Implement a self-adaptive mechanism to adjust the population size dynamically based on the success rates of individuals.", "configspace": "", "generation": 44, "fitness": 0.26854893647153605, "feedback": "The algorithm DE_DPAC_Adaptive_Mutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "2ca12420-27a2-49e8-9b4b-d9c18467345e", "metadata": {"aucs": [0.6300935343697185, 0.7239660784896078, 0.6610104655516607, 0.6427989715579707, 0.6612300676414422, 0.6712135230489547, 0.7006698547200652, 0.7320118174272328, 0.6867696700857132, 0.44463394593013195, 0.4748700381770463, 0.3760065394576264, 0.4109062943184357, 0.4780351414191728, 0.3867952696813406, 0.4400134447239046, 0.4864021307197546, 0.4188685040475242, 0.39448751846803054, 0.157686182518462, 0.1604112069703595, 0.27149673426108634, 0.1348189429388612, 0.24505777817003793, 0.1958317228664901, 0.4190605780396448, 0.25379789271298436, 0.14441569855537872, 0.12342424410566277, 0.14325119642040718, 0.11547425866021555, 0.10825347529368223, 0.1589715856992876, 0.12874657952062574, 0.15401274104433382, 0.16500121992021144, 0.9192921687717315, 0.9076284748356767, 0.8879826744302023, 0.9091726161609884, 0.8396225115975015, 0.9403693868032902, 0.8719983058287373, 0.876212034472137, 0.9632598901906113, 0.16111541048853573, 0.12944036871651665, 0.21379157878505617, 0.2514345542084341, 0.20200081010880622, 0.2721937982111956, 0.22133936252593278, 0.15775161306816987, 0.20441017781477, 0.3047694449556597, 0.3004076340979934, 0.515937910249352, 0.20776329207663902, 0.2610634011382582, 0.6929766767813764, 0.19856106075325874, 0.556417706369762, 0.5328737344557988, 0.14426659271422848, 0.23737302443894592, 0.23348809186163522, 0.1488720754130829, 0.26113816513718646, 0.24403843416433768, 0.21968134857620303, 0.34310617294998214, 0.1595926464127675, 0.18866709203079401, 0.1507937871471613, 0.1163116146041866, 0.15086053307507863, 0.14923046597695977, 0.18692802375606865, 0.12169926204287895, 0.1419225068715041, 0.12259579576067026, 0.017467443952836725, 0.011120402275542784, 0.01797036194408097, 0.001673918157290455, 0.017483867906200268, 9.999999999998899e-05, 0.03694649325632959, 0.029757639064455166, 0.05062091180947059, 0.10695248015334002, 0.06471205201338148, 0.09161805046377047, 0.09505316355584525, 0.08390779098077217, 0.05651801007063273, 0.08556787020747325, 0.1506422452038103, 0.09611472959906442, 0.025799297333392812, 0.08436329546982346, 0.17961257812540665, 0.02439685711943307, 0.09172964322407384, 0.08716340646735388, 0.08407935801258826, 0.06803066479403519, 0.0024259521066902767, 0.11694823394655818, 0.105986702062844, 0.13589552796320858, 0.1340959891557586, 0.12491015300561881, 0.1103434560551968, 0.11844657453327379, 0.14741191004475895, 0.12257958005169312, 0.49252343240099783, 0.44722670769049533, 0.4536151985530432, 0.4943789779700475, 0.45768221385209684, 0.471042235857976, 0.4954071382351133, 0.38808122550069324, 0.5044562976966268, 0.11465089933513317, 0.11182621772833934, 0.10989764120377898, 0.11330002468672806, 0.10405120625060371, 0.1677030258214871, 0.08787136305848164, 0.1379860336345906, 0.10071106233335081, 0.20472845819977037, 0.16194282211085442, 0.14698894275737262, 0.193741497618232, 0.14263752662172668, 0.22870190559305392, 0.1661045337100373, 0.15694598894478917, 0.2529378406735695, 0.25977185011479165, 0.27892921173146623, 0.3166002301796813, 0.32700380069357127, 0.3367130278857675, 0.35299289208580387, 0.3129570825905945, 0.3523436035480658, 0.34015262505370036, 0.23271336898197958, 0.26612374432086294, 0.26405809039645634, 0.23830247969118135, 0.186136109019709, 0.2530632819383042, 0.27252031662143195, 0.25300323856966045, 0.20256874889465448, 0.19882870981330092, 0.20035769545087945, 0.1967967057000246, 0.18547848332750805, 0.2267539097265634, 0.20884732845591691, 0.1983998555436528, 0.1998701881803414, 0.179578916349173, 0.20705656454107757, 0.21235006451002592, 0.21310029876954972, 0.29657030427685205, 0.22238117743136476, 0.4304336617698076, 0.23779382882948152, 0.22354889346752915, 0.219063727170434, 0.20026825872092957, 0.49274449677778287, 0.6668617489170658, 0.6855065575438659, 0.18977373546520837, 0.5274168497397547, 0.17094524396461697, 0.46427003701467506, 0.598005971894772, 0.5921778361392253, 0.168566864261541, 0.33780721922768076, 0.3189174882887904, 0.19616846645552588, 0.1629819807309626, 0.1493498433406788, 0.3218768426833585, 0.2007674919114647, 0.182971377264181, 0.19544425982904967, 0.2044491162925619, 0.18931935263633481, 0.198872592799744, 0.19072451478742947, 0.1802039319354175, 0.19543166554804758, 0.18962217257238623, 0.07982995091293799, 0.08624136833053653, 0.07663049073805539, 0.09386573462324055, 0.07612299857708293, 0.08098084090045288, 0.07874028609859451, 0.07774115591487663, 0.07537341289366883]}, "mutation_prompt": null}
{"id": "46d7a7c2-c341-42da-8128-34d61811f577", "solution": "import numpy as np\n\nclass DE_DPAC_Adaptive_Mutation_Refined:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n        self.F_lower = 0.1\n        self.F_upper = 0.9\n        self.CR_lower = 0.1\n        self.CR_upper = 1.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(self.F_lower, self.F_upper) if np.random.rand() > 0.1 else self.F\n            CR = np.random.uniform(self.CR_lower, self.CR_upper)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, self.F_lower, self.F_upper)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), self.CR_lower, self.CR_upper)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Adaptive_Mutation_Refined", "description": "Integrate a self-adaptive mechanism for the mutation factor and crossover rate to enhance exploration and exploitation balance.", "configspace": "", "generation": 45, "fitness": 0.2533155805063588, "feedback": "The algorithm DE_DPAC_Adaptive_Mutation_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "2ca12420-27a2-49e8-9b4b-d9c18467345e", "metadata": {"aucs": [0.727849514519056, 0.5672045469654805, 0.7872994552887299, 0.6435203169631621, 0.7217520720911061, 0.7347804683829712, 0.7458403630255066, 0.7437256654353085, 0.7397773182727772, 0.4973326760321831, 0.522264635403435, 0.5027305528374773, 0.5659367913759632, 0.4471321515548152, 0.5300174851939727, 0.4026560752270518, 0.4924533896767995, 0.5466719183714288, 0.1377856598630195, 0.2993405850440407, 0.3161534838161435, 0.17865558096840162, 0.270668773221472, 0.26812611231393957, 0.3050689899874657, 0.2233212744170171, 0.16191875487952878, 0.25047219019246747, 0.1370123474532554, 0.17259034039108734, 0.13838207074220554, 0.15479130840496236, 0.14043241839279508, 0.15149945480824534, 0.12910159320420878, 0.13441853378043944, 0.9007849260375855, 0.9676364225869675, 0.9022802172407456, 0.9175464719492146, 0.9243841608671015, 0.7750651288346433, 0.868303732785443, 0.9192101398758973, 0.8997035839610441, 0.22751271830375985, 0.15910178812687592, 0.16158269885224907, 0.23163027195596342, 0.1957571190781794, 0.12251832542275609, 0.27920444929572086, 0.15509114421070502, 0.15552299987058626, 0.40485120075850745, 0.2467899176297339, 0.46743706955458164, 0.23904980733746817, 0.2541234714206375, 0.5297705147628688, 0.21615493702435173, 0.2952508446202968, 0.6451781121824541, 0.112035683260445, 0.1717464073441528, 0.12931181418113846, 0.14601189526509606, 0.12318156879857456, 0.21113192622242394, 0.16934397181268745, 0.14708685094347385, 0.1494671887652852, 0.1493651751054127, 0.1575681447175692, 0.112005901967408, 0.16133610901711015, 0.15032672055521779, 0.12009678427463966, 0.1533390959203922, 0.16687600413428538, 0.14188077862213244, 0.0021855576536990995, 0.010504917029311556, 0.011842858855270255, 9.999999999998899e-05, 0.0004705984070307867, 0.013391721196242878, 0.00555750620077522, 0.0014979648210603491, 9.999999999998899e-05, 0.055441721487615725, 0.06077438145991687, 0.08633703275099902, 0.05887022479907578, 0.0485659757314868, 0.08211672089108835, 0.07334977444073743, 0.07850057623434636, 0.10871104808616527, 9.999999999998899e-05, 0.019894641942859947, 0.016094832220407973, 9.999999999998899e-05, 0.004575968574247802, 0.00529704315031887, 9.999999999998899e-05, 0.054033501070743895, 0.007666787781874906, 0.10672632297318874, 0.13617757126212326, 0.15066136981238654, 0.14226362114517865, 0.09356458825882019, 0.05797960582549111, 0.11382018133532634, 0.11871024734054003, 0.11777537824821283, 0.5120347112194593, 0.48171558627679834, 0.42706916734869493, 0.48030333785846646, 0.4751418639744487, 0.4611424318645674, 0.4619310490879738, 0.47385873749138785, 0.4512774259615182, 0.10819200027472631, 0.09967669782474131, 0.09019943280329823, 0.10724394174246699, 0.0933580552416734, 0.08779560139352738, 0.08963015947648745, 0.08220801125610888, 0.08736639923467227, 0.1464160344168064, 0.1443836804646773, 0.1470069961387076, 0.1605841775091048, 0.1404263650926647, 0.1604583719810736, 0.15769627867892655, 0.17553236751815948, 0.151615847246779, 0.255320328960023, 0.3234501920651571, 0.35306530006618186, 0.3279838006249888, 0.32260119107850527, 0.2891485141090052, 0.31646285365117355, 0.3658508115595468, 0.24815673392533522, 0.20500629535529458, 0.233847179726147, 0.28033857949636065, 0.22758299177471808, 0.23099715449162872, 0.1980138635601144, 0.23176818187506, 0.30956774981757884, 0.25485725895413136, 0.2143755447733363, 0.21069149692230327, 0.18707836087089502, 0.1933294745476496, 0.2031296651793454, 0.18761839110892242, 0.22234953659743462, 0.20223853480574672, 0.18869339298588006, 0.2057984073048641, 0.2236390086228468, 0.2164537541770556, 0.19536480894746433, 0.2000280196895461, 0.2726973636282496, 0.19444818828052357, 0.1996308870187341, 0.18369730142047014, 0.21815288666243093, 0.22763444175190628, 0.5569400256532129, 0.244087063626654, 0.600916317275278, 0.18807092699455175, 0.2136431450017635, 0.16413525663850526, 0.16261781388027208, 0.315848365439898, 0.20290666591664708, 0.3858246548481168, 0.3729890653326339, 0.31091475561411086, 0.19158596829534813, 0.21670984270252525, 0.2140357301139294, 0.30732697315102275, 0.18593542624805282, 0.17959603681014247, 0.19166960320585158, 0.17863138934117673, 0.18857206882728617, 0.18510196991392835, 0.18827695923029364, 0.2000759361593466, 0.1891617852500983, 0.07784410418949139, 0.09268263172899993, 0.09491006242329514, 0.0791932186156471, 0.07827751922053316, 0.08022952284567275, 0.08214848044388967, 0.07174268477259771, 0.08213093896000101]}, "mutation_prompt": null}
{"id": "9f79ee4a-4b0b-4086-a578-29717145f940", "solution": "import numpy as np\n\nclass DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Adaptive_Mutation", "description": "Introduce a dynamic mechanism to adapt the mutation strategy based on individual success rates.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ca12420-27a2-49e8-9b4b-d9c18467345e", "metadata": {"aucs": [0.6300935343697185, 0.7239660784896078, 0.6610104655516607, 0.6427989715579707, 0.6612300676414422, 0.6712135230489547, 0.7006698547200652, 0.7320118174272328, 0.6867696700857132, 0.44463394593013195, 0.4748700381770463, 0.3760065394576264, 0.4109062943184357, 0.4780351414191728, 0.3867952696813406, 0.4400134447239046, 0.4864021307197546, 0.4188685040475242, 0.39448751846803054, 0.157686182518462, 0.1604112069703595, 0.27149673426108634, 0.1348189429388612, 0.24505777817003793, 0.1958317228664901, 0.4190605780396448, 0.25379789271298436, 0.14441569855537872, 0.12342424410566277, 0.14325119642040718, 0.11547425866021555, 0.10825347529368223, 0.1589715856992876, 0.12874657952062574, 0.15401274104433382, 0.16500121992021144, 0.9192921687717315, 0.9076284748356767, 0.8879826744302023, 0.9091726161609884, 0.8396225115975015, 0.9403693868032902, 0.8719983058287373, 0.876212034472137, 0.9632598901906113, 0.16111541048853573, 0.12944036871651665, 0.21379157878505617, 0.2514345542084341, 0.20200081010880622, 0.2721937982111956, 0.22133936252593278, 0.15775161306816987, 0.20441017781477, 0.3047694449556597, 0.3004076340979934, 0.515937910249352, 0.20776329207663902, 0.2610634011382582, 0.6929766767813764, 0.19856106075325874, 0.556417706369762, 0.5328737344557988, 0.14426659271422848, 0.23737302443894592, 0.23348809186163522, 0.1488720754130829, 0.26113816513718646, 0.24403843416433768, 0.21968134857620303, 0.34310617294998214, 0.1595926464127675, 0.18866709203079401, 0.1507937871471613, 0.1163116146041866, 0.15086053307507863, 0.14923046597695977, 0.18692802375606865, 0.12169926204287895, 0.1419225068715041, 0.12259579576067026, 0.017467443952836725, 0.011120402275542784, 0.01797036194408097, 0.001673918157290455, 0.017483867906200268, 9.999999999998899e-05, 0.03694649325632959, 0.029757639064455166, 0.05062091180947059, 0.10695248015334002, 0.06471205201338148, 0.09161805046377047, 0.09505316355584525, 0.08390779098077217, 0.05651801007063273, 0.08556787020747325, 0.1506422452038103, 0.09611472959906442, 0.025799297333392812, 0.08436329546982346, 0.17961257812540665, 0.02439685711943307, 0.09172964322407384, 0.08716340646735388, 0.08407935801258826, 0.06803066479403519, 0.0024259521066902767, 0.11694823394655818, 0.105986702062844, 0.13589552796320858, 0.1340959891557586, 0.12491015300561881, 0.1103434560551968, 0.11844657453327379, 0.14741191004475895, 0.12257958005169312, 0.49252343240099783, 0.44722670769049533, 0.4536151985530432, 0.4943789779700475, 0.45768221385209684, 0.471042235857976, 0.4954071382351133, 0.38808122550069324, 0.5044562976966268, 0.11465089933513317, 0.11182621772833934, 0.10989764120377898, 0.11330002468672806, 0.10405120625060371, 0.1677030258214871, 0.08787136305848164, 0.1379860336345906, 0.10071106233335081, 0.20472845819977037, 0.16194282211085442, 0.14698894275737262, 0.193741497618232, 0.14263752662172668, 0.22870190559305392, 0.1661045337100373, 0.15694598894478917, 0.2529378406735695, 0.25977185011479165, 0.27892921173146623, 0.3166002301796813, 0.32700380069357127, 0.3367130278857675, 0.35299289208580387, 0.3129570825905945, 0.3523436035480658, 0.34015262505370036, 0.23271336898197958, 0.26612374432086294, 0.26405809039645634, 0.23830247969118135, 0.186136109019709, 0.2530632819383042, 0.27252031662143195, 0.25300323856966045, 0.20256874889465448, 0.19882870981330092, 0.20035769545087945, 0.1967967057000246, 0.18547848332750805, 0.2267539097265634, 0.20884732845591691, 0.1983998555436528, 0.1998701881803414, 0.179578916349173, 0.20705656454107757, 0.21235006451002592, 0.21310029876954972, 0.29657030427685205, 0.22238117743136476, 0.4304336617698076, 0.23779382882948152, 0.22354889346752915, 0.219063727170434, 0.20026825872092957, 0.49274449677778287, 0.6668617489170658, 0.6855065575438659, 0.18977373546520837, 0.5274168497397547, 0.17094524396461697, 0.46427003701467506, 0.598005971894772, 0.5921778361392253, 0.168566864261541, 0.33780721922768076, 0.3189174882887904, 0.19616846645552588, 0.1629819807309626, 0.1493498433406788, 0.3218768426833585, 0.2007674919114647, 0.182971377264181, 0.19544425982904967, 0.2044491162925619, 0.18931935263633481, 0.198872592799744, 0.19072451478742947, 0.1802039319354175, 0.19543166554804758, 0.18962217257238623, 0.07982995091293799, 0.08624136833053653, 0.07663049073805539, 0.09386573462324055, 0.07612299857708293, 0.08098084090045288, 0.07874028609859451, 0.07774115591487663, 0.07537341289366883]}, "mutation_prompt": null}
{"id": "1d6a49b3-011e-444d-a425-f871db2cdd47", "solution": "import numpy as np\n\nclass DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n        \n        return pop[np.argmin(fitness)]", "name": "DE_DPAC_Adaptive_Mutation", "description": "Introduce a dynamic mechanism to adapt the mutation strategy based on individual success rates.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2ca12420-27a2-49e8-9b4b-d9c18467345e", "metadata": {"aucs": [0.6300935343697185, 0.7239660784896078, 0.6610104655516607, 0.6427989715579707, 0.6612300676414422, 0.6712135230489547, 0.7006698547200652, 0.7320118174272328, 0.6867696700857132, 0.44463394593013195, 0.4748700381770463, 0.3760065394576264, 0.4109062943184357, 0.4780351414191728, 0.3867952696813406, 0.4400134447239046, 0.4864021307197546, 0.4188685040475242, 0.39448751846803054, 0.157686182518462, 0.1604112069703595, 0.27149673426108634, 0.1348189429388612, 0.24505777817003793, 0.1958317228664901, 0.4190605780396448, 0.25379789271298436, 0.14441569855537872, 0.12342424410566277, 0.14325119642040718, 0.11547425866021555, 0.10825347529368223, 0.1589715856992876, 0.12874657952062574, 0.15401274104433382, 0.16500121992021144, 0.9192921687717315, 0.9076284748356767, 0.8879826744302023, 0.9091726161609884, 0.8396225115975015, 0.9403693868032902, 0.8719983058287373, 0.876212034472137, 0.9632598901906113, 0.16111541048853573, 0.12944036871651665, 0.21379157878505617, 0.2514345542084341, 0.20200081010880622, 0.2721937982111956, 0.22133936252593278, 0.15775161306816987, 0.20441017781477, 0.3047694449556597, 0.3004076340979934, 0.515937910249352, 0.20776329207663902, 0.2610634011382582, 0.6929766767813764, 0.19856106075325874, 0.556417706369762, 0.5328737344557988, 0.14426659271422848, 0.23737302443894592, 0.23348809186163522, 0.1488720754130829, 0.26113816513718646, 0.24403843416433768, 0.21968134857620303, 0.34310617294998214, 0.1595926464127675, 0.18866709203079401, 0.1507937871471613, 0.1163116146041866, 0.15086053307507863, 0.14923046597695977, 0.18692802375606865, 0.12169926204287895, 0.1419225068715041, 0.12259579576067026, 0.017467443952836725, 0.011120402275542784, 0.01797036194408097, 0.001673918157290455, 0.017483867906200268, 9.999999999998899e-05, 0.03694649325632959, 0.029757639064455166, 0.05062091180947059, 0.10695248015334002, 0.06471205201338148, 0.09161805046377047, 0.09505316355584525, 0.08390779098077217, 0.05651801007063273, 0.08556787020747325, 0.1506422452038103, 0.09611472959906442, 0.025799297333392812, 0.08436329546982346, 0.17961257812540665, 0.02439685711943307, 0.09172964322407384, 0.08716340646735388, 0.08407935801258826, 0.06803066479403519, 0.0024259521066902767, 0.11694823394655818, 0.105986702062844, 0.13589552796320858, 0.1340959891557586, 0.12491015300561881, 0.1103434560551968, 0.11844657453327379, 0.14741191004475895, 0.12257958005169312, 0.49252343240099783, 0.44722670769049533, 0.4536151985530432, 0.4943789779700475, 0.45768221385209684, 0.471042235857976, 0.4954071382351133, 0.38808122550069324, 0.5044562976966268, 0.11465089933513317, 0.11182621772833934, 0.10989764120377898, 0.11330002468672806, 0.10405120625060371, 0.1677030258214871, 0.08787136305848164, 0.1379860336345906, 0.10071106233335081, 0.20472845819977037, 0.16194282211085442, 0.14698894275737262, 0.193741497618232, 0.14263752662172668, 0.22870190559305392, 0.1661045337100373, 0.15694598894478917, 0.2529378406735695, 0.25977185011479165, 0.27892921173146623, 0.3166002301796813, 0.32700380069357127, 0.3367130278857675, 0.35299289208580387, 0.3129570825905945, 0.3523436035480658, 0.34015262505370036, 0.23271336898197958, 0.26612374432086294, 0.26405809039645634, 0.23830247969118135, 0.186136109019709, 0.2530632819383042, 0.27252031662143195, 0.25300323856966045, 0.20256874889465448, 0.19882870981330092, 0.20035769545087945, 0.1967967057000246, 0.18547848332750805, 0.2267539097265634, 0.20884732845591691, 0.1983998555436528, 0.1998701881803414, 0.179578916349173, 0.20705656454107757, 0.21235006451002592, 0.21310029876954972, 0.29657030427685205, 0.22238117743136476, 0.4304336617698076, 0.23779382882948152, 0.22354889346752915, 0.219063727170434, 0.20026825872092957, 0.49274449677778287, 0.6668617489170658, 0.6855065575438659, 0.18977373546520837, 0.5274168497397547, 0.17094524396461697, 0.46427003701467506, 0.598005971894772, 0.5921778361392253, 0.168566864261541, 0.33780721922768076, 0.3189174882887904, 0.19616846645552588, 0.1629819807309626, 0.1493498433406788, 0.3218768426833585, 0.2007674919114647, 0.182971377264181, 0.19544425982904967, 0.2044491162925619, 0.18931935263633481, 0.198872592799744, 0.19072451478742947, 0.1802039319354175, 0.19543166554804758, 0.18962217257238623, 0.07982995091293799, 0.08624136833053653, 0.07663049073805539, 0.09386573462324055, 0.07612299857708293, 0.08098084090045288, 0.07874028609859451, 0.07774115591487663, 0.07537341289366883]}, "mutation_prompt": null}
{"id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 48, "fitness": 0.31045812813845475, "feedback": "The algorithm Enhanced_DE_DPAC_Adaptive_Mutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "2ca12420-27a2-49e8-9b4b-d9c18467345e", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "152b3368-e607-45ea-8f79-83f97e0d876a", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "218a7266-89dd-41b9-9be7-5c2c1cb72ecc", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "a1261f27-f093-4e5c-924a-c0c2ad2284de", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "789ca23a-5b75-414a-902b-788381e3a655", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "e157ee6d-70a8-433d-ad3c-19d0950bdedc", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "9054d707-8b24-41ca-8865-a88500d25a0a", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "0c1aabfc-6737-4952-8bb8-32492a414ae3", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "c66d5658-7982-473e-b6ae-5cdfc6c44fc0", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "79414e8c-cb47-4813-b9be-13c147e89c11", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "79efed6b-2dc6-4de1-86a5-7ddc550cb998", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "e6d6fd09-e49c-4647-97cb-e160dcef0cca", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "7e82e525-00a4-4dc9-a125-f2ddc7f3cfd8", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "868bdf75-8636-440c-aa1a-7dde6ae27cf4", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "105a8582-4a4b-4218-9e46-10ef82cd7362", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "99c8a6f0-eb5f-4ec6-a99c-36ed611baa82", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "3b86ffea-75a7-4037-ad72-401b878b69f4", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "9e49d6a0-8bd6-4a96-b86b-ac08125a1db6", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "5ed4d656-c15f-4819-b3d5-96f590306f24", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            crowding_distances = np.linalg.norm(pop[:, None, :] - pop, axis=2)\n            crowding_distances = np.mean(crowding_distances, axis=1)\n            selected = np.argsort(crowding_distances)[:self.pop_size]\n            \n            pop = pop[selected]\n            fitness = fitness[selected]\n            success_rates = success_rates[selected]\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Enhance the population diversity by introducing a crowding distance-based selection mechanism to maintain a diverse set of solutions.", "configspace": "", "generation": 66, "fitness": 0.23140015911358722, "feedback": "The algorithm Enhanced_DE_DPAC_Adaptive_Mutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.8005282800132052, 0.3286334858955958, 0.20815778724984935, 0.6483114152095667, 0.8796562189016308, 0.2656574022346321, 0.9190374717161228, 0.8505403924624864, 0.13580765558992858, 0.670831638192829, 0.6190901656913613, 0.2648013804767353, 0.7780938125231139, 0.08162486901098798, 0.8664590347908417, 0.6442490002490915, 0.31207177198194813, 0.1324190640078592, 0.07832444454789989, 0.12640647243085246, 0.16015328464531864, 0.16148412449548155, 0.12054303940544142, 0.09557810803488376, 0.1624808776199499, 0.08189910246828169, 0.11721598315457826, 0.042117228566301845, 0.1308321167469808, 0.03990405226328353, 0.12409523818587131, 0.06198761670270525, 0.12244749735746807, 0.05229389095903059, 0.0948694060206915, 0.12477122541109786, 0.9291406326351366, 0.9323153022493258, 0.8663670201954758, 0.9693727346964967, 0.8591414302199873, 0.9520973700759918, 0.9243878621384899, 0.8740938564446405, 0.9563959673816915, 0.22194606013176754, 0.14329435576290694, 0.029778765765621773, 0.21424230135813382, 0.008306827969987718, 0.06324016862350468, 0.09509957091305099, 0.159271448541216, 0.17839174349899622, 0.10027683525177622, 0.08224659834595494, 0.22646137272157363, 0.0667108215001172, 0.19613829474703293, 0.1953339943755693, 0.0813964727223323, 0.15180514917881138, 0.17849768609052696, 0.3087705489475616, 0.17163184518842567, 0.17913456728083876, 0.4320775424323291, 0.13082505738531003, 0.16358274375584458, 0.27018997105755926, 0.1915119886237907, 0.14808335932202532, 0.1365301932803904, 0.30251673676931323, 0.13228729648605586, 0.1288388531178163, 0.09333026724867433, 0.12901042726534961, 0.1232003964812588, 0.13369200416157478, 0.10212943986765044, 0.019702227074462675, 0.07348430864218058, 9.999999999998899e-05, 0.17296664353132785, 0.00034944679999593387, 0.016350478462472506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029230451513191702, 0.0617900735598198, 0.09225341384122787, 0.05519654696029086, 0.07852970338440879, 0.08830490716618822, 0.07650846135913159, 0.12585062102059674, 0.08677778301629568, 0.09757122420745423, 0.07072458654255664, 0.11457734787336016, 0.11050817458290041, 0.029433237280214186, 0.5162033662916801, 0.20464926002676986, 0.11492254565345816, 9.999999999998899e-05, 0.22111134697586543, 0.046363255510456836, 0.013558119322917284, 0.1445819336419385, 0.03715919215181007, 0.30968019398199287, 0.08603878864499093, 0.16488389263589598, 0.06293084690573136, 0.6200667454055512, 0.5600687417584639, 0.38813279439808257, 0.4497285543566083, 0.17653828551776118, 0.4869532372434038, 0.5075690539688582, 0.1528682027068382, 0.4438228175101373, 0.10283154548739837, 0.1287198954570078, 0.11798878874606966, 0.1312322206001374, 0.01337799097374115, 0.11727709013667487, 0.10957178841847015, 0.09134894503219837, 0.14511811759101823, 0.25072617519251317, 0.21955205191209526, 0.23307780307462578, 0.14254832732968792, 0.19899726770541315, 0.3661685630000112, 0.3982856023867587, 0.2022208933107329, 0.5273454745454071, 0.12020695985086272, 0.20422364764815226, 0.1778085842488708, 0.2777599028454407, 0.2629945346685124, 0.4354076610316352, 0.12028165949079228, 0.17377774300845283, 0.17115319329547307, 0.07071816160689448, 0.0725756490998467, 0.2583885478366097, 0.15639075215866194, 0.097309291281926, 0.20064713830389858, 0.0837317855149382, 0.14281366070011536, 0.25698741535882663, 0.11943364695601921, 0.26357052565435934, 0.19869202238531403, 0.2237245770264935, 0.21506939847265383, 0.23869756256958752, 0.13206327862802247, 0.19679460630776935, 0.19499756157069992, 0.19600496052459193, 0.22450744389123478, 0.1919458659723846, 0.2243376630259971, 0.13909372065617676, 0.1783319962212634, 0.19077339594830722, 0.20945092398334542, 0.18095405553286115, 0.15583650938536042, 0.39184459113321835, 0.24196753126832382, 0.17697301823774547, 0.19985006813347128, 0.4963221390445275, 0.12755507494505125, 0.17232485453620028, 0.15868280192002382, 0.3708637195171285, 0.6150090923193208, 0.38676742940512054, 0.11486805273407152, 0.15391378810720213, 0.14786067017950155, 0.3332431204718901, 0.39337825659108316, 0.20790503772059943, 0.19468702227700707, 0.1965049317677532, 0.19326708658663017, 0.17674157801822188, 0.198872592799744, 0.1775202590687126, 0.1814225626827144, 0.1961667266324737, 0.1762807190875466, 0.08077062345638619, 0.07934646224796449, 0.09003343223069826, 0.0815810818552718, 0.11083285950446298, 0.08770017233349447, 0.08005372644764863, 0.10951460124557322, 0.08305489161666024]}, "mutation_prompt": null}
{"id": "73902720-76da-4429-90dd-c95f4f95fbd6", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "87b2d5c1-ce8c-4d6c-8621-fe0adf1ec9d6", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "12199830-707d-4757-8c4d-85f20007f0b1", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "be42bd71-2795-48f7-835e-d296a9a08905", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "a686e978-6073-4ce9-bd1d-5b43b4ac26f3", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "88c70cc5-12d2-4a3e-8723-afed83f6e6c6", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "89bf0dc1-d02b-4cdc-b8a6-35a5fc20f632", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "ab7619e5-4815-495a-9f06-fe9189ddc6b1", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "2ed17ac7-12c4-43e7-8e41-323ca554017b", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "47cab6bc-b906-43a0-b3e9-a64dc18f8657", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "a38b5eba-1b1e-4448-a6f7-a13f17a062bc", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "f27fde2f-a9b5-46a2-a456-3db2d26ff8b4", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "d2c11e46-bcbe-4b2b-a814-768ce6785c35", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "5a957263-77be-4467-ad05-2a2f4cbfd65e", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "0ee8f8ab-eeff-4fe7-9a2d-d5bc7b50c5a6", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "bf7d91a1-f218-4507-b4cb-3789df67d3e7", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "88bba13b-749f-4abe-94c0-31f5b0db462a", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "70aa9b4a-c0fc-4d83-84a6-676f46ceed15", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "c9b1c883-fe02-4357-a1f5-bb3f47e9fbc1", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "d1eaadf0-bec8-4501-b6fb-5f1490e71d8f", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "c12c325c-732a-4c53-9e9f-7f6c0b458d0e", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "4cc70992-9cf0-47df-b63b-a3a84966ec3e", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "9f48f221-9393-47b9-945b-cfbb39ce999b", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "45ada9d9-14ed-4e91-8471-ebff550d8e44", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "7d5587c2-fbc9-4da1-9985-5938518da389", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "52cbc9a4-b41a-4305-88ce-b72f993463d1", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "5a756ad2-30fb-4f59-8a5e-d9c3b2840f2b", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "d8e2226e-6322-456f-a65e-18de8445e1ac", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "f397d87b-d777-4b15-b8cb-90e87f7ec5ae", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "980c5fec-33c3-42de-a04e-7cc41cecabcb", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "eb37fe94-77bc-4057-a9ca-91186ba12501", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "edf592e0-64fd-4b40-aacf-de524f85f410", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
{"id": "2b354ed6-9014-4c30-9bca-b54353fcd91c", "solution": "import numpy as np\n\nclass Enhanced_DE_DPAC_Adaptive_Mutation:\n    def __init__(self, budget, dim, pop_size=50, F=0.5, CR=0.9, alpha=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.F = F\n        self.CR = CR\n        self.alpha = alpha\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        success_rates = np.zeros(self.pop_size)\n        \n        for _ in range(self.budget - self.pop_size):\n            F = np.random.uniform(0, 1) if np.random.rand() > 0.1 else self.F\n            CR = np.random.normal(self.CR, 0.1)\n            idx = np.arange(self.pop_size)\n            np.random.shuffle(idx)\n            for i, x in enumerate(pop):\n                a, b, c = pop[np.random.choice(idx[:3], 3, replace=False)]\n                div_factor = np.mean(np.abs(pop - x), axis=0)\n                success_rate = success_rates[i] / (np.sum(success_rates) + 1e-6)\n                adaptive_alpha = self.alpha + success_rate * 0.1\n                mutant = np.clip(a + F * (b - c) + adaptive_alpha * div_factor * np.random.randn(self.dim), -5.0, 5.0)\n                crossover = np.random.rand(self.dim) < CR\n                trial = np.where(crossover, mutant, x)\n                f_trial = func(trial)\n                if f_trial < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = f_trial\n                    success_rates[i] += 1\n                else:\n                    success_rates[i] -= 1\n            \n            success_rates[success_rates < 0] = 0.1\n            self.F = np.clip(np.mean(success_rates) / 10, 0.1, 0.9)\n            self.CR = np.clip((1 - np.mean(success_rates)) + np.random.normal(0, 0.1), 0.1, 1.0)\n            \n            # Updated code begins here\n            if np.mean(success_rates) > self.pop_size:\n                self.pop_size = min(int(np.mean(success_rates)), 100)\n                pop = np.vstack([pop, np.random.uniform(-5.0, 5.0, (self.pop_size - len(pop), self.dim))])\n                fitness = np.concatenate((fitness, np.array([func(ind) for ind in pop[self.pop_size:]])))\n            elif np.mean(success_rates) < self.pop_size // 2 and self.pop_size > 10:\n                self.pop_size = max(self.pop_size // 2, 10)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            # Updated code ends here\n            \n        return pop[np.argmin(fitness)]", "name": "Enhanced_DE_DPAC_Adaptive_Mutation", "description": "Introduce a novel self-adaptive mechanism to adjust population size based on individual success rates.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1435dfca-4bbf-445c-98a9-b207b3a01ebc", "metadata": {"aucs": [0.9336200115351203, 0.8527473918454366, 0.6099799244494588, 0.9304085188441884, 0.9245160180681452, 0.5901800247797098, 0.9163731009203645, 0.909682020677003, 0.9176477722929874, 0.8523025946236861, 0.8962094792610732, 0.8603463151932268, 0.8673421869316063, 0.8552622000209835, 0.04439980215708128, 0.8576538112982109, 0.8473475082086737, 0.8234259332535053, 0.8087232712006747, 0.822536064535665, 0.1329619599342159, 0.7967160087530265, 0.7818129258855868, 0.1603527577862346, 0.1896446048353394, 0.18582700391873264, 0.12514541699992443, 0.18372483531868944, 0.12351854458461442, 0.16125129778919067, 0.8117742639699973, 0.13449339370757318, 0.13208950249604645, 0.18677683985413518, 0.5134090142123289, 0.10495656031416567, 0.18058719440153714, 0.9661952688014099, 0.952998761564731, 0.9485275177313612, 0.9574334236283706, 0.9602115629914961, 0.962435230754109, 0.9651689460931665, 0.9437777175589328, 0.3588362128575392, 0.35945840224683756, 0.17979948177850025, 0.11790824398858257, 0.18708588658801517, 0.36237603342460956, 0.18206225688586353, 0.11821702735263262, 0.18829743350437567, 0.2958573852532309, 0.17397530160675667, 0.1686224543759618, 0.3769621178694803, 0.8133843245351637, 0.15413369978421687, 0.8407172025349869, 0.3613176456428612, 0.7234897613306817, 0.5315143422569535, 0.1287246928428698, 0.31746330358724784, 0.12565975419321462, 0.13100707963807823, 0.1794783234933206, 0.1997071111626727, 0.3293135935209993, 0.2089965643902676, 0.22661913971697756, 0.10435416182673085, 0.11900915846748816, 0.14673583639405186, 0.13577113222682768, 0.1251538848826771, 0.13631903049701655, 0.1295273070579691, 0.19593164287203213, 0.0009140994020079285, 9.999999999998899e-05, 0.040337653525654216, 9.999999999998899e-05, 0.006437722790404554, 9.999999999998899e-05, 0.031724656180267985, 0.03273530036861361, 0.025446207188365544, 0.05308144789203906, 0.07291290732179445, 0.06943504491905661, 0.06856136706868365, 0.07994737424885934, 0.045444907657972156, 0.07558885613561872, 0.10429989258440453, 0.04638745711572412, 0.05248356524196718, 0.048081881019029216, 0.0988815492325511, 0.07794230485305687, 0.14888239071646836, 0.2032134274383417, 0.15437085996664646, 0.19338307561037582, 0.09500388020205519, 0.2062615086305607, 0.155366300445834, 0.1125027709341826, 0.20416275503196046, 0.20634650925889386, 0.20541110661824002, 0.1299001551944995, 0.060018924850933186, 0.13403592857153868, 0.5721154512005544, 0.5666050411200559, 0.47183622935075675, 0.5580987756453544, 0.5539788327894655, 0.42709268639130493, 0.6350104677910223, 0.6437845500608059, 0.3473439340406411, 0.12578815977302182, 0.12360466369886414, 0.11238703669569328, 0.11349862519900489, 0.12237892477346668, 0.12033273175150194, 0.1224870957916433, 0.16960153414475243, 0.15391983232544593, 0.2190788470135253, 0.17030517801253664, 0.24735641625852256, 0.18171137918706726, 0.24991335058186948, 0.3764716844095706, 0.176609857421967, 0.16562649524320328, 0.1861497193037016, 0.2751387538455202, 0.4747912432076228, 0.3698688363187802, 0.33082305639068377, 0.4678204184382819, 0.3013274764145575, 0.390700429161696, 0.39344625705736347, 0.2824387737664331, 0.3294776534277325, 0.2912346178413343, 0.23760464043948115, 0.32458610106187435, 0.29850164360480613, 0.19150469729890007, 0.15826909304783765, 0.21828167458846215, 0.31118718916716603, 0.21278393981093846, 0.24441797293581757, 0.2094518981530309, 0.1961587888671017, 0.19642667925545054, 0.22242314167915078, 0.2022571287013285, 0.19056888974254194, 0.22154524955280908, 0.20371308022277623, 0.5222727839700159, 0.24558110525337462, 0.21156807739592365, 0.661587333654167, 0.19121188419814905, 0.24840868163162855, 0.20347398578279385, 0.22509715333290492, 0.5276140783809615, 0.165042842106231, 0.18943757736653843, 0.6750040539560733, 0.19058462144409372, 0.1679913275604522, 0.16885792742305294, 0.44721436269585124, 0.1764767419361024, 0.2822599040841296, 0.186930660353556, 0.22614474164745502, 0.1531744772759126, 0.16478967490121033, 0.1661209871270397, 0.3966753636231496, 0.6358159103264154, 0.10395327581008751, 0.19338794609719245, 0.19045645738324524, 0.20206239905701184, 0.19975655790208224, 0.20054899002490278, 0.18470383756636166, 0.18272371421842237, 0.18838095148212974, 0.1783938836890251, 0.09196132603190121, 0.0854290850339312, 0.08498536360505005, 0.07568764663746874, 0.09874327567763141, 0.08930850418440639, 0.09309831530843637, 0.08203239163876608, 0.08808345237017745]}, "mutation_prompt": null}
