{"id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, self.F)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "A novel Differential Evolution algorithm that efficiently explores the search space by employing mutation, crossover, and selection mechanisms to optimize black box functions within a limited budget. ", "configspace": "", "generation": 0, "fitness": 0.45713252098780877, "feedback": "The algorithm DifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8349546852665155, 0.8507638204035417, 0.8434871040416648, 0.8562819294343111, 0.8614198388731305, 0.8740248471880535, 0.8740116871245234, 0.8806431371206199, 0.8480313560862734, 0.7553598859688332, 0.7282637065125124, 0.7559783396640514, 0.7684676239970732, 0.7564138270844356, 0.7713741283859601, 0.7660482070179488, 0.7673739401981771, 0.7485151509346673, 0.13878272948260129, 0.1379335751848827, 0.12930579241881424, 0.2608422165110289, 0.14797643797570814, 0.1425125768266322, 0.20275043463732512, 0.12824329320878092, 0.1977658419683025, 0.13606120701517033, 0.12092815847108196, 0.13238127241594944, 0.13996454473942377, 0.11127069928956967, 0.1757472394387236, 0.15421922059777027, 0.16579981581908265, 0.15292863227285758, 0.9521913618694621, 0.967172119684859, 0.9827647254421162, 0.966106225639864, 0.9607601338546095, 0.989173548431087, 0.9813406101868287, 0.9718010691469557, 0.9811648981558609, 0.6748769727113944, 0.5974287713008599, 0.6317572294836715, 0.6326837313104688, 0.6138183878954967, 0.6222755721258553, 0.6401474743489841, 0.6522493939455816, 0.6847150386211376, 0.7856279049221725, 0.8196217600224615, 0.7610129614358351, 0.8651635436731646, 0.8041061157683933, 0.8339462124976684, 0.7681781884524421, 0.8104337402996383, 0.7665561931933617, 0.525646205729454, 0.47087610747066844, 0.5953388909270692, 0.5513539601420132, 0.46615150402641525, 0.5734618774306435, 0.6104889963765571, 0.5810561552387564, 0.5743295021935361, 0.5990754127268068, 0.592627221955105, 0.6328176070913385, 0.616805170666972, 0.6585801442900879, 0.6169004908610916, 0.5205141196020269, 0.5240581240700546, 0.5620098556940168, 0.5900557469237871, 0.559427531185464, 0.456868090345417, 0.5525408852765648, 0.525973074563677, 0.550348191677503, 0.5654782031800674, 0.4988211381658967, 0.5710683466465036, 0.6231124639480723, 0.6443586526695781, 0.6400621545716598, 0.6565268034077076, 0.6458566825301113, 0.6881785888928116, 0.6827371642187254, 0.6859088544933956, 0.6523506118389761, 0.11355545837657577, 0.3686071590382498, 0.12939854259566508, 0.21632113814195908, 0.38946471733674903, 0.34010354479171045, 0.23817875412239864, 0.2895287636670294, 0.2616204412383625, 0.43327072540244416, 0.3842249302723306, 0.3957823178839457, 0.41283272976791197, 0.46289762475061225, 0.42782472267657146, 0.44719158176896334, 0.4242994929851902, 0.3994052561007292, 0.7837480575550235, 0.7623875896033765, 0.7657956614982752, 0.7636795659731984, 0.7963380812905269, 0.7630184053031139, 0.7723741361322976, 0.7529221012959414, 0.7959265833911006, 0.10672480852337629, 0.0982158665681574, 0.11892374062444755, 0.12345596399580883, 0.12062454768965158, 0.10043249922194286, 0.0838276833770476, 0.10277503856553627, 0.09650434351034887, 0.5324740638039959, 0.14580086716380924, 0.18397146748079274, 0.16652520761701162, 0.1495252229092714, 0.1271639917399009, 0.24845908868162347, 0.14452756483549856, 0.22434588108453601, 0.48473053034718105, 0.4374714963346821, 0.44660044750780636, 0.43060834754232524, 0.40770296628604197, 0.4610500334719676, 0.42815394838913223, 0.4750611756956227, 0.45936094971598296, 0.38168762204373163, 0.3210586512703202, 0.3371550380120829, 0.3442435013226598, 0.3352306169507162, 0.358810138202453, 0.33192155031474013, 0.36045896585647874, 0.30655549669286475, 0.18825088324178596, 0.19278848999940956, 0.20135093635909684, 0.17601277577900853, 0.17974449713807694, 0.17502723799756004, 0.18494108683810795, 0.19555638888768345, 0.18026080948984746, 0.2842891970797946, 0.29355935371545616, 0.46314914863134804, 0.20538461416965514, 0.5507548928886206, 0.21291554056567752, 0.5587010613270962, 0.34708885677817425, 0.22484104959802576, 0.8784227796522903, 0.8149867349222035, 0.8510702451518878, 0.8569631716079094, 0.1941928025826245, 0.1952875553968334, 0.18654815925588542, 0.18658190406539366, 0.1876624388551995, 0.7928770563185814, 0.8137927206056339, 0.2068877228883682, 0.20561153821216804, 0.8230938549807041, 0.7249014450593365, 0.20840370599190505, 0.1266862405644048, 0.1550753432306039, 0.18303886274926195, 0.19464471639124103, 0.1763981438307345, 0.19602767498993767, 0.17972987111709604, 0.1917181448040488, 0.16723986063367735, 0.18096080451925578, 0.17642947027687805, 0.07629905376745405, 0.0787395905663536, 0.07955357311319822, 0.08397181588781044, 0.07519447010721236, 0.07703095075976163, 0.06381090717938875, 0.09221622799431606, 0.0754554295181602]}, "mutation_prompt": null}
{"id": "7da650e9-d0ee-4cf0-b300-1a45fe407fcc", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution(DifferentialEvolution):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, scaling_factor=0.5):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.scaling_factor = scaling_factor\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c) * self.scaling_factor, -5, 5)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, self.F)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedDifferentialEvolution", "description": "Enhancing the mutation strategy to incorporate a dynamic scaling factor for adaptive search behavior.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {}, "mutation_prompt": null}
{"id": "de824db3-5239-4181-b9fd-1709333dd901", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution(DifferentialEvolution):\n    def __init__(self, budget, dim, pop_size=20):\n        super().__init__(budget, dim, pop_size=pop_size)\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            diversity = np.std(population, axis=0)\n\n            F = np.clip(0.5 + 0.3 * np.mean(diversity), 0, 1)\n            CR = np.clip(0.5 + 0.3 * np.mean(diversity), 0, 1)\n\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, F)\n                trial = crossover(target, mutant, CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution algorithm by dynamically adjusting mutation and crossover rates based on population diversity.", "configspace": "", "generation": 2, "fitness": 0.3496620817145838, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {"aucs": [0.8840812999865849, 0.8930185749850968, 0.8970822505887663, 0.887019676661048, 0.9051288620499947, 0.9049946166628574, 0.8989558571474284, 0.8727828279991429, 0.8863900377697104, 0.8139198628361943, 0.7877557143735856, 0.8200284952235097, 0.7908238992063661, 0.06596492904618467, 0.7800007802608637, 0.8087601627074467, 0.7787966640791997, 0.8104437786553288, 0.4630598856693593, 0.49705799556657704, 0.14985961054311703, 0.4312359797250499, 0.41067587499916913, 0.3399894015154956, 0.386245497013157, 0.5081650043457324, 0.6477700876249368, 0.15428248786776821, 0.622293932478669, 0.1507398330499451, 0.17066812593802894, 0.476437231002918, 0.5797569245824243, 0.5403198836355819, 0.14845273150607896, 0.532252988143684, 0.9553976032529576, 0.9811845354866188, 0.9319250230571169, 0.947351152676094, 0.9835014209827949, 0.9702639357705655, 0.9647063272602637, 0.9736902117790242, 0.9781932223588582, 0.6088310491318725, 0.6258249774443956, 0.6247196511036738, 0.5197651272949422, 0.6379633165691379, 0.6365458524369929, 0.41835764571887946, 0.6054068259265599, 0.3152600887809214, 0.6353330594534567, 0.7267226536798006, 0.6572124382675105, 0.21086225293541794, 0.6845659043967496, 0.7221993873465213, 0.7839312077770341, 0.7438170550355608, 0.7082016082748284, 0.19321395801836738, 0.16800288030144017, 0.15581962856732012, 0.26354849128549285, 0.2228926407007854, 0.26283437345382443, 0.2283852594383602, 0.17671798877995148, 0.1877378533214964, 0.010025858354138495, 0.010011630377409153, 0.01623264947978531, 0.14766104907408084, 0.1707066355390474, 0.19247124481652367, 0.2230207142558236, 0.16416550748498537, 0.18471168696354268, 0.16042682330282243, 0.15171949832190457, 0.19520021285459677, 9.999999999998899e-05, 9.999999999998899e-05, 0.05690277627662632, 0.16952174935607, 0.17650940265790338, 9.999999999998899e-05, 0.2522846263167139, 0.1795615186302172, 0.32440731308752147, 0.2813745772879771, 0.3161468206388408, 0.2679033866445819, 0.36317503814814933, 0.09677122848235009, 0.2982750429886225, 0.04672096959495087, 0.054601714459745154, 0.034102844869191906, 0.08869556934995493, 0.06376431040313768, 0.07479883506789009, 0.11131201530993351, 0.09814336578203442, 0.13734991729736978, 0.1640339545439672, 0.1873431532590073, 0.20163083516098745, 0.22834616552094966, 0.2125656697686552, 0.2217249777205772, 0.18420490146614155, 0.17171538229765282, 0.1615664299598386, 0.5823586800459002, 0.5303014697679005, 0.5634202827477708, 0.5648967583952735, 0.5863508682361988, 0.5560205342940606, 0.5719587171405831, 0.5350322608043749, 0.5769314697577994, 0.09814114289894282, 0.11048710781053428, 0.09977742911548337, 0.1023189977421205, 0.10879444809630823, 0.09147572091725831, 0.11523551212331407, 0.07823243476139563, 0.10522311274585172, 0.11369263287202958, 0.10686952474508471, 0.12368512853067881, 0.12117263915979637, 0.11384767328037437, 0.09777520858359601, 0.1077007474854429, 0.13050748411589685, 0.2000344121755726, 0.3756384316529229, 0.4700671582809385, 0.36506004058845876, 0.3479289255123629, 0.40926246285924994, 0.3743612762031673, 0.5016622913399702, 0.5421746673788072, 0.5097947143897406, 0.23967738129952143, 0.2599029590613775, 0.24235671963043937, 0.2672086029656442, 0.26041930294410576, 0.24594265320152964, 0.32752355896735064, 0.3124564916749083, 0.32208839037639714, 0.19302485867021713, 0.15777432880491105, 0.20653933547160197, 0.1766062976327597, 0.20069685953836258, 0.15208949480840583, 0.24055240793889132, 0.1706426425605232, 0.15553176159833237, 0.1842679570403234, 0.34657930017414706, 0.3955143781381606, 0.5155640600315121, 0.37499661222922576, 0.22441849727648888, 0.18823143533957054, 0.41755526654198016, 0.23852685859952338, 0.1626405637923357, 0.13866175127618774, 0.11014913599699339, 0.16459035569776226, 0.15637731095599405, 0.16206137398662745, 0.8208880306035102, 0.19881809170807185, 0.5185846111710363, 0.6014181129395608, 0.2341894813903297, 0.2629381912821761, 0.16039061489437356, 0.2836408262921214, 0.11091236864458665, 0.7930938129568784, 0.19913037453791582, 0.15465836184170567, 0.19657506304360584, 0.15284045749218111, 0.17474594695939705, 0.17793095571113715, 0.1750010729374193, 0.203461377687569, 0.18504362011542785, 0.14905810799509378, 0.17914906991010615, 0.07303544226131087, 0.10104397274823818, 0.07590910859582067, 0.08589367236983692, 0.07942280125351808, 0.07564824122020242, 0.0824802658466679, 0.07924806137371854, 0.08429188710449831]}, "mutation_prompt": null}
{"id": "b6342252-9986-469c-9e8d-982189726284", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, F_init=0.8, CR_init=0.9, pop_size=20):\n        super().__init__(budget, dim, F_init, CR_init, pop_size)\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, target in enumerate(population):\n                F = self.F * np.random.uniform(0.5, 1.5)\n                CR = self.CR * np.random.uniform(0.5, 1.0)\n                mutant = mutate(target, population, F)\n                trial = crossover(target, mutant, CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhancing the Differential Evolution algorithm by dynamically adjusting mutation and crossover rates based on population performance.", "configspace": "", "generation": 3, "fitness": 0.38920793811518817, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {"aucs": [0.8721744220047074, 0.8639189560181761, 0.861835952056931, 0.877574992714856, 0.8745433467716262, 0.8680242115939191, 0.8869235781010394, 0.8812184160634631, 0.8691009135914918, 0.7641440247183022, 0.7771824133451812, 0.7759441675049995, 0.7764252525289088, 0.789573127561211, 0.771910079777589, 0.7792173295002613, 0.790634691097256, 0.7678731090729395, 0.6148972597232965, 0.5108738726918122, 0.5491393148958261, 0.5550836412992644, 0.5222907305875906, 0.5679018043563363, 0.483598164955776, 0.4805507988424985, 0.48504706316843194, 0.45126492689936404, 0.4067480875756323, 0.4086211744931906, 0.1629921143370664, 0.4537795864234002, 0.5111751357521528, 0.4346757705958225, 0.4979745558379636, 0.4990345707853505, 0.9806077077770572, 0.9859734168747518, 0.9804311227918806, 0.9763267780311917, 0.9802145520087993, 0.9772026624498985, 0.9752915689179291, 0.979303706087702, 0.9715092183755403, 0.6254400738599235, 0.5743020021938359, 0.6239059810253555, 0.6027572593250777, 0.54063936943644, 0.587297232141361, 0.5619492271026332, 0.6209789300738502, 0.08664881306663463, 0.7159916903830248, 0.7392900437248292, 0.7018364610830421, 0.6931074034950973, 0.7806149439232299, 0.7280018818446721, 0.763794358363055, 0.7151020109610713, 0.6998386292334862, 0.3094626096194766, 0.31562189059983803, 0.28231741699517066, 0.3714909014536749, 0.27856709518565936, 0.32330928184500385, 0.38859637665365077, 0.37874870193535426, 0.2747341408297762, 0.2950061814583168, 0.021742034424045098, 0.2531459703120924, 0.33952271887551755, 0.3440399357368962, 0.3063560564972724, 0.2998015094413301, 0.32629993214677555, 0.28377891089316687, 0.1548358717938476, 0.27270043963640656, 0.08501201858399032, 0.15259756247332878, 0.17387535996597892, 0.14428622617097275, 0.1636267092558703, 0.10452071157950249, 0.19447095027663386, 0.30392633223705456, 0.30058028396557335, 0.2862168651857232, 0.2501074781142276, 0.23362848385341017, 0.1733127339164735, 0.3189546377816045, 0.26342022462040104, 0.3159924517609103, 0.023997200605980984, 0.05247410538136266, 0.05596798270069625, 0.09542302198288122, 0.1346590410332028, 0.085594902967975, 0.11126240182292768, 0.14166776001131387, 0.11385534644656525, 0.2320847438358563, 0.22080085627932577, 0.21689518662049057, 0.2954142672213468, 0.2900577456756108, 0.2519864648584762, 0.21321825406668782, 0.24101731989992714, 0.2169865953529463, 0.6426787062080921, 0.6220145336641367, 0.6187619970987063, 0.6386862869012513, 0.6630515242815584, 0.6162249113978906, 0.5979151491717412, 0.6124474025966338, 0.6559403523593521, 0.09825571552124623, 0.10482822742258324, 0.10217725659885857, 0.10814680999948012, 0.106043727767269, 0.09562607657482458, 0.1119756109291542, 0.10465943707832936, 0.11695172908048845, 0.1618320606073419, 0.14483818178508479, 0.17983477877563492, 0.170626230191689, 0.23628440346086377, 0.16575984962871904, 0.1382508435786176, 0.13899198344045616, 0.17322751756104537, 0.384392119247034, 0.3956605279242046, 0.3557908949288061, 0.3991691255018449, 0.36123194961606897, 0.4032812977654878, 0.4510671228906785, 0.42991482759776134, 0.49129539785216647, 0.27440909088974264, 0.24728024273294236, 0.2846206302303873, 0.24769370748888742, 0.24608321642164754, 0.2638809028558482, 0.2502356844164998, 0.31659441607309147, 0.3095581609624545, 0.18495126706305498, 0.18669830814055033, 0.18267662280773467, 0.21380785699560179, 0.1832338593899252, 0.18933243370898534, 0.199245733915971, 0.19048626428069615, 0.20007342960384933, 0.23348174010801015, 0.21194647941257738, 0.2068245941476512, 0.5572006505422152, 0.5514171873721647, 0.3846284488134918, 0.33981034460422743, 0.28087092614437903, 0.3350578815550316, 0.1941067252592713, 0.7377463286790685, 0.15246804702412353, 0.7225449359774666, 0.18993783564644873, 0.718827443466078, 0.6395482100741945, 0.4653985702365434, 0.18642033834752425, 0.6067055557401722, 0.19818882861919196, 0.19546831611407312, 0.7181655407930005, 0.19767561721859384, 0.19023623811389456, 0.20560864737895168, 0.20945496123332064, 0.20515579072647439, 0.1909612619818919, 0.18174212215404173, 0.18703627855793126, 0.17397878281098134, 0.18537594708494143, 0.18226275376419143, 0.1756920144597499, 0.1879320749384934, 0.17849099859493, 0.08583670418893874, 0.09809653295741261, 0.08042077039947815, 0.07830414472682601, 0.07831122896962517, 0.07278258727175657, 0.07499711453918367, 0.07875592847094304, 0.0841500040447214]}, "mutation_prompt": null}
{"id": "e3367425-204e-453c-9e2b-126ee25d3f9c", "solution": "import numpy as np\n\nclass ImprovedDifferentialEvolution(DifferentialEvolution):\n    def __init__(self, budget, dim, pop_size=20):\n        super().__init__(budget, dim, F=0.8, CR=0.9, pop_size=pop_size)\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        F_adaptive = self.F\n        CR_adaptive = self.CR\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, F_adaptive)\n                trial = crossover(target, mutant, CR_adaptive)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n                \n                F_adaptive = max(0.1, min(0.9, F_adaptive + 0.01 * (np.random.rand() - 0.5)))\n                CR_adaptive = max(0.1, min(0.9, CR_adaptive + 0.01 * (np.random.rand() - 0.5)))\n                \n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDifferentialEvolution", "description": "Improved Differential Evolution algorithm with adaptive control of mutation and crossover rates to enhance exploration and exploitation balance while optimizing black box functions within a limited budget.", "configspace": "", "generation": 4, "fitness": 0.4118834185253984, "feedback": "The algorithm ImprovedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {"aucs": [0.9014125946831651, 0.8232924660643213, 0.8617952126348145, 0.867478711908461, 0.8402716050539468, 0.8824659747532919, 0.889988942853456, 0.8534941845043529, 0.8529832699562386, 0.8064562494451274, 0.7583547064575559, 0.7187828600119004, 0.811624062577786, 0.762796721970155, 0.75581536451899, 0.7818245389846846, 0.7579181706235704, 0.73337667886137, 0.39208859292107723, 0.46746674063973004, 0.136919255634523, 0.3504566988031447, 0.3495434906955551, 0.1410345402030707, 0.4037999328960209, 0.3252923552824937, 0.18495334183584167, 0.1255137957871293, 0.14552441106920577, 0.13663177781006475, 0.3589488456369416, 0.3752439731664572, 0.40294343240751873, 0.4307746454113677, 0.14139589978224743, 0.1477991268752461, 0.9561553946114754, 0.9719548578120286, 0.963547110741839, 0.9861555129748952, 0.9778335309873974, 0.9903187896658517, 0.9650636020981807, 0.980251966763754, 0.9773987949739718, 0.6349305945809067, 0.6393269893560831, 0.5321699247806886, 0.665630070511025, 0.148210719749165, 0.6357918965131006, 0.6658868020614697, 0.5896111135783472, 0.6565337297108426, 0.8283630542155864, 0.7766166675010333, 0.8007176437414593, 0.8695280331131231, 0.811216766706225, 0.7253475780801599, 0.8391039957455237, 0.7833983296099878, 0.7192587229023946, 0.43140072117797756, 0.19401831794460822, 0.30248101588056764, 0.20964801084069662, 0.3263888463208259, 0.5563346090678127, 0.37619822901800404, 0.2818060556875741, 0.4066184933355863, 0.2923203927828013, 0.2557891172193735, 0.26162997829352796, 0.42248257456800553, 0.22543085319798362, 0.24535357977356687, 0.36727976992752187, 0.1223324899617475, 0.25268557372047673, 0.3808399314895984, 0.28684579734303406, 0.33017577393970987, 0.31695747899772964, 0.2590121422967482, 0.35874708990955173, 0.31883685157837194, 0.30577215260202706, 0.31613017595092363, 0.5184797562828454, 0.4513425028844865, 0.4312334072763403, 0.5377980912268461, 0.21078409425134892, 0.483530075446855, 0.6651995160694745, 0.5431898976257459, 0.4930077533115881, 0.24022087536030978, 0.09572032449871115, 0.13831834667516363, 0.12983998989233292, 0.12972869155529154, 0.14327540258516636, 0.16148067838754376, 0.17725311735974847, 0.20448005050652263, 0.3110434688259609, 0.2561239001807447, 0.3054393918825603, 0.3255751078161173, 0.30747033259756285, 0.3845181862874467, 0.312397391331833, 9.999999999998899e-05, 0.2776018984226515, 0.7209967048335858, 0.6774816509247907, 0.6939093247304388, 0.6963367660816046, 0.6111211598215982, 0.698238486280903, 0.7319105347206446, 0.6672161769559208, 0.7493960724278246, 0.09572703543057959, 0.09978078694983838, 0.0996038408489558, 0.12170983282734937, 0.09549598174253915, 0.10686785846690017, 0.10291854046097015, 0.12044674933232713, 0.11033413788666113, 0.23779554674015468, 0.16819564566482337, 0.14065426790115654, 0.16044023920006145, 0.15497995997611103, 0.1369124383586321, 0.18065303161725044, 0.14937082571306726, 0.15451380041952312, 0.4375048710917485, 0.39844656565877623, 0.510091200800928, 0.4646921744982323, 0.4253702696645022, 0.5200737978624304, 0.4664133905822969, 0.5176395622260817, 0.5219154084225863, 0.3303421702770136, 0.32397063514350743, 0.3902081672070109, 0.37105919727922154, 0.31433896370220726, 0.326846518779373, 0.2964942609729502, 0.38174830022938544, 0.39219754271789065, 0.1841037873702691, 0.1857823585406727, 0.19748836040909667, 0.23781349004314467, 0.1908342866454925, 0.1728660170384022, 0.18169885593367585, 0.18732310704164912, 0.18418827085774692, 0.22818175681167874, 0.3758963886533181, 0.44269064481341924, 0.25350634233423974, 0.516481564700664, 0.5043390653417028, 0.39191434964264305, 0.44784316356090026, 0.5820164641092709, 0.1710170194459817, 0.2098534980003698, 0.1532469138989927, 0.7868774609500143, 0.8369887400128033, 0.8565530100063087, 0.17180614441657527, 0.16523640485483426, 0.751614707875033, 0.20367075795221212, 0.6925517950396682, 0.7834053591970487, 0.2012472612218167, 0.19727642940996037, 0.7336378862871231, 0.2080105152341455, 0.19125153458967292, 0.21075648274323933, 0.2186613348026346, 0.1834576364976479, 0.23034265436179047, 0.17897944333103477, 0.214931807493709, 0.19482683443787996, 0.21417471759353124, 0.1806858752765358, 0.1682351842043288, 0.07972021117820227, 0.0821389065915844, 0.07596992416200032, 0.08491819716232563, 0.08940029001197147, 0.07591686693084887, 0.06785757425737338, 0.07809033575822744, 0.08072638184540504]}, "mutation_prompt": null}
{"id": "b07dfd4b-e7c8-41ee-91cd-97b1c5922cd9", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, self.F)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "A novel Differential Evolution algorithm that efficiently explores the search space by employing mutation, crossover, and selection mechanisms to optimize black box functions within a limited budget. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {"aucs": [0.8349546852665155, 0.8507638204035417, 0.8434871040416648, 0.8562819294343111, 0.8614198388731305, 0.8740248471880535, 0.8740116871245234, 0.8806431371206199, 0.8480313560862734, 0.7553598859688332, 0.7282637065125124, 0.7559783396640514, 0.7684676239970732, 0.7564138270844356, 0.7713741283859601, 0.7660482070179488, 0.7673739401981771, 0.7485151509346673, 0.13878272948260129, 0.1379335751848827, 0.12930579241881424, 0.2608422165110289, 0.14797643797570814, 0.1425125768266322, 0.20275043463732512, 0.12824329320878092, 0.1977658419683025, 0.13606120701517033, 0.12092815847108196, 0.13238127241594944, 0.13996454473942377, 0.11127069928956967, 0.1757472394387236, 0.15421922059777027, 0.16579981581908265, 0.15292863227285758, 0.9521913618694621, 0.967172119684859, 0.9827647254421162, 0.966106225639864, 0.9607601338546095, 0.989173548431087, 0.9813406101868287, 0.9718010691469557, 0.9811648981558609, 0.6748769727113944, 0.5974287713008599, 0.6317572294836715, 0.6326837313104688, 0.6138183878954967, 0.6222755721258553, 0.6401474743489841, 0.6522493939455816, 0.6847150386211376, 0.7856279049221725, 0.8196217600224615, 0.7610129614358351, 0.8651635436731646, 0.8041061157683933, 0.8339462124976684, 0.7681781884524421, 0.8104337402996383, 0.7665561931933617, 0.525646205729454, 0.47087610747066844, 0.5953388909270692, 0.5513539601420132, 0.46615150402641525, 0.5734618774306435, 0.6104889963765571, 0.5810561552387564, 0.5743295021935361, 0.5990754127268068, 0.592627221955105, 0.6328176070913385, 0.616805170666972, 0.6585801442900879, 0.6169004908610916, 0.5205141196020269, 0.5240581240700546, 0.5620098556940168, 0.5900557469237871, 0.559427531185464, 0.456868090345417, 0.5525408852765648, 0.525973074563677, 0.550348191677503, 0.5654782031800674, 0.4988211381658967, 0.5710683466465036, 0.6231124639480723, 0.6443586526695781, 0.6400621545716598, 0.6565268034077076, 0.6458566825301113, 0.6881785888928116, 0.6827371642187254, 0.6859088544933956, 0.6523506118389761, 0.11355545837657577, 0.3686071590382498, 0.12939854259566508, 0.21632113814195908, 0.38946471733674903, 0.34010354479171045, 0.23817875412239864, 0.2895287636670294, 0.2616204412383625, 0.43327072540244416, 0.3842249302723306, 0.3957823178839457, 0.41283272976791197, 0.46289762475061225, 0.42782472267657146, 0.44719158176896334, 0.4242994929851902, 0.3994052561007292, 0.7837480575550235, 0.7623875896033765, 0.7657956614982752, 0.7636795659731984, 0.7963380812905269, 0.7630184053031139, 0.7723741361322976, 0.7529221012959414, 0.7959265833911006, 0.10672480852337629, 0.0982158665681574, 0.11892374062444755, 0.12345596399580883, 0.12062454768965158, 0.10043249922194286, 0.0838276833770476, 0.10277503856553627, 0.09650434351034887, 0.5324740638039959, 0.14580086716380924, 0.18397146748079274, 0.16652520761701162, 0.1495252229092714, 0.1271639917399009, 0.24845908868162347, 0.14452756483549856, 0.22434588108453601, 0.48473053034718105, 0.4374714963346821, 0.44660044750780636, 0.43060834754232524, 0.40770296628604197, 0.4610500334719676, 0.42815394838913223, 0.4750611756956227, 0.45936094971598296, 0.38168762204373163, 0.3210586512703202, 0.3371550380120829, 0.3442435013226598, 0.3352306169507162, 0.358810138202453, 0.33192155031474013, 0.36045896585647874, 0.30655549669286475, 0.18825088324178596, 0.19278848999940956, 0.20135093635909684, 0.17601277577900853, 0.17974449713807694, 0.17502723799756004, 0.18494108683810795, 0.19555638888768345, 0.18026080948984746, 0.2842891970797946, 0.29355935371545616, 0.46314914863134804, 0.20538461416965514, 0.5507548928886206, 0.21291554056567752, 0.5587010613270962, 0.34708885677817425, 0.22484104959802576, 0.8784227796522903, 0.8149867349222035, 0.8510702451518878, 0.8569631716079094, 0.1941928025826245, 0.1952875553968334, 0.18654815925588542, 0.18658190406539366, 0.1876624388551995, 0.7928770563185814, 0.8137927206056339, 0.2068877228883682, 0.20561153821216804, 0.8230938549807041, 0.7249014450593365, 0.20840370599190505, 0.1266862405644048, 0.1550753432306039, 0.18303886274926195, 0.19464471639124103, 0.1763981438307345, 0.19602767498993767, 0.17972987111709604, 0.1917181448040488, 0.16723986063367735, 0.18096080451925578, 0.17642947027687805, 0.07629905376745405, 0.0787395905663536, 0.07955357311319822, 0.08397181588781044, 0.07519447010721236, 0.07703095075976163, 0.06381090717938875, 0.09221622799431606, 0.0754554295181602]}, "mutation_prompt": null}
{"id": "b53e2f4d-e61e-4f3c-8af5-76b64428c178", "solution": "import numpy as np\n\nclass ImprovedDifferentialEvolution(DifferentialEvolution):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, selection_pressure=0.7):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.selection_pressure = selection_pressure\n\n    def __call__(self, func):\n        def mutate(x, population, F, best_idx):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            if np.random.rand() < self.selection_pressure:\n                target = population[best_idx]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            best_idx = np.argmin(fitness)\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, self.F, best_idx)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDifferentialEvolution", "description": "Improving selection mechanism to prioritize individuals with better fitness for mutation and crossover operations.", "configspace": "", "generation": 6, "fitness": 0.44542387695742547, "feedback": "The algorithm ImprovedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.27.", "error": "", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {"aucs": [0.8355567800030946, 0.8533048893041194, 0.8399867143947386, 0.8676994395615099, 0.8551785405719196, 0.8652852501048343, 0.8702067592040827, 0.8408128857333433, 0.8659760298964256, 0.7565533089730885, 0.7396418020426436, 0.731725921644911, 0.7457647651705064, 0.7338918863889129, 0.7513958284114125, 0.763690888137772, 0.7643505609452911, 0.717614239399637, 0.1319866850615261, 0.13144076723947107, 0.12066454520707504, 0.26614934286821124, 0.49229422740539275, 0.1321484565548453, 0.1364192808509943, 0.22053545302003852, 0.20649042916469174, 0.12253950778877765, 0.14311633420513803, 0.11282930169000938, 0.11740808466903563, 0.11597471482305644, 0.12390175881837062, 0.12328046293519179, 0.15125571606275212, 0.15197737538233902, 0.9822335914921626, 0.9847663649938588, 0.9630329635503448, 0.9310019834009488, 0.965673890386122, 0.9687832990153522, 0.9754059007072347, 0.9583891576887189, 0.9815567545519123, 0.6390127066299516, 0.6429168278248314, 0.6333722649112413, 0.6316804343190507, 0.6317766027533565, 0.6038170973879182, 0.6191608534124969, 0.6523746647060008, 0.6856546405445987, 0.7157732014422356, 0.8151084294161477, 0.827874230188792, 0.8053869013597206, 0.8582001037488893, 0.780353885620324, 0.7722815618040777, 0.8245241324182842, 0.7866502968474709, 0.5868440938262587, 0.5202612182821938, 0.5916549884303509, 0.13058164147710571, 0.6134223318244978, 0.6262835356000371, 0.5634574605739249, 0.5883986955227709, 0.5869054936435023, 0.01631524961252473, 0.6111249329154487, 0.054179619208912455, 0.5767317727812509, 0.5430109991028831, 0.4462657430653324, 0.5197794505748704, 0.5865935726304723, 0.5195947028783134, 0.5094580703942928, 0.49136842836231653, 0.5614176449485271, 0.5792723909901538, 0.5081884775348319, 0.5192190714640665, 0.5561253357412241, 0.5032874686458744, 0.5424486146789711, 0.6710083800467177, 0.6628426025234366, 0.6309412315998606, 0.6242243085674949, 0.6574500820132698, 0.5617299739954544, 0.7021951897423983, 0.6963499009056315, 0.6883136619259018, 0.3219502186513189, 0.1786897796325122, 0.0962101317703804, 0.4462012470236165, 0.17066976561022362, 0.46013524229369995, 0.226501170097145, 0.17310526032782858, 0.2962478330435734, 0.4306125549903653, 0.398960784873135, 0.42026540163507675, 0.443421990275942, 0.4464275457858614, 0.4129242399470052, 0.4191407905235086, 0.4031400000652188, 0.3710713457580008, 0.7888557603472148, 0.768916792113819, 0.7808959149162892, 0.7801789298892207, 0.7489580315379608, 0.7755762693354682, 0.7566115010213932, 0.7760969912106909, 0.7725360392237415, 0.10426013464208461, 0.09166614963022335, 0.11261133661825262, 0.1260895684998482, 0.1070161072474266, 0.09137721135361354, 0.09225095316280163, 0.11492865233344951, 0.2074594191190594, 0.2191908266761523, 0.18076031093693057, 0.11206797839541027, 0.20274408899038499, 0.13978451751798493, 0.13334967161539713, 0.14504055895954804, 0.18974891545851846, 0.1629488080960868, 0.4573813812195947, 0.45277558102167503, 0.4563838495068411, 0.415923491522871, 0.4519092349384983, 0.42786300286227186, 0.48113417584310114, 0.468956754103389, 0.4865210856596863, 0.32231918527634573, 0.32807650043060244, 0.33717401033812555, 0.30327675063267856, 0.3278116110735574, 0.31957789729903885, 0.4069506779059979, 0.3407584372521093, 0.33968696766134576, 0.23301542545025788, 0.1773971544402826, 0.19131604843944439, 0.19971121101824485, 0.18869017151706236, 0.17164343365220536, 0.1858261614322163, 0.21417554401512506, 0.17820045046651944, 0.45567465897945136, 0.47166113552721567, 0.44209766537940887, 0.35967465500812845, 0.5761995805004279, 0.4029521057342397, 0.5073438226731897, 0.4803456602757479, 0.4832566239016787, 0.83718382941229, 0.17246471905023297, 0.15392343582750168, 0.7864898791366333, 0.8295695586708883, 0.15578584589797173, 0.15890164294183362, 0.7895696197083726, 0.16814808669018422, 0.5798781753870437, 0.20843015447910884, 0.20459653558914692, 0.16464418294429595, 0.7713177093222527, 0.20663466433236866, 0.20250810015845577, 0.2092343998846885, 0.20739354077531302, 0.1997258582283531, 0.16333673509305413, 0.2009101721099099, 0.18376847224945325, 0.17188349011851956, 0.16791043904235103, 0.17881514759087258, 0.19646897409839492, 0.20976392144921707, 0.08019958814438155, 0.07579069606451772, 0.08132835499111302, 0.07661135481311832, 0.08437151227430217, 0.07987798559135773, 0.07576423958419232, 0.07882202191635912, 0.07521752433563089]}, "mutation_prompt": null}
{"id": "1b84947a-acb5-46cb-81d4-4d402209dbd6", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, self.F)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "A novel Differential Evolution algorithm that efficiently explores the search space by employing mutation, crossover, and selection mechanisms to optimize black box functions within a limited budget. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {"aucs": [0.8349546852665155, 0.8507638204035417, 0.8434871040416648, 0.8562819294343111, 0.8614198388731305, 0.8740248471880535, 0.8740116871245234, 0.8806431371206199, 0.8480313560862734, 0.7553598859688332, 0.7282637065125124, 0.7559783396640514, 0.7684676239970732, 0.7564138270844356, 0.7713741283859601, 0.7660482070179488, 0.7673739401981771, 0.7485151509346673, 0.13878272948260129, 0.1379335751848827, 0.12930579241881424, 0.2608422165110289, 0.14797643797570814, 0.1425125768266322, 0.20275043463732512, 0.12824329320878092, 0.1977658419683025, 0.13606120701517033, 0.12092815847108196, 0.13238127241594944, 0.13996454473942377, 0.11127069928956967, 0.1757472394387236, 0.15421922059777027, 0.16579981581908265, 0.15292863227285758, 0.9521913618694621, 0.967172119684859, 0.9827647254421162, 0.966106225639864, 0.9607601338546095, 0.989173548431087, 0.9813406101868287, 0.9718010691469557, 0.9811648981558609, 0.6748769727113944, 0.5974287713008599, 0.6317572294836715, 0.6326837313104688, 0.6138183878954967, 0.6222755721258553, 0.6401474743489841, 0.6522493939455816, 0.6847150386211376, 0.7856279049221725, 0.8196217600224615, 0.7610129614358351, 0.8651635436731646, 0.8041061157683933, 0.8339462124976684, 0.7681781884524421, 0.8104337402996383, 0.7665561931933617, 0.525646205729454, 0.47087610747066844, 0.5953388909270692, 0.5513539601420132, 0.46615150402641525, 0.5734618774306435, 0.6104889963765571, 0.5810561552387564, 0.5743295021935361, 0.5990754127268068, 0.592627221955105, 0.6328176070913385, 0.616805170666972, 0.6585801442900879, 0.6169004908610916, 0.5205141196020269, 0.5240581240700546, 0.5620098556940168, 0.5900557469237871, 0.559427531185464, 0.456868090345417, 0.5525408852765648, 0.525973074563677, 0.550348191677503, 0.5654782031800674, 0.4988211381658967, 0.5710683466465036, 0.6231124639480723, 0.6443586526695781, 0.6400621545716598, 0.6565268034077076, 0.6458566825301113, 0.6881785888928116, 0.6827371642187254, 0.6859088544933956, 0.6523506118389761, 0.11355545837657577, 0.3686071590382498, 0.12939854259566508, 0.21632113814195908, 0.38946471733674903, 0.34010354479171045, 0.23817875412239864, 0.2895287636670294, 0.2616204412383625, 0.43327072540244416, 0.3842249302723306, 0.3957823178839457, 0.41283272976791197, 0.46289762475061225, 0.42782472267657146, 0.44719158176896334, 0.4242994929851902, 0.3994052561007292, 0.7837480575550235, 0.7623875896033765, 0.7657956614982752, 0.7636795659731984, 0.7963380812905269, 0.7630184053031139, 0.7723741361322976, 0.7529221012959414, 0.7959265833911006, 0.10672480852337629, 0.0982158665681574, 0.11892374062444755, 0.12345596399580883, 0.12062454768965158, 0.10043249922194286, 0.0838276833770476, 0.10277503856553627, 0.09650434351034887, 0.5324740638039959, 0.14580086716380924, 0.18397146748079274, 0.16652520761701162, 0.1495252229092714, 0.1271639917399009, 0.24845908868162347, 0.14452756483549856, 0.22434588108453601, 0.48473053034718105, 0.4374714963346821, 0.44660044750780636, 0.43060834754232524, 0.40770296628604197, 0.4610500334719676, 0.42815394838913223, 0.4750611756956227, 0.45936094971598296, 0.38168762204373163, 0.3210586512703202, 0.3371550380120829, 0.3442435013226598, 0.3352306169507162, 0.358810138202453, 0.33192155031474013, 0.36045896585647874, 0.30655549669286475, 0.18825088324178596, 0.19278848999940956, 0.20135093635909684, 0.17601277577900853, 0.17974449713807694, 0.17502723799756004, 0.18494108683810795, 0.19555638888768345, 0.18026080948984746, 0.2842891970797946, 0.29355935371545616, 0.46314914863134804, 0.20538461416965514, 0.5507548928886206, 0.21291554056567752, 0.5587010613270962, 0.34708885677817425, 0.22484104959802576, 0.8784227796522903, 0.8149867349222035, 0.8510702451518878, 0.8569631716079094, 0.1941928025826245, 0.1952875553968334, 0.18654815925588542, 0.18658190406539366, 0.1876624388551995, 0.7928770563185814, 0.8137927206056339, 0.2068877228883682, 0.20561153821216804, 0.8230938549807041, 0.7249014450593365, 0.20840370599190505, 0.1266862405644048, 0.1550753432306039, 0.18303886274926195, 0.19464471639124103, 0.1763981438307345, 0.19602767498993767, 0.17972987111709604, 0.1917181448040488, 0.16723986063367735, 0.18096080451925578, 0.17642947027687805, 0.07629905376745405, 0.0787395905663536, 0.07955357311319822, 0.08397181588781044, 0.07519447010721236, 0.07703095075976163, 0.06381090717938875, 0.09221622799431606, 0.0754554295181602]}, "mutation_prompt": null}
{"id": "371c332b-2b9f-44d1-8b4a-828f05eacdd8", "solution": "import numpy as np\n\nclass DynamicPopulationDE(DifferentialEvolution):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.min_pop_size = 10\n        self.max_pop_size = 30\n\n    def __call__(self, func):\n        def adapt_population_size(iteration):\n            return max(self.min_pop_size, min(self.max_pop_size, int(self.pop_size * (1 + 0.1 * np.sin(iteration * np.pi / self.budget)))))\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for t in range(self.budget):\n            self.pop_size = adapt_population_size(t)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, self.F)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicPopulationDE", "description": "Enhancing Differential Evolution with a dynamic population size adaptation strategy to improve exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {}, "mutation_prompt": null}
{"id": "37ff0342-6d53-4e03-a07e-5ed56d020e8b", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.min_pop_size = 10\n        self.max_pop_size = 50\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, self.F)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n            # Dynamic population size adaptation\n            if np.random.rand() < 0.1 and self.pop_size > self.min_pop_size:\n                self.pop_size = max(self.min_pop_size, int(self.pop_size * 0.9))\n                population = np.concatenate([population, np.random.uniform(-5, 5, (self.pop_size - len(population), self.dim))])\n                fitness = np.concatenate([fitness, np.array([func(individual) for individual in population[len(fitness):]])])\n            elif np.random.rand() < 0.1 and self.pop_size < self.max_pop_size:\n                self.pop_size = min(self.max_pop_size, int(self.pop_size * 1.1))\n                population = population[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Utilizing a dynamic population size for Differential Evolution to adaptively adjust the exploration and exploitation balance during optimization to enhance performance.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {}, "mutation_prompt": null}
{"id": "d76a42de-5a4f-4747-a983-18a4830597be", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, F_min=0.4, F_max=1.0, F_decay=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n        self.F_min = F_min\n        self.F_max = F_max\n        self.F_decay = F_decay\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, target in enumerate(population):\n                self.F = max(self.F_min, min(self.F_max, self.F * self.F_decay))\n                mutant = mutate(target, population, self.F)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DifferentialEvolution", "description": "Improving population diversity by introducing a self-adaptive strategy to adjust mutation scaling factor F during the optimization process.", "configspace": "", "generation": 10, "fitness": 0.2745511748112264, "feedback": "The algorithm DifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {"aucs": [0.9378346541262848, 0.7477168808498, 0.9356614991746232, 0.32059997301610577, 0.7865093892069719, 0.8606357093111443, 0.5283433571343581, 0.7139665231812529, 0.610703653192882, 0.46527426540801153, 0.06473869962006762, 0.264544561860832, 9.999999999998899e-05, 0.5872673606446612, 0.00013160087067898285, 0.6324436301810274, 0.8062034228939589, 0.12982398413167306, 0.15877111203239325, 0.16970864171502165, 0.5966662303694164, 0.15931876461999928, 0.17829189902664622, 0.15984295910110358, 0.3497396078306888, 0.48394552632350474, 0.742878780034013, 0.12981625958382048, 0.11395753496132566, 0.13551831348608245, 0.15030892159320464, 0.15501177929253596, 0.08538975621653078, 0.15064933595654217, 0.11808513138592991, 0.36487061949253985, 0.9224420051367641, 0.9293670710174189, 0.8690442010920623, 0.3477685573288708, 0.3079067063224086, 0.708541734713618, 0.9319989686872929, 0.942970025432297, 0.17573967316610994, 0.1113134003565005, 0.2188381423900072, 0.06379271377380313, 0.14022017312048807, 0.09958192144479594, 0.28656158073719484, 0.08514428450949796, 0.09042097155783468, 0.11319983946784273, 0.21637271613049558, 0.3452112153808604, 0.2291383041269861, 0.19404210330892757, 0.3482782166030909, 0.3389151865905262, 0.9346418088281, 0.9555278533695519, 0.9410113768462195, 0.13888780936890854, 0.26326165024818227, 0.24798806222252, 0.2057076347320238, 0.1568459793938446, 0.18720887502292172, 0.20700907108487654, 0.32616987743641024, 0.135115558835193, 0.15476444491818186, 0.16135856205659616, 0.1680819991822876, 0.3558418332009833, 0.14451696989738172, 0.1432383908195648, 0.15704458230838914, 0.19131364224343972, 0.1358982756718382, 9.999999999998899e-05, 0.11320174202020439, 0.12653008042762792, 0.0859125603368146, 9.999999999998899e-05, 9.999999999998899e-05, 0.2512001144135847, 0.20539713977031993, 9.999999999998899e-05, 0.20566117042454346, 0.08029830300618179, 0.06555600653133009, 0.10509445804065365, 0.08611535178683061, 0.03113803856099151, 0.17428291414995367, 0.23785760562607317, 0.1693532162495026, 9.999999999998899e-05, 0.051491190895939676, 0.336264632813709, 0.12152294674028252, 0.13670069407055307, 0.22872690798274176, 0.20624037116350713, 0.1985755543219161, 0.08102452934064674, 0.20002733178011245, 0.1909880743046951, 0.07492934363395964, 0.34511941431042203, 0.17726447267808965, 0.1759604108609163, 0.16789629714362686, 0.2282266135926989, 0.05579711320451919, 0.40772153987935233, 0.608617453852503, 0.56353285412299, 0.49562589084884445, 0.43419702494710144, 0.4139920191716563, 0.5747649342484793, 0.3121584957347192, 0.48380469990432307, 0.08494090601872972, 0.10973204772472966, 0.1346469027280014, 0.11412115150121149, 0.1321926280803738, 0.18462200921670047, 0.10599389839949236, 0.17886957222662603, 0.11197175289694827, 0.14387270475037206, 0.17346629058756702, 0.40425609426063147, 0.325595178515489, 0.20936148364615714, 0.27545406731276667, 0.22116302840044277, 0.20346386949066664, 0.17647518355554925, 0.6012105154704326, 0.5752309787624011, 0.3422452199529662, 0.562951352080858, 0.5188059604476697, 0.361795583706529, 0.4817084587778673, 0.27913417116687356, 0.4053200748887231, 0.30671160264038466, 0.38458024786366174, 0.18196492440232415, 0.5270699222735962, 0.23801953420600752, 0.3099395404395212, 0.20111401185226185, 0.3905551107399834, 0.47200210375973695, 0.1881639859667802, 0.20703278735290798, 0.21528873077339172, 0.20896714352290968, 0.20466774915983, 0.243240871401879, 0.19695474431298388, 0.22182606918106107, 0.1935864608867398, 0.22460375042071024, 0.20720965427429205, 0.20040213991439493, 0.22195053517361973, 0.2428693120516986, 0.24477634549585536, 0.18731111756062413, 0.4467554377279963, 0.20909087146509242, 0.18632265173178097, 0.17022656312835793, 0.17509959156852706, 0.1743078414799375, 0.19775500438274973, 0.19783510770683033, 0.1763432144008804, 0.1887718070280563, 0.16106678845086064, 0.6466089013310585, 0.2101755166058209, 0.29293807033580055, 0.21223503777043207, 0.21266976133811566, 0.211240952774714, 0.20380846982919953, 0.14948932227610312, 0.16842482215970211, 0.18429746781415302, 0.18847720835516268, 0.19972517729188366, 0.19567176752826976, 0.19261747342432978, 0.181293071432858, 0.19514268087023312, 0.1873170990752857, 0.19694179677024626, 0.09302612876637217, 0.09013623133821003, 0.07962707743816833, 0.09380208801230216, 0.0798280998947728, 0.09911670029990616, 0.10318081855604255, 0.08232376885364578, 0.09717006901544678]}, "mutation_prompt": null}
{"id": "7e751525-0266-40fb-9940-5c269bfe68b6", "solution": "import numpy as np\n\nclass RefinedDifferentialEvolution(DifferentialEvolution):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, local_search_prob=0.1):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.local_search_prob = local_search_prob\n\n    def local_search(self, population, func):\n        for i in range(len(population)):\n            candidate = population[i].copy()\n            for j in range(self.dim):\n                if np.random.rand() < self.local_search_prob:\n                    candidate[j] = np.clip(candidate[j] + np.random.uniform(-0.1, 0.1), -5, 5)\n            if func(candidate) < func(population[i]):\n                population[i] = candidate\n\n    def __call__(self, func):\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, self.F)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n            \n            self.local_search(population, func)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "RefinedDifferentialEvolution", "description": "Integrate a local search mechanism in Differential Evolution to exploit promising regions and enhance exploitation capabilities.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {}, "mutation_prompt": null}
{"id": "9cf7b5c1-dd78-4900-bead-9507719a4de9", "solution": "import numpy as np\n\nclass ImprovedDifferentialEvolution(DifferentialEvolution):\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        F_min, F_max = 0.2, 0.8\n        for _ in range(self.budget):\n            new_population = []\n            F = F_min + (_ / self.budget) * (F_max - F_min)\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, F)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDifferentialEvolution", "description": "Improving Differential Evolution by dynamically adjusting mutation factor F during optimization.", "configspace": "", "generation": 12, "fitness": 0.12549911210978357, "feedback": "The algorithm ImprovedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {"aucs": [0.19926560143493321, 0.20327937815971142, 0.22537410530051138, 0.14096908970458022, 0.2920411804058254, 0.21898413451582543, 0.2724696891138927, 0.36122054527971725, 0.12681234145371112, 0.03991540028782692, 0.06320960937961861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08032527382054289, 0.14858632658826887, 0.1287864022236308, 0.13644184802993098, 0.11102212043919368, 0.1014355895502993, 0.08913653405751243, 0.06610136127247312, 0.13561525626836168, 0.14306493443203472, 0.07227954076435894, 0.0944057781373685, 0.12671892769380355, 0.10092957008007086, 0.06950786114949625, 0.09527670218753426, 0.12446097526696265, 0.06449372556124977, 0.08258738007575561, 0.1072719184688884, 0.1052508591899668, 0.08069810198026062, 0.09000346557037042, 0.09932802524028228, 0.09996835048197428, 0.11537583265632279, 0.07937991152615087, 0.028799852779005986, 0.035382731806056444, 0.04271764619652896, 0.055004600704746, 0.07581250729704914, 0.10091358647290394, 0.07688830614805442, 0.03677635228411569, 9.999999999998899e-05, 0.21204822447352079, 0.17785348057349093, 0.17202697100167874, 0.12197691245558129, 0.15045375351668555, 0.060154539388649564, 0.16750367124053522, 0.11244345209020157, 0.18123526607196327, 9.999999999998899e-05, 9.999999999998899e-05, 0.03482651700552453, 0.027974678746509052, 0.08081181232682666, 9.999999999998899e-05, 0.16460062860587354, 0.004589398003165268, 0.15476329967417335, 0.030628374735479857, 0.28412913349459124, 0.03353161648133829, 0.028779634388126363, 0.23660112312546389, 0.04580530303024366, 0.2504592236195283, 0.19308009151373684, 0.10353767381787471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07474429050550158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10578882170203974, 0.054587453453929236, 0.07678242971424365, 0.09202824992826752, 0.039456515564343486, 9.999999999998899e-05, 0.08947219907620352, 0.09004639963240002, 0.08092777374013571, 9.999999999998899e-05, 0.07648908764230078, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009315468070163813, 0.047691324062955176, 0.00021187386689780485, 0.04272830593623689, 9.999999999998899e-05, 9.999999999998899e-05, 0.030327513223446623, 9.999999999998899e-05, 0.22543740946144641, 0.3336067531866207, 0.2403838316527922, 0.16031914952229143, 0.28513504813287804, 0.25350965049696295, 0.18414523542190187, 0.3441445641938531, 0.25298203847461387, 0.08131034528026537, 0.07715425619827643, 0.055905829588472455, 0.11942714748914018, 0.07149636302769136, 0.09372007606091337, 0.13484220183409068, 0.08714387782453414, 0.08169023475791548, 0.2255039931419306, 0.24269546296094258, 0.22900634290414879, 0.16770192528116334, 0.18432992911169743, 0.1538014661717496, 0.32394799426554055, 0.258267753586355, 0.18550329605279636, 0.18948539453599855, 0.23702125640550153, 0.15070511697531197, 0.1960064499929356, 0.25152991528930724, 0.2655785679366419, 0.17966557423558838, 0.2731708824527932, 0.17957499540677913, 0.2008653382050919, 0.2290376287690039, 0.14663713516300192, 0.1424757336257555, 0.14950077458737854, 0.16538339278755154, 0.11580127942912766, 0.2707826037841363, 0.19463924420202516, 0.1962323978265733, 0.21676708045947068, 0.20376597171203448, 0.3110047547159658, 0.2697072824416349, 0.2122444054781195, 0.2836042261541043, 0.20104872666268925, 0.2468495310807287, 0.18490385733179748, 0.18413295757394887, 0.15844531495566594, 0.18104321959144232, 0.19561802253734106, 0.18373371491676505, 0.2003430335417019, 0.1759827063369387, 0.19159884218120893, 0.1742955453067181, 0.1583392731608495, 0.26488559385424715, 0.18190102191780466, 0.17982537401268606, 0.1967133527118714, 0.16689274119574893, 0.1687083563773183, 0.11962869432940038, 0.08274952834310823, 0.16735221174149706, 0.2776895147651367, 0.08232506832629116, 0.16514072749697828, 0.09993371705765053, 0.1047586295538937, 0.23895234757223938, 0.11465801028540068, 0.18854832820325462, 0.18558293511099244, 0.17617200586912019, 0.17191829946679804, 0.18790278273849903, 0.19106911547494432, 0.1838024778712637, 0.18337292038885322, 0.20413639672051553, 0.10207106903559071, 0.09905215727424965, 0.09085174440254051, 0.09284613198057179, 0.08657298285503745, 0.07517430809517134, 0.08840201111852619, 0.08559924753083437, 0.09408237126709429]}, "mutation_prompt": null}
{"id": "df68c7e4-b6d7-4dfc-82fb-ad530e08ec96", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            scaling_factor = np.random.uniform(0.5, 1.0)  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + scaling_factor * F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, self.F)\n                trial = crossover(target, mutant, self.CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhancing Differential Evolution by incorporating a dynamic scaling factor for mutation to adaptively adjust exploration and exploitation trade-off.", "configspace": "", "generation": 13, "fitness": 0.45169999559261875, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.31.", "error": "", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {"aucs": [0.9129676186233272, 0.9199035477077735, 0.9154286087041016, 0.909589849174069, 0.9139637921941992, 0.9181926652110924, 0.9112611870124845, 0.9179665426001278, 0.9152052158928057, 0.8647149488236832, 0.84920109605232, 0.7620958924566581, 0.8298753805502948, 0.8493926775790909, 0.8526663592683054, 0.8529367298946865, 0.8331366347876483, 0.7682991014106729, 0.6579890308492795, 0.14866576694853517, 0.4600373699181456, 0.1643280801733037, 0.16823400916095177, 0.13516728899030783, 0.14745815881746005, 0.39332552635524176, 0.3486453731867689, 0.15740600348606548, 0.14306176898221024, 0.49314619060348786, 0.14939724161236212, 0.1337853630463638, 0.13389535599592595, 0.15856263453262276, 0.12165129548410059, 0.1361206550655918, 0.9603428696478936, 0.9727817409443166, 0.9327149448813276, 0.9851886883633961, 0.9663889061145354, 0.9789970784276092, 0.9749194373924327, 0.9845190310736416, 0.9638119195414576, 0.7612542281361621, 0.6655160863889721, 0.7852125260246798, 0.7232246078299365, 0.7039782770823755, 0.7390756091009592, 0.694366946648135, 0.6348844597330652, 0.6438403743993397, 0.9103516659786594, 0.8893297673640042, 0.9042465138966436, 0.9292429455922377, 0.9051430151811306, 0.8851462942603228, 0.9097227895061256, 0.8967346821449967, 0.881163493103406, 0.22924571360939594, 0.3455697313396332, 0.19592231314417763, 0.22335522221994597, 0.13057547886787269, 0.46939854673375814, 0.17734050035480264, 0.2930059738245846, 0.5781073968507058, 0.1397796398674973, 0.22828475722762676, 0.19816088445263746, 0.2437065860346671, 0.5230254255062212, 0.41786717685532127, 0.2436785543001192, 0.1940660117121754, 0.19367943778179475, 0.10431694339274711, 0.22841031143430968, 0.37515373727756995, 0.00373968243315681, 0.30852617972741403, 0.28719984644764285, 0.07570968036897774, 0.0584358017577411, 0.23042779399808722, 0.27944162420768637, 0.5727022960282799, 0.7322970477892148, 0.19921739211580347, 0.349769553932089, 0.15350506443963585, 0.795979570953408, 0.8029048321150991, 0.7810573552693314, 0.20566735676292613, 0.16652233494398738, 0.3392616154791227, 0.18646276781553084, 0.28549939208847097, 0.247544303639609, 0.22320556850268325, 0.12253200322889624, 0.2445862722561465, 0.4220648420123585, 0.6720646981987208, 0.5470316841842924, 0.6677996117426552, 0.5225610890012603, 0.6504044069849425, 0.34650006232633446, 0.41767711344554403, 0.3435270124169134, 0.8685546944163294, 0.7524015130382751, 0.8433391258851951, 0.862625284465953, 0.8053881366969132, 0.6425582977740739, 0.7818454868169492, 0.8159913633194102, 0.8665498023058291, 0.14001795534374162, 0.1911382248423693, 0.14037507401459737, 0.09723557650353765, 0.11208942118523846, 0.12225098724522865, 0.11310682472655698, 0.2645308674914749, 0.13534584740440425, 0.14213535248513165, 0.2015644224331058, 0.16029386276523272, 0.1655259003592917, 0.15363411020113693, 0.1565795152410424, 0.19780782750859893, 0.20301377750573446, 0.24388615839531214, 0.646918177117336, 0.7110765271089824, 0.7009303155618074, 0.6835407059506112, 0.6823005642454751, 0.7268169941441193, 0.6975467135633974, 0.719494885819083, 0.5362972171005493, 0.5959892046563213, 0.47822873258510334, 0.5581323387207147, 0.5347735913085875, 0.38244540512810543, 0.5067043142215178, 0.477545595099953, 0.6395108952603151, 0.5917360194466484, 0.18967601678263568, 0.22015835729412603, 0.2023380764747179, 0.20198728593654613, 0.1971352886530583, 0.2188944778562837, 0.20398689509661994, 0.21099606925087988, 0.21551773466770996, 0.23829721463441655, 0.6612755684359279, 0.23801442089483738, 0.6857745898535572, 0.6762843611172418, 0.677674002303838, 0.6966729329751682, 0.6787230907742094, 0.3658663529775825, 0.16863834143021794, 0.15660835665338912, 0.12428936299033921, 0.9029152924576294, 0.19731151466815122, 0.8961198601747613, 0.18492719910566624, 0.1872401339868507, 0.9021945781255556, 0.2092585164113473, 0.2102383792760285, 0.20978759384737844, 0.8717807519341085, 0.20793119736521581, 0.20592610439496173, 0.16580982322618654, 0.15575771272510808, 0.15713724507884086, 0.19893841482842434, 0.1881585433927011, 0.18178880786867346, 0.2000224162847607, 0.19176879677465608, 0.19975287258654528, 0.20953127213171907, 0.19699766808048857, 0.19474561179217798, 0.08886882031630738, 0.07527743135948217, 0.0869736436474452, 0.08372119413914969, 0.07728641568390904, 0.08376686495033914, 0.08944070633655232, 0.09427605525245109, 0.07871514602813112]}, "mutation_prompt": null}
{"id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 14, "fitness": 0.4602578065961314, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "fc56aef0-7f70-4a82-8cb4-a2bb1725dd85", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "8063fb92-01d7-42a5-8e7f-6aeb3122b192", "solution": "import numpy as np\n\nclass DynamicEnsembleDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n        self.strategies = ['rand-to-best/1/bin', 'best/2/bin', 'rand/1/exp']\n\n    def __call__(self, func):\n        def mutate(x, population, F, strategy):\n            if strategy == 'rand-to-best/1/bin':\n                a, b, c, d = population[np.random.choice(len(population), 4, replace=False)]\n                return np.clip(a + F * (b - c) + F * (d - x), -5, 5)\n            elif strategy == 'best/2/bin':\n                best_idx = np.argmin(fitness)\n                best = population[best_idx]\n                a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n                return np.clip(best + F * (a - b) + F * (c - x), -5, 5)\n            elif strategy == 'rand/1/exp':\n                a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n                return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            strategy = np.random.choice(self.strategies)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F, strategy)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicEnsembleDE", "description": "Improved Differential Evolution algorithm with adaptive control of mutation and crossover parameters utilizing a dynamic ensemble of strategies for enhanced exploration-exploitation balance.", "configspace": "", "generation": 15, "fitness": 0.38131392766739924, "feedback": "The algorithm DynamicEnsembleDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.7687769533974698, 0.7856013454986829, 0.7870826972923404, 0.8076920132064098, 0.8221262592884194, 0.7841088329242556, 0.7963304931424203, 0.8020292896259351, 0.8088150792988796, 0.671549076627807, 0.6640955747279635, 0.6761499974748054, 0.6530865719721088, 0.6556242111172301, 0.6704869325765663, 0.6725056750925775, 0.6780067605315926, 0.6903104453469496, 0.1053702957818643, 0.1468103951337314, 0.09439693292319129, 0.11100106077806193, 0.10668596643728301, 0.09314482056496487, 0.1614212992619548, 0.11293251999013032, 0.11679912087145672, 0.09928653734342241, 0.11321370997313729, 0.10091337933648192, 0.09654671680006488, 0.08724781821979544, 0.08563119058827251, 0.10329314664380196, 0.10368685219035234, 0.08843312976083961, 0.9972920805951359, 0.9952418985260295, 0.9720649540562672, 0.9785555085781461, 0.9790068077115123, 0.9945635202997316, 0.9934986881459988, 0.9927251343526605, 0.9880218608720664, 0.48934436704317363, 0.5274532789846287, 0.4984612159861749, 0.47925289385016445, 0.45569812490846495, 0.44363516992206065, 0.4782339333165576, 0.44720421352565887, 0.4750464202434411, 0.6824092481866473, 0.7043302053987652, 0.7185764491144937, 0.7800439156903493, 0.7092213208559104, 0.7698637973333655, 0.6499345577412532, 0.7072034842713637, 0.7171331469417979, 0.4612971271517836, 0.5702164936173979, 0.4931017913039505, 0.4532476538301712, 0.5233832081869758, 0.3617756305263181, 0.45923737723970104, 0.5033549936901047, 0.5235172860968327, 0.01003789328902327, 0.016743009985898394, 0.009589795378535437, 0.4161051043829266, 0.40179649719042043, 0.5181261327248221, 0.43780984840455217, 0.4577272327038896, 0.4817352278429766, 0.4007692029770593, 0.36814156192437564, 0.40300718558470383, 0.4311778194575373, 0.3885823872935328, 0.3610325710846466, 0.43532926487005774, 0.4129753987069311, 0.4009461071594318, 0.5413984034014039, 0.5273449855086412, 0.5149937202237207, 0.47099637262351357, 0.5192734961046679, 0.5604127649420901, 0.6410313768295464, 0.5909203251219007, 0.6203669110193162, 0.14587199906526294, 0.15692612128488703, 0.19506237057708575, 0.15282125619611941, 0.16972231012386985, 0.16573239603348444, 0.1526480826337624, 0.12251708153343921, 0.12014911898064273, 0.32813903409669976, 0.30717254802895555, 0.29425501838738655, 0.3339052615344792, 0.33921380761721587, 0.3080434800999917, 0.33100100796760357, 0.3024520391448491, 0.05572249707464072, 0.6883739218972773, 0.7458961402769764, 0.6859344531311278, 0.6976325914022236, 0.6603500617746545, 0.7069808101566953, 0.6913047668466218, 0.6914383129755859, 0.6802051324157807, 0.11547396294517254, 0.0826629014536927, 0.08174664199328074, 0.07657200327821923, 0.08869263846730646, 0.10325268066705207, 0.09149333835868878, 0.08948934213657345, 0.11141912255706443, 0.19334069938155685, 0.15079461772057234, 0.15149140796329852, 0.17352441908331806, 0.12820385678272816, 0.14692556311898675, 0.1888534056875677, 0.1213280869087735, 0.13437791123665266, 0.3149244901648498, 0.3308216488336737, 0.3376541673656207, 0.3323699276097559, 0.3210610800529615, 0.3039937039781254, 0.36636547463775304, 0.41805324070525296, 0.34862142313631195, 0.25822996767281425, 0.31255548022602286, 0.257855809101581, 0.2650680773351871, 0.25181727108962937, 0.2780135100762008, 0.2653852791988994, 0.29524585599367514, 0.3061123664039582, 0.19371662233755182, 0.18196430328333646, 0.18889520634762325, 0.17697937621778637, 0.194382729177487, 0.19407091196742154, 0.1759368140230948, 0.189784513251401, 0.17496200427273634, 0.1736472358886949, 0.35294209468329085, 0.42400894539219003, 0.17658201250324634, 0.2834754664593424, 0.19814315420541795, 0.1788314221235705, 0.18957095763797638, 0.17764964476186473, 0.8386833283964591, 0.18127749234619783, 0.18328964248712176, 0.7930515647490556, 0.183765502917567, 0.8089523420504963, 0.18092194774443737, 0.1860549521703897, 0.6423174891367112, 0.7735250987036841, 0.20803331888387833, 0.164310052075901, 0.615916304890314, 0.20227684867124662, 0.5901895819342564, 0.21151348416389593, 0.21127515323399926, 0.7856443804862937, 0.17866233800630216, 0.18822367525475214, 0.180883032106821, 0.16849316692272387, 0.18965104760122264, 0.18681238327741145, 0.17397875219425818, 0.19897945328892652, 0.20231237485587095, 0.07495700444179454, 0.07562020638537237, 0.07931574639754924, 0.06306187187004852, 0.07032553840990807, 0.06931753927907924, 0.0716243340319268, 0.07365654766579377, 0.07541701344004248]}, "mutation_prompt": null}
{"id": "cbe1abdd-858d-4e40-875f-9d9fb9d77f87", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveDE", "description": "Improved Adaptive Differential Evolution algorithm with dynamic adaptation of mutation strategy and population diversity preservation for enhanced exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": 0.4602578065961314, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "c81f010e-c175-4fa9-ad1d-e9d7c065b8e0", "solution": "import numpy as np\n\nclass CrowdedDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n            \n            # Crowding-based selection\n            crowded_indices = np.argsort(fitness)\n            population = population[crowded_indices]\n            fitness = fitness[crowded_indices]\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "CrowdedDE", "description": "Enhancing population diversity by implementing a crowding-based selection mechanism to maintain a diverse set of solutions.", "configspace": "", "generation": 17, "fitness": 0.44775901869738516, "feedback": "The algorithm CrowdedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.27.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.841024300255802, 0.8518338748179449, 0.8415229931560626, 0.8713718599400423, 0.8649413585273148, 0.8726436823097852, 0.876234033046349, 0.8684903809614101, 0.8193242750265195, 0.7723635891805822, 0.7665776773860908, 0.7434259891419543, 0.748031505608466, 0.7282976144665096, 0.7381588078387371, 0.749161077897508, 0.7597566357508304, 0.7465305968880829, 0.11475549965968934, 0.15692312454184, 0.13454675959068285, 0.10248047199433763, 0.1207161825113866, 0.12438670850898614, 0.11432588573849933, 0.1495197925655697, 0.11236306314643918, 0.15362551358258503, 0.1394911844448392, 0.42051758771522374, 0.2664258233953999, 0.31650045024349305, 0.12058143803976595, 0.12805152760898908, 0.11442162275291734, 0.1244275577021754, 0.9683462436273589, 0.9384917105927904, 0.9777033941532738, 0.9653742560024401, 0.9658349208829926, 0.9776467917053904, 0.9437665470720055, 0.9834229973321303, 0.9675409797661507, 0.6418076354806247, 0.6134101096492343, 0.5769289390214449, 0.6283041615189375, 0.6568056863844967, 0.6429034560174871, 0.6176999330999837, 0.6636317922021542, 0.6374784340181369, 0.8130774002326836, 0.8303810422811622, 0.785112544601807, 0.8190381626122416, 0.8378282033415978, 0.7918747816807155, 0.8132216424361106, 0.8285517924665614, 0.8615490565358696, 0.6403753315162453, 0.5723124995335505, 0.5373986080379917, 0.6313107541121263, 0.5406151645517601, 0.5704844369048383, 0.6236173090097912, 0.5697349601692099, 0.540597892938238, 0.022233933909527104, 0.12247598909147928, 0.43694194998360936, 0.6216422312912937, 0.5695580066571438, 0.6227166337531493, 0.5118963839720287, 0.4660812872993081, 0.5791809633849521, 0.5500071912047728, 0.6007011240458586, 0.5401715014125983, 0.5998806808721251, 0.5127334049270273, 0.5036153937240713, 0.5664831652378564, 0.5307456402835267, 0.5327539225702277, 0.6360070838172743, 0.6648111048215677, 0.6530551296658147, 0.649171373279348, 0.63415371718685, 0.6203193131862157, 0.6802053055896333, 0.660715128633507, 0.6821133728932878, 0.20795046400686812, 0.341867638911308, 0.2850134590359714, 0.43974536773249173, 0.43786195280448315, 0.4823076048752083, 0.30085854777333665, 0.2895472213272431, 0.17794850155740294, 0.43584168718762195, 0.4945535358737124, 0.43933083853872457, 0.409210196631867, 0.4930498505063089, 0.4518109425316488, 0.4310607814894022, 0.432167638126013, 0.43235476204554113, 0.7637066191759572, 0.7668252471489578, 0.7936728364848396, 0.7967427230724601, 0.7591170224249937, 0.764698394467866, 0.7840339819320687, 0.7846293512968044, 0.7845814436767687, 0.11332070141194339, 0.27537556049976, 0.09476933697221934, 0.11223467088672623, 0.1250932853675718, 0.09111273597217573, 0.11646896597484413, 0.1339880654638813, 0.09415357296885452, 0.1466228041602029, 0.09301721002493157, 0.14203227511475325, 0.19058145506244495, 0.1372077837307243, 0.47534106457878456, 0.18829213506518827, 0.17502823559103364, 0.1592590240485965, 0.433179971816428, 0.3679439708365376, 0.48578408641459847, 0.46908483022399283, 0.4103010234123067, 0.44223020915700095, 0.5026398469672881, 0.46566636235623415, 0.45824597376840204, 0.338958683963522, 0.3543993807571183, 0.32475368866802923, 0.34366919071396196, 0.33445610823966176, 0.31628229087999826, 0.42316868434570276, 0.34848368702996513, 0.3962055314318812, 0.20659051999345568, 0.18521233090860045, 0.19122125302480075, 0.21238600096554616, 0.2139419567624279, 0.1937195093366636, 0.19768622738000496, 0.1874524346624592, 0.21597347521084398, 0.33819996385980233, 0.19569809020250317, 0.21874474775985175, 0.38379086762841874, 0.23549869175385973, 0.5813851694623648, 0.45469454505513573, 0.21177972575112225, 0.21085043838901008, 0.16924062309653487, 0.16960455545413444, 0.8475087028604654, 0.18493089600707868, 0.19789534677248233, 0.8475001175677792, 0.19563625710017019, 0.17838304382390946, 0.7553794779033596, 0.20068794562661574, 0.20874792035860834, 0.20651421563184835, 0.2029933096057145, 0.7981492381656026, 0.7255598814888695, 0.20958141753699722, 0.196207568976691, 0.19912323791377695, 0.25042704859557785, 0.18192173343900675, 0.1735814091011596, 0.17617917998497412, 0.16490932984876017, 0.19349889773490447, 0.16778007620599988, 0.16347387041112782, 0.18788602740746851, 0.08376751972033547, 0.08107974970640719, 0.07982447129363934, 0.07942180200217952, 0.09419936035435017, 0.07358870871223677, 0.076235047215369, 0.0975293057328076, 0.08403283253184002]}, "mutation_prompt": null}
{"id": "c74e6b12-5b1e-4df7-9671-98febfe3aca5", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "20c51ffc-37ba-4826-8a8f-9dff5796dc4f", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            perturbation = np.random.uniform(-1, 1, self.dim)\n            return np.clip(a + F * (b - c) + perturbation, -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhancing the mutation strategy by introducing a new mutation scheme based on random perturbation with a dynamic scaling factor to improve exploration capabilities and convergence speed.", "configspace": "", "generation": 19, "fitness": 0.17859662816803196, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.32641106664694697, 0.3300879139945344, 0.2947301687223851, 0.3321930105133335, 0.3018103348377885, 0.301933878146597, 0.32399293292196785, 0.3291016121526317, 0.3142176740245347, 0.011634723828602755, 0.009412649753015256, 9.999999999998899e-05, 9.999999999998899e-05, 0.005220511913215153, 0.0035789346124976973, 9.999999999998899e-05, 0.003093343527940884, 0.013958975980626342, 0.0996898760164997, 0.10030498747873517, 0.09943449892062783, 0.08668717204757104, 0.09624723094415077, 0.09228000612781961, 0.08425292924589645, 0.087708241804208, 0.08730941313509133, 0.08508797747009778, 0.09027691759424161, 0.08429296355832339, 0.08981975758920413, 0.07848882199886953, 0.08843758273728186, 0.07494451510242472, 0.12185189004472174, 0.0826847415748625, 0.9529489934478588, 0.9631668937020635, 0.9428856594211824, 0.9777828728533677, 0.9572801057658433, 0.9728150585000328, 0.9404221247001728, 0.9473403651032299, 0.9473717103345893, 0.1981076764209856, 0.2089836552302753, 0.17442693045863178, 0.17719921816455386, 0.2075037589278118, 0.19455824011415868, 0.18157459200198256, 0.17262154849784694, 0.19645622763335302, 0.24735453269750163, 0.20735590938030146, 0.21274954597591222, 0.2225421710426222, 0.22937679450211712, 0.20513660066679562, 0.213935015391283, 0.2132748242125031, 0.2236483604107672, 0.09715184897107643, 0.1073203759520791, 0.12562298565873098, 0.10364065429859826, 0.10764300524737713, 0.10211658960892167, 0.11272366971884606, 0.11302828421067701, 0.12162686946812862, 0.05695286377884712, 0.10285531244847024, 0.05622712949425368, 0.10493229363749124, 0.09708161657581438, 0.12621987752829278, 0.12289875658758631, 0.09854387020858779, 0.09682541062166694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06589342245659469, 0.10388338978185674, 0.0668865202172827, 0.08001442001886028, 0.09046588659183885, 0.024896439246363533, 0.07876673041801496, 0.07696669100489084, 0.05277437139013619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04235471974935612, 0.051339161583146775, 0.040098533837246375, 0.05739265810227501, 0.053842393013350365, 0.053029753933418355, 0.044564583214972475, 0.03810559165647742, 0.04249731780593624, 0.3138540777407628, 0.3129340970535829, 0.31762841935971997, 0.32502443725500685, 0.30334398374030525, 0.32265636930857866, 0.33807350431423144, 0.3294259884975692, 0.31671116062739024, 0.07893238822758597, 0.090254553829338, 0.08254709417201489, 0.08604224948122374, 0.09293449108795104, 0.07390151621907515, 0.07769276641356193, 0.09189333240616615, 0.08660124737670816, 0.14692283801982298, 0.1464312179618803, 0.15141201644504365, 0.17637872432456114, 0.15262012660609403, 0.13728848049604347, 0.1471896600714252, 0.16180429890787618, 0.15127868701631486, 0.24452362867918065, 0.23369357348340325, 0.22032417145870253, 0.22748255318255928, 0.22731631266124197, 0.22679981900107204, 0.2237549352438215, 0.23580536170441568, 0.22780607136095155, 0.1716417227062761, 0.16960556358459966, 0.180737428405505, 0.15816638378387948, 0.1710918554336751, 0.16990307972872465, 0.18527319366348005, 0.1710166696185994, 0.18270056983787764, 0.1835253134114696, 0.18187251736729382, 0.19067578598576151, 0.19313577405044802, 0.19653635329689367, 0.18487558529279835, 0.18869812636989292, 0.18281648527224825, 0.1950744476523466, 0.18385441967107874, 0.17855596088593229, 0.17386782593195638, 0.1903625295718635, 0.1718116490524626, 0.17591002178141313, 0.1770353593762446, 0.1766215196158597, 0.17037360388206124, 0.16668685370351377, 0.4013673646673107, 0.14931608906501803, 0.3674092121217405, 0.4294522585838424, 0.20342403412127252, 0.3232365087135908, 0.17922788458496342, 0.3833733027573626, 0.18381410150661903, 0.1665916022360967, 0.19782113960740422, 0.3167522711164149, 0.2628588017841663, 0.18223763548682148, 0.20595883455641018, 0.20705603234799996, 0.20440910788460542, 0.19506094414526498, 0.1801466590315307, 0.18669092351307903, 0.19321144788654243, 0.17421079414928298, 0.17730946813911452, 0.1761146545949419, 0.19473287363111114, 0.1970802953763262, 0.08055774402632809, 0.07667010188661572, 0.07147742085317099, 0.0784577122961011, 0.07939136939276814, 0.0861938642686868, 0.0707283598743137, 0.07960542667355097, 0.07393405218274329]}, "mutation_prompt": null}
{"id": "2b36e46a-ca70-452a-a25b-db1511452c38", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, niche_radius=0.1):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.niche_radius = niche_radius\n\n    def __call__(self, func):\n        def niching(population, fitness):\n            unique_pop = []\n            unique_fitness = []\n            for i, ind in enumerate(population):\n                is_unique = True\n                for j, unique_ind in enumerate(unique_pop):\n                    if np.linalg.norm(ind - unique_ind) < self.niche_radius:\n                        is_unique = False\n                        if fitness[i] < unique_fitness[j]:\n                            unique_pop[j] = ind\n                            unique_fitness[j] = fitness[i]\n                        break\n                if is_unique:\n                    unique_pop.append(ind)\n                    unique_fitness.append(fitness[i])\n            return np.array(unique_pop), np.array(unique_fitness)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n            population, fitness = niching(population, fitness)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhance the population diversity by introducing a niching mechanism to promote exploration and avoid premature convergence.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "f2eeaefb-80ce-4026-a78b-67a5a30d6a0c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed, solution quality, and diversity.", "configspace": "", "generation": 21, "fitness": 0.4602578065961314, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "7216a87c-e918-49b7-a490-024cb28ed8d4", "solution": "import numpy as np\n\nclass AdaptiveDE_Opposition:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        def opposition(x):\n            return -x\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                \n                # Integrate opposition-based learning\n                trial_opposition = opposition(trial)\n                new_fitness_opposition = func(trial_opposition)\n                if new_fitness_opposition < fitness[i]:\n                    trial = trial_opposition\n                \n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE_Opposition", "description": "Enhancing population diversity through opposition-based learning for improved exploration in the AdaptiveDE algorithm.", "configspace": "", "generation": 22, "fitness": 0.31593448493003473, "feedback": "The algorithm AdaptiveDE_Opposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.7048996774286391, 0.7096403056334561, 0.7160126611250233, 0.7422014868723379, 0.7216808437566138, 0.7319441843933159, 0.7422838468848233, 0.7030862386409037, 0.7165038908385528, 0.4950635821046909, 0.5364548310107131, 0.5710470981307212, 0.5243802543655137, 0.49707280203097604, 0.4926685714969872, 0.5240055334588078, 0.49405239459749783, 0.533343658011536, 0.10139709006715547, 0.09492142772892387, 0.10434947917164172, 0.1099489737619258, 0.13099548043486864, 0.10353826391820253, 0.11417149786429304, 0.08248509302040352, 0.09273195455132677, 0.09402428077074931, 0.10299638050841531, 0.0829238015079874, 0.09437554584807839, 0.09794128919916056, 0.10403047818763678, 0.0892864385103006, 0.10914098036971154, 0.10127261440453417, 0.9870930397865212, 0.9084366665422444, 0.9498609532039314, 0.9650776564050767, 0.9662563259718447, 0.9259109266088558, 0.9352627483857262, 0.9537295898966986, 0.9374073590349108, 0.32752679980011634, 0.33520379898135777, 0.3189518780385452, 0.3166800554147192, 0.3574354798063648, 0.3960762492296389, 0.40342047329720165, 0.38277667250557124, 0.3512223997362288, 0.5891203681535271, 0.6271094300010174, 0.6271380619806644, 0.6387117761129826, 0.5979660491163463, 0.6145441470341986, 0.595767891088643, 0.7289304308143296, 0.6901865734397266, 0.22233219573210095, 0.2186870121091854, 0.2699466648941128, 0.26390379722739077, 0.25747548069622517, 0.3207119444985803, 0.28854074798964024, 0.24057792594735128, 0.1864318854346949, 0.3155202074480903, 0.3518796467560895, 0.228050258122113, 0.25358235058176315, 0.2845067608413747, 0.23542818948502053, 0.2739402832452006, 0.19177685596063176, 0.28375135963276776, 0.18348570484529358, 0.23337063527397406, 0.22208392813012434, 0.24542781906499989, 0.2323725182518891, 0.16632496698828725, 0.25715766250215943, 0.23939140647031343, 0.2616755930927559, 0.33329174471027356, 0.3918694187914227, 0.2952262399199349, 0.37025617169163827, 0.37855530338064647, 0.34478319594547846, 0.40050939185096746, 0.40038441490239196, 0.3976229381264442, 0.056669908690538784, 0.11372464394119142, 0.05748617078434781, 0.07172334513736223, 0.048182726137372844, 0.10131710148698825, 0.10010276259238549, 0.11010522248800025, 0.11123651361447684, 0.23782810376913022, 0.19183883329250961, 0.2371679583540326, 0.24462976577570217, 0.21865865886820057, 0.22292368607568913, 0.22503036586210223, 0.18991916956550337, 0.2108531798648613, 0.5549947470389873, 0.5345701925543234, 0.5823424032159847, 0.5692032899070616, 0.5724744626680252, 0.5871967890271366, 0.6087187105785812, 0.5201136513725224, 0.5447600392813601, 0.08960885609766989, 0.09363745485628627, 0.09891323885984182, 0.08137353765052613, 0.08536547790714011, 0.09490216900614068, 0.07326885222121438, 0.08631608133631274, 0.08335925504921671, 0.1460498139629557, 0.15635829596277584, 0.1449204797418845, 0.13709554929030143, 0.17501998946576547, 0.13877852582711891, 0.18482958319739984, 0.12189028911969468, 0.15759026201706927, 0.3222833846971124, 0.2961989108335119, 0.32522338444847165, 0.30120614371415855, 0.3383774883462627, 0.28858409205561497, 0.3082915079984586, 0.31651986240558394, 0.3715275480204928, 0.2321217433430003, 0.19475208802579602, 0.22956682444777832, 0.23836047251214054, 0.23978245239810791, 0.21410582884818175, 0.2210140303383752, 0.24783206446036266, 0.23145953225989457, 0.1785583227655123, 0.18214115565711975, 0.19473181065002676, 0.21011781534345386, 0.1808880742069635, 0.18943067636586663, 0.2051881559594012, 0.18190453997826062, 0.20640552821795588, 0.19761802770353476, 0.1873380072141294, 0.18734465676642398, 0.1947883889248121, 0.19662912778166952, 0.20132852455234573, 0.19002983284865937, 0.16332112033325707, 0.18209743042131843, 0.16046184394176455, 0.7638250522303239, 0.7266909677809164, 0.6825384501414924, 0.18199604949688197, 0.16754901417219714, 0.5627650275181814, 0.1837383609042076, 0.182597658643203, 0.6686167862380158, 0.20077325594034978, 0.6114821288956485, 0.18804485392436476, 0.6088890932147665, 0.19060907574468477, 0.1970131618481299, 0.20108865136681664, 0.7398244910106451, 0.1847381897867384, 0.17287948599558078, 0.17941329116511429, 0.1799788589452579, 0.1860928023348224, 0.17654773158322512, 0.17607011128634054, 0.16903611411199526, 0.17734436638864304, 0.07109589438490516, 0.0679219664735532, 0.06484837895509932, 0.07681882988030453, 0.07652058104913284, 0.07354099149070858, 0.09068837926488627, 0.07593334601590762, 0.06824748287025773]}, "mutation_prompt": null}
{"id": "1ed1cd66-fbb5-4af4-995c-48822caf5365", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveDE", "description": "Improved AdaptiveDE algorithm with a dynamic population size strategy based on fitness diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.4602578065961314, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "df63414a-e23a-4654-ae5f-51fd1ac14d8a", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n        \n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = np.clip(self.F + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation parameter\n            adapt_CR = np.clip(self.CR + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive crossover parameter\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism to dynamically adjust mutation F and crossover CR parameters during the optimization process for Enhanced Differential Evolution.", "configspace": "", "generation": 24, "fitness": 0.4332283118590787, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.27.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8564165748710255, 0.8404329043961771, 0.859331928128738, 0.8620316422021805, 0.8670318269183178, 0.8621478107853824, 0.8740651190141725, 0.8368204085137985, 0.8642225095461677, 0.7622061346168529, 0.7784006502905066, 0.7540231838785706, 0.7555427810263091, 0.7636671543008711, 0.7608568222183998, 0.7479990821374543, 0.7780639281608888, 0.7567029155705345, 0.23399481758490293, 0.28006884224962525, 0.36323856312123093, 0.21597737674402506, 0.11823432452484484, 0.12519310738372247, 0.19654741737468406, 0.29096629814664443, 0.16869584193819265, 0.31465027693988046, 0.13951154658003728, 0.26667825407782664, 0.15136780500035363, 0.14762530363208592, 0.15088446020590163, 0.13134494082879178, 0.11627535962888791, 0.13202075740670915, 0.9853511263118662, 0.9607625569666639, 0.9678067199148785, 0.9675807180673995, 0.9836623890827808, 0.9482340469389, 0.9841576160321062, 0.9776659580461877, 0.9667401045949993, 0.6529541529277776, 0.6602230751156665, 0.6433848728048659, 0.5785679489285485, 0.6426111214243284, 0.6628783369686964, 0.6473615073725212, 0.6603565299178915, 0.6398774766895281, 0.8481346905211299, 0.8275280227300361, 0.7414530887545371, 0.8326267266097152, 0.8037329807416544, 0.7375929372591572, 0.8361019404893464, 0.8116898903432351, 0.7803127102632652, 0.5086403060455327, 0.49412163824431743, 0.5498534256699648, 0.4659377923057667, 0.5855690738210246, 0.4532440386497604, 0.530712998180364, 0.5831672859493351, 0.5770844085554921, 0.4311366495969726, 0.009724019844593035, 0.13165261931090044, 0.5346814496143567, 0.5663851949547268, 0.4809513208869509, 0.5011619021582798, 0.6020807658311134, 0.5363488744065101, 0.46460927622633785, 0.4641647705049139, 0.4867412450023335, 0.5385369681452029, 0.47318368522569276, 0.5050808558859051, 0.5129731659620343, 0.5273012259853254, 0.47271944395871346, 0.5962685461169308, 0.6000890883013952, 0.5515950701086814, 0.5781984201279022, 0.6115821032837787, 0.6111266186430828, 0.6046097501413987, 0.6395883721439531, 0.5956886114441382, 0.12624056233579317, 0.11252355178969642, 0.20441977260817878, 0.3225452688733198, 0.3548412947726326, 0.257633106676623, 0.1683808911090906, 0.2647506113181147, 0.22568580585202758, 0.3881768243327145, 0.39148677643918295, 0.3796461551492073, 0.39638059226243105, 0.3854184004091319, 0.40773861768444397, 0.37216396303168753, 0.3470789511343536, 0.38605696104085985, 0.7492608919008386, 0.7789056238287855, 0.7753097884162613, 0.7866884690947611, 0.7657282508502044, 0.7766396707655396, 0.777508332384506, 0.7592052692190371, 0.7716325880843062, 0.09435096177653979, 0.11186444589533873, 0.11107253342585865, 0.09657143829599668, 0.08339776369475871, 0.09333019081240468, 0.12652751951400731, 0.10988059726166144, 0.11371039188557475, 0.15849108826372904, 0.17921704449186815, 0.32006828858698877, 0.4845313815134278, 0.4224170936888909, 0.17027691973279357, 0.2141247914871962, 0.20794054680392848, 0.18786856340042957, 0.3953925347585524, 0.46672091660406323, 0.4163532819676261, 0.4422391558045816, 0.37696469675717936, 0.41375785026316314, 0.4953418457333597, 0.5294779714761724, 0.49391663826347765, 0.3187759414875202, 0.2952423564623905, 0.29713590833973635, 0.3168728900195906, 0.3473833299426812, 0.3158747566785831, 0.36172859350469266, 0.38318429014467414, 0.33363329675352205, 0.19553944837356585, 0.20592422829771173, 0.19460445127942816, 0.1953805795780681, 0.18450026867895586, 0.17907643486575342, 0.18431859059832234, 0.1897592668266258, 0.1870693056928271, 0.4484235440143518, 0.4226295228609588, 0.19200893995595447, 0.2685410063693242, 0.4133975403334672, 0.32113516681192456, 0.3556142552763908, 0.21172881924660591, 0.2569791232826203, 0.16856440248669402, 0.1505427268184174, 0.18735013907196874, 0.17539468392053736, 0.19246339804798163, 0.19178272063650892, 0.8537872659352764, 0.7776506361090132, 0.740210367063253, 0.1674044301016262, 0.20844922770408958, 0.16780431619209868, 0.19423819978321322, 0.20258709272609754, 0.7145488877422199, 0.20517734353779182, 0.19287497820254773, 0.1265390567990422, 0.1789990459531967, 0.18688551820389343, 0.18184808904458127, 0.18162275381782678, 0.17892666139747038, 0.18959082590245313, 0.18851888825075946, 0.1921297167523327, 0.17912455284315143, 0.07587871331110141, 0.07246877678464803, 0.0937427007530387, 0.08989173427686636, 0.08324156484847867, 0.06866781497397734, 0.08466881797263137, 0.0809888442175527, 0.07933627318305392]}, "mutation_prompt": null}
{"id": "4e475c74-3bfc-453a-98bf-146742115001", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "8a53c5ad-51e5-4701-a122-ef15275dd01c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "ecbe986d-d9e1-4630-a2f7-e3eee23047ea", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c) + levy_flight(len(x)) * np.random.normal(0, 1, len(x)), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Introducing Levy Flight for Improved Exploration", "configspace": "", "generation": 27, "fitness": 0.17310388687026923, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.32079813433520754, 0.3140832309696464, 0.30983794794036157, 0.3391725633909445, 0.35882753471249385, 0.3426668987622974, 0.31977172817525634, 0.3430897404625478, 0.3246752428232671, 0.01245737439789718, 0.015733241853020496, 0.03407803790872399, 0.019818281708807395, 0.017086208892486687, 0.0036343805531503515, 0.015114184819617349, 0.02937192345563666, 0.012291415390868532, 0.07561290965688172, 0.0834582056326586, 0.08050804297374048, 0.08651623795048913, 0.09118855040277307, 0.09167218152179502, 0.0909483450157953, 0.08258199114392173, 0.08177693091280103, 0.075901047130844, 0.0747252211528261, 0.07832860400654318, 0.0763733156287002, 0.07693104431420084, 0.07950486798027812, 0.07400736027971289, 0.08262377506678109, 0.07551586941405009, 0.9408309850131024, 0.9768111295063491, 0.9818374637620949, 0.9818289309684974, 0.9912238703947597, 0.9625596041269271, 0.9741101249450744, 0.9878195533388947, 0.9780935314621261, 0.17465485766304079, 0.17853347333772984, 0.18420987340861505, 0.18228407120790402, 0.17417865764166418, 0.18847243872719077, 0.17527082805866412, 0.177936436623497, 0.20302379944927373, 0.26814286186217073, 0.21433333948942113, 0.22122605155236086, 0.23782283513288727, 0.2193554786728742, 0.20339745806546172, 0.22126089783474534, 0.2124133145738264, 0.25621334598299905, 0.09714673097251347, 0.10661926642610087, 0.09328158715711765, 0.1015186317511545, 0.10676532667017713, 0.08641945336499379, 0.1125931014111835, 0.10790574572553047, 0.11614831741456033, 0.07638107202150402, 0.06093102944986606, 0.10404485126071139, 0.08794143503872565, 0.10935387414737019, 0.09500238715642972, 0.09312850558198404, 0.10316258792941813, 0.11698934508853875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07635701008592422, 0.06440317552607755, 0.06048188769482166, 0.06278144298022503, 0.057856241417043375, 0.03605140309410804, 0.07590052487526178, 0.07500737587350537, 0.045851993508889466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043835053084840925, 0.03469309990739333, 0.05425923414871103, 0.04061250388611137, 0.05394105609171185, 0.034100540241129074, 0.04174000396676514, 0.04179987775152916, 0.03762647605258007, 0.30739807053681933, 0.3057967822193056, 0.3243703312055206, 0.31889919049887383, 0.3431335733324714, 0.3204781853885067, 0.3061384051383782, 0.32509360070740123, 0.30733575656715006, 0.08228278119157062, 0.07477746144256148, 0.07944176809611092, 0.0921196732181041, 0.07982159859776061, 0.07768278284798258, 0.0859648978057348, 0.07170543582639222, 0.0698276351803726, 0.14718541842452137, 0.14175128614374066, 0.1760993270948864, 0.13081592779811202, 0.14931233537719835, 0.1454192119377984, 0.1341539412560553, 0.15117765104690684, 0.1695232864167434, 0.2351708771093608, 0.2353108283659684, 0.21248015426081368, 0.21870914499831973, 0.21269100212674263, 0.21597505043983933, 0.22730009357395098, 0.22443043842013388, 0.2278111532662449, 0.15681352131525583, 0.16015626226926816, 0.14845315684936633, 0.16201788638108972, 0.15781255456301901, 0.1612108002288214, 0.16492592863087963, 0.16130783953800998, 0.1588957003028465, 0.1686228512113297, 0.1790294735224779, 0.17521125397059645, 0.19744306578922088, 0.17554250564759566, 0.18837553810645902, 0.1793801851428114, 0.16666227823856372, 0.17842020892021648, 0.16733938541503268, 0.1692962985673464, 0.17336748591099516, 0.17095114091924168, 0.16871737958251454, 0.17047469427048623, 0.17310836386412798, 0.17444321762837023, 0.17443202087294574, 0.1795856674914792, 0.17350675090818113, 0.315524580104225, 0.26770157615935464, 0.18068415218851552, 0.17185965320844931, 0.18288047401860574, 0.175596458628535, 0.17545386954666797, 0.18802602047696337, 0.19299651259671913, 0.19906648624827072, 0.23630665245942373, 0.17933228774000254, 0.19070621077313477, 0.20573178693961558, 0.2411316615679373, 0.31502785245657183, 0.18418949058290923, 0.19645923653683106, 0.2057169958453401, 0.1839713777214047, 0.17656390858723736, 0.1816018816424958, 0.20947645519752023, 0.17698295049058343, 0.1878175179716327, 0.06923251018052146, 0.06793434721222968, 0.08502049603421169, 0.07154966953825348, 0.07044803693013468, 0.059980150669384, 0.06232173833160437, 0.07772445485506974, 0.06937370432721657]}, "mutation_prompt": null}
{"id": "e3b6c17b-923c-4b6c-87aa-827ec2176ccd", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "633f44e1-1e21-481f-80a6-e0e403e26c72", "solution": "import numpy as np\n\nclass ImprovedDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDE", "description": "Improved Differential Evolution algorithm with dynamic adaptation of mutation and crossover parameters using a hybrid strategy for enhanced convergence and solution quality.", "configspace": "", "generation": 29, "fitness": 0.4602578065961314, "feedback": "The algorithm ImprovedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "6d012237-7b0a-42ec-9875-1222d11251eb", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        pop_size_hist = [self.pop_size]  # History of population sizes\n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n            \n            if _ % (self.budget // 10) == 0:  # Dynamic population size adaptation\n                unique_parents = np.unique(population, axis=0)\n                self.pop_size = min(40, int(np.sqrt(len(unique_parents)) * 5))  # Adjust population size\n                pop_size_hist.append(self.pop_size)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation strategy to enhance exploration and exploitation balance in the Enhanced Differential Evolution algorithm.", "configspace": "", "generation": 30, "fitness": 0.4602578065961314, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "5f916f8b-25ac-497b-91d9-f13d27a91773", "solution": "import numpy as np\n\nclass HybridDEPSO:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "HybridDEPSO", "description": "Utilizing a dynamic mutation strategy based on a hybrid approach combining Differential Evolution and Particle Swarm Optimization to enhance global exploration and exploitation capabilities.", "configspace": "", "generation": 31, "fitness": 0.4602578065961314, "feedback": "The algorithm HybridDEPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "007b9b97-1ea4-4bdb-aafc-7f118bd4e5f9", "solution": "import numpy as np\n\nclass CrowdedDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        super().__init__(budget, dim, F, CR, pop_size)\n\n    def __call__(self, func):\n        def crowding_distance(population, fitness):\n            dist = np.zeros(len(population))\n            sorted_indices = np.argsort(fitness)\n            dist[sorted_indices[0]] = dist[sorted_indices[-1]] = np.inf\n            for i in range(1, len(population) - 1):\n                dist[sorted_indices[i]] += fitness[sorted_indices[i + 1]] - fitness[sorted_indices[i - 1]]\n            return dist\n\n        def select_parents(population, fitness, num_parents):\n            crowd_dist = crowding_distance(population, fitness)\n            return population[np.argsort(crowd_dist)][-num_parents:]\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)\n            new_population = []\n            for i, target in enumerate(population):\n                parents = select_parents(population, fitness, 3)\n                mutant = mutate(target, parents, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "CrowdedDE", "description": "Improving diversity maintenance by incorporating crowding distance into the selection process.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "e032c835-7d11-4445-ac01-633dd498c706", "solution": "import numpy as np\n\nclass DynamicPopSizeDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n            \n            # Dynamic population size\n            if _ % 100 == 0:  # Change population size every 100 iterations\n                if self.pop_size > 5:\n                    self.pop_size -= 1\n                elif self.pop_size < 50:\n                    self.pop_size += 1\n                population = np.vstack((population, np.random.uniform(-5, 5, (1, self.dim))))\n                fitness = np.append(fitness, func(population[-1]))\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicPopSizeDE", "description": "Utilizing a dynamic population size strategy to adapt the algorithm to the problem landscape efficiently.", "configspace": "", "generation": 33, "fitness": 0.4423362047522037, "feedback": "The algorithm DynamicPopSizeDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8489200185015493, 0.8515095289750452, 0.849683605779882, 0.8512956863766226, 0.8490849304004192, 0.8538710462388267, 0.860484223874006, 0.8372292393349725, 0.8554744265031662, 0.7233621240976121, 0.7608358425778969, 0.7122032055073568, 0.7438393010009179, 0.7483348419561486, 0.74278087719859, 0.7553639403613401, 0.72347746297516, 0.7535112589583449, 0.12555029162003506, 0.23121557079770072, 0.18496195588244835, 0.12102872212549098, 0.12156092862679724, 0.12081551872046714, 0.12932621228021235, 0.3923616820693242, 0.1157925854608759, 0.14751208917546899, 0.12293276814706477, 0.1120013771749444, 0.14853212361586898, 0.13369008252676262, 0.10604123356950967, 0.11443787869932898, 0.13927016428786299, 0.12665061376970466, 0.975842767167604, 0.974975911260818, 0.9869331140395272, 0.9754208922558082, 0.9742352840141181, 0.9681719036693108, 0.9896501380411566, 0.9229301770393998, 0.9561993820828547, 0.5549743996940364, 0.5657937519483982, 0.5814867059761744, 0.6062175876258569, 0.6009450911807204, 0.6283302668291378, 0.620146216759617, 0.6464649037018251, 0.08735207998327643, 0.7632610668833091, 0.8203982427554615, 0.7320414568108746, 0.8248277707163649, 0.7919740369600643, 0.8411829887258553, 0.741232840493592, 0.8189315213103386, 0.7927003411888772, 0.510430156962726, 0.6325616357064482, 0.5271131772734237, 0.5477301384315212, 0.5630427397066537, 0.5936758687396385, 0.5417987302001586, 0.5560618034303695, 0.6166479796467361, 0.49614190857775975, 0.39896032503798073, 0.5701659257183933, 0.5985500722630832, 0.5240963971369117, 0.597971059981858, 0.5696194844935654, 0.5515975562115406, 0.5890040627565721, 0.5216132263157855, 0.5325329034046573, 0.5389124636175724, 0.53029616491464, 0.5321491848516422, 0.4795236935406352, 0.46978797399948613, 0.4858465872982012, 0.5285029695590727, 0.6220334013725379, 0.6553749126162342, 0.6054845365183077, 0.6167748737843297, 0.6190037205477477, 0.6289012583018241, 0.6704714967188635, 0.6504648276665894, 0.6468985214274601, 0.1317180382918296, 0.24428307079573164, 0.09500437252294336, 0.41054198820928856, 0.4443718124035805, 0.30821329367645545, 0.29211471553719826, 0.27705829823236505, 0.2756448282763073, 0.41575811940632257, 0.4332932189841391, 0.4047006542729975, 0.4207676910896214, 0.4340722359063307, 0.43328076572340213, 0.384964645112697, 0.36644849349272357, 0.4546881262327984, 0.7553589861029157, 0.7553125207243399, 0.7914694522384152, 0.7665986330296957, 0.7738525752977239, 0.7637131292172368, 0.7656861761488616, 0.7666112703814724, 0.7748295187836585, 0.0907180312570306, 0.08629956688740636, 0.1089319755363447, 0.14781704001305462, 0.1152716580623504, 0.11723897208051526, 0.10104527572874444, 0.12449028339402757, 0.09308144717627131, 0.24234568851133909, 0.16713154061210245, 0.17340156845695276, 0.23381109026613367, 0.2743855248149658, 0.16566659052275245, 0.23983984373186162, 0.1836746598713096, 0.1941751507611017, 0.4477542665834172, 0.39250957952908516, 0.40499303093069317, 0.37807675835491805, 0.39616332466222637, 0.4013164195810178, 0.4221287262593333, 0.4582906084586893, 0.42083187285435364, 0.35441178978841115, 0.34998705898535687, 0.3028620806269652, 0.3607345588765951, 0.31865850364324777, 0.33204242574449305, 0.3484882032294703, 0.3269745928106187, 0.3685960582675616, 0.19773329629051117, 0.18727692385311234, 0.1844405584915627, 0.1802602688151499, 0.20399754280059657, 0.17687223342886882, 0.17512353169846606, 0.19186045934368967, 0.18668290066695636, 0.41495869017563913, 0.4427947472904755, 0.1853092028968567, 0.55336389253297, 0.1924609810325253, 0.19027897058612953, 0.2205458755073504, 0.3246152034322711, 0.22264354600701408, 0.8023663462913492, 0.17167772050942454, 0.8680617959823046, 0.8580892946419728, 0.1884344453662541, 0.19205368010093893, 0.825412273879259, 0.8234590448302272, 0.19374590206583542, 0.20521738455707383, 0.16713619922936596, 0.20579832360416717, 0.7337821240269997, 0.7307281597679984, 0.1993056090367351, 0.19738092635878135, 0.20564956072125995, 0.20972848491649831, 0.20373059993347165, 0.1844352103659609, 0.17796565936834907, 0.19545229439904643, 0.17394858842285665, 0.1858623210179503, 0.25232318993375114, 0.1963083217601539, 0.19103578708000646, 0.08095860419775913, 0.07147491663426042, 0.08120559100786251, 0.07670573118764079, 0.07557504801751913, 0.0862811304375819, 0.07703180119128317, 0.08136122984336502, 0.08190976696578367]}, "mutation_prompt": null}
{"id": "ee6f7652-395e-4827-af2e-20563ee58afb", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)\n            new_population = []\n            \n            # Dynamic population size adjustment based on convergence rate\n            if _ % (self.budget // 10) == 0:\n                convergence_rate = sum(fitness) / (len(population) * min(fitness))\n                if convergence_rate < 0.6:\n                    self.pop_size += 5\n                elif convergence_rate > 1.5:\n                    self.pop_size = max(5, self.pop_size - 5)\n                \n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Improving the convergence of the algorithm by introducing a mechanism to dynamically adjust population size based on the convergence rate.", "configspace": "", "generation": 34, "fitness": 0.4602578065961314, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "f782f9fe-a726-4392-aea8-58e52ef35cb6", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            pop_size_factor = 1 + 0.5 * np.sin(0.5 * np.pi * _ / self.budget)  # Dynamic adjustment of population size\n            pop_size = int(self.pop_size * pop_size_factor)\n            for i, target in enumerate(population[:pop_size]):\n                mutant = mutate(target, population[:pop_size], adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Introduce a mechanism to dynamically adjust the population size during the optimization process based on the search space exploration.", "configspace": "", "generation": 35, "fitness": 0.4602578065961314, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "7357f3ae-76c6-4c11-9c20-55f2a346ca10", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, F_scale=1.0):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.F_scale = F_scale\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * self.F_scale * (b - c), -5, 5)\n        \n        # Rest of the code remains the same\n\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhancing population diversity by introducing a mechanism to promote exploration through adaptive mutation scaling based on individual fitness.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'population' is not defined\").", "error": "NameError(\"name 'population' is not defined\")", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "d172c4c9-c58e-41d7-8e0a-5e828ce79f6e", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c, d = population[np.random.choice(len(population), 4, replace=False)]  # Updated to select 4 individuals for mutation\n            return np.clip(a + F * (b - c) + F * (d - x), -5, 5)  # Introducing dynamic mutation strategy with an additional vector\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Introducing Dynamic Mutation Strategy to adaptively adjust the mutation strategy during optimization to enhance exploration-exploitation balance.", "configspace": "", "generation": 37, "fitness": 0.2840965960985727, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.662259490144207, 0.6393427845498438, 0.6994163474571413, 0.7053127897316893, 0.6958076562532887, 0.7229983448562595, 0.7215173312755987, 0.7083534863769705, 0.696697763969865, 0.49384046487777344, 0.5144208691842806, 0.5030732920969763, 0.46594426857258164, 0.5307518174658787, 0.43883950418690454, 0.5584581889403908, 0.5131627668682028, 0.5375320969426041, 0.09138916724949198, 0.08611056454274091, 0.09258502845406313, 0.09219372322577324, 0.08530977901494075, 0.08900469062564609, 0.08421871303636885, 0.10969074103778043, 0.08165212929292409, 0.07716913707191486, 0.09101778735049049, 0.08591398082395407, 0.07530958794466147, 0.08674833623607903, 0.08532940562666735, 0.07328178269148122, 0.08878388845465124, 0.08186067499388394, 0.9953497112140696, 0.9921108970411515, 0.9426425754996081, 0.9556024258018465, 0.9848492956473021, 0.9728016475589539, 0.9710270868081432, 0.9833444972028181, 0.9803564629101577, 0.3056518333810302, 0.30320914904517815, 0.3420305761937954, 0.3225189671302332, 0.353871668644971, 0.3246271870408879, 0.3301591782350257, 0.08825977970962229, 0.35776373909130776, 0.4936594713851631, 0.29833674871753124, 0.5671446552777131, 0.6088667284863643, 0.50235458528016, 0.5954304527153048, 0.5859227656380203, 0.5483676755969056, 0.6135786939030933, 0.19975947362570212, 0.20960808808385922, 0.20443896753254553, 0.16532800275571136, 0.20330709961305227, 0.20825066999490505, 0.29566590754550526, 0.2183686036568614, 0.1899353789971706, 0.12069515803168618, 0.288426340812165, 0.02203966586704942, 0.24735165862557373, 0.24483993096490708, 0.20998680932179525, 0.21475040017138525, 0.13394718879036904, 0.2265801578685116, 0.16863833313802934, 0.18868646081485918, 0.1947378806301252, 0.17181120532040295, 0.17996339608151923, 0.2136117177239969, 0.19609460970722103, 0.18085556897331923, 0.1418838842433381, 0.3719425900053418, 0.3194104503233147, 0.3208262680947682, 0.3035966655358555, 0.23713594945905603, 0.3183114577048035, 0.37031350407285746, 0.3564011187188666, 0.3502155432581239, 0.01404681601186053, 0.04905963945381264, 0.04221284304754369, 0.05288710141597508, 0.04316422004394804, 0.06278430060047158, 0.05864682085118633, 0.05719538369821098, 0.0654749088133798, 0.19804024376393004, 0.18452073071614505, 0.19739507417365265, 0.2045868142459324, 0.1961246216523581, 0.22783167503883683, 0.19979508815947156, 0.20827672313601997, 0.19151170757771618, 0.5103969232613841, 0.5791522754426014, 0.5421578621248686, 0.5239233186088066, 0.540392128693321, 0.5872348212669773, 0.5260934779899926, 0.5160379323687481, 0.5448530100335591, 0.08782611327086765, 0.09920543702413598, 0.09256151814522728, 0.07666100310249113, 0.08741184554459236, 0.08181599065693357, 0.08262382010280611, 0.06877295162385832, 0.07943633037105413, 0.24151241708520077, 0.14077772456620152, 0.14143045452515346, 0.13771350561950857, 0.14408535432924197, 0.24319249732547754, 0.15902072181330074, 0.13014439510414288, 0.18299802845817448, 0.2878332216665461, 0.2822601714953674, 0.2535871359273346, 0.2594599553472755, 0.2647074442880958, 0.25569128093005145, 0.2848811156909119, 0.2715961483306685, 0.25540747969894395, 0.209949257341691, 0.20279410731795233, 0.18442724747859873, 0.21849171407636958, 0.1925298238638723, 0.17835121954624777, 0.19634283805247787, 0.22763559662972366, 0.2081669234505965, 0.170273541226325, 0.20029831382422603, 0.1737637126865137, 0.17802038447999025, 0.16215098262686856, 0.17167662339003997, 0.18606153453729346, 0.1675887338309876, 0.1753771178980451, 0.17570787827036716, 0.16459198551814713, 0.1783242247209702, 0.1674923153639063, 0.1697041485212034, 0.17437115978916262, 0.17509861769783164, 0.17977713529089923, 0.16480763248039543, 0.500106136644437, 0.44361569400838075, 0.16796858433344752, 0.48558894323562696, 0.5894663734407932, 0.6319307497718456, 0.1852423491877605, 0.19891627163776493, 0.19019749532510655, 0.15461634310759675, 0.19817214843061315, 0.18624559561478515, 0.3926763430992267, 0.4062273312382636, 0.21128034217884584, 0.12587339150343413, 0.20578076310005622, 0.12713632414807885, 0.18287625723024792, 0.17777183193329094, 0.19662237106715352, 0.18265170254272511, 0.20064391553200134, 0.2189253005022015, 0.17641698065982858, 0.1878198485992747, 0.17736770544341274, 0.06949714146649, 0.06943534826672026, 0.07079739208991609, 0.06717662194419483, 0.09308450735719165, 0.06489081250078654, 0.06387406293256703, 0.059092607643254635, 0.06184093278452307]}, "mutation_prompt": null}
{"id": "9af22169-465d-4f09-888a-35a8f29f916d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "4e39d1f1-2b77-492b-8ced-98279be40e55", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "3ba29c82-cb9c-42f2-a664-fe82c39ece66", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size  # Dynamic Population Size Adaptation\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))  # Initialize population with dynamic size\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Introducing dynamic population size adaptation to Enhanced Differential Evolution to enhance exploration and exploitation balance.", "configspace": "", "generation": 40, "fitness": 0.4602578065961314, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "b9fcc996-75ee-4ae2-8786-154c9c5f4f60", "solution": "import numpy as np\n\nclass EnhancedDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, strategy=\"best\"):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.strategy = strategy\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            if self.strategy == \"best\":\n                return np.clip(a + F * (b - c), -5, 5)\n            elif self.strategy == \"current-to-best\":\n                d = population[np.argmin(fitness)]\n                return np.clip(x + F * (a - x) + F * (b - c) + F * (d - x), -5, 5)\n        \n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedDE", "description": "Enhanced Differential Evolution with self-adaptive control of mutation and crossover parameters for improved exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "a3cd63cd-a122-4398-bbd1-16f874d004e4", "solution": "import numpy as np\n\nclass ImprovedDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDE", "description": "Improved Differential Evolution algorithm with adaptive strategies for mutation and crossover parameters to enhance convergence speed and solution quality.", "configspace": "", "generation": 42, "fitness": 0.4602578065961314, "feedback": "The algorithm ImprovedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "d34ca9a4-8499-4741-ab47-ed41a5ae3af0", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            cauchy_dist = np.random.standard_cauchy(self.dim)\n            return np.clip(a + F * (b - c) + cauchy_dist, -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhance the mutation strategy by incorporating a Cauchy distribution for better exploration capabilities.", "configspace": "", "generation": 43, "fitness": 0.1461343287660838, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.24484689437284834, 0.2599771150630029, 0.2629285454287388, 0.24891062560431798, 0.2756995706113655, 0.2486497663506051, 0.2617654191196117, 0.27212684965638256, 0.2564703206210692, 0.011827106105167906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06544195203590464, 0.09523039301553504, 0.06190182915810405, 0.07664753572704375, 0.061127624172853, 0.07685711299827525, 0.054205171446219946, 0.07094639115851986, 0.08377351174357572, 0.06956247680788674, 0.06588584507058004, 0.05388753233293342, 0.07299998778982575, 0.055730066872837214, 0.061739137260504284, 0.04423250059613926, 0.06201258509821417, 0.05481478493285197, 0.9963853246501478, 0.9738001339917713, 0.9679617393304312, 0.9728314813014323, 0.9752952389442483, 0.9738982653988008, 0.9797854245765811, 0.9755482020666757, 0.9767424689134167, 0.12387828798168832, 0.13231988294376806, 0.12283914530300577, 0.12250127059707594, 0.12149031902948937, 0.13264308530646762, 0.1420795976418604, 0.13313818881587236, 0.13348500806022934, 0.17639458997872737, 0.17334448943643888, 0.19555122409061643, 0.16883105067957227, 0.16776167002550413, 0.17293968129648962, 0.15722161708660864, 0.1599663754634152, 0.16963204972910662, 0.031167065297851293, 0.0370291565131462, 0.05057644002323036, 0.07784151843662968, 0.05237079028992753, 0.036336064496235276, 0.06633838745809828, 0.056277290458058404, 0.08361188436841771, 0.03510540471692691, 0.030391925414690157, 0.03014027874403491, 0.02391512904654769, 0.04080436625704764, 0.043550077675221344, 0.05863974082327328, 0.015223175642895104, 0.014955665341087832, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048516537811311156, 0.03923757201204403, 0.0602913869779137, 0.01620179131637578, 0.013432165130473406, 0.046718905737509364, 0.051364552635033034, 0.02463749993545572, 0.050926170434252294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03146378793635085, 0.01243653755163976, 0.01242110398392382, 0.01295033802285106, 0.012452536619423693, 0.01776865535601213, 0.008815532559320327, 0.02538031532522711, 0.02387278514627411, 0.2381908228612537, 0.25800569153126174, 0.2508166440710631, 0.24753132147863888, 0.2715639540112845, 0.28456686160047284, 0.2729008975258903, 0.2621957475248079, 0.24978297194008792, 0.07192262461728693, 0.05723348539925888, 0.08129559845787193, 0.05689649619613524, 0.06458851055648085, 0.06310975009694175, 0.05635119044311465, 0.05976096876062764, 0.06537167093310958, 0.12724061298656908, 0.17803691032574576, 0.15205003646668447, 0.13030599410781396, 0.13811663887306458, 0.13082569951502843, 0.14283678100123853, 0.13180668650896898, 0.15595512734944061, 0.1900516858548834, 0.19116380598975347, 0.18197471398360898, 0.16946278498571987, 0.16979264609042966, 0.17501622894818525, 0.18347054852263722, 0.19880869370982313, 0.17849099220324605, 0.14400961339019758, 0.13377679871188797, 0.14036660967135972, 0.125100415166711, 0.15462709756081494, 0.1196326266496357, 0.12690992354336372, 0.14331620331423056, 0.1280988044659902, 0.16195772506574613, 0.18185751803835304, 0.1668136371433775, 0.15897767612753722, 0.15995961780869672, 0.1557569550235699, 0.16245957401179512, 0.15791038858122886, 0.17441316255869765, 0.1533031182717487, 0.15581244700852837, 0.16152997246602374, 0.16304064243100946, 0.15670004238731639, 0.16926716254818297, 0.157667115702394, 0.1674139639470834, 0.15578800101447832, 0.16117592391847957, 0.15228868000510143, 0.17311921370875916, 0.18394630777616894, 0.15476353641385698, 0.1622461800816487, 0.16649603955817271, 0.1548037763558756, 0.16463233829397017, 0.22072243060822017, 0.15722602434192867, 0.1725772648507491, 0.13874459846444498, 0.15062380826686617, 0.13714539016347393, 0.19734054842258442, 0.19118934720219005, 0.19803580999602388, 0.18784287546013378, 0.18821971196210274, 0.18503512850443038, 0.19213749180929585, 0.17127829817892126, 0.19087247818596054, 0.18938300775913008, 0.19271238676400337, 0.19247180207362402, 0.049460018692416674, 0.05247776712808627, 0.061852388407389824, 0.05771392496031402, 0.057760712580700924, 0.07648361434554085, 0.07357315716604118, 0.05141266872630845, 0.05906475501772712]}, "mutation_prompt": null}
{"id": "da1a59aa-2878-40c1-814d-60008ede8ab6", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveDE", "description": "Improved AdaptiveDE algorithm with a self-adaptive mechanism for parameter control to enhance exploration-exploitation balance in optimization.", "configspace": "", "generation": 44, "fitness": 0.4602578065961314, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "298692b1-dcb6-48bd-b3de-f9da4267389f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            cauchy = np.random.standard_cauchy(self.dim)\n            return np.clip(a + F * (b - c) + cauchy, -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhance the mutation operator by incorporating a Cauchy distribution to explore the search space more effectively.", "configspace": "", "generation": 45, "fitness": 0.1461343287660838, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.24484689437284834, 0.2599771150630029, 0.2629285454287388, 0.24891062560431798, 0.2756995706113655, 0.2486497663506051, 0.2617654191196117, 0.27212684965638256, 0.2564703206210692, 0.011827106105167906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06544195203590464, 0.09523039301553504, 0.06190182915810405, 0.07664753572704375, 0.061127624172853, 0.07685711299827525, 0.054205171446219946, 0.07094639115851986, 0.08377351174357572, 0.06956247680788674, 0.06588584507058004, 0.05388753233293342, 0.07299998778982575, 0.055730066872837214, 0.061739137260504284, 0.04423250059613926, 0.06201258509821417, 0.05481478493285197, 0.9963853246501478, 0.9738001339917713, 0.9679617393304312, 0.9728314813014323, 0.9752952389442483, 0.9738982653988008, 0.9797854245765811, 0.9755482020666757, 0.9767424689134167, 0.12387828798168832, 0.13231988294376806, 0.12283914530300577, 0.12250127059707594, 0.12149031902948937, 0.13264308530646762, 0.1420795976418604, 0.13313818881587236, 0.13348500806022934, 0.17639458997872737, 0.17334448943643888, 0.19555122409061643, 0.16883105067957227, 0.16776167002550413, 0.17293968129648962, 0.15722161708660864, 0.1599663754634152, 0.16963204972910662, 0.031167065297851293, 0.0370291565131462, 0.05057644002323036, 0.07784151843662968, 0.05237079028992753, 0.036336064496235276, 0.06633838745809828, 0.056277290458058404, 0.08361188436841771, 0.03510540471692691, 0.030391925414690157, 0.03014027874403491, 0.02391512904654769, 0.04080436625704764, 0.043550077675221344, 0.05863974082327328, 0.015223175642895104, 0.014955665341087832, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048516537811311156, 0.03923757201204403, 0.0602913869779137, 0.01620179131637578, 0.013432165130473406, 0.046718905737509364, 0.051364552635033034, 0.02463749993545572, 0.050926170434252294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03146378793635085, 0.01243653755163976, 0.01242110398392382, 0.01295033802285106, 0.012452536619423693, 0.01776865535601213, 0.008815532559320327, 0.02538031532522711, 0.02387278514627411, 0.2381908228612537, 0.25800569153126174, 0.2508166440710631, 0.24753132147863888, 0.2715639540112845, 0.28456686160047284, 0.2729008975258903, 0.2621957475248079, 0.24978297194008792, 0.07192262461728693, 0.05723348539925888, 0.08129559845787193, 0.05689649619613524, 0.06458851055648085, 0.06310975009694175, 0.05635119044311465, 0.05976096876062764, 0.06537167093310958, 0.12724061298656908, 0.17803691032574576, 0.15205003646668447, 0.13030599410781396, 0.13811663887306458, 0.13082569951502843, 0.14283678100123853, 0.13180668650896898, 0.15595512734944061, 0.1900516858548834, 0.19116380598975347, 0.18197471398360898, 0.16946278498571987, 0.16979264609042966, 0.17501622894818525, 0.18347054852263722, 0.19880869370982313, 0.17849099220324605, 0.14400961339019758, 0.13377679871188797, 0.14036660967135972, 0.125100415166711, 0.15462709756081494, 0.1196326266496357, 0.12690992354336372, 0.14331620331423056, 0.1280988044659902, 0.16195772506574613, 0.18185751803835304, 0.1668136371433775, 0.15897767612753722, 0.15995961780869672, 0.1557569550235699, 0.16245957401179512, 0.15791038858122886, 0.17441316255869765, 0.1533031182717487, 0.15581244700852837, 0.16152997246602374, 0.16304064243100946, 0.15670004238731639, 0.16926716254818297, 0.157667115702394, 0.1674139639470834, 0.15578800101447832, 0.16117592391847957, 0.15228868000510143, 0.17311921370875916, 0.18394630777616894, 0.15476353641385698, 0.1622461800816487, 0.16649603955817271, 0.1548037763558756, 0.16463233829397017, 0.22072243060822017, 0.15722602434192867, 0.1725772648507491, 0.13874459846444498, 0.15062380826686617, 0.13714539016347393, 0.19734054842258442, 0.19118934720219005, 0.19803580999602388, 0.18784287546013378, 0.18821971196210274, 0.18503512850443038, 0.19213749180929585, 0.17127829817892126, 0.19087247818596054, 0.18938300775913008, 0.19271238676400337, 0.19247180207362402, 0.049460018692416674, 0.05247776712808627, 0.061852388407389824, 0.05771392496031402, 0.057760712580700924, 0.07648361434554085, 0.07357315716604118, 0.05141266872630845, 0.05906475501772712]}, "mutation_prompt": null}
{"id": "b8e8cf8d-9f07-48ea-a76e-f2aea790811d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "19ef3e4c-44ab-47c9-9cd3-7298f7e84d23", "solution": "import numpy as np\n\nclass DynamicADE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F, F_min=0.2, F_max=0.8):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            F = F_min + (F_max - F_min) * np.random.rand()  # Dynamic F within range\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR_min=0.1, CR_max=0.9):\n            CR = CR_min + (CR_max - CR_min) * np.random.rand()  # Dynamic CR within range\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicADE", "description": "Enhanced Differential Evolution with dynamic mutation strategy and adaptive crossover probability for improved exploration and exploitation balance.", "configspace": "", "generation": 47, "fitness": 0.39037018814959046, "feedback": "The algorithm DynamicADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8992585142369705, 0.9042231102908669, 0.904871686317954, 0.8910098237046247, 0.9058359490869109, 0.9135721938752611, 0.8943763730364259, 0.9072820820968768, 0.8974926934239663, 0.8295596009153938, 0.8196978419096227, 0.8305871352284827, 0.8251334561092103, 0.8199438093872973, 0.8052043865932168, 0.8160896614620123, 0.8186490166176206, 0.8154589400136374, 0.6745931429768103, 0.6707393948643362, 0.7147487601452793, 0.70133354535971, 0.6464020745215227, 0.6943258955687805, 0.6059892123370977, 0.6932442409530308, 0.6835857919844868, 0.17916917246011, 0.18056812828639812, 0.6369368370358457, 0.5992589028600619, 0.6126274867588335, 0.17788308632839656, 0.17212990050685617, 0.15109487732149718, 0.6473605233776757, 0.9601637540732374, 0.9444528959758556, 0.9554403731240838, 0.965672423897302, 0.9643518876118159, 0.9624046087241838, 0.9574254175537015, 0.9620517453865085, 0.9688225215034131, 0.6355679290978966, 0.5719054205549193, 0.3944755803601593, 0.6194907092831665, 0.4379625353016441, 0.6193435177992765, 0.44090283421990384, 0.31863844936458185, 0.37433951600728566, 0.7573889702271306, 0.7266624697601158, 0.7792324650608744, 0.7743759460987246, 0.20840887017402387, 0.6907113794666044, 0.7229181981488189, 0.23711491831440867, 0.807720889002837, 0.15055417663614423, 0.2646371540324176, 0.25034024532489463, 0.15754242567176735, 0.17578082362374992, 0.37665852781046283, 0.17338996183245858, 0.1328231983937942, 0.16299584964558111, 0.2608304694152579, 0.1439570709263437, 0.20892295779101977, 0.2062025492026376, 0.21734191377120038, 0.18341894288725924, 0.13043897324947962, 0.16769266340178912, 0.1700379897930261, 0.19435611417178011, 0.09315230699635069, 0.1279415802701651, 0.17568347382333105, 0.09536019412717434, 0.09939772463983831, 0.1622514213611257, 0.22359624244412113, 0.18264332374969094, 0.14209944972025512, 0.09848824178787308, 0.11612580838698416, 0.10837834958702552, 0.1982078018477933, 0.07388167911185006, 0.2943589480534904, 0.3062774230064361, 0.14938316643069427, 0.1405817912251468, 0.09119220546581241, 0.15269327904490315, 0.10756948221612894, 0.1427418228653543, 0.10525032416072067, 0.17487220237484413, 0.18320619506587088, 0.15808670708681605, 0.19493730513604546, 0.232668297316435, 0.22670702861493652, 0.3022292766989728, 0.2872012649589927, 0.2975916006227798, 0.2272772457502097, 0.22803182319130144, 0.20845329788403255, 0.7068103551117466, 0.6910506814700619, 0.6873929366815249, 0.6270224827185977, 0.6181700578639524, 0.5658012664322828, 0.6493021512822355, 0.627933021209911, 0.6541564216595055, 0.12370913249811799, 0.13545727034232735, 0.12051774788380554, 0.11662948216257518, 0.12101465508133258, 0.13735852956032923, 0.13259537930283094, 0.12073309727062476, 0.11206057031686445, 0.1692721453342021, 0.14644629316730606, 0.13561224896849267, 0.1523299541144948, 0.1537272721657038, 0.1570480068552853, 0.1384425654600111, 0.14134745393993486, 0.1378414031752997, 0.4922799355609433, 0.4529086813644936, 0.36319216759374806, 0.4645895414091854, 0.4045198845221726, 0.49038409240538694, 0.6559866019696519, 0.5650528016315409, 0.5024776977388281, 0.3188104181721926, 0.28892356398663965, 0.2754433740288107, 0.34967740594891616, 0.19701435591088745, 0.3425977687469606, 0.3551008030285041, 0.43690425424807544, 0.30072821276147577, 0.22005542474135775, 0.20028762890189533, 0.2116479740192584, 0.21561154972907393, 0.211019832181903, 0.20785993855182983, 0.19914961944989273, 0.19225544181761256, 0.21082094450427935, 0.5887580265892185, 0.5774605995140103, 0.4056931133855409, 0.739167333696259, 0.6849678348207955, 0.2354271386146507, 0.23814231751530057, 0.30536097146691776, 0.47982495870198094, 0.7474195456291736, 0.7972759395903798, 0.17731765248966802, 0.3493638000945922, 0.19976361513669716, 0.19871788436389914, 0.5390322416987736, 0.7935683318217689, 0.16881735318882551, 0.20506067912342663, 0.1680135987788306, 0.6962308094537636, 0.2023888255697459, 0.20838301894610856, 0.20354856103063756, 0.20583618197945763, 0.20743380094524588, 0.6004738236596086, 0.18743574730028467, 0.1772948949941745, 0.1772020456850405, 0.1851796372962755, 0.19052767353175826, 0.18776515672089644, 0.1947558474691865, 0.19470647813926567, 0.1936606590501867, 0.08259424724916375, 0.08941605519168383, 0.08524519465146474, 0.0940600977157825, 0.08155634174239434, 0.0923371481173737, 0.08626139175324443, 0.07985154876145117, 0.07695625353163282]}, "mutation_prompt": null}
{"id": "0d6dda0d-a337-47cb-93ea-b8024144ff5a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n        \n        fitness_diversity = np.zeros(self.pop_size)\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        best_fitness = np.min(fitness)\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                \n                diversity = np.mean(np.linalg.norm(population - target, axis=1))\n                fitness_diversity[i] = diversity\n                \n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                    best_fitness = min(best_fitness, new_fitness)\n                \n                new_population.append(population[i])\n                \n            if _ % (self.budget // 10) == 0:\n                best_idx = np.argmin(fitness)\n                worst_idx = np.argmax(fitness_diversity)\n                population[worst_idx] = population[best_idx]\n                fitness[worst_idx] = fitness[best_idx]\n\n            population = np.array(new_population)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Introducing dynamic population size adaptation based on fitness diversity to enhance exploration-exploitation balance.", "configspace": "", "generation": 48, "fitness": 0.45582781319688453, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8603444242855727, 0.8418595939219403, 0.86531613417569, 0.848019593673849, 0.8488284100730126, 0.8722239259481537, 0.8508384632683524, 0.8535763324749902, 0.855386025468454, 0.764499754497688, 0.7723453586270982, 0.7502645151251797, 0.7650848749738274, 0.7507457063914127, 0.7577113746654859, 0.7372223659567959, 0.7470785823448225, 0.7783476672348784, 0.14988911958878015, 0.3482187164215743, 0.14154271833091914, 0.1481621334615587, 0.1347807203435628, 0.15242179899640518, 0.1283471819598292, 0.12897935114818193, 0.19759843566520385, 0.11634826022200273, 0.32908481797543476, 0.12138623556364436, 0.11876848812790364, 0.13489510929425996, 0.13503704049679743, 0.1331063153035792, 0.3369381537048295, 0.12318380605526358, 0.9624675669676735, 0.951513694391485, 0.9771405673110877, 0.9842246164540143, 0.9685870856017499, 0.9934502961723741, 0.9792828314395194, 0.9589757739950399, 0.9798321150253188, 0.5906466609555547, 0.6406284348727391, 0.6153712459040191, 0.6582580324599737, 0.59888809228377, 0.6322739571929734, 0.6638806055685371, 0.6703383679719737, 0.05133819592056277, 0.8371956628928593, 0.7950487831824219, 0.8293677817226626, 0.8360379756229223, 0.830550222159425, 0.745897291111947, 0.7835451203733138, 0.8380729983805834, 0.8096967133044255, 0.6785578855554986, 0.567048089306637, 0.6280308813782414, 0.608003058676142, 0.646974681524685, 0.5812210374747967, 0.5121332493684927, 0.603387820000695, 0.6302205814895202, 0.6269519274072067, 0.5440632541725665, 0.5931134018666895, 0.5879554036654329, 0.641248801597081, 0.5934728402151934, 0.6373633499973215, 0.5592460091801204, 0.6048036064234128, 0.5558701731866145, 0.5162760248918491, 0.5664918878717713, 0.5629258646342064, 0.5890513313043385, 0.5705471423932522, 0.6123319091324448, 0.5782958551060209, 0.582626944462658, 0.6585450817423473, 0.6599335875249012, 0.6329060463972099, 0.6896656633453448, 0.6265458724481927, 0.6700090847044573, 0.6658159286755418, 0.6769952660715879, 0.6778917718461666, 0.23690565934932528, 0.10708295667801415, 0.10959764984952458, 0.413071743469387, 0.4611190847333041, 0.41017422494013056, 0.30676969957487765, 0.30436301461881166, 0.1540685365814023, 0.43446512975664564, 0.43783868567008766, 0.40693456430473174, 0.471642680608381, 0.4553880005466404, 0.442067674391854, 0.4728969988138385, 0.4471582105448918, 0.4396543436428816, 0.7935031581029961, 0.8067377482392735, 0.7849737609858658, 0.771108398363971, 0.7986578688564432, 0.7776935277782064, 0.7731587504940194, 0.7671407023553279, 0.763081096693752, 0.09484601379148438, 0.11494644865002812, 0.10794028385163257, 0.10833120194043189, 0.12637117033495082, 0.10413514114807931, 0.14692769699988162, 0.10277635565065268, 0.11146741567383411, 0.1324121764621028, 0.1618964766084624, 0.14228775581860864, 0.12840646901239017, 0.10852972522114013, 0.13735438766742059, 0.182841082362051, 0.177392619620921, 0.1393532127613908, 0.4278623127160377, 0.4418254097137728, 0.4068778406250584, 0.47527948473507897, 0.427325268586102, 0.48366403538153613, 0.52490769416118, 0.5488174253244511, 0.4798007866213959, 0.36557577672118524, 0.3517386195174642, 0.3183157953398822, 0.3286489047974248, 0.35840906014417084, 0.3721394394971217, 0.32089598380298534, 0.38132975708539796, 0.37425716339382276, 0.1947786099288582, 0.1918556242877486, 0.1895059417494822, 0.1701800880154204, 0.20450858143268869, 0.18056967181089678, 0.18581305564143524, 0.1798850220238264, 0.1939314864480054, 0.21554482656691187, 0.21068216037457155, 0.17921255953017867, 0.49105323439062565, 0.5456914737544468, 0.21519228311761185, 0.4685035603383325, 0.21276443367648623, 0.283854486128138, 0.8795002404031694, 0.17037330248606797, 0.851198154296257, 0.17814709522748817, 0.7820056874983342, 0.18668042914945004, 0.16418462936345546, 0.19569443280672172, 0.8040737362157624, 0.16790204480412918, 0.20849780641042603, 0.7248296485816885, 0.7032542846790876, 0.20484127880590408, 0.8504252659049775, 0.15338286826448133, 0.210463343163661, 0.15345166095194185, 0.18611317282175965, 0.18040556676626784, 0.1798605768241206, 0.18512331572301943, 0.17351088416870497, 0.1957151243649753, 0.19883679280460165, 0.18753113589215864, 0.17185262902990817, 0.0905504970355705, 0.07121989106972137, 0.08658682793145855, 0.08278557394273522, 0.08522943773848224, 0.07008383758764214, 0.07132556618262265, 0.08300104166560485, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "507c2837-72ec-4067-b859-ecea35997abc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            cauchy = np.random.standard_cauchy(self.dim)\n            return np.clip(a + F * (b - c) + cauchy, -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhance the mutation strategy by incorporating a Cauchy distribution for better exploration of the search space.", "configspace": "", "generation": 49, "fitness": 0.1461343287660838, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.24484689437284834, 0.2599771150630029, 0.2629285454287388, 0.24891062560431798, 0.2756995706113655, 0.2486497663506051, 0.2617654191196117, 0.27212684965638256, 0.2564703206210692, 0.011827106105167906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06544195203590464, 0.09523039301553504, 0.06190182915810405, 0.07664753572704375, 0.061127624172853, 0.07685711299827525, 0.054205171446219946, 0.07094639115851986, 0.08377351174357572, 0.06956247680788674, 0.06588584507058004, 0.05388753233293342, 0.07299998778982575, 0.055730066872837214, 0.061739137260504284, 0.04423250059613926, 0.06201258509821417, 0.05481478493285197, 0.9963853246501478, 0.9738001339917713, 0.9679617393304312, 0.9728314813014323, 0.9752952389442483, 0.9738982653988008, 0.9797854245765811, 0.9755482020666757, 0.9767424689134167, 0.12387828798168832, 0.13231988294376806, 0.12283914530300577, 0.12250127059707594, 0.12149031902948937, 0.13264308530646762, 0.1420795976418604, 0.13313818881587236, 0.13348500806022934, 0.17639458997872737, 0.17334448943643888, 0.19555122409061643, 0.16883105067957227, 0.16776167002550413, 0.17293968129648962, 0.15722161708660864, 0.1599663754634152, 0.16963204972910662, 0.031167065297851293, 0.0370291565131462, 0.05057644002323036, 0.07784151843662968, 0.05237079028992753, 0.036336064496235276, 0.06633838745809828, 0.056277290458058404, 0.08361188436841771, 0.03510540471692691, 0.030391925414690157, 0.03014027874403491, 0.02391512904654769, 0.04080436625704764, 0.043550077675221344, 0.05863974082327328, 0.015223175642895104, 0.014955665341087832, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048516537811311156, 0.03923757201204403, 0.0602913869779137, 0.01620179131637578, 0.013432165130473406, 0.046718905737509364, 0.051364552635033034, 0.02463749993545572, 0.050926170434252294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03146378793635085, 0.01243653755163976, 0.01242110398392382, 0.01295033802285106, 0.012452536619423693, 0.01776865535601213, 0.008815532559320327, 0.02538031532522711, 0.02387278514627411, 0.2381908228612537, 0.25800569153126174, 0.2508166440710631, 0.24753132147863888, 0.2715639540112845, 0.28456686160047284, 0.2729008975258903, 0.2621957475248079, 0.24978297194008792, 0.07192262461728693, 0.05723348539925888, 0.08129559845787193, 0.05689649619613524, 0.06458851055648085, 0.06310975009694175, 0.05635119044311465, 0.05976096876062764, 0.06537167093310958, 0.12724061298656908, 0.17803691032574576, 0.15205003646668447, 0.13030599410781396, 0.13811663887306458, 0.13082569951502843, 0.14283678100123853, 0.13180668650896898, 0.15595512734944061, 0.1900516858548834, 0.19116380598975347, 0.18197471398360898, 0.16946278498571987, 0.16979264609042966, 0.17501622894818525, 0.18347054852263722, 0.19880869370982313, 0.17849099220324605, 0.14400961339019758, 0.13377679871188797, 0.14036660967135972, 0.125100415166711, 0.15462709756081494, 0.1196326266496357, 0.12690992354336372, 0.14331620331423056, 0.1280988044659902, 0.16195772506574613, 0.18185751803835304, 0.1668136371433775, 0.15897767612753722, 0.15995961780869672, 0.1557569550235699, 0.16245957401179512, 0.15791038858122886, 0.17441316255869765, 0.1533031182717487, 0.15581244700852837, 0.16152997246602374, 0.16304064243100946, 0.15670004238731639, 0.16926716254818297, 0.157667115702394, 0.1674139639470834, 0.15578800101447832, 0.16117592391847957, 0.15228868000510143, 0.17311921370875916, 0.18394630777616894, 0.15476353641385698, 0.1622461800816487, 0.16649603955817271, 0.1548037763558756, 0.16463233829397017, 0.22072243060822017, 0.15722602434192867, 0.1725772648507491, 0.13874459846444498, 0.15062380826686617, 0.13714539016347393, 0.19734054842258442, 0.19118934720219005, 0.19803580999602388, 0.18784287546013378, 0.18821971196210274, 0.18503512850443038, 0.19213749180929585, 0.17127829817892126, 0.19087247818596054, 0.18938300775913008, 0.19271238676400337, 0.19247180207362402, 0.049460018692416674, 0.05247776712808627, 0.061852388407389824, 0.05771392496031402, 0.057760712580700924, 0.07648361434554085, 0.07357315716604118, 0.05141266872630845, 0.05906475501772712]}, "mutation_prompt": null}
{"id": "404c5eff-cdd2-4733-8cbb-ee1c1b40f0ae", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "5740affd-8031-4bea-bccc-52a3bafce2f0", "solution": "class EnhancedDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, weight=0.5):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.weight = weight\n\n    def __call__(self, func):\n        def mutate(x, population, F, weight):\n            a, b, c, d = population[np.random.choice(len(population), 4, replace=False)]\n            return np.clip(a + F * (b - c) + weight * (d - x), -5, 5)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F, self.weight)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedDE", "description": "Enhance the mutation strategy to incorporate a differential weight factor for better exploration-exploitation balance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "f42d2cc2-03bc-4e36-90a3-ff1780fbecab", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c, d, e = population[np.random.choice(len(population), 5, replace=False)]\n            return np.clip(a + F * (b - c) + F * (d - e), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveDE", "description": "Improved AdaptiveDE: Enhanced Differential Evolution with adaptive mutation and crossover control and improved population diversity maintenance using crowding distance.", "configspace": "", "generation": 52, "fitness": 0.27528276109222827, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.6196600428274178, 0.621365189142095, 0.6568831517316036, 0.6902637090658684, 0.6866437055345067, 0.6819425461783375, 0.6568343493957032, 0.6814436673022717, 0.6645743435370395, 0.4828363167193592, 0.4596769443057216, 0.4970270406524765, 0.48181000083981784, 0.48252267337521015, 0.49757940967583203, 0.4546733272242707, 0.4880000231531627, 0.4978274144415764, 0.0843533698657708, 0.07735537938350079, 0.09592760332607919, 0.1055170684707506, 0.084873232843512, 0.10065235641041359, 0.11325214482585633, 0.08356104438581402, 0.10431766674002552, 0.07752142982968746, 0.0729667469029297, 0.07568135290545486, 0.07118517883774456, 0.08275075054629832, 0.07995398840872059, 0.08430489435997301, 0.07941704577792608, 0.07918966093504909, 0.9776779134205895, 0.9557526833311184, 0.9953057063951996, 0.9703264772361105, 0.968561876971253, 0.9839146858145655, 0.9420909783329228, 0.9864604710575129, 0.9851914146199112, 0.30595484122085814, 0.3547009294260325, 0.31769271431024404, 0.31725364416607715, 0.33633819100079565, 0.3074254430576562, 0.31824108654695304, 0.3481034548024623, 0.3410161252283195, 0.4410993552625335, 0.5676249752543128, 0.4445538806438153, 0.5403264076331542, 0.5076582822319643, 0.6195322299410129, 0.6301143219482002, 0.38230534798710203, 0.5075290146503832, 0.21935286108825724, 0.17918438964270367, 0.2323916968946681, 0.26689691000132487, 0.21726270141629378, 0.16270316502939608, 0.2292557526012744, 0.19110933804399188, 0.18793159049111707, 0.3004972353332248, 0.3118290583778959, 0.2978525172564622, 0.16540870345185743, 0.16960439394575644, 0.24448616512214327, 0.1692118709004573, 0.21820282116110423, 0.19868993788487255, 0.10717605384889972, 0.12759170496444572, 0.10378919263141229, 0.23491020755025138, 0.15575639291082877, 0.17384358992349824, 0.1343991077698633, 0.1681827175039765, 0.13441176409970723, 0.2042609361075356, 0.2781681287172848, 0.21865539896892672, 0.3023007096087129, 0.32173890498267943, 0.23003871257271258, 0.293497487129299, 0.2672634825134016, 0.2941262802188733, 0.024851927591273304, 0.047828142583153044, 0.005908573721238319, 0.03448975797523379, 0.03500291005979328, 0.03696731672761011, 0.0700052178397067, 0.01526211461893967, 0.015856524451735465, 0.1817306497146557, 0.20429814991593354, 0.1746124415180439, 0.18564323098510027, 0.17859568779367052, 0.18587165925624183, 0.16870003980340076, 0.18226942257694068, 0.19307972958609376, 0.5436185578584376, 0.5397815832852036, 0.5490245949150245, 0.5012663945328447, 0.48514905405111763, 0.5093700806261716, 0.5431144971317277, 0.49516968373021486, 0.5173459619673376, 0.08112329702566878, 0.08393066336598554, 0.08585277004426428, 0.07670100210052455, 0.07472382259515908, 0.07827724193998653, 0.07779624836251864, 0.07811041845968014, 0.06798513479131596, 0.13617697809863571, 0.1431182735679073, 0.14613404316673095, 0.1495285009950219, 0.13937299164540506, 0.13114016755804747, 0.14277933044224977, 0.12249983743804949, 0.1398830293820087, 0.25784895966313603, 0.25174586377086117, 0.24212861476904313, 0.2480999626626852, 0.2517144724943282, 0.22878305148749734, 0.26942966420662295, 0.27263038653414917, 0.2762993305426409, 0.17490067253693797, 0.16977730215392917, 0.16601253670986338, 0.1988095011595673, 0.19896414404996332, 0.18724010607610098, 0.19162712398576454, 0.21545943420297964, 0.19024215421750845, 0.19075553078009067, 0.17045008129467865, 0.17563679264267995, 0.16841856733159966, 0.17723025800971082, 0.17798328664719576, 0.182051979201457, 0.1839556065214032, 0.16225382972071745, 0.16769082193670926, 0.17644404023259974, 0.16703862624105437, 0.1646562353327039, 0.1663368276400945, 0.16993912766660124, 0.18271145541925893, 0.17471868819489467, 0.16878624610039328, 0.1644620445996119, 0.4747952872372809, 0.2981636743440659, 0.17828856526440517, 0.5391225744379775, 0.17569136578749478, 0.14429885184475844, 0.16958176866746033, 0.6003341492353371, 0.20145520364286473, 0.48381515334388625, 0.16202178053367988, 0.4953292662997192, 0.16561957142844042, 0.17976269371422027, 0.6997115552997846, 0.20130639185626364, 0.20655301847739227, 0.1825338404493133, 0.19184635917984194, 0.19404639082897868, 0.19309355004144457, 0.16445311297825738, 0.1798373663890921, 0.19274456225969283, 0.18113441277489717, 0.2474373710253044, 0.05850550347171901, 0.0663173326435943, 0.06453755288444896, 0.06351473936198127, 0.06820012221191263, 0.05558906825336907, 0.06533104024720238, 0.07137642090283913, 0.0624666930554002]}, "mutation_prompt": null}
{"id": "7ef115f4-a07a-4cd3-9b36-5ac343c9238f", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            cauchy = np.random.standard_cauchy(self.dim)\n            return np.clip(a + F * (b - c) + cauchy, -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhance the mutation strategy by introducing a Cauchy distribution for better exploration capabilities.", "configspace": "", "generation": 53, "fitness": 0.1461343287660838, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.24484689437284834, 0.2599771150630029, 0.2629285454287388, 0.24891062560431798, 0.2756995706113655, 0.2486497663506051, 0.2617654191196117, 0.27212684965638256, 0.2564703206210692, 0.011827106105167906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06544195203590464, 0.09523039301553504, 0.06190182915810405, 0.07664753572704375, 0.061127624172853, 0.07685711299827525, 0.054205171446219946, 0.07094639115851986, 0.08377351174357572, 0.06956247680788674, 0.06588584507058004, 0.05388753233293342, 0.07299998778982575, 0.055730066872837214, 0.061739137260504284, 0.04423250059613926, 0.06201258509821417, 0.05481478493285197, 0.9963853246501478, 0.9738001339917713, 0.9679617393304312, 0.9728314813014323, 0.9752952389442483, 0.9738982653988008, 0.9797854245765811, 0.9755482020666757, 0.9767424689134167, 0.12387828798168832, 0.13231988294376806, 0.12283914530300577, 0.12250127059707594, 0.12149031902948937, 0.13264308530646762, 0.1420795976418604, 0.13313818881587236, 0.13348500806022934, 0.17639458997872737, 0.17334448943643888, 0.19555122409061643, 0.16883105067957227, 0.16776167002550413, 0.17293968129648962, 0.15722161708660864, 0.1599663754634152, 0.16963204972910662, 0.031167065297851293, 0.0370291565131462, 0.05057644002323036, 0.07784151843662968, 0.05237079028992753, 0.036336064496235276, 0.06633838745809828, 0.056277290458058404, 0.08361188436841771, 0.03510540471692691, 0.030391925414690157, 0.03014027874403491, 0.02391512904654769, 0.04080436625704764, 0.043550077675221344, 0.05863974082327328, 0.015223175642895104, 0.014955665341087832, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048516537811311156, 0.03923757201204403, 0.0602913869779137, 0.01620179131637578, 0.013432165130473406, 0.046718905737509364, 0.051364552635033034, 0.02463749993545572, 0.050926170434252294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03146378793635085, 0.01243653755163976, 0.01242110398392382, 0.01295033802285106, 0.012452536619423693, 0.01776865535601213, 0.008815532559320327, 0.02538031532522711, 0.02387278514627411, 0.2381908228612537, 0.25800569153126174, 0.2508166440710631, 0.24753132147863888, 0.2715639540112845, 0.28456686160047284, 0.2729008975258903, 0.2621957475248079, 0.24978297194008792, 0.07192262461728693, 0.05723348539925888, 0.08129559845787193, 0.05689649619613524, 0.06458851055648085, 0.06310975009694175, 0.05635119044311465, 0.05976096876062764, 0.06537167093310958, 0.12724061298656908, 0.17803691032574576, 0.15205003646668447, 0.13030599410781396, 0.13811663887306458, 0.13082569951502843, 0.14283678100123853, 0.13180668650896898, 0.15595512734944061, 0.1900516858548834, 0.19116380598975347, 0.18197471398360898, 0.16946278498571987, 0.16979264609042966, 0.17501622894818525, 0.18347054852263722, 0.19880869370982313, 0.17849099220324605, 0.14400961339019758, 0.13377679871188797, 0.14036660967135972, 0.125100415166711, 0.15462709756081494, 0.1196326266496357, 0.12690992354336372, 0.14331620331423056, 0.1280988044659902, 0.16195772506574613, 0.18185751803835304, 0.1668136371433775, 0.15897767612753722, 0.15995961780869672, 0.1557569550235699, 0.16245957401179512, 0.15791038858122886, 0.17441316255869765, 0.1533031182717487, 0.15581244700852837, 0.16152997246602374, 0.16304064243100946, 0.15670004238731639, 0.16926716254818297, 0.157667115702394, 0.1674139639470834, 0.15578800101447832, 0.16117592391847957, 0.15228868000510143, 0.17311921370875916, 0.18394630777616894, 0.15476353641385698, 0.1622461800816487, 0.16649603955817271, 0.1548037763558756, 0.16463233829397017, 0.22072243060822017, 0.15722602434192867, 0.1725772648507491, 0.13874459846444498, 0.15062380826686617, 0.13714539016347393, 0.19734054842258442, 0.19118934720219005, 0.19803580999602388, 0.18784287546013378, 0.18821971196210274, 0.18503512850443038, 0.19213749180929585, 0.17127829817892126, 0.19087247818596054, 0.18938300775913008, 0.19271238676400337, 0.19247180207362402, 0.049460018692416674, 0.05247776712808627, 0.061852388407389824, 0.05771392496031402, 0.057760712580700924, 0.07648361434554085, 0.07357315716604118, 0.05141266872630845, 0.05906475501772712]}, "mutation_prompt": null}
{"id": "8f5cbf4d-0b31-4042-b14f-81d360ec28be", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            cauchy = np.random.standard_cauchy(size=self.dim)\n            return np.clip(a + F * (b - c) + 0.1 * cauchy, -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhancing mutation strategy by incorporating a Cauchy distribution for better exploration.", "configspace": "", "generation": 54, "fitness": 0.20767840639682333, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.41485686357129203, 0.39649160047592935, 0.42201613990402376, 0.4779424421647567, 0.44203620519202036, 0.4267955679521541, 0.3973062744488923, 0.41017664401878506, 0.40746113928130756, 0.05115393755570441, 0.07938844465789097, 0.07330772730677759, 0.04728486653509767, 0.07195256038290132, 0.04948139362831716, 0.06140757040237532, 0.07915295290348934, 0.03539157933712844, 0.10662038536928375, 0.10224177941219148, 0.09635031558645302, 0.0978486133156421, 0.10384894856751359, 0.10644440432303559, 0.09905838650108467, 0.10145478540391994, 0.0883797052154216, 0.10123536852392423, 0.10244836643180755, 0.0830290403693349, 0.09912927314426812, 0.10501764789787849, 0.08395211194641161, 0.09279109237057659, 0.08768329750513515, 0.09755721330567435, 0.9721517794785703, 0.9549109893242984, 0.9873918079573999, 0.9436672476449591, 0.9941393293962919, 0.9804716761769755, 0.97725001566461, 0.9424439512069281, 0.9500797703781283, 0.25029658459714477, 0.2490029783212574, 0.247166947851314, 0.25614687869601216, 0.22860621889548394, 0.25882657810135246, 0.23148144386167235, 0.2584339434924886, 0.24816246682326226, 0.29191807744962095, 0.39860988087233173, 0.29225979247290623, 0.30706448467261727, 0.29423066123166386, 0.2948248192896167, 0.28350138234767297, 0.29163590716932664, 0.47056264955012983, 0.15591834161708717, 0.14518331285680997, 0.155414022554763, 0.14398801607760792, 0.16822576941961886, 0.15228662245986724, 0.1420293302493597, 0.14408931269083547, 0.13250286014339507, 0.13561926489159792, 0.1505486856357604, 0.12040695844366023, 0.14696182587656526, 0.154172041713993, 0.14038190381278925, 0.143407967728734, 0.14378640914545338, 0.15099074880778007, 0.0007044216507591239, 0.007915152031727102, 0.034016108297714176, 0.017205255157868082, 0.014875145549143931, 9.999999999998899e-05, 0.002047700857342405, 0.0010073120631001187, 0.020011133617395926, 0.11897082815272786, 0.10318865097682717, 0.07410075100072533, 0.06763781721250217, 0.06881606254583894, 0.04242666951746721, 0.08033452290390086, 0.07196738337337594, 0.08611536523363195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08846789227245333, 0.0799815148217089, 0.07672049325222019, 0.08427665901752857, 0.10954932044113153, 0.09163240856197585, 0.08439665620018566, 0.07984767530531278, 0.0869666079270377, 0.3877395570284945, 0.3593733699933881, 0.3901835215986207, 0.3845463630157231, 0.37254765629420883, 0.41946692584604284, 0.3869873876130273, 0.3869551078598865, 0.39097760555857486, 0.07946693440203456, 0.10931424963178593, 0.0971764151463671, 0.08808535591567235, 0.08162517859163532, 0.09053905097895587, 0.09517811941494547, 0.07803597298890108, 0.08830576168383886, 0.22510307122269924, 0.18173834167750758, 0.14249169018967134, 0.130846086816635, 0.1387661359992226, 0.1552637523386744, 0.14415632747799645, 0.1653787183918881, 0.14742267046596158, 0.2570066508471699, 0.25373860238845714, 0.2643694369214462, 0.2554731593313594, 0.2676376739724784, 0.2550573151506399, 0.2752574408510865, 0.26488467026156515, 0.2642552650342057, 0.19238303622075636, 0.1972183355024033, 0.19896298573512805, 0.18659972417754978, 0.19718174114804043, 0.1903741445761088, 0.2077912986121766, 0.20470712847041528, 0.20786166219842028, 0.18368695879573926, 0.1811714651816525, 0.1824872512528949, 0.17811886786265063, 0.1770770747111441, 0.19130760226207777, 0.19397829120901633, 0.19642436437532274, 0.1943887624675289, 0.18169101758800366, 0.1829038873341099, 0.1860227279339991, 0.18674174554265932, 0.19139468830034878, 0.1950033551249588, 0.17251984401253395, 0.19066073499893166, 0.18066079202959429, 0.5708129640941844, 0.18515408257986432, 0.1686954487315454, 0.5425401011522397, 0.41453235444668945, 0.18354219484895018, 0.15581316863481554, 0.515237992754183, 0.18003325230396494, 0.19834043865196094, 0.2014361787210307, 0.1963233979453447, 0.20812786404399575, 0.28943478895928343, 0.19192985371913363, 0.4574426759405097, 0.20982538474402612, 0.21385142737499352, 0.2035620799314537, 0.18490041752584152, 0.1992146723892373, 0.18034786378293488, 0.1878591264406133, 0.18791505143409704, 0.18478171592213533, 0.19539566456270885, 0.1764678923004478, 0.08905987349891054, 0.07142317443663049, 0.08188088641801694, 0.06813195170943342, 0.0785558784036029, 0.08012492118467107, 0.07556692114560559, 0.07724982907245359, 0.07432745148368414]}, "mutation_prompt": null}
{"id": "1f59ebb0-4358-4109-b55f-4dd1fcfb798d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "bfb70c00-f69e-4a9f-a14f-85800f458666", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n            \n            diversity = np.std(fitness)  # Measure fitness diversity\n            if diversity < 0.1:  # Adjust population size based on diversity\n                self.pop_size += 1\n            elif diversity > 0.2:\n                self.pop_size -= 1\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Improving convergence by dynamically adjusting population size based on fitness diversity.", "configspace": "", "generation": 56, "fitness": 0.4602578065961314, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "dc46216d-fbdb-4474-ad63-8e12c36f4ef2", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "885d15c3-7a4e-4fe9-9f25-62d70776eb92", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, crowding_factor=0.5):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.crowding_factor = crowding_factor\n    \n    def __call__(self, func):\n        def crowding_distance(population, fitness):\n            distances = np.zeros(len(population))\n            for i in range(self.pop_size):\n                for j in range(self.pop_size):\n                    if i != j:\n                        distances[i] += np.linalg.norm(population[i] - population[j])\n            return distances / np.max(distances)  # Normalize distances\n            \n        def select_crowded(population, fitness, crowding_factor):\n            distances = crowding_distance(population, fitness)\n            sorted_indices = np.argsort(-distances)  # Sort in descending order\n            selected_indices = sorted_indices[:int(self.pop_size * crowding_factor)]\n            return population[selected_indices]\n        \n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            \n            crowded_population = select_crowded(population, fitness, self.crowding_factor)\n            for i, target in enumerate(crowded_population):\n                mutant = mutate(target, crowded_population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n            \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhancing population diversity by incorporating a crowding-based mechanism to prevent premature convergence.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "852ac8e0-62a4-42fa-bc68-b2ec28162188", "solution": "import numpy as np\n\nclass CrowdedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            \n            # Introducing selection based on crowding distance\n            crowding_fitness = np.argsort(fitness)\n            for i in range(len(population)):\n                if np.random.rand() < 0.5:\n                    population[i] = population[crowding_fitness[i]]\n            \n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "CrowdedAdaptiveDE", "description": "Enhancing population diversity by incorporating a crowding-based selection mechanism to maintain a balanced exploration and exploitation trade-off.", "configspace": "", "generation": 59, "fitness": 0.24412329166191662, "feedback": "The algorithm CrowdedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8509284374279701, 0.8864125934174071, 0.8424530070493568, 0.7585094188338078, 0.7637061306280053, 0.8488461568297995, 0.8777749859708424, 0.8716635986629163, 0.8502209498180759, 9.999999999998899e-05, 9.999999999998899e-05, 0.6570892799722088, 0.7707030697607042, 0.2959608050672816, 0.7268114858993098, 0.7070622592044488, 0.6950492222253368, 0.19830178722348368, 0.052610002991713034, 0.08665856489451529, 0.07299549348241219, 0.09018358784288394, 0.05011567948283824, 0.07308722088117592, 0.1527183461034487, 0.09138717438476329, 0.08202216569394383, 0.06139278748836985, 0.07185175735715843, 0.058641137916097597, 0.0658225537715389, 0.06687667934802544, 0.11934918890705903, 0.11158627376616714, 0.12274586432467893, 0.048284870313462847, 0.960992942617431, 0.9704701762796017, 0.9360433498110574, 0.9648415034668998, 0.9773010031782269, 0.9780081127413931, 0.9577090246522972, 0.9579736888978332, 0.9565289246094048, 0.08972734628060075, 0.2619062657157166, 0.5153747826790671, 0.21701269507396248, 0.04042242580320632, 0.6343848040430207, 0.13896609523815173, 0.5708716494212756, 0.08799220952523246, 0.22161093151686861, 0.2310622466698694, 0.09906943315818639, 0.12688734801023516, 0.2779418521475918, 0.3615279656024294, 0.8875600452238197, 0.219265982899997, 0.21851795840656218, 0.24495457782200325, 0.1346913111156629, 0.2792849118218348, 0.28951123957834624, 0.19588786497469046, 0.11281902841137748, 0.1669947560496885, 0.20002920613297315, 0.13277115693905672, 0.01665283884056279, 0.16944492616870377, 0.12960477799998515, 0.13136798099866176, 0.1374679736857748, 0.19556751955597906, 0.04136286089861552, 0.3303199057331667, 0.2603702382678993, 0.020255425046711406, 0.009440733571849935, 9.999999999998899e-05, 0.07417859857733655, 9.999999999998899e-05, 0.04225016993188724, 0.024156227753201698, 0.23899813851509766, 0.19413489569600306, 0.10570246803043515, 0.050159443961046546, 0.14734377101430496, 0.17665264863858354, 0.09386102068569002, 0.024457081452967988, 0.041595679477865244, 0.05858161395643913, 0.07359927801525323, 0.09416580357204407, 0.11310070844885955, 0.16829296952464778, 0.05658176269600368, 0.18953999106721975, 0.14971129740338962, 0.07766670679109333, 0.08288211135758883, 0.1008850472202566, 0.10948973193468048, 9.999999999998899e-05, 0.1465729013865621, 0.10557379265870093, 0.11569908638244852, 0.18691736441052675, 0.10809705455342322, 0.21614954457583246, 0.171736802781858, 0.5391336072884041, 0.5948457120062471, 0.6592776785907928, 0.5806578207878417, 0.5170334785764044, 0.47740970569275276, 0.5179795817075734, 0.5691600521785054, 0.6061075511865914, 0.10888174038384146, 0.07375496974639284, 0.13771898002525085, 0.10429683938504009, 0.06087465829584893, 0.0698566177442752, 0.05718765196656783, 0.07255457409113153, 0.05707932570258567, 0.1149772540557844, 0.1384069893972263, 0.1386634823089976, 0.09855305120349966, 0.12570808223578933, 0.11366654775868101, 0.132775247367814, 0.13210625475647453, 0.11215838634503184, 0.1982230975389141, 0.22789834942309595, 0.23585100080282795, 0.2706702955616913, 0.18260131357762321, 0.19294561003487176, 0.22048470920035634, 0.30830722774243746, 0.23366356547511025, 0.19875181964375732, 0.24617718996306404, 0.11986507226537302, 0.14826794388355502, 0.2371526654195888, 0.11389615307682066, 0.13912507555681208, 0.14351518902090632, 0.16391188647862276, 0.1553828006715614, 0.2298434495813434, 0.15960558280718307, 0.1556528462927561, 0.15890235505512262, 0.1554574193697783, 0.17798533832958818, 0.17626414307371174, 0.19573627538656757, 0.16915392536508078, 0.17196896582671417, 0.1647895262198955, 0.18335748811832187, 0.19939154166486117, 0.1639417472505822, 0.16574736079448393, 0.17640137885014484, 0.22872408385854592, 0.12246303713368256, 0.14032013982986768, 0.17132236623589436, 0.16868720953271843, 0.18723181184410487, 0.13974993386902423, 0.16076991014755426, 0.09643604708838482, 0.19458679746422103, 0.08261829213018967, 0.16421419239185764, 0.45507660406536565, 0.4561423360157246, 0.20650507639522353, 0.13702214876863217, 0.11662913668969122, 0.1553483052312331, 0.12772296932570493, 0.1760557713055999, 0.18195585698987637, 0.1731226541572567, 0.1807872996913551, 0.15368477951180903, 0.15595628053120658, 0.15820609096261218, 0.15711088489468727, 0.15873908820605231, 0.08511559358648624, 0.056643334147866486, 0.06963225484788804, 0.08251680354901914, 0.0711997830387292, 0.06369740057372908, 0.06388938748240414, 0.047722737744029464, 0.053482202931361855]}, "mutation_prompt": null}
{"id": "575ddb3f-b06c-4a4e-b0af-a64360db659c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "873924fe-bc17-43a5-bce2-1f50f9dd9df8", "solution": "import numpy as np\n\nclass ImprovedDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c, d = population[np.random.choice(len(population), 4, replace=False)]\n            return np.clip(a + F * (b - c + d), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDE", "description": "Improved Differential Evolution with dynamic adaptation of mutation strategy and crossover rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 61, "fitness": 0.11195455861106669, "feedback": "The algorithm ImprovedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.18.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.19202815906355486, 0.12183085365146129, 0.19539603276030137, 0.17000222525819975, 0.1431957051045194, 0.14102885107787366, 0.13254115098709895, 0.14586627221829618, 0.11670113472262178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05162828685689802, 0.06649072293593872, 0.027947230778459065, 0.03775218302138661, 0.03257837795997043, 0.03471029715816554, 0.03236939560664254, 0.013918199371833584, 0.030976254213581855, 0.027587729353046653, 0.027492854060135907, 0.0432045032295969, 0.036923322687409055, 0.008148235406415183, 0.021306139095399135, 9.999999999998899e-05, 0.025926361851594804, 0.0003489320321670153, 0.9939116162878042, 0.9917085401148629, 0.9915409752304013, 0.980269934771278, 0.9797946049452447, 0.9943751833321535, 0.9867914627881471, 0.9945395762757424, 0.11598406852674303, 0.04441192817461648, 0.04941207018065674, 0.05492406921801796, 0.015958033390746085, 0.018069158212835612, 0.012065798991755416, 0.0543740320227758, 0.0491983440217415, 9.999999999998899e-05, 0.13489365574195977, 0.13121586692319032, 0.03516329759174042, 0.11060899704734006, 0.1100858168177905, 0.10244271102684266, 0.10158719731688437, 0.1099712965399754, 0.08946884955693002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010090706086138157, 0.015893595151768358, 0.010003362768938096, 9.999999999998899e-05, 0.10312119352097104, 0.11935941453628007, 9.999999999998899e-05, 0.0078050699070796314, 0.025826978167703074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025046262925351725, 0.035238581039860994, 0.009212250675770028, 0.04864240762978422, 0.02577824733387102, 9.999999999998899e-05, 0.034487418361376476, 0.0275179978584158, 0.015295632845086393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12338442650828507, 0.12466705818396384, 0.15475246590328973, 0.16588377551175149, 0.1692669598718447, 0.1794914558397731, 0.18202213895639952, 0.1768889726582773, 0.20074741651298111, 0.03806852823415319, 0.0308835293477685, 0.03275354020647736, 0.04527363401900497, 0.03988979798963521, 0.0369071760797558, 0.04822666802993936, 0.036185804305138625, 0.035097763194967935, 0.14149873720991923, 0.12800138798152116, 0.13220521393306284, 0.1411623158354094, 0.1449744291668913, 0.14504228109098127, 0.14338429233698446, 0.16183442390618674, 0.106528602292572, 0.16886528483681085, 0.17989338901807062, 0.13915831491601494, 0.17423829980464856, 0.16736194448872155, 0.15639119938313484, 0.14367931913648646, 0.17377774300845283, 0.13217834880703572, 0.1440819673777285, 0.138558176675441, 0.08152178165854562, 0.137432927315712, 0.08751072868858334, 0.15466511230280955, 0.08456168896762173, 0.10788285371332218, 0.06560476404037452, 0.1766032170596562, 0.15239766760419748, 0.1852084972902326, 0.14823958428874684, 0.19264395848802496, 0.15334519899800958, 0.18200200139196032, 0.1641539918691477, 0.16749005888153878, 0.16038626772138664, 0.1594236444401066, 0.1549657654224207, 0.12466156485094382, 0.14570572562199502, 0.17785825015953016, 0.15952604653767088, 0.14666198062034908, 9.999999999998899e-05, 0.11516473042472186, 0.13775191831633715, 0.1148600130033407, 0.13460487671539345, 0.16380035283007077, 0.14747477794578667, 0.12098048034947917, 0.15612157181600084, 0.1527000309175497, 0.10839667991496338, 0.1209462704572074, 0.11105049362282482, 0.0968147165887886, 0.10212254531156628, 0.14658123884653762, 0.08973579957781186, 0.0912344831242815, 0.10178824579320223, 0.200145814121801, 0.22038205159160795, 0.17518057458098701, 0.17427454867055148, 0.19471934295373816, 0.17468406049273144, 0.16758872854896545, 0.19224399080804866, 0.17803905813888465, 0.05120981018650039, 0.04300968226577517, 0.05743644395161296, 0.041339085967819655, 0.03824858077884363, 0.05119684690126469, 0.045647202853913216, 0.029263230700389387, 0.032700706109603406]}, "mutation_prompt": null}
{"id": "c363a8f3-6ccf-483c-8b0c-2050c1e64785", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, levy_scale=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n        self.levy_scale = levy_scale\n\n    def levy_flight(self, dim):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / np.abs(v) ** (1 / beta)\n        return step * self.levy_scale\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            levy_step = self.levy_flight(len(x))\n            return np.clip(a + F * (b - c) + levy_step, -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Introducing Levy flights to enhance exploration capability in the search process.", "configspace": "", "generation": 62, "fitness": 0.23028479487360384, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.449499932932354, 0.4608951309445173, 0.4858937774627585, 0.44891398703441787, 0.4448327609212248, 0.46282327937990786, 0.46283528890537795, 0.4946001252030098, 0.4639795887580067, 0.0840350166213033, 0.10209325940785507, 0.09215187300056227, 0.06735090788547027, 0.08901256991909301, 0.08287700114482233, 0.09476038867277803, 0.07105205331000397, 0.1432181418102313, 0.10998376814808053, 0.1060380239057096, 0.10166778545588817, 0.09982012190729272, 0.0998793577155851, 0.11965464937426185, 0.10424141301576706, 0.09135371141230375, 0.09874440969142617, 0.10849404008245345, 0.09236636296217415, 0.08917059543527628, 0.10278034460643481, 0.10693940617276898, 0.09533517069431419, 0.095376123603507, 0.10532074765785326, 0.11063576466250236, 0.9456860006053408, 0.9565007749892434, 0.9395508594860897, 0.9384760887574776, 0.9846678919084093, 0.9770507070586772, 0.9698743042631308, 0.9677948749957341, 0.9562724556768061, 0.28331104401227214, 0.29386633576734944, 0.28519895070588586, 0.2912306470590442, 0.28367800224495143, 0.2852104909119255, 0.2823510213922287, 0.2840997002022634, 0.2953279754473418, 0.417381108814456, 0.3150291454266071, 0.3674989177762584, 0.4723152686696829, 0.34922103891261014, 0.329427910575835, 0.3205568231804464, 0.5803191475918275, 0.4599586200158434, 0.16104536563323257, 0.16484201669089138, 0.16047374869249886, 0.16749191375808514, 0.1819332248400658, 0.19167759054069355, 0.17949185970067738, 0.16785619345640657, 0.1856235463596524, 0.16752308471695998, 0.11538292335511091, 0.16606670247312705, 0.17291245877594952, 0.17693049340129596, 0.16414811907068383, 0.19101751038086612, 0.17282464491764882, 0.1749996229327282, 0.009577887237240845, 0.029466331145173497, 0.018490890266138593, 0.031241448996996546, 0.029640291093537607, 0.027649738812974056, 0.022724337457404764, 0.055389621999451855, 0.02045480889041862, 0.09219033282012623, 0.09223969282544586, 0.12826610324223053, 0.10178379473237453, 0.11054938344665133, 0.08995578607743315, 0.09459893997613777, 0.07190370735414509, 0.11270372332850054, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000997226971023002, 9.999999999998899e-05, 0.111356308608068, 0.10296715398375678, 0.11344629867481748, 0.11259618724800946, 0.11327333569856968, 0.11122342362440363, 0.1216836703251496, 0.10794240203344196, 0.1363295561350245, 0.42003186556078653, 0.4185656536978335, 0.41155337434660155, 0.40302040499274827, 0.4288688370896835, 0.41238252663971553, 0.4007449183367072, 0.4245142968019885, 0.41120844984993987, 0.07939140288392643, 0.09195597127363486, 0.0956820830075199, 0.09738310209626688, 0.08178256855369603, 0.07978484678879572, 0.1000750826677117, 0.09564290062953174, 0.08121409472041519, 0.24972935074944447, 0.17097072329514318, 0.21746281923982502, 0.23759655854033268, 0.24893159922049746, 0.12388598441963095, 0.22566312673032696, 0.21987105870066392, 0.24694896337104144, 0.28343820770728245, 0.2831282200346925, 0.2851555500051429, 0.28901489776821, 0.2740835782173059, 0.2813593897345694, 0.27481462352288777, 0.29961453997707, 0.28181849042662743, 0.2295374239507726, 0.2256361522845124, 0.2103222797040194, 0.2084263323923874, 0.22524924811968183, 0.2044892668371775, 0.2339723707009932, 0.22994733504482534, 0.2342712209214195, 0.17646629906853972, 0.18723246736987242, 0.17758481541676263, 0.19434672647968576, 0.18616919755794903, 0.19738942445966046, 0.18645342348526261, 0.17751518514426357, 0.18452341381039028, 0.19893822980310727, 0.18188724521639565, 0.1920007827582959, 0.20413187417308087, 0.18699548924938347, 0.19499461207749702, 0.18137221537575254, 0.21132452880946784, 0.1886098576772559, 0.6808789555103956, 0.20708778857699162, 0.20460731677327015, 0.1863583319215757, 0.18292946979056313, 0.182657669229914, 0.19208090774360065, 0.18061904920615834, 0.6280686144474461, 0.5552037603124285, 0.2085501726348421, 0.20095328660483158, 0.5277098250310133, 0.46375609709721566, 0.5102287241248813, 0.550398528454574, 0.2109845480162501, 0.2114489758467185, 0.17624913528712427, 0.1780659660673335, 0.1744106994567003, 0.19671933100015981, 0.17095452027982738, 0.1968896187203909, 0.17767980244050663, 0.17878226203119207, 0.1927287362093768, 0.07075665895759808, 0.06927972307232944, 0.08424330766982568, 0.07476075309457375, 0.08151821357068734, 0.07132942728409875, 0.07319982736668895, 0.07062608963334227, 0.07755573078114597]}, "mutation_prompt": null}
{"id": "e098e9e6-8b7b-4b1d-99fb-45f86599aa65", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "e96a35b1-c573-405c-aecb-c32669ea1aee", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, crowding_rate=0.2):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.crowding_rate = crowding_rate\n\n    def crowding_selection(self, population, fitness):\n        sorted_indices = np.argsort(fitness)\n        num_keep = int(self.pop_size * self.crowding_rate)\n        return population[sorted_indices[:num_keep]], fitness[sorted_indices[:num_keep]]\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n            population, fitness = self.crowding_selection(population, fitness)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhancing the diversity maintenance by incorporating a crowding-based selection mechanism to preserve the best individuals while exploring new solutions.", "configspace": "", "generation": 64, "fitness": 0.14939758779322812, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.4432511421044869, 0.21045084975114103, 0.407144651340665, 0.19098050574848835, 0.437765960937222, 0.20183183309814456, 0.5229927602484232, 0.37796941021314034, 0.15520915851806627, 9.999999999998899e-05, 0.03291495555332591, 9.999999999998899e-05, 9.999999999998899e-05, 0.05179389672708401, 9.999999999998899e-05, 0.25561516120188266, 0.12445092319552564, 9.999999999998899e-05, 0.07539192131751493, 0.05029540374419794, 0.10456034060103558, 0.15002219895204494, 0.06091235120177518, 0.09747671430033167, 0.07446478187860628, 0.10671588226367912, 0.08579818968976938, 0.10526545531988107, 0.07243540734613219, 0.04903609143277132, 0.11573419747994507, 0.09113853810326578, 0.06975640025715002, 0.030740811412617197, 0.09126557137158853, 0.03921558785028423, 0.07489347188521767, 0.9769684683086125, 0.1498061447628395, 0.9889895096872698, 0.9910512047508097, 0.9929855649906161, 0.9808723009478344, 0.9729932414818954, 0.24640657397445298, 0.09449749729983492, 0.15065306044362803, 0.06845383410641259, 0.06474297588597588, 0.15182964643937702, 0.2111430446700724, 0.044763793905301275, 0.06478992888364099, 0.12310538243270697, 0.21251983555114162, 0.09198233796506905, 0.10675154809386989, 0.19526492222685865, 0.10739030313750986, 0.14858101332288587, 0.11843142107995042, 0.13289302824744187, 0.11631987764499085, 0.14261089912090374, 0.07574622772028128, 0.07865505309611798, 0.18111544417501046, 0.12614917034915107, 0.09234566951664003, 0.10463859337819936, 0.12244453614566697, 0.12880908102720767, 0.11697461523357433, 0.13301624196013817, 0.04663045903929308, 9.999999999998899e-05, 0.011058618023123357, 0.15813528299614465, 0.12928879077746447, 9.999999999998899e-05, 0.11315743815220469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12535426408261352, 0.12346035710146008, 0.04315153020113993, 0.06953900296520277, 0.0571662751103037, 0.019102364469205213, 0.0011226265965884608, 0.18609062597551318, 0.12416653064284733, 0.015500170158370574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04887180280477843, 0.07491806757439967, 0.04440614023086198, 9.999999999998899e-05, 0.0765269197483689, 0.08130640012472634, 0.12337733969948517, 0.03931069293633971, 0.029099654674654474, 0.3878236340363578, 0.21349054353449715, 0.29004829975194746, 0.20023569976785593, 0.45419794137689473, 0.1827807377275702, 0.2613503724986336, 0.25504676327554876, 0.3993965135065266, 0.04918144899751409, 0.06487809267205724, 0.023529690828269723, 0.08187235916673707, 0.05065912219447233, 0.08161895360143501, 0.056426693862295374, 0.08154498015397516, 0.053199184643645814, 0.12223344329424002, 0.12320180509460699, 0.09198707090443026, 0.13293338599425975, 0.12835140710435933, 0.12905558474430068, 0.1179516938335855, 0.11042334766077477, 0.1466788213119662, 0.26024773380137267, 0.1634210547796232, 0.17257572305224989, 0.273547242505924, 0.18604683806351685, 0.20703449663055973, 0.1470842376990964, 0.27355466022915176, 0.19386807915747772, 0.15009793581226316, 0.07491503105050246, 0.17753956721907438, 0.14853301538138708, 0.27131349198785126, 0.1163331118124481, 0.1910778684429898, 0.22794745543439343, 0.17924027825917876, 0.15807703857914346, 0.2075074999271198, 0.147470445437904, 0.17405519418859816, 0.19230533968637964, 0.18676837988763173, 0.15471089534884508, 0.20653711881940673, 0.18326789042315572, 0.2437222118886142, 0.18692767074639227, 0.1814000061819271, 0.16137314875888675, 0.16159190267239265, 0.21798004397531678, 0.1785621492906152, 0.12890127240288352, 0.1832348455001651, 0.16595933113437134, 0.16584144231674014, 0.1668554562059702, 0.16674810931323225, 0.1763982834927429, 0.17750698201952997, 0.13712363444999065, 0.16421366461411946, 0.111316779473556, 0.12056567823308628, 0.15968479145053294, 0.1384638954482711, 0.15634822775265134, 0.12464089990565097, 0.09916394194072842, 0.10422774564038295, 0.1851468207056829, 0.11522551940717729, 0.17256679069490988, 0.1666114101248546, 0.22069085344635564, 0.16704942453076166, 0.13962969745093357, 0.18180814981024096, 0.20027635880686834, 0.14033010358556852, 0.166011200561634, 0.04406635359684863, 0.07080763399057954, 0.05208388674348752, 0.07302715451441733, 0.07009838983882544, 0.0800425741989591, 0.09276534124050562, 0.07067767139001502, 0.05961242763951469]}, "mutation_prompt": null}
{"id": "5560d00b-8be7-41e9-908b-43e40fe161c3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n            \n            # Calculate crowding distance\n            crowding_distances = np.zeros(self.pop_size)\n            sorted_indices = np.argsort(fitness)\n            crowding_distances[sorted_indices[0]] = crowding_distances[sorted_indices[-1]] = np.inf\n            for i in range(1, self.pop_size - 1):\n                crowding_distances[sorted_indices[i]] += fitness[sorted_indices[i + 1]] - fitness[sorted_indices[i - 1]]\n            \n            # Select individuals based on crowding distance\n            selected_indices = np.argsort(-crowding_distances)[:self.pop_size]\n            population = population[selected_indices]\n            fitness = fitness[selected_indices]\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhancing diversity maintenance by incorporating crowding distance in selection to promote exploration and prevent premature convergence.", "configspace": "", "generation": 65, "fitness": 0.45492169827057727, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.27.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8402292513619432, 0.8482028821469986, 0.8680425673170082, 0.8678090044375117, 0.8610732091881308, 0.8692468047431308, 0.8487370330308599, 0.8677460736365202, 0.8446867963800924, 0.7655602643839433, 0.7540168904631941, 0.7555610044242619, 0.7397997640583356, 0.7525788572429053, 0.7642055455035892, 0.7563501179176042, 0.7769630061145143, 0.7691523966189174, 0.14112322725884896, 0.12524872139864818, 0.3120138938424071, 0.1640468030713771, 0.34373847310440697, 0.11838064076320953, 0.22771729087014003, 0.12821551623464733, 0.11844633543545147, 0.1645624199200516, 0.14257652759719297, 0.1509372260184405, 0.15058039035919935, 0.15232234717858395, 0.213434331551275, 0.11304375183965332, 0.13886244830494565, 0.14529389519762148, 0.9637871605333558, 0.960953070413722, 0.9690420220403849, 0.9571312061922765, 0.9711786713267837, 0.9761086563644926, 0.9485230958444523, 0.9657679811149538, 0.9389901440741979, 0.667634896135052, 0.6609098768278047, 0.6269728418295779, 0.6234345252520048, 0.6138318486800425, 0.6545850559030723, 0.08784932653330257, 0.6310404566963763, 0.6353167744749504, 0.7915734645170135, 0.8072883714844411, 0.8084043183290186, 0.7988025536956999, 0.843217697354181, 0.8108043157478475, 0.8517879340508744, 0.8278070095769321, 0.83258876724979, 0.5347673285734169, 0.5753988232312074, 0.6517122092009267, 0.6397575339669433, 0.6020176575255438, 0.566736821302168, 0.5607662046160926, 0.6332516006524482, 0.60015106496432, 0.5791932088766351, 0.5696845884453275, 0.6137891041268324, 0.5528234322006066, 0.494102355820054, 0.5385481766764055, 0.5623825632168667, 0.5599014402184714, 0.5523690160939181, 0.5990925061831776, 0.5376671839906528, 0.5461481283817007, 0.6238026579827036, 0.5338272266862729, 0.6134421642877814, 0.6217718184421177, 0.5332080038546767, 0.5784173323729489, 0.6983418840205389, 0.6776055418653251, 0.6846013796232171, 0.6678924779492, 0.6651279441816196, 0.6864008490110269, 0.6818898547671043, 0.6840988236075336, 0.6897679577615088, 0.2280167733758306, 0.21332478742865268, 0.15537108605001249, 0.4348465879447142, 0.28432093079001985, 0.4937787301286771, 0.319459227048572, 0.30355994471728853, 0.18975811351904703, 0.46328142492568414, 0.47178103499194135, 0.4094585067531681, 0.48240779418331414, 0.511745735951995, 0.4719414614304308, 0.4561070575498155, 0.4437224804095433, 0.425705066806522, 0.7897881559563297, 0.781316944056498, 0.7757525133394141, 0.7756449704147206, 0.7852615777241778, 0.8152521074455932, 0.798671375353314, 0.7796680591001703, 0.8224490841544694, 0.10071025851090687, 0.12071707845057755, 0.1045610069083388, 0.11857624935514144, 0.09633401288724386, 0.10617302138692852, 0.11001878909276852, 0.1127754087911047, 0.1012536114007182, 0.20245987991355063, 0.1897616582364412, 0.13675877095962496, 0.21362975943100038, 0.14080095675026827, 0.170774944653734, 0.15963981363063717, 0.16785929224282203, 0.16173760218636746, 0.4236746682729734, 0.4685360624556101, 0.4913781455069467, 0.4577221096268971, 0.40315433171732873, 0.4932332461831661, 0.5037772722051967, 0.4836516305118257, 0.4907838168264288, 0.3688485421115052, 0.38152239233381, 0.34400021689726645, 0.3720443971019406, 0.314556639424487, 0.34040839928543776, 0.3957782077860643, 0.4021559195058432, 0.32335793708004423, 0.1798163687248271, 0.1843028072931734, 0.19856167937959257, 0.18443848620142578, 0.1938673372908063, 0.19568247704138753, 0.1991213212499774, 0.17570220524953906, 0.2160649881277138, 0.2048163111945316, 0.5247874853011611, 0.4689283480492823, 0.6655788600073957, 0.2413771552981857, 0.2242979682719244, 0.23396661857246281, 0.5808901021564421, 0.22291331672679215, 0.8053402264459374, 0.1849850384511862, 0.1821030159127145, 0.17838679584440165, 0.17626889257275358, 0.19551541262636885, 0.8203462913074349, 0.1862901607536943, 0.1907654038713027, 0.7985087849768059, 0.1659863640925432, 0.1657935563941937, 0.700540361003339, 0.2026544827225838, 0.8272395307348888, 0.2081379349478355, 0.21251701261650757, 0.20482282010705943, 0.18897886639454275, 0.2021998832747558, 0.16620238075419347, 0.18009197838507263, 0.1806539467728182, 0.18336963976405918, 0.1820848796114839, 0.19370746552683027, 0.17601533525661306, 0.08254344977644923, 0.07283225040575003, 0.0874505690287859, 0.08357261805051364, 0.0772126959487619, 0.07386761909944695, 0.08508327435428287, 0.0839590790100363, 0.07013277650581318]}, "mutation_prompt": null}
{"id": "fe20cb31-5129-461c-9bf8-f836be1d053e", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            F_i = np.random.normal(F, 0.1) if np.random.rand() < 0.1 else F  # Self-adaptive mutation scaling factor\n            return np.clip(a + F_i * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Introducing a self-adaptive strategy for mutation scaling factor to dynamically adjust mutation strength during optimization.", "configspace": "", "generation": 66, "fitness": 0.44596041308803835, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.27.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8522734542437486, 0.8350288436279651, 0.8342250591664238, 0.8576004189488415, 0.8693151293007265, 0.8783943772578513, 0.8689917575472346, 0.8796997888565685, 0.8563850516721643, 0.7535096845486026, 0.7628701941582087, 0.7616729371003595, 0.760636510220809, 0.7382679498808669, 0.7514207998054918, 0.7758030329956281, 0.7488935362089864, 0.7587416169518965, 0.1813388527536045, 0.19009342261877804, 0.3280124493577937, 0.12471147188201415, 0.13731662236060893, 0.31323742866726634, 0.2008914063080932, 0.12791640742994403, 0.11198055620058245, 0.11632180301731099, 0.1279544811821275, 0.21034120546707735, 0.1174857823150407, 0.11728636497925404, 0.1348246495142741, 0.14887157672676388, 0.1290647282720061, 0.10398804119396832, 0.9852675203750957, 0.9673189603845874, 0.950560447178112, 0.9619556578015801, 0.9486603810603476, 0.9664624948751221, 0.9620681356824761, 0.925403959537701, 0.9928432749960995, 0.6404998962748173, 0.6194607909037672, 0.5908478495322053, 0.6619006500893364, 0.646618487570402, 0.6319202028076386, 0.6173432857336665, 0.6315189018712069, 0.6399590690478246, 0.8335486824887681, 0.7946143730577466, 0.8130398259920224, 0.8487297133685885, 0.8600469860742651, 0.8341495565901195, 0.8355993398166245, 0.8100258012603889, 0.7882850994077966, 0.5482717387089047, 0.5811593159001432, 0.55398011451502, 0.6315103782565933, 0.614361039704193, 0.5719347349629099, 0.5454861193223219, 0.6098872830066809, 0.5442407753932464, 0.6350735777259935, 0.010052121802847647, 0.6811741274964034, 0.6285547364951918, 0.5391284321766187, 0.5995499605335655, 0.5331040973297873, 0.6086528252415138, 0.4786966296726951, 0.5559514971565198, 0.5908958015468206, 0.5458833364362579, 0.5694061175836314, 0.5951202961620103, 0.5823844734430109, 0.5760751374973591, 0.5888848405849237, 0.6225791441810938, 0.6677405698202559, 0.6539393633393994, 0.6434313319912568, 0.6701975894313672, 0.6694331296786258, 0.6706065328362039, 0.694898529612168, 0.6699708854997795, 0.6917369118462213, 0.17868595346802774, 0.28678866215041376, 0.23008217391298091, 0.38121730494866113, 0.47228585572709825, 0.49824274669237845, 0.3235026091660821, 0.3500804516742947, 0.22304190482230546, 0.4389424560482347, 0.4397238676171632, 0.44014226187297356, 0.44996592014105985, 0.4646738853190483, 0.4847799910183209, 0.4302978363312111, 0.43911772031912055, 0.44515889789599694, 0.7874318554323392, 0.7556705819044265, 0.7949367579386457, 0.7828170848547695, 0.7722503626953652, 0.7815024325641937, 0.7498258898221505, 0.775264736670879, 0.7882749236512379, 0.1055294730880334, 0.39704876176738335, 0.10147888922426151, 0.12948862740577483, 0.12618230471341263, 0.10480572439901625, 0.1244573711518766, 0.11311736563172836, 0.10080746240921612, 0.18052347578107453, 0.09476359351995067, 0.09587210522687295, 0.2010462541880017, 0.16949064045293138, 0.1375375630818898, 0.16686115515602196, 0.14712170206325959, 0.16111308469555385, 0.41682294779537266, 0.4115330323836309, 0.43348235951930314, 0.4401992551284284, 0.4856053774146297, 0.420957995452822, 0.5079863185268205, 0.4918001669083618, 0.4762175839211894, 0.3914144961578273, 0.36103721189337545, 0.374287542573542, 0.38859778591665683, 0.3134474468144074, 0.3592311523864725, 0.38851602007821817, 0.34400839029630026, 0.39426028884065745, 0.20957840734416544, 0.1713371188050633, 0.1968716273254747, 0.20091759913835383, 0.19065358956467204, 0.1911294509658491, 0.19594714507729982, 0.20321055680618405, 0.1926417418187366, 0.21391668702241773, 0.20192417770770998, 0.5532337144497625, 0.23127090717122023, 0.42172519211667026, 0.2145428933128405, 0.3479002850943571, 0.20921556467852842, 0.228514606812804, 0.16889636307990363, 0.207503434287725, 0.19470467601967567, 0.18240539213716345, 0.18763400385244355, 0.17746103722532458, 0.1684567715905939, 0.836470280177265, 0.16407264092023655, 0.844163194096938, 0.7627637088611354, 0.1511326553938399, 0.19906622434141574, 0.20839858749230467, 0.1609652585590009, 0.12697951788148387, 0.21073769506045548, 0.21114572601152004, 0.1732373090525392, 0.17189544801664802, 0.18858449377686437, 0.17719314807841524, 0.17808966132988824, 0.24026527441960766, 0.17540108796006948, 0.19347596189642002, 0.17668147943373047, 0.06987546316728876, 0.07503123908916609, 0.08706320256239652, 0.0695896826251815, 0.07742489737439429, 0.07932408925825163, 0.08550859711751657, 0.06934594929161009, 0.08264752633338124]}, "mutation_prompt": null}
{"id": "584eb0bd-6344-4bab-ad28-6a87eff37ceb", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "d4cccdc4-75d4-48b4-ba4f-f5deca2d7e3c", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(x + F * (b - c) + 0.5 * np.random.normal(0, 1, self.dim), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveDE", "description": "Improved AdaptiveDE algorithm with enhanced mutation strategy and dynamic adaptation of mutation and crossover parameters for faster convergence and better solution quality.", "configspace": "", "generation": 68, "fitness": 0.18056400497959835, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.33125640270483336, 0.3299443603052603, 0.33844999097860295, 0.32692370924758984, 0.3460179887503543, 0.32387997321577444, 0.3417309289729499, 0.34827342541483264, 0.3442334818831225, 0.01492099466198693, 0.011678473834875303, 0.03319161288389971, 0.009973750448369567, 0.010031628623700106, 9.999999999998899e-05, 0.008207645734333191, 0.011716120224529059, 0.001960915206214109, 0.08384842993043129, 0.0950063572499128, 0.09035470563955628, 0.09739646882617381, 0.08861644380210287, 0.09414559843783132, 0.10700842928061971, 0.09946203656814667, 0.10091387400769403, 0.08151726426822048, 0.09330290586047285, 0.08402669426701104, 0.0745487913945646, 0.07651737080960175, 0.0821786336515462, 0.08513356269750316, 0.07438709617156114, 0.07731240429240682, 0.9958763551375523, 0.9796240357450108, 0.9628721645714428, 0.9641320719262169, 0.9534980353688846, 0.9525452636540681, 0.9068086756679761, 0.9262027119497858, 0.9675307419151506, 0.21702396228904086, 0.19043053479245553, 0.18448154726476518, 0.19267545137543451, 0.19737166693117036, 0.1915163804193516, 0.19029237597170445, 0.18953060756662965, 0.18649825295915667, 0.23737689946326324, 0.24091736200086267, 0.2467617654345008, 0.25507548038001715, 0.253993841020705, 0.25446404144076185, 0.22341169983901765, 0.2173828180670031, 0.21861810488636035, 0.11393807651718013, 0.11679051226850112, 0.12609262460514015, 0.1080978912080025, 0.1244124169508033, 0.10765995198817768, 0.14912630194278498, 0.10543589378096108, 0.107874510753448, 0.09832770306332006, 0.10131138190841849, 0.11972650733632906, 0.11281905633219047, 0.10451532119496987, 0.11025176665675496, 0.11662140594465131, 0.10931884326322905, 0.12303193532214296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07912702330955634, 0.13145320207158728, 0.060532560524062085, 0.03904323955171918, 0.07929341383825428, 0.05925804261094669, 0.09528342912567456, 0.0727233798629543, 0.06985201140364883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06341147771895139, 0.04414470889483213, 0.05890030250302969, 0.05518935712670281, 0.0543875054051296, 0.046151005344196916, 0.05425667051126126, 0.0712797706240077, 0.06471231389769527, 0.3291880621562191, 0.3186958291408799, 0.31854791473361865, 0.3214578746100083, 0.3190884241886832, 0.3271267133292429, 0.32795596576157615, 0.32787353517634776, 0.34538623653949596, 0.09521850504278173, 0.08077502991786001, 0.0854891655485841, 0.0863378289697585, 0.08629011251744889, 0.0771336524417946, 0.08617753810704287, 0.10052717111476794, 0.09292857886482564, 0.13770989080258078, 0.12307300676139643, 0.17948664269067371, 0.16422420127918158, 0.14623994028204923, 0.13931175033486254, 0.13714367715836395, 0.13435988970569612, 0.13667834754730834, 0.22626865370685545, 0.2295184098254387, 0.2400085822274215, 0.2361761009107174, 0.23380700493688833, 0.2254189200339961, 0.23912948809814683, 0.23296931715802172, 0.22068262676829553, 0.17400692080037494, 0.1835219778224657, 0.17193075356736298, 0.15920725402271163, 0.17977039088354174, 0.1700255892000958, 0.16314042204216972, 0.17060176134268512, 0.18281401857341462, 0.17861410144584022, 0.2032446912771354, 0.19796275492978643, 0.19722779758373932, 0.17569633014575103, 0.1716887076289646, 0.17978301732751534, 0.17144535578800657, 0.19604429133762002, 0.17913645137096523, 0.17006376645086907, 0.17246791576282516, 0.17774172434236057, 0.1724604681210411, 0.1866986150155372, 0.17162322182208978, 0.18487718492262872, 0.16964555359060818, 0.3171102304391026, 0.16298854913340344, 0.17290819363266963, 0.26506523989073094, 0.3125264249949621, 0.29266156331591897, 0.17757942318270525, 0.16970030935241354, 0.18151446083804323, 0.2182103769135345, 0.2328046418123897, 0.2688666206919281, 0.30515244502870054, 0.1744732965762118, 0.24027221964384093, 0.3261646482282372, 0.20912028170156816, 0.20427894746718167, 0.18702935299778067, 0.18675403374224564, 0.17926769304019585, 0.17881820420471972, 0.1846624482031458, 0.18365186020263224, 0.19028883260444618, 0.2003069562559312, 0.1834173954225986, 0.08986363946897147, 0.07507896411990334, 0.07504083630487657, 0.07306186113405289, 0.069471747064069, 0.09242844641953829, 0.06692643751201954, 0.08597376706698867, 0.077306267832563]}, "mutation_prompt": null}
{"id": "6851ac52-d8a1-4811-b824-2551dce1e185", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "7cb2ef86-2ac0-4eac-a238-f78f4b1fb76f", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n            \n            if _ % (self.budget // 10) == 0:  # Dynamic population size adjustment\n                self.pop_size = max(5, min(50, self.pop_size + np.sum(np.abs(np.diff(fitness)) > 0.0)))\n                population = np.vstack((population, np.random.uniform(-5, 5, (self.pop_size - len(population), self.dim)))\n                fitness = np.append(fitness, [func(individual) for individual in population[len(population) - self.pop_size:]])\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters enhanced by incorporating a dynamic population size adjustment mechanism to adapt to the problem landscape more effectively.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 40, 17, '                fitness = np.append(fitness, [func(individual) for individual in population[len(population) - self.pop_size:]])\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 40, 17, '                fitness = np.append(fitness, [func(individual) for individual in population[len(population) - self.pop_size:]])\\n'))", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "93828e8c-fdcc-4609-8ae6-e7dfb724847d", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c, d, e = population[np.random.choice(len(population), 5, replace=False)]\n            return np.clip(a + F * (b - c + d - e), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveDE", "description": "Improving parameter adaptation in Differential Evolution by dynamically adjusting mutation and crossover probabilities based on individual performance.", "configspace": "", "generation": 71, "fitness": 0.2746803097113237, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.6133295144038515, 0.6167517436523032, 0.6655190840166311, 0.6911319727667083, 0.6880096825130178, 0.679342148708963, 0.6591629570623081, 0.6751950635615996, 0.6594671735083114, 0.47252422678394645, 0.46373447158677805, 0.49231688349439906, 0.4607083557513246, 0.47551723238650945, 0.48030109113356045, 0.4518545418501887, 0.5008825578142218, 0.5005132935108829, 0.08435336986577457, 0.07735537938350057, 0.09592760332635064, 0.10551706847075015, 0.08487323284351245, 0.10065235641041359, 0.11325214482585289, 0.08356104438617495, 0.10431766674002574, 0.07752142982987076, 0.07296674690295035, 0.07568135290553513, 0.07118517883783082, 0.08275075054987613, 0.07995398840723467, 0.08430489435994315, 0.07941704577812947, 0.07918966093444813, 0.9776779134205895, 0.9557526833311184, 0.9953057063951996, 0.9703264772361105, 0.968561876971253, 0.9839146858145655, 0.9420909783329228, 0.9864604710575129, 0.9851914146199112, 0.30704987912128756, 0.3511097619303809, 0.31769529644695227, 0.3172559202309325, 0.3363395601216713, 0.30736557038206824, 0.31824885078106957, 0.351069183959108, 0.33944492829179285, 0.4410993552625335, 0.5676249752543128, 0.4445538806438153, 0.5403264076331542, 0.5076582822319643, 0.6195322299410129, 0.6301143219482002, 0.38230534798710203, 0.5075290146503832, 0.21906356680847594, 0.17918264632250414, 0.2323895970040839, 0.2684869779904855, 0.21779555544052087, 0.16420503801716912, 0.23016174450582416, 0.19114739938509773, 0.1879307115870129, 0.3003670089204127, 0.3068133796524589, 0.2972371262757808, 0.1654085171305807, 0.1696044625399904, 0.24482934539206191, 0.16921192694531184, 0.2183980125460846, 0.19868252468416814, 0.10717607322126532, 0.12759274655464137, 0.10378919591482716, 0.23491102659296914, 0.1557524661493186, 0.17433366275725526, 0.13436260277210277, 0.16918920132473247, 0.13441175126155014, 0.20426138153668982, 0.27579135509309627, 0.21865547713400635, 0.30228153404205227, 0.3217589374202612, 0.23004151755577895, 0.29644491668737327, 0.2674108417979303, 0.2908078603045202, 0.024851924830193273, 0.04782814375422606, 0.005908574879257111, 0.034489764039770665, 0.03500294311732011, 0.03696736938818446, 0.06856039380345158, 0.015262104277894872, 0.01585650500249325, 0.18278505589886307, 0.20595195763716367, 0.1747679176297222, 0.18655970511129094, 0.17808782274388868, 0.18667325538245938, 0.1690425128253077, 0.18230803546305763, 0.19219931918608513, 0.5411517299950901, 0.535933312054893, 0.5525752082314914, 0.5046449033323541, 0.48647417426285244, 0.5132425059331138, 0.5281719753425289, 0.4930290138257878, 0.5164788470791939, 0.08112329702566878, 0.08393066336598554, 0.08585277004425884, 0.07670100210052455, 0.07472382259523924, 0.07827724193997565, 0.07779624836251864, 0.07811041845994882, 0.06798513479131596, 0.13617697809863416, 0.14311781018077996, 0.1461318312793768, 0.14950076915416866, 0.13937299164535089, 0.13114016755797997, 0.14278020804838287, 0.12249983743804826, 0.1398830293819785, 0.25784896780461186, 0.251745864012206, 0.24212861464365087, 0.24809996249986588, 0.25171447229266986, 0.22878305148429745, 0.2694296633469091, 0.2726303869908083, 0.27629931856005263, 0.1749006720844829, 0.16977730207352182, 0.1660125365446885, 0.19880950319348312, 0.19896420142732163, 0.18724010603525432, 0.19162712443016316, 0.21545943263813327, 0.19024216231907132, 0.19075553078309426, 0.17045008129392425, 0.17563679264449916, 0.16841856733116078, 0.17723025801280146, 0.17798328664656637, 0.18205197920197858, 0.18395560652190002, 0.1622538297206947, 0.16769082193670926, 0.1764440402325943, 0.16703862624094012, 0.16465623533300877, 0.16633682764002444, 0.16993912766660124, 0.18271145541925893, 0.1747186881948508, 0.16878624610039328, 0.1644620445476812, 0.4747952832038036, 0.27975484970994735, 0.17828856547093874, 0.539122574686349, 0.1756913695130946, 0.14429885184475844, 0.16958176866746033, 0.600334149401013, 0.20145520479349377, 0.4838151557148611, 0.1620217811945256, 0.4953293870162625, 0.16561957142826178, 0.17976269365185904, 0.6997115475354252, 0.20130639179950105, 0.2065530185301564, 0.1825338404493133, 0.1918463591798415, 0.1940463908276765, 0.19309355004144457, 0.16445311283103348, 0.17983736638915293, 0.19274456225969339, 0.18113441277489717, 0.20429810882165134, 0.05850550347162009, 0.06631733264360828, 0.06453755288444896, 0.06351473936198127, 0.06820012221191885, 0.05558906825326049, 0.06533104024747571, 0.07137642090283858, 0.0624666930554002]}, "mutation_prompt": null}
{"id": "1d5d42c3-3efd-4b63-a804-68d00ab855f9", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "b8c6875d-24a2-4139-85dc-8ffa0a8947db", "solution": "import numpy as np\n\nclass ImprovedDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDE", "description": "Improved Differential Evolution algorithm with dynamic adaptation of mutation and crossover strategies based on individual performance to enhance exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": 0.4602578065961314, "feedback": "The algorithm ImprovedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "b5141d7a-3b2a-4b62-a30e-22ed1a6106ab", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "6e638d36-1c25-4d1d-b7b8-ac62bdd73a3a", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "1b6d0ce8-467f-4c6c-868d-6c6bfb2ccfb3", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "b2276952-8046-46b6-956a-32daf1c6910f", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, w=0.5, c1=2.0, c2=2.0):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def inertia_weight(w, iteration, max_iter):\n            return w - (w / max_iter) * iteration\n\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for i in range(self.budget):\n            adapt_F = self.F * (1.0 - i / self.budget)  \n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * i / self.budget) \n            w = inertia_weight(self.w, i, self.budget)\n            new_population = []\n            for j, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[j]:\n                    population[j] = trial\n                    fitness[j] = new_fitness\n                new_population.append(population[j])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality, incorporating a novel inertia weight adaptation mechanism for improved exploration and exploitation balance.", "configspace": "", "generation": 77, "fitness": 0.4602578065961314, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "b3357b26-4aa9-4079-89ac-1b0b10468821", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "5a12f841-a733-46bb-bfb3-a6c5a6c2f23f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhanced Differential Evolution algorithm with improved adaptive control of mutation and crossover parameters utilizing a dynamic adaptation mechanism for enhanced exploration and exploitation.", "configspace": "", "generation": 79, "fitness": 0.4602578065961314, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "04bbe6af-6d41-4997-ac5d-0f68a59a958d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            strategies = [(x + F * (population[np.random.choice(len(population))] - population[np.random.choice(len(population)])) for _ in range(3)]\n            return np.clip(np.random.choice(strategies), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhancing the mutation strategy by incorporating a multi-strategy approach for better exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ']' does not match opening parenthesis '('\", ('<string>', 13, 128, '            strategies = [(x + F * (population[np.random.choice(len(population))] - population[np.random.choice(len(population)])) for _ in range(3)]')).", "error": "SyntaxError(\"closing parenthesis ']' does not match opening parenthesis '('\", ('<string>', 13, 128, '            strategies = [(x + F * (population[np.random.choice(len(population))] - population[np.random.choice(len(population)])) for _ in range(3)]'))", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "0430b957-ab01-4898-a907-365176731a17", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "3841ae04-5d1e-4d2f-8acf-a6add4bf3aab", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        super().__init__(budget, dim, F, CR, pop_size)\n    \n    def __call__(self, func):\n        def chaotic_map(x, a=1.7, b=0.4):\n            return np.sin(a * x) * np.cos(b * x)\n        \n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            chaotic_factor = chaotic_map(np.sum(x))\n            return np.clip(a + F * chaotic_factor * (b - c), -5, 5)\n        \n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Incorporating a chaotic map for enhanced diversity exploration within the population.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "92f890eb-79e8-4936-b558-d27f791b1780", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with a sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n            if _ % (self.budget // 10) == 0 and self.pop_size > 5:\n                self.pop_size = max(self.pop_size - 1, 5)  # Reduce population size periodically\n                \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveDE", "description": "Improved AdaptiveDE algorithm with a dynamic population size adaptation mechanism for enhanced exploration-exploitation balance.", "configspace": "", "generation": 83, "fitness": 0.4602578065961314, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "b92bfffa-b879-4f39-8155-55d0c58e55a4", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "efbd3bf8-2ed1-44e0-a40c-4f586649a127", "solution": "import numpy as np\n\nclass ImprovedDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c) + np.random.standard_cauchy(self.dim) * 0.1, -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDE", "description": "Improved Differential Evolution algorithm with adaptive control of mutation and crossover parameters using a Cauchy distribution for better exploration-exploitation balance.", "configspace": "", "generation": 85, "fitness": 0.20767840639682333, "feedback": "The algorithm ImprovedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.41485686357129203, 0.39649160047592935, 0.42201613990402376, 0.4779424421647567, 0.44203620519202036, 0.4267955679521541, 0.3973062744488923, 0.41017664401878506, 0.40746113928130756, 0.05115393755570441, 0.07938844465789097, 0.07330772730677759, 0.04728486653509767, 0.07195256038290132, 0.04948139362831716, 0.06140757040237532, 0.07915295290348934, 0.03539157933712844, 0.10662038536928375, 0.10224177941219148, 0.09635031558645302, 0.0978486133156421, 0.10384894856751359, 0.10644440432303559, 0.09905838650108467, 0.10145478540391994, 0.0883797052154216, 0.10123536852392423, 0.10244836643180755, 0.0830290403693349, 0.09912927314426812, 0.10501764789787849, 0.08395211194641161, 0.09279109237057659, 0.08768329750513515, 0.09755721330567435, 0.9721517794785703, 0.9549109893242984, 0.9873918079573999, 0.9436672476449591, 0.9941393293962919, 0.9804716761769755, 0.97725001566461, 0.9424439512069281, 0.9500797703781283, 0.25029658459714477, 0.2490029783212574, 0.247166947851314, 0.25614687869601216, 0.22860621889548394, 0.25882657810135246, 0.23148144386167235, 0.2584339434924886, 0.24816246682326226, 0.29191807744962095, 0.39860988087233173, 0.29225979247290623, 0.30706448467261727, 0.29423066123166386, 0.2948248192896167, 0.28350138234767297, 0.29163590716932664, 0.47056264955012983, 0.15591834161708717, 0.14518331285680997, 0.155414022554763, 0.14398801607760792, 0.16822576941961886, 0.15228662245986724, 0.1420293302493597, 0.14408931269083547, 0.13250286014339507, 0.13561926489159792, 0.1505486856357604, 0.12040695844366023, 0.14696182587656526, 0.154172041713993, 0.14038190381278925, 0.143407967728734, 0.14378640914545338, 0.15099074880778007, 0.0007044216507591239, 0.007915152031727102, 0.034016108297714176, 0.017205255157868082, 0.014875145549143931, 9.999999999998899e-05, 0.002047700857342405, 0.0010073120631001187, 0.020011133617395926, 0.11897082815272786, 0.10318865097682717, 0.07410075100072533, 0.06763781721250217, 0.06881606254583894, 0.04242666951746721, 0.08033452290390086, 0.07196738337337594, 0.08611536523363195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08846789227245333, 0.0799815148217089, 0.07672049325222019, 0.08427665901752857, 0.10954932044113153, 0.09163240856197585, 0.08439665620018566, 0.07984767530531278, 0.0869666079270377, 0.3877395570284945, 0.3593733699933881, 0.3901835215986207, 0.3845463630157231, 0.37254765629420883, 0.41946692584604284, 0.3869873876130273, 0.3869551078598865, 0.39097760555857486, 0.07946693440203456, 0.10931424963178593, 0.0971764151463671, 0.08808535591567235, 0.08162517859163532, 0.09053905097895587, 0.09517811941494547, 0.07803597298890108, 0.08830576168383886, 0.22510307122269924, 0.18173834167750758, 0.14249169018967134, 0.130846086816635, 0.1387661359992226, 0.1552637523386744, 0.14415632747799645, 0.1653787183918881, 0.14742267046596158, 0.2570066508471699, 0.25373860238845714, 0.2643694369214462, 0.2554731593313594, 0.2676376739724784, 0.2550573151506399, 0.2752574408510865, 0.26488467026156515, 0.2642552650342057, 0.19238303622075636, 0.1972183355024033, 0.19896298573512805, 0.18659972417754978, 0.19718174114804043, 0.1903741445761088, 0.2077912986121766, 0.20470712847041528, 0.20786166219842028, 0.18368695879573926, 0.1811714651816525, 0.1824872512528949, 0.17811886786265063, 0.1770770747111441, 0.19130760226207777, 0.19397829120901633, 0.19642436437532274, 0.1943887624675289, 0.18169101758800366, 0.1829038873341099, 0.1860227279339991, 0.18674174554265932, 0.19139468830034878, 0.1950033551249588, 0.17251984401253395, 0.19066073499893166, 0.18066079202959429, 0.5708129640941844, 0.18515408257986432, 0.1686954487315454, 0.5425401011522397, 0.41453235444668945, 0.18354219484895018, 0.15581316863481554, 0.515237992754183, 0.18003325230396494, 0.19834043865196094, 0.2014361787210307, 0.1963233979453447, 0.20812786404399575, 0.28943478895928343, 0.19192985371913363, 0.4574426759405097, 0.20982538474402612, 0.21385142737499352, 0.2035620799314537, 0.18490041752584152, 0.1992146723892373, 0.18034786378293488, 0.1878591264406133, 0.18791505143409704, 0.18478171592213533, 0.19539566456270885, 0.1764678923004478, 0.08905987349891054, 0.07142317443663049, 0.08188088641801694, 0.06813195170943342, 0.0785558784036029, 0.08012492118467107, 0.07556692114560559, 0.07724982907245359, 0.07432745148368414]}, "mutation_prompt": null}
{"id": "aba47ae9-e9d2-404b-9b3c-62be70fa4f45", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            \n            # Dynamic population size adaptation\n            if _ % 100 == 0 and _ > 0:\n                self.pop_size = max(10, int(0.8 * self.pop_size))  # Reduce population size by 20%\n                population = np.vstack((population, np.random.uniform(-5, 5, (max(0, self.pop_size - len(population)), self.dim))))\n                fitness = np.concatenate((fitness, np.array([func(individual) for individual in population[len(population) - self.pop_size:]])))\n                \n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation strategy to enhance diversity and exploration capability.", "configspace": "", "generation": 86, "fitness": 0.45918158763665395, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8500083471951313, 0.8353765941906379, 0.8426943190899632, 0.856663544261751, 0.868825426829698, 0.8613290801185685, 0.8733089964081253, 0.8700499894652961, 0.8455862948505033, 0.7708703330799468, 0.7500764462178426, 0.745380773118491, 0.7498622851703595, 0.7727882757532688, 0.7639509748551885, 0.7683515823859584, 0.7507825327642017, 0.7470926712191357, 0.23410543526389782, 0.11325733433636287, 0.13763841330188298, 0.1505316096515844, 0.2045414411737626, 0.3884698462932399, 0.26937755174095146, 0.14920583275377253, 0.10488286017490578, 0.342901017679204, 0.12044183984439494, 0.11552593021470148, 0.12684231126703094, 0.11767676235705182, 0.13700719429902952, 0.13055703873646585, 0.13020392261667746, 0.1353456486557465, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.6271998988844023, 0.5981679552171706, 0.655592307342951, 0.6384641683408215, 0.6526822765814709, 0.6377411512246057, 0.6053974750245645, 0.6591292687067467, 0.6468437444575803, 0.805151592331127, 0.8303698065949867, 0.7859291749864996, 0.8323164123268882, 0.8256145328530153, 0.784404826425362, 0.8039406886351845, 0.8028487922511489, 0.8334860390555446, 0.6157292791445541, 0.13185568180707974, 0.5264827723721397, 0.5476956501945855, 0.5819273184726614, 0.5467318018713336, 0.5330930473011144, 0.6193979675459897, 0.5707375244255299, 0.6860484742390887, 0.5068474581254964, 0.6704466701118246, 0.5972290390523026, 0.6433039480641107, 0.6287154523512574, 0.6037003959575344, 0.5763252782146726, 0.5038137030867336, 0.5974792133241436, 0.5261235380423108, 0.5441008677213752, 0.5068084527140064, 0.5826932492289448, 0.5678809322467283, 0.5652319156110788, 0.5699265629929287, 0.5869748493053772, 0.6871804349372231, 0.6540838286040955, 0.6459744063086973, 0.6906480021070479, 0.6454947532530062, 0.6938976668029344, 0.6669691336439243, 0.7090169311081278, 0.6563103121220015, 0.31140382291645574, 0.12837376334476902, 0.2673072936643893, 0.418908368511708, 0.4195454065587202, 0.1871847933845595, 0.15118727031060875, 0.18022171154480326, 0.1533075786546797, 0.47171389097038885, 0.5008480410223414, 0.43007005718600244, 0.43937407340988344, 0.49648284153310074, 0.4355752783347525, 0.4705323628475918, 0.42939103491541364, 0.4429158868851796, 0.7572239608976118, 0.7739929650717638, 0.7807569738296141, 0.7715151962863349, 0.7482815084991083, 0.7687309180717904, 0.7736517327679017, 0.783266361073932, 0.7976025864896477, 0.09031524840169314, 0.10276507466601525, 0.10763542512473268, 0.11184543118916568, 0.10796339398991928, 0.09201475165730355, 0.09917543922785421, 0.10481667349037016, 0.09869355840569238, 0.1683292752463209, 0.1287277788584399, 0.1963632581074799, 0.28533267989247824, 0.14232713477598102, 0.19854476142032873, 0.16854934502335162, 0.35763644136732453, 0.16089690815072533, 0.4549784850861913, 0.483282183547568, 0.4609190465234345, 0.42035422850248405, 0.3944922436756617, 0.45492467953164495, 0.49403274096189176, 0.4736479436712273, 0.4778959538991304, 0.36170247042873027, 0.36548480000624517, 0.337250311827206, 0.3717299620045923, 0.321819708745264, 0.35322280878921686, 0.3991792596924737, 0.3808960230265934, 0.3767840663250758, 0.19778447755275042, 0.2180494507779347, 0.20203148279366157, 0.2000426817662051, 0.17665565373557235, 0.2393005568904787, 0.2003883483982305, 0.17870741978347537, 0.23058163045693625, 0.21532677521693866, 0.19145480919423896, 0.2295030047574117, 0.41145127893108746, 0.2141060545726685, 0.30901933633578094, 0.5649719243462812, 0.20549264327023864, 0.20188063938300183, 0.8793870330850384, 0.8227566104298193, 0.8506601963702705, 0.8519689009421895, 0.8072827371602029, 0.1932674626053591, 0.1870399016127524, 0.19697451760146856, 0.1760901890224975, 0.7885227846446917, 0.20231480332345086, 0.2069236294553033, 0.20495567934052772, 0.7060700529781676, 0.7498659153856986, 0.20837890374107604, 0.12675351879294938, 0.1551665782010354, 0.1717313092635976, 0.18277607516082628, 0.18199865436568274, 0.2810380826698584, 0.1777232034910594, 0.20887367211368002, 0.19362705862573826, 0.18523774199242327, 0.1766663471097174, 0.0905173118223942, 0.06986620023558354, 0.09157402412559479, 0.08351765175997572, 0.06983462189144007, 0.08277461285231691, 0.08465550961810309, 0.09170590165143999, 0.07598316781990744]}, "mutation_prompt": null}
{"id": "d9a06e27-8064-41b9-ba8a-98359c2d3705", "solution": "import numpy as np\n\nclass ImprovedDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c, d = population[np.random.choice(len(population), 4, replace=False)]\n            return np.clip(x + F * (a - b + c - d), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            dynamic_F = self.F * np.exp(-_ / self.budget)  # Dynamic scaling factor for F\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with a sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, dynamic_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDE", "description": "Improved Differential Evolution algorithm with adaptive control of mutation and crossover parameters utilizing a dynamic scaling factor for mutation and a stochastic strategy for crossover.", "configspace": "", "generation": 87, "fitness": 0.2417871680047614, "feedback": "The algorithm ImprovedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.6227642741102262, 0.6044740203683987, 0.6306755792468374, 0.6299498213840447, 0.6350685875105793, 0.6687693725012798, 0.6054672922726456, 0.6094905358080009, 0.604483318452927, 0.3663546507384319, 0.36847549281855696, 0.40183294628511235, 0.41504843377991174, 0.3868163737824184, 0.4034287350373521, 0.3858537659304593, 0.40609429396596053, 0.37348040343791333, 0.07479429333535248, 0.09638138067019941, 0.099375235150586, 0.08010415719748798, 0.07998363805485365, 0.08170848211586834, 0.07559284848856784, 0.08034450551118466, 0.08282903057483104, 0.07972781336125312, 0.07201547922690221, 0.07342360770694834, 0.07601320310723059, 0.0706602841093299, 0.07915522754778592, 0.0765791789959217, 0.06882510705836975, 0.07624170654577866, 0.9616921122320459, 0.9813568126657929, 0.9932317035547049, 0.9375849573503644, 0.9411148514772333, 0.9782442409092231, 0.9572396721444134, 0.9624238761070214, 0.9639130712697054, 0.29449689651942224, 0.26923885969332506, 0.28702445799187615, 0.24144330080427123, 0.24907717132889007, 0.25159266226740695, 0.27222740431823633, 0.27743190611267343, 0.26552247484794267, 0.46066205576544705, 0.4650973503733098, 0.4670272503380142, 0.42874031188628225, 0.5824750943259458, 0.5036963730680439, 0.47490671823007846, 0.42237188677051185, 0.5421289846480947, 0.11605962190383468, 0.11853770806833885, 0.13341316910213208, 0.15608340277388, 0.12115211460372777, 0.12606885325690997, 0.13479019989989427, 0.1151151940919537, 0.12152810220542287, 0.27647014451997387, 0.11705596007122498, 0.11946721668842497, 0.09544321500421193, 0.11528609074661322, 0.13181933794538103, 0.10454251147736071, 0.13940860635776786, 0.12157307050426858, 0.13124612056850038, 0.10457604569489798, 0.12018855139258378, 0.11866499211312276, 0.1276364376829946, 0.15675628955562004, 0.1326410337900925, 0.10355615794583917, 0.1355064630867524, 0.2303406216835655, 0.28085997435756804, 0.23393313459544907, 0.29177910154355136, 0.22743006124407417, 0.23275708638443415, 0.2770166625360997, 0.27479840796416966, 0.2575503538568612, 0.011644566958780023, 0.013322062406951551, 0.003397107038500713, 0.014918173365074283, 0.006989474303836896, 0.04733440698033575, 0.01524003446622424, 0.0014841910520908552, 0.019756121689169737, 0.14501113060980464, 0.15754832947851805, 0.1518732646877481, 0.17542448899100327, 0.14580869603154156, 0.15657010053721643, 0.15988099970386027, 0.15388082675145065, 0.1377965733517087, 0.49296693061774666, 0.4311230688606813, 0.46200301510586805, 0.4711776283732826, 0.4871165403521309, 0.5043507647373114, 0.4266621197326951, 0.4635235938731156, 0.5095250209695769, 0.07401807047213771, 0.07865364434954647, 0.08092261463897843, 0.0856824767891261, 0.0765506487007458, 0.07014156931957782, 0.07529713564175122, 0.06570193154291848, 0.08531699394007641, 0.15665541632304392, 0.13469615930703494, 0.14533090575824337, 0.13425876323202623, 0.15582535145221643, 0.14187171705952206, 0.14153422397874527, 0.15349742761999297, 0.14806994045723754, 0.21507439696672515, 0.2306928826859449, 0.21904078448059294, 0.23844641132768885, 0.21943549376163052, 0.23392641566110783, 0.2231714361917687, 0.24741482624779232, 0.24164624205682073, 0.15434192072094433, 0.15841251288822655, 0.1631820249173077, 0.15222516829631672, 0.1681008734978241, 0.19202779357223398, 0.16046940712932878, 0.18497007056779813, 0.16655993293519933, 0.1679281028615136, 0.1731605608083393, 0.18476543515371402, 0.1797735568761487, 0.16802554689011018, 0.1753902937172881, 0.1721357731029377, 0.21897391429081214, 0.16717490823740422, 0.16989381878625465, 0.16890310034836697, 0.166228063784842, 0.17823543055505575, 0.17222002629148336, 0.16939058628611148, 0.17371050832275303, 0.17047794404230698, 0.1631322546449594, 0.17632821767007645, 0.3334131363524878, 0.2418330531175712, 0.2319985694712262, 0.20898651896193055, 0.20159035830589334, 0.1591872073947963, 0.2021015561085746, 0.1505278524902629, 0.18996221501128707, 0.195583782373985, 0.15742056229796475, 0.1778901528250928, 0.16923809127250822, 0.1850112500179384, 0.2046341977721492, 0.35099946279552474, 0.19400764869353626, 0.1808662158307961, 0.18887254402032783, 0.18716742660790453, 0.18064198125645414, 0.1878384978444464, 0.18263690825165213, 0.17856454487369722, 0.17864902732234966, 0.2119920856524432, 0.054998864564007266, 0.059279835925865165, 0.0632712793837703, 0.0625582102850123, 0.05985883545750459, 0.05844055654904079, 0.0696579980167098, 0.07511735408490272, 0.060592101246693675]}, "mutation_prompt": null}
{"id": "f8692554-ffec-43ba-82a0-3062449697bb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, diversity_ratio=0.5):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.diversity_ratio = diversity_ratio\n\n    def __call__(self, func):\n        def adjust_population(population, fitness, diversity_ratio):\n            sorted_indices = np.argsort(fitness)\n            sorted_population = population[sorted_indices]\n            n_top = max(int(diversity_ratio * len(population)), 1)\n            top_population = sorted_population[:n_top]\n            return np.concatenate([top_population] * (len(population) // n_top) + [top_population[:len(population) % n_top]])\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            population = adjust_population(population, fitness, self.diversity_ratio)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Utilizing a dynamic population size strategy based on fitness diversity to enhance exploration and exploitation balance.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "f0f1754b-0166-43ba-8215-4696f6c74562", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            cauchy_noise = np.random.standard_cauchy(self.dim)\n            return np.clip(a + F * cauchy_noise, -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Introducing a mutation strategy based on Cauchy distribution to enhance exploration capabilities.", "configspace": "", "generation": 89, "fitness": 0.1672170913986935, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.2863990491453001, 0.3131746033694014, 0.2943338360425837, 0.29912465238695574, 0.31931911886421804, 0.3004702708366216, 0.27823740822216814, 0.3200440240632486, 0.26814581006719684, 9.999999999998899e-05, 0.0024730700454660415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07807401123015356, 0.08961071799222298, 0.09263685483097484, 0.09193900119381848, 0.10453636636461217, 0.0861996814784427, 0.07303832612493422, 0.099377554940982, 0.1005465159085297, 0.08128102505816082, 0.07462032443599453, 0.07509733249546302, 0.08242907557168933, 0.07255905541648977, 0.06865851286162028, 0.07965099818704147, 0.06775090323347288, 0.07342096105232543, 0.9715396327724072, 0.9769621249960245, 0.9833819972075547, 0.9793851998248226, 0.9904185030334277, 0.9838736547323129, 0.9646121752762323, 0.9948546060971036, 0.9775424905541413, 0.1460203734917137, 0.15154710645849157, 0.17034940821252476, 0.14708218707581855, 0.15592734679561382, 0.1450204652242153, 0.17770953323457783, 0.14436468448079176, 0.176586202990213, 0.21569847005549336, 0.20322237459482917, 0.19689916114913086, 0.19163099678261575, 0.20206048704860102, 0.19169251742605398, 0.17404655226389787, 0.16510506059624552, 0.20233008203273106, 0.08873351195619705, 0.09467033065147701, 0.10243412651187755, 0.07548113868132655, 0.09613199574546238, 0.101305887849921, 0.09070542530416204, 0.07257863344707582, 0.0967193385194729, 0.0955226032279114, 0.05266158009489097, 0.08738330067510014, 0.10078374124218736, 0.08107105110527824, 0.08123531897635772, 0.09413791605329547, 0.09156822053863267, 0.10410339563420934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10122442376343044, 0.036384458794333496, 0.04548760749050784, 0.00903556477607903, 0.021337310143001553, 0.03695243587260133, 0.05634409757073533, 0.029411541864060586, 0.0556018565398857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022274305472403833, 0.023963560383295723, 0.026042591351091327, 0.0352153851135657, 0.03384435223736637, 0.03901096431218465, 0.038313533569214075, 0.0330626873272879, 0.035186321760990125, 0.28885584688268096, 0.2757582787060081, 0.30701253124375016, 0.26828256199267175, 0.2820942824080508, 0.3042370582146593, 0.277877689260168, 0.2819229069000091, 0.28695096707870704, 0.10479962048432934, 0.08805263565599597, 0.07998696032658104, 0.08756435145213926, 0.07803580527096676, 0.07722160703866376, 0.07949321263482723, 0.0876249012405822, 0.07525868207905495, 0.13638562610772065, 0.13950124428959843, 0.17391952895165919, 0.15861989712373215, 0.15354537178049799, 0.1681755660807388, 0.17381537338259934, 0.14422581798191825, 0.15366714271930837, 0.2103820314307312, 0.22614357575634958, 0.22228158494547012, 0.21139442405334496, 0.21091695837154, 0.21050270873975485, 0.23402384441860535, 0.2291189326584394, 0.22161203134182428, 0.16846075857103882, 0.16541988400715002, 0.17605250317800014, 0.16110552227126484, 0.14171432854881127, 0.15533471245209496, 0.1600338525843361, 0.1687117976282032, 0.1559596533864276, 0.17663714421007748, 0.17591648330078913, 0.22981813520120575, 0.17390024870436338, 0.18086912312296466, 0.18070209860075415, 0.1928893222650604, 0.16663050584453543, 0.17440638050665425, 0.16890159025641172, 0.17383908447914476, 0.18887790350790545, 0.1677675852114353, 0.19378618292690797, 0.17312281040253308, 0.16928572421007015, 0.16986684539776875, 0.1850620213811469, 0.3223863406454892, 0.1967908823173612, 0.3189168557025416, 0.22805058232951692, 0.17316260793704563, 0.38503400318352365, 0.26254061808470097, 0.1676197037536935, 0.16466048665493638, 0.16656984741033687, 0.1797746677774228, 0.16455955726936533, 0.16866035322993178, 0.19674883943411292, 0.16193390667020213, 0.19983460030103883, 0.20356391713234678, 0.28239679630198466, 0.18848745181599502, 0.17298974946336854, 0.18042488308375249, 0.18077630875637019, 0.1752518379999507, 0.1847258201840264, 0.20017109310374215, 0.20088296094965363, 0.17533855545772314, 0.07127852915417299, 0.06666787876420044, 0.07170203904999506, 0.08954493780667994, 0.07243014889436794, 0.07323298122008037, 0.08227110576023222, 0.07203206440192667, 0.07161209857072537]}, "mutation_prompt": null}
{"id": "814016ad-68ba-4e86-8443-da8b306b8d75", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "07ff6cbe-4afc-4e1b-aeaf-8c03c53a1784", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            cauchy = np.random.standard_cauchy(self.dim)\n            return np.clip(a + F * cauchy * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with a sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhancing population diversity by introducing a novel mutation strategy based on Cauchy distribution.", "configspace": "", "generation": 91, "fitness": 0.2559186161213496, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.750308727538195, 0.7600286743777379, 0.7236405015979263, 0.7622855537980222, 0.7364145860355904, 0.7765098002448885, 0.17425302389480435, 0.7502996281208093, 0.7640793868786334, 0.5740854508054373, 0.6226124112422169, 0.5626371220903237, 0.5577517681550741, 0.6084416795485765, 0.590065891537096, 0.5976697486480886, 0.6260297024022756, 0.5760385044582905, 0.20101005172926345, 0.11930570648486827, 0.14389839264207915, 0.16502628302005473, 0.10610595662350464, 0.15279228551337687, 0.13410847907098034, 0.12598118874656195, 0.18810935402952844, 0.14870574169776773, 0.12356607142093268, 0.10911185494504594, 0.09696473212316781, 0.1295732828759697, 0.12796279590513226, 0.11562916325293149, 0.1127683274977559, 0.13043011166933915, 0.9856035678776495, 0.986655576510015, 0.9763697487428589, 0.9807918560207802, 0.9956300637835122, 0.9834241770630723, 0.9817733328650626, 0.9841502588459141, 0.9860097427259549, 0.40178890115854704, 0.40320230690464876, 0.3762601285321091, 0.3573206935788562, 0.3835319803588224, 0.32921173109200563, 0.39769490901268645, 0.3657957011445394, 0.39846856935633834, 0.308937206367089, 0.3253639496045929, 0.2086777723821336, 0.19454358550951323, 0.5204945391152411, 0.22901525088154862, 0.4246670249681441, 0.34718479517694445, 0.5127990024062561, 0.17003291293892742, 0.15044166633552325, 0.14807745135666706, 0.16361647738851715, 0.15484087675628433, 0.1601372592163387, 0.16001990250288856, 0.17511947376413495, 0.17131713357201583, 0.18080498316932303, 0.05126897935060748, 0.1073924160919918, 0.24332591611718157, 0.12852488987127197, 0.152746170524923, 0.14792723361184468, 0.03194336562268818, 0.09529067824660797, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007459236658611257, 9.999999999998899e-05, 0.037133356421093056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004857908169363712, 0.028354404334037797, 0.030278601303023955, 0.06658615415934988, 0.09113993065932713, 0.049275350319861855, 0.04125818121556457, 0.04634282827668812, 0.04220949787731465, 0.04170008241275214, 0.030227813591316766, 0.037718766143298166, 0.025449116576222175, 0.05315482443635666, 0.06251075435362707, 0.059874989388656985, 0.048069902487968275, 0.06645809207699493, 0.09970242377825345, 0.08235400176297025, 0.049581603396980256, 0.09096422348157762, 0.0979336465160271, 0.14429490433271952, 0.06449553531303609, 0.07749066911584146, 0.12006560940829736, 0.11743755016191448, 0.4309043909052369, 0.42418166411261626, 0.4605610897607717, 0.467624451214245, 0.4614088104914382, 0.49064687902145543, 0.4341221073206126, 0.4512746152220908, 0.457505107078393, 0.09829653020684914, 0.1495475018993142, 0.08197204688689563, 0.07532013787512737, 0.10861265923266006, 0.07745705209021903, 0.08585500878701735, 0.07021213226844158, 0.09705658421507635, 0.16722858970250598, 0.14356212410862157, 0.2034429998402889, 0.19533204997011988, 0.16340554284122155, 0.17571855510630374, 0.1831946202509348, 0.222703977351988, 0.14394380154864594, 0.2922624307664392, 0.28966682823129986, 0.3286212563123364, 0.21608226165101418, 0.20486294919239767, 0.26773812638203875, 0.32359171007445686, 0.3814802326073067, 0.35614001198050294, 0.1910269742829489, 0.18714560108051292, 0.21308445992947933, 0.1946625870541816, 0.17086286034363762, 0.18189407816645753, 0.18145590134019862, 0.25543289997965324, 0.22208334626922677, 0.17092234640593573, 0.1801886466918008, 0.1881032726500329, 0.1632813024574412, 0.1676759975813158, 0.16335892162277976, 0.17050058177896732, 0.18065411264191555, 0.18932231205599415, 0.17230373703148472, 0.20596012635595995, 0.19713616551565327, 0.3160279492358371, 0.28873077495960653, 0.2203646618200481, 0.26057743201864714, 0.1994403727805718, 0.33312921665066486, 0.15175963329790143, 0.23964083986577822, 0.1626558773434621, 0.184272671790493, 0.7467288299147135, 0.18580589713272377, 0.17402538014731217, 0.6629094816498067, 0.18329137872105117, 0.16497424005066164, 0.16665830786461944, 0.149952421604574, 0.18786002747316988, 0.10940540862395087, 0.15514640679932457, 0.3792410374738229, 0.29256653605844907, 0.2659560465328955, 0.17455427484821817, 0.19618723259734538, 0.204557157268485, 0.1575066592044655, 0.19864484562223295, 0.19478940858420812, 0.17973305269936923, 0.17952838586692887, 0.17388978802476818, 0.0755963536722093, 0.06409716893136996, 0.06036416483720353, 0.0764799522095242, 0.06488021482500139, 0.07047909939460983, 0.07171313525048517, 0.07408841716731973, 0.060955129474101755]}, "mutation_prompt": null}
{"id": "d00f47f7-a10a-4bd6-accf-5c89c32e78b8", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, cauchy_scale=0.1):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.cauchy_scale = cauchy_scale\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            cauchy_dist = np.random.standard_cauchy(self.dim) * self.cauchy_scale\n            return np.clip(x + F * (b - c) + cauchy_dist, -5, 5)\n        \n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedAdaptiveDE", "description": "Improved AdaptiveDE algorithm with enhanced mutation strategy using a Cauchy distribution for better exploration.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "c540a420-52dc-4623-927f-957943ef2696", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "0c694f42-a5b6-467c-9623-67c34b3068ba", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDE", "description": "Enhanced Differential Evolution algorithm with adaptive control of mutation and crossover parameters to improve convergence speed and solution quality.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8505893355994196, 0.8360574859459001, 0.8433438468404297, 0.8572109851597536, 0.8693029103848771, 0.861789617968367, 0.8737354710789184, 0.8705046401743051, 0.8460835391825589, 0.7717873433299693, 0.7511727350617867, 0.7465673876804737, 0.75101336871506, 0.7736445781009136, 0.7649123666693252, 0.769323306785251, 0.7518806775990966, 0.7482140684917435, 0.23797479368888919, 0.11351224612713229, 0.13797483043665237, 0.15270977297969257, 0.20787740878531613, 0.3917465549177045, 0.27321186420889176, 0.14947766147556418, 0.10502918022391572, 0.34645534344588913, 0.12069891408916578, 0.11575662310038004, 0.12706861993565566, 0.11808314750701998, 0.13713699393391765, 0.13074624370381593, 0.1318649369047611, 0.13551526444256046, 0.9521937703776602, 0.967169944656755, 0.9827650451536891, 0.9580681867900604, 0.9607551915252177, 0.9891734081536627, 0.9813405079246537, 0.9718007604610215, 0.9811651298401912, 0.629144317679152, 0.6002080011161035, 0.657325832943511, 0.6403521656160605, 0.6544058264414969, 0.6395890568509688, 0.607435506970804, 0.6608365375678885, 0.6486564102364472, 0.8062109767022905, 0.8313079319830392, 0.7870191866075175, 0.8333300598537062, 0.8266114052397846, 0.7854933012081289, 0.8050155397282867, 0.8039188064473622, 0.8344602027274455, 0.617766500022873, 0.13186115501197437, 0.5289833643708053, 0.5500955770056779, 0.5841694136938353, 0.5491400177078896, 0.5355687852945802, 0.6213932239973075, 0.5730402084472785, 0.6876106318283466, 0.5094132206758073, 0.6720659164344363, 0.5993238821399574, 0.6450944039099142, 0.6305900123407444, 0.6058075955480071, 0.578597699964589, 0.506483461956764, 0.5996757648521623, 0.5286834308928052, 0.5465234522825768, 0.5094612171225823, 0.5848496266045571, 0.5700872784951964, 0.567528768251888, 0.5721933643641617, 0.5890709953242093, 0.6887083558189739, 0.6558256781417169, 0.6477575152761073, 0.6921571753423236, 0.6471827177694187, 0.6954337545403277, 0.6685688437280415, 0.7104493433387342, 0.6581478947976211, 0.3137294505914964, 0.12902540763441062, 0.2691742417761802, 0.4220025926968406, 0.42267431858390114, 0.18799645327397263, 0.15178255087164394, 0.18147546366531164, 0.1540685365814023, 0.47422727685881216, 0.50293626145353, 0.4323843690074629, 0.4419757648457996, 0.49906570945267814, 0.43810603032294326, 0.47285092409367135, 0.4316855267242957, 0.44566493643905536, 0.758372353106574, 0.7751111302751146, 0.7817406685096865, 0.7725770504008409, 0.7495169280584559, 0.7699102235229163, 0.7747375266172155, 0.7843177895515242, 0.7984483829468727, 0.09034615645028221, 0.10281781121613809, 0.10794028385163257, 0.11192690457780408, 0.10841073185857808, 0.09210774089828644, 0.09920746058007501, 0.10488083756527045, 0.09870876700012632, 0.16839138994801683, 0.1287277788584399, 0.19665493641565057, 0.2853801277040845, 0.14235579360953454, 0.19870572864164004, 0.16873390345234673, 0.3587578207622413, 0.16101770743006327, 0.45636638750940706, 0.48504533348468015, 0.46270312253401114, 0.42166453789755376, 0.3959303587548142, 0.45676731765955014, 0.49606629621050413, 0.47560576078364636, 0.4798007866213959, 0.3628766064738135, 0.36686125034358064, 0.33831322644302986, 0.37318667200671984, 0.32272187412724995, 0.35443015007621326, 0.40073487952651043, 0.38239744139590415, 0.3782384951898339, 0.1978332705911009, 0.2181605803438188, 0.2020316615936104, 0.2002400500506677, 0.17674088803681676, 0.2393005568904787, 0.20047365968522468, 0.17881543706136438, 0.23069884847003985, 0.21554482656691187, 0.19148351769532523, 0.22965109196194267, 0.41462297049879493, 0.2141995528676346, 0.3125475947933234, 0.5673825894986875, 0.20562907451304546, 0.20252652904365764, 0.8795002404031694, 0.8234977384993036, 0.851198154296257, 0.8524184306783635, 0.808111260674176, 0.19328628574204065, 0.18710351830753902, 0.19697526607901628, 0.1761016579120004, 0.7894975400049881, 0.2023162010987668, 0.20692387768643294, 0.2049557593297876, 0.7076421683077785, 0.7511868206034724, 0.2083789037504955, 0.12675352330925493, 0.1551665813326215, 0.1717313092635976, 0.182812206260221, 0.1820507608572649, 0.2813506082396544, 0.17773126123400584, 0.20899623031204806, 0.19363358048487656, 0.185279991688435, 0.1767357376812806, 0.0905504970355705, 0.0698917582501083, 0.09166335412946247, 0.08358441099419778, 0.06996762268832535, 0.08277461285231691, 0.08479458475551638, 0.09177450234574558, 0.07608899902043453]}, "mutation_prompt": null}
{"id": "3938f818-1329-419a-beb5-d0492d653af7", "solution": "import numpy as np\n\nclass DynamicPopSizeAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        super().__init__(budget, dim, F, CR, pop_size)\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n\n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n\n            # Dynamic population size adaptation\n            if _ % 100 == 0 and self.pop_size < 50:\n                self.pop_size += 5\n                population = np.vstack([population, np.random.uniform(-5, 5, (5, self.dim))])\n                fitness = np.append(fitness, [func(individual) for individual in population[-5:]])\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "DynamicPopSizeAdaptiveDE", "description": "Implementing a dynamic population size adaptation mechanism to enhance diversity and exploration during the optimization process.", "configspace": "", "generation": 95, "fitness": 0.3817769951855437, "feedback": "The algorithm DynamicPopSizeAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.767372074981548, 0.7885995414315106, 0.8109376341012062, 0.8201532126443443, 0.8008939579132641, 0.852755492225018, 0.8306185168406687, 0.8202210983646632, 0.8207739128313649, 0.7060565810548333, 0.6514826819236883, 0.644745859197892, 0.66796016412964, 0.6503775256951522, 0.6309555390311841, 0.6850213767727428, 0.6654798057811805, 0.6502145719363273, 0.10192390687934372, 0.11703510644121595, 0.10445022625306899, 0.10892666216991542, 0.11230853597590174, 0.10803171060278094, 0.10854750256313095, 0.14701685960334343, 0.10134021942569216, 0.10451607607151359, 0.10223125353765228, 0.10744619833274394, 0.10446735462395518, 0.08982881429815681, 0.11136680459311321, 0.10357771929271531, 0.12459500685866587, 0.11098607552317408, 0.9724146749320424, 0.9533987198181404, 0.9407856606568025, 0.9352964584707015, 0.9631878790995212, 0.9643024166777361, 0.953704841182558, 0.966407361068127, 0.9686184042925288, 0.5013441879532419, 0.4734801199935077, 0.4351586810568453, 0.47234317086767663, 0.47750947247875286, 0.4526378166592042, 0.5038337766025212, 0.497824237014041, 0.47368622201166466, 0.7846060199740477, 0.7532428943347166, 0.7462625183570644, 0.774337943243261, 0.7759570532837909, 0.7675018572859047, 0.811448581775813, 0.6928434488572511, 0.7489790302392003, 0.46968514257380645, 0.4623191787840928, 0.5079686992250014, 0.4790366908271322, 0.4790414473393997, 0.33651259344233364, 0.4513733328758913, 0.38133230026019405, 0.3896529852976467, 0.4783823887574147, 0.4610645545097932, 0.2537385661298417, 0.45553768093411706, 0.4165380039387899, 0.43191823648449124, 0.3722183336345031, 0.36996911666470755, 0.40102709035227213, 0.36240858379841123, 0.36874632776911054, 0.3481590731009486, 0.3079912257147096, 0.3245649327215454, 0.2869383614901765, 0.33246492414804263, 0.3649749974393177, 0.24147579494531557, 0.46790349780760465, 0.4658267765700007, 0.5482166353353826, 0.4831753504221111, 0.49124237472672205, 0.45951158818751214, 0.5492838779078653, 0.5741104000297059, 0.5503917066565216, 0.09355419978040969, 0.1465982437460963, 0.16242459855830005, 0.16737640859536773, 0.23665772453395995, 0.2099029717881633, 0.1669257417727471, 0.16890857069403753, 0.18824470481388822, 0.28333891495472285, 0.2767209751320502, 0.29372194763505044, 0.28694733845902365, 0.29400864435884966, 0.3176760002161353, 0.31927724266221424, 0.2993927056589081, 0.281359069698935, 0.6722696110760941, 0.6642688059393693, 0.6659192118062556, 0.7051870714109457, 0.7002053675556685, 0.6875683414737166, 0.6700416899786628, 0.6703736382677674, 0.6746996245124895, 0.11818433067515599, 0.10747629261438485, 0.08364220501716468, 0.07918549829504806, 0.09452301584797118, 0.10064680105089996, 0.07636835671416575, 0.11728639422195652, 0.11073746836428322, 0.18746477286416485, 0.22469810588343775, 0.1845631979536312, 0.17882470919684834, 0.15768762753850862, 0.14888550627486474, 0.19413285118345525, 0.20545729372856159, 0.17687596323144117, 0.31607977192341874, 0.3530595305892573, 0.34151382348961234, 0.36816950236008716, 0.3275889586232208, 0.3805636981607379, 0.37114765165790764, 0.38181498276175085, 0.34928464885665633, 0.29454238738648364, 0.26721044397344296, 0.2755032800097673, 0.2913283511773779, 0.26594784852630304, 0.26561027752480193, 0.2441207005773518, 0.31791957728027287, 0.3068574168013486, 0.17606731798101372, 0.17863908310033005, 0.19433015464830705, 0.1963918743917522, 0.16409214633811353, 0.17708013010665324, 0.20159481106118116, 0.2063976291794959, 0.1847091514474961, 0.26628299463415506, 0.25332796031730165, 0.2106968732755652, 0.20042426664030077, 0.26713105517570446, 0.19069126357958366, 0.19649898353906636, 0.22815262291105498, 0.1977926506134271, 0.7827842736374903, 0.86591505352507, 0.182517146612875, 0.1751561671131927, 0.173492060983215, 0.7318615306761802, 0.710760550970545, 0.17725925416510468, 0.6138168276518484, 0.6248341150738304, 0.15851149472354864, 0.20425944486720493, 0.20253077168058398, 0.16130009089085617, 0.16449280038616165, 0.800243421316175, 0.20913538281179822, 0.7919920873161204, 0.1950549491449841, 0.19145304151722253, 0.18547318203014207, 0.19676027084251402, 0.1753340448219589, 0.18520569108329432, 0.19011166936174595, 0.18785942212903206, 0.18129809000678443, 0.07399028078998804, 0.07775688766550504, 0.06968892800428494, 0.07607118196950868, 0.07376917650651527, 0.07188729021311069, 0.06888568070837386, 0.07149624623603212, 0.08306707739716879]}, "mutation_prompt": null}
{"id": "ce21c2a7-2917-46d5-90fa-3a9f991a8954", "solution": "import numpy as np\n\nclass ImprovedDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            adapt_pop_size = int(self.pop_size * (1.0 - _ / self.budget))  # Self-adaptive population size\n            if adapt_pop_size > 3:  # Ensure a minimum population size\n                population = np.vstack((population, np.random.uniform(-5, 5, (adapt_pop_size - self.pop_size, self.dim))))\n                self.pop_size = adapt_pop_size\n            \n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDE", "description": "Improved Differential Evolution algorithm with adaptive control of mutation and crossover parameters combined with a novel self-adaptive strategy for population size adaptation.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "7f2fa05b-6455-4398-a37e-d6f38f3cb582", "solution": "import numpy as np\n\nclass ImprovedDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c, d, e = population[np.random.choice(len(population), 5, replace=False)]\n            return np.clip(a + F * (b - c + d - e), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDE", "description": "Improved Differential Evolution algorithm with population diversity enhancement through differential grouping to explore diverse regions of the search space efficiently.", "configspace": "", "generation": 97, "fitness": 0.2746803097113237, "feedback": "The algorithm ImprovedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.6133295144038515, 0.6167517436523032, 0.6655190840166311, 0.6911319727667083, 0.6880096825130178, 0.679342148708963, 0.6591629570623081, 0.6751950635615996, 0.6594671735083114, 0.47252422678394645, 0.46373447158677805, 0.49231688349439906, 0.4607083557513246, 0.47551723238650945, 0.48030109113356045, 0.4518545418501887, 0.5008825578142218, 0.5005132935108829, 0.08435336986577457, 0.07735537938350057, 0.09592760332635064, 0.10551706847075015, 0.08487323284351245, 0.10065235641041359, 0.11325214482585289, 0.08356104438617495, 0.10431766674002574, 0.07752142982987076, 0.07296674690295035, 0.07568135290553513, 0.07118517883783082, 0.08275075054987613, 0.07995398840723467, 0.08430489435994315, 0.07941704577812947, 0.07918966093444813, 0.9776779134205895, 0.9557526833311184, 0.9953057063951996, 0.9703264772361105, 0.968561876971253, 0.9839146858145655, 0.9420909783329228, 0.9864604710575129, 0.9851914146199112, 0.30704987912128756, 0.3511097619303809, 0.31769529644695227, 0.3172559202309325, 0.3363395601216713, 0.30736557038206824, 0.31824885078106957, 0.351069183959108, 0.33944492829179285, 0.4410993552625335, 0.5676249752543128, 0.4445538806438153, 0.5403264076331542, 0.5076582822319643, 0.6195322299410129, 0.6301143219482002, 0.38230534798710203, 0.5075290146503832, 0.21906356680847594, 0.17918264632250414, 0.2323895970040839, 0.2684869779904855, 0.21779555544052087, 0.16420503801716912, 0.23016174450582416, 0.19114739938509773, 0.1879307115870129, 0.3003670089204127, 0.3068133796524589, 0.2972371262757808, 0.1654085171305807, 0.1696044625399904, 0.24482934539206191, 0.16921192694531184, 0.2183980125460846, 0.19868252468416814, 0.10717607322126532, 0.12759274655464137, 0.10378919591482716, 0.23491102659296914, 0.1557524661493186, 0.17433366275725526, 0.13436260277210277, 0.16918920132473247, 0.13441175126155014, 0.20426138153668982, 0.27579135509309627, 0.21865547713400635, 0.30228153404205227, 0.3217589374202612, 0.23004151755577895, 0.29644491668737327, 0.2674108417979303, 0.2908078603045202, 0.024851924830193273, 0.04782814375422606, 0.005908574879257111, 0.034489764039770665, 0.03500294311732011, 0.03696736938818446, 0.06856039380345158, 0.015262104277894872, 0.01585650500249325, 0.18278505589886307, 0.20595195763716367, 0.1747679176297222, 0.18655970511129094, 0.17808782274388868, 0.18667325538245938, 0.1690425128253077, 0.18230803546305763, 0.19219931918608513, 0.5411517299950901, 0.535933312054893, 0.5525752082314914, 0.5046449033323541, 0.48647417426285244, 0.5132425059331138, 0.5281719753425289, 0.4930290138257878, 0.5164788470791939, 0.08112329702566878, 0.08393066336598554, 0.08585277004425884, 0.07670100210052455, 0.07472382259523924, 0.07827724193997565, 0.07779624836251864, 0.07811041845994882, 0.06798513479131596, 0.13617697809863416, 0.14311781018077996, 0.1461318312793768, 0.14950076915416866, 0.13937299164535089, 0.13114016755797997, 0.14278020804838287, 0.12249983743804826, 0.1398830293819785, 0.25784896780461186, 0.251745864012206, 0.24212861464365087, 0.24809996249986588, 0.25171447229266986, 0.22878305148429745, 0.2694296633469091, 0.2726303869908083, 0.27629931856005263, 0.1749006720844829, 0.16977730207352182, 0.1660125365446885, 0.19880950319348312, 0.19896420142732163, 0.18724010603525432, 0.19162712443016316, 0.21545943263813327, 0.19024216231907132, 0.19075553078309426, 0.17045008129392425, 0.17563679264449916, 0.16841856733116078, 0.17723025801280146, 0.17798328664656637, 0.18205197920197858, 0.18395560652190002, 0.1622538297206947, 0.16769082193670926, 0.1764440402325943, 0.16703862624094012, 0.16465623533300877, 0.16633682764002444, 0.16993912766660124, 0.18271145541925893, 0.1747186881948508, 0.16878624610039328, 0.1644620445476812, 0.4747952832038036, 0.27975484970994735, 0.17828856547093874, 0.539122574686349, 0.1756913695130946, 0.14429885184475844, 0.16958176866746033, 0.600334149401013, 0.20145520479349377, 0.4838151557148611, 0.1620217811945256, 0.4953293870162625, 0.16561957142826178, 0.17976269365185904, 0.6997115475354252, 0.20130639179950105, 0.2065530185301564, 0.1825338404493133, 0.1918463591798415, 0.1940463908276765, 0.19309355004144457, 0.16445311283103348, 0.17983736638915293, 0.19274456225969339, 0.18113441277489717, 0.20429810882165134, 0.05850550347162009, 0.06631733264360828, 0.06453755288444896, 0.06351473936198127, 0.06820012221191885, 0.05558906825326049, 0.06533104024747571, 0.07137642090283858, 0.0624666930554002]}, "mutation_prompt": null}
{"id": "de5321fc-263c-48a1-99e3-4882644c0749", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20, randomization_prob=0.1):\n        super().__init__(budget, dim, F, CR, pop_size)\n        self.randomization_prob = randomization_prob\n\n    def __call__(self, func):\n        def randomize(population):\n            return np.where(np.random.rand(self.pop_size, self.dim) < self.randomization_prob,\n                            np.random.uniform(-5, 5, (self.pop_size, self.dim)),\n                            population)\n        \n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                trial = randomize(trial)  # Introduce randomization step\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhancing population diversity by incorporating a randomization step to introduce novel solutions during the evolution process.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {}, "mutation_prompt": null}
{"id": "3d4c51be-9d00-4ba7-b67f-cf9d2fb3e0c0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE:\n    def __init__(self, budget, dim, F=0.8, CR=0.9, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def mutate(x, population, F):\n            a, b, c = population[np.random.choice(len(population), 3, replace=False)]\n            scaling_factors = np.random.uniform(0.5, 1.5, self.dim)  # Self-adaptive scaling factors\n            return np.clip(a + scaling_factors * F * (b - c), -5, 5)\n\n        def crossover(target, trial, CR):\n            mask = np.random.rand(self.dim) < CR\n            return np.where(mask, trial, target)\n\n        population = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        \n        for _ in range(self.budget):\n            adapt_F = self.F * (1.0 - _ / self.budget)  # Adapt F over time\n            adapt_CR = self.CR + 0.1 * np.sin(0.9 * np.pi * _ / self.budget)  # Adapt CR with sinusoidal function\n            new_population = []\n            for i, target in enumerate(population):\n                mutant = mutate(target, population, adapt_F)\n                trial = crossover(target, mutant, adapt_CR)\n                new_fitness = func(trial)\n                if new_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = new_fitness\n                new_population.append(population[i])\n            population = np.array(new_population)\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedAdaptiveDE", "description": "Enhancing the mutation strategy by incorporating a self-adaptive scaling factor for each dimension to improve exploration and exploitation balance.", "configspace": "", "generation": 99, "fitness": 0.3571379446881205, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.28.", "error": "", "parent_id": "ec2e6529-d415-49c9-89bf-b9c05abb6481", "metadata": {"aucs": [0.8601879744520882, 0.836580783063851, 0.8731941924747368, 0.869656731905017, 0.8579698795968818, 0.8652679018450695, 0.8567013954798032, 0.8637408793613398, 0.8639784339743937, 0.7471853754110112, 0.791997954020138, 0.763381592656645, 0.7552369406550714, 0.7421323798443278, 0.7675172000071483, 0.7752178226748095, 0.7511983067788814, 0.7604202962052766, 0.3272157091722061, 0.16480742725105268, 0.16495429423169994, 0.13477620782669109, 0.1869316689725048, 0.19829382987977318, 0.11454163241281423, 0.1612033964482611, 0.11540644114748555, 0.10051277481063936, 0.12972935275017228, 0.1349504167171668, 0.11938958966032664, 0.14724452687977285, 0.1413507090125542, 0.13284361476332374, 0.11940412788279409, 0.15561769430140793, 0.9202571572936368, 0.9818168786169147, 0.965838270298189, 0.9526609703592135, 0.9492800348559103, 0.9734402714790387, 0.9582006309567239, 0.9520146620339031, 0.9623427171655548, 0.6318251780915336, 0.6359152698531514, 0.5955490920609484, 0.6152462119048858, 0.6693433323577207, 0.648945936408398, 0.6650620910057141, 0.6192319448165762, 0.6117873687403738, 0.6950068126088536, 0.727362784387409, 0.7767282781728722, 0.7967310407175306, 0.7452504390392451, 0.7983570847443433, 0.7885538317966222, 0.8250301270823895, 0.7154868723374501, 0.40160481583647256, 0.3768010342803828, 0.38338392167561397, 0.42176243787277135, 0.4112495614081344, 0.48593080149752677, 0.27210213557195406, 0.4230075982598519, 0.3291693714515105, 0.3571818476401142, 0.12483689808168474, 0.021999911436338837, 0.41379888267010556, 0.45236374011660896, 0.42755237491431897, 0.4012398957790225, 0.3882792046850656, 0.37121328989191416, 0.07127516795391753, 0.005099366310938436, 0.04533780045977687, 0.05292805818048618, 0.0023785154961620814, 0.014902112776461918, 0.012466273437182318, 0.05424039684019133, 0.1124595917776704, 0.10918484041681331, 0.05876499977503424, 0.05538815608440473, 0.06208808740034988, 0.06323335594829405, 0.0844930660328631, 0.089160358720477, 0.08371369340192092, 0.08541655262875647, 0.0335713268710095, 0.04762952839868029, 0.09098379053223637, 0.13070323963512942, 0.1329384047831461, 0.15589801951871507, 0.14039935232541068, 0.13003448431093634, 0.07662537740107278, 0.24121652104389157, 0.24997393348243002, 0.21428944939778627, 0.185064691383093, 0.24346059647960838, 0.19102832779255607, 0.18446670115778763, 0.16720681811605742, 0.18530484546022397, 0.5784920350227352, 0.560556189312048, 0.5614889839482111, 0.5636295814686878, 0.5867530334045375, 0.5699113319082831, 0.5739396838249444, 0.5651199853329512, 0.5804235813332208, 0.10579679855596169, 0.10250442123998782, 0.09559960224135244, 0.10161358324081371, 0.09219797139020824, 0.08452662521209908, 0.10387465459043665, 0.09325503066096297, 0.10818800027271447, 0.17117477275862525, 0.18843535533857236, 0.1605112297008443, 0.29540762375794416, 0.27766470643340835, 0.18577407491253262, 0.2454345724937389, 0.2620861586763905, 0.1343308585953732, 0.42587251142367044, 0.4685862774027608, 0.4455917662871173, 0.4078510694030234, 0.4246110977338391, 0.4054309749863002, 0.49285072177472455, 0.46941108025615463, 0.43716082273971824, 0.31918354028088325, 0.33166278715757513, 0.3163703466562854, 0.3339378744474155, 0.28120617948907345, 0.32519833827851596, 0.3436086099021519, 0.3722012005508164, 0.36073352509286805, 0.182468169560267, 0.20430393023436733, 0.21035622253145247, 0.176677832735045, 0.1790097745885194, 0.18358211472803865, 0.17363172497843682, 0.1989787612238978, 0.17746783139024136, 0.4712990588117304, 0.2134179176171327, 0.20463328245285606, 0.29415785666947003, 0.19036172089604808, 0.43227144733895106, 0.29860444963134947, 0.33772851793357783, 0.5399983280602944, 0.1640798626965958, 0.25901990279468734, 0.8337092130759436, 0.8023972304598381, 0.18383017997461626, 0.8052939105743535, 0.15065425580060487, 0.19348445086552135, 0.7162848751927149, 0.16760604330097484, 0.20906651411695698, 0.205022186998436, 0.1923814547519841, 0.7210309755077944, 0.1962066969768812, 0.18898830079113282, 0.2019702977785912, 0.1971669975692295, 0.173393470558298, 0.18550714808897784, 0.1986732989545058, 0.19282227631095317, 0.16775108262279415, 0.19306983635914532, 0.1863096179473689, 0.17675299135215228, 0.16462357801822325, 0.08596862680111117, 0.07646287283868547, 0.0803212482411011, 0.07395218910076728, 0.0699417231770123, 0.07014957932002852, 0.07948800659175137, 0.06865772564335071, 0.07584105209567149]}, "mutation_prompt": null}
