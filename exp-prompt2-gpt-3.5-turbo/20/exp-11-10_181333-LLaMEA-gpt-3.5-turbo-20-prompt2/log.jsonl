{"id": "c850b201-7d65-4805-b06f-eabeeddb83c6", "solution": "import numpy as np\n\nclass DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5.0, 5.0)\n\n        def simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = mutation(x, population, F)\n                trial_x = simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "DE_SA_Optimizer", "description": "An innovative hybrid metaheuristic algorithm combining differential evolution with simulated annealing for global optimization on black box functions.", "configspace": "", "generation": 0, "fitness": 0.08374431831475866, "feedback": "The algorithm DE_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.11.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1344916310214227, 0.13783408983156753, 0.13687930983433338, 0.13368790790785334, 0.13947428399727468, 0.14438158087431108, 0.1379028014581105, 0.17376049954813821, 0.1441598683368719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024087940339012626, 0.03256931947890551, 0.03139391807893499, 0.025853579360973544, 0.031243274538508725, 0.03202943589007323, 0.02153297312614888, 0.02862270689912616, 0.02878850090315277, 0.020188779361047793, 0.019713502651577453, 0.010295065675242632, 0.01959972157639278, 0.00379238271046467, 0.015440218054690757, 0.01978495494679533, 0.0048359930932588835, 0.0069742088057599405, 0.7541550209826431, 0.8801672906714442, 0.5847736567372626, 0.23088383350639596, 0.1753684718400984, 0.1056247123977071, 0.12363400371397126, 0.12249799462011124, 0.6227080382317883, 0.06274794416174423, 0.046400498220063646, 0.035238800100417356, 0.032582382528131504, 0.048013759989968596, 0.0374718132325117, 0.04320230546600501, 0.07630818758799629, 0.07975942062323249, 0.10237842929314467, 0.12870123024251645, 0.09894507735730951, 0.08051745124560405, 0.09806094871255466, 0.0880093738626847, 0.08822767123382347, 0.06516109924448632, 0.09506600976310509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057488050330353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00997033607363651, 0.0353239928771909, 0.0061056904975341775, 0.02149054451667376, 0.03710315707104017, 0.0671496831224565, 0.009960118721475397, 0.034605262715839524, 0.017603334411377514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14585843789308217, 0.15756555760738078, 0.1555531669144371, 0.16237570808183233, 0.16714753779754954, 0.1401601277704747, 0.18237003867594825, 0.15580521743072528, 0.1932716509496304, 0.03295558679126165, 0.03270889333036009, 0.029667418282955826, 0.0372617475384146, 0.02937692753053145, 0.029452678196172366, 0.027901847024708104, 0.026654085713234466, 0.0267656688986897, 0.11823148717201915, 0.12617165138425024, 0.13059866348769467, 0.14064799252634097, 0.13853011735360543, 0.1388371447126172, 0.12625508473778924, 0.11659542065621431, 0.1394796786814242, 0.16323419153723684, 0.14090167971346823, 0.16447584012945882, 0.1459873336273516, 0.13309834621217054, 0.1456237052190782, 0.14020537835210456, 0.17377774300845283, 0.1466787150090868, 0.08688230342114134, 0.07632182576794222, 0.0897727850611898, 0.0822022932407015, 0.08340921642310384, 0.07400335467197128, 0.08644643045958655, 0.0997711199450243, 0.07885096651048717, 0.13017369122506828, 0.12615516003122562, 0.14456558020674526, 0.1354309453927628, 0.1378475220965646, 0.12112770278863683, 0.12381173495885356, 0.12320346004855054, 0.1387069444546556, 9.999999999998899e-05, 0.1386775150985775, 0.062448634794456614, 0.10952920045810366, 0.07606297058162159, 0.13647168594860182, 0.10425760852625876, 0.1173349789921142, 0.03194899229633197, 0.11230720423388152, 0.12652336137548514, 0.16447226905795853, 0.11029857518433583, 0.14737603322296433, 0.10832781441811368, 0.24646803777451598, 0.11789073941235528, 0.12853916054475045, 0.11231887130846974, 0.13516916198909834, 0.10600315402433735, 0.14180040914024672, 0.11070804071439377, 0.10044268496441888, 0.12336183214950158, 0.11587926423849781, 0.10627951956279025, 0.198646023281836, 0.18315861471725858, 0.16830585954679667, 0.18104295313771435, 0.1734748080421863, 0.2142711002087121, 0.17311317809651905, 0.19322070380211165, 0.15801636408377107, 0.033998852325660134, 0.054134045907531125, 0.0319918074153287, 0.02970866588438492, 0.036144111667547385, 0.03929854939623734, 0.03356034219372228, 0.04013146462032802, 0.03609860307185442]}, "mutation_prompt": null}
{"id": "9d17ddce-5d8d-438a-97bb-5f7dca060c6d", "solution": "import numpy as np\n\nclass DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5.0, 5.0)\n\n        def simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = mutation(x, population, F)\n                trial_x = simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "DE_SA_Optimizer", "description": "An innovative hybrid metaheuristic algorithm combining differential evolution with simulated annealing for global optimization on black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c850b201-7d65-4805-b06f-eabeeddb83c6", "metadata": {"aucs": [0.1344916310214227, 0.13783408983156753, 0.13687930983433338, 0.13368790790785334, 0.13947428399727468, 0.14438158087431108, 0.1379028014581105, 0.17376049954813821, 0.1441598683368719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024087940339012626, 0.03256931947890551, 0.03139391807893499, 0.025853579360973544, 0.031243274538508725, 0.03202943589007323, 0.02153297312614888, 0.02862270689912616, 0.02878850090315277, 0.020188779361047793, 0.019713502651577453, 0.010295065675242632, 0.01959972157639278, 0.00379238271046467, 0.015440218054690757, 0.01978495494679533, 0.0048359930932588835, 0.0069742088057599405, 0.7541550209826431, 0.8801672906714442, 0.5847736567372626, 0.23088383350639596, 0.1753684718400984, 0.1056247123977071, 0.12363400371397126, 0.12249799462011124, 0.6227080382317883, 0.06274794416174423, 0.046400498220063646, 0.035238800100417356, 0.032582382528131504, 0.048013759989968596, 0.0374718132325117, 0.04320230546600501, 0.07630818758799629, 0.07975942062323249, 0.10237842929314467, 0.12870123024251645, 0.09894507735730951, 0.08051745124560405, 0.09806094871255466, 0.0880093738626847, 0.08822767123382347, 0.06516109924448632, 0.09506600976310509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057488050330353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00997033607363651, 0.0353239928771909, 0.0061056904975341775, 0.02149054451667376, 0.03710315707104017, 0.0671496831224565, 0.009960118721475397, 0.034605262715839524, 0.017603334411377514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14585843789308217, 0.15756555760738078, 0.1555531669144371, 0.16237570808183233, 0.16714753779754954, 0.1401601277704747, 0.18237003867594825, 0.15580521743072528, 0.1932716509496304, 0.03295558679126165, 0.03270889333036009, 0.029667418282955826, 0.0372617475384146, 0.02937692753053145, 0.029452678196172366, 0.027901847024708104, 0.026654085713234466, 0.0267656688986897, 0.11823148717201915, 0.12617165138425024, 0.13059866348769467, 0.14064799252634097, 0.13853011735360543, 0.1388371447126172, 0.12625508473778924, 0.11659542065621431, 0.1394796786814242, 0.16323419153723684, 0.14090167971346823, 0.16447584012945882, 0.1459873336273516, 0.13309834621217054, 0.1456237052190782, 0.14020537835210456, 0.17377774300845283, 0.1466787150090868, 0.08688230342114134, 0.07632182576794222, 0.0897727850611898, 0.0822022932407015, 0.08340921642310384, 0.07400335467197128, 0.08644643045958655, 0.0997711199450243, 0.07885096651048717, 0.13017369122506828, 0.12615516003122562, 0.14456558020674526, 0.1354309453927628, 0.1378475220965646, 0.12112770278863683, 0.12381173495885356, 0.12320346004855054, 0.1387069444546556, 9.999999999998899e-05, 0.1386775150985775, 0.062448634794456614, 0.10952920045810366, 0.07606297058162159, 0.13647168594860182, 0.10425760852625876, 0.1173349789921142, 0.03194899229633197, 0.11230720423388152, 0.12652336137548514, 0.16447226905795853, 0.11029857518433583, 0.14737603322296433, 0.10832781441811368, 0.24646803777451598, 0.11789073941235528, 0.12853916054475045, 0.11231887130846974, 0.13516916198909834, 0.10600315402433735, 0.14180040914024672, 0.11070804071439377, 0.10044268496441888, 0.12336183214950158, 0.11587926423849781, 0.10627951956279025, 0.198646023281836, 0.18315861471725858, 0.16830585954679667, 0.18104295313771435, 0.1734748080421863, 0.2142711002087121, 0.17311317809651905, 0.19322070380211165, 0.15801636408377107, 0.033998852325660134, 0.054134045907531125, 0.0319918074153287, 0.02970866588438492, 0.036144111667547385, 0.03929854939623734, 0.03356034219372228, 0.04013146462032802, 0.03609860307185442]}, "mutation_prompt": null}
{"id": "c1f25359-da18-43eb-9134-f872e2c26afa", "solution": "import numpy as np\n\nclass DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5.0, 5.0)\n\n        def simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = mutation(x, population, F)\n                trial_x = simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "DE_SA_Optimizer", "description": "An innovative hybrid metaheuristic algorithm combining differential evolution with simulated annealing for global optimization on black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c850b201-7d65-4805-b06f-eabeeddb83c6", "metadata": {"aucs": [0.1344916310214227, 0.13783408983156753, 0.13687930983433338, 0.13368790790785334, 0.13947428399727468, 0.14438158087431108, 0.1379028014581105, 0.17376049954813821, 0.1441598683368719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024087940339012626, 0.03256931947890551, 0.03139391807893499, 0.025853579360973544, 0.031243274538508725, 0.03202943589007323, 0.02153297312614888, 0.02862270689912616, 0.02878850090315277, 0.020188779361047793, 0.019713502651577453, 0.010295065675242632, 0.01959972157639278, 0.00379238271046467, 0.015440218054690757, 0.01978495494679533, 0.0048359930932588835, 0.0069742088057599405, 0.7541550209826431, 0.8801672906714442, 0.5847736567372626, 0.23088383350639596, 0.1753684718400984, 0.1056247123977071, 0.12363400371397126, 0.12249799462011124, 0.6227080382317883, 0.06274794416174423, 0.046400498220063646, 0.035238800100417356, 0.032582382528131504, 0.048013759989968596, 0.0374718132325117, 0.04320230546600501, 0.07630818758799629, 0.07975942062323249, 0.10237842929314467, 0.12870123024251645, 0.09894507735730951, 0.08051745124560405, 0.09806094871255466, 0.0880093738626847, 0.08822767123382347, 0.06516109924448632, 0.09506600976310509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057488050330353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00997033607363651, 0.0353239928771909, 0.0061056904975341775, 0.02149054451667376, 0.03710315707104017, 0.0671496831224565, 0.009960118721475397, 0.034605262715839524, 0.017603334411377514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14585843789308217, 0.15756555760738078, 0.1555531669144371, 0.16237570808183233, 0.16714753779754954, 0.1401601277704747, 0.18237003867594825, 0.15580521743072528, 0.1932716509496304, 0.03295558679126165, 0.03270889333036009, 0.029667418282955826, 0.0372617475384146, 0.02937692753053145, 0.029452678196172366, 0.027901847024708104, 0.026654085713234466, 0.0267656688986897, 0.11823148717201915, 0.12617165138425024, 0.13059866348769467, 0.14064799252634097, 0.13853011735360543, 0.1388371447126172, 0.12625508473778924, 0.11659542065621431, 0.1394796786814242, 0.16323419153723684, 0.14090167971346823, 0.16447584012945882, 0.1459873336273516, 0.13309834621217054, 0.1456237052190782, 0.14020537835210456, 0.17377774300845283, 0.1466787150090868, 0.08688230342114134, 0.07632182576794222, 0.0897727850611898, 0.0822022932407015, 0.08340921642310384, 0.07400335467197128, 0.08644643045958655, 0.0997711199450243, 0.07885096651048717, 0.13017369122506828, 0.12615516003122562, 0.14456558020674526, 0.1354309453927628, 0.1378475220965646, 0.12112770278863683, 0.12381173495885356, 0.12320346004855054, 0.1387069444546556, 9.999999999998899e-05, 0.1386775150985775, 0.062448634794456614, 0.10952920045810366, 0.07606297058162159, 0.13647168594860182, 0.10425760852625876, 0.1173349789921142, 0.03194899229633197, 0.11230720423388152, 0.12652336137548514, 0.16447226905795853, 0.11029857518433583, 0.14737603322296433, 0.10832781441811368, 0.24646803777451598, 0.11789073941235528, 0.12853916054475045, 0.11231887130846974, 0.13516916198909834, 0.10600315402433735, 0.14180040914024672, 0.11070804071439377, 0.10044268496441888, 0.12336183214950158, 0.11587926423849781, 0.10627951956279025, 0.198646023281836, 0.18315861471725858, 0.16830585954679667, 0.18104295313771435, 0.1734748080421863, 0.2142711002087121, 0.17311317809651905, 0.19322070380211165, 0.15801636408377107, 0.033998852325660134, 0.054134045907531125, 0.0319918074153287, 0.02970866588438492, 0.036144111667547385, 0.03929854939623734, 0.03356034219372228, 0.04013146462032802, 0.03609860307185442]}, "mutation_prompt": null}
{"id": "905182e3-617d-4733-a99c-187b18549e27", "solution": "import numpy as np\n\nclass DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            return np.clip(a + F * (b - c), -5.0, 5.0)\n\n        def simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = mutation(x, population, F)\n                trial_x = simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "DE_SA_Optimizer", "description": "An innovative hybrid metaheuristic algorithm combining differential evolution with simulated annealing for global optimization on black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c850b201-7d65-4805-b06f-eabeeddb83c6", "metadata": {"aucs": [0.1344916310214227, 0.13783408983156753, 0.13687930983433338, 0.13368790790785334, 0.13947428399727468, 0.14438158087431108, 0.1379028014581105, 0.17376049954813821, 0.1441598683368719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024087940339012626, 0.03256931947890551, 0.03139391807893499, 0.025853579360973544, 0.031243274538508725, 0.03202943589007323, 0.02153297312614888, 0.02862270689912616, 0.02878850090315277, 0.020188779361047793, 0.019713502651577453, 0.010295065675242632, 0.01959972157639278, 0.00379238271046467, 0.015440218054690757, 0.01978495494679533, 0.0048359930932588835, 0.0069742088057599405, 0.7541550209826431, 0.8801672906714442, 0.5847736567372626, 0.23088383350639596, 0.1753684718400984, 0.1056247123977071, 0.12363400371397126, 0.12249799462011124, 0.6227080382317883, 0.06274794416174423, 0.046400498220063646, 0.035238800100417356, 0.032582382528131504, 0.048013759989968596, 0.0374718132325117, 0.04320230546600501, 0.07630818758799629, 0.07975942062323249, 0.10237842929314467, 0.12870123024251645, 0.09894507735730951, 0.08051745124560405, 0.09806094871255466, 0.0880093738626847, 0.08822767123382347, 0.06516109924448632, 0.09506600976310509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008057488050330353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00997033607363651, 0.0353239928771909, 0.0061056904975341775, 0.02149054451667376, 0.03710315707104017, 0.0671496831224565, 0.009960118721475397, 0.034605262715839524, 0.017603334411377514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14585843789308217, 0.15756555760738078, 0.1555531669144371, 0.16237570808183233, 0.16714753779754954, 0.1401601277704747, 0.18237003867594825, 0.15580521743072528, 0.1932716509496304, 0.03295558679126165, 0.03270889333036009, 0.029667418282955826, 0.0372617475384146, 0.02937692753053145, 0.029452678196172366, 0.027901847024708104, 0.026654085713234466, 0.0267656688986897, 0.11823148717201915, 0.12617165138425024, 0.13059866348769467, 0.14064799252634097, 0.13853011735360543, 0.1388371447126172, 0.12625508473778924, 0.11659542065621431, 0.1394796786814242, 0.16323419153723684, 0.14090167971346823, 0.16447584012945882, 0.1459873336273516, 0.13309834621217054, 0.1456237052190782, 0.14020537835210456, 0.17377774300845283, 0.1466787150090868, 0.08688230342114134, 0.07632182576794222, 0.0897727850611898, 0.0822022932407015, 0.08340921642310384, 0.07400335467197128, 0.08644643045958655, 0.0997711199450243, 0.07885096651048717, 0.13017369122506828, 0.12615516003122562, 0.14456558020674526, 0.1354309453927628, 0.1378475220965646, 0.12112770278863683, 0.12381173495885356, 0.12320346004855054, 0.1387069444546556, 9.999999999998899e-05, 0.1386775150985775, 0.062448634794456614, 0.10952920045810366, 0.07606297058162159, 0.13647168594860182, 0.10425760852625876, 0.1173349789921142, 0.03194899229633197, 0.11230720423388152, 0.12652336137548514, 0.16447226905795853, 0.11029857518433583, 0.14737603322296433, 0.10832781441811368, 0.24646803777451598, 0.11789073941235528, 0.12853916054475045, 0.11231887130846974, 0.13516916198909834, 0.10600315402433735, 0.14180040914024672, 0.11070804071439377, 0.10044268496441888, 0.12336183214950158, 0.11587926423849781, 0.10627951956279025, 0.198646023281836, 0.18315861471725858, 0.16830585954679667, 0.18104295313771435, 0.1734748080421863, 0.2142711002087121, 0.17311317809651905, 0.19322070380211165, 0.15801636408377107, 0.033998852325660134, 0.054134045907531125, 0.0319918074153287, 0.02970866588438492, 0.036144111667547385, 0.03929854939623734, 0.03356034219372228, 0.04013146462032802, 0.03609860307185442]}, "mutation_prompt": null}
{"id": "7b029679-6158-4ceb-b50c-73f8d7d7db36", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            return np.clip(a + F * (b - c), -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer", "description": "Enhancing differential evolution with adaptive parameter tuning for improved convergence on black box optimization functions.", "configspace": "", "generation": 4, "fitness": 0.08398498476342357, "feedback": "The algorithm Enhanced_DE_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.10.", "error": "", "parent_id": "c850b201-7d65-4805-b06f-eabeeddb83c6", "metadata": {"aucs": [0.15315396512520807, 0.1211710595046841, 0.1530678457335718, 0.15568803047317037, 0.1184711488439798, 0.1805948182886512, 0.17286891497316537, 0.17868580691202518, 0.14050344853123153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017724072460495677, 0.030064904462125508, 0.020785710561036508, 0.04994431600703997, 0.02135177696243462, 0.01949588993389939, 0.02989237749565199, 0.03826935139421861, 0.026155059075480658, 0.026932194170118384, 0.013840146575317736, 0.010086478209985206, 0.019928052766106652, 0.008580912802237606, 0.015257996792437334, 0.021527594041106046, 0.0078027203628274755, 0.030176240082792405, 0.7704714254819602, 0.11055168973057738, 0.11345105615650863, 0.829549720086325, 0.6475174165001911, 0.21600489609770823, 0.3201045086469939, 0.2649395117598936, 0.10173722038366018, 0.06274794416174423, 0.04111094419300754, 0.024145757600680717, 0.061140763109788665, 0.044107630608740456, 0.052777279968476254, 0.08389793870634599, 0.049010612565339784, 0.0418104994747549, 0.10027683525177622, 0.0930025598592421, 0.07161864016197594, 0.0882125749089604, 0.07285119553694963, 0.14445036500632558, 0.0772117275808929, 0.09123629717144377, 0.09603242913891885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013752308829346638, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032584972255592204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015308687896105067, 0.010765596485086126, 0.06809990405937805, 0.023817238827202325, 0.03788797726004289, 0.039903455346369854, 0.0023629616277089927, 0.02403416781652945, 0.012678960310786302, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15192301844098766, 0.15832292355600408, 0.15054456908684555, 0.1840883374368969, 0.1558272484473051, 0.14765245294421858, 0.16112956940342849, 0.16000000889649713, 0.1521895055700525, 0.05061467296436584, 0.027545722873471234, 0.038531025119639684, 0.03266886175302153, 0.024159309190990852, 0.0447829561688341, 0.022967511581931666, 0.03053273766119835, 0.03748756399344, 0.12118494844090688, 0.1424667894843582, 0.11842175776965747, 0.20983569889764808, 0.15147652195799588, 0.11148177922703162, 0.12155398373781323, 0.14123961439933663, 0.11972057173912742, 0.1306849985141797, 0.15555308122821954, 0.1613932299901244, 0.14429242124922093, 0.16338123334084598, 0.138382629898953, 0.14498586050091855, 0.17377774300845283, 0.14590764344678409, 0.0926880684578949, 0.09147413486122347, 0.11667736663617712, 0.08836915647943111, 0.08436391590652059, 0.09369858179539858, 0.09098771862595656, 0.0997711199450243, 0.09324168587925796, 0.12603080486059004, 0.15053566467207768, 0.13891542709045368, 0.12967326156168124, 0.1390830638531283, 0.12669219256839193, 0.12808319514897015, 0.13624278827260494, 0.13637229892229474, 0.04926386111382286, 0.009326026172779556, 0.10407352807727943, 0.10421929755343828, 0.03693719288052055, 0.01689285920511685, 0.062344300385156926, 0.12549655396474269, 0.10460731244126531, 0.12399935955968322, 0.10747514967850746, 0.14746817461209516, 0.18179034245134995, 0.12636629821856638, 0.1291754746008632, 0.1683327540784758, 0.1327226692545943, 0.13687163193049146, 0.13231596429981052, 0.10952664152542035, 0.09968092807956508, 0.16207339199139859, 0.12714114893121276, 0.1559748355086078, 0.1046170915668817, 0.1278824180324647, 0.1724327686592374, 0.1742007641693304, 0.16961976367765308, 0.17373376477308322, 0.18793817405224322, 0.18287697987107854, 0.19408617894311198, 0.18543154343203816, 0.1777162217697692, 0.18351937178119493, 0.03618986972549154, 0.03002045260862729, 0.031393493129599714, 0.0351631513676437, 0.040211910904125236, 0.043899512117651085, 0.026080646114930106, 0.040167352314459115, 0.04150413281200149]}, "mutation_prompt": null}
{"id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            crossover_prob = np.random.uniform(0, 1, size=self.dim) < CR\n            mutant = np.where(crossover_prob, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Refining the parameter adaptation by introducing a new crossover strategy for enhanced exploration-exploitation balance.", "configspace": "", "generation": 5, "fitness": 0.08663679700886977, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.11.", "error": "", "parent_id": "7b029679-6158-4ceb-b50c-73f8d7d7db36", "metadata": {"aucs": [0.14648900336919746, 0.1370033260548209, 0.09635086553839811, 0.1566320807380427, 0.13128223168177477, 0.1322022148648453, 0.1340737868424705, 0.13324719246240424, 0.1341685257086065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04405282891077966, 0.023614317746173175, 0.03208184322012153, 0.03421873481869697, 0.02430278875645797, 0.032917675756017895, 0.021724082364410924, 0.04500171133112996, 0.019952263817630933, 0.015229522161281928, 0.009005574286056972, 0.01941465420166022, 0.02699296305289789, 0.02004432979705728, 0.005987556796436921, 0.014763392921912755, 0.01226273396646771, 0.006521985838117916, 0.21550293103577067, 0.5392532155199048, 0.7747450758666605, 0.5804065725149508, 0.1734838679829812, 0.6872704150883763, 0.3611470087448312, 0.4804666855001902, 0.5601418519541941, 0.06274794416174423, 0.06726862207775708, 0.05181363076876644, 0.016190897072419275, 0.04023295151970685, 0.046214693332950585, 0.04224661157760601, 0.05790589157245907, 0.039407447385854, 0.10027683525177622, 0.08224659834595494, 0.09415990395966145, 0.07242806066488972, 0.07393209307652637, 0.06446340918523819, 0.09332844084050607, 0.09664194477052479, 0.07564938643797037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002951864227310752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01444056593788845, 0.007989402953995528, 0.014076242396011351, 0.007246910951473007, 0.006048821843747332, 0.04163696747261747, 0.03411874553543348, 0.029926573897558817, 0.025444919078311035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16334580866586768, 0.15756555760738078, 0.1578083200680248, 0.1491937570306785, 0.1597696764568256, 0.1557031144181863, 0.16872479286368236, 0.13565211193018967, 0.15232903490428928, 0.04653110251196246, 0.019155566258047485, 0.03898639498821688, 0.05601101631679595, 0.030687375028438657, 0.020927483201879316, 0.05142228974387164, 0.022449532195915167, 0.0267656688986897, 0.1456581455845719, 0.15568221382965075, 0.12579536303290884, 0.12864951888660558, 0.1335700076194667, 0.20133975166279272, 0.11921372188687696, 0.12167233280654677, 0.12061590929738286, 0.127810881364387, 0.13150952478197575, 0.1613932299901244, 0.1398293226957661, 0.1380910802330283, 0.1358752278298896, 0.1638014715050804, 0.17377774300845283, 0.17381322234974228, 0.07812837532465289, 0.07977099487901285, 0.09365919502244147, 0.07097476468476072, 0.08143754617015242, 0.08738387408908943, 0.08468560000428227, 0.0997711199450243, 0.0794255926656402, 0.13224613768739524, 0.11608326023585636, 0.1415218766340255, 0.13469016306259451, 0.13095940443536236, 0.12827679718099683, 0.14709528970016128, 0.12464425681916202, 0.1309122589996079, 0.106633374720147, 0.045181999624902214, 0.12877330832451572, 0.14990332447696897, 0.10873081740266932, 9.999999999998899e-05, 0.14508719435633322, 0.09365600220985093, 0.012297250758995015, 0.10783886123333053, 0.12373368279408392, 0.12069792426250348, 0.11775907046567358, 0.14239048909158047, 0.13526337584192938, 0.12674480401629296, 0.1093419134377458, 0.13376458904648114, 0.11396499866044285, 0.14146031257835712, 0.15614882539003772, 0.1086489531301098, 0.09436631621455926, 0.1469858585270093, 0.16412411045382613, 0.16423795890681936, 0.16576534171499058, 0.17085157580149224, 0.18018505718354294, 0.1712433850386036, 0.17747855490257247, 0.16559174219734052, 0.1790582830207379, 0.17835031417624037, 0.19472725114561906, 0.1689692995017631, 0.035057070868191875, 0.04511549492490918, 0.031393493129599714, 0.032063423926058876, 0.051331899615396415, 0.05018260306194988, 0.0412137097218116, 0.03803354422653826, 0.04067150513512585]}, "mutation_prompt": null}
{"id": "a0e79061-b686-4d59-919c-7545043a6a9f", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            crossover_prob = np.random.uniform(0, 1, size=self.dim) < CR\n            mutant = np.where(crossover_prob, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Refining the parameter adaptation by introducing a new crossover strategy for enhanced exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "metadata": {"aucs": [0.14648900336919746, 0.1370033260548209, 0.09635086553839811, 0.1566320807380427, 0.13128223168177477, 0.1322022148648453, 0.1340737868424705, 0.13324719246240424, 0.1341685257086065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04405282891077966, 0.023614317746173175, 0.03208184322012153, 0.03421873481869697, 0.02430278875645797, 0.032917675756017895, 0.021724082364410924, 0.04500171133112996, 0.019952263817630933, 0.015229522161281928, 0.009005574286056972, 0.01941465420166022, 0.02699296305289789, 0.02004432979705728, 0.005987556796436921, 0.014763392921912755, 0.01226273396646771, 0.006521985838117916, 0.21550293103577067, 0.5392532155199048, 0.7747450758666605, 0.5804065725149508, 0.1734838679829812, 0.6872704150883763, 0.3611470087448312, 0.4804666855001902, 0.5601418519541941, 0.06274794416174423, 0.06726862207775708, 0.05181363076876644, 0.016190897072419275, 0.04023295151970685, 0.046214693332950585, 0.04224661157760601, 0.05790589157245907, 0.039407447385854, 0.10027683525177622, 0.08224659834595494, 0.09415990395966145, 0.07242806066488972, 0.07393209307652637, 0.06446340918523819, 0.09332844084050607, 0.09664194477052479, 0.07564938643797037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002951864227310752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01444056593788845, 0.007989402953995528, 0.014076242396011351, 0.007246910951473007, 0.006048821843747332, 0.04163696747261747, 0.03411874553543348, 0.029926573897558817, 0.025444919078311035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16334580866586768, 0.15756555760738078, 0.1578083200680248, 0.1491937570306785, 0.1597696764568256, 0.1557031144181863, 0.16872479286368236, 0.13565211193018967, 0.15232903490428928, 0.04653110251196246, 0.019155566258047485, 0.03898639498821688, 0.05601101631679595, 0.030687375028438657, 0.020927483201879316, 0.05142228974387164, 0.022449532195915167, 0.0267656688986897, 0.1456581455845719, 0.15568221382965075, 0.12579536303290884, 0.12864951888660558, 0.1335700076194667, 0.20133975166279272, 0.11921372188687696, 0.12167233280654677, 0.12061590929738286, 0.127810881364387, 0.13150952478197575, 0.1613932299901244, 0.1398293226957661, 0.1380910802330283, 0.1358752278298896, 0.1638014715050804, 0.17377774300845283, 0.17381322234974228, 0.07812837532465289, 0.07977099487901285, 0.09365919502244147, 0.07097476468476072, 0.08143754617015242, 0.08738387408908943, 0.08468560000428227, 0.0997711199450243, 0.0794255926656402, 0.13224613768739524, 0.11608326023585636, 0.1415218766340255, 0.13469016306259451, 0.13095940443536236, 0.12827679718099683, 0.14709528970016128, 0.12464425681916202, 0.1309122589996079, 0.106633374720147, 0.045181999624902214, 0.12877330832451572, 0.14990332447696897, 0.10873081740266932, 9.999999999998899e-05, 0.14508719435633322, 0.09365600220985093, 0.012297250758995015, 0.10783886123333053, 0.12373368279408392, 0.12069792426250348, 0.11775907046567358, 0.14239048909158047, 0.13526337584192938, 0.12674480401629296, 0.1093419134377458, 0.13376458904648114, 0.11396499866044285, 0.14146031257835712, 0.15614882539003772, 0.1086489531301098, 0.09436631621455926, 0.1469858585270093, 0.16412411045382613, 0.16423795890681936, 0.16576534171499058, 0.17085157580149224, 0.18018505718354294, 0.1712433850386036, 0.17747855490257247, 0.16559174219734052, 0.1790582830207379, 0.17835031417624037, 0.19472725114561906, 0.1689692995017631, 0.035057070868191875, 0.04511549492490918, 0.031393493129599714, 0.032063423926058876, 0.051331899615396415, 0.05018260306194988, 0.0412137097218116, 0.03803354422653826, 0.04067150513512585]}, "mutation_prompt": null}
{"id": "2379263d-b7b5-49cd-bb6a-b0881fd501cb", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            crossover_prob = np.random.uniform(0, 1, size=self.dim) < CR\n            mutant = np.where(crossover_prob, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T, scaling_factor):\n            new_x = x + np.random.normal(0, T * scaling_factor, size=self.dim)  # Dynamic scaling\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T, _/self.budget)  # Dynamic scaling factor\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Improved", "description": "Integrating a dynamic scaling factor for adaptive simulated annealing to enhance exploration and convergence speed.", "configspace": "", "generation": 7, "fitness": 0.07501283696652793, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.10.", "error": "", "parent_id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "metadata": {"aucs": [0.16025860191260277, 0.1379532124611207, 0.14246370252657403, 0.1180469987168764, 0.13285462315508034, 0.12840861346089893, 0.1328446208440599, 0.12388660890392089, 0.11926149732849733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017420476997302092, 0.01467079663371329, 0.01721643822218888, 0.014695285117803714, 0.020975109954090687, 0.014436418752376445, 0.03945231594840937, 0.01929508357988874, 0.021617770674628112, 0.0008063365979069648, 0.007102734229875618, 0.014711988687451827, 0.01959972157639278, 0.013114481003741463, 0.012830404953945607, 0.014763392921912755, 0.005738216656370199, 0.012074633620620223, 0.8800785987900492, 0.4442410888385865, 0.10731131012378059, 0.13314699277186648, 0.1350758000642429, 0.1859488265954835, 0.6955263711166622, 0.14948931834516666, 0.6384416686739695, 0.06274794416174423, 0.018943417268739493, 0.034379853849629605, 0.017210593831696874, 0.04691301693482819, 0.021937370758597585, 0.010002932486762983, 0.036697237309533004, 0.052560885732053086, 0.10027683525177622, 0.08224659834595494, 0.1109912753711666, 0.097311305471664, 0.07285119553694963, 0.09941592402706612, 0.09516636604161466, 0.09836136185700983, 0.07589650938063675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008916586653466951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010364656604979094, 0.025131400878937393, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030352218804037268, 0.019780967788701642, 0.016451210179622144, 0.016435256379306873, 0.036332115479224325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14711853638041883, 0.15756555760738078, 0.16161327913467194, 0.13260908046163022, 0.13627358077836949, 0.16129181295800388, 0.16471604572904985, 0.15484159081269155, 0.1415015475135286, 0.035546055809960286, 0.014255067800287957, 0.025513898331161133, 0.03266886175302153, 0.019733789700460136, 0.01759993274736349, 0.037931940798901054, 0.019906322658515108, 0.028469621927720068, 0.11645724911112065, 0.1142446969401335, 0.12163785591796517, 0.16934509423126243, 0.11690399397729467, 0.14966994611165374, 0.1238473686383531, 0.10448082855378638, 0.12114998498870833, 0.15427486992293948, 0.1455563008929356, 0.1613932299901244, 0.13800672315110074, 0.13628230085256787, 0.12719226383657534, 0.13219023621658377, 0.17377774300845283, 0.13199294920697247, 0.06829188143164122, 0.0781751767253005, 0.08713809228799618, 0.06510002619217026, 0.07117862135040376, 0.08158838506143051, 0.09022961793984674, 0.10236296782320964, 0.08514697537196902, 0.12292681444970999, 0.11196714072765501, 0.13345086981233123, 0.16328024224763193, 0.11347531540292877, 0.13418553767481245, 0.12923155978288725, 0.13633870943048498, 0.16355206106037645, 9.999999999998899e-05, 0.11927671400952, 0.120549209603244, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001955364887679112, 0.053777615759132424, 9.999999999998899e-05, 0.0032786929127849307, 0.11162047068574443, 0.11875340841923121, 0.13968392355245685, 0.10429758815926948, 0.12610318687147415, 0.1057495177290888, 0.16424147141789458, 0.1175178340455788, 0.1086239585423846, 0.11040265245322212, 0.10493722118388482, 0.07358939811953391, 0.08701626535940399, 0.07024775034501929, 0.08449151868700189, 0.09961190362147021, 0.13568986511208425, 0.09582996292281254, 0.17975692553860967, 0.18741366091195644, 0.1666977520060423, 0.1714905478413541, 0.17590434342618988, 0.18374896204352376, 0.1727302900327572, 0.17735398073399444, 0.16840528248904207, 0.028857612043550418, 0.025246681830276452, 0.031393493129599714, 0.02905704857162761, 0.03425093938292756, 0.02474611635873003, 0.038210926386126776, 0.03803354422653826, 0.026790758371609047]}, "mutation_prompt": null}
{"id": "d70c8b96-493a-46ae-b58a-3527c39e1e66", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            crossover_prob = np.random.uniform(0, 1, size=self.dim) < CR\n            mutant = np.where(crossover_prob, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Refining the parameter adaptation by introducing a new crossover strategy for enhanced exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "metadata": {"aucs": [0.14648900336919746, 0.1370033260548209, 0.09635086553839811, 0.1566320807380427, 0.13128223168177477, 0.1322022148648453, 0.1340737868424705, 0.13324719246240424, 0.1341685257086065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04405282891077966, 0.023614317746173175, 0.03208184322012153, 0.03421873481869697, 0.02430278875645797, 0.032917675756017895, 0.021724082364410924, 0.04500171133112996, 0.019952263817630933, 0.015229522161281928, 0.009005574286056972, 0.01941465420166022, 0.02699296305289789, 0.02004432979705728, 0.005987556796436921, 0.014763392921912755, 0.01226273396646771, 0.006521985838117916, 0.21550293103577067, 0.5392532155199048, 0.7747450758666605, 0.5804065725149508, 0.1734838679829812, 0.6872704150883763, 0.3611470087448312, 0.4804666855001902, 0.5601418519541941, 0.06274794416174423, 0.06726862207775708, 0.05181363076876644, 0.016190897072419275, 0.04023295151970685, 0.046214693332950585, 0.04224661157760601, 0.05790589157245907, 0.039407447385854, 0.10027683525177622, 0.08224659834595494, 0.09415990395966145, 0.07242806066488972, 0.07393209307652637, 0.06446340918523819, 0.09332844084050607, 0.09664194477052479, 0.07564938643797037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002951864227310752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01444056593788845, 0.007989402953995528, 0.014076242396011351, 0.007246910951473007, 0.006048821843747332, 0.04163696747261747, 0.03411874553543348, 0.029926573897558817, 0.025444919078311035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16334580866586768, 0.15756555760738078, 0.1578083200680248, 0.1491937570306785, 0.1597696764568256, 0.1557031144181863, 0.16872479286368236, 0.13565211193018967, 0.15232903490428928, 0.04653110251196246, 0.019155566258047485, 0.03898639498821688, 0.05601101631679595, 0.030687375028438657, 0.020927483201879316, 0.05142228974387164, 0.022449532195915167, 0.0267656688986897, 0.1456581455845719, 0.15568221382965075, 0.12579536303290884, 0.12864951888660558, 0.1335700076194667, 0.20133975166279272, 0.11921372188687696, 0.12167233280654677, 0.12061590929738286, 0.127810881364387, 0.13150952478197575, 0.1613932299901244, 0.1398293226957661, 0.1380910802330283, 0.1358752278298896, 0.1638014715050804, 0.17377774300845283, 0.17381322234974228, 0.07812837532465289, 0.07977099487901285, 0.09365919502244147, 0.07097476468476072, 0.08143754617015242, 0.08738387408908943, 0.08468560000428227, 0.0997711199450243, 0.0794255926656402, 0.13224613768739524, 0.11608326023585636, 0.1415218766340255, 0.13469016306259451, 0.13095940443536236, 0.12827679718099683, 0.14709528970016128, 0.12464425681916202, 0.1309122589996079, 0.106633374720147, 0.045181999624902214, 0.12877330832451572, 0.14990332447696897, 0.10873081740266932, 9.999999999998899e-05, 0.14508719435633322, 0.09365600220985093, 0.012297250758995015, 0.10783886123333053, 0.12373368279408392, 0.12069792426250348, 0.11775907046567358, 0.14239048909158047, 0.13526337584192938, 0.12674480401629296, 0.1093419134377458, 0.13376458904648114, 0.11396499866044285, 0.14146031257835712, 0.15614882539003772, 0.1086489531301098, 0.09436631621455926, 0.1469858585270093, 0.16412411045382613, 0.16423795890681936, 0.16576534171499058, 0.17085157580149224, 0.18018505718354294, 0.1712433850386036, 0.17747855490257247, 0.16559174219734052, 0.1790582830207379, 0.17835031417624037, 0.19472725114561906, 0.1689692995017631, 0.035057070868191875, 0.04511549492490918, 0.031393493129599714, 0.032063423926058876, 0.051331899615396415, 0.05018260306194988, 0.0412137097218116, 0.03803354422653826, 0.04067150513512585]}, "mutation_prompt": null}
{"id": "f403ab17-0867-405e-8fca-82233bb97f11", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_AdaptivePopSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            crossover_prob = np.random.uniform(0, 1, size=self.dim) < CR\n            mutant = np.where(crossover_prob, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n\n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            \n            successful_ratio = sum(func(x) < func(best_x) for x in new_population) / len(new_population)\n            pop_size = min(len(new_population) * (1 + successful_ratio), 2 * pop_size)\n            population = np.array(new_population)\n\n        return best_x", "name": "Enhanced_DE_SA_Optimizer_AdaptivePopSize", "description": "Introducing adaptive population size control to dynamically adjust the number of individuals based on their performance during optimization.", "configspace": "", "generation": 9, "fitness": 0.07893265913462974, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_AdaptivePopSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.09.", "error": "", "parent_id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "metadata": {"aucs": [0.14648900336919746, 0.1370033260548209, 0.09506061023773205, 0.15059705259844647, 0.12391254364676041, 0.1295682027236793, 0.12976615688971682, 0.13214020129110027, 0.12590591214079028, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04405282891077966, 0.020959572824003403, 0.030119906781767347, 0.03253955652779639, 0.022464788888936327, 0.03217812161172229, 0.02142168698566982, 0.0445246986314598, 0.01759328242805569, 0.014137931708802398, 0.005321232646196439, 0.018450892525755602, 0.026358038622356417, 0.01984079951283435, 0.004640300272364728, 0.014763392921912755, 0.01074408571752028, 0.0047152683284992225, 0.20720176252940015, 0.36260641385739245, 0.6919997029692349, 0.4187097404401807, 0.15991403068245114, 0.5693102144902655, 0.11138393508865174, 0.27793987609756, 0.39041836677041497, 0.06274794416174423, 0.06579141493385765, 0.048066866321408996, 0.01367040491680016, 0.036139723066223484, 0.04469380490853636, 0.04117041768929541, 0.0559512157381481, 0.03813922158442473, 0.10027683525177622, 0.08224659834595494, 0.09118801061165649, 0.07088259983306411, 0.07285119553694963, 0.0635528482469877, 0.09113478124618812, 0.09625640950107806, 0.07140556892517202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002316882190592784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009198429321172208, 0.005868951966864211, 0.008849746656108048, 0.005522999641345838, 0.004299181187422785, 0.034874999750012625, 0.029468199324164335, 0.024490170623704177, 0.019916267362880213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1606308555199506, 0.15756555760738078, 0.1562204016044525, 0.14678947984280244, 0.15417999175933617, 0.14615501173312861, 0.1646037704625185, 0.13221933762164406, 0.1510807309534754, 0.04306329482149118, 0.01849879496665019, 0.03865920242694065, 0.05495109330334269, 0.029054179690041426, 0.019594383813060445, 0.04828161865384173, 0.016347595648452118, 0.0267656688986897, 0.1432634109205183, 0.14586594100827155, 0.1223984791287498, 0.12234325559358805, 0.13131133708648046, 0.20133975166279272, 0.11332058594284067, 0.11882503380683462, 0.11782710442131827, 0.1254364440124538, 0.12860875352598888, 0.1613932299901244, 0.13950592783348625, 0.1330676396307675, 0.134963953830181, 0.16276867325625521, 0.17377774300845283, 0.17381322234974228, 0.0702619742753745, 0.07740780486359922, 0.09310287057346833, 0.06576640273170342, 0.07555367109450728, 0.0848772208448354, 0.0837317855149382, 0.0997711199450243, 0.07557082740003207, 0.12552790938488412, 0.11385212955766966, 0.13589748163636473, 0.12952170158161425, 0.12960804624444733, 0.12629252197315943, 0.14051045085952352, 0.11967416985837576, 0.12702048137163546, 0.09420885259387868, 0.03652135243823973, 0.12457515797135055, 0.14990332447696897, 0.09464573581143121, 9.999999999998899e-05, 0.14357170157535604, 0.07433607989656832, 9.999999999998899e-05, 0.10593068195128885, 0.11690587960753196, 0.11370685591070817, 0.11697108483858132, 0.14168286576769273, 0.12703063223227784, 0.1232779222131416, 0.10759175143007127, 0.11673954122422092, 0.11355284907994467, 0.13417020126238077, 0.1523747803323151, 0.10759692704718071, 0.09232462142655362, 0.13367670255124253, 0.16308636071115012, 0.16232701343277423, 0.16228717566035555, 0.16757471170068516, 0.17411362493467009, 0.16991424519516762, 0.17426377990870767, 0.1639771800489409, 0.1763945994638847, 0.16800471654701288, 0.19239619588015855, 0.16822863412271438, 0.03212230367081825, 0.04420048928245468, 0.031393493129599714, 0.03188230314355733, 0.05096142005282345, 0.05018260306194988, 0.03856301348857849, 0.03803354422653826, 0.04067150513512585]}, "mutation_prompt": null}
{"id": "49f6a9cd-e9fe-43d7-b98d-9deec9492b62", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined_PopSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        init_pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            crossover_prob = np.random.uniform(0, 1, size=self.dim) < CR\n            mutant = np.where(crossover_prob, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(init_pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n\n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            pop_size = int(init_pop_size * (1 + np.mean([func(x) for x in population])))\n            for x in population:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n            population[:len(new_population)] = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined_PopSize", "description": "Introducing adaptive population size control based on dynamic evaluation of function landscape.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "metadata": {}, "mutation_prompt": null}
{"id": "08e18845-6a31-4a1a-bcb3-b872ac846d40", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            crossover_prob = np.random.uniform(0, 1, size=self.dim) < CR\n            mutant = np.where(crossover_prob, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def crowding_distance(population):\n            dist_matrix = cdist(population, population, 'euclidean')\n            distances = np.sum(dist_matrix, axis=1)\n            return distances\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            crowding_dist = crowding_distance(population)\n            for x in population:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the diversity maintenance by incorporating crowding distance to promote better exploration in the population.", "configspace": "", "generation": 11, "fitness": 0.08663679700886977, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.11.", "error": "", "parent_id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "metadata": {"aucs": [0.14648900336919746, 0.1370033260548209, 0.09635086553839811, 0.1566320807380427, 0.13128223168177477, 0.1322022148648453, 0.1340737868424705, 0.13324719246240424, 0.1341685257086065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04405282891077966, 0.023614317746173175, 0.03208184322012153, 0.03421873481869697, 0.02430278875645797, 0.032917675756017895, 0.021724082364410924, 0.04500171133112996, 0.019952263817630933, 0.015229522161281928, 0.009005574286056972, 0.01941465420166022, 0.02699296305289789, 0.02004432979705728, 0.005987556796436921, 0.014763392921912755, 0.01226273396646771, 0.006521985838117916, 0.21550293103577067, 0.5392532155199048, 0.7747450758666605, 0.5804065725149508, 0.1734838679829812, 0.6872704150883763, 0.3611470087448312, 0.4804666855001902, 0.5601418519541941, 0.06274794416174423, 0.06726862207775708, 0.05181363076876644, 0.016190897072419275, 0.04023295151970685, 0.046214693332950585, 0.04224661157760601, 0.05790589157245907, 0.039407447385854, 0.10027683525177622, 0.08224659834595494, 0.09415990395966145, 0.07242806066488972, 0.07393209307652637, 0.06446340918523819, 0.09332844084050607, 0.09664194477052479, 0.07564938643797037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002951864227310752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01444056593788845, 0.007989402953995528, 0.014076242396011351, 0.007246910951473007, 0.006048821843747332, 0.04163696747261747, 0.03411874553543348, 0.029926573897558817, 0.025444919078311035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16334580866586768, 0.15756555760738078, 0.1578083200680248, 0.1491937570306785, 0.1597696764568256, 0.1557031144181863, 0.16872479286368236, 0.13565211193018967, 0.15232903490428928, 0.04653110251196246, 0.019155566258047485, 0.03898639498821688, 0.05601101631679595, 0.030687375028438657, 0.020927483201879316, 0.05142228974387164, 0.022449532195915167, 0.0267656688986897, 0.1456581455845719, 0.15568221382965075, 0.12579536303290884, 0.12864951888660558, 0.1335700076194667, 0.20133975166279272, 0.11921372188687696, 0.12167233280654677, 0.12061590929738286, 0.127810881364387, 0.13150952478197575, 0.1613932299901244, 0.1398293226957661, 0.1380910802330283, 0.1358752278298896, 0.1638014715050804, 0.17377774300845283, 0.17381322234974228, 0.07812837532465289, 0.07977099487901285, 0.09365919502244147, 0.07097476468476072, 0.08143754617015242, 0.08738387408908943, 0.08468560000428227, 0.0997711199450243, 0.0794255926656402, 0.13224613768739524, 0.11608326023585636, 0.1415218766340255, 0.13469016306259451, 0.13095940443536236, 0.12827679718099683, 0.14709528970016128, 0.12464425681916202, 0.1309122589996079, 0.106633374720147, 0.045181999624902214, 0.12877330832451572, 0.14990332447696897, 0.10873081740266932, 9.999999999998899e-05, 0.14508719435633322, 0.09365600220985093, 0.012297250758995015, 0.10783886123333053, 0.12373368279408392, 0.12069792426250348, 0.11775907046567358, 0.14239048909158047, 0.13526337584192938, 0.12674480401629296, 0.1093419134377458, 0.13376458904648114, 0.11396499866044285, 0.14146031257835712, 0.15614882539003772, 0.1086489531301098, 0.09436631621455926, 0.1469858585270093, 0.16412411045382613, 0.16423795890681936, 0.16576534171499058, 0.17085157580149224, 0.18018505718354294, 0.1712433850386036, 0.17747855490257247, 0.16559174219734052, 0.1790582830207379, 0.17835031417624037, 0.19472725114561906, 0.1689692995017631, 0.035057070868191875, 0.04511549492490918, 0.031393493129599714, 0.032063423926058876, 0.051331899615396415, 0.05018260306194988, 0.0412137097218116, 0.03803354422653826, 0.04067150513512585]}, "mutation_prompt": null}
{"id": "57b43728-694f-44ad-8f8f-b479a8b4de11", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined_PopSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            crossover_prob = np.random.uniform(0, 1, size=self.dim) < CR\n            mutant = np.where(crossover_prob, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            diversity = np.std([func(x) for x in population])\n            dynamic_pop_size = max(5, min(30, int(10 + 4 * diversity)))\n            for x in population[:dynamic_pop_size]:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined_PopSize", "description": "Introducing a dynamic population size adaptation mechanism based on individual performance diversity to enhance exploration and exploitation.", "configspace": "", "generation": 12, "fitness": 0.0832134666655622, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined_PopSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.11.", "error": "", "parent_id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "metadata": {"aucs": [0.11869729595922507, 0.10523214061239683, 0.1093650042973352, 0.1289335263229685, 0.14425610271921763, 0.14265416676466924, 0.13619145529481158, 0.12484325328506052, 0.12223355505457079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04382992090111859, 0.03260408565024375, 0.016684702842367893, 0.04489512497962678, 0.021040220188185965, 0.03134682180571291, 0.018809660226200342, 0.01809392278060007, 0.016051262156008717, 0.013748680641048172, 0.04442295556451281, 0.04049179247755441, 0.01959972157639278, 0.026622448338200932, 0.011096792644812892, 0.014763392921912755, 0.005528046777406925, 0.004114678889431733, 0.7339590752034428, 0.13141612737473862, 0.1234300653595819, 0.14374747377567398, 0.639709273465884, 0.1184984099531744, 0.8002094611099191, 0.7653083197157977, 0.17042010967791443, 0.06284481043601464, 0.05902603661274297, 0.0458598106831849, 0.07817767848072965, 0.04625296417438529, 0.024916493651611193, 0.02701237158778802, 0.11002266099631275, 0.039014394583929746, 0.10027683525177622, 0.08224659834595494, 0.08905118922313904, 0.08212994048180156, 0.11189864718038878, 0.09420870741303622, 0.0864125828815, 0.07284887583726707, 0.08721135625391474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05023791697923863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002677201561229081, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015844180698037835, 0.02467971445687922, 0.025355926109144056, 0.012279932046646014, 0.016771980567621747, 0.018426295416497873, 0.0224301945914398, 0.010519141563774648, 0.0334668659504439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14698981979656178, 0.1601925079614379, 0.25062152204360977, 0.12195361912625069, 0.15124286315549107, 0.16354260851554758, 0.1611760221085331, 0.1408566301047387, 0.14141375290018987, 0.023327990288552813, 0.03876104982888007, 0.03329979928578164, 0.03439567366889895, 0.02267898765391385, 0.038790289911397435, 0.028152105093202096, 0.02159306447649556, 0.027032698490446982, 0.14296711371388815, 0.13709018015643415, 0.14339517532155532, 0.1388969713978162, 0.13510093816567403, 0.2008657842778584, 0.1353643680502199, 0.12088953887310383, 0.13991688255280932, 0.11703833376452477, 0.13527543057822478, 0.1613932299901244, 0.15305669019612, 0.14409419060837936, 0.13519951729798707, 0.1610403620683346, 0.17377774300845283, 0.1735092658400259, 0.06917008674199354, 0.0848101116804677, 0.0942348635776622, 0.09079336807232286, 0.07991626847739985, 0.07882682370434724, 0.0854850773450282, 0.0997711199450243, 0.08812621737532012, 0.12838678343829657, 0.14873085084575155, 0.13345086981233123, 0.12220628399753697, 0.11565197543559147, 0.13023965088659695, 0.13245342544607175, 0.13193227913894112, 0.15689789044837343, 0.08352801883296812, 0.11828226647520335, 0.13581933462011564, 0.14914096659158915, 0.02281364838663502, 0.011393842001023557, 0.1144413362394614, 0.1158350313585712, 0.04868718539555228, 0.10161491932883804, 0.1925824028176295, 0.14273055078617514, 0.10774080083749193, 0.15887059961322225, 0.11388429262252397, 0.13446580097243366, 0.10921023551024667, 0.1515976166329145, 0.11040265245322212, 0.10363478854778718, 0.117758563365709, 0.16936715919164302, 0.09201534099871644, 0.1282509274187278, 0.10571690067720407, 0.0963610437353909, 0.10272271943986289, 0.1772330862423993, 0.18205666033379597, 0.16668386004921665, 0.16721589663821468, 0.16494932660839057, 0.16584995272774872, 0.1809718913597681, 0.1622122350943639, 0.17301489537238923, 0.028038908199532475, 0.02943536699764404, 0.043237015963306646, 0.03648760793305683, 0.03425093938292756, 0.05002954523395531, 0.02611851120316644, 0.06077216928593565, 0.040554968320095974]}, "mutation_prompt": null}
{"id": "e5692a69-2ad1-40a0-802a-6ef4d3097f96", "solution": "import numpy as np\n\nclass Dynamic_PopSize_Adaptive_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            crossover_prob = np.random.uniform(0, 1, size=self.dim) < CR\n            mutant = np.where(crossover_prob, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def diversity_based_population_adaptation(pop, fitness):\n            diversity = np.mean(np.std(pop, axis=0))\n            pop_size = int(10 * self.dim * (1 + diversity))\n            return pop_size\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            pop_size = diversity_based_population_adaptation(population, [func(x) for x in population])\n            for x in population:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Dynamic_PopSize_Adaptive_DE_SA_Optimizer_Refined", "description": "Introducing a dynamic population size adaptation mechanism based on fitness diversity to enhance exploration capabilities.", "configspace": "", "generation": 13, "fitness": 0.08233268085240511, "feedback": "The algorithm Dynamic_PopSize_Adaptive_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.10.", "error": "", "parent_id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "metadata": {"aucs": [0.14634681720624798, 0.1367182746060891, 0.09537525763248011, 0.15322534781843478, 0.1273876546631857, 0.13074276609321245, 0.13169294069809745, 0.13235120831469194, 0.12758877791167267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04382992090111859, 0.02220942052905761, 0.030229404648198344, 0.033239216171060626, 0.023271419162880558, 0.03240560792868674, 0.021551285005131704, 0.04456710641178474, 0.018696888705511117, 0.014592761064005422, 0.0070725824425222905, 0.018822968690380915, 0.02663014909258854, 0.01984079951283435, 0.0050296931256843536, 0.014763392921912755, 0.011423421040424375, 0.004935286823780971, 0.21038208814364312, 0.44615646541238985, 0.7285863601856668, 0.49482455421564586, 0.1658852350052945, 0.6234770684326827, 0.23158473487335374, 0.3744477729787209, 0.4704757770526852, 0.06274794416174423, 0.06617156788614209, 0.04962950212256456, 0.014508133689883684, 0.03793385662158455, 0.045201626476814805, 0.041479049449335226, 0.05666894764632702, 0.03855621470214132, 0.10027683525177622, 0.08224659834595494, 0.09246191467433695, 0.071607034597989, 0.07318632504577072, 0.06367111038811346, 0.09186427290916599, 0.09625640950107806, 0.07314188928556065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00026167348190431206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010091227916465328, 0.006862913367082002, 0.011325966055365067, 0.006143007222292329, 0.005121655651484036, 0.03795387111039783, 0.03156094511923546, 0.026988992403726875, 0.022483141373615956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16167562967155313, 0.15756555760738078, 0.15694651955675776, 0.14772757835104822, 0.15661581285535997, 0.14838259993101988, 0.1665746942195968, 0.13369968717896719, 0.1515304105639701, 0.04452027369273359, 0.018722034143673905, 0.0387313875253088, 0.05534856443338754, 0.029695441297782454, 0.02017589639417039, 0.04955266842809247, 0.019210828992357376, 0.0267656688986897, 0.14296711371388815, 0.15029388470645977, 0.12381578170624707, 0.1252625405829938, 0.13228314774978467, 0.2008657842778584, 0.11421424373326228, 0.12000553762274979, 0.11896565594716979, 0.1264307124258297, 0.12959055627995242, 0.1613932299901244, 0.1396541504786979, 0.1353922488767958, 0.13489630734001135, 0.16305160741496327, 0.17377774300845283, 0.1735092658400259, 0.07271965692494864, 0.0783274045711525, 0.09332540035305759, 0.06823515206877051, 0.07833438135037218, 0.08597709187039437, 0.0837317855149382, 0.0997711199450243, 0.07732365364342664, 0.12794926929902506, 0.11472654550265182, 0.13860151769293239, 0.13191937317905345, 0.13004800057706467, 0.12716140343576243, 0.14359709406607257, 0.1218662792187919, 0.12701632502735682, 0.09973086242777573, 0.040518574216699355, 0.12597454142240494, 0.14914096659158915, 0.1009635378895054, 9.999999999998899e-05, 0.14357170157535604, 0.08244193029474789, 9.999999999998899e-05, 0.1065947237333339, 0.11998549085856469, 0.11359265437050015, 0.11712837090699757, 0.14191874020898865, 0.13069631493367817, 0.1248668488536947, 0.10842401990230277, 0.12472164581415435, 0.11373602667127891, 0.13752937504763518, 0.15330682465881273, 0.10781557714018186, 0.09269594101546863, 0.1397223960886098, 0.16299336156440825, 0.16262710286180282, 0.16334602358439987, 0.16898953445502152, 0.17681049477597643, 0.17044169162989797, 0.17551604828587009, 0.16407066896615286, 0.17745568936829892, 0.1729004071072897, 0.19317760813870022, 0.16843485758391785, 0.03207690768741844, 0.04449868128400247, 0.031393493129599714, 0.03194497820130948, 0.05105403994346669, 0.05002954523395531, 0.03972708159157268, 0.03803354422653826, 0.040554968320095974]}, "mutation_prompt": null}
{"id": "85afac4b-b596-4fd4-a338-2456620e958f", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            crossover_prob = np.random.uniform(0, 1, size=self.dim) < CR\n            mutant = np.where(crossover_prob, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Refining the parameter adaptation by introducing a new crossover strategy for enhanced exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "metadata": {"aucs": [0.14648900336919746, 0.1370033260548209, 0.09635086553839811, 0.1566320807380427, 0.13128223168177477, 0.1322022148648453, 0.1340737868424705, 0.13324719246240424, 0.1341685257086065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04405282891077966, 0.023614317746173175, 0.03208184322012153, 0.03421873481869697, 0.02430278875645797, 0.032917675756017895, 0.021724082364410924, 0.04500171133112996, 0.019952263817630933, 0.015229522161281928, 0.009005574286056972, 0.01941465420166022, 0.02699296305289789, 0.02004432979705728, 0.005987556796436921, 0.014763392921912755, 0.01226273396646771, 0.006521985838117916, 0.21550293103577067, 0.5392532155199048, 0.7747450758666605, 0.5804065725149508, 0.1734838679829812, 0.6872704150883763, 0.3611470087448312, 0.4804666855001902, 0.5601418519541941, 0.06274794416174423, 0.06726862207775708, 0.05181363076876644, 0.016190897072419275, 0.04023295151970685, 0.046214693332950585, 0.04224661157760601, 0.05790589157245907, 0.039407447385854, 0.10027683525177622, 0.08224659834595494, 0.09415990395966145, 0.07242806066488972, 0.07393209307652637, 0.06446340918523819, 0.09332844084050607, 0.09664194477052479, 0.07564938643797037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002951864227310752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01444056593788845, 0.007989402953995528, 0.014076242396011351, 0.007246910951473007, 0.006048821843747332, 0.04163696747261747, 0.03411874553543348, 0.029926573897558817, 0.025444919078311035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16334580866586768, 0.15756555760738078, 0.1578083200680248, 0.1491937570306785, 0.1597696764568256, 0.1557031144181863, 0.16872479286368236, 0.13565211193018967, 0.15232903490428928, 0.04653110251196246, 0.019155566258047485, 0.03898639498821688, 0.05601101631679595, 0.030687375028438657, 0.020927483201879316, 0.05142228974387164, 0.022449532195915167, 0.0267656688986897, 0.1456581455845719, 0.15568221382965075, 0.12579536303290884, 0.12864951888660558, 0.1335700076194667, 0.20133975166279272, 0.11921372188687696, 0.12167233280654677, 0.12061590929738286, 0.127810881364387, 0.13150952478197575, 0.1613932299901244, 0.1398293226957661, 0.1380910802330283, 0.1358752278298896, 0.1638014715050804, 0.17377774300845283, 0.17381322234974228, 0.07812837532465289, 0.07977099487901285, 0.09365919502244147, 0.07097476468476072, 0.08143754617015242, 0.08738387408908943, 0.08468560000428227, 0.0997711199450243, 0.0794255926656402, 0.13224613768739524, 0.11608326023585636, 0.1415218766340255, 0.13469016306259451, 0.13095940443536236, 0.12827679718099683, 0.14709528970016128, 0.12464425681916202, 0.1309122589996079, 0.106633374720147, 0.045181999624902214, 0.12877330832451572, 0.14990332447696897, 0.10873081740266932, 9.999999999998899e-05, 0.14508719435633322, 0.09365600220985093, 0.012297250758995015, 0.10783886123333053, 0.12373368279408392, 0.12069792426250348, 0.11775907046567358, 0.14239048909158047, 0.13526337584192938, 0.12674480401629296, 0.1093419134377458, 0.13376458904648114, 0.11396499866044285, 0.14146031257835712, 0.15614882539003772, 0.1086489531301098, 0.09436631621455926, 0.1469858585270093, 0.16412411045382613, 0.16423795890681936, 0.16576534171499058, 0.17085157580149224, 0.18018505718354294, 0.1712433850386036, 0.17747855490257247, 0.16559174219734052, 0.1790582830207379, 0.17835031417624037, 0.19472725114561906, 0.1689692995017631, 0.035057070868191875, 0.04511549492490918, 0.031393493129599714, 0.032063423926058876, 0.051331899615396415, 0.05018260306194988, 0.0412137097218116, 0.03803354422653826, 0.04067150513512585]}, "mutation_prompt": null}
{"id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 15, "fitness": 0.08711177606024124, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "a8dd1d32-807b-41e7-bea9-1013bff4816f", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "b6dbb61a-ad4f-4101-a3e8-e8a20023f41e", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "985af8be-8604-4c88-9daf-bd655e749b8e", "solution": "import numpy as np\n\nclass Elitist_Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population)]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(x):\n                    x = trial_x\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Elitist_Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the diversity maintenance by introducing an elitism strategy to preserve the best individual across generations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 33, 67, '        best_x = population[np.argmin([func(x) for x in population)]')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 33, 67, '        best_x = population[np.argmin([func(x) for x in population)]'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "8546b05a-3419-497d-851e-eb852d80e6bc", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "db73c9bc-fecf-43bf-a086-a6d310039b0f", "solution": "class Dynamic_Popsize_Adjusted_DE_SA_Optimizer_Refined(Enhanced_DE_SA_Optimizer_Refined):\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n        performance_threshold = 0.1\n\n        def adapt_population_size(pop_size, performance, threshold=0.1):\n            if performance < threshold:\n                return int(pop_size * 1.2)  # Increase population size by 20%\n            else:\n                return pop_size\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])\n\n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            pop_size = adapt_population_size(pop_size, func(best_x))\n            population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n\n        return best_x", "name": "Dynamic_Popsize_Adjusted_DE_SA_Optimizer_Refined", "description": "Introducing a dynamic population size adjustment mechanism based on the algorithm performance to improve convergence rate.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 36, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 36, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "fd495a03-6e8c-4453-8824-bb369cf71bf2", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "31ed75c1-d020-4f2c-8669-4d929b958f5c", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "46577bc9-5196-40e5-830b-3b0cd7d40665", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "e6d18330-aea5-4133-84c4-f79cb3215fee", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def dynamic_population_resizing(population, best_x):\n            fitness_vals = np.array([func(x) for x in population])\n            diversity = np.mean(np.std(population, axis=0))\n            avg_fitness = np.mean(fitness_vals)\n            best_idx = np.argmin(fitness_vals)\n            if np.std(fitness_vals) < 0.1:\n                pop_size = int(pop_size * 1.2)  # Increasing population size for diversity\n                new_population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n                new_population[:len(population)] = population\n                return new_population\n            else:\n                return population\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            population = dynamic_population_resizing(population, best_x)\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Improving diversity maintenance by introducing a dynamic population resizing strategy based on fitness diversity.", "configspace": "", "generation": 23, "fitness": 0.08379501472518253, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.24887285532774872, 0.1803594775934424, 0.1884288228505797, 0.1820494006343878, 0.1962528340215367, 0.18890429568025568, 0.1806871541252787, 0.18935536416547505, 0.17021765096479669, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034060406847852165, 0.04130698534353927, 0.04219350989083437, 0.04744123261635247, 0.03505630999822862, 0.04823295005171768, 0.04503357997699042, 0.04782302194163912, 0.050326922401048746, 0.020441900339512875, 0.03260749422315201, 0.0340094005356939, 0.029578433507744695, 0.030893374063504786, 0.028042677087341095, 0.029318770776946446, 0.022461500045926508, 0.03391890606179715, 0.10895222206769195, 0.09235590287576378, 0.09046222371071422, 0.09701193653578088, 0.10413939956476825, 0.11068146527644207, 0.09189758312980723, 0.11258014600520982, 0.10982697941147912, 0.0801559485340968, 0.058714334302961135, 0.050246834455255907, 0.08613626921169448, 0.05879966455331109, 0.051393374805990266, 0.05593581662367053, 0.06560959435570968, 0.06903558504646046, 0.10423912863395923, 0.19675452783150948, 0.0926813699037119, 0.1120349445488813, 0.09946844725743198, 0.13289710859105985, 0.11144177101556252, 0.13136512831638758, 0.17902523935270054, 0.0033298901284466442, 9.999999999998899e-05, 0.00490402888954955, 9.999999999998899e-05, 0.00774030881295551, 0.014269746859331245, 0.027871910372274544, 9.999999999998899e-05, 0.0019965297509848545, 0.005645900104974344, 0.006102190280991793, 0.006896218553980149, 0.004635610523586187, 0.013202585380425957, 0.017845127763066237, 0.020417347974631572, 0.0031985804466104772, 0.00012663272237989354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05695312362668992, 0.03352776711106775, 0.012093461783546311, 0.029045459186442746, 0.014148289271150083, 0.04629193628763273, 0.042331294262524355, 0.03512567641307629, 0.00815797424907816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014555618830154327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003045022010830234, 0.005568949565320169, 9.999999999998899e-05, 9.999999999998899e-05, 0.004207024776042845, 0.17857238445995316, 0.1820939175363977, 0.1980782812208437, 0.17868037925650482, 0.16909713172825447, 0.16627734056818977, 0.2074408987150177, 0.16533673108898728, 0.20851641045900138, 0.020383466484017343, 0.0336277576091748, 0.04581839832004175, 0.04568178279414259, 0.028607904858463873, 0.039124803180975, 0.03425154495703231, 0.03389052645839197, 0.0436000333958011, 0.10852312789003049, 0.11899231588162129, 0.12266851660791367, 0.11843325153194306, 0.13878847486604884, 0.1477652217021712, 0.12560947854743187, 0.11627138866154696, 0.11034142931983082, 0.1435108661282296, 0.14517971120746498, 0.1613932299901244, 0.1478824591599106, 0.15405223827169234, 0.15532809644828016, 0.14259272730676897, 0.19213797302966684, 0.1486060323415842, 0.11488641166707114, 0.08404354517506252, 0.11342441400211423, 0.09394178732973046, 0.08597206675205726, 0.11487129782358751, 0.10950684083127615, 0.1432183240641005, 0.10130543332279163, 0.170187449749874, 0.14484716746082993, 0.14114243328202158, 0.15087064511837034, 0.14284003707774195, 0.13960321262022846, 0.14011523871256482, 0.13945479578169961, 0.14227133276556048, 0.155697396969932, 0.13416855888244694, 0.13141492217358153, 0.13668095968088323, 0.14567331189991672, 0.14288171077480916, 0.11261290466648066, 0.1466075112342602, 0.13482926494445457, 0.15077924214714056, 0.17296580168427822, 0.1561340241645075, 0.1574739343931455, 0.14279181133929375, 0.13728678477252576, 0.159503838042514, 0.13566062621440433, 0.15293395442361746, 0.22709529011620289, 0.24214458940299077, 0.10803386752746791, 0.1076287991522078, 0.13611864355216785, 0.12308894779223212, 0.13121297344929683, 0.13300102641844846, 0.12394001819999267, 0.17245287034325396, 0.16329553134490793, 0.16285168131088557, 0.16745724418925634, 0.18932335146439017, 0.1580224824876253, 0.1820005811987131, 0.14915771529065747, 0.16631701529848375, 0.04131249672553039, 0.04783475124175951, 0.04526630635385098, 0.044931026005182284, 0.051456096519730266, 0.052746037253204814, 0.06567093844554017, 0.0428874362825733, 0.04610843317235436]}, "mutation_prompt": null}
{"id": "bb8888f1-ec3c-4c4e-9f63-38c93b66a295", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "98142e90-56be-462c-a3b8-a6ff1e5d5040", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "8ec60322-c9d5-496f-a976-316fad4a3469", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "6ee68ca2-3ccd-44f4-bdfc-f855bd0342fd", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "a92ebaf0-f5d0-4d1c-b85f-3dceae77c2fd", "solution": "import numpy as np\n\nclass Dynamic_Population_Adjustment_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])\n\n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            pop_size = int(10 * self.dim * np.sin(0.1 * _))  # Dynamic population size adjustment\n            for x in population[:pop_size]:  # Only iterate over the first pop_size individuals\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population[:pop_size] = np.array(new_population)\n\n        return best_x", "name": "Dynamic_Population_Adjustment_Optimizer", "description": "Introducing a dynamic population size adjustment strategy to enhance diversity and exploration capabilities.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "154b5df2-7444-43be-a141-63df03448eb5", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "7ea3c09f-985a-4a93-89aa-32abb58733f4", "solution": "import numpy as np\n\nclass Dynamic_Population_Size_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            # Introduce dynamic population size adjustment based on convergence rate\n            if np.random.rand() < 0.1:  # Adjust population size with 10% probability\n                pop_size = int(pop_size * 1.1)  # Increase population size by 10%\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, size=(pop_size - len(population), self.dim)))\n            population = np.array(new_population)\n        \n        return best_x", "name": "Dynamic_Population_Size_DE_SA_Optimizer_Refined", "description": "Introducing a dynamic population size strategy to adjust the population based on the convergence rate, enhancing diversity and convergence speed.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 48, 13, '            population = np.array(new_population)\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 48, 13, '            population = np.array(new_population)\\n'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "ace3bac8-b3c7-4969-acd1-9cd6e36ae7a3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "583388d5-f4a2-4b71-abf9-b35cfe68f8b6", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "6a0aceee-41c5-4b9f-a7b9-d69555fd0659", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "f1c205f4-596f-4f93-a5e1-345a917e17b3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        # Revised code snippet - dynamic population size adjustment based on fitness diversity\n        def adjust_population_size(population, pop_size):\n            fitness_values = [func(x) for x in population]\n            fitness_std = np.std(fitness_values)\n            diversity_ratio = 1.0 / (1.0 + fitness_std)  # Fitness-based diversity\n            new_pop_size = int(pop_size * diversity_ratio)  # Adjust population size\n            return new_pop_size if new_pop_size > 2 else 2  # Ensure at least 2 individuals\n\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population)]\n        \n        for _ in range(self.budget):\n            pop_size = adjust_population_size(population, pop_size)  # Dynamic adjustment\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n            \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Incorporating a dynamic population size adjustment mechanism based on fitness diversity to enhance exploration and exploitation balance.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 41, 67, '        best_x = population[np.argmin([func(x) for x in population)]')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 41, 67, '        best_x = population[np.argmin([func(x) for x in population)]'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "1a44995c-c524-4ae7-9807-d49ced918d48", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        # Dynamic population size adaptation based on fitness diversity\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            \n            # Update population size based on fitness diversity\n            if _ % 10 == 0:\n                fitness_values = [func(x) for x in population]\n                diversity_threshold = np.percentile(fitness_values, 25)\n                if np.sum(np.array(fitness_values) < diversity_threshold) > pop_size // 2:\n                    pop_size = int(pop_size * 1.1)\n                else:\n                    pop_size = int(pop_size * 0.9)\n                population = np.vstack([population, np.random.uniform(-5.0, 5.0, size=(pop_size - len(population), self.dim)])\n            \n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x\n", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Improving population diversity by introducing a dynamic population size adaptation mechanism based on fitness diversity.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 36, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 36, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "f0565ccc-b4f2-4904-aa96-5dd8c80dd5d4", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "7efd4221-0324-43d5-9940-5f1650cc1bbf", "solution": "import numpy as np\n\nclass Enhanced_Opposition_DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def opposition_based_learning(x):\n            return -1 * x\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                trial_x_opposite = opposition_based_learning(trial_x)\n                new_population.extend([trial_x, trial_x_opposite])\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)[:pop_size]\n        \n        return best_x", "name": "Enhanced_Opposition_DE_SA_Optimizer", "description": "Improving the diversity maintenance mechanism by integrating opposition-based learning to enhance exploration in the optimization process.", "configspace": "", "generation": 37, "fitness": 0.07803143050557754, "feedback": "The algorithm Enhanced_Opposition_DE_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.19182255874130993, 0.15798447351467515, 0.1655456036590569, 0.11429157761894204, 0.1307043497497714, 0.1601905590521565, 0.11030106769477044, 0.1493151074646195, 0.1120060772445155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021268044729337077, 0.018747033168376892, 0.03483642335742043, 0.04696109890605804, 0.023526723014616113, 0.04749914820702583, 0.025681003660449453, 0.024427356091400343, 0.037919594862186545, 0.033635645112153, 0.005883705612298451, 0.018093751471558228, 0.028030525118603156, 0.009151232510081764, 0.025097413502154997, 0.017395155852832245, 9.999999999998899e-05, 0.03077857294545905, 0.3775137686237081, 0.05353689570848652, 0.0990243103823486, 0.0642475106190139, 0.08814576839283494, 0.07001338920483702, 0.0638860334912611, 0.07333667662654864, 0.06876185431899651, 0.08609127058992905, 0.02206616832019881, 9.999999999998899e-05, 0.02377708839033099, 0.10900054839429285, 0.049624958306986655, 0.04104390410506764, 0.011293333694524565, 0.053762163186185874, 0.13268503241518703, 0.09002174969829013, 0.10100006392963679, 0.15692995940663645, 0.07285119553694963, 0.04505014400941676, 0.12734674265150714, 0.08078202548855373, 0.05583168823686824, 0.005392959513139783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006415293013282697, 0.014659715056759004, 0.05884246145306893, 0.07547826987061401, 9.999999999998899e-05, 0.005787791310314816, 0.00015915444544534196, 9.999999999998899e-05, 0.004360655662437596, 0.04979500802125203, 0.02046094588251257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06240213408899331, 9.999999999998899e-05, 0.036006465060199444, 0.018976760962020278, 0.012279905012351211, 0.018589645051130033, 0.06292324642095881, 0.01306724991250463, 0.041410665558474835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010913452798522516, 0.00741470858048765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17696547365647297, 0.16200795336165552, 0.18436362126691475, 0.16047867018730955, 0.13179358888286585, 0.1422356276996195, 0.23402783092549106, 0.14364549172000463, 0.17489042683264122, 0.028101423896654154, 0.029546404767584633, 0.028727495891453736, 0.0357952241274595, 0.03292274692776376, 0.03495287417545656, 0.023645116575341074, 0.04685836105446817, 0.03148339903933106, 0.11387744203301486, 0.13280157850328833, 0.1254353761177215, 0.11858018099962608, 0.1274526894248369, 0.12533373988886853, 0.12227075335903015, 0.1117327344539506, 0.1492578422384333, 0.17115527930516072, 0.12842969915291558, 0.1613932299901244, 0.16354084850615258, 0.1286313136646059, 0.14700053041714634, 0.1388639972468858, 0.17377774300845283, 0.154341759460635, 0.14516700736054333, 0.07373297185613537, 0.10393286813348901, 0.12327411793497411, 0.08854208944997932, 0.13336631265938526, 0.11131567272169507, 0.0997711199450243, 0.08528430065220982, 0.1755106068724137, 0.14626951687815404, 0.15704467055131377, 0.17670592144430575, 0.1214146925552324, 0.15082555092668448, 0.1754882377670689, 0.12187561043423067, 0.160531342072475, 0.1515347678809228, 0.12074533510982655, 0.13873573877074563, 0.13236363145366437, 0.147716979907914, 0.1291555311456858, 0.1465521131295454, 0.0907023639427269, 0.12084926770917315, 0.14848294189377864, 0.10921725997392318, 0.14972970641450634, 0.12533480799514618, 0.16332436982713283, 0.16496240410981133, 0.1318034109414259, 0.16170416531060616, 0.1024702030064496, 0.22769279466132786, 0.10267165755511809, 0.09331984959829953, 0.16760177915632468, 0.10867842650955428, 0.1347379003844299, 0.10345910401724834, 0.17640298090942885, 0.14330081360189018, 0.1715104803069617, 0.17617808267125823, 0.17093938048962332, 0.1770495412921862, 0.18350042464433902, 0.1809879280274117, 0.16362236866640978, 0.18753155478153694, 0.16997662158210058, 0.05766696121719328, 0.04474895257768563, 0.04987162792509514, 0.047195284618934186, 0.04182396150612744, 0.05291520704380659, 0.06165012922791635, 0.04071220505036521, 0.04873235941964271]}, "mutation_prompt": null}
{"id": "c7eba748-ce7e-4aa2-b2a9-eedba5c1f0c4", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "0d6ae807-92a1-40e0-905a-fcc7b1c80763", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "19c04595-ca79-413c-b25b-4794a7d8f4b3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "aefc48c7-adf6-4a88-935b-5542631694c2", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "f6c28389-acff-4279-afa8-0729aacad5bb", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crowding_distance_selection(population, func_values, n_select):\n            distances = np.zeros(len(population))\n            for i in range(self.dim):\n                idx_sorted = np.argsort(func_values)\n                distances[idx_sorted[0]] = distances[idx_sorted[-1]] = np.inf\n                for j in range(1, len(population) - 1):\n                    distances[idx_sorted[j]] += func_values[idx_sorted[j + 1]] - func_values[idx_sorted[j - 1]]\n                selected_idx = idx_sorted[distances.argsort()[:n_select]]\n            return population[selected_idx]\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n\n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = crowding_distance_selection(np.array(new_population), np.array([func(x) for x in new_population]), pop_size)\n\n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the diversity maintenance by introducing a novel crowding distance-based selection mechanism to promote exploration.", "configspace": "", "generation": 42, "fitness": 0.08323455406046062, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.1802259890228174, 0.20851726836321371, 0.17794052085687506, 0.15419651784452182, 0.15748336317118306, 0.18738446213805393, 0.16759382812781076, 0.22933064752949328, 0.16879620299942266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0346318272156646, 0.04075907679852275, 0.03569510298298095, 0.03918556680473617, 0.04929386166240146, 0.04494034626720311, 0.03271081139741816, 0.044999653208163015, 0.0527550203294892, 0.02883533354142842, 0.05034396317433398, 0.03960646788352695, 0.04409211902672816, 0.024945467192900694, 0.04006838563326287, 0.026340711075167, 0.01977054894884711, 0.020934639983965497, 0.08809607102942518, 0.09020427481114424, 0.09671118577936211, 0.10243210115944534, 0.09700440047289283, 0.11499030682626943, 0.10659572828190844, 0.10034328362496014, 0.12691242420050053, 0.10926635275585417, 0.0723183790999492, 0.0867392204635975, 0.08588478239060715, 0.08310485429756753, 0.0690484444681404, 0.0440688481398962, 0.05475097413777241, 0.08046855285926302, 0.143616767259792, 0.12466266959144601, 0.09939116531874137, 0.11569249658653713, 0.13344533235434952, 0.12837994036505007, 0.12381416880197249, 0.11285531637072366, 0.13446639210014377, 9.999999999998899e-05, 9.999999999998899e-05, 0.02216533327367798, 9.999999999998899e-05, 9.999999999998899e-05, 0.00413433533494445, 0.005292947131281478, 9.999999999998899e-05, 0.013550907141778201, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003229785336008595, 0.010199751360170706, 0.031253492604718325, 0.008689444525032397, 0.008858071074983265, 0.007855791321352834, 0.03209522370614126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02867053523674279, 0.024595412115728355, 0.026793391303930547, 0.019612835826021024, 0.013186154704303177, 0.03738992095342619, 0.02252526576139735, 0.02402057597102225, 0.0371175569901776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003028907844956352, 9.999999999998899e-05, 0.0005397383600720396, 9.999999999998899e-05, 9.999999999998899e-05, 0.00026613004814501906, 9.999999999998899e-05, 0.008152474142345989, 0.194837137278708, 0.1728081262972393, 0.2298467914854988, 0.17365208789992226, 0.1381029541997999, 0.16399918370900046, 0.21290525699797136, 0.15542211269128725, 0.18561876172154146, 0.01764994310647383, 0.03555836741489127, 0.03762978395352112, 0.06419241467070647, 0.043444223415474825, 0.043140532143375654, 0.05486532243700182, 0.06043849757255537, 0.04675637947682221, 0.12285043515514604, 0.15092059025604143, 0.13118180607645757, 0.12506060450327772, 0.12397745540295946, 0.1403682227436388, 0.13506857160137464, 0.10119808412326126, 0.11412872221181936, 0.16112060643935033, 0.1672285497301882, 0.17315939992584994, 0.1605417659501418, 0.16248131349321648, 0.1623969492232079, 0.1534653919989376, 0.17482597533018251, 0.14227225690598788, 0.09283485759680665, 0.07938944624408051, 0.12327621429638547, 0.12143196679679635, 0.11404811961057826, 0.10962781551920653, 0.09783532062835565, 0.11862173056704506, 0.09561108067420354, 0.16672884357167717, 0.1405769313714107, 0.1427003783018106, 0.1520871624307638, 0.14987776131485153, 0.1409690771104979, 0.14758868875483733, 0.13890580043576306, 0.1519080166609409, 0.11077873354731804, 0.09757927814425349, 0.12953819428993774, 0.13890575803418614, 0.14899873512767514, 0.09317473430635781, 0.14844889800116945, 0.14548757212402108, 0.11324644981585041, 0.13959975763685428, 0.1541682865597962, 0.1501907862204167, 0.13397760337118814, 0.16808840072436992, 0.14940418627384766, 0.13692076849190693, 0.13558771761839905, 0.1319748033471464, 0.22769279466132786, 0.1332293700943259, 0.10134509090073074, 0.14574276861432733, 0.13464577254705068, 0.15786864034655101, 0.08997693529996942, 0.12721610945028095, 0.12498674286367517, 0.17350202564043815, 0.1723318691556498, 0.171670912008967, 0.18938401478656375, 0.16751031669859562, 0.17618216303415835, 0.1669683649140239, 0.1641071509561467, 0.17430963126868826, 0.030479068013399724, 0.03564171276507788, 0.04428346288592766, 0.062244049362538134, 0.0478618151218867, 0.053787598887262145, 0.06171615334015301, 0.04162002133566678, 0.041021374109640796]}, "mutation_prompt": null}
{"id": "369895e7-77d9-47ca-ad59-8e9e5f79113c", "solution": "import numpy as np\n\nclass Dynamic_PopSize_Adaptive_DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            if _ % 50 == 0 and _ > 0:  # Dynamic population size adjustment\n                pop_size = int(pop_size / 2) if pop_size > 5 else 5\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim)))\n                best_x = population[np.argmin([func(x) for x in population])]\n            \n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Dynamic_PopSize_Adaptive_DE_SA_Optimizer", "description": "Introducing a dynamic population size adjustment mechanism during optimization to enhance exploration and exploitation trade-off.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 41, 17, '                best_x = population[np.argmin([func(x) for x in population])]\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 41, 17, '                best_x = population[np.argmin([func(x) for x in population])]\\n'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "ec686354-5785-4cf4-9940-05d497f27a2e", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "b699275b-f018-474d-9c71-acb0a4da3af6", "solution": "import numpy as np\n\nclass Dynamic_Adaptation_DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def dynamic_adaptive_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = dynamic_adaptive_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Dynamic_Adaptation_DE_SA_Optimizer", "description": "Improving exploration and exploitation balance by incorporating a dynamic adaptation mechanism for the mutation strategies.", "configspace": "", "generation": 45, "fitness": 0.08711177606024124, "feedback": "The algorithm Dynamic_Adaptation_DE_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "d9a40a9a-8c95-4d35-b772-1ad0a41c8f0f", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "c0fc3f2a-e7fd-4d10-8ef7-3939245a66d9", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "182cc30f-d907-42e8-8643-1963b36434bb", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "6baa63b4-4acd-42a2-95a3-d66c7b4b86d1", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "51401cd3-837f-437f-8fca-c5b821f0d5aa", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "86cb9252-60bf-4a05-b935-0beb5100ae46", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "4a7d36f6-6929-45a8-a6e9-dc1e55db0621", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "3272a0b2-7999-4604-b8d2-de639f0d7851", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "c4d785e7-f866-42c0-ae37-caefe7c06100", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "8259fbd9-b776-4050-9956-b13f1ce04cfa", "solution": "import numpy as np\n\nclass Improved_Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def crowding_distance(population):\n            distances = np.zeros(len(population))\n            sorted_indices = np.argsort([func(x) for x in population])\n            distances[sorted_indices[0]] = distances[sorted_indices[-1]] = np.inf\n            for i in range(1, len(population) - 1):\n                distances[sorted_indices[i]] += np.linalg.norm(population[sorted_indices[i + 1]] - population[sorted_indices[i - 1]])\n            return distances\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population)]\n\n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n\n            crowding_distances = crowding_distance(population)\n            selected_indices = np.argsort(crowding_distances)[:pop_size]\n            population = population[selected_indices]\n\n        return best_x", "name": "Improved_Enhanced_DE_SA_Optimizer_Refined", "description": "Improving the diversity maintenance by adding a crowding distance calculation to guide the selection process.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 41, 67, '        best_x = population[np.argmin([func(x) for x in population)]')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 41, 67, '        best_x = population[np.argmin([func(x) for x in population)]'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "35378c25-6f7b-43d9-9f14-dc5bd1133bd7", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "3c051197-1210-4a8b-bf4f-8084933eea0f", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "197e08c1-3f0b-4694-9e4c-10e1121489f5", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "6809d6bb-74d3-4c1b-9915-744866845068", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "ffaf512c-070d-4f1b-bc03-6bc532da5176", "solution": "import numpy as np\n\nclass Improved_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def levy_flight_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            levy = 0.01 * np.random.standard_t(1, size=self.dim)  # Levy flight step\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < 1 / (1 + np.abs(levy)), a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = levy_flight_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Improved_DE_SA_Optimizer_Refined", "description": "Improving the search diversity by introducing a novel mutation operator based on Levy flights to explore the solution space more efficiently.", "configspace": "", "generation": 60, "fitness": 0.08125456865209581, "feedback": "The algorithm Improved_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.10.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.12751573918124637, 0.12788634054173287, 0.12151244800102212, 0.13785282004189936, 0.13784511187216486, 0.13383832772112658, 0.13467214841730168, 0.13392270071000434, 0.14668103593137782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029833157685691725, 0.01997138896765538, 0.023448882464159215, 0.026335810911863655, 0.026913491090454933, 0.03630787621131293, 0.027519724305902327, 0.027243324066080654, 0.02963126804365568, 0.009195139550973175, 0.010655949668282316, 0.017406282498613312, 0.01959972157639278, 0.029829973492134343, 0.02008156395180538, 0.014763392921912755, 0.01652823174644602, 0.06082123832517028, 0.4099791927955918, 0.7027334019995071, 0.14655523434145346, 0.1925716346253753, 0.5233160537106079, 0.34252768750808926, 0.15254271367193528, 0.15554962569164943, 0.7103966693257905, 0.06274794416174423, 0.025749816883345877, 0.05664141375682352, 0.040450490265524386, 0.03633019840437157, 0.05473823490492047, 0.04178615500875804, 0.05175014416237722, 0.052733484493368676, 0.10027683525177622, 0.11042747888821558, 0.07105519439634533, 0.12867960668226952, 0.07713455171062944, 0.08714509706298157, 0.07961490739483701, 0.11532947567771312, 0.08534214492970571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056428661378268075, 0.009135843149730483, 0.03364554202810943, 0.020556715944154202, 0.037272316024060226, 0.013138803389675768, 0.017331840531144338, 0.008658206169073646, 0.04044462472845467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14632938346947577, 0.18212330669808696, 0.16886320222586437, 0.15240259709804727, 0.1490101455737216, 0.17442654856203377, 0.16112956940342849, 0.15165123277968973, 0.16052754773920863, 0.031399131998003926, 0.0516844464578764, 0.042357626374861734, 0.03334752068137259, 0.028857248254798074, 0.028925373531215492, 0.015317702414811563, 0.017023796155395732, 0.028417048837241943, 0.12115277895078724, 0.13577885682328994, 0.13828402856622923, 0.12985035433252523, 0.11183015812882002, 0.1349391261218723, 0.13938270143709486, 0.11781846942989871, 0.1316817077374728, 0.15370986579912937, 0.15305585321028448, 0.1613932299901244, 0.15144551964062958, 0.1428610931544072, 0.14202507274620024, 0.14975532038727724, 0.17377774300845283, 0.13236355725742688, 0.10852817278452076, 0.08331349277039368, 0.08504138121087113, 0.08538115393478607, 0.07996445724108125, 0.08207037651354498, 0.09766385007029654, 0.0997711199450243, 0.07674975822634078, 0.15598794273988792, 0.12039118377449509, 0.16568783852635605, 0.13145862579158107, 0.14362132500561564, 0.1231135682968677, 0.13990271031971369, 0.12727427795744484, 0.1261963614278906, 0.008203811678977213, 9.999999999998899e-05, 0.021136171495733103, 0.1343895991629288, 0.10546013695664136, 0.14553039704155613, 0.003286967481116121, 0.11300639066102702, 0.08353297185953601, 0.14328338330678492, 0.13818726126117886, 0.11478989127823225, 0.11418461879480601, 0.12323013492055268, 0.1529136009318287, 0.13049872444669763, 0.13021742982937945, 0.13490035759636143, 0.11092512723598213, 0.12906763370219632, 0.10472804142384662, 0.09208154045646588, 0.11201947134572654, 0.0920210792776639, 0.10995346346064216, 0.16616380766652206, 0.09830320378752044, 0.17625327168316163, 0.17131584183670312, 0.17057465582702447, 0.1924700412447733, 0.20124243429421695, 0.16682421706557038, 0.18356737635039022, 0.1871676438840375, 0.19530308205575064, 0.032232616930524816, 0.028815383947677575, 0.033607929720391616, 0.041821663336620074, 0.03839777301448433, 0.023658315585108003, 0.031288374330706525, 0.03803354422653826, 0.045349954000582504]}, "mutation_prompt": null}
{"id": "dd89c82d-65aa-4fa5-b9ec-fa30e1698eca", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "920f92fc-2fba-45fc-a5c0-52bdd07ad073", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "343da80d-5b2a-4378-8bc3-4e2009d8f072", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def crowding_distance_selection(population, func_values, n_k):\n            distances = np.zeros(len(population))\n            for i, x in enumerate(population):\n                dist = np.sum(np.abs(func_values - func(x)))\n                distances[i] = dist\n            selected_indices = np.argsort(distances)[:n_k]\n            return population[selected_indices]\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population)]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = crowding_distance_selection(np.array(new_population), np.array([func(x) for x in new_population]), pop_size)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Improving diversity by introducing a new diversity maintenance mechanism based on crowding distance in the selection stage.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 41, 67, '        best_x = population[np.argmin([func(x) for x in population)]')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 41, 67, '        best_x = population[np.argmin([func(x) for x in population)]'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "60b3d61b-7264-431b-9876-ce7d424314a7", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "9634ab5d-cfcf-49ef-b65c-c873234dc2cf", "solution": "class Dynamic_Population_Size_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n\n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            # Dynamic Population Size Strategy\n            if (_ % 100) == 0 and pop_size < 50 * self.dim:\n                pop_size += 10\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Dynamic_Population_Size_DE_SA_Optimizer_Refined", "description": "Utilizing a dynamic population size strategy to adjust the exploration and exploitation balance during the optimization process.", "configspace": "", "generation": 65, "fitness": 0.08711177606024124, "feedback": "The algorithm Dynamic_Population_Size_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "b9aea86b-d113-47d7-948c-c5091ca2bdcf", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "053376ba-ef21-4532-99b8-a4139246a663", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "a8e689bb-3b87-457d-9cad-1fca30479964", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "057d782c-fb7f-49fd-9608-8b181ec030b6", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "5b03bc6e-c59c-4d74-ab22-51e30cee662f", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def opposition_based_learning(x):\n            return -1 * x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                trial_x_opposite = opposition_based_learning(trial_x)\n                trial_x_opposite = adaptive_simulated_annealing(trial_x_opposite, best_x, T)\n                trial_x_opposite = opposition_based_learning(trial_x_opposite)\n                new_population.extend([trial_x, trial_x_opposite])\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)[:pop_size]\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the diversity maintenance by introducing a novel opposition-based learning mechanism to refine the exploration process.", "configspace": "", "generation": 70, "fitness": 0.0823376984814333, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.18617100770258954, 0.16118304390904936, 0.2052402748215444, 0.1558541376828374, 0.14052878348354536, 0.187647214433603, 0.20999830209991455, 0.16549540117104478, 0.15200116133523822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031239057468518516, 0.026633786801943615, 0.04327773650509248, 0.04867682761184566, 0.04155144230845198, 0.04654585066025507, 0.038806215304671765, 0.02960901711220687, 0.0392327132300605, 0.036990763281979366, 0.03975218298068772, 0.02223566646215147, 0.026080263751018573, 0.029293034756800784, 0.031573633524856426, 0.042492213888970065, 0.02035622650259361, 0.030826817904544668, 0.06829700343809031, 0.06299369757730333, 0.08004969381156501, 0.05423680293996036, 0.07779186813434025, 0.07419768284536143, 0.0638860334912611, 0.08529840186890847, 0.061198189732702524, 0.0913730986242659, 0.03260601175879674, 0.06535026817504463, 0.10396206425387755, 0.08281329275073745, 0.0569301936621367, 0.07365403048721786, 0.10425542454959047, 0.06343520713772055, 0.12231225149861802, 0.14869233583657038, 0.12803581024483934, 0.11869732471719163, 0.07285119553694963, 0.06629229457956698, 0.12407816780037806, 0.14679475669070585, 0.09469133843332656, 0.036126988852166475, 0.0009053640021509102, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04206373001861741, 9.999999999998899e-05, 9.999999999998899e-05, 0.06387491119219613, 9.999999999998899e-05, 9.999999999998899e-05, 0.044783673343488095, 9.999999999998899e-05, 0.0012795619852499218, 0.04476209920520946, 9.999999999998899e-05, 0.002132634909944864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04426618077768907, 0.06751471029750067, 0.046820102127645424, 0.06494443068516798, 0.0021337959759253344, 0.03038519362680958, 0.05876028758807206, 0.019183509892008677, 0.034474377640787646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1850527263156535, 0.15929015403846047, 0.20195228792383546, 0.17645602654290216, 0.1604469021936038, 0.14124604076220493, 0.2190772636565066, 0.17663223802376182, 0.17556558586934212, 0.03727940647545458, 0.024224606570481977, 0.022871083451143415, 0.03371156096044847, 0.03690370993536107, 0.05338745587834559, 0.03951712610549074, 0.04442597335230636, 0.03149102823788852, 0.13444556372884875, 0.13339230110552602, 0.16536557705005783, 0.13259007147555568, 0.11684748351852081, 0.14210338056371874, 0.125974410454618, 0.12896222771531507, 0.13269229809444483, 0.1388820910074392, 0.1383407549811967, 0.1613932299901244, 0.16598128573969007, 0.13542318823048427, 0.1514715899082053, 0.1386719897606119, 0.17377774300845283, 0.14744901139055344, 0.10961485160912654, 0.09000307580523181, 0.0999550487133023, 0.114071973431912, 0.08813752065965441, 0.11507291411274068, 0.0918724381036623, 0.0997711199450243, 0.10708875073741897, 0.1553424372673069, 0.1418118044819754, 0.1513683370064589, 0.1717446708160536, 0.17051952967390593, 0.16218161452540936, 0.17358183218631984, 0.12820495026210432, 0.13826479665821956, 0.13828890852877596, 0.1425710937177571, 0.15034869109839633, 0.14840901877312407, 0.12567178381888677, 0.15019981306990304, 0.14067709101507675, 0.07539624843699999, 0.13380534442879322, 0.1592843009735576, 0.12515972473386572, 0.13784656651180427, 0.14709834544460731, 0.165116559222103, 0.13455792642686626, 0.1496021961864593, 0.13814917885048839, 0.1304679997709529, 0.23029257394360336, 0.17159954498304053, 0.13540069441023173, 0.15655202892131836, 0.12096259339752868, 0.11709141138161538, 0.10272456904082805, 0.15163947342369777, 0.11951449380432255, 0.1843528438573575, 0.16386956439542832, 0.1675033914158135, 0.1663071554364982, 0.18049873692210772, 0.1732800947644091, 0.17844288173321532, 0.1885979000664918, 0.16945029494439567, 0.048845527275782286, 0.0608683285632996, 0.0545008266903273, 0.06988555361695237, 0.0533823082457755, 0.058947085810702626, 0.05030330164743313, 0.04797213511725462, 0.05452495776568955]}, "mutation_prompt": null}
{"id": "14fd07ec-b8c2-4398-9e0d-990bdcfa8442", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Opposition_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def opposition_based_learning(x):\n            return 10.0 - x  # Opposition-based learning\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                trial_x = opposition_based_learning(trial_x)  # Incorporating opposition-based learning\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Opposition_Refined", "description": "Enhancing the exploration phase by introducing a novel opposition-based learning approach to improve diversity and convergence.", "configspace": "", "generation": 71, "fitness": 0.05082768276587236, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Opposition_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.13001033335472312, 0.0858132534558772, 0.11441871166712736, 0.09431231635004056, 0.10750000009520266, 0.11042008850345264, 0.11030106769477044, 0.14140237358404906, 0.08374340938750957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024985944724418285, 0.01467079663371329, 0.005375109906600173, 0.02412260424326973, 0.006592353378601756, 0.010138794674244833, 0.02265337431657044, 0.007792397052521438, 0.014227608398617253, 0.00746855700675475, 0.003965958956194338, 9.999999999998899e-05, 0.01959972157639278, 0.009151232510081764, 9.999999999998899e-05, 0.014763392921912755, 9.999999999998899e-05, 9.999999999998899e-05, 0.05568042041279897, 0.04540611811255202, 0.049490288603271204, 0.053340261193588256, 0.04687545855643349, 0.040582653508775546, 0.0638860334912611, 0.06351941106606851, 0.04584757174021248, 0.06274794416174423, 9.999999999998899e-05, 9.999999999998899e-05, 0.01619795683003289, 0.00031549654350837564, 0.008538898337902556, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.08224659834595494, 0.06702356975634394, 0.0667108215001172, 0.07285119553694963, 9.999999999998899e-05, 0.0699358691865909, 0.05931056463008866, 0.00990846602666351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017044267816063385, 0.006724538734760199, 0.005280608999358782, 0.008901001357617844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12110476456341224, 0.16200795336165552, 0.14838054695461433, 0.13106984119113818, 0.10274288241579344, 0.10412222447510555, 0.1754967742272292, 0.1020331591766529, 0.1446415036135108, 9.999999999998899e-05, 0.014398009338335904, 0.028727495891453736, 0.03266886175302153, 9.999999999998899e-05, 0.01759993274736349, 0.0008067907773611216, 0.02401464182876567, 0.0267656688986897, 0.10067547462631554, 0.09575340050834225, 0.11842175776965747, 0.1033353651129637, 0.10852972522114013, 0.10798713552628325, 0.0950775258576596, 0.09230086457916509, 0.0952677511540041, 0.11650910365856448, 0.12842969915291558, 0.1613932299901244, 0.14619209661629973, 0.1138073754026484, 0.1204137556632513, 0.12028165949079228, 0.17377774300845283, 0.11827138638999746, 0.05985564337097804, 0.059963947678711715, 0.08398582550377798, 0.056957211629895754, 0.06406947898089654, 0.08354517431785302, 0.0837317855149382, 0.0997711199450243, 0.06778210477108992, 0.11943364695601921, 0.10069049875396341, 0.13345086981233123, 0.1163646539089983, 0.10329407367898313, 0.11047565075151378, 0.12245976138762271, 0.08048809708720406, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017767179047027626, 0.13855919425763863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05761870899832444, 0.07684525560020516, 0.103440047210557, 0.08761686089212906, 0.1207914665021157, 0.06661401029160186, 0.1070176662487543, 0.10511484148144368, 0.0693612576838919, 0.22769279466132786, 0.10267165755511809, 0.06932034027342138, 0.053211627725790134, 0.05814097932778495, 0.05903250263678039, 0.05525855371806898, 0.060184229631132125, 0.04869278805899302, 0.1682668808508182, 0.17987585277144247, 0.1829319317335838, 0.16175701208668125, 0.18177458534425261, 0.16084006856062638, 0.1787704079679021, 0.19039371642016845, 0.1809540600555778, 0.021028556674740462, 0.019543785975338013, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.05291520704380659, 0.06165012922791635, 0.03803354422653826, 0.018331811194831293]}, "mutation_prompt": null}
{"id": "4de46d49-ba25-417c-b4b4-7d081c9103b9", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "fb5cfee1-f165-414d-9597-a3d938f8bafb", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "4f793ddf-0b86-4fbe-aff3-3ab35d41ffad", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Levy:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def levy_flight_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            levy = np.random.standard_cauchy(self.dim) / (1 + np.sqrt(np.abs(np.random.normal(0, 1, self.dim))))  # Levy flights\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < 0.5, a + F * (b - c), x) + levy\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = levy_flight_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Levy", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on Levy flights for improved diversity.", "configspace": "", "generation": 74, "fitness": 0.07582721974161999, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Levy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.09.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.1390438767919393, 0.13722897665949763, 0.11399921053452378, 0.19147797794734467, 0.13330704308724284, 0.1563984295675186, 0.1605882297502922, 0.19519510954652675, 0.15984325580165337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030810809087320035, 0.01550269959041417, 0.037365902674515006, 0.02504039746058695, 0.02095845648877037, 0.024366497020165245, 0.03259861245131146, 0.024060849749503732, 0.021365966047611984, 0.00915870198610702, 0.014429779295810796, 0.013320852224222302, 0.04465273007516968, 0.012226190332301434, 0.0052650534790851244, 0.0248239602241338, 0.024192879447572868, 0.005181510977065207, 0.13812049137410753, 0.20858711340140967, 0.14098306974825991, 0.20235786006849976, 0.18784742652826025, 0.7982129355699417, 0.13919746954159073, 0.5271473171437074, 0.19467114595419743, 0.06274794416174423, 0.08741115495207086, 0.040298174166092715, 0.03604331823232698, 0.01116522567496847, 0.033702006405000096, 0.05275379428893501, 0.043157256805279265, 0.04700054485619243, 0.10027683525177622, 0.08669103691407787, 0.06743266012885163, 0.10709611924639906, 0.07783897266863915, 0.06360280181657996, 0.0786568767697583, 0.10608005346377736, 0.09548015685955502, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019185388754221044, 0.03275450204344943, 0.005499687637261164, 0.023293058651503662, 0.016006203428974186, 0.008840370599673353, 0.019753800771974084, 0.0164274925753376, 0.049010965628522585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13216185119138557, 0.15756555760738078, 0.16263198672778567, 0.15183982152307873, 0.16230581356257734, 0.15138749113039718, 0.17335364078910864, 0.15912717822465494, 0.15174425868183694, 0.03452237340031006, 0.02516234076806323, 0.04058293454389017, 0.039693271475835123, 0.02106236546424789, 0.025700616224571204, 0.026957560233944022, 0.029687847395944655, 0.033094548583264105, 0.14454535238858846, 0.13190113823408833, 0.1337916553926316, 0.1622130403844132, 0.14044673790173834, 0.1335000617864327, 0.15148268480673377, 0.14549463787428596, 0.14884074412256487, 0.1485257269386293, 0.1322357246520811, 0.1613932299901244, 0.14043766395762836, 0.14001249441209507, 0.13774992967188027, 0.13974113915869568, 0.17377774300845283, 0.1499038089195741, 0.06835341236157988, 0.06450347077588536, 0.08767804417342673, 0.087533248440683, 0.10177759770053674, 0.08021556145129105, 0.08569069848999389, 0.0997711199450243, 0.08548335785309469, 0.13327868801413822, 0.11615015865246436, 0.14010221068984452, 0.11890079109839113, 0.12623106861868616, 0.1279062083018393, 0.14985188432738394, 0.12138311561834048, 0.12940068689192608, 0.00410650798192258, 0.08833345885821331, 0.03894370086496168, 9.999999999998899e-05, 0.011378118467244347, 0.07641119966773036, 9.999999999998899e-05, 0.11463951254208293, 9.999999999998899e-05, 0.14643665662650818, 0.13483280696106847, 0.12870290504078352, 0.10887163805754463, 0.12112610703620319, 0.12492760120357338, 0.1394760150531723, 0.1377266632127654, 0.13327093166989556, 0.12218465495301711, 0.1384470000839645, 0.12257172889300472, 0.1044626180091267, 0.10739247181899969, 0.0969385281469467, 0.10240498812820042, 0.14583680614361894, 0.09023293401168997, 0.17398711756864904, 0.17527744413070745, 0.1720376370367609, 0.17053602234575083, 0.18320704184142544, 0.16820520791901894, 0.1861452970487969, 0.18996199022652027, 0.17042150191301353, 0.04364858970641927, 0.027826128265896144, 0.04074500724168506, 0.02701645722585111, 0.05157344227482441, 0.03491295424099594, 0.03158781826241919, 0.03803354422653826, 0.03167922436784232]}, "mutation_prompt": null}
{"id": "33e91fbb-e3d9-4874-b701-e4cc040ed9b3", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def gravitational_force_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            gravitational_force = lambda x: 1 / (1 + np.exp(-x))  # Gravitational force function\n            force_vals = gravitational_force(np.linspace(-5, 5, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < force_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = gravitational_force_mutation(x, population, F)  # Updated mutation operator\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Improving diversity by introducing a new mutation operator inspired by gravitational forces for population exploration.", "configspace": "", "generation": 75, "fitness": 0.08264950396605626, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.09.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.18464627980220616, 0.13159361798228675, 0.13516108185582687, 0.16693588672563597, 0.1531050917440434, 0.16674048232303829, 0.1411288321263826, 0.16582274091912041, 0.1521699369341275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04277886152445631, 0.02938268517872733, 0.04349362238189192, 0.029794141168081434, 0.034486223535249105, 0.024342268112573007, 0.039171430527246254, 0.03972468895211878, 0.027081355519339212, 0.0066273099593124885, 0.021331948524163646, 0.011900512196691082, 0.03200497115220935, 0.013969967857625276, 0.0334361158418669, 0.025656788469640923, 0.012501135791011642, 0.02039169915346628, 0.2929487030566009, 0.20425759637303953, 0.8749740384400306, 0.14997818771391702, 0.16532990510775358, 0.14235731843063426, 0.13267487939892375, 0.14127510704141022, 0.2357398440686026, 0.06274794416174423, 0.03664162770852586, 0.07516424462979499, 0.05799890888151127, 0.09291087354999239, 0.10197704507344973, 0.04382166035121604, 0.05521677228165722, 0.07324857387101258, 0.12093588710491787, 0.08590732345113006, 0.12638021492201645, 0.11795603089267592, 0.08056522351064999, 0.12488883318944621, 0.0765783078110791, 0.10117873909903263, 0.09296117989156083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014805433146117819, 9.999999999998899e-05, 0.05148556815456218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023243584528606753, 0.01998884448605187, 0.06461915559490972, 0.013623533849115521, 0.020526848399266995, 0.018944278844200357, 0.023629808264015617, 0.04901872945572627, 0.004445776221989939, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1777172565768539, 0.16342762986707216, 0.19567251776906924, 0.18552220458210256, 0.15927665234647626, 0.1898268866924906, 0.21974116748011496, 0.17164887381419958, 0.17225057977781832, 0.03185995852469603, 0.05056690880847747, 0.02865343005445864, 0.03266886175302153, 0.03534606274036156, 0.030668413619342805, 0.03852594373787155, 0.04326027186053927, 0.03059021696117148, 0.12239985899029016, 0.10790168919183563, 0.1460070570660681, 0.11389210979321274, 0.13905987924619334, 0.1265998775597189, 0.12689584044089697, 0.11273221675064438, 0.12835367252982544, 0.13337051520524768, 0.14311101966609785, 0.1613932299901244, 0.15499477421867436, 0.13585329368757704, 0.1674841390648688, 0.1272085175636406, 0.17377774300845283, 0.14406915034168088, 0.06696583711158965, 0.10007873860026373, 0.08457348128146058, 0.10764992524899897, 0.10824159708207448, 0.10525011819594565, 0.09974880706210298, 0.0997711199450243, 0.09555353367996178, 0.13932080427547722, 0.13432868919946883, 0.1373025864897086, 0.14546201005543458, 0.13702917276888316, 0.15312330810872954, 0.173393128518887, 0.12883097056945503, 0.1436851427501843, 0.13086812187957786, 0.06564373389423506, 0.1473360239570517, 0.032127509200150284, 0.09667226312631771, 0.13206094684712566, 0.13342747369842878, 0.009962667490204358, 0.12270793454434226, 0.15157308928577118, 0.14070027475272096, 0.13422482941801062, 0.15034073045988627, 0.16130261515502153, 0.10798264092354204, 0.12492903227649876, 0.16441408578630656, 0.11331537029465777, 0.11391303334014502, 0.15567157620791694, 0.10515842527540242, 0.09624400049698123, 0.10496344306375704, 0.09562217004567641, 0.1300830819721006, 0.16217431833737972, 0.12376954372440774, 0.1751675371625241, 0.16599169569730277, 0.17182482578644664, 0.18526682672868133, 0.18415128407318437, 0.16252023884226507, 0.17141296032459286, 0.19713417067245154, 0.20938943124032505, 0.03659146111601874, 0.02930926337352635, 0.03975965752273136, 0.041961713970690484, 0.05197952406918116, 0.05174421961218012, 0.05344045467009384, 0.04023687902242268, 0.033058177889853324]}, "mutation_prompt": null}
{"id": "e7a6c565-ec8c-45fa-8191-b070ed355305", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "f8fc5eb3-cd41-427f-8cd5-adcd21cfb9f5", "solution": "import numpy as np\n\nclass Improved_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def levy_flight_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            levy_vals = np.random.standard_cauchy(self.dim) / np.sqrt(np.abs(np.random.normal(0, 1, self.dim)))  # Levy flight\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < 0.5, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = levy_flight_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Improved_DE_SA_Optimizer_Refined", "description": "Improving exploration by introducing a new mutation operator based on Levy flights to enhance global search capability.", "configspace": "", "generation": 77, "fitness": 0.07713843396880186, "feedback": "The algorithm Improved_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.15496727709516223, 0.13251550861292383, 0.1255609465224823, 0.14281758201768646, 0.15499755623868094, 0.15957062788556542, 0.1689199465757263, 0.16791974302808033, 0.14782948752430025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02133846304756548, 0.020816195757328182, 0.03956574630899701, 0.02918434443762452, 0.032622432430376436, 0.03138587549328453, 0.02487318054423815, 0.04181810798762764, 0.022534689655235307, 0.028137845292176333, 0.009483773047358257, 0.021043842373622113, 0.01959972157639278, 0.030097216044997044, 0.01525493066843353, 0.020334847186639138, 0.0121601468466499, 0.00807511385550419, 0.14986104930136046, 0.11192544017210426, 0.1544374846146438, 0.13608872571406405, 0.1086340071696914, 0.1569860123668605, 0.4293774842409924, 0.35092533148336225, 0.3325686460827344, 0.06274794416174423, 0.044795916204484976, 0.039944574488089524, 0.04792189111414369, 0.04176929129168239, 0.06280954692894358, 0.04455784311586253, 0.042233684957333595, 0.05351385795827568, 0.1028310072099694, 0.09601715661727261, 0.08865252157585801, 0.07653962625708555, 0.10976553935660305, 0.08223639431647534, 0.08918031327017961, 0.11088721291371206, 0.10057406294209337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002342298401194043, 0.015319662373967757, 9.999999999998899e-05, 0.013045894777255707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03913862585744976, 0.015078707884214948, 0.029891212046456506, 0.07797650554398516, 0.052743239234418926, 0.0004321720522580952, 0.02223752994948336, 0.007829387038230218, 0.0596514257563967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007463688040610927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14950239360732898, 0.16382089112619946, 0.16780641963704623, 0.17829663013253938, 0.17283932611786135, 0.15582001181179472, 0.16276728919598538, 0.16277493951926425, 0.16538519322875023, 0.034641271251253936, 0.02545633904934752, 0.044871709852963626, 0.03266886175302153, 0.03018000888384975, 0.029929558725393823, 0.03481558955847919, 0.03471821229233285, 0.0267656688986897, 0.11635438341904247, 0.11056994979754231, 0.12698766466550115, 0.12590495616096864, 0.13365419129698675, 0.13009612746568167, 0.12920717414888694, 0.13119608779066727, 0.11762156027895476, 0.1400899900552497, 0.14528903800742632, 0.1613932299901244, 0.15962984696978288, 0.13953555308260368, 0.13230018200392202, 0.15327156847247425, 0.17377774300845283, 0.1350260654506854, 0.07359433457394349, 0.08586998750872787, 0.10246818918098288, 0.13422655387734972, 0.0854124243971417, 0.08396721127663676, 0.08498038298584198, 0.10742301855282954, 0.09062659221765168, 0.13467731381929338, 0.13159969034343355, 0.13345086981233123, 0.14535743379486088, 0.12070038990017351, 0.1400230699978814, 0.1446690960224305, 0.12192975787623805, 0.1261963614278906, 0.016018317646367852, 0.06319407511785591, 0.12955771073970213, 0.1331196280753325, 9.999999999998899e-05, 0.1289582990221808, 0.10343891827243645, 0.13061100550474636, 0.12478782102631425, 0.11323352972310474, 0.1439823050402037, 0.13833233508774379, 0.12036463702984823, 0.13777528821990948, 0.11892482720023423, 0.1155670890021645, 0.14284786243025027, 0.13117853437845317, 0.11986318422939879, 0.13368717609996006, 0.1103948035513902, 0.15336272593373157, 0.10283864680694865, 0.08960854464009593, 0.10770330368233227, 0.13799247159014105, 0.1498826005125291, 0.1598479233632384, 0.18769604620385805, 0.1687490323086187, 0.1752929417421496, 0.16982605100565396, 0.17432034027125898, 0.18346414654596988, 0.17243812692405658, 0.17746094049790484, 0.05554095625705735, 0.040263544491244696, 0.04434088251764201, 0.03265997060745973, 0.03696666490680067, 0.028869190469276496, 0.048327424985125655, 0.039194087044686965, 0.03453877868348032]}, "mutation_prompt": null}
{"id": "bcd9700d-1a2e-4689-8cb5-d496a9c089ff", "solution": "import numpy as np\n\nclass Improved_DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_differential_evolution(x, pop, F, CR):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR or i == np.random.randint(0, self.dim):\n                    trial[i] = mutant[i]\n            return trial\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_differential_evolution(trial_x, population, F, CR)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Improved_DE_SA_Optimizer", "description": "Improving convergence by integrating a new adaptive mutation mechanism based on differential evolution and chaos theory.", "configspace": "", "generation": 78, "fitness": 0.08703247394728279, "feedback": "The algorithm Improved_DE_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.13.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.1491164713608063, 0.12980710095639647, 0.11227511582263872, 0.1364212927001205, 0.16024198752479168, 0.13453054527720165, 0.11875903722590242, 0.15981665119973554, 0.13338592082477974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03442913262731795, 0.024402314833695926, 0.033682442109061905, 0.04067143618918834, 0.03849860054978649, 0.03386563065746162, 0.03749576614258254, 0.019127571339887628, 0.02449124681938719, 0.01895485650640072, 0.0030669808431732504, 0.019251885607314945, 0.01959972157639278, 0.00811299436565971, 0.003321014567498559, 0.014763392921912755, 0.010805360047924872, 0.016863315265839285, 0.11634008920173255, 0.8676715814119941, 0.7362150507295517, 0.8333666439815359, 0.19255869393095093, 0.8781282610404149, 0.1937485370069567, 0.8827909534633062, 0.19135838258254334, 0.06274794416174423, 0.05302331299232044, 0.02855461757252764, 0.02239998951354738, 0.042557888917113984, 0.05675241099537087, 0.04463175559872723, 0.01228658622942036, 0.07596266151321085, 0.10027683525177622, 0.08224659834595494, 0.08109460355388254, 0.1038200286278761, 0.1049419460847163, 0.09713518166957802, 0.11185832749352653, 0.11168188219040986, 0.09792772319850462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0464563451216885, 0.0196970210853864, 0.05086376939442194, 0.004764411748910402, 0.0021572166806328452, 0.05399341535672553, 0.02135263230012374, 0.028861842815070315, 0.01665189444730042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16564238245927065, 0.1617307154047345, 0.14838054695461433, 0.156748866348276, 0.15254256274000622, 0.15376552743446537, 0.16112956940342849, 0.1531433497648912, 0.15103244846077835, 0.02870685801514572, 0.03266971909939442, 0.048570974064336636, 0.03277004138988726, 0.02971886615814734, 0.021699464251762723, 0.027943673698457294, 0.017882831567742175, 0.029332499959118463, 0.11413059915391155, 0.15203650220314502, 0.12913053689396492, 0.11738044695655603, 0.11500870992545842, 0.13777008169525995, 0.15605660301532864, 0.12755177933407957, 0.13276701068226537, 0.13372663097205373, 0.14161810492082427, 0.18108791562230286, 0.14203077356169835, 0.16638098509587018, 0.14975196094197962, 0.1384778197710259, 0.17377774300845283, 0.15174153622579156, 0.09386513364939852, 0.07944801961320025, 0.1060882583628443, 0.09024565554892472, 0.07438544538999281, 0.0700485545195032, 0.0837317855149382, 0.09993587600523535, 0.08117193559601787, 0.12341860456332965, 0.11574438541547893, 0.13345086981233123, 0.14049759465381906, 0.14884803127794088, 0.13297652379137848, 0.12245976138762271, 0.11948265426181659, 0.1279382597165648, 9.999999999998899e-05, 0.06509596745114143, 0.098936023340913, 0.08385370177193396, 0.09832471359020145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11910262872665767, 0.11675699511039561, 0.11578552395248676, 0.12779556881218157, 0.1207914665021157, 0.10875704461909264, 0.1485398169879183, 0.1157493642218218, 0.13428335797942292, 0.1375615998496018, 0.1475460493972316, 0.15019903818583968, 0.11830524589726354, 0.12968694703524086, 0.15861659498407732, 0.09974515164176789, 0.11404843028003875, 0.10561072045890996, 0.18365417804256945, 0.1736725821124866, 0.18637697443627443, 0.17598560824501508, 0.175255228430111, 0.18723354778367673, 0.19052409972959572, 0.167688148361109, 0.17731313694991313, 0.03474474021662022, 0.04464098178758302, 0.04147575436298612, 0.027345065765731147, 0.03425093938292756, 0.023762968965832854, 0.03961752563379328, 0.0403899280145239, 0.03388220528900199]}, "mutation_prompt": null}
{"id": "ecfae6ef-6f75-4afb-8ff3-4c05f12cebbb", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "7c3af685-15f0-4949-afcb-64fe86003297", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "c1882d08-d7a6-4df2-a1bc-f4c15b02c6ac", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "67745e4f-8c18-4d17-8156-558929b2d6c3", "solution": "import numpy as np\n\nclass Dynamic_Popsize_Adaptive_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])\n        \n        success_rate_threshold = 0.2\n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            success_count = 0\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n                    success_count += 1\n            if success_count / pop_size < success_rate_threshold:\n                pop_size = int(pop_size * 1.1)  # Increase population size\n                population = np.vstack((population, np.random.uniform(-5.0, 5.0, size=(pop_size - pop_size, self.dim)))\n            population = np.array(new_population)\n        \n        return best_x", "name": "Dynamic_Popsize_Adaptive_DE_SA_Optimizer_Refined", "description": "Improving the exploration and exploitation balance by introducing a dynamic population size adjustment based on the success rate of solutions.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 35, 9, '        success_rate_threshold = 0.2\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 35, 9, '        success_rate_threshold = 0.2\\n'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "6a8a3e0e-369c-4a63-91ee-cd98ce7038f2", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "f4ebfc17-0673-44a2-b300-eb3f8503c005", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def crowding_selection(population, population_fitness, n_select):\n            distances = np.zeros(len(population))\n            for i, ind1 in enumerate(population):\n                for j, ind2 in enumerate(population):\n                    distances[i] += np.linalg.norm(ind1 - ind2)\n            selected_indices = np.argsort(distances)[:n_select]\n            return population[selected_indices]\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])\n\n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n            population = crowding_selection(population, [func(x) for x in population], pop_size)  # Introducing crowding-based selection\n\n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Improving the diversity maintenance by introducing a crowding-based selection mechanism to preserve a diverse set of solutions during the optimization process.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 43, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 43, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "7a5bffda-b7e7-4260-beb1-a8c5981edb1d", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "fdd683ec-f9ea-4d1e-99d2-0112f048ad6d", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "cfd7b8d2-4b84-48ed-bfc0-e060dd6d0aec", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def chaotic_mixing_crossover(a, b):\n            mask = np.random.randint(2, size=self.dim)\n            c1 = np.where(mask, a, b)\n            c2 = np.where(mask, b, a)\n            return c1, c2\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n                # Introducing chaotic mixing crossover\n                a, b = population[np.random.choice(len(population), 2, replace=False)]\n                c1, c2 = chaotic_mixing_crossover(a, b)\n                new_population.extend([c1, c2])\n            population = np.array(new_population)[:pop_size]\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the diversity of the population by introducing a crossover operator based on chaotic mixing to explore the search space more effectively.", "configspace": "", "generation": 87, "fitness": 0.08152567120103003, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.14804170420793983, 0.2239644746320304, 0.1520431393636189, 0.2102450186608128, 0.15996921244386308, 0.15569807843663452, 0.14431793836008378, 0.1767708889085965, 0.1559319605325391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025631918803588838, 0.03849411738949915, 0.03169019047317756, 0.036751949136906714, 0.03762332580576544, 0.043597327694158805, 0.05747907794584828, 0.06527444351009104, 0.03677412757545806, 0.03234679886264802, 0.03559778988961915, 0.027047041578370568, 0.04015975535122218, 0.028997076154092638, 0.04337289380767395, 0.05649932514224931, 0.03481149912508896, 0.021405688801047984, 0.09800067637268006, 0.07367787061123543, 0.08537415433525908, 0.09678581570943401, 0.08647622727581561, 0.09377359815167474, 0.09726898036322507, 0.13847517735421788, 0.08923797113893683, 0.06274794416174423, 0.05120424430077852, 0.050488347344994744, 0.05323561864825821, 0.0978833815820408, 0.05092196256494286, 0.047480913365190114, 0.057908082369096725, 0.041977262000190474, 0.12331567084913964, 0.14047563960590448, 0.11025005938474897, 0.11572463909625508, 0.10087042938070356, 0.08738534416855659, 0.09325556718638695, 0.10332051888817262, 0.12971793524407227, 9.999999999998899e-05, 9.999999999998899e-05, 0.019081700338980268, 0.0017516757582634046, 0.003903429212322451, 9.999999999998899e-05, 0.0002181985239938511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02698613136057082, 0.003067122637788966, 9.999999999998899e-05, 9.999999999998899e-05, 0.0064358431876014865, 0.0202097838840698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02963274490067236, 0.0431616879387251, 0.03756743063080359, 0.0314983389829524, 0.015387073932421669, 0.04482593779729471, 0.10484839967522641, 0.03781461889262594, 0.027799148559258358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0076231362903123046, 9.999999999998899e-05, 9.999999999998899e-05, 0.009384991884600069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002232938413457175, 0.20579711032940062, 0.20126189959865148, 0.1900961939958078, 0.1925735494677442, 0.17266587781377962, 0.19056841170360184, 0.18246782121205118, 0.1618113035484977, 0.18977192371786766, 0.03739610895584733, 0.03148245919849746, 0.05400567744602536, 0.044458573201312745, 0.04144978809845057, 0.0337439120012466, 0.03362438865892514, 0.035704246151729624, 0.04763366268777558, 0.12605543862639823, 0.15594027822498502, 0.12798981792211128, 0.15145338185354795, 0.15060947955098158, 0.1391093211861325, 0.10833451331767552, 0.13429885173419498, 0.11129468394592201, 0.1264243892155963, 0.13637410257125215, 0.1613932299901244, 0.16060653239024503, 0.15493645218534202, 0.1408415856976053, 0.14575272567054176, 0.17377774300845283, 0.13816303343770064, 0.13194323612034498, 0.08927278727932375, 0.09467527479105697, 0.10238370436309396, 0.0893106756895582, 0.11735864726046563, 0.10025066433937735, 0.12975461330617566, 0.09360675369235794, 0.18750797076806924, 0.13297247352100805, 0.14276473887747365, 0.1569937809468489, 0.13957163103163606, 0.16254403467733647, 0.1596262462491833, 0.12969160656490586, 0.14362186496260998, 0.1413894811333254, 9.999999999998899e-05, 0.15729785531587637, 0.14109578441284754, 0.13596568472432247, 0.13155097252351766, 0.1589608184096445, 0.06829933263580845, 0.12272844440891673, 0.16456508844757622, 0.15150012658585021, 0.1412227099480362, 0.15700298517813882, 0.1296779333940622, 0.14978428771230723, 0.17831325079067395, 0.12661127057701682, 0.15419461873909024, 0.1409830743068251, 0.1632470954052786, 0.12450060952286623, 0.13965095970813513, 0.15211653459069152, 0.13182544303132981, 0.114205482366451, 0.08072641671503666, 0.10158082631199672, 0.17813436527675441, 0.16800039630412844, 0.21470388669182872, 0.17621397099484515, 0.17455463433723672, 0.16690423412181576, 0.1926438579100438, 0.17382895517581032, 0.17110659748621715, 0.04778886801542359, 0.05682088779121064, 0.05464382662066125, 0.05219650256739716, 0.0510045417844982, 0.04921505474465815, 0.052978147848425805, 0.05104826504796289, 0.04944060020287744]}, "mutation_prompt": null}
{"id": "3e6c2807-680c-40fa-9efe-4703729f5c91", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "e4b30768-8b12-4374-88cb-ef038332d5d4", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def opposition_based_learning(x):\n            return -1 * x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                if np.random.uniform(0, 1) < 0.1:  # Introduce 10% chance of opposition-based learning\n                    trial_x = opposition_based_learning(trial_x)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Improving diversity by introducing opposition-based learning to generate diverse solutions for exploration.", "configspace": "", "generation": 89, "fitness": 0.0833830242310821, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.19702316717352986, 0.16110185306461444, 0.20096082803694726, 0.1207672169729378, 0.15428275267373226, 0.18235608125888603, 0.1539535529420999, 0.1714178224794487, 0.17057507915410353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029317940801820264, 0.04875997958931644, 0.048158684081214265, 0.05092334001864751, 0.03101105261924131, 0.06068868059956767, 0.03104088091697066, 0.04532484302685147, 0.04252788408919117, 0.046510610929557106, 0.03228222829601601, 0.03910625024192649, 0.035640945585023065, 0.03283634448307149, 0.04511176571175346, 0.029501855580501224, 0.028327578459638958, 0.035553926155151516, 0.06166603348502597, 0.10952003715654623, 0.07082740316737979, 0.09725738279870877, 0.08673177560998502, 0.09074912869339513, 0.10628560813179844, 0.09886881104385481, 0.11809123668288246, 0.08844305587696422, 0.053571513040945096, 0.0666732647773195, 0.10375901229563245, 0.08327823006415724, 0.07383768053470252, 0.0712080798890915, 0.07996847181114575, 0.0764563805206131, 0.1212981674568866, 0.1346539781917916, 0.12234435384325626, 0.13969254205930337, 0.11322992145845123, 0.06627251666299983, 0.10288793299675891, 0.1456522684993603, 0.05788494477763706, 0.055575732205311534, 9.999999999998899e-05, 0.011434600765831915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026781575967049775, 0.013614542621581682, 0.047512154914648996, 0.017848298183627986, 0.00037711492153980064, 0.017701405374098256, 0.04355446771816829, 9.999999999998899e-05, 0.023376705829324274, 0.019394499597981896, 9.999999999998899e-05, 0.028739857542355973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01179686129833224, 0.02049212414911128, 0.02635689288622378, 0.014677416148365041, 0.06850277927369586, 0.027909412826506053, 0.0433271845948191, 0.020182117109001196, 0.02745754921942911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010527373793746797, 9.999999999998899e-05, 9.999999999998899e-05, 0.02428328153681758, 9.999999999998899e-05, 9.999999999998899e-05, 0.18963666429041237, 0.1643734400666217, 0.19466588657644224, 0.16444816951982943, 0.15448511287682865, 0.1678189569046048, 0.20549022174247755, 0.17662500343644028, 0.2381905884987281, 0.036610487193955654, 0.04209017503021606, 0.030698772203414992, 0.0420573845952007, 0.032486992147509386, 0.03112335116219378, 0.03857296928570231, 0.05017612324842868, 0.05112712277224252, 0.15088479176078617, 0.13858084361802447, 0.12464298620880632, 0.1182857410906003, 0.11416821908438068, 0.1277089609481462, 0.13439076241880032, 0.11596549870152684, 0.12365552087099208, 0.14353708796497433, 0.14225481774671966, 0.17231034716705085, 0.15796329902580641, 0.1531240852557586, 0.15733159596561386, 0.15081908070614702, 0.17717058012235287, 0.16967628048345906, 0.08580613007467275, 0.08569547467162486, 0.10602658670919152, 0.10694708459484847, 0.11119268639031488, 0.10561214372929717, 0.11724744144186239, 0.10705642117324954, 0.10513227702539929, 0.15187155141606168, 0.14392851133485507, 0.14355344662211333, 0.16337590556657267, 0.14574019983077102, 0.14083538760776027, 0.14185795975214388, 0.13700316695695602, 0.15126275663348732, 0.14017574142024714, 0.1300056165373804, 0.13464869109338795, 0.150595404577613, 0.15386765357208676, 0.14065090636496025, 0.14387487941783017, 0.09276548844789045, 0.12368501538115384, 0.11568066335137739, 0.15432117897262176, 0.18490134936461367, 0.1667193075470612, 0.15884566998073046, 0.14787112043926642, 0.11329157583639426, 0.15419893434853926, 0.1388606639061576, 0.11908045199350759, 0.1520407970808707, 0.2182004100073739, 0.14395843291025978, 0.1513349004719461, 0.1460935988444093, 0.1300225739580102, 0.12969598783764213, 0.14215751209572536, 0.1708940516243882, 0.17304049686291856, 0.1621754618407758, 0.1635176401132289, 0.17069988738464303, 0.16671010044297763, 0.1633340236318398, 0.19437566781147364, 0.1746158629719664, 0.04573131002281716, 0.03780134024873694, 0.0467527210276768, 0.04437943449170767, 0.046534649539125006, 0.04666497124107993, 0.05616509243356249, 0.04427071224281531, 0.044738825424988526]}, "mutation_prompt": null}
{"id": "0b705c90-fed8-42b6-a031-eef82f89b56a", "solution": "import numpy as np\n\nclass Dynamic_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])\n\n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n\n            if np.random.random() < 0.2:  # 20% of the time\n                performance = [func(x) for x in population]\n                best_idx = np.argsort(performance)[:pop_size // 2]\n                worst_idx = np.argsort(performance)[pop_size // 2:]\n                population[worst_idx] = population[best_idx]\n\n        return best_x", "name": "Dynamic_DE_SA_Optimizer_Refined", "description": "Introducing a dynamic population size adaptation based on performance to enhance exploration-exploitation balance.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 35, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "488a19ce-2c6d-4c97-9991-dceedb28b34e", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "acfb43f0-9eb8-4eab-bad1-08830ef78466", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "0c4412c4-b7e9-42eb-985c-447916d0c6ba", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Opposition_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def opposition_based_learning(x):\n            return 2.0 - x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                if func(opposition_based_learning(trial_x)) < func(trial_x):\n                    trial_x = opposition_based_learning(trial_x)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Opposition_Refined", "description": "Enhancing the diversity of the population by introducing a novel opposition-based learning mechanism to generate new candidate solutions.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 38, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 38, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "c5623f42-4dc3-47db-8c69-0a69ff9e93c0", "solution": "import numpy as np\n\nclass Dynamic_PopSize_Adaptive_DE_SA_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n            \n            # Dynamic population size adaptation based on fitness diversity\n            if _ % 10 == 0 and pop_size > 5:\n                fitness_values = np.array([func(x) for x in population])\n                diversity = np.std(fitness_values)\n                if diversity < 0.1:\n                    pop_size = max(int(pop_size * 0.9), 5)\n                elif diversity > 0.5:\n                    pop_size = int(pop_size * 1.1)\n                population = np.concatenate((population, np.random.uniform(-5.0, 5.0, size=(pop_size - len(population), self.dim)))\n        \n        return best_x", "name": "Dynamic_PopSize_Adaptive_DE_SA_Optimizer", "description": "Introducing a dynamic population size adaptation mechanism based on fitness diversity to enhance exploration and exploitation in the optimization process.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 56, 9, '        return best_x\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 56, 9, '        return best_x\\n'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "68fd75f7-7718-48ee-a9c5-ccce3fdcb43c", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "61b7be8e-0eb6-4ca9-ae0b-e94c05536a59", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = int(10 * np.sqrt(self.dim))  # Dynamically adjust population size based on dimensionality\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n        ...", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Improving convergence speed by dynamically adjusting the population size based on the dimensionality of the problem.", "configspace": "", "generation": 96, "fitness": 0.0, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "e96acf9c-4a1d-4d50-b5bc-163aa41012be", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Enhancing the exploration phase by incorporating a novel mutation strategy based on chaotic maps during the adaptive mutation process.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
{"id": "7b2330bf-0268-4b08-8fd4-2088e9225aec", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def fitness_diversity_selection(population, func):\n            fitness_vals = [func(x) for x in population]\n            unique_fitness = len(set(fitness_vals))\n            diversity_ratio = unique_fitness / len(population)\n            sorted_indices = np.argsort(fitness_vals)\n            selected_indices = sorted_indices[:int(0.8 * len(population))]  # Select top 80% by fitness\n            return population[selected_indices]\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population)]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            selected_population = fitness_diversity_selection(population, func)\n            for x in selected_population:\n                trial_x = chaotic_map_mutation(x, selected_population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Incorporating a novel selection mechanism based on fitness diversity to enhance exploration and exploitation in the optimization process.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 41, 67, '        best_x = population[np.argmin([func(x) for x in population)]')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 41, 67, '        best_x = population[np.argmin([func(x) for x in population)]'))", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {}, "mutation_prompt": null}
{"id": "329b29c9-edd8-402d-90eb-c122c23cd093", "solution": "import numpy as np\n\nclass Enhanced_DE_SA_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        CR = 0.9\n        F = 0.8\n        T0 = 1.0\n        alpha = 0.95\n\n        def chaotic_map_mutation(x, pop, F):\n            a, b, c = pop[np.random.choice(len(pop), 3, replace=False)]\n            F = np.clip(F + np.random.normal(0, 0.2), 0.2, 1.0)  # Adaptive F\n            chaotic_map = lambda x: np.sin(3.9 * np.sin(3.9 * np.sin(3.9 * x)))  # Chaotic map function\n            chaotic_vals = chaotic_map(np.linspace(0, 1, self.dim))\n            mutant = np.where(np.random.uniform(0, 1, self.dim) < chaotic_vals, a + F * (b - c), x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_simulated_annealing(x, best_x, T):\n            new_x = x + np.random.normal(0, T, size=self.dim)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            T = np.clip(T * 0.99, 0.1, T0)  # Adaptive T\n            if func(new_x) < func(x) or np.random.rand() < np.exp((func(x) - func(new_x)) / T):\n                return new_x\n            else:\n                return x\n\n        def adapt_population_size(population, func):\n            distances = [np.linalg.norm(x - y) for x in population for y in population]\n            diversity = np.mean(distances)\n            if diversity < 0.1:\n                return np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n            else:\n                return population\n\n        population = np.random.uniform(-5.0, 5.0, size=(pop_size, self.dim))\n        best_x = population[np.argmin([func(x) for x in population])]\n        \n        for _ in range(self.budget):\n            new_population = []\n            T = T0 * alpha ** _\n            population = adapt_population_size(population, func)\n            for x in population:\n                trial_x = chaotic_map_mutation(x, population, F)\n                trial_x = adaptive_simulated_annealing(trial_x, best_x, T)\n                new_population.append(trial_x)\n                if func(trial_x) < func(best_x):\n                    best_x = trial_x\n            population = np.array(new_population)\n        \n        return best_x", "name": "Enhanced_DE_SA_Optimizer_Refined", "description": "Introduce a dynamic population size adaptation mechanism based on fitness diversity to enhance exploration.", "configspace": "", "generation": 99, "fitness": 0.08711177606024124, "feedback": "The algorithm Enhanced_DE_SA_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "93ad3849-d819-42f9-8a58-ba81f15478fa", "metadata": {"aucs": [0.2515288509585525, 0.18860270111950628, 0.19587191281975724, 0.18956185447614815, 0.2043412030406494, 0.19820738813464522, 0.18683167130382516, 0.20049443195113814, 0.18072576511936134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03900661627481872, 0.04400449965774078, 0.04437780200463315, 0.04822812863028081, 0.04072686337240827, 0.05370026467676359, 0.04818525413457009, 0.0507402227104371, 0.050895210907294874, 0.02368619875117217, 0.03444169328209068, 0.03775946534719443, 0.03127654669808, 0.03520122927826619, 0.03246604741937931, 0.030891401606373825, 0.024656815236713592, 0.03503591656785343, 0.11579383786375352, 0.09772644063907465, 0.09182407063993392, 0.10006031868997911, 0.10944730681225667, 0.11310889459815154, 0.09415987482830768, 0.11758637623432622, 0.11378029460861183, 0.08342770467431748, 0.06553577875376781, 0.0519956397354332, 0.09353631878526447, 0.06417888633213098, 0.056146706022581205, 0.06593840993247357, 0.06957558021662613, 0.07498355961669645, 0.11121845547600828, 0.20297703341262197, 0.09920674585610867, 0.12428233830270563, 0.11021609250227649, 0.1401033271899027, 0.12160821021593315, 0.13379480573130653, 0.1891886692906919, 0.006108659549139306, 9.999999999998899e-05, 0.0052167440714525615, 0.0011115210185316249, 0.014611416419112677, 0.01771249402433095, 0.0314837011180924, 9.999999999998899e-05, 0.004018984287206928, 0.008592175876820929, 0.021279017255803057, 0.013814321342420777, 0.005268251009487135, 0.014281552584968993, 0.021724960070295896, 0.025863833746500142, 0.004006133338612217, 0.006083034994733727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05948185577427434, 0.035756006866962675, 0.01811309030843966, 0.031636916119552216, 0.01908041252636561, 0.050142128435055944, 0.045537204983786106, 0.038227910038438284, 0.013774297491004783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018443463619390865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007553961010527965, 0.007668880116277754, 9.999999999998899e-05, 0.00012357005469054716, 0.005780979679529619, 0.18671074924660191, 0.18893464695816875, 0.19975562261987456, 0.18217408485497166, 0.178021480493476, 0.17094385837539428, 0.20862879441360271, 0.17144602644192963, 0.21270494495671732, 0.022123370564878453, 0.03589166075585215, 0.04676476964179943, 0.04700446013470261, 0.03188929561755616, 0.04064498195040489, 0.03571196229303153, 0.034398063142655366, 0.0444831475989389, 0.11495544097258936, 0.12440575586799463, 0.12511850167572647, 0.12290768643092165, 0.14029922185028387, 0.14865700706650242, 0.12791529426597825, 0.12382435343060383, 0.114293179973318, 0.14617806537674782, 0.1484118150089253, 0.1613932299901244, 0.1487543630318351, 0.15748175030167855, 0.1563615840592436, 0.1448383704076892, 0.19437583224355437, 0.1497366047605887, 0.11890974738777371, 0.08569064666468817, 0.11578858740338005, 0.09674497919377556, 0.08967801607404924, 0.11863977434356199, 0.11155740040880557, 0.1450020659044723, 0.1045302902935984, 0.17254523501165842, 0.14862160418221027, 0.14333157513015105, 0.1533486626883236, 0.14493779770738513, 0.14149075883387086, 0.1412434387867204, 0.1409587032982994, 0.1432460985790316, 0.16149214160047454, 0.1385213872614438, 0.14313263436161794, 0.1399522613067382, 0.1499860426604126, 0.14696542187328254, 0.12109542740850066, 0.1498074689162724, 0.14091716701772616, 0.15786058300043937, 0.177641493892009, 0.16286770149621188, 0.15977822166387923, 0.14723610340418236, 0.1419882840401453, 0.1646987277532619, 0.14117970619073472, 0.1540504973455551, 0.22769279466132786, 0.26684370967021687, 0.11039046424845989, 0.11256767940681, 0.14179079092007707, 0.1254822191241326, 0.137206100669934, 0.13870956018977576, 0.12547464555631127, 0.17299741907887767, 0.16355921493002967, 0.16874010394199135, 0.16875622591135486, 0.19229961218019498, 0.15907203600764874, 0.18295034696468582, 0.1511871372694944, 0.1683100375776574, 0.043681131097455195, 0.051082710044483615, 0.04656831207932666, 0.045843464027905956, 0.052839214406025015, 0.05350861966682985, 0.06615537826118056, 0.043477013807192266, 0.050133629447450034]}, "mutation_prompt": null}
