{"id": "c03cf522-0de1-466d-b39b-ba4973966f52", "solution": "import numpy as np\n\nclass DEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)), np.zeros(self.population_size), np.zeros(self.population_size)\n\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n            return new_population, fitness, best\n\n        population, fitness, best = initialize_population()\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "DEAPSO", "description": "An Evolutionary Algorithm with Dynamic Parameter Setting and Differential Evolution Strategy", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 41, in __call__\n  File \"<string>\", line 35, in differential_evolution\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n.", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 41, in __call__\n  File \"<string>\", line 35, in differential_evolution\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "3fb89653-0a36-4bac-b1b5-eb3546a1e50d", "solution": "import numpy as np\n\nclass DEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)), np.zeros(self.population_size), np.zeros(self.population_size)\n\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n            return new_population, fitness, best\n\n        population, fitness, best = initialize_population()\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "DEAPSO", "description": "An Evolutionary Algorithm with Dynamic Parameter Setting and Differential Evolution Strategy", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c03cf522-0de1-466d-b39b-ba4973966f52", "metadata": {}, "mutation_prompt": null}
{"id": "d263c63d-7b7c-49fd-9d9a-594b253e23dd", "solution": "import numpy as np\n\nclass ImprovedDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)), np.zeros(self.population_size), np.zeros(self.population_size)\n\n        def mutate(x, a, b, c):\n            idx = np.random.permutation(self.dim)\n            return np.clip(a + self.f * (b - c)[idx], -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                idx = np.random.choice(range(self.population_size), 3, replace=False)\n                a, b, c = population[idx]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n            return new_population, fitness, best\n\n        population, fitness, best = initialize_population()\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "ImprovedDEAPSO", "description": "Improved DEAPSO algorithm with enhanced mutation strategy using random indices for differential evolution.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "c03cf522-0de1-466d-b39b-ba4973966f52", "metadata": {}, "mutation_prompt": null}
{"id": "270bf186-1113-4e98-8a78-ab56dacee6dd", "solution": "import numpy as np\n\nclass DEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)), np.zeros(self.population_size), np.zeros(self.population_size)\n\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(np.equal(x_new, population[i])) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n            return new_population, fitness, best\n\n        population, fitness, best = initialize_population()\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "DEAPSO", "description": "Refine the DEAPSO algorithm by addressing the ValueError ambiguity issue in the comparison of arrays.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "c03cf522-0de1-466d-b39b-ba4973966f52", "metadata": {}, "mutation_prompt": null}
{"id": "4ad2ebc2-cd11-4f69-850a-db697618af25", "solution": "import numpy as np\n\nclass ImprovedDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)), np.zeros(self.population_size), np.zeros(self.population_size)\n\n        def mutate(x, a, b, c):\n            return np.clip(x + self.c1 * (a - x) + self.c2 * (b - c), -5.0, 5.0)\n\n        def improved_differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n            return new_population, fitness, best\n\n        population, fitness, best = initialize_population()\n        for _ in range(self.max_iterations):\n            population, fitness, best = improved_differential_evolution(population, fitness, best)\n        return best", "name": "ImprovedDEAPSO", "description": "Improved Differential Evolution with a modified mutation approach using a weighted average of the differential vectors.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "c03cf522-0de1-466d-b39b-ba4973966f52", "metadata": {}, "mutation_prompt": null}
{"id": "6db21d36-bb8d-4780-8ffe-30746a15e2a0", "solution": "import numpy as np\n\nclass DEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)), np.zeros(self.population_size), np.zeros(self.population_size)\n\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n            return new_population, fitness, best\n\n        population, fitness, best = initialize_population()\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "DEAPSO", "description": "An Evolutionary Algorithm with Dynamic Parameter Setting and Differential Evolution Strategy", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c03cf522-0de1-466d-b39b-ba4973966f52", "metadata": {}, "mutation_prompt": null}
{"id": "bb1f8798-da9a-4cfb-98db-b5e953d43318", "solution": "import numpy as np\n\nclass ImprovedDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2  # New parameter for mutation probability\n\n    def __call__(self, func):\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "ImprovedDEAPSO", "description": "Improved DEAPSO algorithm by adding a new mutation strategy for better exploration.", "configspace": "", "generation": 6, "fitness": 0.12060097588881977, "feedback": "The algorithm ImprovedDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "c03cf522-0de1-466d-b39b-ba4973966f52", "metadata": {"aucs": [0.18714727266978626, 0.14675321150630172, 0.16579852719170052, 0.23041781827944607, 0.2112169393320089, 0.2100328740340357, 0.1905394984052019, 0.21895589914767843, 0.15429981752982436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03703084044733529, 0.04209164286591327, 0.03139295211116733, 0.030156139103773794, 0.04333619844994396, 0.05711542893436672, 0.07160367554922409, 0.043539942062903014, 0.042226780093560956, 0.03161180812723918, 0.025971457851573176, 0.03575135065051149, 0.033265278026186174, 0.025588258052211876, 0.030148717583272422, 0.017185627449418428, 0.05460267602865132, 0.04627134451177839, 0.9847344073346506, 0.971392224965304, 0.9832788984896484, 0.9962671072315227, 0.9829210526325672, 0.983916192488004, 0.9700921348030139, 0.9941548294138545, 0.98508084040138, 0.06007045310278414, 0.05052600023199871, 0.07212919951916918, 0.08162136714990098, 0.06594606256089774, 0.06739508596176513, 0.08106711903681241, 0.061238899437818906, 0.07877444991834304, 0.12780421337362546, 0.11209022688457171, 0.08824311011578234, 0.11494432259452692, 0.08180790849321873, 0.12199267229539978, 0.10217632840839974, 0.14856441679797971, 0.09457829135977358, 0.011508088836136965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029943577438022673, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013486127111062007, 0.010625758648501682, 0.00812334347745891, 0.005917471470823887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016195693392512256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022928814073376658, 0.03373200874496052, 0.051020547379191705, 0.037541520939184725, 0.024455486145589234, 0.012805179286485169, 0.021839080059273486, 0.001018171883435337, 0.02003840455415662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028087830687342108, 0.03265629238088963, 0.19791445110378159, 0.1720429937911062, 0.18402172701685515, 0.1949529358251978, 0.1854788108708526, 0.2165158599784367, 0.2160747059625714, 0.20796761624891524, 0.19280607534787753, 0.04151591684743139, 0.05170603302611365, 0.05182639676179002, 0.04243401840700556, 0.03423692354472185, 0.07492892692503905, 0.03028888636298599, 0.03741129623143846, 0.06235439907208151, 0.1277525618340758, 0.10838174063621642, 0.13722523038770307, 0.1275293213993316, 0.13389067494684626, 0.12830425739643647, 0.11362656369286794, 0.1375494639560697, 0.12694928961137775, 0.14321565597411567, 0.1703644051574129, 0.15648374749612626, 0.14590172465543105, 0.16994538469569476, 0.15236421568304848, 0.17629927900378006, 0.1584581172449323, 0.1563470722374739, 0.09263989710354581, 0.07974138398346553, 0.08825862294469988, 0.1127999846598583, 0.1160020861337, 0.09045375241410325, 0.09672257324641254, 0.11128181583581898, 0.10397054309900267, 0.14105861528183683, 0.13609788937224165, 0.13302178387322205, 0.14759276182056225, 0.1711355360873671, 0.13386986522003586, 0.133448923082631, 0.14715409226451015, 0.13921667310393515, 0.1429970511932399, 0.15054950395671585, 0.15270039480539344, 0.14945810344635502, 0.14211271707175432, 0.14005263472463958, 0.13927688925889214, 0.1366604308572762, 0.15203303329952067, 0.14618465708295447, 0.14711085172848193, 0.13134722698722068, 0.13249021829702434, 0.14793555275790404, 0.15704004750172684, 0.1385004599760603, 0.15057178366444857, 0.1724928735237672, 0.13922134607145908, 0.1181003819819092, 0.13965319179109426, 0.11146942258342174, 0.1305382700699489, 0.18507225445117637, 0.16386642960065945, 0.11889666828211687, 0.11556158443772369, 0.21203976102403155, 0.174281250358298, 0.16530179940417655, 0.18298010709860735, 0.19035031571959693, 0.16524354896204552, 0.18215538863765046, 0.17640742385480024, 0.17136439036223416, 0.031233682017108744, 0.03763517631652413, 0.040365677654952914, 0.05248200110511747, 0.041241461530683754, 0.04794257319385975, 0.06162585117660946, 0.04412371394550951, 0.0462534137473698]}, "mutation_prompt": null}
{"id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "solution": "import numpy as np\n\nclass EnhancedDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2  # New parameter for mutation probability with adaptive adjustment\n\n    def __call__(self, func):\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            self.mutation_prob = max(0.1, self.mutation_prob * 0.95)  # Adaptive mutation probability adjustment\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "EnhancedDEAPSO", "description": "Enhanced DEAPSO algorithm with adaptive mutation probability for improved exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.12704085546243085, "feedback": "The algorithm EnhancedDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "bb1f8798-da9a-4cfb-98db-b5e953d43318", "metadata": {"aucs": [0.17279484480445206, 0.18801308394881677, 0.17473594949739413, 0.19382182311831253, 0.23741922355540068, 0.19205491976915068, 0.19533610753509034, 0.18120176409940725, 0.17783900755985782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03447178690338437, 0.04915696372918954, 0.03751458940036978, 0.09172123838594526, 0.04243497664822937, 0.07524461145976968, 0.051060559163144004, 0.04168132739267261, 0.044988990539456264, 0.05543471162574565, 0.03042106641944864, 0.039190041425825606, 0.02385637544189989, 0.034345723029556074, 0.04735843531008854, 0.04274371821422118, 0.033709415593021874, 0.031864400711052676, 0.9891588876595508, 0.9861002189392863, 0.9864143158285326, 0.9962671072315227, 0.9908128848397771, 0.9842274482655573, 0.9871969932427119, 0.9931240629408352, 0.9902958857726855, 0.1044887506849671, 0.111239857985034, 0.08491493077405343, 0.08072550403255807, 0.08982728187312028, 0.14056957203297626, 0.09038921961101587, 0.08903741060310655, 0.08704784760713047, 0.14277537990409161, 0.12923159862173483, 0.1727021023368941, 0.11755054895659811, 0.1291698094004471, 0.11314315186389501, 0.10340089161351829, 0.09836065987246967, 0.14706521292869223, 9.999999999998899e-05, 0.031075665904857663, 0.012915518880084575, 9.999999999998899e-05, 0.00023761511813624736, 9.999999999998899e-05, 9.999999999998899e-05, 0.020959191916276043, 9.999999999998899e-05, 0.004127397743870276, 0.05544196538302981, 0.057651896226334376, 9.999999999998899e-05, 0.03694428087592627, 0.010785129976776053, 9.999999999998899e-05, 9.999999999998899e-05, 0.005045016896784382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015882273902337096, 0.05243865803934222, 0.0394984650914213, 0.01350652191733348, 0.021093687200875344, 0.016669668282035865, 0.030172249906661675, 0.028629359942433652, 0.03491897316591419, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000993782215435557, 9.999999999998899e-05, 0.004066993588687562, 9.999999999998899e-05, 9.999999999998899e-05, 0.23146313999079016, 0.21629726458005827, 0.22061557217690264, 0.21051414310532923, 0.21761881900445335, 0.19678918431946724, 0.16333189970468176, 0.22400083279737726, 0.20403911331848146, 0.06035279483077616, 0.04648451123168884, 0.07383846427189711, 0.059537573663322796, 0.03252692733419138, 0.04115991470167768, 0.05244222650487396, 0.039115291493780235, 0.06804278034416911, 0.162034229779917, 0.1432089452802422, 0.11228133386658623, 0.16675041743298258, 0.14046032216416593, 0.11881393740668389, 0.10342321896156537, 0.13936876325981118, 0.11696439488872545, 0.14990285844194184, 0.19233278878028193, 0.1565892606188718, 0.1663979135921927, 0.1719839093050941, 0.15870240099430177, 0.1501168547893823, 0.16777281697460344, 0.1776071877259051, 0.10322023437637617, 0.10073964474134522, 0.12687969802075516, 0.11605473221100915, 0.11707633143151253, 0.10175884048090589, 0.12142140150781267, 0.10666354035770598, 0.11578217678583136, 0.1542314258100108, 0.15329262661819687, 0.1634751562436081, 0.15371950677325752, 0.13685389213854904, 0.1472887854399385, 0.15989253332909792, 0.17935493641783162, 0.1526543349219932, 0.14590167193007075, 0.149760908481685, 0.1549433087808415, 0.1604516050057062, 0.13857684697740913, 0.1523409765370749, 0.15690310854544876, 0.14892953721328428, 0.15265301599150427, 0.15972234778670613, 0.17427850669982503, 0.1427747515076131, 0.13749340172815372, 0.15467153601918437, 0.1795251613818587, 0.12570081647428488, 0.15734977760594449, 0.16029188823193485, 0.11679449212058879, 0.1378514805205001, 0.13694648845120427, 0.09057692140640994, 0.16656735401661604, 0.14555965163366635, 0.11082521382745214, 0.17460117204225267, 0.1409729650341418, 0.18471734196057765, 0.16827630934406612, 0.16990397462935858, 0.16709998166654894, 0.17480573514482534, 0.15963022706882057, 0.18913797621609718, 0.19013936650098617, 0.1843085604197553, 0.05373187471463858, 0.049518972189863564, 0.04816119920927309, 0.0577376052467784, 0.058622122156232415, 0.05093451032185259, 0.04294810311601727, 0.04726528744186975, 0.05477141846500888]}, "mutation_prompt": null}
{"id": "fd1e3746-aa06-4935-ae42-8a4dcca362d2", "solution": "import numpy as np\n\nclass EnhancedDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2  # New parameter for mutation probability with adaptive adjustment\n\n    def __call__(self, func):\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            self.mutation_prob = max(0.1, self.mutation_prob * 0.95)  # Adaptive mutation probability adjustment\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "EnhancedDEAPSO", "description": "Enhanced DEAPSO algorithm with adaptive mutation probability for improved exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {"aucs": [0.17279484480445206, 0.18801308394881677, 0.17473594949739413, 0.19382182311831253, 0.23741922355540068, 0.19205491976915068, 0.19533610753509034, 0.18120176409940725, 0.17783900755985782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03447178690338437, 0.04915696372918954, 0.03751458940036978, 0.09172123838594526, 0.04243497664822937, 0.07524461145976968, 0.051060559163144004, 0.04168132739267261, 0.044988990539456264, 0.05543471162574565, 0.03042106641944864, 0.039190041425825606, 0.02385637544189989, 0.034345723029556074, 0.04735843531008854, 0.04274371821422118, 0.033709415593021874, 0.031864400711052676, 0.9891588876595508, 0.9861002189392863, 0.9864143158285326, 0.9962671072315227, 0.9908128848397771, 0.9842274482655573, 0.9871969932427119, 0.9931240629408352, 0.9902958857726855, 0.1044887506849671, 0.111239857985034, 0.08491493077405343, 0.08072550403255807, 0.08982728187312028, 0.14056957203297626, 0.09038921961101587, 0.08903741060310655, 0.08704784760713047, 0.14277537990409161, 0.12923159862173483, 0.1727021023368941, 0.11755054895659811, 0.1291698094004471, 0.11314315186389501, 0.10340089161351829, 0.09836065987246967, 0.14706521292869223, 9.999999999998899e-05, 0.031075665904857663, 0.012915518880084575, 9.999999999998899e-05, 0.00023761511813624736, 9.999999999998899e-05, 9.999999999998899e-05, 0.020959191916276043, 9.999999999998899e-05, 0.004127397743870276, 0.05544196538302981, 0.057651896226334376, 9.999999999998899e-05, 0.03694428087592627, 0.010785129976776053, 9.999999999998899e-05, 9.999999999998899e-05, 0.005045016896784382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015882273902337096, 0.05243865803934222, 0.0394984650914213, 0.01350652191733348, 0.021093687200875344, 0.016669668282035865, 0.030172249906661675, 0.028629359942433652, 0.03491897316591419, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000993782215435557, 9.999999999998899e-05, 0.004066993588687562, 9.999999999998899e-05, 9.999999999998899e-05, 0.23146313999079016, 0.21629726458005827, 0.22061557217690264, 0.21051414310532923, 0.21761881900445335, 0.19678918431946724, 0.16333189970468176, 0.22400083279737726, 0.20403911331848146, 0.06035279483077616, 0.04648451123168884, 0.07383846427189711, 0.059537573663322796, 0.03252692733419138, 0.04115991470167768, 0.05244222650487396, 0.039115291493780235, 0.06804278034416911, 0.162034229779917, 0.1432089452802422, 0.11228133386658623, 0.16675041743298258, 0.14046032216416593, 0.11881393740668389, 0.10342321896156537, 0.13936876325981118, 0.11696439488872545, 0.14990285844194184, 0.19233278878028193, 0.1565892606188718, 0.1663979135921927, 0.1719839093050941, 0.15870240099430177, 0.1501168547893823, 0.16777281697460344, 0.1776071877259051, 0.10322023437637617, 0.10073964474134522, 0.12687969802075516, 0.11605473221100915, 0.11707633143151253, 0.10175884048090589, 0.12142140150781267, 0.10666354035770598, 0.11578217678583136, 0.1542314258100108, 0.15329262661819687, 0.1634751562436081, 0.15371950677325752, 0.13685389213854904, 0.1472887854399385, 0.15989253332909792, 0.17935493641783162, 0.1526543349219932, 0.14590167193007075, 0.149760908481685, 0.1549433087808415, 0.1604516050057062, 0.13857684697740913, 0.1523409765370749, 0.15690310854544876, 0.14892953721328428, 0.15265301599150427, 0.15972234778670613, 0.17427850669982503, 0.1427747515076131, 0.13749340172815372, 0.15467153601918437, 0.1795251613818587, 0.12570081647428488, 0.15734977760594449, 0.16029188823193485, 0.11679449212058879, 0.1378514805205001, 0.13694648845120427, 0.09057692140640994, 0.16656735401661604, 0.14555965163366635, 0.11082521382745214, 0.17460117204225267, 0.1409729650341418, 0.18471734196057765, 0.16827630934406612, 0.16990397462935858, 0.16709998166654894, 0.17480573514482534, 0.15963022706882057, 0.18913797621609718, 0.19013936650098617, 0.1843085604197553, 0.05373187471463858, 0.049518972189863564, 0.04816119920927309, 0.0577376052467784, 0.058622122156232415, 0.05093451032185259, 0.04294810311601727, 0.04726528744186975, 0.05477141846500888]}, "mutation_prompt": null}
{"id": "538030ee-7be0-457a-8ee4-3aa6f3796f7f", "solution": "import numpy as np\n\nclass DynamicInertiaDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2\n        self.w = np.full(self.population_size, self.w_max)\n\n    def __call__(self, func):\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            self.w = self.w_min + (self.w_max - self.w_min) * (1 - np.arange(self.population_size) / self.population_size)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "DynamicInertiaDEAPSO", "description": "Introducing a dynamic inertia weight adaptation mechanism to enhance exploration and exploitation balance in the DEAPSO algorithm.", "configspace": "", "generation": 9, "fitness": 0.12060097588881977, "feedback": "The algorithm DynamicInertiaDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {"aucs": [0.18714727266978626, 0.14675321150630172, 0.16579852719170052, 0.23041781827944607, 0.2112169393320089, 0.2100328740340357, 0.1905394984052019, 0.21895589914767843, 0.15429981752982436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03703084044733529, 0.04209164286591327, 0.03139295211116733, 0.030156139103773794, 0.04333619844994396, 0.05711542893436672, 0.07160367554922409, 0.043539942062903014, 0.042226780093560956, 0.03161180812723918, 0.025971457851573176, 0.03575135065051149, 0.033265278026186174, 0.025588258052211876, 0.030148717583272422, 0.017185627449418428, 0.05460267602865132, 0.04627134451177839, 0.9847344073346506, 0.971392224965304, 0.9832788984896484, 0.9962671072315227, 0.9829210526325672, 0.983916192488004, 0.9700921348030139, 0.9941548294138545, 0.98508084040138, 0.06007045310278414, 0.05052600023199871, 0.07212919951916918, 0.08162136714990098, 0.06594606256089774, 0.06739508596176513, 0.08106711903681241, 0.061238899437818906, 0.07877444991834304, 0.12780421337362546, 0.11209022688457171, 0.08824311011578234, 0.11494432259452692, 0.08180790849321873, 0.12199267229539978, 0.10217632840839974, 0.14856441679797971, 0.09457829135977358, 0.011508088836136965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029943577438022673, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013486127111062007, 0.010625758648501682, 0.00812334347745891, 0.005917471470823887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016195693392512256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022928814073376658, 0.03373200874496052, 0.051020547379191705, 0.037541520939184725, 0.024455486145589234, 0.012805179286485169, 0.021839080059273486, 0.001018171883435337, 0.02003840455415662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028087830687342108, 0.03265629238088963, 0.19791445110378159, 0.1720429937911062, 0.18402172701685515, 0.1949529358251978, 0.1854788108708526, 0.2165158599784367, 0.2160747059625714, 0.20796761624891524, 0.19280607534787753, 0.04151591684743139, 0.05170603302611365, 0.05182639676179002, 0.04243401840700556, 0.03423692354472185, 0.07492892692503905, 0.03028888636298599, 0.03741129623143846, 0.06235439907208151, 0.1277525618340758, 0.10838174063621642, 0.13722523038770307, 0.1275293213993316, 0.13389067494684626, 0.12830425739643647, 0.11362656369286794, 0.1375494639560697, 0.12694928961137775, 0.14321565597411567, 0.1703644051574129, 0.15648374749612626, 0.14590172465543105, 0.16994538469569476, 0.15236421568304848, 0.17629927900378006, 0.1584581172449323, 0.1563470722374739, 0.09263989710354581, 0.07974138398346553, 0.08825862294469988, 0.1127999846598583, 0.1160020861337, 0.09045375241410325, 0.09672257324641254, 0.11128181583581898, 0.10397054309900267, 0.14105861528183683, 0.13609788937224165, 0.13302178387322205, 0.14759276182056225, 0.1711355360873671, 0.13386986522003586, 0.133448923082631, 0.14715409226451015, 0.13921667310393515, 0.1429970511932399, 0.15054950395671585, 0.15270039480539344, 0.14945810344635502, 0.14211271707175432, 0.14005263472463958, 0.13927688925889214, 0.1366604308572762, 0.15203303329952067, 0.14618465708295447, 0.14711085172848193, 0.13134722698722068, 0.13249021829702434, 0.14793555275790404, 0.15704004750172684, 0.1385004599760603, 0.15057178366444857, 0.1724928735237672, 0.13922134607145908, 0.1181003819819092, 0.13965319179109426, 0.11146942258342174, 0.1305382700699489, 0.18507225445117637, 0.16386642960065945, 0.11889666828211687, 0.11556158443772369, 0.21203976102403155, 0.174281250358298, 0.16530179940417655, 0.18298010709860735, 0.19035031571959693, 0.16524354896204552, 0.18215538863765046, 0.17640742385480024, 0.17136439036223416, 0.031233682017108744, 0.03763517631652413, 0.040365677654952914, 0.05248200110511747, 0.041241461530683754, 0.04794257319385975, 0.06162585117660946, 0.04412371394550951, 0.0462534137473698]}, "mutation_prompt": null}
{"id": "4c43a305-d7d7-4e66-b6cb-5323853855b0", "solution": "import numpy as np\n\nclass DynamicMutDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2  # Initial mutation probability\n        self.mutation_prob_min = 0.1  # Minimum mutation probability\n        self.diversity_threshold = 0.5  # Threshold for population diversity\n        self.diversity_history = []  # Store diversity history\n\n    def __call__(self, func):\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def calculate_diversity(population):\n            return np.mean(np.std(population, axis=0))\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            diversity = calculate_diversity(new_population)\n            self.diversity_history.append(diversity)\n            if diversity > self.diversity_threshold:\n                self.mutation_prob = min(0.9, self.mutation_prob * 1.05)  # Increase mutation probability\n            else:\n                self.mutation_prob = max(self.mutation_prob_min, self.mutation_prob * 0.95)  # Decrease mutation probability\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "DynamicMutDEAPSO", "description": "Improved Enhanced DEAPSO algorithm with dynamically adjusting mutation probability based on population diversity for enhanced exploration-exploitation balance.", "configspace": "", "generation": 10, "fitness": 0.11373365818802907, "feedback": "The algorithm DynamicMutDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {"aucs": [0.1773218823430892, 0.15735235890260524, 0.13860160044159342, 0.1897543272474056, 0.14513530524244056, 0.1738360981291719, 0.15423356088662987, 0.1516095983187914, 0.17787520628114384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028857934753216075, 0.038540243419700304, 0.029399421682900884, 0.036240737838865944, 0.03897039952886994, 0.031521212021326184, 0.04333542182949135, 0.03319438908739791, 0.03144661413288374, 0.018850996161249856, 0.01912758892593336, 0.03557417030962173, 0.0301763342644652, 0.019294805231142576, 0.016921625958391417, 0.013325724671495842, 0.031401835405380885, 0.0160963069071961, 0.9897271745235867, 0.9753511246398803, 0.9866061228998647, 0.9970688478965379, 0.9768567962521432, 0.9486759255426076, 0.9826520564726288, 0.9941548294138545, 0.9788935954106751, 0.04967398772604881, 0.05417047822752574, 0.05720335135336552, 0.07102604379597977, 0.09455682407355892, 0.05347765120285786, 0.051766208871549146, 0.05248321179100657, 0.07811191943393436, 0.10275489923359149, 0.09925745574575995, 0.09702811015104618, 0.0808152739323923, 0.07440308091422287, 0.11909310409306295, 0.09166865735498053, 0.07976427649569973, 0.0937021530085893, 9.999999999998899e-05, 0.015327887926479655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010747652582587808, 9.999999999998899e-05, 0.00861411742538054, 9.999999999998899e-05, 9.999999999998899e-05, 0.009922438415556845, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032193944557746823, 0.02752618005057339, 9.999999999998899e-05, 9.999999999998899e-05, 0.004114959574927357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04673668989648194, 0.04825796421940409, 0.04092534473616527, 0.03949653843716572, 0.026586295072193233, 0.00828773319117626, 0.012461887731962773, 0.03682426755523194, 0.055790789109108285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.167559863583858, 0.15993557554120996, 0.1918583929214992, 0.18222782168435947, 0.16829945433496873, 0.17907491322899827, 0.19109525025178187, 0.188988745270119, 0.19050793567055258, 0.03625231050944999, 0.04273268484694093, 0.0318519494671311, 0.030308124249188606, 0.03364461470734692, 0.04145071418705015, 0.03149825684991159, 0.03671834855778, 0.05267809151069047, 0.12396964507432584, 0.1369193627599694, 0.11010225678964014, 0.11754397154060103, 0.12967443696434, 0.11866816586891038, 0.14594333975096674, 0.13114950119933277, 0.1192144712136014, 0.14365675277102252, 0.15016809473057513, 0.1464945810496494, 0.14608805678093362, 0.1448124506316164, 0.14874218238263803, 0.14431668866878355, 0.1538216721294564, 0.14747666804221649, 0.11667811046567278, 0.08796022608375076, 0.0828771245504657, 0.0921305093964071, 0.09165035660620613, 0.11209835828791526, 0.08959015832817296, 0.09475356212028996, 0.1016933959126669, 0.15470008411351643, 0.1387995596721936, 0.1369593657794016, 0.14569603697935907, 0.14575483448178728, 0.14831886217341161, 0.13981672400048717, 0.14903764603107916, 0.15289577911803587, 0.1386651437926958, 0.11998490123220906, 0.14483925347724802, 0.10916312626670077, 0.13992764899511134, 0.06162142171516005, 0.08300681986562364, 0.13545116447988603, 0.15740463764382928, 0.14015326859969535, 0.12274357173165096, 0.11193672083533512, 0.12967096530308297, 0.13117632234541887, 0.13238908115762837, 0.15317484717356078, 0.10291999892331316, 0.13211971544925816, 0.14671809576400807, 0.12532251167673092, 0.14300533705730611, 0.12075072799679643, 0.1605161894113475, 0.10558092378234196, 0.10544003690051063, 0.09790269162057486, 0.1439743260393057, 0.1683638855177334, 0.16271346668766784, 0.1714896895343302, 0.16358070139914438, 0.17035564894238742, 0.18985211128339807, 0.16534406310562577, 0.18073559339813983, 0.18711742120735786, 0.05681568982882401, 0.04994215232620869, 0.04655732230165466, 0.03750015273238916, 0.05385931935358512, 0.03593008649617391, 0.05071922421564601, 0.04071750692878939, 0.04365453086146176]}, "mutation_prompt": null}
{"id": "3b5d478a-8a70-49e8-8baf-ba6db215159c", "solution": "import numpy as np\n\nclass EnhancedDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2  # New parameter for mutation probability with adaptive adjustment\n\n    def __call__(self, func):\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            self.mutation_prob = max(0.1, self.mutation_prob * 0.95)  # Adaptive mutation probability adjustment\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "EnhancedDEAPSO", "description": "Enhanced DEAPSO algorithm with adaptive mutation probability for improved exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {"aucs": [0.17279484480445206, 0.18801308394881677, 0.17473594949739413, 0.19382182311831253, 0.23741922355540068, 0.19205491976915068, 0.19533610753509034, 0.18120176409940725, 0.17783900755985782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03447178690338437, 0.04915696372918954, 0.03751458940036978, 0.09172123838594526, 0.04243497664822937, 0.07524461145976968, 0.051060559163144004, 0.04168132739267261, 0.044988990539456264, 0.05543471162574565, 0.03042106641944864, 0.039190041425825606, 0.02385637544189989, 0.034345723029556074, 0.04735843531008854, 0.04274371821422118, 0.033709415593021874, 0.031864400711052676, 0.9891588876595508, 0.9861002189392863, 0.9864143158285326, 0.9962671072315227, 0.9908128848397771, 0.9842274482655573, 0.9871969932427119, 0.9931240629408352, 0.9902958857726855, 0.1044887506849671, 0.111239857985034, 0.08491493077405343, 0.08072550403255807, 0.08982728187312028, 0.14056957203297626, 0.09038921961101587, 0.08903741060310655, 0.08704784760713047, 0.14277537990409161, 0.12923159862173483, 0.1727021023368941, 0.11755054895659811, 0.1291698094004471, 0.11314315186389501, 0.10340089161351829, 0.09836065987246967, 0.14706521292869223, 9.999999999998899e-05, 0.031075665904857663, 0.012915518880084575, 9.999999999998899e-05, 0.00023761511813624736, 9.999999999998899e-05, 9.999999999998899e-05, 0.020959191916276043, 9.999999999998899e-05, 0.004127397743870276, 0.05544196538302981, 0.057651896226334376, 9.999999999998899e-05, 0.03694428087592627, 0.010785129976776053, 9.999999999998899e-05, 9.999999999998899e-05, 0.005045016896784382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015882273902337096, 0.05243865803934222, 0.0394984650914213, 0.01350652191733348, 0.021093687200875344, 0.016669668282035865, 0.030172249906661675, 0.028629359942433652, 0.03491897316591419, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000993782215435557, 9.999999999998899e-05, 0.004066993588687562, 9.999999999998899e-05, 9.999999999998899e-05, 0.23146313999079016, 0.21629726458005827, 0.22061557217690264, 0.21051414310532923, 0.21761881900445335, 0.19678918431946724, 0.16333189970468176, 0.22400083279737726, 0.20403911331848146, 0.06035279483077616, 0.04648451123168884, 0.07383846427189711, 0.059537573663322796, 0.03252692733419138, 0.04115991470167768, 0.05244222650487396, 0.039115291493780235, 0.06804278034416911, 0.162034229779917, 0.1432089452802422, 0.11228133386658623, 0.16675041743298258, 0.14046032216416593, 0.11881393740668389, 0.10342321896156537, 0.13936876325981118, 0.11696439488872545, 0.14990285844194184, 0.19233278878028193, 0.1565892606188718, 0.1663979135921927, 0.1719839093050941, 0.15870240099430177, 0.1501168547893823, 0.16777281697460344, 0.1776071877259051, 0.10322023437637617, 0.10073964474134522, 0.12687969802075516, 0.11605473221100915, 0.11707633143151253, 0.10175884048090589, 0.12142140150781267, 0.10666354035770598, 0.11578217678583136, 0.1542314258100108, 0.15329262661819687, 0.1634751562436081, 0.15371950677325752, 0.13685389213854904, 0.1472887854399385, 0.15989253332909792, 0.17935493641783162, 0.1526543349219932, 0.14590167193007075, 0.149760908481685, 0.1549433087808415, 0.1604516050057062, 0.13857684697740913, 0.1523409765370749, 0.15690310854544876, 0.14892953721328428, 0.15265301599150427, 0.15972234778670613, 0.17427850669982503, 0.1427747515076131, 0.13749340172815372, 0.15467153601918437, 0.1795251613818587, 0.12570081647428488, 0.15734977760594449, 0.16029188823193485, 0.11679449212058879, 0.1378514805205001, 0.13694648845120427, 0.09057692140640994, 0.16656735401661604, 0.14555965163366635, 0.11082521382745214, 0.17460117204225267, 0.1409729650341418, 0.18471734196057765, 0.16827630934406612, 0.16990397462935858, 0.16709998166654894, 0.17480573514482534, 0.15963022706882057, 0.18913797621609718, 0.19013936650098617, 0.1843085604197553, 0.05373187471463858, 0.049518972189863564, 0.04816119920927309, 0.0577376052467784, 0.058622122156232415, 0.05093451032185259, 0.04294810311601727, 0.04726528744186975, 0.05477141846500888]}, "mutation_prompt": null}
{"id": "c413686c-0817-4165-aa47-f02ac1561f69", "solution": "import numpy as np\n\nclass EnhancedDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2  # New parameter for mutation probability with adaptive adjustment\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, fitness_values):\n            scaling_factor = np.mean(fitness_values) / (np.std(fitness_values) + 1e-8)  # Dynamic scaling factor\n            return np.clip(a + scaling_factor * self.f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            fitness_values = np.array([func(ind) for ind in population])\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, fitness_values)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + scaling_factor * self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            self.mutation_prob = max(0.1, self.mutation_prob * 0.95)  # Adaptive mutation probability adjustment\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "EnhancedDEAPSO", "description": "Enhancing the mutation strategy by incorporating a dynamic scaling factor based on individual fitness levels to promote efficient exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'scaling_factor' is not defined\").", "error": "NameError(\"name 'scaling_factor' is not defined\")", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {}, "mutation_prompt": null}
{"id": "0ab3244b-c398-4c0c-85e2-f122baf58da3", "solution": "import numpy as np\n\nclass EnhancedDEAPSOCrowding:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2\n        self.crowding_factor = 0.5  # New parameter for crowding distance factor\n\n    def __call__(self, func):\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def crowding_distance(population):\n            distances = np.zeros(len(population))\n            for i in range(len(population)):\n                distances[i] = np.mean(np.linalg.norm(population - population[i], axis=1))\n            return distances\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            crowding = crowding_distance(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            crowding = crowding_distance(new_population)\n            crowding_sorted_indices = np.argsort(crowding)[::-1]\n            for i in range(self.population_size):\n                new_population[i] = new_population[crowding_sorted_indices[i]]\n            self.mutation_prob = max(0.1, self.mutation_prob * 0.95)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "EnhancedDEAPSOCrowding", "description": "Enhancing diversity maintenance by incorporating crowding distance calculation for better solution spread.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'explore_mutate' is not defined\").", "error": "NameError(\"name 'explore_mutate' is not defined\")", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {}, "mutation_prompt": null}
{"id": "facd155d-cbf5-4751-9e95-bfcabb71bf36", "solution": "import numpy as np\n\nclass DynamicInertiaEnhancedDEAPSO(EnhancedDEAPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.w_dynamic = self.w\n\n    def __call__(self, func):\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            self.mutation_prob = max(0.1, self.mutation_prob * 0.95)\n\n            global_best_idx = np.argmin(fitness)\n            for i in range(self.population_size):\n                if i != global_best_idx:\n                    self.w_dynamic = max(self.w_min, min(self.w_max, self.w_dynamic + np.random.normal(0, 0.1)))\n                    new_population[i] = self.w_dynamic * new_population[i] + (1 - self.w_dynamic) * population[i]\n\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "DynamicInertiaEnhancedDEAPSO", "description": "Introduce a dynamic inertia weight to balance global and local search in the EnhancedDEAPSO algorithm.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {}, "mutation_prompt": null}
{"id": "dc104cc5-9452-4460-8c20-f55dd74aa6ed", "solution": "import numpy as np\n\nclass EnhancedDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2  # New parameter for mutation probability with adaptive adjustment\n\n    def __call__(self, func):\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            self.mutation_prob = max(0.1, self.mutation_prob * 0.95)  # Adaptive mutation probability adjustment\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "EnhancedDEAPSO", "description": "Enhanced DEAPSO algorithm with adaptive mutation probability for improved exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {"aucs": [0.17279484480445206, 0.18801308394881677, 0.17473594949739413, 0.19382182311831253, 0.23741922355540068, 0.19205491976915068, 0.19533610753509034, 0.18120176409940725, 0.17783900755985782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03447178690338437, 0.04915696372918954, 0.03751458940036978, 0.09172123838594526, 0.04243497664822937, 0.07524461145976968, 0.051060559163144004, 0.04168132739267261, 0.044988990539456264, 0.05543471162574565, 0.03042106641944864, 0.039190041425825606, 0.02385637544189989, 0.034345723029556074, 0.04735843531008854, 0.04274371821422118, 0.033709415593021874, 0.031864400711052676, 0.9891588876595508, 0.9861002189392863, 0.9864143158285326, 0.9962671072315227, 0.9908128848397771, 0.9842274482655573, 0.9871969932427119, 0.9931240629408352, 0.9902958857726855, 0.1044887506849671, 0.111239857985034, 0.08491493077405343, 0.08072550403255807, 0.08982728187312028, 0.14056957203297626, 0.09038921961101587, 0.08903741060310655, 0.08704784760713047, 0.14277537990409161, 0.12923159862173483, 0.1727021023368941, 0.11755054895659811, 0.1291698094004471, 0.11314315186389501, 0.10340089161351829, 0.09836065987246967, 0.14706521292869223, 9.999999999998899e-05, 0.031075665904857663, 0.012915518880084575, 9.999999999998899e-05, 0.00023761511813624736, 9.999999999998899e-05, 9.999999999998899e-05, 0.020959191916276043, 9.999999999998899e-05, 0.004127397743870276, 0.05544196538302981, 0.057651896226334376, 9.999999999998899e-05, 0.03694428087592627, 0.010785129976776053, 9.999999999998899e-05, 9.999999999998899e-05, 0.005045016896784382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015882273902337096, 0.05243865803934222, 0.0394984650914213, 0.01350652191733348, 0.021093687200875344, 0.016669668282035865, 0.030172249906661675, 0.028629359942433652, 0.03491897316591419, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000993782215435557, 9.999999999998899e-05, 0.004066993588687562, 9.999999999998899e-05, 9.999999999998899e-05, 0.23146313999079016, 0.21629726458005827, 0.22061557217690264, 0.21051414310532923, 0.21761881900445335, 0.19678918431946724, 0.16333189970468176, 0.22400083279737726, 0.20403911331848146, 0.06035279483077616, 0.04648451123168884, 0.07383846427189711, 0.059537573663322796, 0.03252692733419138, 0.04115991470167768, 0.05244222650487396, 0.039115291493780235, 0.06804278034416911, 0.162034229779917, 0.1432089452802422, 0.11228133386658623, 0.16675041743298258, 0.14046032216416593, 0.11881393740668389, 0.10342321896156537, 0.13936876325981118, 0.11696439488872545, 0.14990285844194184, 0.19233278878028193, 0.1565892606188718, 0.1663979135921927, 0.1719839093050941, 0.15870240099430177, 0.1501168547893823, 0.16777281697460344, 0.1776071877259051, 0.10322023437637617, 0.10073964474134522, 0.12687969802075516, 0.11605473221100915, 0.11707633143151253, 0.10175884048090589, 0.12142140150781267, 0.10666354035770598, 0.11578217678583136, 0.1542314258100108, 0.15329262661819687, 0.1634751562436081, 0.15371950677325752, 0.13685389213854904, 0.1472887854399385, 0.15989253332909792, 0.17935493641783162, 0.1526543349219932, 0.14590167193007075, 0.149760908481685, 0.1549433087808415, 0.1604516050057062, 0.13857684697740913, 0.1523409765370749, 0.15690310854544876, 0.14892953721328428, 0.15265301599150427, 0.15972234778670613, 0.17427850669982503, 0.1427747515076131, 0.13749340172815372, 0.15467153601918437, 0.1795251613818587, 0.12570081647428488, 0.15734977760594449, 0.16029188823193485, 0.11679449212058879, 0.1378514805205001, 0.13694648845120427, 0.09057692140640994, 0.16656735401661604, 0.14555965163366635, 0.11082521382745214, 0.17460117204225267, 0.1409729650341418, 0.18471734196057765, 0.16827630934406612, 0.16990397462935858, 0.16709998166654894, 0.17480573514482534, 0.15963022706882057, 0.18913797621609718, 0.19013936650098617, 0.1843085604197553, 0.05373187471463858, 0.049518972189863564, 0.04816119920927309, 0.0577376052467784, 0.058622122156232415, 0.05093451032185259, 0.04294810311601727, 0.04726528744186975, 0.05477141846500888]}, "mutation_prompt": null}
{"id": "6d35d89f-708c-47d5-ad1a-977e74175f0f", "solution": "import numpy as np\n\nclass EnhancedDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2  \n        self.dynamic_population_ratio = 0.2  # New parameter for dynamic population size adjustment\n\n    def __call__(self, func):\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            self.mutation_prob = max(0.1, self.mutation_prob * 0.95)  \n            \n            if np.random.rand() < self.dynamic_population_ratio:\n                self.population_size = min(50, self.population_size + 5)  # Adjust population size dynamically\n\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "EnhancedDEAPSO", "description": "Introducing a dynamic population size adjustment mechanism for Enhanced DEAPSO to improve convergence speed and adaptability.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 11 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 11 is out of bounds for axis 0 with size 10')", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {}, "mutation_prompt": null}
{"id": "ee066f58-1943-495a-ad0c-61fb77c38316", "solution": "import numpy as np\n\nclass EnhancedDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.cr = 0.9\n        self.f = 0.9\n        self.mutation_prob = 0.2  # New parameter for mutation probability with adaptive adjustment\n\n    def __call__(self, func):\n        def mutate(x, a, b, c):\n            return np.clip(a + self.f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c)\n                if np.all(x_new == population[i]) or np.random.rand() < self.cr:\n                    x_new = a + self.f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            self.mutation_prob = max(0.1, self.mutation_prob * 0.95)  # Adaptive mutation probability adjustment\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best)\n        return best", "name": "EnhancedDEAPSO", "description": "Enhanced DEAPSO algorithm with adaptive mutation probability for improved exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {"aucs": [0.17279484480445206, 0.18801308394881677, 0.17473594949739413, 0.19382182311831253, 0.23741922355540068, 0.19205491976915068, 0.19533610753509034, 0.18120176409940725, 0.17783900755985782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03447178690338437, 0.04915696372918954, 0.03751458940036978, 0.09172123838594526, 0.04243497664822937, 0.07524461145976968, 0.051060559163144004, 0.04168132739267261, 0.044988990539456264, 0.05543471162574565, 0.03042106641944864, 0.039190041425825606, 0.02385637544189989, 0.034345723029556074, 0.04735843531008854, 0.04274371821422118, 0.033709415593021874, 0.031864400711052676, 0.9891588876595508, 0.9861002189392863, 0.9864143158285326, 0.9962671072315227, 0.9908128848397771, 0.9842274482655573, 0.9871969932427119, 0.9931240629408352, 0.9902958857726855, 0.1044887506849671, 0.111239857985034, 0.08491493077405343, 0.08072550403255807, 0.08982728187312028, 0.14056957203297626, 0.09038921961101587, 0.08903741060310655, 0.08704784760713047, 0.14277537990409161, 0.12923159862173483, 0.1727021023368941, 0.11755054895659811, 0.1291698094004471, 0.11314315186389501, 0.10340089161351829, 0.09836065987246967, 0.14706521292869223, 9.999999999998899e-05, 0.031075665904857663, 0.012915518880084575, 9.999999999998899e-05, 0.00023761511813624736, 9.999999999998899e-05, 9.999999999998899e-05, 0.020959191916276043, 9.999999999998899e-05, 0.004127397743870276, 0.05544196538302981, 0.057651896226334376, 9.999999999998899e-05, 0.03694428087592627, 0.010785129976776053, 9.999999999998899e-05, 9.999999999998899e-05, 0.005045016896784382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015882273902337096, 0.05243865803934222, 0.0394984650914213, 0.01350652191733348, 0.021093687200875344, 0.016669668282035865, 0.030172249906661675, 0.028629359942433652, 0.03491897316591419, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000993782215435557, 9.999999999998899e-05, 0.004066993588687562, 9.999999999998899e-05, 9.999999999998899e-05, 0.23146313999079016, 0.21629726458005827, 0.22061557217690264, 0.21051414310532923, 0.21761881900445335, 0.19678918431946724, 0.16333189970468176, 0.22400083279737726, 0.20403911331848146, 0.06035279483077616, 0.04648451123168884, 0.07383846427189711, 0.059537573663322796, 0.03252692733419138, 0.04115991470167768, 0.05244222650487396, 0.039115291493780235, 0.06804278034416911, 0.162034229779917, 0.1432089452802422, 0.11228133386658623, 0.16675041743298258, 0.14046032216416593, 0.11881393740668389, 0.10342321896156537, 0.13936876325981118, 0.11696439488872545, 0.14990285844194184, 0.19233278878028193, 0.1565892606188718, 0.1663979135921927, 0.1719839093050941, 0.15870240099430177, 0.1501168547893823, 0.16777281697460344, 0.1776071877259051, 0.10322023437637617, 0.10073964474134522, 0.12687969802075516, 0.11605473221100915, 0.11707633143151253, 0.10175884048090589, 0.12142140150781267, 0.10666354035770598, 0.11578217678583136, 0.1542314258100108, 0.15329262661819687, 0.1634751562436081, 0.15371950677325752, 0.13685389213854904, 0.1472887854399385, 0.15989253332909792, 0.17935493641783162, 0.1526543349219932, 0.14590167193007075, 0.149760908481685, 0.1549433087808415, 0.1604516050057062, 0.13857684697740913, 0.1523409765370749, 0.15690310854544876, 0.14892953721328428, 0.15265301599150427, 0.15972234778670613, 0.17427850669982503, 0.1427747515076131, 0.13749340172815372, 0.15467153601918437, 0.1795251613818587, 0.12570081647428488, 0.15734977760594449, 0.16029188823193485, 0.11679449212058879, 0.1378514805205001, 0.13694648845120427, 0.09057692140640994, 0.16656735401661604, 0.14555965163366635, 0.11082521382745214, 0.17460117204225267, 0.1409729650341418, 0.18471734196057765, 0.16827630934406612, 0.16990397462935858, 0.16709998166654894, 0.17480573514482534, 0.15963022706882057, 0.18913797621609718, 0.19013936650098617, 0.1843085604197553, 0.05373187471463858, 0.049518972189863564, 0.04816119920927309, 0.0577376052467784, 0.058622122156232415, 0.05093451032185259, 0.04294810311601727, 0.04726528744186975, 0.05477141846500888]}, "mutation_prompt": null}
{"id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "solution": "import numpy as np\n\nclass DynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "DynamicDEAPSO", "description": "Implement a dynamic parameter adaptation strategy for the mutation and crossover rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 18, "fitness": 0.1611464199901182, "feedback": "The algorithm DynamicDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "90c9475f-80dd-4676-9eb4-901ff2cef17c", "metadata": {"aucs": [0.25676394684950665, 0.3076490057724707, 0.27292823208146144, 0.3110332305066128, 0.4402820650786087, 0.2712650155517553, 0.31322138288796986, 0.31678301432382605, 0.27378610245554724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07367541770682529, 0.06176609709834535, 0.07259365481686186, 0.05081698257355671, 0.07457802210989395, 0.10819066708612479, 0.06013989795233632, 0.07474174234832154, 0.06120983661708945, 0.028022626914809057, 0.06384084495734665, 0.03573888354297594, 0.07414109652068179, 0.046491131343042835, 0.056124605616844514, 0.0787424839531079, 0.039667241161270295, 0.06150696242564757, 0.9333026843394249, 0.8989213917292405, 0.9824561605384684, 0.9875485883903143, 0.12007767360533295, 0.9007068944241148, 0.9675316208136192, 0.9923681148328628, 0.9217283599526889, 0.16895972803981352, 0.11222707248875319, 0.12844501052663104, 0.14360162087234907, 0.09772207022394597, 0.11293589975425333, 0.1188870072508107, 0.12486764023680008, 0.17846577661707053, 0.17205530530603497, 0.15408721311218598, 0.09802954951144216, 0.21987425248722092, 0.17052576199522262, 0.1863897137028777, 0.1544792300930461, 0.22148687752897311, 0.18210045689234877, 0.11718998862333352, 0.05696024185079318, 0.13159595325481588, 0.12359472732712362, 0.10047772131988497, 0.13008165374042635, 0.10937637787458387, 0.07702259526748656, 0.11828532445802142, 0.15501118333240338, 0.1179113664162067, 0.04553269936207949, 0.12651947474131153, 0.10951064899389751, 0.07114017266750905, 0.08640829794886506, 0.09474954968027849, 0.11687843182120228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051844077991427207, 0.0701025849029836, 0.04639266529269859, 0.06103111465410527, 0.04812421408979772, 0.0612407765132601, 0.05201552663867992, 0.05954014237986738, 0.04630525522398288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770193749031714, 0.06658144266075527, 0.062411094278101875, 0.022225406468599607, 0.025620623451947044, 9.999999999998899e-05, 0.006215402689419225, 0.018811597685028936, 0.015367562401513934, 0.338755909654032, 0.2904123829368105, 0.2642763686882026, 0.29318864193374117, 0.306129314035556, 0.31430603692202375, 0.2711677687403372, 0.29883490698200754, 0.2531113782371275, 0.0790852170323173, 0.09004727513500743, 0.07257983577089511, 0.04825671729389702, 0.07124492411554617, 0.07040327562346937, 0.06655126813237855, 0.05350842973622616, 0.06212576268466441, 0.1519224640871717, 0.13582704034487558, 0.19257118170099452, 0.1538675083383294, 0.14792441691492308, 0.1264476462958739, 0.1321653762834687, 0.1465720008006841, 0.14243845578727343, 0.25155839422253845, 0.2272409615758204, 0.2042052538389303, 0.2115878296185575, 0.25400746940292473, 0.1971239571715523, 0.2460950366871577, 0.20558900092165966, 0.2068358650904858, 0.183935306259297, 0.14961875646094758, 0.1682398103677024, 0.16575647060890897, 0.12172316548846451, 0.13642235669061942, 0.17072167393529758, 0.15182564931451947, 0.17937944158252672, 0.16748674658317853, 0.1858972833538578, 0.16173599888051626, 0.17837918535454433, 0.19464407445869847, 0.18607034508224085, 0.14513653244698232, 0.18712900296791413, 0.16189659737901352, 0.1736161336196912, 0.17978263472050182, 0.19282548768936392, 0.16950805628038068, 0.16308995090004375, 0.16018802229961038, 0.16139743828645747, 0.1586956641116356, 0.1622051321645891, 0.1683613926531734, 0.3059751960515056, 0.23215876469681984, 0.19349337741251693, 0.4117061491041353, 0.261296115289111, 0.3512081416789732, 0.17485641567181742, 0.1839999533632034, 0.2589263868636883, 0.42732237178796817, 0.24259537445827795, 0.19212646284871238, 0.20031791988892433, 0.1627306954546095, 0.29076728201012647, 0.26275289091796017, 0.21071123936770242, 0.18809683543085876, 0.19396468018877644, 0.1727556690670763, 0.17780985494062373, 0.17689706427670093, 0.18333467803478165, 0.18901906590922213, 0.18261838063160685, 0.17864078242641057, 0.0540975628928676, 0.08097326060458798, 0.07304781016859507, 0.05465664525944469, 0.06774518126852924, 0.07188254334879363, 0.054598858847753395, 0.052287753185889074, 0.050562072827425086]}, "mutation_prompt": null}
{"id": "d1487ea4-4cdd-4499-8b32-3fe1a309986e", "solution": "import numpy as np\n\nclass EnhancedDynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedDynamicDEAPSO", "description": "Enhanced DynamicDEAPSO algorithm with adaptive population size and mutation distribution strategy for improved exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": 0.1611464199901182, "feedback": "The algorithm EnhancedDynamicDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.25676394684950665, 0.3076490057724707, 0.27292823208146144, 0.3110332305066128, 0.4402820650786087, 0.2712650155517553, 0.31322138288796986, 0.31678301432382605, 0.27378610245554724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07367541770682529, 0.06176609709834535, 0.07259365481686186, 0.05081698257355671, 0.07457802210989395, 0.10819066708612479, 0.06013989795233632, 0.07474174234832154, 0.06120983661708945, 0.028022626914809057, 0.06384084495734665, 0.03573888354297594, 0.07414109652068179, 0.046491131343042835, 0.056124605616844514, 0.0787424839531079, 0.039667241161270295, 0.06150696242564757, 0.9333026843394249, 0.8989213917292405, 0.9824561605384684, 0.9875485883903143, 0.12007767360533295, 0.9007068944241148, 0.9675316208136192, 0.9923681148328628, 0.9217283599526889, 0.16895972803981352, 0.11222707248875319, 0.12844501052663104, 0.14360162087234907, 0.09772207022394597, 0.11293589975425333, 0.1188870072508107, 0.12486764023680008, 0.17846577661707053, 0.17205530530603497, 0.15408721311218598, 0.09802954951144216, 0.21987425248722092, 0.17052576199522262, 0.1863897137028777, 0.1544792300930461, 0.22148687752897311, 0.18210045689234877, 0.11718998862333352, 0.05696024185079318, 0.13159595325481588, 0.12359472732712362, 0.10047772131988497, 0.13008165374042635, 0.10937637787458387, 0.07702259526748656, 0.11828532445802142, 0.15501118333240338, 0.1179113664162067, 0.04553269936207949, 0.12651947474131153, 0.10951064899389751, 0.07114017266750905, 0.08640829794886506, 0.09474954968027849, 0.11687843182120228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051844077991427207, 0.0701025849029836, 0.04639266529269859, 0.06103111465410527, 0.04812421408979772, 0.0612407765132601, 0.05201552663867992, 0.05954014237986738, 0.04630525522398288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770193749031714, 0.06658144266075527, 0.062411094278101875, 0.022225406468599607, 0.025620623451947044, 9.999999999998899e-05, 0.006215402689419225, 0.018811597685028936, 0.015367562401513934, 0.338755909654032, 0.2904123829368105, 0.2642763686882026, 0.29318864193374117, 0.306129314035556, 0.31430603692202375, 0.2711677687403372, 0.29883490698200754, 0.2531113782371275, 0.0790852170323173, 0.09004727513500743, 0.07257983577089511, 0.04825671729389702, 0.07124492411554617, 0.07040327562346937, 0.06655126813237855, 0.05350842973622616, 0.06212576268466441, 0.1519224640871717, 0.13582704034487558, 0.19257118170099452, 0.1538675083383294, 0.14792441691492308, 0.1264476462958739, 0.1321653762834687, 0.1465720008006841, 0.14243845578727343, 0.25155839422253845, 0.2272409615758204, 0.2042052538389303, 0.2115878296185575, 0.25400746940292473, 0.1971239571715523, 0.2460950366871577, 0.20558900092165966, 0.2068358650904858, 0.183935306259297, 0.14961875646094758, 0.1682398103677024, 0.16575647060890897, 0.12172316548846451, 0.13642235669061942, 0.17072167393529758, 0.15182564931451947, 0.17937944158252672, 0.16748674658317853, 0.1858972833538578, 0.16173599888051626, 0.17837918535454433, 0.19464407445869847, 0.18607034508224085, 0.14513653244698232, 0.18712900296791413, 0.16189659737901352, 0.1736161336196912, 0.17978263472050182, 0.19282548768936392, 0.16950805628038068, 0.16308995090004375, 0.16018802229961038, 0.16139743828645747, 0.1586956641116356, 0.1622051321645891, 0.1683613926531734, 0.3059751960515056, 0.23215876469681984, 0.19349337741251693, 0.4117061491041353, 0.261296115289111, 0.3512081416789732, 0.17485641567181742, 0.1839999533632034, 0.2589263868636883, 0.42732237178796817, 0.24259537445827795, 0.19212646284871238, 0.20031791988892433, 0.1627306954546095, 0.29076728201012647, 0.26275289091796017, 0.21071123936770242, 0.18809683543085876, 0.19396468018877644, 0.1727556690670763, 0.17780985494062373, 0.17689706427670093, 0.18333467803478165, 0.18901906590922213, 0.18261838063160685, 0.17864078242641057, 0.0540975628928676, 0.08097326060458798, 0.07304781016859507, 0.05465664525944469, 0.06774518126852924, 0.07188254334879363, 0.054598858847753395, 0.052287753185889074, 0.050562072827425086]}, "mutation_prompt": null}
{"id": "a5af4c16-2214-4d5e-8de1-0efa15c50a23", "solution": "import numpy as np\n\nclass DynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "DynamicDEAPSO", "description": "Implement a dynamic parameter adaptation strategy for the mutation and crossover rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.25676394684950665, 0.3076490057724707, 0.27292823208146144, 0.3110332305066128, 0.4402820650786087, 0.2712650155517553, 0.31322138288796986, 0.31678301432382605, 0.27378610245554724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07367541770682529, 0.06176609709834535, 0.07259365481686186, 0.05081698257355671, 0.07457802210989395, 0.10819066708612479, 0.06013989795233632, 0.07474174234832154, 0.06120983661708945, 0.028022626914809057, 0.06384084495734665, 0.03573888354297594, 0.07414109652068179, 0.046491131343042835, 0.056124605616844514, 0.0787424839531079, 0.039667241161270295, 0.06150696242564757, 0.9333026843394249, 0.8989213917292405, 0.9824561605384684, 0.9875485883903143, 0.12007767360533295, 0.9007068944241148, 0.9675316208136192, 0.9923681148328628, 0.9217283599526889, 0.16895972803981352, 0.11222707248875319, 0.12844501052663104, 0.14360162087234907, 0.09772207022394597, 0.11293589975425333, 0.1188870072508107, 0.12486764023680008, 0.17846577661707053, 0.17205530530603497, 0.15408721311218598, 0.09802954951144216, 0.21987425248722092, 0.17052576199522262, 0.1863897137028777, 0.1544792300930461, 0.22148687752897311, 0.18210045689234877, 0.11718998862333352, 0.05696024185079318, 0.13159595325481588, 0.12359472732712362, 0.10047772131988497, 0.13008165374042635, 0.10937637787458387, 0.07702259526748656, 0.11828532445802142, 0.15501118333240338, 0.1179113664162067, 0.04553269936207949, 0.12651947474131153, 0.10951064899389751, 0.07114017266750905, 0.08640829794886506, 0.09474954968027849, 0.11687843182120228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051844077991427207, 0.0701025849029836, 0.04639266529269859, 0.06103111465410527, 0.04812421408979772, 0.0612407765132601, 0.05201552663867992, 0.05954014237986738, 0.04630525522398288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770193749031714, 0.06658144266075527, 0.062411094278101875, 0.022225406468599607, 0.025620623451947044, 9.999999999998899e-05, 0.006215402689419225, 0.018811597685028936, 0.015367562401513934, 0.338755909654032, 0.2904123829368105, 0.2642763686882026, 0.29318864193374117, 0.306129314035556, 0.31430603692202375, 0.2711677687403372, 0.29883490698200754, 0.2531113782371275, 0.0790852170323173, 0.09004727513500743, 0.07257983577089511, 0.04825671729389702, 0.07124492411554617, 0.07040327562346937, 0.06655126813237855, 0.05350842973622616, 0.06212576268466441, 0.1519224640871717, 0.13582704034487558, 0.19257118170099452, 0.1538675083383294, 0.14792441691492308, 0.1264476462958739, 0.1321653762834687, 0.1465720008006841, 0.14243845578727343, 0.25155839422253845, 0.2272409615758204, 0.2042052538389303, 0.2115878296185575, 0.25400746940292473, 0.1971239571715523, 0.2460950366871577, 0.20558900092165966, 0.2068358650904858, 0.183935306259297, 0.14961875646094758, 0.1682398103677024, 0.16575647060890897, 0.12172316548846451, 0.13642235669061942, 0.17072167393529758, 0.15182564931451947, 0.17937944158252672, 0.16748674658317853, 0.1858972833538578, 0.16173599888051626, 0.17837918535454433, 0.19464407445869847, 0.18607034508224085, 0.14513653244698232, 0.18712900296791413, 0.16189659737901352, 0.1736161336196912, 0.17978263472050182, 0.19282548768936392, 0.16950805628038068, 0.16308995090004375, 0.16018802229961038, 0.16139743828645747, 0.1586956641116356, 0.1622051321645891, 0.1683613926531734, 0.3059751960515056, 0.23215876469681984, 0.19349337741251693, 0.4117061491041353, 0.261296115289111, 0.3512081416789732, 0.17485641567181742, 0.1839999533632034, 0.2589263868636883, 0.42732237178796817, 0.24259537445827795, 0.19212646284871238, 0.20031791988892433, 0.1627306954546095, 0.29076728201012647, 0.26275289091796017, 0.21071123936770242, 0.18809683543085876, 0.19396468018877644, 0.1727556690670763, 0.17780985494062373, 0.17689706427670093, 0.18333467803478165, 0.18901906590922213, 0.18261838063160685, 0.17864078242641057, 0.0540975628928676, 0.08097326060458798, 0.07304781016859507, 0.05465664525944469, 0.06774518126852924, 0.07188254334879363, 0.054598858847753395, 0.052287753185889074, 0.050562072827425086]}, "mutation_prompt": null}
{"id": "a7b92b7d-073b-4de4-8b30-096ec7666318", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedDynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def calc_crowding_distance(population):\n            distances = cdist(population, population, 'euclidean')\n            crowding_distances = np.sum(distances, axis=1)\n            return crowding_distances\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            crowding_distances = calc_crowding_distance(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedDynamicDEAPSO", "description": "Enhance the diversity maintenance by incorporating crowding distance calculation to promote better exploration in the search space.", "configspace": "", "generation": 21, "fitness": 0.1611464199901182, "feedback": "The algorithm EnhancedDynamicDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.25676394684950665, 0.3076490057724707, 0.27292823208146144, 0.3110332305066128, 0.4402820650786087, 0.2712650155517553, 0.31322138288796986, 0.31678301432382605, 0.27378610245554724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07367541770682529, 0.06176609709834535, 0.07259365481686186, 0.05081698257355671, 0.07457802210989395, 0.10819066708612479, 0.06013989795233632, 0.07474174234832154, 0.06120983661708945, 0.028022626914809057, 0.06384084495734665, 0.03573888354297594, 0.07414109652068179, 0.046491131343042835, 0.056124605616844514, 0.0787424839531079, 0.039667241161270295, 0.06150696242564757, 0.9333026843394249, 0.8989213917292405, 0.9824561605384684, 0.9875485883903143, 0.12007767360533295, 0.9007068944241148, 0.9675316208136192, 0.9923681148328628, 0.9217283599526889, 0.16895972803981352, 0.11222707248875319, 0.12844501052663104, 0.14360162087234907, 0.09772207022394597, 0.11293589975425333, 0.1188870072508107, 0.12486764023680008, 0.17846577661707053, 0.17205530530603497, 0.15408721311218598, 0.09802954951144216, 0.21987425248722092, 0.17052576199522262, 0.1863897137028777, 0.1544792300930461, 0.22148687752897311, 0.18210045689234877, 0.11718998862333352, 0.05696024185079318, 0.13159595325481588, 0.12359472732712362, 0.10047772131988497, 0.13008165374042635, 0.10937637787458387, 0.07702259526748656, 0.11828532445802142, 0.15501118333240338, 0.1179113664162067, 0.04553269936207949, 0.12651947474131153, 0.10951064899389751, 0.07114017266750905, 0.08640829794886506, 0.09474954968027849, 0.11687843182120228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051844077991427207, 0.0701025849029836, 0.04639266529269859, 0.06103111465410527, 0.04812421408979772, 0.0612407765132601, 0.05201552663867992, 0.05954014237986738, 0.04630525522398288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770193749031714, 0.06658144266075527, 0.062411094278101875, 0.022225406468599607, 0.025620623451947044, 9.999999999998899e-05, 0.006215402689419225, 0.018811597685028936, 0.015367562401513934, 0.338755909654032, 0.2904123829368105, 0.2642763686882026, 0.29318864193374117, 0.306129314035556, 0.31430603692202375, 0.2711677687403372, 0.29883490698200754, 0.2531113782371275, 0.0790852170323173, 0.09004727513500743, 0.07257983577089511, 0.04825671729389702, 0.07124492411554617, 0.07040327562346937, 0.06655126813237855, 0.05350842973622616, 0.06212576268466441, 0.1519224640871717, 0.13582704034487558, 0.19257118170099452, 0.1538675083383294, 0.14792441691492308, 0.1264476462958739, 0.1321653762834687, 0.1465720008006841, 0.14243845578727343, 0.25155839422253845, 0.2272409615758204, 0.2042052538389303, 0.2115878296185575, 0.25400746940292473, 0.1971239571715523, 0.2460950366871577, 0.20558900092165966, 0.2068358650904858, 0.183935306259297, 0.14961875646094758, 0.1682398103677024, 0.16575647060890897, 0.12172316548846451, 0.13642235669061942, 0.17072167393529758, 0.15182564931451947, 0.17937944158252672, 0.16748674658317853, 0.1858972833538578, 0.16173599888051626, 0.17837918535454433, 0.19464407445869847, 0.18607034508224085, 0.14513653244698232, 0.18712900296791413, 0.16189659737901352, 0.1736161336196912, 0.17978263472050182, 0.19282548768936392, 0.16950805628038068, 0.16308995090004375, 0.16018802229961038, 0.16139743828645747, 0.1586956641116356, 0.1622051321645891, 0.1683613926531734, 0.3059751960515056, 0.23215876469681984, 0.19349337741251693, 0.4117061491041353, 0.261296115289111, 0.3512081416789732, 0.17485641567181742, 0.1839999533632034, 0.2589263868636883, 0.42732237178796817, 0.24259537445827795, 0.19212646284871238, 0.20031791988892433, 0.1627306954546095, 0.29076728201012647, 0.26275289091796017, 0.21071123936770242, 0.18809683543085876, 0.19396468018877644, 0.1727556690670763, 0.17780985494062373, 0.17689706427670093, 0.18333467803478165, 0.18901906590922213, 0.18261838063160685, 0.17864078242641057, 0.0540975628928676, 0.08097326060458798, 0.07304781016859507, 0.05465664525944469, 0.06774518126852924, 0.07188254334879363, 0.054598858847753395, 0.052287753185889074, 0.050562072827425086]}, "mutation_prompt": null}
{"id": "d887c6f6-a7f8-41f5-b2b2-c2534dcb8621", "solution": "import numpy as np\n\nclass EnhancedDynamicDEAPSO(DynamicDEAPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def levy_flight(self, x, beta=1.5, scale=0.1):\n        levy = np.random.standard_t(beta, size=x.shape) * scale\n        return np.clip(x + levy, -5.0, 5.0)\n\n    def __call__(self, func):\n        def levy_mutate(x, beta=1.5, scale=0.1):\n            return np.clip(x + np.random.standard_t(beta, size=x.shape) * scale, -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = levy_mutate(population[i])\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self.levy_flight(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedDynamicDEAPSO", "description": "Enhance exploration by introducing a new mutation strategy based on Levy flights to escape local optima.", "configspace": "", "generation": 22, "fitness": 0.1481053506082262, "feedback": "The algorithm EnhancedDynamicDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.33337112317676065, 0.3095351770813747, 0.3668351104044931, 0.2958283529625436, 0.3569205341193127, 0.31957481796731824, 0.34181787430885, 0.28027360189700223, 0.2933253466915804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0720459432538142, 0.07311918017835883, 0.07165413853301184, 0.08100409208966053, 0.09050299178013232, 0.06709582429102268, 0.12926552220602916, 0.07443479001426478, 0.07559927108898157, 0.062345380581459775, 0.06539280532446534, 0.06577316446691495, 0.07645600141037445, 0.060802760988102666, 0.07232668496726369, 0.0768565728838414, 0.0628871375144896, 0.06389589102327664, 0.3179407267754226, 0.8779183799868088, 0.9904507589737909, 0.3062875083299923, 0.2993314345194824, 0.25704785515944784, 0.30697585862104093, 0.9247677779437222, 0.23779207953561698, 0.15271634143180945, 0.13043151534265873, 0.15198959987232397, 0.18919447083222207, 0.1883859375668644, 0.17950843650498005, 0.15487221316627198, 0.15941544834390953, 0.14376589696482278, 0.21026063725119915, 0.21431633814006135, 0.24320911676757417, 0.1955600496271538, 0.2155320282857871, 0.20869622485901562, 0.227222449350319, 0.2372385039861329, 0.12237186272416989, 0.09321543379097108, 0.0782233460466849, 0.08578969406100057, 0.101580185289885, 0.08641327752195282, 0.03798707311303273, 0.10216615261350248, 0.10788174788485472, 0.115050028320138, 0.11030212866149414, 0.06668607629919165, 0.021924352085943788, 0.06732315152933166, 0.07908003293574561, 0.08704451315797324, 0.1048633222810097, 0.03871975002795858, 0.05985895248762896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07163908581591749, 0.04581201771885968, 0.07050754229728684, 0.04016396696926605, 0.06674377234925011, 0.030491400460176732, 0.08109250429710757, 0.08439608717253666, 0.07280247139327001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08128645289465564, 0.03817166115927817, 0.04397547920039102, 0.06285724000137216, 0.011990413610929118, 0.041503337154651265, 0.05994062659432786, 0.051097458702492604, 0.05542455482975728, 0.32567744812852517, 0.29510811975619533, 0.3341430165912439, 0.3069843359290093, 0.31673634294804065, 0.3228032711521761, 0.3402007801152135, 0.32014912307594434, 0.3042246563764809, 0.06843816443925388, 0.0879277267682077, 0.07360492713530964, 0.07793524762703041, 0.07177618159738408, 0.08573372411052638, 0.057679702260317156, 0.07165290722526407, 0.06464159833004124, 0.170892123369339, 0.15591406215432513, 0.16434098927020535, 0.13497284332348458, 0.15788919607196117, 0.1520914170070662, 0.16105201814238423, 0.18152961541467938, 0.16064212720852933, 0.2116574828475849, 0.20556396759653905, 0.23452257217886063, 0.19798008381760102, 0.2352006366665158, 0.215704536409152, 0.17799809517281195, 0.19808623023695238, 0.193545409878489, 0.1529067201434371, 0.17286818600248222, 0.19537191144724408, 0.13587273411892953, 0.1412912674869753, 0.14178954205768968, 0.18299457971558053, 0.16635364873595282, 0.18173034741071414, 0.1876720202438279, 0.20545468792578536, 0.16759374804350646, 0.14512631892992756, 0.16249379988333146, 0.15592775299115824, 0.18285392153252578, 0.1986856978045728, 0.19271015877322473, 0.16149269743582373, 0.1659362399413421, 0.16943680671247507, 0.1682021802801471, 0.1955082517859804, 0.16460314429137657, 0.16755269252479343, 0.17226711149594143, 0.1642872911741755, 0.15431113519446293, 0.19636336639714191, 0.16225615976325625, 0.23110294573288104, 0.18438320383606266, 0.14621128994205668, 0.317541706457648, 0.26889345902526085, 0.16270520389104026, 0.3190568172906607, 0.19651772371142906, 0.27165990974219434, 0.18876440639921388, 0.16565713639402146, 0.16621162457874938, 0.2208944975258088, 0.244080202200204, 0.15397327190280063, 0.18892506487554594, 0.19220427767628923, 0.19149983781314017, 0.19823480391732984, 0.17616961869271996, 0.19432151416010357, 0.17685927928107736, 0.17234994155950623, 0.19511860102808798, 0.06379353875053129, 0.07575013922783724, 0.054261582410568776, 0.05752071192978925, 0.07021923205716973, 0.059126350468165945, 0.08683242780526146, 0.054518842937250844, 0.059636934782896445]}, "mutation_prompt": null}
{"id": "c0093b20-6da6-46e8-a6e6-ce509b3185ad", "solution": "import numpy as np\n\nclass ImprovedDynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c) + np.random.normal(0, 0.1), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 0.5, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        evaluations = self.population_size\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            evaluations += self.population_size\n            if evaluations >= self.budget:\n                break\n        return best", "name": "ImprovedDynamicDEAPSO", "description": "Enhance exploration by adding a Gaussian distribution to mutation and introducing a new termination condition based on function evaluations.", "configspace": "", "generation": 23, "fitness": 0.14860302146838972, "feedback": "The algorithm ImprovedDynamicDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.12.", "error": "", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.28360595811640144, 0.31446938795037027, 0.3007978635679631, 0.2871186070431102, 0.29559760051755424, 0.3557108956534758, 0.32603992923418246, 0.3071493736334763, 0.3381483988264087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0941436360589325, 0.06976980005493694, 0.07564018353655722, 0.09486248721004964, 0.098778205873715, 0.09031706076758494, 0.0781409378225304, 0.0608538428780272, 0.07903711860813634, 0.048581355030212214, 0.04856590904372682, 0.06975759810023152, 0.057210718818451634, 0.060180017044001555, 0.05119702450237551, 0.06160073610703798, 0.06812528922042815, 0.0658108476327498, 0.4133244418725207, 0.9402247219901871, 0.26957482064966976, 0.13422601308342852, 0.24791391821189368, 0.18232807126655182, 0.20186202262794817, 0.9656375579772657, 0.17147883891406746, 0.20163335138701655, 0.1979884217450546, 0.16685568342825385, 0.1089938198239856, 0.19870739561913364, 0.20834326535674674, 0.22549219467217974, 0.18499190702988766, 0.13625810887741008, 0.22332781355104603, 0.18791822794124258, 0.1567864817868725, 0.24327301418562763, 0.2503102017566684, 0.1938902171697522, 0.16927570455358087, 0.23796630377382622, 0.16916899623895498, 0.10626075581237238, 0.11658237119931802, 0.11526984708483667, 0.10851746259305839, 0.051399610257348294, 0.10964172235947789, 0.1647834503520873, 0.11181545893527234, 0.06780708919155187, 0.14367145694027061, 0.11060934479794216, 0.11964122902384644, 0.13421188418124097, 0.11617606339151898, 0.04758263270288576, 0.12744626055623254, 9.999999999998899e-05, 0.12422281501943111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045526950391773235, 0.0783490328311216, 0.04547764331373805, 0.04995662708562232, 0.05850574658433361, 0.0580934416879767, 0.032816921448199365, 0.09155849879632882, 0.06044180195631488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04900389693043161, 0.047668566939713664, 0.038659652405488854, 0.010988674532157683, 0.007515994875644361, 0.0879625104037044, 0.04353215232981911, 0.07438098329750797, 0.06347562402381568, 0.34986713669407343, 0.33223597707704744, 0.3518486779528909, 0.3105319265889612, 0.3622854827555443, 0.3675082447413027, 0.25896608478097705, 0.2977078387298784, 0.26263011042422846, 0.07117444210760537, 0.07390898021702452, 0.08081009003089223, 0.06857699556521535, 0.08230660578778848, 0.07639546119979002, 0.10319228626130894, 0.08840347198600662, 0.0913891597682095, 0.15913065593748166, 0.15212306271784326, 0.1519142743351063, 0.1524938454803223, 0.17101243468638927, 0.15238846655427096, 0.16423272739473738, 0.1565025155657921, 0.18520148351655574, 0.2459049737725838, 0.21405320082906232, 0.23490195071430342, 0.22798765956467215, 0.22495736083522, 0.2287711038450887, 0.2303253276291386, 0.23390393222303363, 0.26506599274084763, 0.1529649019023942, 0.17902658996289322, 0.16771053800010283, 0.1717797773428611, 0.1493108267686648, 0.18028753849043155, 0.1732180701351168, 0.163937819757197, 0.14390237965393649, 0.19699758364743625, 0.1766133451620724, 0.18060393922242934, 0.1929093462479795, 0.1803819957970434, 0.18256019728923678, 0.17655716826047696, 0.21207765582971472, 0.1642368149138692, 0.18521871674240042, 0.17602972372726855, 0.1770899099178569, 0.16092931711130187, 0.17987749977957468, 0.17574566825358506, 0.1653529566106583, 0.16991646327028176, 0.16606111549489122, 0.18596566261372482, 0.29026125450483586, 0.17249551593703816, 0.37350994993889164, 0.1930870956099362, 0.15533577618404537, 0.2591949160083704, 0.17184247409792375, 0.1732800646479531, 0.4879567814190373, 0.1955887574416172, 0.16697020965473508, 0.17715633112320084, 0.22149135402779152, 0.11986288937573297, 0.19272245638736907, 0.14066603849833714, 0.26716960719111427, 0.2020922662323229, 0.17621025569281223, 0.17527471370390557, 0.17841292906124195, 0.1817302665923518, 0.18644759535266175, 0.18210837657074053, 0.1900070568161032, 0.1872869725132078, 0.06973030508786193, 0.06610556762338438, 0.07095506928307227, 0.10023932726535878, 0.08495286325517648, 0.08969347352964907, 0.08068377461997023, 0.07669685098006207, 0.08184356545199079]}, "mutation_prompt": null}
{"id": "ea413d04-6c39-4ec8-927b-fd897ff7cdfb", "solution": "import numpy as np\n\nclass DynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "DynamicDEAPSO", "description": "Implement a dynamic parameter adaptation strategy for the mutation and crossover rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.25676394684950665, 0.3076490057724707, 0.27292823208146144, 0.3110332305066128, 0.4402820650786087, 0.2712650155517553, 0.31322138288796986, 0.31678301432382605, 0.27378610245554724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07367541770682529, 0.06176609709834535, 0.07259365481686186, 0.05081698257355671, 0.07457802210989395, 0.10819066708612479, 0.06013989795233632, 0.07474174234832154, 0.06120983661708945, 0.028022626914809057, 0.06384084495734665, 0.03573888354297594, 0.07414109652068179, 0.046491131343042835, 0.056124605616844514, 0.0787424839531079, 0.039667241161270295, 0.06150696242564757, 0.9333026843394249, 0.8989213917292405, 0.9824561605384684, 0.9875485883903143, 0.12007767360533295, 0.9007068944241148, 0.9675316208136192, 0.9923681148328628, 0.9217283599526889, 0.16895972803981352, 0.11222707248875319, 0.12844501052663104, 0.14360162087234907, 0.09772207022394597, 0.11293589975425333, 0.1188870072508107, 0.12486764023680008, 0.17846577661707053, 0.17205530530603497, 0.15408721311218598, 0.09802954951144216, 0.21987425248722092, 0.17052576199522262, 0.1863897137028777, 0.1544792300930461, 0.22148687752897311, 0.18210045689234877, 0.11718998862333352, 0.05696024185079318, 0.13159595325481588, 0.12359472732712362, 0.10047772131988497, 0.13008165374042635, 0.10937637787458387, 0.07702259526748656, 0.11828532445802142, 0.15501118333240338, 0.1179113664162067, 0.04553269936207949, 0.12651947474131153, 0.10951064899389751, 0.07114017266750905, 0.08640829794886506, 0.09474954968027849, 0.11687843182120228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051844077991427207, 0.0701025849029836, 0.04639266529269859, 0.06103111465410527, 0.04812421408979772, 0.0612407765132601, 0.05201552663867992, 0.05954014237986738, 0.04630525522398288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770193749031714, 0.06658144266075527, 0.062411094278101875, 0.022225406468599607, 0.025620623451947044, 9.999999999998899e-05, 0.006215402689419225, 0.018811597685028936, 0.015367562401513934, 0.338755909654032, 0.2904123829368105, 0.2642763686882026, 0.29318864193374117, 0.306129314035556, 0.31430603692202375, 0.2711677687403372, 0.29883490698200754, 0.2531113782371275, 0.0790852170323173, 0.09004727513500743, 0.07257983577089511, 0.04825671729389702, 0.07124492411554617, 0.07040327562346937, 0.06655126813237855, 0.05350842973622616, 0.06212576268466441, 0.1519224640871717, 0.13582704034487558, 0.19257118170099452, 0.1538675083383294, 0.14792441691492308, 0.1264476462958739, 0.1321653762834687, 0.1465720008006841, 0.14243845578727343, 0.25155839422253845, 0.2272409615758204, 0.2042052538389303, 0.2115878296185575, 0.25400746940292473, 0.1971239571715523, 0.2460950366871577, 0.20558900092165966, 0.2068358650904858, 0.183935306259297, 0.14961875646094758, 0.1682398103677024, 0.16575647060890897, 0.12172316548846451, 0.13642235669061942, 0.17072167393529758, 0.15182564931451947, 0.17937944158252672, 0.16748674658317853, 0.1858972833538578, 0.16173599888051626, 0.17837918535454433, 0.19464407445869847, 0.18607034508224085, 0.14513653244698232, 0.18712900296791413, 0.16189659737901352, 0.1736161336196912, 0.17978263472050182, 0.19282548768936392, 0.16950805628038068, 0.16308995090004375, 0.16018802229961038, 0.16139743828645747, 0.1586956641116356, 0.1622051321645891, 0.1683613926531734, 0.3059751960515056, 0.23215876469681984, 0.19349337741251693, 0.4117061491041353, 0.261296115289111, 0.3512081416789732, 0.17485641567181742, 0.1839999533632034, 0.2589263868636883, 0.42732237178796817, 0.24259537445827795, 0.19212646284871238, 0.20031791988892433, 0.1627306954546095, 0.29076728201012647, 0.26275289091796017, 0.21071123936770242, 0.18809683543085876, 0.19396468018877644, 0.1727556690670763, 0.17780985494062373, 0.17689706427670093, 0.18333467803478165, 0.18901906590922213, 0.18261838063160685, 0.17864078242641057, 0.0540975628928676, 0.08097326060458798, 0.07304781016859507, 0.05465664525944469, 0.06774518126852924, 0.07188254334879363, 0.054598858847753395, 0.052287753185889074, 0.050562072827425086]}, "mutation_prompt": null}
{"id": "219afad4-5157-4433-a53e-c25d63a9b85f", "solution": "import numpy as np\n\nclass DynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "DynamicDEAPSO", "description": "Implement a dynamic parameter adaptation strategy for the mutation and crossover rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.25676394684950665, 0.3076490057724707, 0.27292823208146144, 0.3110332305066128, 0.4402820650786087, 0.2712650155517553, 0.31322138288796986, 0.31678301432382605, 0.27378610245554724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07367541770682529, 0.06176609709834535, 0.07259365481686186, 0.05081698257355671, 0.07457802210989395, 0.10819066708612479, 0.06013989795233632, 0.07474174234832154, 0.06120983661708945, 0.028022626914809057, 0.06384084495734665, 0.03573888354297594, 0.07414109652068179, 0.046491131343042835, 0.056124605616844514, 0.0787424839531079, 0.039667241161270295, 0.06150696242564757, 0.9333026843394249, 0.8989213917292405, 0.9824561605384684, 0.9875485883903143, 0.12007767360533295, 0.9007068944241148, 0.9675316208136192, 0.9923681148328628, 0.9217283599526889, 0.16895972803981352, 0.11222707248875319, 0.12844501052663104, 0.14360162087234907, 0.09772207022394597, 0.11293589975425333, 0.1188870072508107, 0.12486764023680008, 0.17846577661707053, 0.17205530530603497, 0.15408721311218598, 0.09802954951144216, 0.21987425248722092, 0.17052576199522262, 0.1863897137028777, 0.1544792300930461, 0.22148687752897311, 0.18210045689234877, 0.11718998862333352, 0.05696024185079318, 0.13159595325481588, 0.12359472732712362, 0.10047772131988497, 0.13008165374042635, 0.10937637787458387, 0.07702259526748656, 0.11828532445802142, 0.15501118333240338, 0.1179113664162067, 0.04553269936207949, 0.12651947474131153, 0.10951064899389751, 0.07114017266750905, 0.08640829794886506, 0.09474954968027849, 0.11687843182120228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051844077991427207, 0.0701025849029836, 0.04639266529269859, 0.06103111465410527, 0.04812421408979772, 0.0612407765132601, 0.05201552663867992, 0.05954014237986738, 0.04630525522398288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770193749031714, 0.06658144266075527, 0.062411094278101875, 0.022225406468599607, 0.025620623451947044, 9.999999999998899e-05, 0.006215402689419225, 0.018811597685028936, 0.015367562401513934, 0.338755909654032, 0.2904123829368105, 0.2642763686882026, 0.29318864193374117, 0.306129314035556, 0.31430603692202375, 0.2711677687403372, 0.29883490698200754, 0.2531113782371275, 0.0790852170323173, 0.09004727513500743, 0.07257983577089511, 0.04825671729389702, 0.07124492411554617, 0.07040327562346937, 0.06655126813237855, 0.05350842973622616, 0.06212576268466441, 0.1519224640871717, 0.13582704034487558, 0.19257118170099452, 0.1538675083383294, 0.14792441691492308, 0.1264476462958739, 0.1321653762834687, 0.1465720008006841, 0.14243845578727343, 0.25155839422253845, 0.2272409615758204, 0.2042052538389303, 0.2115878296185575, 0.25400746940292473, 0.1971239571715523, 0.2460950366871577, 0.20558900092165966, 0.2068358650904858, 0.183935306259297, 0.14961875646094758, 0.1682398103677024, 0.16575647060890897, 0.12172316548846451, 0.13642235669061942, 0.17072167393529758, 0.15182564931451947, 0.17937944158252672, 0.16748674658317853, 0.1858972833538578, 0.16173599888051626, 0.17837918535454433, 0.19464407445869847, 0.18607034508224085, 0.14513653244698232, 0.18712900296791413, 0.16189659737901352, 0.1736161336196912, 0.17978263472050182, 0.19282548768936392, 0.16950805628038068, 0.16308995090004375, 0.16018802229961038, 0.16139743828645747, 0.1586956641116356, 0.1622051321645891, 0.1683613926531734, 0.3059751960515056, 0.23215876469681984, 0.19349337741251693, 0.4117061491041353, 0.261296115289111, 0.3512081416789732, 0.17485641567181742, 0.1839999533632034, 0.2589263868636883, 0.42732237178796817, 0.24259537445827795, 0.19212646284871238, 0.20031791988892433, 0.1627306954546095, 0.29076728201012647, 0.26275289091796017, 0.21071123936770242, 0.18809683543085876, 0.19396468018877644, 0.1727556690670763, 0.17780985494062373, 0.17689706427670093, 0.18333467803478165, 0.18901906590922213, 0.18261838063160685, 0.17864078242641057, 0.0540975628928676, 0.08097326060458798, 0.07304781016859507, 0.05465664525944469, 0.06774518126852924, 0.07188254334879363, 0.054598858847753395, 0.052287753185889074, 0.050562072827425086]}, "mutation_prompt": null}
{"id": "ed78bceb-233f-4a20-95b3-11571063cec6", "solution": "import numpy as np\n\nclass DynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "DynamicDEAPSO", "description": "Implement a dynamic parameter adaptation strategy for the mutation and crossover rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.25676394684950665, 0.3076490057724707, 0.27292823208146144, 0.3110332305066128, 0.4402820650786087, 0.2712650155517553, 0.31322138288796986, 0.31678301432382605, 0.27378610245554724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07367541770682529, 0.06176609709834535, 0.07259365481686186, 0.05081698257355671, 0.07457802210989395, 0.10819066708612479, 0.06013989795233632, 0.07474174234832154, 0.06120983661708945, 0.028022626914809057, 0.06384084495734665, 0.03573888354297594, 0.07414109652068179, 0.046491131343042835, 0.056124605616844514, 0.0787424839531079, 0.039667241161270295, 0.06150696242564757, 0.9333026843394249, 0.8989213917292405, 0.9824561605384684, 0.9875485883903143, 0.12007767360533295, 0.9007068944241148, 0.9675316208136192, 0.9923681148328628, 0.9217283599526889, 0.16895972803981352, 0.11222707248875319, 0.12844501052663104, 0.14360162087234907, 0.09772207022394597, 0.11293589975425333, 0.1188870072508107, 0.12486764023680008, 0.17846577661707053, 0.17205530530603497, 0.15408721311218598, 0.09802954951144216, 0.21987425248722092, 0.17052576199522262, 0.1863897137028777, 0.1544792300930461, 0.22148687752897311, 0.18210045689234877, 0.11718998862333352, 0.05696024185079318, 0.13159595325481588, 0.12359472732712362, 0.10047772131988497, 0.13008165374042635, 0.10937637787458387, 0.07702259526748656, 0.11828532445802142, 0.15501118333240338, 0.1179113664162067, 0.04553269936207949, 0.12651947474131153, 0.10951064899389751, 0.07114017266750905, 0.08640829794886506, 0.09474954968027849, 0.11687843182120228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051844077991427207, 0.0701025849029836, 0.04639266529269859, 0.06103111465410527, 0.04812421408979772, 0.0612407765132601, 0.05201552663867992, 0.05954014237986738, 0.04630525522398288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770193749031714, 0.06658144266075527, 0.062411094278101875, 0.022225406468599607, 0.025620623451947044, 9.999999999998899e-05, 0.006215402689419225, 0.018811597685028936, 0.015367562401513934, 0.338755909654032, 0.2904123829368105, 0.2642763686882026, 0.29318864193374117, 0.306129314035556, 0.31430603692202375, 0.2711677687403372, 0.29883490698200754, 0.2531113782371275, 0.0790852170323173, 0.09004727513500743, 0.07257983577089511, 0.04825671729389702, 0.07124492411554617, 0.07040327562346937, 0.06655126813237855, 0.05350842973622616, 0.06212576268466441, 0.1519224640871717, 0.13582704034487558, 0.19257118170099452, 0.1538675083383294, 0.14792441691492308, 0.1264476462958739, 0.1321653762834687, 0.1465720008006841, 0.14243845578727343, 0.25155839422253845, 0.2272409615758204, 0.2042052538389303, 0.2115878296185575, 0.25400746940292473, 0.1971239571715523, 0.2460950366871577, 0.20558900092165966, 0.2068358650904858, 0.183935306259297, 0.14961875646094758, 0.1682398103677024, 0.16575647060890897, 0.12172316548846451, 0.13642235669061942, 0.17072167393529758, 0.15182564931451947, 0.17937944158252672, 0.16748674658317853, 0.1858972833538578, 0.16173599888051626, 0.17837918535454433, 0.19464407445869847, 0.18607034508224085, 0.14513653244698232, 0.18712900296791413, 0.16189659737901352, 0.1736161336196912, 0.17978263472050182, 0.19282548768936392, 0.16950805628038068, 0.16308995090004375, 0.16018802229961038, 0.16139743828645747, 0.1586956641116356, 0.1622051321645891, 0.1683613926531734, 0.3059751960515056, 0.23215876469681984, 0.19349337741251693, 0.4117061491041353, 0.261296115289111, 0.3512081416789732, 0.17485641567181742, 0.1839999533632034, 0.2589263868636883, 0.42732237178796817, 0.24259537445827795, 0.19212646284871238, 0.20031791988892433, 0.1627306954546095, 0.29076728201012647, 0.26275289091796017, 0.21071123936770242, 0.18809683543085876, 0.19396468018877644, 0.1727556690670763, 0.17780985494062373, 0.17689706427670093, 0.18333467803478165, 0.18901906590922213, 0.18261838063160685, 0.17864078242641057, 0.0540975628928676, 0.08097326060458798, 0.07304781016859507, 0.05465664525944469, 0.06774518126852924, 0.07188254334879363, 0.054598858847753395, 0.052287753185889074, 0.050562072827425086]}, "mutation_prompt": null}
{"id": "40021824-3eb9-47ab-b6b3-adbc37408d28", "solution": "import numpy as np\nfrom scipy.stats import logistic\n\nclass ChaoticDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def chaotic_map(self, x):\n        return 5*np.tanh(0.5*x)\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_de(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = chaotic_de(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            chaos = self.chaotic_map(best)\n            population += chaos\n            population = np.clip(population, -5.0, 5.0)\n        return best", "name": "ChaoticDEAPSO", "description": "Enhance DynamicDEAPSO algorithm by introducing a chaotic search mechanism to improve population diversity and convergence speed.", "configspace": "", "generation": 27, "fitness": 0.034881132520959875, "feedback": "The algorithm ChaoticDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.04.", "error": "", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.07181397830146763, 0.06432772651221763, 0.08740059223148, 0.06217844934883365, 0.05267361210777377, 0.025288696900545027, 0.05363971492551067, 0.05163064099738546, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01130956943226935, 0.01467079663371329, 0.001421413686796713, 9.999999999998899e-05, 0.0012186513362246743, 0.0015638617179065673, 0.018248263482334326, 0.008132043506974496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06642819734729533, 0.06795179285662745, 0.04399016787059373, 0.047782784345927976, 0.05277261300697278, 0.0432406227303751, 0.03327721672346584, 0.059478684902308676, 0.050496770010633574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.004562218041036625, 9.999999999998899e-05, 0.038861883505253214, 0.03345448003730911, 0.0009265490439976931, 0.0315734564194754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0394984650914213, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12420028335603273, 0.1070271971752389, 0.14838054695461433, 0.09425923977458062, 0.08051072568095674, 0.09580441870675127, 0.1240568991094797, 0.09716408355800721, 0.1210557193025883, 9.999999999998899e-05, 0.0018205009110715542, 9.999999999998899e-05, 0.006101769545772684, 9.999999999998899e-05, 0.01759993274736349, 9.999999999998899e-05, 9.999999999998899e-05, 0.0267656688986897, 0.07037543064596374, 0.06735693451091307, 0.0783872520393154, 0.09855305120349966, 0.06581597144687368, 0.05643121168494414, 0.05497932156064522, 0.08180093010886502, 0.07726393575557644, 0.0975510687754173, 0.0962505644704219, 0.10359778603806002, 0.10847166301008526, 0.09322121073191847, 0.09038344087750028, 0.13892039535035272, 0.1001363042967901, 0.10703879621307866, 0.03888924233485491, 0.03211701942128953, 0.05026581935463925, 0.044650675553987496, 0.023920401662649415, 0.037140780888393565, 0.08022616697605789, 0.038530072755655564, 0.08240466672370417, 0.0916346253723066, 0.06032920214938475, 0.11089882950468877, 0.10289055837941885, 0.06747178230817008, 0.08176222879441697, 0.12245976138762271, 0.06494044806858634, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 0.14483925347724802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04385307240429104, 0.056143274529988574, 0.05626128006000852, 0.06718871428537254, 0.1207914665021157, 0.061750941843425444, 0.06088618922663591, 0.056615725614002965, 0.053674301379695866, 0.03824121102611444, 0.03967402848431323, 0.016702378548294483, 0.018606112313171663, 0.021600351495484005, 0.045511073114331335, 0.03488024098735809, 0.0158348977852244, 0.04143420019681854, 0.14790996135454892, 0.12017502569002791, 0.14763022729669195, 0.13476068783098905, 0.13579003930280198, 0.13227176868813895, 0.1137175505172281, 0.10862764757569365, 0.14689007985489466, 0.0010975567950001208, 0.012204213037243616, 0.031393493129599714, 0.002375620545843393, 0.0058749879062220955, 0.00826091239954263, 0.00378771705097114, 9.999999999998899e-05, 0.007003257745281877]}, "mutation_prompt": null}
{"id": "7f929022-8e38-452c-b995-bb76d75af3aa", "solution": "import numpy as np\n\nclass DynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "DynamicDEAPSO", "description": "Implement a dynamic parameter adaptation strategy for the mutation and crossover rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.25676394684950665, 0.3076490057724707, 0.27292823208146144, 0.3110332305066128, 0.4402820650786087, 0.2712650155517553, 0.31322138288796986, 0.31678301432382605, 0.27378610245554724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07367541770682529, 0.06176609709834535, 0.07259365481686186, 0.05081698257355671, 0.07457802210989395, 0.10819066708612479, 0.06013989795233632, 0.07474174234832154, 0.06120983661708945, 0.028022626914809057, 0.06384084495734665, 0.03573888354297594, 0.07414109652068179, 0.046491131343042835, 0.056124605616844514, 0.0787424839531079, 0.039667241161270295, 0.06150696242564757, 0.9333026843394249, 0.8989213917292405, 0.9824561605384684, 0.9875485883903143, 0.12007767360533295, 0.9007068944241148, 0.9675316208136192, 0.9923681148328628, 0.9217283599526889, 0.16895972803981352, 0.11222707248875319, 0.12844501052663104, 0.14360162087234907, 0.09772207022394597, 0.11293589975425333, 0.1188870072508107, 0.12486764023680008, 0.17846577661707053, 0.17205530530603497, 0.15408721311218598, 0.09802954951144216, 0.21987425248722092, 0.17052576199522262, 0.1863897137028777, 0.1544792300930461, 0.22148687752897311, 0.18210045689234877, 0.11718998862333352, 0.05696024185079318, 0.13159595325481588, 0.12359472732712362, 0.10047772131988497, 0.13008165374042635, 0.10937637787458387, 0.07702259526748656, 0.11828532445802142, 0.15501118333240338, 0.1179113664162067, 0.04553269936207949, 0.12651947474131153, 0.10951064899389751, 0.07114017266750905, 0.08640829794886506, 0.09474954968027849, 0.11687843182120228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051844077991427207, 0.0701025849029836, 0.04639266529269859, 0.06103111465410527, 0.04812421408979772, 0.0612407765132601, 0.05201552663867992, 0.05954014237986738, 0.04630525522398288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770193749031714, 0.06658144266075527, 0.062411094278101875, 0.022225406468599607, 0.025620623451947044, 9.999999999998899e-05, 0.006215402689419225, 0.018811597685028936, 0.015367562401513934, 0.338755909654032, 0.2904123829368105, 0.2642763686882026, 0.29318864193374117, 0.306129314035556, 0.31430603692202375, 0.2711677687403372, 0.29883490698200754, 0.2531113782371275, 0.0790852170323173, 0.09004727513500743, 0.07257983577089511, 0.04825671729389702, 0.07124492411554617, 0.07040327562346937, 0.06655126813237855, 0.05350842973622616, 0.06212576268466441, 0.1519224640871717, 0.13582704034487558, 0.19257118170099452, 0.1538675083383294, 0.14792441691492308, 0.1264476462958739, 0.1321653762834687, 0.1465720008006841, 0.14243845578727343, 0.25155839422253845, 0.2272409615758204, 0.2042052538389303, 0.2115878296185575, 0.25400746940292473, 0.1971239571715523, 0.2460950366871577, 0.20558900092165966, 0.2068358650904858, 0.183935306259297, 0.14961875646094758, 0.1682398103677024, 0.16575647060890897, 0.12172316548846451, 0.13642235669061942, 0.17072167393529758, 0.15182564931451947, 0.17937944158252672, 0.16748674658317853, 0.1858972833538578, 0.16173599888051626, 0.17837918535454433, 0.19464407445869847, 0.18607034508224085, 0.14513653244698232, 0.18712900296791413, 0.16189659737901352, 0.1736161336196912, 0.17978263472050182, 0.19282548768936392, 0.16950805628038068, 0.16308995090004375, 0.16018802229961038, 0.16139743828645747, 0.1586956641116356, 0.1622051321645891, 0.1683613926531734, 0.3059751960515056, 0.23215876469681984, 0.19349337741251693, 0.4117061491041353, 0.261296115289111, 0.3512081416789732, 0.17485641567181742, 0.1839999533632034, 0.2589263868636883, 0.42732237178796817, 0.24259537445827795, 0.19212646284871238, 0.20031791988892433, 0.1627306954546095, 0.29076728201012647, 0.26275289091796017, 0.21071123936770242, 0.18809683543085876, 0.19396468018877644, 0.1727556690670763, 0.17780985494062373, 0.17689706427670093, 0.18333467803478165, 0.18901906590922213, 0.18261838063160685, 0.17864078242641057, 0.0540975628928676, 0.08097326060458798, 0.07304781016859507, 0.05465664525944469, 0.06774518126852924, 0.07188254334879363, 0.054598858847753395, 0.052287753185889074, 0.050562072827425086]}, "mutation_prompt": null}
{"id": "b6cf6c95-6c6b-46f9-86e9-8fe1400b3a63", "solution": "import numpy as np\n\nclass DynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "DynamicDEAPSO", "description": "Implement a dynamic parameter adaptation strategy for the mutation and crossover rates to enhance exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.25676394684950665, 0.3076490057724707, 0.27292823208146144, 0.3110332305066128, 0.4402820650786087, 0.2712650155517553, 0.31322138288796986, 0.31678301432382605, 0.27378610245554724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07367541770682529, 0.06176609709834535, 0.07259365481686186, 0.05081698257355671, 0.07457802210989395, 0.10819066708612479, 0.06013989795233632, 0.07474174234832154, 0.06120983661708945, 0.028022626914809057, 0.06384084495734665, 0.03573888354297594, 0.07414109652068179, 0.046491131343042835, 0.056124605616844514, 0.0787424839531079, 0.039667241161270295, 0.06150696242564757, 0.9333026843394249, 0.8989213917292405, 0.9824561605384684, 0.9875485883903143, 0.12007767360533295, 0.9007068944241148, 0.9675316208136192, 0.9923681148328628, 0.9217283599526889, 0.16895972803981352, 0.11222707248875319, 0.12844501052663104, 0.14360162087234907, 0.09772207022394597, 0.11293589975425333, 0.1188870072508107, 0.12486764023680008, 0.17846577661707053, 0.17205530530603497, 0.15408721311218598, 0.09802954951144216, 0.21987425248722092, 0.17052576199522262, 0.1863897137028777, 0.1544792300930461, 0.22148687752897311, 0.18210045689234877, 0.11718998862333352, 0.05696024185079318, 0.13159595325481588, 0.12359472732712362, 0.10047772131988497, 0.13008165374042635, 0.10937637787458387, 0.07702259526748656, 0.11828532445802142, 0.15501118333240338, 0.1179113664162067, 0.04553269936207949, 0.12651947474131153, 0.10951064899389751, 0.07114017266750905, 0.08640829794886506, 0.09474954968027849, 0.11687843182120228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051844077991427207, 0.0701025849029836, 0.04639266529269859, 0.06103111465410527, 0.04812421408979772, 0.0612407765132601, 0.05201552663867992, 0.05954014237986738, 0.04630525522398288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770193749031714, 0.06658144266075527, 0.062411094278101875, 0.022225406468599607, 0.025620623451947044, 9.999999999998899e-05, 0.006215402689419225, 0.018811597685028936, 0.015367562401513934, 0.338755909654032, 0.2904123829368105, 0.2642763686882026, 0.29318864193374117, 0.306129314035556, 0.31430603692202375, 0.2711677687403372, 0.29883490698200754, 0.2531113782371275, 0.0790852170323173, 0.09004727513500743, 0.07257983577089511, 0.04825671729389702, 0.07124492411554617, 0.07040327562346937, 0.06655126813237855, 0.05350842973622616, 0.06212576268466441, 0.1519224640871717, 0.13582704034487558, 0.19257118170099452, 0.1538675083383294, 0.14792441691492308, 0.1264476462958739, 0.1321653762834687, 0.1465720008006841, 0.14243845578727343, 0.25155839422253845, 0.2272409615758204, 0.2042052538389303, 0.2115878296185575, 0.25400746940292473, 0.1971239571715523, 0.2460950366871577, 0.20558900092165966, 0.2068358650904858, 0.183935306259297, 0.14961875646094758, 0.1682398103677024, 0.16575647060890897, 0.12172316548846451, 0.13642235669061942, 0.17072167393529758, 0.15182564931451947, 0.17937944158252672, 0.16748674658317853, 0.1858972833538578, 0.16173599888051626, 0.17837918535454433, 0.19464407445869847, 0.18607034508224085, 0.14513653244698232, 0.18712900296791413, 0.16189659737901352, 0.1736161336196912, 0.17978263472050182, 0.19282548768936392, 0.16950805628038068, 0.16308995090004375, 0.16018802229961038, 0.16139743828645747, 0.1586956641116356, 0.1622051321645891, 0.1683613926531734, 0.3059751960515056, 0.23215876469681984, 0.19349337741251693, 0.4117061491041353, 0.261296115289111, 0.3512081416789732, 0.17485641567181742, 0.1839999533632034, 0.2589263868636883, 0.42732237178796817, 0.24259537445827795, 0.19212646284871238, 0.20031791988892433, 0.1627306954546095, 0.29076728201012647, 0.26275289091796017, 0.21071123936770242, 0.18809683543085876, 0.19396468018877644, 0.1727556690670763, 0.17780985494062373, 0.17689706427670093, 0.18333467803478165, 0.18901906590922213, 0.18261838063160685, 0.17864078242641057, 0.0540975628928676, 0.08097326060458798, 0.07304781016859507, 0.05465664525944469, 0.06774518126852924, 0.07188254334879363, 0.054598858847753395, 0.052287753185889074, 0.050562072827425086]}, "mutation_prompt": null}
{"id": "a6a6ea47-58a3-4434-99b6-6d2a621625ff", "solution": "import numpy as np\n\nclass EnhancedDynamicDEAPSO(DynamicDEAPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_step = 0.1\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c) + np.random.normal(0, self.mutation_step), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedDynamicDEAPSO", "description": "Enhance exploration by introducing adaptive mutation step size based on individual performance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'explore_mutate' is not defined\").", "error": "NameError(\"name 'explore_mutate' is not defined\")", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {}, "mutation_prompt": null}
{"id": "b8015d54-6bd7-45c9-9e17-3a4e02656e50", "solution": "import numpy as np\n\nclass ImprovedDynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr, success_rates):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                        success_rates[i] += 1  # Update success count\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best, success_rates\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        success_rates = np.zeros(self.population_size)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best, success_rates = differential_evolution(population, fitness, best, f, cr, success_rates)\n            f = max(0.1, f * (1 + 0.1 * (np.sum(success_rates) / len(success_rates) - 0.2)))  # Adaptive mutation rate adjustment based on success\n            cr = max(0.1, cr * (1 + 0.1 * (np.sum(success_rates) / len(success_rates) - 0.2)))  # Adaptive crossover rate adjustment based on success\n        return best", "name": "ImprovedDynamicDEAPSO", "description": "Improve the adaptiveness of mutation and crossover rates by implementing a self-adaptive strategy based on individual success rates during the optimization process.", "configspace": "", "generation": 31, "fitness": 0.10772453001960818, "feedback": "The algorithm ImprovedDynamicDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.1390556380099548, 0.13212282042602297, 0.19478661396356367, 0.20517232600552837, 0.14271239093031818, 0.11941374235416335, 0.15720375202738468, 0.14274334815636014, 0.1853220233617946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03332934700008505, 0.038840157063149805, 0.02071441597604662, 0.05066411830762385, 0.0340505529231212, 0.04378184633215099, 0.04956853267217398, 0.020561525120414648, 0.05710491058791323, 0.027955456295922554, 0.004705925709719283, 0.04638150734033475, 0.06516892073435754, 0.013199217676637232, 0.016277706864519348, 9.999999999998899e-05, 0.010893974514888716, 0.009307972012828958, 0.9847243328717382, 0.9677303630126477, 0.9861221671177036, 0.9962676500512931, 0.987321936609002, 0.9870258053936893, 0.9787185267326403, 0.9941456310270064, 0.9865498230648008, 0.08991858877194203, 9.999999999998899e-05, 0.019642740838056505, 0.0883549630811562, 0.06519965308674747, 0.08828432879536818, 0.0592130493531704, 0.06802863246759916, 0.03810715666729392, 0.1585792800045427, 0.10598945012741057, 0.09276934804952197, 0.08316960940140705, 0.07363650598081983, 0.05299768827029416, 0.07587090606496094, 0.17802616921115333, 0.08072168773211574, 0.030065750277609382, 9.999999999998899e-05, 0.012829771667080103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015978144295665686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05283450520639854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005254973373350569, 0.011178230678799306, 0.0570131105639754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01632811606529827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16266711259282418, 0.14059973816859528, 0.18141697558501924, 0.12676952672120223, 0.18662364558575995, 0.20516107756646496, 0.1733569785788861, 0.18378718128385085, 0.1779710764944411, 0.032567919792272026, 0.02521118115119736, 0.03481061653847395, 0.04604037208555767, 0.05531918888229104, 0.042547999564888195, 0.029880049031025036, 0.03695245436274286, 0.05648014902688414, 0.12604318181051144, 0.14377989332902374, 0.12644472865307166, 0.12632320737432312, 0.14107547787826913, 0.12329970424043168, 0.07757558851915058, 0.07216233457394483, 0.12807137950671055, 0.11292841262757358, 0.14417983939812162, 0.1454648149404435, 0.16008513771871913, 0.14857205850879873, 0.1417714190782875, 0.15198851737466446, 0.167431700096343, 0.1376828659965328, 0.09743732430856866, 0.1020400650687372, 0.08240839810185696, 0.09907562449890317, 0.08869592871271803, 0.0969843397881206, 0.10061682154687313, 0.08064095838956076, 0.09766976914566716, 0.13188730937138793, 0.12181190762899419, 0.14539933142661443, 0.15469584258370817, 0.12504971340183835, 0.1200579853305288, 0.156562704391512, 0.13198631126660842, 0.1546291743794238, 0.1424103272229491, 9.999999999998899e-05, 0.14972929029948467, 9.999999999998899e-05, 9.999999999998899e-05, 0.13141817491065444, 9.999999999998899e-05, 0.11075376879307819, 9.999999999998899e-05, 0.11541371029520542, 0.165384473457871, 0.13120107954315408, 0.16157123525275552, 0.16875654366662585, 0.16517023726239421, 0.10344058384207167, 0.09783229212511868, 0.1090372310941089, 0.11233562036094968, 0.10518132106149447, 0.03918913203077301, 0.12961775382263807, 0.0843601830085261, 0.10760580304226242, 0.0706620671373106, 0.09711970461717523, 0.10247795797041603, 0.1683638855177334, 0.151780801221171, 0.19039113154306586, 0.14839213153018227, 0.15804745254710617, 0.16525737364385729, 0.13882178465970485, 0.16283207220565832, 0.17141797287660177, 0.0583970375392866, 0.04562818575389682, 0.055762180737216616, 0.0315039291867264, 0.03736750083562179, 0.054450259492333175, 0.04281621271584024, 0.03996197349984465, 0.03010775565434687]}, "mutation_prompt": null}
{"id": "ed508424-59bf-453e-a01e-4642e6537a5c", "solution": "import numpy as np\n\nclass ImprovedDynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def adaptive_mutation(x, centroid, f):\n            return np.clip(x + f * (centroid - x), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    centroid = np.mean(population, axis=0)\n                    new_population[i] = adaptive_mutation(new_population[i], centroid, f)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "ImprovedDynamicDEAPSO", "description": "Improve exploration by incorporating a novel adaptive mutation strategy based on centroid movement.", "configspace": "", "generation": 32, "fitness": 0.07966583977043731, "feedback": "The algorithm ImprovedDynamicDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.09.", "error": "", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.15491822461451576, 0.2917771196423222, 0.11247873582986645, 0.09614879241942365, 0.06645956602820113, 0.03364650566246452, 0.0966226226601764, 0.07972166264092595, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06897348396452618, 0.07318338819946402, 0.0295564013760361, 0.05332627676104329, 0.08230503654420429, 0.0015637151411849182, 0.05536026941030936, 0.05903110143371704, 0.02761593002332552, 0.023749964941207735, 0.0322559736048279, 0.03831370864952455, 0.0618612927668859, 0.016845968382101506, 0.06572750050787723, 0.02220046280113186, 0.03890073419243034, 9.999999999998899e-05, 0.9818304232983206, 0.0811355362834163, 0.14831799298463244, 0.09949278837533726, 0.07380074379247759, 0.042564656459674, 0.06837893271858597, 0.057759163688623105, 0.03672580005291204, 0.07248353698738919, 9.999999999998899e-05, 0.023455613136327713, 0.039657281120578425, 0.06238970001736066, 0.014039899944492729, 0.050936022016613625, 0.011293333694524565, 9.999999999998899e-05, 0.11455482084246871, 0.14161603889064367, 0.13700362202899996, 0.03487119806664052, 0.1507635211433953, 0.06363485858730633, 0.026279303607937843, 0.056619847952326885, 0.07315620598863204, 9.999999999998899e-05, 0.0810890443478609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0104952705865331, 9.999999999998899e-05, 9.999999999998899e-05, 0.046576592533060124, 9.999999999998899e-05, 0.021009176870849466, 9.999999999998899e-05, 0.04065182011156043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03067660009390316, 0.028861753758593345, 0.08406417539481592, 0.043538689268640574, 0.036041276154777147, 0.05002871225827743, 0.032637290012688336, 0.1010393017961857, 0.06609299140749192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20581085594478266, 0.14229976285762436, 0.15106959618913463, 0.13032521693534815, 0.1318807289116024, 0.09988045815746116, 0.18342446933505518, 0.21876903769973122, 0.17016914253906834, 9.999999999998899e-05, 9.999999999998899e-05, 0.0236924245491964, 0.010696850696292004, 0.02277982315233018, 0.03699028318615161, 0.02376538340445511, 0.05334018491047898, 0.044846729388817175, 0.13573742510080244, 0.11334001862789844, 0.12871901300463018, 0.09855305120349966, 0.15076674169191173, 0.08012571701126503, 0.1027443744674772, 0.16797384268045734, 0.07726393575557644, 0.13259909636669598, 0.15514147294123248, 0.13694297606563866, 0.16797328119582577, 0.16747401766656278, 0.17522280535561152, 0.1379660493539423, 0.17280793258751292, 0.12324926665826663, 0.08561222385826861, 0.12086464238433403, 0.08936293253031291, 0.08999482917888768, 0.13816881018919847, 0.1095119762948501, 0.06038896213981515, 0.12448087632451987, 0.10228596537066681, 0.24616204283664256, 0.17248179460759872, 0.18362773579015434, 0.2139972536883321, 0.20871877883733247, 0.18305039325213324, 0.19729029643439266, 0.16289056244346123, 0.24914110296540926, 0.16239598584793913, 0.1607809786421458, 0.14482475199909184, 0.1780951538030091, 0.15345212207684744, 0.154963558173966, 0.15666865967263388, 0.1662516548395706, 9.999999999998899e-05, 0.1329694683534688, 0.13942840610345797, 0.0713471095624234, 0.07745225260390087, 0.1207914665021157, 0.09965881104781404, 0.16184308338649356, 0.07893100169971912, 0.1100803038646071, 0.08843743916627389, 0.041723967938883666, 0.09754727119556994, 0.10916069473889622, 0.11063468744504312, 0.045511073114331335, 0.11428408163785608, 0.1171021756635795, 0.07702507032017325, 0.19146134444356522, 0.16284645382967278, 0.15864374406821047, 0.18377305718698833, 0.16773845057778836, 0.19694948559285375, 0.2141616160239841, 0.17582484296973122, 0.16510480667821303, 0.0773421454345109, 0.06709132585933952, 0.07686153896111869, 0.06431038073565032, 0.06216590799347155, 0.06617977755410032, 0.07404663483383978, 0.07052322351679918, 0.058342759433033686]}, "mutation_prompt": null}
{"id": "06c236e0-be9b-4610-a70b-7d09554d06e6", "solution": "import numpy as np\n\nclass ImprovedDynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, dim):\n            chaotic_param = 0.8\n            for i in range(dim):\n                x[i] = best + chaotic_param * np.random.standard_cauchy()\n            return x\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    if np.random.rand() < 0.2:  # 20% chance of chaotic search\n                        new_population[i] = chaotic_search(new_population[i], best, self.dim)\n                    else:\n                        new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "ImprovedDynamicDEAPSO", "description": "Enhancing exploration by introducing a chaotic search mechanism to diversify the solutions space and escape local optima.", "configspace": "", "generation": 33, "fitness": 0.12628502309689213, "feedback": "The algorithm ImprovedDynamicDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.28712223657505287, 0.20250643120616718, 0.26084768480104525, 0.2615354270856245, 0.2408758492685532, 0.2271768267751848, 0.1988461054399855, 0.27443595666700316, 0.28744973390645845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09394081956375644, 0.061144481191995115, 0.041478965934565015, 0.055028771382141684, 0.054397120091269735, 0.0433094420090292, 0.052357868260174634, 0.039845440496864115, 0.029364585251136166, 0.036543241275449834, 0.06026283699397261, 0.026640544334150196, 0.022287114528131702, 0.04049873331685283, 0.035464144369525274, 0.07000531568870938, 0.07922282142542059, 0.06300040886992098, 0.9924085508584058, 0.9676553295723913, 0.9847462839655203, 0.2517882229743713, 0.975763198022615, 0.14037659596412155, 0.1069241873576059, 0.9882483066458925, 0.9550347412671433, 0.13826940728381287, 0.08978304706907636, 0.019758330747524644, 0.03282482644588436, 0.05883925158666481, 0.08916095765600551, 0.05887487688442539, 0.06034098501068896, 0.06395706693506198, 0.11458957476885878, 0.14684924418141765, 0.16144043485113957, 0.17177419349235135, 0.194315797663278, 0.17746505373867272, 0.11310059984794074, 0.15354373002304378, 0.13882474882314566, 0.061468661227524146, 0.060838698604321895, 9.999999999998899e-05, 9.999999999998899e-05, 0.03511132306751352, 0.016308855149613555, 0.025462642704209837, 0.050812785974755026, 0.05046466148097384, 0.0009095766185657217, 0.004635779272639251, 9.999999999998899e-05, 9.999999999998899e-05, 0.05734460354789295, 9.999999999998899e-05, 0.05073365443981204, 0.03834816410880826, 0.030574359037953247, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06396610796450963, 0.0394984650914213, 0.018632217807470597, 0.03520796045577279, 0.03393312476336108, 0.0442084585328707, 0.05503105240215467, 0.030900495994100274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03485507336243043, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03147974979637569, 0.04496279115658253, 0.26047639012334156, 0.22121008776569984, 0.26280721995283995, 0.2127321343035925, 0.2700222135419371, 0.3351978727788758, 0.2340545103076621, 0.271443216332207, 0.2191709204086102, 0.04301206575066807, 0.06416607428180521, 0.05394671408345564, 0.04614910154429053, 0.05796988492999133, 0.04656869241486128, 0.06544119329309339, 0.06998456747883885, 0.05981301623575386, 0.12366635950668137, 0.1468990973159744, 0.15877594897467096, 0.18249508581552631, 0.1107503367896221, 0.13580752905461868, 0.15168477742632347, 0.1311107588942475, 0.13887309176589202, 0.15866680374344544, 0.1895355591205663, 0.14988988036058581, 0.1806197955253065, 0.191958009474255, 0.19334715428901073, 0.21021516123631623, 0.1526943859014478, 0.1792837900555576, 0.1499684592061643, 0.1204281772228456, 0.15853026200983023, 0.19114241599139037, 0.12570226180303967, 0.10871956964301022, 0.13909495899345226, 0.10990793248637287, 0.12290908131281086, 0.14645667987149047, 0.14655847269745081, 0.14912733570754133, 0.17360066690879672, 0.15989102262533073, 0.14350440841237266, 0.1591480181456254, 0.14042983946744303, 0.1346088486954834, 0.16008098742123034, 0.15751559728341147, 0.1621779619028848, 0.16970277343969753, 0.1791932514412652, 0.15366400104390088, 0.1616897763275671, 0.15880025536996967, 0.15169947813319717, 0.21375172947885013, 0.1682546557992317, 0.15907095558742934, 0.2261788609544244, 0.29762827950580395, 0.1174701841933804, 0.12948566406336126, 0.15657800497725727, 0.12266185112355399, 0.102753142485844, 0.17576392364844973, 0.16514446701842467, 0.23729550137292832, 0.10213987453466944, 0.1652815721029416, 0.25786238909280856, 0.08490657205956686, 0.13651308845102939, 0.17944579792834925, 0.17808478522023452, 0.17662170581620262, 0.19864397490616392, 0.17851156196689422, 0.17637935908850633, 0.19391208325209564, 0.16675369772041782, 0.19396231882147819, 0.050045369634734604, 0.059758257816757365, 0.03632993182819988, 0.05694245889390748, 0.048140075742685084, 0.041584774353541465, 0.08673374426095048, 0.056628011021698565, 0.053818756957949354]}, "mutation_prompt": null}
{"id": "99021e00-d3a9-4a9c-ab0f-a022241905a7", "solution": "import numpy as np\n\nclass HybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "HybridDEAPSO", "description": "Implement a hybrid optimization algorithm combining Differential Evolution with Particle Swarm Optimization for improved exploration and exploitation balance.", "configspace": "", "generation": 34, "fitness": 0.1611464199901182, "feedback": "The algorithm HybridDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.25676394684950665, 0.3076490057724707, 0.27292823208146144, 0.3110332305066128, 0.4402820650786087, 0.2712650155517553, 0.31322138288796986, 0.31678301432382605, 0.27378610245554724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07367541770682529, 0.06176609709834535, 0.07259365481686186, 0.05081698257355671, 0.07457802210989395, 0.10819066708612479, 0.06013989795233632, 0.07474174234832154, 0.06120983661708945, 0.028022626914809057, 0.06384084495734665, 0.03573888354297594, 0.07414109652068179, 0.046491131343042835, 0.056124605616844514, 0.0787424839531079, 0.039667241161270295, 0.06150696242564757, 0.9333026843394249, 0.8989213917292405, 0.9824561605384684, 0.9875485883903143, 0.12007767360533295, 0.9007068944241148, 0.9675316208136192, 0.9923681148328628, 0.9217283599526889, 0.16895972803981352, 0.11222707248875319, 0.12844501052663104, 0.14360162087234907, 0.09772207022394597, 0.11293589975425333, 0.1188870072508107, 0.12486764023680008, 0.17846577661707053, 0.17205530530603497, 0.15408721311218598, 0.09802954951144216, 0.21987425248722092, 0.17052576199522262, 0.1863897137028777, 0.1544792300930461, 0.22148687752897311, 0.18210045689234877, 0.11718998862333352, 0.05696024185079318, 0.13159595325481588, 0.12359472732712362, 0.10047772131988497, 0.13008165374042635, 0.10937637787458387, 0.07702259526748656, 0.11828532445802142, 0.15501118333240338, 0.1179113664162067, 0.04553269936207949, 0.12651947474131153, 0.10951064899389751, 0.07114017266750905, 0.08640829794886506, 0.09474954968027849, 0.11687843182120228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051844077991427207, 0.0701025849029836, 0.04639266529269859, 0.06103111465410527, 0.04812421408979772, 0.0612407765132601, 0.05201552663867992, 0.05954014237986738, 0.04630525522398288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03770193749031714, 0.06658144266075527, 0.062411094278101875, 0.022225406468599607, 0.025620623451947044, 9.999999999998899e-05, 0.006215402689419225, 0.018811597685028936, 0.015367562401513934, 0.338755909654032, 0.2904123829368105, 0.2642763686882026, 0.29318864193374117, 0.306129314035556, 0.31430603692202375, 0.2711677687403372, 0.29883490698200754, 0.2531113782371275, 0.0790852170323173, 0.09004727513500743, 0.07257983577089511, 0.04825671729389702, 0.07124492411554617, 0.07040327562346937, 0.06655126813237855, 0.05350842973622616, 0.06212576268466441, 0.1519224640871717, 0.13582704034487558, 0.19257118170099452, 0.1538675083383294, 0.14792441691492308, 0.1264476462958739, 0.1321653762834687, 0.1465720008006841, 0.14243845578727343, 0.25155839422253845, 0.2272409615758204, 0.2042052538389303, 0.2115878296185575, 0.25400746940292473, 0.1971239571715523, 0.2460950366871577, 0.20558900092165966, 0.2068358650904858, 0.183935306259297, 0.14961875646094758, 0.1682398103677024, 0.16575647060890897, 0.12172316548846451, 0.13642235669061942, 0.17072167393529758, 0.15182564931451947, 0.17937944158252672, 0.16748674658317853, 0.1858972833538578, 0.16173599888051626, 0.17837918535454433, 0.19464407445869847, 0.18607034508224085, 0.14513653244698232, 0.18712900296791413, 0.16189659737901352, 0.1736161336196912, 0.17978263472050182, 0.19282548768936392, 0.16950805628038068, 0.16308995090004375, 0.16018802229961038, 0.16139743828645747, 0.1586956641116356, 0.1622051321645891, 0.1683613926531734, 0.3059751960515056, 0.23215876469681984, 0.19349337741251693, 0.4117061491041353, 0.261296115289111, 0.3512081416789732, 0.17485641567181742, 0.1839999533632034, 0.2589263868636883, 0.42732237178796817, 0.24259537445827795, 0.19212646284871238, 0.20031791988892433, 0.1627306954546095, 0.29076728201012647, 0.26275289091796017, 0.21071123936770242, 0.18809683543085876, 0.19396468018877644, 0.1727556690670763, 0.17780985494062373, 0.17689706427670093, 0.18333467803478165, 0.18901906590922213, 0.18261838063160685, 0.17864078242641057, 0.0540975628928676, 0.08097326060458798, 0.07304781016859507, 0.05465664525944469, 0.06774518126852924, 0.07188254334879363, 0.054598858847753395, 0.052287753185889074, 0.050562072827425086]}, "mutation_prompt": null}
{"id": "21fdba4b-0f6f-40e6-b287-f36b24ebfb7a", "solution": "import numpy as np\n\nclass EnhancedDynamicDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / abs(v) ** (1 / beta)\n            return step\n\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + levy_flight(len(x)), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedDynamicDEAPSO", "description": "Enhancing exploration by incorporating Levy flights for improved global search capability", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'math' is not defined\").", "error": "NameError(\"name 'math' is not defined\")", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {}, "mutation_prompt": null}
{"id": "49474de4-1cd0-4394-ac39-b09faef48ba8", "solution": "import numpy as np\n\nclass EnhancedDynamicDEAPSO(DynamicDEAPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n\n    def local_search(self, x):\n        return np.clip(x + np.random.normal(0, 0.1, x.shape), -5.0, 5.0)\n\n    def __call__(self, func):\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n                if np.random.rand() < self.local_search_prob:\n                    new_population[i] = self.local_search(new_population[i])\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedDynamicDEAPSO", "description": "Enhance the solution by incorporating a local search mechanism to exploit promising regions of the search space.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {}, "mutation_prompt": null}
{"id": "0aa9e7d2-0bb4-49c9-a629-e5032d669cd6", "solution": "import numpy as np\n\nclass ChaoticDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param=0.3):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = explore_mutate(new_population[i])\n                new_population[i] = chaotic_search(new_population[i], best)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "ChaoticDEAPSO", "description": "Enhance the exploration capability by incorporating a chaotic search component for diversity.", "configspace": "", "generation": 37, "fitness": 0.17154607774234978, "feedback": "The algorithm ChaoticDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "eb36370e-9341-4418-b1c8-7f1119b95fe3", "metadata": {"aucs": [0.32245892861461967, 0.28158301171999045, 0.2804109493509729, 0.28079122305300763, 0.26430921194189316, 0.31593437696037185, 0.35686823157875613, 0.2972316433785853, 0.32205837803334936, 9.999999999998899e-05, 0.011846585708032542, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09161565085269574, 0.07742900671333008, 0.07996774382363525, 0.07518686151055842, 0.1038060684103681, 0.08240212508789868, 0.0732859114092278, 0.07152325820122751, 0.07887486817719658, 0.06645222292868858, 0.08553571742078425, 0.05698744717986015, 0.06418545850398238, 0.06670241502247276, 0.06739314066715707, 0.06544451025911968, 0.06365367509407227, 0.06046267457170906, 0.9531050679404504, 0.9886023629791004, 0.853775709738899, 0.9505418415959574, 0.910382497610044, 0.9691635791426462, 0.780232511209037, 0.9192494627356422, 0.927670885547822, 0.15855011068476854, 0.16516392970099625, 0.13572945750617915, 0.15547407815203096, 0.1647665680189888, 0.19968766825836737, 0.19852059422644597, 0.16695105694781975, 0.1521745803036687, 0.286752742522029, 0.20435809556744267, 0.2015218054724266, 0.2648377877440995, 0.2075383171822115, 0.2510081241032873, 0.20780180230930267, 0.21292395091593452, 0.21776520859942539, 0.08494558318695289, 0.09327964458280458, 0.08680946652880162, 0.10668382468453419, 0.13336190419733995, 0.13178377526913732, 0.07264863759539852, 0.08475260843580312, 0.09945274583978447, 0.09063939535243626, 0.11660762918177081, 0.15045633795530722, 0.09778371239338957, 0.15032549903170433, 0.12892148886886734, 0.06799643652546761, 0.09764873648764083, 0.080589037708093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07416772177670483, 0.0801454884559546, 0.10448489686277662, 0.060622712588310756, 0.07260639331605034, 0.07985152693171749, 0.05975728863866625, 0.09314507284369045, 0.09917900246283229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022104000860678763, 0.053031634957593776, 0.054440747792333655, 0.052249548402643065, 0.08053030814948958, 0.054298400452515994, 0.06309206251649446, 0.03524159365816304, 0.06060762992176827, 0.30468874051700734, 0.28225321313053486, 0.2835463418654225, 0.2775139312569358, 0.32880597890542274, 0.2872578149280083, 0.31884300360234386, 0.30111978389932104, 0.2904502905969816, 0.08089822462130125, 0.08528304204190429, 0.0717453859040108, 0.08761088696466868, 0.07631264993144848, 0.07572501341126914, 0.07676014434986533, 0.07762662669221554, 0.08090936398743376, 0.16392612847949217, 0.11880708417189811, 0.14277924951775678, 0.16598609259972907, 0.1431082743196186, 0.16423307946502574, 0.16421721682021506, 0.20426969939846673, 0.14511046523374938, 0.21661962018827574, 0.22535205378651313, 0.22181698052543353, 0.21762626876684665, 0.22064531723113412, 0.21450715185805946, 0.27118385196824, 0.22188416700430158, 0.2388903435100861, 0.1560901396972213, 0.17026630292844547, 0.15796071023249314, 0.13742120636383293, 0.15643402965663877, 0.16686731373000818, 0.14483008824697785, 0.16758206384056085, 0.17170786013944395, 0.18304478471538466, 0.1833728770931018, 0.1865089342677032, 0.17003939432482218, 0.19203219637361513, 0.1765772806529391, 0.1832902706206383, 0.18547961199419483, 0.1782732844059387, 0.1697669507467513, 0.16963572372660507, 0.18793145678520418, 0.17003513084155564, 0.1722809291473415, 0.1715600134199693, 0.16862258111708128, 0.1676518045239982, 0.17678340207395904, 0.40893382508637455, 0.1865199022434173, 0.37334650398708635, 0.1848612728996596, 0.18044960972871826, 0.2810699655415728, 0.3565163780176004, 0.2058625981943123, 0.18696584106319925, 0.2507937361635173, 0.31342544768313696, 0.1964173565717683, 0.17105474221550498, 0.166400093307132, 0.28733003691273884, 0.20076208836453924, 0.20690317236518307, 0.13618621306892786, 0.19466855846158604, 0.1921428889726643, 0.18798198454901793, 0.17273105538585076, 0.17966015379106426, 0.18949118122564712, 0.19317866890137636, 0.17503619030389728, 0.1918318331265254, 0.07256361098133679, 0.0622233937494191, 0.07221241105878762, 0.07294484516790412, 0.06724244919776501, 0.1072114941999689, 0.07383507359707087, 0.06448465810301696, 0.07486014774070027]}, "mutation_prompt": null}
{"id": "a5b49da6-244c-456d-9bcb-82536eecdb9b", "solution": "import numpy as np\n\nclass EnhancedChaoticDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param=0.3):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedChaoticDEAPSO", "description": "Enhance the exploration by incorporating a self-adaptive mutation strategy for improved convergence behavior.", "configspace": "", "generation": 38, "fitness": 0.20517885267081581, "feedback": "The algorithm EnhancedChaoticDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "0aa9e7d2-0bb4-49c9-a629-e5032d669cd6", "metadata": {"aucs": [0.5393651937790106, 0.5113270499162306, 0.42428805473223774, 0.4953508705561186, 0.3884334120157634, 0.4644614324394958, 0.5293701099443406, 0.5006298158388138, 0.48811287069787035, 9.999999999998899e-05, 0.006518598942799825, 0.009033491407645533, 0.029948630566845158, 0.03941670446334389, 0.00010871201314477386, 0.03275924992599144, 0.00923538984893535, 9.999999999998899e-05, 0.10115797930902592, 0.08073032252125945, 0.08379363502656867, 0.12661323990139495, 0.10199313947255029, 0.12782331501048305, 0.09778382864779267, 0.10716583417942527, 0.10023562016931464, 0.09601098204848546, 0.08237712043229517, 0.1035870178976771, 0.09012267031163479, 0.08051732708143988, 0.10225332551295829, 0.12322893524888456, 0.11471645235307915, 0.07760415314017155, 0.9671227799541928, 0.9885888567489965, 0.9051705304386605, 0.9268997536512438, 0.9031630468222287, 0.9585554576427301, 0.8111614431641903, 0.9207196430127679, 0.9331268038414702, 0.2275581534103318, 0.2431371653337424, 0.23062352453796464, 0.2428316771779866, 0.22965930515637878, 0.214953277158916, 0.24580703787595526, 0.22482767864640463, 0.1857859496876345, 0.328574954349352, 0.3268040353445304, 0.29538640377814673, 0.3629197202715422, 0.31600744743474474, 0.28220591488703217, 0.23204198058886005, 0.35913855194642397, 0.30618628901216194, 0.21557296554728267, 0.18562352798761295, 0.14768945863056504, 0.12359753883943358, 0.12817430362206284, 0.1250406767147808, 0.1278554719393431, 0.16690677036271295, 0.13733508765064384, 0.156905027052607, 0.16502743092505223, 0.1461255543674459, 0.26485553411470775, 0.13513105950148252, 0.14811148770854976, 0.17554892831163038, 0.14538893390688812, 0.15133906395492303, 0.031202401246748557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055097766690780925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1276554744100038, 0.10445667270576409, 0.09748160432268282, 0.10129121683785303, 0.08186004306493888, 0.08428488087018082, 0.1360195453463824, 0.07780290100326637, 0.1556668680917479, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019986698028830685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054935814523610293, 0.09197565099751304, 0.09601264912707252, 0.09382140424903918, 0.10021741393521211, 0.10906761813865906, 0.12057172498119273, 0.052795674730156006, 0.0725044123775479, 0.3904636538273606, 0.40738090293797335, 0.3836514723407298, 0.41157456654117064, 0.3869111040686489, 0.37625662976201557, 0.43324641221590754, 0.368782211118, 0.3594767536656015, 0.11040825889419559, 0.10069325657493045, 0.08504681023672911, 0.10192683124466895, 0.10717049281209967, 0.10187787771003787, 0.10882071809963834, 0.09614081580102884, 0.10378491407027757, 0.16723359757018375, 0.15559221082408714, 0.21909620057076817, 0.25221812356435525, 0.18992126314271784, 0.20594299992817067, 0.19153716187860004, 0.1726531802115847, 0.17877076931521696, 0.24817051100387877, 0.27621178130978774, 0.27601573570689364, 0.2338219952213968, 0.2644091304302074, 0.25871302499269133, 0.30757396349523536, 0.2592257301422365, 0.2858960134644871, 0.19901636101888087, 0.2259785176218001, 0.26071347269958167, 0.2048886290988332, 0.21620828478711662, 0.21307760010610122, 0.20163905689069028, 0.20138157502877907, 0.1838837993946908, 0.19690864754852555, 0.19704673366638958, 0.1738821870354117, 0.18442372424555042, 0.17498942999251, 0.21352639384303962, 0.20582939533662858, 0.18193029493848867, 0.19040333831236644, 0.21654197610944725, 0.1848524321870173, 0.19772030811104357, 0.2503079331911229, 0.19305281516033201, 0.1801687710812907, 0.19690836503549913, 0.20247990553596895, 0.1806424194039875, 0.168308769831634, 0.19381468751638287, 0.4770099413039245, 0.184477847305756, 0.19864532157503323, 0.19679318051784767, 0.20605615068176297, 0.1559718077729394, 0.16147922540654058, 0.41880658808445914, 0.11211078585576506, 0.20297425702913185, 0.2063654169022221, 0.19942612375377866, 0.20164947052539284, 0.2087628441655084, 0.2096475324765894, 0.1123041181326393, 0.18211064544560762, 0.18027166849089626, 0.17791004568890822, 0.17991890231889807, 0.19218223407341506, 0.20004496378048142, 0.18698227643257515, 0.18229766770718447, 0.1894248107236841, 0.0776061253926722, 0.07405811770870896, 0.07518762753405173, 0.08704337261612816, 0.08018499536307988, 0.0726647965783177, 0.06916803733186117, 0.0740657991557424, 0.07021745559756032]}, "mutation_prompt": null}
{"id": "f3c0d112-7e52-4fec-93fa-e594e35e8d99", "solution": "import numpy as np\n\nclass ImprovedChaoticDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param=0.3):\n            r = 4.0\n            x = np.clip(r * x * (1 - x), -5.0, 5.0)  # Logistic map mutation\n            if func(x) < func(best):\n                return x\n            else:\n                return best\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "ImprovedChaoticDEAPSO", "description": "Improve convergence by introducing a novel chaotic mutation mechanism leveraging a modified logistic map.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, 98.65719785357021').", "error": "TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, 98.65719785357021')", "parent_id": "a5b49da6-244c-456d-9bcb-82536eecdb9b", "metadata": {}, "mutation_prompt": null}
{"id": "243b1d2a-1078-4b49-8c54-850da586db81", "solution": "import numpy as np\n\nclass EnhancedChaoticDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param=0.3):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedChaoticDEAPSO", "description": "Enhance the exploration by incorporating a self-adaptive mutation strategy for improved convergence behavior.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5b49da6-244c-456d-9bcb-82536eecdb9b", "metadata": {"aucs": [0.5393651937790106, 0.5113270499162306, 0.42428805473223774, 0.4953508705561186, 0.3884334120157634, 0.4644614324394958, 0.5293701099443406, 0.5006298158388138, 0.48811287069787035, 9.999999999998899e-05, 0.006518598942799825, 0.009033491407645533, 0.029948630566845158, 0.03941670446334389, 0.00010871201314477386, 0.03275924992599144, 0.00923538984893535, 9.999999999998899e-05, 0.10115797930902592, 0.08073032252125945, 0.08379363502656867, 0.12661323990139495, 0.10199313947255029, 0.12782331501048305, 0.09778382864779267, 0.10716583417942527, 0.10023562016931464, 0.09601098204848546, 0.08237712043229517, 0.1035870178976771, 0.09012267031163479, 0.08051732708143988, 0.10225332551295829, 0.12322893524888456, 0.11471645235307915, 0.07760415314017155, 0.9671227799541928, 0.9885888567489965, 0.9051705304386605, 0.9268997536512438, 0.9031630468222287, 0.9585554576427301, 0.8111614431641903, 0.9207196430127679, 0.9331268038414702, 0.2275581534103318, 0.2431371653337424, 0.23062352453796464, 0.2428316771779866, 0.22965930515637878, 0.214953277158916, 0.24580703787595526, 0.22482767864640463, 0.1857859496876345, 0.328574954349352, 0.3268040353445304, 0.29538640377814673, 0.3629197202715422, 0.31600744743474474, 0.28220591488703217, 0.23204198058886005, 0.35913855194642397, 0.30618628901216194, 0.21557296554728267, 0.18562352798761295, 0.14768945863056504, 0.12359753883943358, 0.12817430362206284, 0.1250406767147808, 0.1278554719393431, 0.16690677036271295, 0.13733508765064384, 0.156905027052607, 0.16502743092505223, 0.1461255543674459, 0.26485553411470775, 0.13513105950148252, 0.14811148770854976, 0.17554892831163038, 0.14538893390688812, 0.15133906395492303, 0.031202401246748557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055097766690780925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1276554744100038, 0.10445667270576409, 0.09748160432268282, 0.10129121683785303, 0.08186004306493888, 0.08428488087018082, 0.1360195453463824, 0.07780290100326637, 0.1556668680917479, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019986698028830685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054935814523610293, 0.09197565099751304, 0.09601264912707252, 0.09382140424903918, 0.10021741393521211, 0.10906761813865906, 0.12057172498119273, 0.052795674730156006, 0.0725044123775479, 0.3904636538273606, 0.40738090293797335, 0.3836514723407298, 0.41157456654117064, 0.3869111040686489, 0.37625662976201557, 0.43324641221590754, 0.368782211118, 0.3594767536656015, 0.11040825889419559, 0.10069325657493045, 0.08504681023672911, 0.10192683124466895, 0.10717049281209967, 0.10187787771003787, 0.10882071809963834, 0.09614081580102884, 0.10378491407027757, 0.16723359757018375, 0.15559221082408714, 0.21909620057076817, 0.25221812356435525, 0.18992126314271784, 0.20594299992817067, 0.19153716187860004, 0.1726531802115847, 0.17877076931521696, 0.24817051100387877, 0.27621178130978774, 0.27601573570689364, 0.2338219952213968, 0.2644091304302074, 0.25871302499269133, 0.30757396349523536, 0.2592257301422365, 0.2858960134644871, 0.19901636101888087, 0.2259785176218001, 0.26071347269958167, 0.2048886290988332, 0.21620828478711662, 0.21307760010610122, 0.20163905689069028, 0.20138157502877907, 0.1838837993946908, 0.19690864754852555, 0.19704673366638958, 0.1738821870354117, 0.18442372424555042, 0.17498942999251, 0.21352639384303962, 0.20582939533662858, 0.18193029493848867, 0.19040333831236644, 0.21654197610944725, 0.1848524321870173, 0.19772030811104357, 0.2503079331911229, 0.19305281516033201, 0.1801687710812907, 0.19690836503549913, 0.20247990553596895, 0.1806424194039875, 0.168308769831634, 0.19381468751638287, 0.4770099413039245, 0.184477847305756, 0.19864532157503323, 0.19679318051784767, 0.20605615068176297, 0.1559718077729394, 0.16147922540654058, 0.41880658808445914, 0.11211078585576506, 0.20297425702913185, 0.2063654169022221, 0.19942612375377866, 0.20164947052539284, 0.2087628441655084, 0.2096475324765894, 0.1123041181326393, 0.18211064544560762, 0.18027166849089626, 0.17791004568890822, 0.17991890231889807, 0.19218223407341506, 0.20004496378048142, 0.18698227643257515, 0.18229766770718447, 0.1894248107236841, 0.0776061253926722, 0.07405811770870896, 0.07518762753405173, 0.08704337261612816, 0.08018499536307988, 0.0726647965783177, 0.06916803733186117, 0.0740657991557424, 0.07021745559756032]}, "mutation_prompt": null}
{"id": "8ff2b23e-d2d6-426a-8b81-4d5db6270cc4", "solution": "import numpy as np\n\nclass EnhancedDynamicPopDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param=0.3):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedDynamicPopDEAPSO", "description": "Enhance exploration by incorporating a dynamic population size strategy for improved diversity maintenance.", "configspace": "", "generation": 41, "fitness": 0.20517885267081581, "feedback": "The algorithm EnhancedDynamicPopDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "a5b49da6-244c-456d-9bcb-82536eecdb9b", "metadata": {"aucs": [0.5393651937790106, 0.5113270499162306, 0.42428805473223774, 0.4953508705561186, 0.3884334120157634, 0.4644614324394958, 0.5293701099443406, 0.5006298158388138, 0.48811287069787035, 9.999999999998899e-05, 0.006518598942799825, 0.009033491407645533, 0.029948630566845158, 0.03941670446334389, 0.00010871201314477386, 0.03275924992599144, 0.00923538984893535, 9.999999999998899e-05, 0.10115797930902592, 0.08073032252125945, 0.08379363502656867, 0.12661323990139495, 0.10199313947255029, 0.12782331501048305, 0.09778382864779267, 0.10716583417942527, 0.10023562016931464, 0.09601098204848546, 0.08237712043229517, 0.1035870178976771, 0.09012267031163479, 0.08051732708143988, 0.10225332551295829, 0.12322893524888456, 0.11471645235307915, 0.07760415314017155, 0.9671227799541928, 0.9885888567489965, 0.9051705304386605, 0.9268997536512438, 0.9031630468222287, 0.9585554576427301, 0.8111614431641903, 0.9207196430127679, 0.9331268038414702, 0.2275581534103318, 0.2431371653337424, 0.23062352453796464, 0.2428316771779866, 0.22965930515637878, 0.214953277158916, 0.24580703787595526, 0.22482767864640463, 0.1857859496876345, 0.328574954349352, 0.3268040353445304, 0.29538640377814673, 0.3629197202715422, 0.31600744743474474, 0.28220591488703217, 0.23204198058886005, 0.35913855194642397, 0.30618628901216194, 0.21557296554728267, 0.18562352798761295, 0.14768945863056504, 0.12359753883943358, 0.12817430362206284, 0.1250406767147808, 0.1278554719393431, 0.16690677036271295, 0.13733508765064384, 0.156905027052607, 0.16502743092505223, 0.1461255543674459, 0.26485553411470775, 0.13513105950148252, 0.14811148770854976, 0.17554892831163038, 0.14538893390688812, 0.15133906395492303, 0.031202401246748557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055097766690780925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1276554744100038, 0.10445667270576409, 0.09748160432268282, 0.10129121683785303, 0.08186004306493888, 0.08428488087018082, 0.1360195453463824, 0.07780290100326637, 0.1556668680917479, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019986698028830685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054935814523610293, 0.09197565099751304, 0.09601264912707252, 0.09382140424903918, 0.10021741393521211, 0.10906761813865906, 0.12057172498119273, 0.052795674730156006, 0.0725044123775479, 0.3904636538273606, 0.40738090293797335, 0.3836514723407298, 0.41157456654117064, 0.3869111040686489, 0.37625662976201557, 0.43324641221590754, 0.368782211118, 0.3594767536656015, 0.11040825889419559, 0.10069325657493045, 0.08504681023672911, 0.10192683124466895, 0.10717049281209967, 0.10187787771003787, 0.10882071809963834, 0.09614081580102884, 0.10378491407027757, 0.16723359757018375, 0.15559221082408714, 0.21909620057076817, 0.25221812356435525, 0.18992126314271784, 0.20594299992817067, 0.19153716187860004, 0.1726531802115847, 0.17877076931521696, 0.24817051100387877, 0.27621178130978774, 0.27601573570689364, 0.2338219952213968, 0.2644091304302074, 0.25871302499269133, 0.30757396349523536, 0.2592257301422365, 0.2858960134644871, 0.19901636101888087, 0.2259785176218001, 0.26071347269958167, 0.2048886290988332, 0.21620828478711662, 0.21307760010610122, 0.20163905689069028, 0.20138157502877907, 0.1838837993946908, 0.19690864754852555, 0.19704673366638958, 0.1738821870354117, 0.18442372424555042, 0.17498942999251, 0.21352639384303962, 0.20582939533662858, 0.18193029493848867, 0.19040333831236644, 0.21654197610944725, 0.1848524321870173, 0.19772030811104357, 0.2503079331911229, 0.19305281516033201, 0.1801687710812907, 0.19690836503549913, 0.20247990553596895, 0.1806424194039875, 0.168308769831634, 0.19381468751638287, 0.4770099413039245, 0.184477847305756, 0.19864532157503323, 0.19679318051784767, 0.20605615068176297, 0.1559718077729394, 0.16147922540654058, 0.41880658808445914, 0.11211078585576506, 0.20297425702913185, 0.2063654169022221, 0.19942612375377866, 0.20164947052539284, 0.2087628441655084, 0.2096475324765894, 0.1123041181326393, 0.18211064544560762, 0.18027166849089626, 0.17791004568890822, 0.17991890231889807, 0.19218223407341506, 0.20004496378048142, 0.18698227643257515, 0.18229766770718447, 0.1894248107236841, 0.0776061253926722, 0.07405811770870896, 0.07518762753405173, 0.08704337261612816, 0.08018499536307988, 0.0726647965783177, 0.06916803733186117, 0.0740657991557424, 0.07021745559756032]}, "mutation_prompt": null}
{"id": "027d5883-b0ef-4ec2-a597-68d014ccbb49", "solution": "import numpy as np\n\nclass EnhancedChaoticDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param=0.3):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedChaoticDEAPSO", "description": "Enhance the exploration by incorporating a self-adaptive mutation strategy for improved convergence behavior.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5b49da6-244c-456d-9bcb-82536eecdb9b", "metadata": {"aucs": [0.5393651937790106, 0.5113270499162306, 0.42428805473223774, 0.4953508705561186, 0.3884334120157634, 0.4644614324394958, 0.5293701099443406, 0.5006298158388138, 0.48811287069787035, 9.999999999998899e-05, 0.006518598942799825, 0.009033491407645533, 0.029948630566845158, 0.03941670446334389, 0.00010871201314477386, 0.03275924992599144, 0.00923538984893535, 9.999999999998899e-05, 0.10115797930902592, 0.08073032252125945, 0.08379363502656867, 0.12661323990139495, 0.10199313947255029, 0.12782331501048305, 0.09778382864779267, 0.10716583417942527, 0.10023562016931464, 0.09601098204848546, 0.08237712043229517, 0.1035870178976771, 0.09012267031163479, 0.08051732708143988, 0.10225332551295829, 0.12322893524888456, 0.11471645235307915, 0.07760415314017155, 0.9671227799541928, 0.9885888567489965, 0.9051705304386605, 0.9268997536512438, 0.9031630468222287, 0.9585554576427301, 0.8111614431641903, 0.9207196430127679, 0.9331268038414702, 0.2275581534103318, 0.2431371653337424, 0.23062352453796464, 0.2428316771779866, 0.22965930515637878, 0.214953277158916, 0.24580703787595526, 0.22482767864640463, 0.1857859496876345, 0.328574954349352, 0.3268040353445304, 0.29538640377814673, 0.3629197202715422, 0.31600744743474474, 0.28220591488703217, 0.23204198058886005, 0.35913855194642397, 0.30618628901216194, 0.21557296554728267, 0.18562352798761295, 0.14768945863056504, 0.12359753883943358, 0.12817430362206284, 0.1250406767147808, 0.1278554719393431, 0.16690677036271295, 0.13733508765064384, 0.156905027052607, 0.16502743092505223, 0.1461255543674459, 0.26485553411470775, 0.13513105950148252, 0.14811148770854976, 0.17554892831163038, 0.14538893390688812, 0.15133906395492303, 0.031202401246748557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055097766690780925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1276554744100038, 0.10445667270576409, 0.09748160432268282, 0.10129121683785303, 0.08186004306493888, 0.08428488087018082, 0.1360195453463824, 0.07780290100326637, 0.1556668680917479, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019986698028830685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054935814523610293, 0.09197565099751304, 0.09601264912707252, 0.09382140424903918, 0.10021741393521211, 0.10906761813865906, 0.12057172498119273, 0.052795674730156006, 0.0725044123775479, 0.3904636538273606, 0.40738090293797335, 0.3836514723407298, 0.41157456654117064, 0.3869111040686489, 0.37625662976201557, 0.43324641221590754, 0.368782211118, 0.3594767536656015, 0.11040825889419559, 0.10069325657493045, 0.08504681023672911, 0.10192683124466895, 0.10717049281209967, 0.10187787771003787, 0.10882071809963834, 0.09614081580102884, 0.10378491407027757, 0.16723359757018375, 0.15559221082408714, 0.21909620057076817, 0.25221812356435525, 0.18992126314271784, 0.20594299992817067, 0.19153716187860004, 0.1726531802115847, 0.17877076931521696, 0.24817051100387877, 0.27621178130978774, 0.27601573570689364, 0.2338219952213968, 0.2644091304302074, 0.25871302499269133, 0.30757396349523536, 0.2592257301422365, 0.2858960134644871, 0.19901636101888087, 0.2259785176218001, 0.26071347269958167, 0.2048886290988332, 0.21620828478711662, 0.21307760010610122, 0.20163905689069028, 0.20138157502877907, 0.1838837993946908, 0.19690864754852555, 0.19704673366638958, 0.1738821870354117, 0.18442372424555042, 0.17498942999251, 0.21352639384303962, 0.20582939533662858, 0.18193029493848867, 0.19040333831236644, 0.21654197610944725, 0.1848524321870173, 0.19772030811104357, 0.2503079331911229, 0.19305281516033201, 0.1801687710812907, 0.19690836503549913, 0.20247990553596895, 0.1806424194039875, 0.168308769831634, 0.19381468751638287, 0.4770099413039245, 0.184477847305756, 0.19864532157503323, 0.19679318051784767, 0.20605615068176297, 0.1559718077729394, 0.16147922540654058, 0.41880658808445914, 0.11211078585576506, 0.20297425702913185, 0.2063654169022221, 0.19942612375377866, 0.20164947052539284, 0.2087628441655084, 0.2096475324765894, 0.1123041181326393, 0.18211064544560762, 0.18027166849089626, 0.17791004568890822, 0.17991890231889807, 0.19218223407341506, 0.20004496378048142, 0.18698227643257515, 0.18229766770718447, 0.1894248107236841, 0.0776061253926722, 0.07405811770870896, 0.07518762753405173, 0.08704337261612816, 0.08018499536307988, 0.0726647965783177, 0.06916803733186117, 0.0740657991557424, 0.07021745559756032]}, "mutation_prompt": null}
{"id": "adbdd16a-8051-476c-ba12-891aab3308fe", "solution": "import numpy as np\n\nclass EnhancedChaoticDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param=0.3):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedChaoticDEAPSO", "description": "Enhance the exploration by incorporating a self-adaptive mutation strategy for improved convergence behavior.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5b49da6-244c-456d-9bcb-82536eecdb9b", "metadata": {"aucs": [0.5393651937790106, 0.5113270499162306, 0.42428805473223774, 0.4953508705561186, 0.3884334120157634, 0.4644614324394958, 0.5293701099443406, 0.5006298158388138, 0.48811287069787035, 9.999999999998899e-05, 0.006518598942799825, 0.009033491407645533, 0.029948630566845158, 0.03941670446334389, 0.00010871201314477386, 0.03275924992599144, 0.00923538984893535, 9.999999999998899e-05, 0.10115797930902592, 0.08073032252125945, 0.08379363502656867, 0.12661323990139495, 0.10199313947255029, 0.12782331501048305, 0.09778382864779267, 0.10716583417942527, 0.10023562016931464, 0.09601098204848546, 0.08237712043229517, 0.1035870178976771, 0.09012267031163479, 0.08051732708143988, 0.10225332551295829, 0.12322893524888456, 0.11471645235307915, 0.07760415314017155, 0.9671227799541928, 0.9885888567489965, 0.9051705304386605, 0.9268997536512438, 0.9031630468222287, 0.9585554576427301, 0.8111614431641903, 0.9207196430127679, 0.9331268038414702, 0.2275581534103318, 0.2431371653337424, 0.23062352453796464, 0.2428316771779866, 0.22965930515637878, 0.214953277158916, 0.24580703787595526, 0.22482767864640463, 0.1857859496876345, 0.328574954349352, 0.3268040353445304, 0.29538640377814673, 0.3629197202715422, 0.31600744743474474, 0.28220591488703217, 0.23204198058886005, 0.35913855194642397, 0.30618628901216194, 0.21557296554728267, 0.18562352798761295, 0.14768945863056504, 0.12359753883943358, 0.12817430362206284, 0.1250406767147808, 0.1278554719393431, 0.16690677036271295, 0.13733508765064384, 0.156905027052607, 0.16502743092505223, 0.1461255543674459, 0.26485553411470775, 0.13513105950148252, 0.14811148770854976, 0.17554892831163038, 0.14538893390688812, 0.15133906395492303, 0.031202401246748557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055097766690780925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1276554744100038, 0.10445667270576409, 0.09748160432268282, 0.10129121683785303, 0.08186004306493888, 0.08428488087018082, 0.1360195453463824, 0.07780290100326637, 0.1556668680917479, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019986698028830685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054935814523610293, 0.09197565099751304, 0.09601264912707252, 0.09382140424903918, 0.10021741393521211, 0.10906761813865906, 0.12057172498119273, 0.052795674730156006, 0.0725044123775479, 0.3904636538273606, 0.40738090293797335, 0.3836514723407298, 0.41157456654117064, 0.3869111040686489, 0.37625662976201557, 0.43324641221590754, 0.368782211118, 0.3594767536656015, 0.11040825889419559, 0.10069325657493045, 0.08504681023672911, 0.10192683124466895, 0.10717049281209967, 0.10187787771003787, 0.10882071809963834, 0.09614081580102884, 0.10378491407027757, 0.16723359757018375, 0.15559221082408714, 0.21909620057076817, 0.25221812356435525, 0.18992126314271784, 0.20594299992817067, 0.19153716187860004, 0.1726531802115847, 0.17877076931521696, 0.24817051100387877, 0.27621178130978774, 0.27601573570689364, 0.2338219952213968, 0.2644091304302074, 0.25871302499269133, 0.30757396349523536, 0.2592257301422365, 0.2858960134644871, 0.19901636101888087, 0.2259785176218001, 0.26071347269958167, 0.2048886290988332, 0.21620828478711662, 0.21307760010610122, 0.20163905689069028, 0.20138157502877907, 0.1838837993946908, 0.19690864754852555, 0.19704673366638958, 0.1738821870354117, 0.18442372424555042, 0.17498942999251, 0.21352639384303962, 0.20582939533662858, 0.18193029493848867, 0.19040333831236644, 0.21654197610944725, 0.1848524321870173, 0.19772030811104357, 0.2503079331911229, 0.19305281516033201, 0.1801687710812907, 0.19690836503549913, 0.20247990553596895, 0.1806424194039875, 0.168308769831634, 0.19381468751638287, 0.4770099413039245, 0.184477847305756, 0.19864532157503323, 0.19679318051784767, 0.20605615068176297, 0.1559718077729394, 0.16147922540654058, 0.41880658808445914, 0.11211078585576506, 0.20297425702913185, 0.2063654169022221, 0.19942612375377866, 0.20164947052539284, 0.2087628441655084, 0.2096475324765894, 0.1123041181326393, 0.18211064544560762, 0.18027166849089626, 0.17791004568890822, 0.17991890231889807, 0.19218223407341506, 0.20004496378048142, 0.18698227643257515, 0.18229766770718447, 0.1894248107236841, 0.0776061253926722, 0.07405811770870896, 0.07518762753405173, 0.08704337261612816, 0.08018499536307988, 0.0726647965783177, 0.06916803733186117, 0.0740657991557424, 0.07021745559756032]}, "mutation_prompt": null}
{"id": "65df8759-0ee6-4ad0-92dd-51b924face16", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance exploration by introducing a dynamic chaos parameter that adapts based on population diversity to improve search efficiency.", "configspace": "", "generation": 44, "fitness": 0.2103276100236053, "feedback": "The algorithm DynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "a5b49da6-244c-456d-9bcb-82536eecdb9b", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "f049404a-77b4-4c8f-a48e-54a40a8db688", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            chaotic_sequence = np.cumsum(np.random.uniform(-1, 1, size=x.shape))\n            new_x = x + chaos_param * chaotic_sequence\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve exploration by incorporating a mutation strategy based on chaotic sequences to enhance diversity in the search process.", "configspace": "", "generation": 45, "fitness": 0.20892225920556448, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.49285567189571133, 0.47008930378259184, 0.44400005799576125, 0.5095528249121293, 0.4810594731242369, 0.4710843285971117, 0.43954845867582615, 0.45936702796409956, 0.5197660506811852, 0.0666025509755942, 0.006663527022992666, 9.999999999998899e-05, 0.03580763838067502, 0.0629868241825896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12289654494404845, 0.10997376835736195, 0.08040210996907682, 0.1083889926037942, 0.1250155731117848, 0.13307026276927514, 0.11755025358481852, 0.10882955531920635, 0.10144092825901663, 0.08739713207962663, 0.08585673181811981, 0.09476687109306081, 0.10959026334403044, 0.08838517730405693, 0.12901275724334205, 0.10015555528886688, 0.06809503417394336, 0.10070177815333303, 0.92519029127678, 0.9892946317654959, 0.9011936061440253, 0.8393484950548522, 0.5450161306605099, 0.9123607764427888, 0.11491719173608239, 0.9282775118512667, 0.13637853965193358, 0.27734363687153873, 0.2603798275171768, 0.2726699050101593, 0.27215434235897373, 0.23793256419749886, 0.27816685644602046, 0.33914140719268804, 0.30971736996969856, 0.10337435468027067, 0.37126721205645175, 0.3493546445923863, 0.32347759336152426, 0.27764575694388904, 0.2076444193081195, 0.2739478198659697, 0.2727196464810471, 0.33288512263048387, 0.3487990901064366, 0.1675893506115439, 0.14874815785784556, 0.1802926561378877, 0.21872485573722622, 0.16328895064856808, 0.21816839619031803, 0.1969864440438296, 0.16839431334954258, 0.20515797824246484, 0.16513199212101104, 0.16337894377132522, 0.16836120118091424, 0.17167848789437923, 0.19870897049087155, 0.13548689590317775, 0.21477922473217193, 0.1389877556838337, 0.16373084332642773, 9.999999999998899e-05, 0.01623391492966819, 9.999999999998899e-05, 0.008667068626052044, 0.045264378920851, 9.999999999998899e-05, 0.02024746518784215, 0.03407509505165529, 0.03364692371024336, 0.12037206602427997, 0.09373893771566888, 0.07535603891773679, 0.03795593384917806, 0.09297676153526302, 0.0748339388546978, 0.07633356306429173, 0.06851039285880656, 0.07941181640290762, 9.999999999998899e-05, 0.006096521174151159, 0.008975315899225622, 9.999999999998899e-05, 0.0072832210368481975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13949267251970054, 0.06087236884698155, 0.13747710891562914, 0.06334704494563681, 0.0995090767461807, 0.1399876784508307, 0.1361611997925105, 0.11027522565256731, 0.08599129539105854, 0.4487865148983834, 0.4308861746585201, 0.4470191818822429, 0.4504955694214797, 0.4437203176807608, 0.4366566251327243, 0.43789030254957106, 0.43191548175196504, 0.438002586256529, 0.13885239953590311, 0.12231567032708279, 0.076528650333067, 0.1172797992225062, 0.12001294897210724, 0.1130038934506652, 0.10317177450621662, 0.09567730927523077, 0.13062529351333763, 0.2367223751648596, 0.29360523525968885, 0.1781619318691332, 0.26458239589513133, 0.2939946473360313, 0.2563626568424755, 0.2505960416251537, 0.224376295809668, 0.18331299871606377, 0.19259266960444787, 0.2911922753898244, 0.26930937923609266, 0.23555174873288698, 0.25927528614249107, 0.2998569193790219, 0.25220639201171535, 0.22297532723922153, 0.3149501873956886, 0.1344464690087519, 0.21152029209596823, 0.21759233510902454, 0.17639047808547548, 0.23433300673542423, 0.17596874816937946, 0.17235915887877273, 0.16720458185338793, 0.18084853079385588, 0.18908635305271826, 0.18871837198370855, 0.19427992798756666, 0.21008538356016382, 0.2212616374478802, 0.20404676985675796, 0.22288119572523502, 0.19648882942990054, 0.18721208715824889, 0.18261413055971398, 0.20927924710936419, 0.19920961034356077, 0.19469573345961955, 0.1893514786814431, 0.2415230850934661, 0.19218463736659552, 0.23301612087031642, 0.19220252808389515, 0.16206111437123072, 0.1988418444738873, 0.1728727482342003, 0.821621078262496, 0.20076967468612417, 0.19532699513743879, 0.8206125019121099, 0.17492327899709204, 0.15067955616644813, 0.4460959300348767, 0.11042979467909242, 0.11956611146234097, 0.13718819703050467, 0.6148459032492648, 0.1664226134755996, 0.27833388665607806, 0.10375495736130758, 0.21013562968595634, 0.19081424732564756, 0.17761963664074298, 0.19060581393731102, 0.18188225898326793, 0.19803000278411254, 0.18168486952307916, 0.19163239853884328, 0.18817212008922535, 0.18500255584507486, 0.07853598609336387, 0.08930271325767514, 0.08501489006009544, 0.08099229222130855, 0.07659771801427107, 0.08621312956318161, 0.09079679711416644, 0.07493558285021895, 0.08002695944107485]}, "mutation_prompt": null}
{"id": "5591b6bd-d8ef-4fc8-8e3b-f20acfc9c0c7", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance exploration by introducing a dynamic chaos parameter that adapts based on population diversity to improve search efficiency.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "5e2bce22-5a79-4b3d-b8f4-f839955f1064", "solution": "import numpy as np\n\nclass CrowdedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def crowded_differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            indices = np.argsort(fitness)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = crowded_differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "CrowdedDynamicChaosDEAPSO", "description": "Improve population diversity by incorporating a novel crowding-based selection mechanism to maintain a diverse set of solutions for enhanced exploration.", "configspace": "", "generation": 47, "fitness": 0.2103276100236053, "feedback": "The algorithm CrowdedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "d60a3193-4f5f-49a4-817a-05470db9c5e3", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c, d = population[np.random.choice(range(self.population_size), 4, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c) + d\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Enhance exploration by incorporating a chaotic local search to exploit promising regions and diversify the population for improved convergence.", "configspace": "", "generation": 48, "fitness": 0.19762141322768767, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.38358981989982865, 0.44487264957915773, 0.4253445810492401, 0.43966606138845377, 0.436728242608998, 0.4003701102356353, 0.5121295401186354, 0.5163420465073998, 0.4794856565052944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003655586267210298, 0.000498825528230884, 9.999999999998899e-05, 9.999999999998899e-05, 0.018465271826390794, 9.999999999998899e-05, 0.10744748415185912, 0.09917275218007848, 0.11745882564403798, 0.09278699899365384, 0.08266897289586872, 0.09221018716138119, 0.08880374897224375, 0.10777944422202201, 0.0975060625970815, 0.07310224525089926, 0.09084384954725211, 0.07912048024375506, 0.06835184198064748, 0.08218602242474171, 0.08503139173475616, 0.07968686624137777, 0.08267352226836844, 0.07291563595732753, 0.9909575301912764, 0.9885321709780194, 0.9899717383126463, 0.9795377343245218, 0.9870114986145597, 0.9902383505787994, 0.9725228950530034, 0.9874134319378007, 0.8839664838325718, 0.25322257374912793, 0.3046717145318605, 0.2218993763238103, 0.2210091622840119, 0.2526108153140476, 0.23460472590180148, 0.19782945577903777, 0.2519545602318106, 0.25531985918729305, 0.22101386449846228, 0.32350140498434043, 0.2253329081637937, 0.2609329678475384, 0.370471703794086, 0.1966278576482432, 0.23354571914582778, 0.25071148094257956, 0.289607815178922, 0.12490679723031284, 0.14345166937013365, 0.13448446914678935, 0.12239695962389852, 0.1267623911608431, 0.1227958449991009, 0.13443755418199377, 0.1250372734863826, 0.14442144251524802, 0.06487513678295476, 0.10819660168515888, 0.14007507949202813, 0.11099990672609839, 0.13596939281414855, 0.15986880977926943, 0.14077418737447933, 0.0950980489143054, 0.11897996878195005, 0.03481906643285415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00350539531769134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09000507634753852, 0.11392853943657921, 0.10041859924759067, 0.103695476309966, 0.10105633924984125, 0.0840061869148987, 0.10576868536214479, 0.07943322674459141, 0.08544602625515196, 0.01940791708950873, 9.999999999998899e-05, 0.008833174163199509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07271088604919262, 0.11553699103313853, 0.13072998937794855, 0.12446390945646457, 0.06564055319320306, 0.043365438618805485, 0.12961096968829933, 0.09333939790448842, 0.09097896025403607, 0.41103880617051436, 0.38560266179236924, 0.38397939958100524, 0.3390617412796548, 0.35631232764380405, 0.41036935676121744, 0.35132635697264414, 0.37459726260105686, 0.42993981739943277, 0.1184649087383397, 0.10398232829991882, 0.07656464797855789, 0.09206268916708737, 0.09020812850271431, 0.08437779526758404, 0.09908925593115558, 0.08970148623339846, 0.0907470785650425, 0.18577440703369608, 0.18251647146182792, 0.14522827028143404, 0.1873356256652854, 0.21050435458432004, 0.14991341418823667, 0.1579632336864477, 0.15276673969362453, 0.16427137876458442, 0.2553531050946186, 0.21353133551557213, 0.2619281306288511, 0.21590974870864965, 0.27353700296955274, 0.30232985843539895, 0.30553423727361784, 0.229187028679112, 0.2371066782097968, 0.2296172927536384, 0.21513532146766534, 0.18018020682245317, 0.1394005457976618, 0.1859392346918034, 0.18294412648924807, 0.195847403272582, 0.20397146688535872, 0.19040392305920817, 0.19338781927063553, 0.1812259210918934, 0.19384114014992115, 0.18215425964093135, 0.18951138903001918, 0.19107344141913496, 0.2042757859486043, 0.1891863671082913, 0.19859534307376137, 0.169096526133099, 0.17238813812317766, 0.1830341497396858, 0.18940345287565385, 0.18057109263980542, 0.19646270628215556, 0.19349613370514718, 0.22107430177918186, 0.17401185841881184, 0.17133757660675997, 0.5320348074719086, 0.18446300211207667, 0.17643856300840455, 0.18600462256124595, 0.19708214018686, 0.1545370300554163, 0.1433902866184762, 0.15679000167902046, 0.47331984360958756, 0.20359338262519677, 0.36430522520767783, 0.20202614321772505, 0.1483062028210328, 0.2018632710792405, 0.20880082424969726, 0.20384388274755205, 0.12660282913404497, 0.17071264921050333, 0.18434204682422217, 0.16593928975905436, 0.18388080768438442, 0.17465779404765203, 0.1931637053406403, 0.17888406701984916, 0.22820917922286288, 0.17854019364232576, 0.07695778146214649, 0.0712823037528536, 0.0776523083404449, 0.07487492984603483, 0.09645369128942816, 0.07895287701244436, 0.06744730134176358, 0.06935670371320157, 0.08768471342529482]}, "mutation_prompt": null}
{"id": "5f8f5a52-c4e7-44e7-b3e6-467b44345de2", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def fractional_mutate(x, a, b, c, f, beta):\n            return np.clip(a + f * (b - c), -5.0, 5.0) + beta * np.random.uniform(-1, 1, x.shape)\n\n        def chaotic_search(x, best, chaos_param, beta):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape) + beta * np.random.uniform(-1, 1, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param, beta):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = fractional_mutate(population[i], a, b, c, f, beta)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param, beta)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n        beta = 0.1\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param, beta)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            beta = max(0.01, min(0.1, np.std(population) * 0.1))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve exploration and exploitation balance by incorporating a novel chaotic search strategy based on fractional calculus to enhance convergence speed and solution quality.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'self_adaptive_mutate' is not defined\").", "error": "NameError(\"name 'self_adaptive_mutate' is not defined\")", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {}, "mutation_prompt": null}
{"id": "c4b527fe-6bf6-46ee-bcd7-1ee6f3ee907a", "solution": "import numpy as np\n\nclass EnhancedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(self.w_min, min(self.w_max, f * (1 - np.mean(fitness) / best)))  # Dynamic inertia weight adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "EnhancedDynamicChaosDEAPSO", "description": "Enhance exploration and exploitation balance by incorporating a dynamic inertia weight mechanism based on individual performance to guide the search towards promising regions efficiently.", "configspace": "", "generation": 50, "fitness": 0.17230877777922904, "feedback": "The algorithm EnhancedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.32325222678166643, 0.32589652563243976, 0.37096800830422083, 0.29475077834538843, 0.35379511631847804, 0.3530515835249054, 0.2735873874800231, 0.3684178589316287, 0.29486861459690594, 0.008056350820568325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08052107289919008, 0.08165751259189546, 0.07469562368343363, 0.08138977317601925, 0.07891378916972713, 0.08171510654899161, 0.07390787793555997, 0.08537785654589225, 0.07077057438801726, 0.07124851742944538, 0.05937960906193185, 0.06622447853305691, 0.07982616634728512, 0.06829977312304214, 0.08135880202987589, 0.07911467095526914, 0.07364381670028874, 0.07460766944816855, 0.972378598865247, 0.9840499687625716, 0.9620366971878175, 0.9581953862496673, 0.9109188881198335, 0.9596441159491595, 0.8728662057607894, 0.9251396646208955, 0.8938987653344109, 0.16976907957530363, 0.17155467079314024, 0.14864111833693328, 0.174641480479528, 0.15491656896248152, 0.1343944474184251, 0.17515228406395977, 0.17039261922067528, 0.17117045693307864, 0.20290675925859025, 0.2626686398077682, 0.2062266474726392, 0.18923502873348796, 0.2023789122326498, 0.21179379237693807, 0.23447936148805304, 0.22389116535670073, 0.2166968036369844, 0.13074039754542388, 0.12583366472129198, 0.11039176137484463, 0.1054221367563496, 0.08893829579445134, 0.10721734725416066, 0.08488182315037607, 0.1122502123642416, 0.11280597093291111, 0.11707486293293734, 0.11930999682595467, 0.0985880124307591, 0.13058643364999623, 0.1089989293955621, 0.08441328815444593, 0.10944325574647795, 0.1855695035260102, 0.10852040120434792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0070306659547635375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07410217707025224, 0.10478144072697637, 0.07683557416853015, 0.1038911506772161, 0.08366195872905702, 0.05872715685355323, 0.087805032985937, 0.04817713627304787, 0.06948142052495987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045674997152685526, 0.025800930413838463, 0.04403621861561968, 0.029006678430332222, 0.026437079866293067, 0.03601010578815367, 0.051547995131764, 0.08702333048518773, 0.03589083751551303, 0.34852115172516285, 0.32118256776186105, 0.3074054270105938, 0.2864627656288913, 0.321655227956985, 0.30475744764407664, 0.2907075915479659, 0.3565846889640275, 0.2993019780833117, 0.06943241919084997, 0.0857981174068293, 0.0720723263232228, 0.07641284468536125, 0.08130389488944822, 0.07968122743654182, 0.06760645347646332, 0.07511334659786595, 0.08341897051737002, 0.1338910075500146, 0.1802051376977588, 0.1409962696504432, 0.1495503868915946, 0.15843428236005186, 0.148443528470387, 0.13684753310686215, 0.1346456581597657, 0.13180602178829026, 0.21603795021720207, 0.22640082847197196, 0.2313260738521109, 0.22110956717862307, 0.21863016658157297, 0.20980722083719516, 0.22286984026559276, 0.2775682211521038, 0.2239224476320948, 0.17444483407354894, 0.15676612965248127, 0.1546447898314014, 0.1591635066941679, 0.1532449411678506, 0.15889638701854625, 0.16975544890715322, 0.15777245415084895, 0.17864394262794536, 0.19159172451860218, 0.1972454698215873, 0.1877592636357044, 0.18023599024621506, 0.19579346260533104, 0.1964761664999216, 0.1847326734523138, 0.2172222570733061, 0.19089559141393586, 0.1659848467523528, 0.16641632067340817, 0.17330152271222943, 0.17981779466738534, 0.16780979980141786, 0.18734652494037018, 0.17393974793244238, 0.1740494907349921, 0.1639628661682373, 0.17884000188983573, 0.4310161914124223, 0.3548526494090932, 0.19554872823315717, 0.1796033849315143, 0.1844234068176983, 0.2392743271916976, 0.1642109120972467, 0.1803995675473017, 0.15416657015343338, 0.2404595249962035, 0.18438067580189588, 0.19252824436087268, 0.20751246638264043, 0.20277497882077966, 0.20476744094564525, 0.23372590867892928, 0.20502213350299714, 0.17376971688168874, 0.19211592476631933, 0.18529984371889618, 0.18058115405547293, 0.17302157167379606, 0.17603088289277147, 0.1923124553883584, 0.1907504405855721, 0.17723730141937044, 0.1007317169321219, 0.0742326442797483, 0.06606390819565588, 0.06863918651531586, 0.08470106418050038, 0.058895720623763914, 0.07457424383129452, 0.07631614944606135, 0.06334697584397564]}, "mutation_prompt": null}
{"id": "fc360950-2de2-4e8e-bb5f-1e3f4518584b", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def adaptive_chaos_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = adaptive_chaos_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve exploration and exploitation balance by incorporating a novel self-adaptive chaos parameter that adjusts based on the function landscape to enhance search diversity and convergence.", "configspace": "", "generation": 51, "fitness": 0.2103276100236053, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "ac696c58-9d48-4111-93ee-5975c75c4dac", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance exploration by introducing a dynamic chaos parameter that adapts based on population diversity to improve search efficiency.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "57380177-a003-479a-83d9-e11d905c8e73", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance exploration by introducing a dynamic chaos parameter that adapts based on population diversity to improve search efficiency.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "17a65ee8-3365-4962-8850-bb10b808ffc7", "solution": "import numpy as np\n\nclass EnhancedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def adaptive_chaotic_search(x, best, diversity):\n            chaos_param = 0.3 + np.mean(diversity) / 20.0  # Adjust chaos based on diversity\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, diversity):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = adaptive_chaotic_search(new_population[i], best, diversity)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, np.std(population, axis=0))\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "EnhancedDynamicChaosDEAPSO", "description": "Enhance the exploration and exploitation balance by incorporating a novel adaptive chaos parameter that adjusts based on the function landscape to guide the search efficiently.", "configspace": "", "generation": 54, "fitness": 0.19900065810150216, "feedback": "The algorithm EnhancedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4350844238824526, 0.43958353943855377, 0.46514587131883045, 0.4290509249061404, 0.4563274237367978, 0.42561593050487945, 0.4076328830814603, 0.4610416385139112, 0.43534334180224055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10942690207580252, 0.09479811295722262, 0.09056746211168898, 0.1101706597102391, 0.11424940158331631, 0.09556415779182603, 0.11087440173138852, 0.09904574618493478, 0.08218322992412563, 0.09360108729953986, 0.12305367973587311, 0.07382936032228749, 0.07982325178038774, 0.08421310192546994, 0.10985000262233902, 0.10384956098740272, 0.09402848081871562, 0.10906097762085887, 0.9667215301642245, 0.9838099343034057, 0.9462149841451549, 0.9531817221935146, 0.8955826892678296, 0.9696393688486362, 0.8249145569801658, 0.9260644683155226, 0.9197677307323995, 0.24158884572952755, 0.20642483005449475, 0.20895238406695205, 0.24143602297123146, 0.27250249177398156, 0.2908540344712376, 0.22303909837454883, 0.22664488729190058, 0.20661212678354002, 0.22460849168961183, 0.22317644586695917, 0.2231758961264, 0.3068861549583256, 0.3271941373307804, 0.2736528122480235, 0.34100929607696684, 0.23047456470788952, 0.35023362677276526, 0.12427741920357349, 0.12574916887239906, 0.132801359590625, 0.15033988495338835, 0.1257055523269568, 0.19753486951964383, 0.172617980162881, 0.14840257026694303, 0.12402326982279777, 0.15552158233683644, 0.20902131428825255, 0.12695758900061516, 0.1412735144005577, 0.13129462008223458, 0.14942459133672725, 0.12952714569931612, 0.12354674971761559, 0.15060881495535627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009881673384367962, 9.999999999998899e-05, 0.00817748072311153, 9.999999999998899e-05, 0.0044972344687057575, 0.04181881233271889, 0.1089768656455975, 0.09926869208191891, 0.11428140997457725, 0.10000600142419103, 0.0843385886271859, 0.07052041102987638, 0.10680808532454433, 0.10587764288090817, 0.08243710771014179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08915760676766038, 0.07687903974253063, 0.07411069430722617, 0.1334229840787402, 0.06765123229680015, 0.12671436416113757, 0.10573574945955733, 0.047749493011795874, 0.15001184926441524, 0.3542876784352553, 0.3545303275556375, 0.4484859014499252, 0.35991653343945695, 0.4085457500007196, 0.3914156831007898, 0.3721356911749921, 0.3977684883011676, 0.4549310781309772, 0.10741551055276555, 0.08224482703024627, 0.09769336749435864, 0.11010619762848839, 0.08390887662875868, 0.10990172588499825, 0.08151199844384704, 0.09714612788316279, 0.09229890992775203, 0.17460638180692967, 0.15607887883314575, 0.19671742637985057, 0.22152853945652318, 0.26603762004767817, 0.19403585608157947, 0.18985400073770287, 0.20406922973036457, 0.2524322889188654, 0.27695296906022526, 0.27597415862195607, 0.2588516097422746, 0.22970544367273893, 0.26933051925771834, 0.301649861127926, 0.269437441450472, 0.2783855451709788, 0.27693723966764106, 0.19214657340645513, 0.20240344611545114, 0.17973992099093283, 0.22341322634100602, 0.1972881859660166, 0.2285848632769406, 0.1706411454157375, 0.19475466135489794, 0.19715468362841782, 0.19385598301871698, 0.19528002377450393, 0.17813766439119705, 0.20880581413925603, 0.18734692403031838, 0.20486663422778506, 0.19234381416780522, 0.19162455494829544, 0.19499801647124326, 0.18867111651984803, 0.18816821925252625, 0.1928544937094776, 0.21628463343243265, 0.20667938084662107, 0.18252746375599438, 0.19035698921784794, 0.19231305649924002, 0.1878449181383275, 0.1681811393697883, 0.18385217778155494, 0.18360358214469696, 0.16562281164565118, 0.19547360114753765, 0.18529998919293156, 0.5853371744816915, 0.18617785585460167, 0.16803738501823573, 0.14984192332674084, 0.11181776625422624, 0.20538500416172578, 0.12549787571191096, 0.20761248540680022, 0.20537696453083765, 0.11346138384554327, 0.20747121913154498, 0.1252103589254724, 0.1892510166632062, 0.17930424172633552, 0.18899748159855212, 0.1857649582050036, 0.1869143443904271, 0.21431282806583485, 0.18625160636499039, 0.17220957697470873, 0.18183420892041335, 0.0649185811179479, 0.07719040368766183, 0.07798397198989371, 0.08120603009269123, 0.07954432914137977, 0.08301576296665569, 0.0824403227183158, 0.05886621825378513, 0.07832977740089841]}, "mutation_prompt": null}
{"id": "b8c8902f-0531-4ec0-ba26-d3551f7d967e", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n        self.chaos_param_min = 0.1\n        self.chaos_param_max = 0.5\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(self.chaos_param_min, min(self.chaos_param_max, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Enhance exploration by integrating a novel chaos-driven search strategy that leverages adaptive chaos levels for improved population diversity and convergence speed.", "configspace": "", "generation": 55, "fitness": 0.2103276100236053, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "2547518b-a57d-4dbf-b4e6-83cfd44654b4", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance exploration by introducing a dynamic chaos parameter that adapts based on population diversity to improve search efficiency.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "3551649f-dea3-42bd-910b-7e5378fbe35b", "solution": "import numpy as np\n\nclass MultiPopDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_populations = 5\n        self.population_size = 10\n        self.max_iterations = budget // (self.num_populations * self.population_size)\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        populations = [np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)) for _ in range(self.num_populations)]\n        fitnesses = [np.array([func(ind) for ind in pop]) for pop in populations]\n        bests = [np.min(fitness) for fitness in fitnesses]\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            for i in range(self.num_populations):\n                populations[i], fitnesses[i], bests[i] = differential_evolution(populations[i], fitnesses[i], bests[i], f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = [np.std(pop, axis=0) for pop in populations]\n            chaos_param = max(0.1, min(0.5, np.mean([np.mean(div) for div in diversity])))\n        return np.min(bests)", "name": "MultiPopDynamicChaosDEAPSO", "description": "Enhance exploration and exploitation by incorporating a multi-population strategy to diversify the search and intensify the convergence process.", "configspace": "", "generation": 57, "fitness": 0.17882546096794036, "feedback": "The algorithm MultiPopDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.351522662957685, 0.37675184631065617, 0.3510667531510656, 0.33456023517870825, 0.3841912424362147, 0.3342741674268953, 0.327926791613497, 0.3418702150564906, 0.33293632027130493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006262278214756001, 9.999999999998899e-05, 0.012196472430186622, 9.999999999998899e-05, 0.014572086008054597, 9.999999999998899e-05, 0.0879464459649476, 0.09572227368571784, 0.1006498137875198, 0.07620863931823074, 0.07729960013336079, 0.09000261203506144, 0.08819157579752557, 0.09175529408814254, 0.08967176185533077, 0.0733379307623212, 0.0901871711564125, 0.0764094460010909, 0.07522627955822114, 0.08085220313017105, 0.07007112592828213, 0.06363992959736442, 0.06364976879891948, 0.06670212779965656, 0.931446275587269, 0.7426774187014524, 0.8881052361776417, 0.8057649380749654, 0.9274624381104087, 0.9585868844499649, 0.8877435704919729, 0.9424723513538816, 0.8976171581215794, 0.18591985178867088, 0.1546178527112657, 0.16896640989184364, 0.13787982816276523, 0.17375167461545404, 0.14992395490860766, 0.16281287136743194, 0.1422956886716329, 0.1521322464309378, 0.26748189517442167, 0.2167595228483703, 0.24492073549076032, 0.23276056256905042, 0.27138285075783697, 0.2183428960910213, 0.22182273547907327, 0.20136611911887525, 0.23195802127130705, 0.11588426529875473, 0.09779658375053846, 0.09746257367936995, 0.10628374030783105, 0.10380491734480579, 0.10618209685731494, 0.1002833664312961, 0.09906486420524963, 0.13973211212558123, 0.10493519176097599, 0.1304996565498523, 0.10262314479441825, 0.10536931835934393, 0.11621434311306944, 0.11010066261839424, 0.11476297119068679, 0.09693725638977102, 0.12906083470896534, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033483748931335544, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025861676492022756, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013015154688454933, 0.07497538842735718, 0.08006048421195333, 0.07989618932311837, 0.04618516742307677, 0.0912157312775087, 0.03942552515684805, 0.06386501814063139, 0.0626101652425316, 0.08552969434157498, 9.999999999998899e-05, 0.005282997157259106, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008606054302825461, 9.999999999998899e-05, 9.999999999998899e-05, 0.001738126804003648, 0.0025648612333328824, 0.06390173297628776, 0.06772539806271927, 0.04853063550418668, 0.056453676155486354, 0.06455225806862763, 0.06885351670075546, 0.07257573921142557, 0.060552868583052644, 0.07672792573424836, 0.32173287560471586, 0.3392002615048497, 0.34999615122023, 0.3279774710813559, 0.32964517368324986, 0.32828144686374117, 0.3491567375709862, 0.3011145987889705, 0.3399572335368862, 0.07112310155798529, 0.08293614429607865, 0.09278778711891222, 0.09223917254745861, 0.08297939566928858, 0.08151948385394148, 0.08435903024361746, 0.09384328914754914, 0.08454770474617401, 0.15981655609523782, 0.14796726603097832, 0.15513475919576958, 0.175186749444317, 0.14088221443723614, 0.1683082721532233, 0.15230086857390668, 0.1765896350181294, 0.14524234473221964, 0.23777741646415762, 0.23866537207900018, 0.24114219231378176, 0.21958756001551427, 0.21774696881163613, 0.22456798944573586, 0.2271521097152407, 0.21145999854454478, 0.23701475382111847, 0.1688001341464178, 0.17757860670881997, 0.17567880576320383, 0.18225068901491537, 0.20778849660719212, 0.17165061588959885, 0.16877832309733154, 0.18314765408045386, 0.17951501926831936, 0.1755890690838029, 0.1715830872093289, 0.18670052771050027, 0.20561005507893848, 0.17061693197702765, 0.16928252137095645, 0.17223184510480483, 0.17217303963550545, 0.170258626099412, 0.1693055757759535, 0.17242683252969182, 0.16507147776026976, 0.17145555035489746, 0.17068407260512908, 0.17629249170508865, 0.16622235260916474, 0.16831448818242567, 0.16560112835364305, 0.410835607287239, 0.3091534089172041, 0.32845729583026184, 0.17169059992144264, 0.2874147005080081, 0.5593906405233582, 0.2876579822844034, 0.43435306077778946, 0.2928297517166266, 0.28933667716040445, 0.19224650282211164, 0.20209431544030432, 0.17684320255346486, 0.2992236292494964, 0.21369727394758165, 0.1879611462472952, 0.19384404904174168, 0.187794108732656, 0.17748211641287126, 0.18031869755180086, 0.18379700299844148, 0.18749350565858058, 0.21743543958349543, 0.1883040464966209, 0.18028641830225256, 0.17778495767273594, 0.17850606299259886, 0.07372019015825226, 0.06783008478880581, 0.0688814415663157, 0.06588332440496947, 0.07281709232172673, 0.07647951442414525, 0.07208931767784399, 0.055945140524006676, 0.07155598827608389]}, "mutation_prompt": null}
{"id": "77ad2daf-b668-4cd4-8cd5-a2bf2c63121f", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve exploration by incorporating a chaotic search strategy with self-adaptive mutation and crossover rates to enhance diversity and convergence speed.", "configspace": "", "generation": 58, "fitness": 0.2103276100236053, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "7e114b33-4bfd-4da8-a098-3c996ea4430f", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def adaptive_chaos_search(x, best, diversity):\n            chaos_param = 0.1 + 0.4 * (1 - np.tanh(np.mean(diversity)))\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, diversity):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = adaptive_chaos_search(new_population[i], best, diversity)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, np.std(population, axis=0))\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve exploration by adding a novel adaptive chaos parameter that dynamically adjusts based on the population's performance diversity to enhance search efficiency.", "configspace": "", "generation": 59, "fitness": 0.20116009657078604, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4722521219965512, 0.38955247239837465, 0.4689812162635857, 0.49560223642938195, 0.46153860599452123, 0.4094674435549873, 0.5544566966108138, 0.44438903332145796, 0.45759866735714694, 9.999999999998899e-05, 0.039819347017439055, 0.005988117087858291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009624150999845593, 0.02492406297534011, 9.999999999998899e-05, 0.12728837515503133, 0.11237587701101526, 0.11855022593608644, 0.1251171520719836, 0.09844405026896441, 0.10871021903883171, 0.11159821017667093, 0.08444786518753411, 0.10373158465257915, 0.09019770294611085, 0.08941996033544364, 0.1012647401878819, 0.12026170756182486, 0.09803041724903028, 0.11545026183128526, 0.08401264512306339, 0.08477357982269318, 0.086336111925429, 0.9499559817389926, 0.9745438508668596, 0.9402429819814676, 0.9353472021076121, 0.936093585541459, 0.9584950237672738, 0.8758534348081108, 0.9251775138317048, 0.8740599937869401, 0.23489076401900477, 0.26267931229585173, 0.2449003060260846, 0.21292060662050982, 0.2487683246820963, 0.2916829016146124, 0.23451379294346497, 0.24106264303535463, 0.23223726058939842, 0.26457289230593617, 0.261539971376582, 0.27427086256190214, 0.30636284554173965, 0.2724112308715865, 0.21387314139629465, 0.23518215199937942, 0.31083819600152496, 0.29173830968896974, 0.12366009756849272, 0.12698872662200722, 0.13472795890628242, 0.14800972721375727, 0.1291815873132457, 0.17381453097859234, 0.1401638818946792, 0.16600997121001204, 0.13754100987413898, 0.13733735383035695, 0.14212757987944602, 0.13722618579167234, 0.12499321795256979, 0.13934102657321767, 0.13933524194338875, 0.1318382363161863, 0.1557549007267417, 0.13472645201118283, 0.025110611922054105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031255363920559276, 0.0015931298685294415, 0.0006553099906021487, 9.999999999998899e-05, 0.0888989616673056, 0.14594676634012083, 0.15179779573906782, 0.0775803999755339, 0.11857486725449995, 0.0765952174718052, 0.12316664870578264, 0.1201612877986683, 0.07165299482294618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07170748877074729, 0.0021165126142793644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09840350718735136, 0.08272582139519147, 0.04207336102056847, 0.08922120102823317, 0.09231752365744328, 0.1024516004629562, 0.09247275221988782, 0.09365696152008474, 0.16647126164820258, 0.39627579310785055, 0.3660397966380521, 0.4210950177929319, 0.36981994726790846, 0.392791887584372, 0.397421958221414, 0.3927249733728041, 0.3666528838884153, 0.3373214188421826, 0.10416833283892413, 0.10037267027926633, 0.1054004584754592, 0.10724504601399454, 0.11507097527120946, 0.10137978685305793, 0.10481053375828542, 0.09107238817585461, 0.12466934233840643, 0.24404341420029418, 0.23922867737128373, 0.2344117967690047, 0.18302443027479554, 0.18691025786446702, 0.2501159232790625, 0.21095318526082052, 0.19020450254708998, 0.19751880771602004, 0.2688619666526747, 0.2549227006301711, 0.26078559831218606, 0.24913311455145282, 0.2330276419007381, 0.23784189972270264, 0.25596354598137183, 0.22606354455774835, 0.2675271472798204, 0.21334070576270092, 0.1895689134891103, 0.21535587980344673, 0.22904158208760683, 0.17689567134311368, 0.23244125333532117, 0.15145726292318418, 0.2342513383018493, 0.22496364854136608, 0.1891707203543449, 0.19852635062923174, 0.20166814699825986, 0.18504985145794373, 0.2048672614789694, 0.21569262624032803, 0.18511964073224185, 0.20580999921142673, 0.20512171108102606, 0.182846337824894, 0.1874548470718841, 0.19044550485601786, 0.18098099793866773, 0.18370032598507047, 0.18109780673913023, 0.23853558496859006, 0.19173038800200382, 0.1979978335403606, 0.18454871658260608, 0.18431382487880132, 0.16903997582099128, 0.18645262238279114, 0.1862811310766277, 0.5766243643473034, 0.19693766110067845, 0.16835466507435504, 0.1943814671457037, 0.15351485515864483, 0.2055325325584717, 0.20656841098629142, 0.16648647899003077, 0.16556431177891484, 0.16685466768177415, 0.20764326902647867, 0.1253964739165354, 0.15440533610265406, 0.18924900211631568, 0.17356804816452043, 0.1950188376438866, 0.17750856675155735, 0.1788073821771894, 0.18634507209070794, 0.18898009318148912, 0.17677133993718175, 0.17498146846924734, 0.07305897187213051, 0.06867576468044989, 0.07570211190097853, 0.07192755582959875, 0.07334159750445068, 0.08879777228726293, 0.07139655907865727, 0.07858221007838162, 0.0695890380565779]}, "mutation_prompt": null}
{"id": "b61027ca-83df-4447-9a5d-ad25e737bafe", "solution": "import numpy as np\n\nclass EnhancedDynamicChaosDEAPSO(DynamicChaosDEAPSO):\n    def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best", "name": "EnhancedDynamicChaosDEAPSO", "description": "Enhance exploration by incorporating a chaotic search mechanism to promote diversity and improve the search efficiency.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: IndentationError('unindent does not match any outer indentation level', ('<string>', 12, 83, '        def differential_evolution(population, fitness, best, f, cr, chaos_param):\\n')).", "error": "IndentationError('unindent does not match any outer indentation level', ('<string>', 12, 83, '        def differential_evolution(population, fitness, best, f, cr, chaos_param):\\n'))", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {}, "mutation_prompt": null}
{"id": "21a6e6e2-13f8-4710-89b8-69055604e9b3", "solution": "import numpy as np\n\nclass EnhancedDynamicChaosDEAPSO(DynamicChaosDEAPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_param = 0.3\n\n    def __call__(self, func):\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = self.chaos_param\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "EnhancedDynamicChaosDEAPSO", "description": "Enhance exploration and exploitation by incorporating a self-adaptive chaos parameter that dynamically adjusts based on population diversity to improve search efficiency.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {}, "mutation_prompt": null}
{"id": "63076319-632b-404a-9e61-eb82bc61a3fb", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def levy_flight(x, beta=1.5, scale=0.1):\n            levy = np.random.standard_cauchy(x.shape)\n            step = scale * levy / np.abs(levy) ** (1.0 / beta)\n            return np.clip(x + step, -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = levy_flight(new_population[i])  # Incorporate Levy flight\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve exploration and exploitation balance by incorporating Levy flight behavior for enhanced global search capability.", "configspace": "", "generation": 62, "fitness": 0.18031689193188838, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.32881383439852696, 0.3855765733154599, 0.3398440375123045, 0.3428094737188774, 0.39415420716323957, 0.31184585263030884, 0.35924123764996285, 0.3282119757849681, 0.2996907243600233, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035430761112933418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08492637924480717, 0.09004522053041186, 0.09021926415798776, 0.0749526147387849, 0.08175690484212284, 0.09761602560812421, 0.0834703867506682, 0.06624077330500588, 0.08239646124043998, 0.07482395134875697, 0.0772174146368294, 0.06543822953913547, 0.06929149998361261, 0.07741453624991113, 0.07751397769372093, 0.07480297317850548, 0.07151944358065299, 0.07505513452779888, 0.969122819980704, 0.9563724412998642, 0.9744955197911669, 0.9299437834536255, 0.8639731949664373, 0.9571960816424819, 0.8992527827730915, 0.975185946685945, 0.9466774190904467, 0.13734483071199066, 0.16260423310411443, 0.23445980070612782, 0.17551192379773306, 0.17756457621221833, 0.1736071573244442, 0.18931847255086642, 0.15922006038143044, 0.18331881903183234, 0.216837331081719, 0.2248127753698368, 0.27855247811978, 0.2281446598012814, 0.21456101688056328, 0.26903825123401015, 0.22300396663553734, 0.22202403461473663, 0.21578520691504388, 0.10764568595334334, 0.11651021712182463, 0.10924900885703392, 0.11163580290442132, 0.11833923790576972, 0.10608341253311138, 0.1256653302061712, 0.12592781832006406, 0.11965931717652678, 0.11376018288712364, 0.0882337814363755, 0.11634577353904474, 0.10838771887780951, 0.12255564380816053, 0.12353734769932889, 0.12175688726924072, 0.1328084353567961, 0.12553204388200667, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0844032716261447, 0.07300234856850163, 0.07667924527309733, 0.061707412520220384, 0.08580882586121608, 0.08276784979572183, 0.09218756594300215, 0.08851987946699191, 0.06289515872591256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06118571986093335, 0.05436803655701283, 0.022372064191625962, 0.04558843916365862, 0.059551316247256514, 0.05168063942354384, 0.05480995370905406, 0.04099829294156476, 0.052248293014113045, 0.273206536865786, 0.3212212341512479, 0.37838144106140015, 0.33077202415608786, 0.34803517878987067, 0.2892736087024961, 0.31034914581852535, 0.32826432242953807, 0.32082875387323906, 0.09730833774315217, 0.09844274578402423, 0.08165952986172376, 0.0881714387822975, 0.10506163666878254, 0.07834924046385039, 0.0844815089055535, 0.07737403448831248, 0.07606560380391003, 0.14659631485081315, 0.18493261959876217, 0.14931936917758648, 0.17097619874116898, 0.16976744773240227, 0.16127782311493322, 0.16491425940994198, 0.1630773795262529, 0.18480597834196255, 0.24704667077607922, 0.23802530386080156, 0.21141089331003038, 0.25082623135549975, 0.25768229654736097, 0.2511853670713087, 0.22216461850341507, 0.2481001525863984, 0.227155559667506, 0.17002343165566747, 0.1870536911745243, 0.17382232659262298, 0.16842240680016696, 0.16707528093256985, 0.17070389561413446, 0.17734193705831036, 0.17171645761741694, 0.19116914371094562, 0.2195864424810654, 0.17894233394417713, 0.18784357243340122, 0.17285368256591627, 0.189043266743385, 0.18197957831830225, 0.1708539144866218, 0.18431675986124962, 0.1893660232521175, 0.18097900451944993, 0.18188690128806106, 0.18423735445510825, 0.17896572398603128, 0.18007340322202015, 0.18205158955078127, 0.1839219809620517, 0.1814828302644147, 0.17314560158199288, 0.19137155297818553, 0.1959126953253041, 0.3956462576516465, 0.16863917160300845, 0.18693662853350912, 0.43448800884598104, 0.27605127113498784, 0.41816769487165817, 0.16783943546550306, 0.2922111078515207, 0.1508514848092959, 0.28808601272854584, 0.2803833236340568, 0.3328183912742745, 0.19711303777096967, 0.153273368531459, 0.1524720110411345, 0.2068604726611315, 0.19450692989681395, 0.19593108359174805, 0.17587920415844716, 0.18289502776166022, 0.18219214565186048, 0.18425394607921686, 0.1821238776374352, 0.17880950298891873, 0.17947682196076298, 0.0775905273193932, 0.06920078177532141, 0.08190806616672708, 0.07567596323994663, 0.1001201065834717, 0.06498190679563431, 0.06843838829690863, 0.06007454309893179, 0.07652883939500044]}, "mutation_prompt": null}
{"id": "a8882489-cc2a-4792-9050-e7dd35cc2c41", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance exploration by introducing a dynamic chaos parameter that adapts based on population diversity to improve search efficiency.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "00954752-5350-4c53-8cfc-d57998ace57f", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance exploration by introducing a dynamic chaos parameter that adapts based on population diversity to improve search efficiency.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "39244bb5-fcfa-4e3f-aba1-93a1877abc90", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance exploration by introducing a dynamic chaos parameter that adapts based on population diversity to improve search efficiency.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "846e0ef6-282a-43ac-9798-52d30e74b004", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve exploration by enhancing the search diversity through chaos-driven mutations and adaptive parameters.", "configspace": "", "generation": 66, "fitness": 0.2103276100236053, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "8297f246-941c-4580-9cff-f79bdbdbe51d", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 15\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0) + np.std(fitness) * 0.2  # Consider individual fitness\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Enhance exploration by introducing a dynamic chaos parameter that adapts based on population diversity and individual fitness to improve search efficiency.", "configspace": "", "generation": 67, "fitness": 0.20334271160536124, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4728731498647293, 0.4161968947194019, 0.46609741654845227, 0.4803869780239426, 0.49770104936274784, 0.49054777435878494, 0.44904534348010106, 0.47950085714516244, 0.4964527381599597, 9.999999999998899e-05, 9.999999999998899e-05, 0.029917720704752848, 0.00010196978464305229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036887016331039524, 9.999999999998899e-05, 0.09655358128948988, 0.10744127139443371, 0.1269666058847061, 0.09063048315036304, 0.10749956491231916, 0.10347024230979118, 0.09878753389110861, 0.10687691458531423, 0.11201650686036846, 0.09472452314865676, 0.07660125394801509, 0.09563057003826547, 0.09903921199174837, 0.09308207493941445, 0.0776528665374, 0.08685341096522825, 0.08725372994229186, 0.09387987152538257, 0.9719962168445768, 0.9337954509766486, 0.9505709095879115, 0.9563855844275503, 0.9462380026378614, 0.9439624235040356, 0.937444118971456, 0.9911845178979543, 0.9286504099609231, 0.2378246361826405, 0.30906264618041823, 0.22792998971930356, 0.22263046033311185, 0.2355161963900465, 0.2695285042165547, 0.24601771239838888, 0.24655295838732705, 0.18475348770317623, 0.3259308466987316, 0.3081755825033713, 0.35760957007409, 0.3089065952798691, 0.1898167100732021, 0.3336627695753186, 0.3233101025334135, 0.2425363763434335, 0.23920722976830833, 0.1471755790373832, 0.12916942084325278, 0.11598826964184628, 0.1163244690700701, 0.12335228938090825, 0.1355779423512855, 0.139526565536228, 0.13609684043424808, 0.13665201007726469, 0.11451953680666027, 0.12419745543308003, 0.11648385720875287, 0.13014822194226194, 0.17854467972600907, 0.1414077699848556, 0.13394335934043733, 0.19351768932304714, 0.1358189752583565, 0.0010003161927805149, 0.03748946568204137, 0.0019008088858912808, 0.06380911837764236, 9.999999999998899e-05, 0.006946368288606397, 0.015278272947781835, 0.009492310977045393, 9.999999999998899e-05, 0.15450596770002156, 0.08349911721339653, 0.14105533133706072, 0.08049578508391819, 0.10911528596930076, 0.08693111616691185, 0.11755249982984584, 0.07224036838479209, 0.12798697921479996, 0.026924101943679113, 9.999999999998899e-05, 9.999999999998899e-05, 0.008135484600827136, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018868648257804876, 9.999999999998899e-05, 9.999999999998899e-05, 0.14511704662901503, 0.05038440554249324, 0.06421911072114994, 0.07565477624491246, 0.08941141999070135, 0.08571127413973534, 0.11283291080503255, 0.09858913179205808, 0.0606713159281822, 0.4050554056945762, 0.3773520990372651, 0.40790489234277816, 0.37381638486240887, 0.3941252991320683, 0.4023027016673181, 0.4150826171333819, 0.3696282359273392, 0.45269285097586875, 0.08804281852010476, 0.1324325677281708, 0.10358914122224783, 0.08832804819002171, 0.09536139123858756, 0.0995495434778535, 0.107091407931721, 0.08435619089439406, 0.13750985524329096, 0.17443835459487345, 0.1786116298182333, 0.2122395373510736, 0.17904805522816025, 0.23901190712578413, 0.17261433769812196, 0.17947045092166658, 0.18844381171577684, 0.1992388946634167, 0.2794725931106764, 0.24520948651283092, 0.2911993480241838, 0.315890666866084, 0.2555902931394488, 0.2743761373686837, 0.25042416670422685, 0.27990995643873373, 0.30719604570547465, 0.20434567570682827, 0.2298932116445398, 0.21130584253875184, 0.2112980623392916, 0.21016106440311078, 0.2598885147978265, 0.2371181183168376, 0.16406548693318002, 0.23427979883131178, 0.1922671316561103, 0.19499523520532647, 0.1797301984815367, 0.1817749706996572, 0.18887661591983507, 0.18794704133086382, 0.17726940215505127, 0.18768715499198385, 0.18973687635130543, 0.18732001187257996, 0.18913374986613285, 0.16969923907662343, 0.20411848118101206, 0.18356587454688555, 0.21283246756787355, 0.18035154033541734, 0.18490950142761675, 0.19030606089822233, 0.17144959572566654, 0.16217800008919747, 0.18341846182746413, 0.5095652966177044, 0.1947307699570877, 0.19303313142781142, 0.16280312631430438, 0.1628758895338659, 0.15375578048358673, 0.20664611771878882, 0.20664245295872574, 0.20307427592961835, 0.16211065613928843, 0.148480728768848, 0.199733565615122, 0.15154380792198663, 0.20430615090797577, 0.3423368552637217, 0.17327553767806492, 0.17706334510296928, 0.19317003389307985, 0.1812970366661557, 0.17636779771114675, 0.18866121227263088, 0.1840511415986793, 0.19315292080116997, 0.17498163083153906, 0.07355727408342372, 0.06473124592338919, 0.0790515444144918, 0.06663442170609502, 0.0631976668532459, 0.06759215243017824, 0.06850048314255697, 0.0777160574024599, 0.0803040659844384]}, "mutation_prompt": null}
{"id": "332c56df-af00-4d50-baf7-77f477d0a422", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve exploration by incorporating a chaotic search with adaptive chaos parameter scaling based on individual diversity.", "configspace": "", "generation": 68, "fitness": 0.2103276100236053, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "4528a37a-d2f1-40ea-bbba-587c7a400eb7", "solution": "class EnhancedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            individual_fitness = np.array([func(ind) for ind in population])\n            chaos_param = max(0.1, min(0.5, np.mean(individual_fitness) / (best + 1e-8)))\n        return best", "name": "EnhancedDynamicChaosDEAPSO", "description": "Improve search diversity by incorporating a self-adaptive chaos parameter that adjusts based on individual fitness values.", "configspace": "", "generation": 69, "fitness": 0.19506565143183088, "feedback": "The algorithm EnhancedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.41135901465798563, 0.4402840879205163, 0.41108315009113694, 0.41726713908483726, 0.45144078612739336, 0.45658132269040663, 0.4792287229353033, 0.46653658816973775, 0.3208646787640058, 9.999999999998899e-05, 0.0005728621690628266, 0.02578868165302428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09444206688117907, 0.09239321443739934, 0.1095964345977809, 0.14785423042252221, 0.12277222181908454, 0.08767661251807402, 0.09826703406187265, 0.10491466906712232, 0.09535053308093888, 0.10928979897029589, 0.08385124093425833, 0.08828937525104807, 0.09552801031992586, 0.08173524626305839, 0.0820963811008345, 0.11317626726446983, 0.10668756016404768, 0.08417987908857882, 0.9465239764687573, 0.9638907276290799, 0.8692917305713508, 0.9348088792059263, 0.8707504634216712, 0.9655879836156569, 0.8439539861962105, 0.9224069372100167, 0.9058480234287678, 0.20978710576128246, 0.2194249408858736, 0.2386550171218853, 0.22436809581022954, 0.1856536027347705, 0.25141031869225006, 0.20285308786677947, 0.21055502050589647, 0.1983917946985735, 0.21461748869479758, 0.22325221435526255, 0.21499336570701233, 0.3350394462360874, 0.21480788232706527, 0.27758826882730037, 0.3184349778791622, 0.22655688073878633, 0.19669573097327298, 0.11809206082168544, 0.13154937034901903, 0.11863874939440688, 0.1316533458358774, 0.11747241644002338, 0.12265599187918796, 0.12380342511825526, 0.142653641747144, 0.12673836141945283, 0.17400916581424208, 0.10332829382249165, 0.23273599028209835, 0.12561204012855465, 0.2198553916002799, 0.14565046461508668, 0.1637389633564118, 0.11288421926982506, 0.1358236039462004, 0.003753222664239053, 0.0029097549332766093, 0.0076331652023825525, 0.0019072800623224362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009177652883205489, 0.07037823257379516, 0.08021982070792733, 0.08656635357254727, 0.020603163754021825, 0.0638492029323261, 0.07082035843234602, 0.16729201350860035, 0.09720231530119128, 0.10826538884208403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010406531715182021, 9.999999999998899e-05, 9.999999999998899e-05, 0.054407985071133536, 0.10384136936688393, 0.08078178045545059, 0.11514408092313844, 0.1034591321936763, 0.1380212910966393, 0.16390011462136767, 0.06693202858396163, 0.09336474258694782, 0.3634252602592729, 0.3274954780166772, 0.4191651803603963, 0.3414259629589985, 0.3714066574702932, 0.4024414163586023, 0.3735035445257606, 0.37701815945248596, 0.36704572461761986, 0.07830384494547016, 0.09124969064542676, 0.09061390431344984, 0.08146258162366826, 0.0929892665409261, 0.08584515311007812, 0.10644513608753603, 0.09716745449411879, 0.16144243513767687, 0.15645586670252565, 0.1768801891594458, 0.2667710976523737, 0.22815240813104298, 0.1947729596581831, 0.17440259494695254, 0.12903612903536887, 0.16608673036380273, 0.19156470588965258, 0.2580209916703734, 0.26124147884223003, 0.25070430358242657, 0.23165970507614664, 0.2898311498444489, 0.2479262118648402, 0.21792262470205803, 0.298089939983079, 0.271957299568212, 0.16836624793496469, 0.2064670461889765, 0.2129427507801166, 0.14713437634437665, 0.19790386805249005, 0.20661394634246566, 0.20737537927424832, 0.2026371707177902, 0.22952561497341017, 0.18428677575625363, 0.19903934323187333, 0.17473423455450843, 0.17915033201921593, 0.1694014635526805, 0.21156829343997707, 0.2179264016325636, 0.18785531963662938, 0.1770990962837503, 0.18288709712935325, 0.18393715203539351, 0.1843497560434214, 0.17648797238410918, 0.1766070849813146, 0.18191915535876935, 0.18691135631755673, 0.20913558478824967, 0.17503168154733262, 0.18369851304429652, 0.1166347304223686, 0.18122340327039088, 0.18166077293912297, 0.1856858227576328, 0.1848627642506281, 0.6368443644540467, 0.6309718432283744, 0.18791552662133548, 0.12305094197620914, 0.14911760400867646, 0.43567179331466743, 0.1685594749679845, 0.15929397395108913, 0.12487403567727762, 0.2057740249614758, 0.20653372504792133, 0.12401074398417222, 0.1831610158886291, 0.19745742422880175, 0.18098204981334287, 0.17550436879987352, 0.1809389632751256, 0.17068138578449865, 0.17984879598316184, 0.17434999675553808, 0.1775175965414888, 0.0679864264133424, 0.07941497114592289, 0.07000687030165043, 0.0694417786083773, 0.06944757404325175, 0.061816392426958244, 0.07301566666267822, 0.07194015839741041, 0.060439128134700315]}, "mutation_prompt": null}
{"id": "01aa8226-fe79-40ae-baf6-ec3e00698f36", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param, hist_best):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            elif func(new_x) < hist_best:\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param, hist_best):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param, hist_best)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n        hist_best = best\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param, hist_best)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            hist_best = best\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance exploration by introducing adaptive chaos search based on individual historical performance to dynamically adjust the chaos parameter for improved local search.", "configspace": "", "generation": 70, "fitness": 0.19741475745951215, "feedback": "The algorithm DynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.46837353285513994, 0.4116512071158209, 0.3960655622884497, 0.5083787467119758, 0.3468579831935903, 0.4335313206859721, 0.46147843350576023, 0.46498046107367963, 0.4149110875624866, 9.999999999998899e-05, 9.999999999998899e-05, 0.022856306407327276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031133247802633046, 9.999999999998899e-05, 0.07637062868416233, 0.09784054850257706, 0.10969733376723267, 0.12630274819739895, 0.09224662213924717, 0.09572163117572474, 0.10953407178231811, 0.09374904786057237, 0.10007116054460807, 0.08535651688869361, 0.09871805485749496, 0.07878793034765508, 0.09549773411041551, 0.075484343397348, 0.09027621281343468, 0.10286257140409527, 0.0930288611415826, 0.09569411389430227, 0.9657265151902752, 0.9079073199631205, 0.9006280098465921, 0.8955306596982537, 0.8883309599240963, 0.952753633613822, 0.856511071585713, 0.9272399890549088, 0.5065155069335721, 0.2381481581776389, 0.28228551535459845, 0.21615197436965705, 0.20442598809227697, 0.23367998332141493, 0.21821821736530056, 0.2857868251085691, 0.2639127203452868, 0.21745668374123484, 0.40866004245516874, 0.32368136299231787, 0.26686936423381113, 0.2620380727450208, 0.32846078646532784, 0.2656940027584813, 0.2376872149561643, 0.21639242315278584, 0.22208216158884375, 0.12754695671249994, 0.14850102071575766, 0.11922550025661827, 0.13650101516729551, 0.1585547556612109, 0.18975415382415395, 0.12156632302073145, 0.11529240354102566, 0.14934417626308094, 0.17677998625646196, 0.10173165852705657, 0.13303783818411063, 0.13026094249322417, 0.24127725669960043, 0.13834814194488532, 0.14744251647603346, 0.1223330935864031, 0.14273419070189663, 0.021219021431289953, 9.999999999998899e-05, 0.005611296729204129, 0.008708054212975047, 9.999999999998899e-05, 0.036449072293265994, 9.999999999998899e-05, 0.07769489046844169, 9.999999999998899e-05, 0.07088794579948676, 0.08047915870889066, 0.06718339955066022, 0.021456430538185467, 0.06616025141296489, 0.0620846277808621, 0.16832154796584287, 0.09853782011188106, 0.10870731919768495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030866260572686155, 9.999999999998899e-05, 9.999999999998899e-05, 0.022488408170489693, 9.999999999998899e-05, 9.999999999998899e-05, 0.08078906509771555, 0.09258964040064344, 0.1274835293689066, 0.13011651629212428, 0.08069132527573875, 0.09431468253119857, 0.05928203092985462, 0.12394277316601643, 0.1664071511648565, 0.4035922906578354, 0.4356871328120213, 0.3641587715656236, 0.4126663785193819, 0.40776548277213875, 0.3813799339238799, 0.41453818499722705, 0.3788547412304678, 0.43200511801870345, 0.09270087065120425, 0.10873848104089323, 0.09434299435054705, 0.07384609467562309, 0.0852745363835653, 0.08594462686477655, 0.1049703784249374, 0.0933340813315201, 0.07881128551118255, 0.15862098488408682, 0.16384331528775742, 0.2599523228260302, 0.22920152698956375, 0.20260491207913855, 0.22426066394017086, 0.16088736480325316, 0.25580413901407295, 0.18386081356624828, 0.2935695729895673, 0.2671148445294742, 0.2647308369451331, 0.26502426812626567, 0.2727782746097397, 0.23175611187691592, 0.21577050164374412, 0.32420685194007515, 0.24707596342704297, 0.1814275302740691, 0.2019476449080645, 0.17400848632848231, 0.16934007040541543, 0.18145724553005815, 0.2376880673476648, 0.23025189761512888, 0.19009832998911846, 0.21515942971645752, 0.1729767813870754, 0.1850550922101214, 0.17504362758029723, 0.1793319853986488, 0.17679813279371737, 0.20003675382388342, 0.21835040764944957, 0.17282766918178039, 0.1778018118716045, 0.17682285596130476, 0.20436302328043587, 0.1848826835582844, 0.1735776039389022, 0.20164843800490473, 0.19260358047745563, 0.18013061911015793, 0.18138576879908597, 0.18804523362577885, 0.19270943642017724, 0.117227796175286, 0.16423663693481017, 0.18381870010913404, 0.19634123311349194, 0.18506912904277306, 0.17061426628428, 0.728709028828921, 0.26784970442978917, 0.12427453921694565, 0.14964511939652914, 0.2971102120883744, 0.1624742157582172, 0.19687554426101017, 0.16371706857228874, 0.2082335938613532, 0.20445625106157306, 0.20411740601703232, 0.1835369129683504, 0.17993141853484196, 0.18122003949474697, 0.19490432477386543, 0.1813414550010387, 0.1713718818912524, 0.18061532753628107, 0.17471877809168423, 0.17857309056940085, 0.0681669543841752, 0.07698006152928027, 0.07033799622677928, 0.06767692797033764, 0.08284737260944564, 0.07343114166740994, 0.0726589682434331, 0.0684879667569992, 0.07761398902171546]}, "mutation_prompt": null}
{"id": "22986f38-9579-44e5-9685-003b4025b77e", "solution": "import numpy as np\n\nclass EnhancedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            individual_fitness = np.array([func(ind) for ind in population])\n            chaos_param = max(0.1, min(0.5, np.mean(individual_fitness) - best))\n        return best", "name": "EnhancedDynamicChaosDEAPSO", "description": "Improve exploration by incorporating a self-adaptive chaos parameter that dynamically adjusts based on the performance of each individual to enhance search efficiency.", "configspace": "", "generation": 71, "fitness": 0.19964235391307494, "feedback": "The algorithm EnhancedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.49135606431129664, 0.36469469742556015, 0.41108315009113694, 0.48415386377320224, 0.43361611517351184, 0.40915122949469407, 0.4492734271260602, 0.445461305473839, 0.3208646787640058, 9.999999999998899e-05, 0.0005728621690628266, 0.04395108115837465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09444206688117907, 0.09165222538976692, 0.09497703796020074, 0.14785423042252221, 0.12277222181908454, 0.08767661251807402, 0.09826703406187265, 0.10491466906712232, 0.09535053308093888, 0.08485943648510452, 0.07194404687278788, 0.08756701464121908, 0.09552801031992586, 0.08173524626305839, 0.0820963811008345, 0.11317626726446983, 0.10668756016404768, 0.08417987908857882, 0.9694884360925422, 0.9851564466513314, 0.8732015994592042, 0.9348088792059263, 0.8707504634216712, 0.9655879836156569, 0.843169607295964, 0.8976813823713473, 0.9058480234287678, 0.20978710576128246, 0.2194249408858736, 0.2386550171218853, 0.23883203119383933, 0.1856536027347705, 0.25141031869225006, 0.24598166879589645, 0.18594076042627106, 0.2555880392462807, 0.21461748869479758, 0.22325221435526255, 0.21499336570701233, 0.3350394462360874, 0.21480788232706527, 0.28395069090323855, 0.3184349778791622, 0.22655688073878633, 0.18224802858594036, 0.11809206082168544, 0.13154937034901903, 0.11863874939440688, 0.12788193297796902, 0.13128402781965942, 0.12608031496841232, 0.12380342511825526, 0.142653641747144, 0.12673836141945283, 0.17400916581424208, 0.10332829382249165, 0.23273599028209835, 0.12561204012855465, 0.2198553916002799, 0.14565046461508668, 0.1637389633564118, 0.11288421926982506, 0.1358236039462004, 0.003753222664239053, 0.0029097549332766093, 0.0076331652023825525, 0.0019072800623224362, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07037823257379516, 0.08021982070792733, 0.08656635357254727, 0.020603163754021825, 0.0655056158948375, 0.06018406826056888, 0.16729201350860035, 0.09720231530119128, 0.10826538884208403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010406531715182021, 9.999999999998899e-05, 9.999999999998899e-05, 0.054407985071133536, 0.10384136936688393, 0.08078178045545059, 0.12260983305022533, 0.09994535181378394, 0.13552007134619048, 0.0846092823985557, 0.0863170166889442, 0.16367478919022027, 0.39261015996438364, 0.40851577597182476, 0.4129518732502909, 0.3946969283456191, 0.4005134618195382, 0.42045240115778637, 0.3812231542262725, 0.40393290730853615, 0.3942554908391457, 0.07830384494547016, 0.09124969064542676, 0.09061390431344984, 0.08146258162366826, 0.0929892665409261, 0.08584515311007812, 0.13585202523904505, 0.10179137652864279, 0.07867931676793993, 0.15645586670252565, 0.1768801891594458, 0.2667710976523737, 0.22815240813104298, 0.1947729596581831, 0.17440259494695254, 0.12903612903536887, 0.16608673036380273, 0.19156470588965258, 0.29621589253155567, 0.2654804832840246, 0.27514112926733403, 0.23165970507614664, 0.28386853002888346, 0.2479262118648402, 0.21792262470205803, 0.298089939983079, 0.271957299568212, 0.21042427741543668, 0.2280705332973162, 0.22506445172268985, 0.14713437634437665, 0.19790386805249005, 0.20661394634246566, 0.20737537927424832, 0.2026371707177902, 0.22952561497341017, 0.18428677575625363, 0.17061324241784537, 0.17473423455450843, 0.17915033201921593, 0.1694014635526805, 0.21156829343997707, 0.2179264016325636, 0.18785531963662938, 0.1770990962837503, 0.17112144810819407, 0.20020348627415996, 0.18259676057528484, 0.17648797238410918, 0.1766070849813146, 0.18191915535876935, 0.18691135631755673, 0.20913558478824967, 0.17503168154733262, 0.6422473324148155, 0.12781577520365228, 0.18211687475783978, 0.18240792987999277, 0.185749980164731, 0.18488613139481402, 0.7202405096738056, 0.6299374382106804, 0.18942304879423721, 0.12305094197620914, 0.14939838072385425, 0.40968980619907625, 0.19587836975820683, 0.15945167565453633, 0.12465430435705782, 0.206879616372733, 0.2062798862105405, 0.2028904223771968, 0.1831610158886291, 0.17991310989690523, 0.18098204981334287, 0.17550436879987352, 0.1809389632751256, 0.17068138578449865, 0.17984879598316184, 0.17434999675553808, 0.1775175965414888, 0.0679864264133424, 0.07941497114592289, 0.07000687030165043, 0.0694417786083773, 0.06944757404325175, 0.061816392426958244, 0.07301566666267822, 0.07194015839741041, 0.060439128134700315]}, "mutation_prompt": null}
{"id": "7e69b047-fe36-49ca-9c84-318a0c5c8e33", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = self_adaptive_mutate(new_population[i], f)  # Introducing chaotic adaptive mutation\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve the search diversity by implementing a chaotic adaptive mutation strategy for each individual in the population.", "configspace": "", "generation": 72, "fitness": 0.17749179983044477, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.32866894557909176, 0.2873044853655914, 0.35545132141742575, 0.3076820793318845, 0.31114119059812984, 0.33397846798144515, 0.3148846786916948, 0.34876196036970164, 0.3285697216187855, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165261061682539, 0.0862332818712157, 0.08723013186834849, 0.0963931178299059, 0.0918342778338459, 0.08043801026879482, 0.0792054007502131, 0.08909042109414567, 0.09943691069438843, 0.08770422766041541, 0.0709393661227452, 0.08240418555369855, 0.08577535396212366, 0.08687457048603342, 0.07549555538575314, 0.0793975052208733, 0.06366656665062798, 0.06698677005822973, 0.9624109448222777, 0.8729550943996682, 0.9002352978093979, 0.8948025117913707, 0.9553179793158865, 0.9741657554756196, 0.9594753583354619, 0.8927123603959769, 0.9521753287110531, 0.2058813973495216, 0.1711862063540206, 0.18979842606189956, 0.1846043464386864, 0.17656730048212232, 0.1934900377008647, 0.2306252053580049, 0.17736814786378585, 0.16854682432947188, 0.20764435378731183, 0.20224580822923466, 0.21844717420472015, 0.2046605020333685, 0.21227021765114396, 0.2188434610649339, 0.22589468547125457, 0.21763996007468944, 0.23526464922331836, 0.11545335336783902, 0.11102598744065495, 0.12647552431450926, 0.11712672450509343, 0.1294227550867061, 0.10974363833440715, 0.12178078978541651, 0.11488521661685935, 0.13253709154678395, 0.12616793412548, 0.10784220119771126, 0.09766432539043235, 0.11801446374284974, 0.11324417902899098, 0.10177861251480158, 0.1309087848860263, 0.11455582028363964, 0.1285809310848557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002801716043394631, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07303916405696398, 0.10391962295417656, 0.0867833635683175, 0.07759539836811458, 0.058330865721311964, 0.08797590910990183, 0.059860153085536494, 0.08537622529998568, 0.10199076405075957, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04584146906036768, 0.052443042964040565, 0.06415649004259216, 0.058109306150426865, 0.07969021419296574, 0.042861758135195105, 0.08975806084211979, 0.043343676712221724, 0.052420916663152295, 0.3234243067491488, 0.3220329809062137, 0.33798578620701636, 0.29809219735165005, 0.3246931889912755, 0.3384028180246078, 0.33793614542368944, 0.3550727502550005, 0.3419848152464424, 0.0895286272002832, 0.07882883400046214, 0.07443110607808556, 0.10718983967399764, 0.10915576822163675, 0.07840248826415952, 0.07959357706741599, 0.08411587322064806, 0.08863450771003334, 0.15872509288680625, 0.16427359306790545, 0.18150533070618535, 0.1789071387818627, 0.158530656301049, 0.17187553904420094, 0.1920077607953904, 0.18677906441791425, 0.15553339477379502, 0.25514346011332867, 0.2322112466752645, 0.24270581451146633, 0.2523156924642328, 0.23242264207098629, 0.2287796333528861, 0.24681721315732774, 0.24829874204497548, 0.24202906013692616, 0.1969062631150582, 0.17763736269268737, 0.18189784684253807, 0.17808155570384554, 0.17669670506149016, 0.18919141504056758, 0.20044267644500213, 0.15738284632538202, 0.17009078796736, 0.20776964209983861, 0.1830248701438696, 0.21095212292178178, 0.1987050002211208, 0.1873762422867411, 0.21357496944758947, 0.17014554789466985, 0.19533102856038753, 0.1875813751441301, 0.17641110942792637, 0.1748201241923154, 0.17027083823699463, 0.23615374225374386, 0.18119581358350534, 0.1858679167725601, 0.18524002376405868, 0.18320856860107237, 0.18054387486013912, 0.19186649294726754, 0.17134349352693012, 0.372006633716886, 0.2279474280421262, 0.16478606056862632, 0.18203287953060399, 0.18285196014029348, 0.16632068864072935, 0.40713262333361, 0.1675500179071825, 0.16774807336384479, 0.17919857470170353, 0.12200675172711295, 0.20210633537096379, 0.217935352603001, 0.11368482887798947, 0.16146815795238745, 0.2062870100503591, 0.17522746296527025, 0.19265402679519472, 0.2066570245225514, 0.18216080985413996, 0.20775991989921572, 0.17890621297395848, 0.19812227188855336, 0.19399881680275555, 0.1793699003400323, 0.07684747508240197, 0.11510621780665953, 0.06448352445171601, 0.06179712595264841, 0.06480747510858476, 0.06716412578705855, 0.07359656921835356, 0.06547242574229895, 0.0664201597908114]}, "mutation_prompt": null}
{"id": "b1442b24-ed22-4251-a492-53ec92fe3409", "solution": "import numpy as np\n\nclass RefinedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f, best_fitness):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape) * (best_fitness / func(x)), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f, best)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "RefinedDynamicChaosDEAPSO", "description": "Enhance exploration by introducing a dynamic chaos parameter that adapts based on population diversity and individual fitness to improve search efficiency.", "configspace": "", "generation": 73, "fitness": 0.20982772666018565, "feedback": "The algorithm RefinedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.5017399183346667, 0.43775882585305304, 0.5166592234549099, 0.39631309019156646, 0.34521800154616844, 0.4975903788777758, 0.4132540307108038, 0.5226815724264307, 0.47979714212688884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08166921066623511, 9.999999999998899e-05, 0.02594060890510541, 0.026681789311549076, 0.0060465185564878565, 9.999999999998899e-05, 0.0926206032537481, 0.09653678878375782, 0.09882345308401275, 0.0834062353903735, 0.10671291164146735, 0.10302967228890025, 0.11161198677896844, 0.08537683079421898, 0.07815399288293334, 0.09993884153127786, 0.08831156678458252, 0.0934011760416733, 0.08854620771102706, 0.09333583876504159, 0.06986409776444236, 0.07254376691050224, 0.09128074396062713, 0.09307679784368661, 0.9590774132565033, 0.9828221996549542, 0.9593138344737059, 0.9408219289209009, 0.8883469790691074, 0.9720516510140045, 0.8216397791400953, 0.9265926552390277, 0.9386106039346404, 0.24229628514582624, 0.28536139585104314, 0.19171169124370546, 0.272615625639972, 0.2407643299672706, 0.2627768539622143, 0.29653948195590807, 0.24840446797728932, 0.2775000024200315, 0.22316750020323284, 0.34397297652187386, 0.2625000819294051, 0.2694497482884042, 0.32509636636464534, 0.31805902761427274, 0.7427732911033736, 0.22887033432149695, 0.23292259269477922, 0.21152319837085942, 0.11526623875115216, 0.1433703098186221, 0.1369047288158225, 0.11720321605501371, 0.16051079149478886, 0.12007041542197838, 0.12215195537832024, 0.1329177625670871, 0.11374840462478619, 0.135962479226591, 0.15518205397181772, 0.17823719716671826, 0.12805559141080447, 0.15178706399127062, 0.1291077135151667, 0.19352261521190506, 0.13631837450287132, 9.999999999998899e-05, 9.999999999998899e-05, 0.007115890733769836, 9.999999999998899e-05, 0.05707266711695724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10978893074777718, 0.09321431791040502, 0.12153508061093599, 0.07988814616054074, 0.05203814900610937, 0.017459626823982943, 0.07835913412150275, 0.07072416758580324, 0.09897605585209801, 0.0007920533509410133, 9.999999999998899e-05, 9.999999999998899e-05, 0.024795575677283743, 9.999999999998899e-05, 9.999999999998899e-05, 0.05832042509850288, 0.046676796439443224, 0.06173601836986986, 0.1134499953692184, 0.1333177289090467, 0.06720215961197096, 0.06731465221904875, 0.10369105297738368, 0.03546398788985261, 0.1330429203053154, 0.12067583000901472, 0.07049554009888981, 0.4099137831677391, 0.430031175837837, 0.36652879674088035, 0.37139947181160105, 0.4420654566573894, 0.39231416983306844, 0.433685009587209, 0.43203206837564223, 0.43854786783321753, 0.10169037893239752, 0.0942101524717256, 0.08172318128366418, 0.12275535945306215, 0.08612065502911814, 0.11349248688673252, 0.091330491458956, 0.06604533951895664, 0.07666067921197539, 0.20260101786868367, 0.23804250112117775, 0.21236156866884537, 0.16949748279442234, 0.22281133151693144, 0.25952982754413945, 0.1400562747205809, 0.15784350318484197, 0.20159930349032218, 0.2770584048937631, 0.26763112139262135, 0.24629313107469997, 0.2545097200793923, 0.24405561981022605, 0.2807650074802588, 0.2668962860945745, 0.24936750341042557, 0.2095991123552715, 0.2161634462267309, 0.20215920559804468, 0.21494087736478162, 0.19401884997382268, 0.21312456403382407, 0.19043608884832863, 0.1818495435851052, 0.17361427353100223, 0.18904906701272073, 0.2068704929845807, 0.18481962128097695, 0.1937870082215104, 0.19565698032074874, 0.18491956805535903, 0.18407424166423914, 0.19332521633095867, 0.19982119318988767, 0.21019655696444772, 0.21322733631241086, 0.20195200523261347, 0.20503443561497903, 0.19500413614294532, 0.19020300107732224, 0.19531113842836068, 0.1781914824610158, 0.1918173134299488, 0.20293041016021018, 0.18327736710449027, 0.16466109249782712, 0.18486894397672526, 0.6832922562830513, 0.17642851853671104, 0.6439533093996525, 0.18269032623356007, 0.57509179251831, 0.6665620339349859, 0.13022744428909627, 0.1386407498814347, 0.437212131220464, 0.1503345267767312, 0.14822827436169705, 0.1257484624252807, 0.2100394877890409, 0.2089856132148883, 0.1265739384258484, 0.18285559674825436, 0.170723838700638, 0.186559816147578, 0.1844826455019113, 0.17147537975735105, 0.18353145311541608, 0.17635493939199365, 0.17337242343370196, 0.1818403388949178, 0.08217469867192684, 0.06710526109670867, 0.07497415473329727, 0.06822231942445833, 0.07599520526244596, 0.08488744027125739, 0.06774928556054405, 0.07041550709526068, 0.07112115591161694]}, "mutation_prompt": null}
{"id": "306f55d6-5b4c-487e-b8c1-279309641781", "solution": "import numpy as np\n\nclass EnhancedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "EnhancedDynamicChaosDEAPSO", "description": "Enhance exploration by incorporating a dynamic mutation strategy that leverages chaotic sequences to explore the search space more effectively.", "configspace": "", "generation": 74, "fitness": 0.2103276100236053, "feedback": "The algorithm EnhancedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "0fd110ab-c74a-477b-8af8-c350dc38a643", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO(DynamicChaosDEAPSO):\n    def chaotic_search(self, x, best, chaos_param):\n        new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n        new_x = np.clip(new_x, -5.0, 5.0)\n        if func(new_x) < func(x):\n            return new_x\n        else:\n            return x", "name": "ImprovedDynamicChaosDEAPSO", "description": "Enhance the exploration strategy by incorporating a novel chaos-based mechanism to guide the search towards promising regions efficiently.", "configspace": "", "generation": 75, "fitness": 0.19741475745951215, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.46837353285513994, 0.4116512071158209, 0.3960655622884497, 0.5083787467119758, 0.3468579831935903, 0.4335313206859721, 0.46147843350576023, 0.46498046107367963, 0.4149110875624866, 9.999999999998899e-05, 9.999999999998899e-05, 0.022856306407327276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031133247802633046, 9.999999999998899e-05, 0.07637062868416233, 0.09784054850257706, 0.10969733376723267, 0.12630274819739895, 0.09224662213924717, 0.09572163117572474, 0.10953407178231811, 0.09374904786057237, 0.10007116054460807, 0.08535651688869361, 0.09871805485749496, 0.07878793034765508, 0.09549773411041551, 0.075484343397348, 0.09027621281343468, 0.10286257140409527, 0.0930288611415826, 0.09569411389430227, 0.9657265151902752, 0.9079073199631205, 0.9006280098465921, 0.8955306596982537, 0.8883309599240963, 0.952753633613822, 0.856511071585713, 0.9272399890549088, 0.5065155069335721, 0.2381481581776389, 0.28228551535459845, 0.21615197436965705, 0.20442598809227697, 0.23367998332141493, 0.21821821736530056, 0.2857868251085691, 0.2639127203452868, 0.21745668374123484, 0.40866004245516874, 0.32368136299231787, 0.26686936423381113, 0.2620380727450208, 0.32846078646532784, 0.2656940027584813, 0.2376872149561643, 0.21639242315278584, 0.22208216158884375, 0.12754695671249994, 0.14850102071575766, 0.11922550025661827, 0.13650101516729551, 0.1585547556612109, 0.18975415382415395, 0.12156632302073145, 0.11529240354102566, 0.14934417626308094, 0.17677998625646196, 0.10173165852705657, 0.13303783818411063, 0.13026094249322417, 0.24127725669960043, 0.13834814194488532, 0.14744251647603346, 0.1223330935864031, 0.14273419070189663, 0.021219021431289953, 9.999999999998899e-05, 0.005611296729204129, 0.008708054212975047, 9.999999999998899e-05, 0.036449072293265994, 9.999999999998899e-05, 0.07769489046844169, 9.999999999998899e-05, 0.07088794579948676, 0.08047915870889066, 0.06718339955066022, 0.021456430538185467, 0.06616025141296489, 0.0620846277808621, 0.16832154796584287, 0.09853782011188106, 0.10870731919768495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030866260572686155, 9.999999999998899e-05, 9.999999999998899e-05, 0.022488408170489693, 9.999999999998899e-05, 9.999999999998899e-05, 0.08078906509771555, 0.09258964040064344, 0.1274835293689066, 0.13011651629212428, 0.08069132527573875, 0.09431468253119857, 0.05928203092985462, 0.12394277316601643, 0.1664071511648565, 0.4035922906578354, 0.4356871328120213, 0.3641587715656236, 0.4126663785193819, 0.40776548277213875, 0.3813799339238799, 0.41453818499722705, 0.3788547412304678, 0.43200511801870345, 0.09270087065120425, 0.10873848104089323, 0.09434299435054705, 0.07384609467562309, 0.0852745363835653, 0.08594462686477655, 0.1049703784249374, 0.0933340813315201, 0.07881128551118255, 0.15862098488408682, 0.16384331528775742, 0.2599523228260302, 0.22920152698956375, 0.20260491207913855, 0.22426066394017086, 0.16088736480325316, 0.25580413901407295, 0.18386081356624828, 0.2935695729895673, 0.2671148445294742, 0.2647308369451331, 0.26502426812626567, 0.2727782746097397, 0.23175611187691592, 0.21577050164374412, 0.32420685194007515, 0.24707596342704297, 0.1814275302740691, 0.2019476449080645, 0.17400848632848231, 0.16934007040541543, 0.18145724553005815, 0.2376880673476648, 0.23025189761512888, 0.19009832998911846, 0.21515942971645752, 0.1729767813870754, 0.1850550922101214, 0.17504362758029723, 0.1793319853986488, 0.17679813279371737, 0.20003675382388342, 0.21835040764944957, 0.17282766918178039, 0.1778018118716045, 0.17682285596130476, 0.20436302328043587, 0.1848826835582844, 0.1735776039389022, 0.20164843800490473, 0.19260358047745563, 0.18013061911015793, 0.18138576879908597, 0.18804523362577885, 0.19270943642017724, 0.117227796175286, 0.16423663693481017, 0.18381870010913404, 0.19634123311349194, 0.18506912904277306, 0.17061426628428, 0.728709028828921, 0.26784970442978917, 0.12427453921694565, 0.14964511939652914, 0.2971102120883744, 0.1624742157582172, 0.19687554426101017, 0.16371706857228874, 0.2082335938613532, 0.20445625106157306, 0.20411740601703232, 0.1835369129683504, 0.17993141853484196, 0.18122003949474697, 0.19490432477386543, 0.1813414550010387, 0.1713718818912524, 0.18061532753628107, 0.17471877809168423, 0.17857309056940085, 0.0681669543841752, 0.07698006152928027, 0.07033799622677928, 0.06767692797033764, 0.08284737260944564, 0.07343114166740994, 0.0726589682434331, 0.0684879667569992, 0.07761398902171546]}, "mutation_prompt": null}
{"id": "ac5bd13c-1cfe-477c-acb9-d2051548f5fa", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def levy_flight_search(x, best, beta):\n            levy = np.random.standard_cauchy(x.shape) / (1 + beta * np.abs(np.random.standard_cauchy(x.shape)) ** (1/1.5))\n            new_x = x + 0.01 * levy\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = levy_flight_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve exploration by incorporating a new chaotic search mechanism based on Levy flights to enhance global search capability.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'mutate' is not defined\").", "error": "NameError(\"name 'mutate' is not defined\")", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {}, "mutation_prompt": null}
{"id": "74ec2f0a-1c10-44bc-a735-cb640fd752d2", "solution": "import numpy as np\n\nclass EnhancedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = chaos_param * np.random.normal(1, 0.1)  # Introduce self-adaptivity in chaos parameter\n        return best", "name": "EnhancedDynamicChaosDEAPSO", "description": "Enhance exploration and exploitation by incorporating a self-adaptive chaos parameter that dynamically adjusts during the search process.", "configspace": "", "generation": 77, "fitness": 0.20465154832014465, "feedback": "The algorithm EnhancedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4860844775726517, 0.48958742409614575, 0.5189824635414222, 0.47003321481196836, 0.5074797013123177, 0.46900114925554803, 0.4587175407269598, 0.4538906456338683, 0.5179175282178929, 9.999999999998899e-05, 9.999999999998899e-05, 0.009038384037608038, 9.999999999998899e-05, 0.027674526588713944, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018690600282443848, 0.012394475242466618, 0.11511543302920924, 0.08933993346393432, 0.07659251028013936, 0.08890004636017768, 0.1121173056627569, 0.08504303262564916, 0.10434841459628719, 0.08276006979809647, 0.09108490975274308, 0.06471393482046839, 0.09807858340027142, 0.09239809345010741, 0.07151604648228149, 0.0706082657873991, 0.07875800229996988, 0.09801302369730458, 0.12398153203866369, 0.09112396010143908, 0.962038344732702, 0.9474518187555452, 0.9328030096853483, 0.970731593405276, 0.9249960801885676, 0.9311448702962656, 0.9639428690896296, 0.9314435471656606, 0.9031281697542377, 0.2607071450840497, 0.2701805963449764, 0.2410910804078995, 0.26491436486552544, 0.2667197602808571, 0.2942433210196478, 0.28695530313048334, 0.24144222698874895, 0.2859735877741959, 0.29143954099680425, 0.22042805347121852, 0.22299811467899944, 0.26859818997368423, 0.25481221572785195, 0.3233963295863188, 0.2727687752547685, 0.2120404337659314, 0.23214571956840513, 0.12359558671820292, 0.12292458181507204, 0.12566738498020114, 0.1390170212757712, 0.2138097445018896, 0.14618269400811257, 0.12025247301775466, 0.17688491157787978, 0.13418844529015184, 0.1192866765230085, 0.12644802667665667, 0.12438696171908503, 0.1597441271686526, 0.14539768825479538, 0.14568694605215438, 0.1350007544123688, 0.13798462357296926, 0.1346243073055492, 9.999999999998899e-05, 0.00673468549479872, 0.011904698677618786, 0.042525952669699274, 9.999999999998899e-05, 0.0009244334168219126, 9.999999999998899e-05, 9.999999999998899e-05, 0.04084015269599528, 0.08930041798746136, 0.08068311970955944, 0.10630223883239942, 0.12435460695192146, 0.08973308668358204, 0.08238936639338279, 0.06738478152553529, 0.08441768639404779, 0.08420488422586891, 9.999999999998899e-05, 0.013166339564257612, 0.015612518425754729, 9.999999999998899e-05, 9.999999999998899e-05, 0.02600994893202535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09948667427613622, 0.08918960686005717, 0.11124883939132946, 0.13193951343998833, 0.06425211939670394, 0.07768155895069817, 0.12690042337120755, 0.07052744301608127, 0.12504327039454344, 0.4024432789441569, 0.4022856572724596, 0.37046613678197726, 0.4201363395261699, 0.43305520651824403, 0.40342508792194687, 0.38240889365016817, 0.34869918316228754, 0.37937393584659196, 0.09115143757742517, 0.0919521989227382, 0.08257370335697523, 0.11312549638625646, 0.10049438135667277, 0.11038756550037321, 0.10185929772699986, 0.13234504170025851, 0.12536810836808854, 0.20065745208905572, 0.17279646977661867, 0.23375839373776763, 0.1769228202052986, 0.14858176541776302, 0.22783367861415005, 0.2300698379689311, 0.23943085356014038, 0.19541041829663197, 0.292798987120258, 0.28288900607680434, 0.22741226522085667, 0.2260996084755671, 0.29653872742211795, 0.2562298805669667, 0.24515988876290218, 0.2714676921441246, 0.2587042159805769, 0.18292336105981044, 0.2222143248837769, 0.20950641353047317, 0.18274205820856326, 0.2277648536121737, 0.22638401031825828, 0.18513003912790993, 0.19250959816410762, 0.22265471679858018, 0.19856693718486462, 0.20038241646477184, 0.19184803244937798, 0.1874625365269762, 0.18405287632826917, 0.19518145028442324, 0.1963544374912244, 0.20219721115655942, 0.18166275485436723, 0.23509860197495225, 0.17803753519765164, 0.18110761947000842, 0.20321234750096506, 0.1846768960552576, 0.18633048773648841, 0.1886550604321282, 0.18223576168248623, 0.19747570040895435, 0.195276282097134, 0.16946052827876157, 0.17118664750944534, 0.1656307833902052, 0.1843016093753045, 0.19351918225379827, 0.16644393602377472, 0.5319128587378201, 0.19540970861136142, 0.36332852420767503, 0.11428326818938461, 0.204085963517029, 0.48789912148772363, 0.16294871406840827, 0.3371062355029636, 0.20462527833634803, 0.1500102737978657, 0.15296674845600522, 0.1919185043375664, 0.18389219942395008, 0.20721195180091734, 0.18452630266569037, 0.1868883080280952, 0.18720095923207614, 0.18294980692779783, 0.1792135935845841, 0.19069392876932423, 0.08891927854588266, 0.07534914957414895, 0.07229577517736108, 0.08042442803078942, 0.08527731541591688, 0.0740505781699079, 0.09353733099625261, 0.07005688995969483, 0.08821144855652452]}, "mutation_prompt": null}
{"id": "b3fad266-4cf3-4556-9cfc-eca77ec02dbf", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n        self.chaos_param = 0.3\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, self.chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            self.chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Improve exploration and exploitation balance by incorporating a self-adaptive chaos parameter to dynamically adjust the chaos level during the search process.", "configspace": "", "generation": 78, "fitness": 0.2103276100236053, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4863434318710276, 0.3876211476295812, 0.5670772903485315, 0.4620203874850324, 0.4463622031065003, 0.43470388955746464, 0.49537760335496206, 0.5308592163091161, 0.47888445524977663, 9.999999999998899e-05, 9.999999999998899e-05, 0.037487867734568914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017149917226344735, 9.999999999998899e-05, 0.10250115300109952, 0.10075207611018178, 0.09891517071447653, 0.13112464852577121, 0.09627994600857803, 0.09300719224672571, 0.11233754845089738, 0.13638336461120748, 0.09944927820021698, 0.09053170647944575, 0.08920579153121089, 0.08172257501119418, 0.09736239185405282, 0.08480793483276028, 0.1139539294581644, 0.08874939815875038, 0.11416157018507989, 0.09533868760197894, 0.9766448702334497, 0.9885888567489965, 0.8581236945076078, 0.9440318934051208, 0.7801794867071468, 0.9735127055963334, 0.8732488073249445, 0.941421055810134, 0.9287545937821939, 0.279223458921504, 0.16631435483734514, 0.2899625530782579, 0.269348759433108, 0.3142727052044838, 0.24254890649331917, 0.23107783105726454, 0.2679263043965783, 0.28118803488957933, 0.2883342141856974, 0.33971019000755476, 0.2783753475152112, 0.3821991440449989, 0.28681037414391186, 0.29756490026908233, 0.23960767703607322, 0.2367521138223344, 0.3074107381736151, 0.12419244013745268, 0.14420993017355943, 0.12202663187638463, 0.1106365073813782, 0.1365353858223367, 0.14221090054946894, 0.12473058901149758, 0.1846385167711858, 0.17767049102220733, 0.18405555080213487, 0.1537986502474018, 0.23262271324598904, 0.1334730836901319, 0.24875112427336055, 0.1433453932891986, 0.15174485847212615, 0.126232364957666, 0.14529091578283937, 0.004384475775778274, 0.054220700615882245, 9.999999999998899e-05, 0.04341684671995372, 9.999999999998899e-05, 0.0006875677623744414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07518377879651761, 0.08368560560949467, 0.09355641239286672, 0.031202235451256444, 0.08038135520919898, 0.08302759094444845, 0.1783931038809382, 0.1106295834922415, 0.11171827950180746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04163854334977146, 0.03012929480836557, 9.999999999998899e-05, 0.02496664652629388, 9.999999999998899e-05, 9.999999999998899e-05, 0.06720102844899534, 0.08344669673868521, 0.10332307523470463, 0.0779398999369969, 0.09552617757279513, 0.09647566010830866, 0.10877654960485561, 0.12223605688073114, 0.17654697185460222, 0.41377891560513846, 0.4011351951215978, 0.3692945382343662, 0.42465898054176054, 0.3742082104953347, 0.3886804603768952, 0.44010165864893047, 0.42972225476451664, 0.3940279788301123, 0.09086343325340185, 0.09801809809791617, 0.09539314735091264, 0.08240986254386096, 0.08913732924638884, 0.08774223870402587, 0.10859647433610609, 0.10231610274695924, 0.0853429475793599, 0.17923059698179422, 0.16509703651368968, 0.2681661486434638, 0.23571458477526386, 0.20875398757568842, 0.23607474060314726, 0.2149992306870132, 0.1683059466640281, 0.19065047954150238, 0.2997023346348987, 0.27014361787544594, 0.26785152426049663, 0.26309077666411174, 0.2796496964752768, 0.3201244680606895, 0.2723714615645023, 0.3300844672740487, 0.2805405438983325, 0.2363358785436217, 0.23255824951809578, 0.22041804422790434, 0.18180300084737522, 0.20387007352411635, 0.24305255518628566, 0.23734190233063623, 0.19457134056821046, 0.2293048107752903, 0.18916500707092343, 0.17283365289260832, 0.1767603896636799, 0.18035747485535336, 0.1804362281327183, 0.21471702954520344, 0.22047429757045267, 0.19119559120378093, 0.1853921713124116, 0.18756592762956248, 0.20122510242175884, 0.18538523700803455, 0.17960085887446786, 0.188275705902463, 0.1949255637989863, 0.1919144049640379, 0.21713608545384788, 0.1808402593577556, 0.1780347750964285, 0.12285978143618981, 0.18410909440163836, 0.1845726464509747, 0.1869008033556374, 0.18615847933607044, 0.8138888381559807, 0.7576010688698094, 0.19381687871146192, 0.1250245351939555, 0.15149998727790626, 0.43025411159810256, 0.16537382202721274, 0.16463666418178324, 0.126073507882694, 0.20952023893583316, 0.2087675020763884, 0.20651495186799407, 0.18488219570868192, 0.1994329263898691, 0.18208874122976304, 0.1772966979425128, 0.18390959030680776, 0.17364900979186038, 0.18282502777656107, 0.17608885612004033, 0.18203217256423554, 0.06931227009230911, 0.08413286253732444, 0.07235768224698635, 0.07164959828696915, 0.0754772374144379, 0.06382518792348468, 0.07402753747039992, 0.07441049717795944, 0.06405614570719209]}, "mutation_prompt": null}
{"id": "062d8e51-dc1e-4fc8-838b-b559b518f2a8", "solution": "import numpy as np\n\nclass HybridChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def opposition_based_learning(x):\n            return -x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = opposition_based_learning(new_population[i])  # Opposite direction exploration\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "HybridChaosDEAPSO", "description": "Improve exploration by incorporating a novel hybrid chaos optimization with opposition-based learning to enhance population diversity and convergence speed.", "configspace": "", "generation": 79, "fitness": 0.11249894024530636, "feedback": "The algorithm HybridChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.22004158822346143, 0.19194640146777397, 0.22124180304627572, 0.19561003275843192, 0.17538487740037867, 0.17648984386647648, 0.2527656106458154, 0.22523915241770687, 0.1489307677155579, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06391803824619369, 0.08230122522124361, 0.057158184270677315, 0.0609669891107848, 0.04605001116712215, 0.056819178279084004, 0.03403897930057087, 0.05928821306341958, 0.045791003062992774, 0.048073782846956625, 0.0355348625295554, 0.04173354497706949, 0.049594919564696305, 0.05068418342618297, 0.037016789965400476, 0.04124431549591867, 0.06820411659953585, 0.053621265162034804, 0.16108658429675127, 0.1510939161436058, 0.15085781216813687, 0.09836376800907876, 0.09449841901455258, 0.09229763118766565, 0.10478101816035412, 0.23762272293061282, 0.1098256966633746, 0.0992445823094209, 0.08882403739952494, 0.1037415079200209, 0.1336580342848691, 0.10649368901836265, 0.1004331017939728, 0.06447755517688725, 0.08656945886991996, 0.0686009502706002, 0.20843460418426552, 0.20865980639851134, 0.19682259398855106, 0.15134577065687171, 0.1691314568475536, 0.13506848663455762, 0.1517134262372274, 0.13967074222328724, 0.09710540419898994, 0.1715893617910298, 0.10000349413641307, 0.11632608656114551, 0.07920329746204047, 0.02218047408301338, 9.999999999998899e-05, 0.017647871419797623, 0.03109231087358144, 0.002885678254789359, 0.1269733805046389, 0.14345621069444625, 0.13273975658100712, 0.16313283106205634, 0.1515352506498775, 0.19717293507660916, 0.1233017650516629, 0.14912189340706172, 0.14858856025857325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07497706951091854, 0.05733407125294254, 0.01693887793862936, 0.02467741536275936, 0.08804513245312628, 0.043697231932491754, 0.10058238786717355, 0.0475054433419726, 0.029386904692157212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028793079521445275, 0.0010254453244102901, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19473416585097103, 0.21925079701735772, 0.21916478920693006, 0.20973918910101974, 0.20433205719728353, 0.1881985517161977, 0.2333410985469272, 0.264243807155924, 0.21283312201789661, 0.05683049934399753, 0.059354926283882614, 0.06802638575226738, 0.04993637821773522, 0.043543910914355055, 0.05304415734014534, 0.044988115396315864, 0.06526548291774636, 0.05305677044333479, 0.13830300327504375, 0.13231759762585993, 0.1304488519999928, 0.14521855736965805, 0.13733587908794598, 0.14417017482052197, 0.1716891772679231, 0.15058649108639233, 0.1565106826017998, 0.16495052740766436, 0.17745765492376997, 0.16169835858905568, 0.20443007773147148, 0.2179509836407607, 0.20665197199184004, 0.1824615262485796, 0.17678281100240734, 0.18610263681642192, 0.10525377199948538, 0.10797283314147477, 0.11015709048899935, 0.1520634047817908, 0.15146874913763608, 0.13881117585347125, 0.1374291543634999, 0.13989565767367185, 0.13958981830322914, 0.18524295291083215, 0.20622783072693318, 0.18731689138353425, 0.18551999760962723, 0.20106873950361137, 0.1772016990717058, 0.18505396982510625, 0.18847513587348552, 0.20525244986714364, 0.15437462232635735, 0.15497579795452787, 0.14979801150126681, 0.15927879206062157, 0.16757855748022776, 0.15888769759379517, 0.14986553165755445, 0.15641832031111969, 0.15848306623047337, 0.16398536184591284, 0.2151674666194241, 0.24836841156681466, 0.2526992566868679, 0.16180381994510484, 0.1565662877004006, 0.19068649022852835, 0.14021522870323078, 0.1878014824282851, 0.17876742924486555, 0.2991501199556109, 0.23763818151503757, 0.16306556552642526, 0.28862216872586755, 0.18036060712913426, 0.15033561438411214, 0.1576083136010955, 0.21355736761688748, 0.20869873276059736, 0.1793551319767639, 0.17902977157904387, 0.17636426106180003, 0.18697060481129035, 0.1949703636466017, 0.18541883413222426, 0.19424720032004839, 0.17361269093200427, 0.07865011558283419, 0.07071761467892845, 0.06676469338421154, 0.0786663029177449, 0.07433619433672589, 0.0861597341130097, 0.07716316324800687, 0.06939668710952263, 0.0766240331173178]}, "mutation_prompt": null}
{"id": "9f0af1ce-2703-4b10-af19-4ab72c4021c3", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Enhance exploration and exploitation balance by incorporating a novel chaos-driven local search mechanism to exploit promising regions efficiently.", "configspace": "", "generation": 80, "fitness": 0.21252914467711806, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "65df8759-0ee6-4ad0-92dd-51b924face16", "metadata": {"aucs": [0.4324084003824177, 0.45389452513264217, 0.5001724243818619, 0.4712559599194541, 0.4369188000494675, 0.44167677675987305, 0.4538781970496024, 0.4514830321588019, 0.48054552826825025, 0.01587047684650622, 0.0014001458043431114, 0.01023267734486566, 0.05098048875896988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08372959434468463, 0.13160678298699968, 0.11953319779899374, 0.12076873671220545, 0.12383539014432732, 0.13770662483014384, 0.11357507701184988, 0.1050560306195879, 0.11021335061184223, 0.08638110547658673, 0.08308522770580562, 0.10377644672965014, 0.10410552102292037, 0.10863620973040888, 0.07541020098313633, 0.10563187031143983, 0.11640984085879968, 0.08226378341639085, 0.926648941940973, 0.8453648783111651, 0.9727743108677719, 0.9438736054258995, 0.9133302268780652, 0.9270500682771631, 0.9746097242090215, 0.8664289479277073, 0.9433673805016745, 0.28566153919932846, 0.21322601267507713, 0.3078332964702907, 0.27760840629572603, 0.3281126728895236, 0.2683203640267642, 0.2562802693930275, 0.2709659926106577, 0.273147859620714, 0.22249312562103407, 0.32312697444414085, 0.2852178698604467, 0.23287024048959115, 0.7453358238491533, 0.32634296892699544, 0.21529596411947338, 0.2569115960525219, 0.46678385058311833, 0.1644167179047965, 0.1440801835161396, 0.1450587212369301, 0.15356933427506447, 0.12436322943433475, 0.14387757638990228, 0.14270259981119437, 0.12699428088116094, 0.15742359781957416, 0.13390085418293762, 0.15514906176451493, 0.2575039383693606, 0.17270743038664627, 0.22006239714153542, 0.14637650928023327, 0.18057587386277063, 0.0920501508752466, 0.1483659907607272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006834610373654959, 9.999999999998899e-05, 0.017048828940491645, 9.999999999998899e-05, 0.022547661470269653, 0.0007130585753711838, 0.1397290982640247, 0.13793681332442154, 0.14234272643090184, 0.09459124191064949, 0.13661250266694847, 0.1869139587944919, 0.10449777446100272, 0.06666188052150845, 0.121919078210185, 9.999999999998899e-05, 0.010379142723040746, 0.04091506078646745, 9.999999999998899e-05, 0.0074481234139249786, 9.999999999998899e-05, 9.999999999998899e-05, 0.011386648693648804, 0.032272028793320695, 0.11498785433624759, 0.1318282000003983, 0.059285787167258075, 0.13208182729378126, 0.14470823076869632, 0.10964298825134522, 0.06864120933113105, 0.10042198015568449, 0.12264897912779338, 0.4096960753573743, 0.40793169307959287, 0.39124463055198444, 0.4404516952570172, 0.4200725837866728, 0.39568254329242225, 0.3963391375367946, 0.4256819468162606, 0.3962597211636578, 0.08949397409891957, 0.12830486177661948, 0.08268557944477162, 0.08782291104014461, 0.11557537804952356, 0.1446672156790566, 0.1105493903428394, 0.10658508539697942, 0.11709632358925814, 0.2854392679449258, 0.16663679412792864, 0.25596319171711224, 0.22515930149400998, 0.24596203065042177, 0.20310431777595672, 0.1938174474274591, 0.2036572932996592, 0.1927267079241376, 0.27467583299181264, 0.27702440527796257, 0.27735079223644366, 0.29150639465091255, 0.28270162320490466, 0.2877991396123529, 0.2364769335603174, 0.28157418368890563, 0.2820071433849056, 0.23384030853623927, 0.2301447439324268, 0.23772965609091457, 0.18152712441686303, 0.228578382950259, 0.2101937569421064, 0.21823948984784702, 0.1845098460428546, 0.2159579701818659, 0.18132891706857168, 0.17849104630310253, 0.17393162006789498, 0.17619828116321457, 0.1971447550236327, 0.18958143805835848, 0.20182289246984175, 0.18204108212435233, 0.20362622700056798, 0.19022224136163102, 0.23117530721195112, 0.19215219400897676, 0.18797320085047797, 0.1839707814553091, 0.19571112214499375, 0.210487690453941, 0.21867491488874702, 0.19045121107951235, 0.18204670452531613, 0.204615565718408, 0.17041169166723136, 0.16785863710693316, 0.19021815217064786, 0.1755483531455042, 0.20421875736881423, 0.16684603741645843, 0.6936806461657501, 0.2211993659730308, 0.1649960036700393, 0.20494742719609793, 0.2011533753315622, 0.3913572451397688, 0.15855060149815803, 0.10895432991484033, 0.15733513559590406, 0.15362750610051445, 0.17788122001136175, 0.17803316646335443, 0.18801915054933693, 0.17393696315273666, 0.18705621933858196, 0.20999751981594195, 0.19516794038705498, 0.17507672860795098, 0.170669792004432, 0.08718607566264158, 0.07517187659881697, 0.09541288082162502, 0.08148783264465564, 0.08072446141055878, 0.07237899735824849, 0.08119696774120966, 0.07120300534377022, 0.08184923877047601]}, "mutation_prompt": null}
{"id": "d5cf575a-929e-48a8-a33f-9823c93ca84f", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Enhance exploration and exploitation balance by incorporating a novel chaos-driven local search mechanism to exploit promising regions efficiently.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9f0af1ce-2703-4b10-af19-4ab72c4021c3", "metadata": {"aucs": [0.4324084003824177, 0.45389452513264217, 0.5001724243818619, 0.4712559599194541, 0.4369188000494675, 0.44167677675987305, 0.4538781970496024, 0.4514830321588019, 0.48054552826825025, 0.01587047684650622, 0.0014001458043431114, 0.01023267734486566, 0.05098048875896988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08372959434468463, 0.13160678298699968, 0.11953319779899374, 0.12076873671220545, 0.12383539014432732, 0.13770662483014384, 0.11357507701184988, 0.1050560306195879, 0.11021335061184223, 0.08638110547658673, 0.08308522770580562, 0.10377644672965014, 0.10410552102292037, 0.10863620973040888, 0.07541020098313633, 0.10563187031143983, 0.11640984085879968, 0.08226378341639085, 0.926648941940973, 0.8453648783111651, 0.9727743108677719, 0.9438736054258995, 0.9133302268780652, 0.9270500682771631, 0.9746097242090215, 0.8664289479277073, 0.9433673805016745, 0.28566153919932846, 0.21322601267507713, 0.3078332964702907, 0.27760840629572603, 0.3281126728895236, 0.2683203640267642, 0.2562802693930275, 0.2709659926106577, 0.273147859620714, 0.22249312562103407, 0.32312697444414085, 0.2852178698604467, 0.23287024048959115, 0.7453358238491533, 0.32634296892699544, 0.21529596411947338, 0.2569115960525219, 0.46678385058311833, 0.1644167179047965, 0.1440801835161396, 0.1450587212369301, 0.15356933427506447, 0.12436322943433475, 0.14387757638990228, 0.14270259981119437, 0.12699428088116094, 0.15742359781957416, 0.13390085418293762, 0.15514906176451493, 0.2575039383693606, 0.17270743038664627, 0.22006239714153542, 0.14637650928023327, 0.18057587386277063, 0.0920501508752466, 0.1483659907607272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006834610373654959, 9.999999999998899e-05, 0.017048828940491645, 9.999999999998899e-05, 0.022547661470269653, 0.0007130585753711838, 0.1397290982640247, 0.13793681332442154, 0.14234272643090184, 0.09459124191064949, 0.13661250266694847, 0.1869139587944919, 0.10449777446100272, 0.06666188052150845, 0.121919078210185, 9.999999999998899e-05, 0.010379142723040746, 0.04091506078646745, 9.999999999998899e-05, 0.0074481234139249786, 9.999999999998899e-05, 9.999999999998899e-05, 0.011386648693648804, 0.032272028793320695, 0.11498785433624759, 0.1318282000003983, 0.059285787167258075, 0.13208182729378126, 0.14470823076869632, 0.10964298825134522, 0.06864120933113105, 0.10042198015568449, 0.12264897912779338, 0.4096960753573743, 0.40793169307959287, 0.39124463055198444, 0.4404516952570172, 0.4200725837866728, 0.39568254329242225, 0.3963391375367946, 0.4256819468162606, 0.3962597211636578, 0.08949397409891957, 0.12830486177661948, 0.08268557944477162, 0.08782291104014461, 0.11557537804952356, 0.1446672156790566, 0.1105493903428394, 0.10658508539697942, 0.11709632358925814, 0.2854392679449258, 0.16663679412792864, 0.25596319171711224, 0.22515930149400998, 0.24596203065042177, 0.20310431777595672, 0.1938174474274591, 0.2036572932996592, 0.1927267079241376, 0.27467583299181264, 0.27702440527796257, 0.27735079223644366, 0.29150639465091255, 0.28270162320490466, 0.2877991396123529, 0.2364769335603174, 0.28157418368890563, 0.2820071433849056, 0.23384030853623927, 0.2301447439324268, 0.23772965609091457, 0.18152712441686303, 0.228578382950259, 0.2101937569421064, 0.21823948984784702, 0.1845098460428546, 0.2159579701818659, 0.18132891706857168, 0.17849104630310253, 0.17393162006789498, 0.17619828116321457, 0.1971447550236327, 0.18958143805835848, 0.20182289246984175, 0.18204108212435233, 0.20362622700056798, 0.19022224136163102, 0.23117530721195112, 0.19215219400897676, 0.18797320085047797, 0.1839707814553091, 0.19571112214499375, 0.210487690453941, 0.21867491488874702, 0.19045121107951235, 0.18204670452531613, 0.204615565718408, 0.17041169166723136, 0.16785863710693316, 0.19021815217064786, 0.1755483531455042, 0.20421875736881423, 0.16684603741645843, 0.6936806461657501, 0.2211993659730308, 0.1649960036700393, 0.20494742719609793, 0.2011533753315622, 0.3913572451397688, 0.15855060149815803, 0.10895432991484033, 0.15733513559590406, 0.15362750610051445, 0.17788122001136175, 0.17803316646335443, 0.18801915054933693, 0.17393696315273666, 0.18705621933858196, 0.20999751981594195, 0.19516794038705498, 0.17507672860795098, 0.170669792004432, 0.08718607566264158, 0.07517187659881697, 0.09541288082162502, 0.08148783264465564, 0.08072446141055878, 0.07237899735824849, 0.08119696774120966, 0.07120300534377022, 0.08184923877047601]}, "mutation_prompt": null}
{"id": "6b22e035-eb95-4961-a0f1-6212edb0ac9b", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Enhance exploration and exploitation balance by incorporating a novel chaos-driven local search mechanism to exploit promising regions efficiently.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9f0af1ce-2703-4b10-af19-4ab72c4021c3", "metadata": {"aucs": [0.4324084003824177, 0.45389452513264217, 0.5001724243818619, 0.4712559599194541, 0.4369188000494675, 0.44167677675987305, 0.4538781970496024, 0.4514830321588019, 0.48054552826825025, 0.01587047684650622, 0.0014001458043431114, 0.01023267734486566, 0.05098048875896988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08372959434468463, 0.13160678298699968, 0.11953319779899374, 0.12076873671220545, 0.12383539014432732, 0.13770662483014384, 0.11357507701184988, 0.1050560306195879, 0.11021335061184223, 0.08638110547658673, 0.08308522770580562, 0.10377644672965014, 0.10410552102292037, 0.10863620973040888, 0.07541020098313633, 0.10563187031143983, 0.11640984085879968, 0.08226378341639085, 0.926648941940973, 0.8453648783111651, 0.9727743108677719, 0.9438736054258995, 0.9133302268780652, 0.9270500682771631, 0.9746097242090215, 0.8664289479277073, 0.9433673805016745, 0.28566153919932846, 0.21322601267507713, 0.3078332964702907, 0.27760840629572603, 0.3281126728895236, 0.2683203640267642, 0.2562802693930275, 0.2709659926106577, 0.273147859620714, 0.22249312562103407, 0.32312697444414085, 0.2852178698604467, 0.23287024048959115, 0.7453358238491533, 0.32634296892699544, 0.21529596411947338, 0.2569115960525219, 0.46678385058311833, 0.1644167179047965, 0.1440801835161396, 0.1450587212369301, 0.15356933427506447, 0.12436322943433475, 0.14387757638990228, 0.14270259981119437, 0.12699428088116094, 0.15742359781957416, 0.13390085418293762, 0.15514906176451493, 0.2575039383693606, 0.17270743038664627, 0.22006239714153542, 0.14637650928023327, 0.18057587386277063, 0.0920501508752466, 0.1483659907607272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006834610373654959, 9.999999999998899e-05, 0.017048828940491645, 9.999999999998899e-05, 0.022547661470269653, 0.0007130585753711838, 0.1397290982640247, 0.13793681332442154, 0.14234272643090184, 0.09459124191064949, 0.13661250266694847, 0.1869139587944919, 0.10449777446100272, 0.06666188052150845, 0.121919078210185, 9.999999999998899e-05, 0.010379142723040746, 0.04091506078646745, 9.999999999998899e-05, 0.0074481234139249786, 9.999999999998899e-05, 9.999999999998899e-05, 0.011386648693648804, 0.032272028793320695, 0.11498785433624759, 0.1318282000003983, 0.059285787167258075, 0.13208182729378126, 0.14470823076869632, 0.10964298825134522, 0.06864120933113105, 0.10042198015568449, 0.12264897912779338, 0.4096960753573743, 0.40793169307959287, 0.39124463055198444, 0.4404516952570172, 0.4200725837866728, 0.39568254329242225, 0.3963391375367946, 0.4256819468162606, 0.3962597211636578, 0.08949397409891957, 0.12830486177661948, 0.08268557944477162, 0.08782291104014461, 0.11557537804952356, 0.1446672156790566, 0.1105493903428394, 0.10658508539697942, 0.11709632358925814, 0.2854392679449258, 0.16663679412792864, 0.25596319171711224, 0.22515930149400998, 0.24596203065042177, 0.20310431777595672, 0.1938174474274591, 0.2036572932996592, 0.1927267079241376, 0.27467583299181264, 0.27702440527796257, 0.27735079223644366, 0.29150639465091255, 0.28270162320490466, 0.2877991396123529, 0.2364769335603174, 0.28157418368890563, 0.2820071433849056, 0.23384030853623927, 0.2301447439324268, 0.23772965609091457, 0.18152712441686303, 0.228578382950259, 0.2101937569421064, 0.21823948984784702, 0.1845098460428546, 0.2159579701818659, 0.18132891706857168, 0.17849104630310253, 0.17393162006789498, 0.17619828116321457, 0.1971447550236327, 0.18958143805835848, 0.20182289246984175, 0.18204108212435233, 0.20362622700056798, 0.19022224136163102, 0.23117530721195112, 0.19215219400897676, 0.18797320085047797, 0.1839707814553091, 0.19571112214499375, 0.210487690453941, 0.21867491488874702, 0.19045121107951235, 0.18204670452531613, 0.204615565718408, 0.17041169166723136, 0.16785863710693316, 0.19021815217064786, 0.1755483531455042, 0.20421875736881423, 0.16684603741645843, 0.6936806461657501, 0.2211993659730308, 0.1649960036700393, 0.20494742719609793, 0.2011533753315622, 0.3913572451397688, 0.15855060149815803, 0.10895432991484033, 0.15733513559590406, 0.15362750610051445, 0.17788122001136175, 0.17803316646335443, 0.18801915054933693, 0.17393696315273666, 0.18705621933858196, 0.20999751981594195, 0.19516794038705498, 0.17507672860795098, 0.170669792004432, 0.08718607566264158, 0.07517187659881697, 0.09541288082162502, 0.08148783264465564, 0.08072446141055878, 0.07237899735824849, 0.08119696774120966, 0.07120300534377022, 0.08184923877047601]}, "mutation_prompt": null}
{"id": "9bcbb828-ddc2-48f9-8a1f-81c81d1b2e01", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity) * 0.8 + chaos_param * 0.2))  # Dynamic chaos parameter adjustment\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance diversity and convergence speed by introducing a dynamic chaos parameter adaptation mechanism based on population statistics.", "configspace": "", "generation": 83, "fitness": 0.21111662355570784, "feedback": "The algorithm DynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "9f0af1ce-2703-4b10-af19-4ab72c4021c3", "metadata": {"aucs": [0.4324071464975353, 0.4738377368100629, 0.5081669518109886, 0.4161924154957751, 0.5117474592704851, 0.4566601811651644, 0.4534495548132519, 0.44889249997984193, 0.48054552826825025, 0.0015964211777114157, 0.0007427868689900974, 0.010979869001884968, 0.05873298110680758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08372959434468463, 0.141433998674672, 0.11954696559505351, 0.11515090381562587, 0.12315066822386256, 0.1427527992989952, 0.10036362201192206, 0.0989538868326072, 0.11375291826564915, 0.08580208578489035, 0.0838379922496213, 0.10247026566322404, 0.10419711518249242, 0.10377307110513068, 0.07469497400531144, 0.105647554600799, 0.13294281482502424, 0.07696738690693727, 0.926648941940973, 0.8660395139018406, 0.9727743108677719, 0.9438736054258995, 0.9133302268780652, 0.9270500682771631, 0.9746097242090215, 0.8664599644517693, 0.9433673805016745, 0.2635498018805619, 0.24581216003349804, 0.2966434486130889, 0.275363067229346, 0.2872783454468799, 0.2692384867269241, 0.2771500050003892, 0.29851207816572933, 0.31358651725389863, 0.22249312562103407, 0.33111517300542503, 0.5905031079301505, 0.2302189013955943, 0.34629958583923404, 0.3593364389681317, 0.21490920726815543, 0.22371220890574417, 0.28779384204273517, 0.16376539283443048, 0.14087898994206738, 0.1435469149411014, 0.14636942735103786, 0.1255647709992398, 0.14181597455153883, 0.12626513943270512, 0.12602960859183254, 0.1573948315946302, 0.1338902124309962, 0.1784591520540042, 0.17354063216349747, 0.18131155922416597, 0.23754777830796903, 0.15121681629518047, 0.18058312036362545, 0.09229286413167226, 0.1495507067706613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013142209171589148, 0.003088702260795273, 0.01855997034455381, 0.0019650759240090743, 0.013180201510268108, 0.00279314804615427, 0.12559623238676343, 0.1379301325861878, 0.12269828357960721, 0.08307465771794154, 0.1121267578948838, 0.1808052014569359, 0.10581590930507534, 0.06666188052150845, 0.12317796656539248, 9.999999999998899e-05, 0.010379142723040746, 0.05576093279358596, 9.999999999998899e-05, 0.010584069298912757, 9.999999999998899e-05, 9.999999999998899e-05, 0.004744868888042264, 9.999999999998899e-05, 0.10956462079589036, 0.11154380807623043, 0.07421613086580525, 0.1259711714464209, 0.14470823076869632, 0.11381291923544146, 0.0982315334631676, 0.10570702243723695, 0.12697862120227799, 0.3781391741505572, 0.4353275636705348, 0.4391003783165379, 0.39616156149063275, 0.44216455644374886, 0.38936831689524654, 0.4066009145049043, 0.3973247664760956, 0.386472520057074, 0.10281062439374122, 0.13064598094419066, 0.08268557944477162, 0.08782291104014461, 0.11557537804952356, 0.14308569382098357, 0.1105493903428394, 0.113402092748917, 0.11732310251437505, 0.26740006439214636, 0.1679741719657848, 0.25596319171711224, 0.22515930149400998, 0.21956775624529568, 0.18183731109599566, 0.1938174474274591, 0.2006686062952011, 0.19678688460983917, 0.29260171456882045, 0.2835394228210081, 0.30468865359939223, 0.29157852236338966, 0.28158018652768124, 0.29424394438994383, 0.23183842260188525, 0.2855733701011032, 0.28158546916225446, 0.2143144304934168, 0.25171105634653235, 0.2296196884329884, 0.186417106667082, 0.2232128222738634, 0.2397568512418602, 0.20780036337705798, 0.1969938164964753, 0.20405051467252933, 0.18132891706857168, 0.17849104630310253, 0.17393162006789498, 0.17619828116321457, 0.1971447550236327, 0.18958143805835848, 0.20182289246984175, 0.18204108212435233, 0.20362622700056798, 0.18828483284476982, 0.2322329084085749, 0.18981034608548386, 0.195411983775865, 0.19161165165374128, 0.19168844202501656, 0.210487690453941, 0.20900670174953917, 0.1982057424468433, 0.18205417579976046, 0.2048279328595326, 0.17058322006976778, 0.16785863710693316, 0.19035349108964994, 0.17554846741672392, 0.20452569463283765, 0.16684603741645843, 0.5924938693115045, 0.2211993659730308, 0.1649988127961507, 0.20490643941897657, 0.20115380633471658, 0.432360131770232, 0.15856708490421534, 0.10895812753802492, 0.15715289702318203, 0.1536716237994633, 0.17788122001136175, 0.17803316646335443, 0.18801915054933693, 0.17393696315273666, 0.18705621933858196, 0.20999751981594195, 0.19516794038705498, 0.17507672860795098, 0.170669792004432, 0.08718607566264158, 0.07517187659881697, 0.09541288082162502, 0.08148783264465564, 0.08072446141055878, 0.07237899735824849, 0.08119696774120966, 0.07120300534377022, 0.08184923877047601]}, "mutation_prompt": null}
{"id": "a5181353-9ebb-40cf-bbd8-928d31e98b64", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, best, f):\n            f = f + 0.1 * (best - x)  # Adaptive mutation based on the best individual\n            f = max(0.1, min(0.9, f))\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], best, f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Enhance exploration by introducing a novel adaptive mutation strategy based on the best individual to improve search diversity and convergence.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "9f0af1ce-2703-4b10-af19-4ab72c4021c3", "metadata": {}, "mutation_prompt": null}
{"id": "34a24cf9-29cb-42ec-9cc0-5b6e95e27c59", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Enhance exploration and exploitation balance by incorporating a novel chaos-driven local search mechanism to exploit promising regions efficiently.", "configspace": "", "generation": 81, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9f0af1ce-2703-4b10-af19-4ab72c4021c3", "metadata": {"aucs": [0.4324084003824177, 0.45389452513264217, 0.5001724243818619, 0.4712559599194541, 0.4369188000494675, 0.44167677675987305, 0.4538781970496024, 0.4514830321588019, 0.48054552826825025, 0.01587047684650622, 0.0014001458043431114, 0.01023267734486566, 0.05098048875896988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08372959434468463, 0.13160678298699968, 0.11953319779899374, 0.12076873671220545, 0.12383539014432732, 0.13770662483014384, 0.11357507701184988, 0.1050560306195879, 0.11021335061184223, 0.08638110547658673, 0.08308522770580562, 0.10377644672965014, 0.10410552102292037, 0.10863620973040888, 0.07541020098313633, 0.10563187031143983, 0.11640984085879968, 0.08226378341639085, 0.926648941940973, 0.8453648783111651, 0.9727743108677719, 0.9438736054258995, 0.9133302268780652, 0.9270500682771631, 0.9746097242090215, 0.8664289479277073, 0.9433673805016745, 0.28566153919932846, 0.21322601267507713, 0.3078332964702907, 0.27760840629572603, 0.3281126728895236, 0.2683203640267642, 0.2562802693930275, 0.2709659926106577, 0.273147859620714, 0.22249312562103407, 0.32312697444414085, 0.2852178698604467, 0.23287024048959115, 0.7453358238491533, 0.32634296892699544, 0.21529596411947338, 0.2569115960525219, 0.46678385058311833, 0.1644167179047965, 0.1440801835161396, 0.1450587212369301, 0.15356933427506447, 0.12436322943433475, 0.14387757638990228, 0.14270259981119437, 0.12699428088116094, 0.15742359781957416, 0.13390085418293762, 0.15514906176451493, 0.2575039383693606, 0.17270743038664627, 0.22006239714153542, 0.14637650928023327, 0.18057587386277063, 0.0920501508752466, 0.1483659907607272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006834610373654959, 9.999999999998899e-05, 0.017048828940491645, 9.999999999998899e-05, 0.022547661470269653, 0.0007130585753711838, 0.1397290982640247, 0.13793681332442154, 0.14234272643090184, 0.09459124191064949, 0.13661250266694847, 0.1869139587944919, 0.10449777446100272, 0.06666188052150845, 0.121919078210185, 9.999999999998899e-05, 0.010379142723040746, 0.04091506078646745, 9.999999999998899e-05, 0.0074481234139249786, 9.999999999998899e-05, 9.999999999998899e-05, 0.011386648693648804, 0.032272028793320695, 0.11498785433624759, 0.1318282000003983, 0.059285787167258075, 0.13208182729378126, 0.14470823076869632, 0.10964298825134522, 0.06864120933113105, 0.10042198015568449, 0.12264897912779338, 0.4096960753573743, 0.40793169307959287, 0.39124463055198444, 0.4404516952570172, 0.4200725837866728, 0.39568254329242225, 0.3963391375367946, 0.4256819468162606, 0.3962597211636578, 0.08949397409891957, 0.12830486177661948, 0.08268557944477162, 0.08782291104014461, 0.11557537804952356, 0.1446672156790566, 0.1105493903428394, 0.10658508539697942, 0.11709632358925814, 0.2854392679449258, 0.16663679412792864, 0.25596319171711224, 0.22515930149400998, 0.24596203065042177, 0.20310431777595672, 0.1938174474274591, 0.2036572932996592, 0.1927267079241376, 0.27467583299181264, 0.27702440527796257, 0.27735079223644366, 0.29150639465091255, 0.28270162320490466, 0.2877991396123529, 0.2364769335603174, 0.28157418368890563, 0.2820071433849056, 0.23384030853623927, 0.2301447439324268, 0.23772965609091457, 0.18152712441686303, 0.228578382950259, 0.2101937569421064, 0.21823948984784702, 0.1845098460428546, 0.2159579701818659, 0.18132891706857168, 0.17849104630310253, 0.17393162006789498, 0.17619828116321457, 0.1971447550236327, 0.18958143805835848, 0.20182289246984175, 0.18204108212435233, 0.20362622700056798, 0.19022224136163102, 0.23117530721195112, 0.19215219400897676, 0.18797320085047797, 0.1839707814553091, 0.19571112214499375, 0.210487690453941, 0.21867491488874702, 0.19045121107951235, 0.18204670452531613, 0.204615565718408, 0.17041169166723136, 0.16785863710693316, 0.19021815217064786, 0.1755483531455042, 0.20421875736881423, 0.16684603741645843, 0.6936806461657501, 0.2211993659730308, 0.1649960036700393, 0.20494742719609793, 0.2011533753315622, 0.3913572451397688, 0.15855060149815803, 0.10895432991484033, 0.15733513559590406, 0.15362750610051445, 0.17788122001136175, 0.17803316646335443, 0.18801915054933693, 0.17393696315273666, 0.18705621933858196, 0.20999751981594195, 0.19516794038705498, 0.17507672860795098, 0.170669792004432, 0.08718607566264158, 0.07517187659881697, 0.09541288082162502, 0.08148783264465564, 0.08072446141055878, 0.07237899735824849, 0.08119696774120966, 0.07120300534377022, 0.08184923877047601]}, "mutation_prompt": null}
{"id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance the diversity maintenance by introducing a dynamic chaos-driven mutation strategy based on individual performance for better exploration in the search space.", "configspace": "", "generation": 86, "fitness": 0.21672011307055475, "feedback": "The algorithm DynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "9f0af1ce-2703-4b10-af19-4ab72c4021c3", "metadata": {"aucs": [0.49040614750808675, 0.46959630063917546, 0.4306752144823811, 0.4654830952853557, 0.46176023855867965, 0.4487851165327127, 0.5100211738894553, 0.4639485750721276, 0.5145814777183633, 0.03427787801762949, 9.999999999998899e-05, 0.05006406396739149, 0.016300742007323787, 9.999999999998899e-05, 9.999999999998899e-05, 0.09146761816186422, 0.061095904201543316, 9.999999999998899e-05, 0.1040355627496039, 0.11601663518226846, 0.10898643191016777, 0.10507349112204356, 0.09620120258113507, 0.1041102174612677, 0.10013354890224868, 0.11666876449943753, 0.11855210154798146, 0.09052501579685646, 0.09138341056556532, 0.08966190315254319, 0.09489543155420577, 0.08983916896709176, 0.07169978007072919, 0.08792482588833739, 0.09019473553883295, 0.09053767033878135, 0.915132770367499, 0.8495191723327142, 0.9727750001431898, 0.9527168787145527, 0.9033038310052801, 0.8811395694872776, 0.973590906419385, 0.8601612768309188, 0.9255577200231913, 0.25026703697369423, 0.25564309599540125, 0.29040836218608534, 0.24108112411852944, 0.29062258156358334, 0.2743737138069241, 0.2772716280038554, 0.29344393718397077, 0.28028422654059615, 0.22205438326156113, 0.24748047806656792, 0.7250976308190902, 0.2652192308174939, 0.280531202131056, 0.3247908253390426, 0.3401013119396886, 0.3064750583433612, 0.34454373594196075, 0.15524346021439228, 0.2116447668850402, 0.22166459539922545, 0.23574832720013017, 0.1722109127314183, 0.1426583349876781, 0.15843184574456481, 0.1657013278931707, 0.216041724791033, 0.12983576117517992, 0.19594331760791328, 0.12445216908401868, 0.15106754417151858, 0.1649699608298113, 0.28718298409944565, 0.153753347607133, 0.09624230281254531, 0.1502347046841691, 9.999999999998899e-05, 0.03394266581859284, 0.03613576780975836, 0.013688398911047228, 0.036010012342344244, 0.008585848704285803, 0.003406391796435315, 0.02837986957237515, 0.03734116726722281, 0.1089352575467496, 0.10829931532816484, 0.12143867577991363, 0.15178797336787175, 0.12795130645300068, 0.14923654662891617, 0.054484998687053254, 0.11358372959461971, 0.10866068841462617, 0.0004925605740916383, 9.999999999998899e-05, 9.999999999998899e-05, 0.0048017561274235065, 0.06136653302258965, 9.999999999998899e-05, 0.03604015215455725, 9.999999999998899e-05, 9.999999999998899e-05, 0.11864139275112995, 0.13559544740494134, 0.04977293671958194, 0.0660442526226177, 0.11180503887828164, 0.12066879343024306, 0.085839700239418, 0.1388516453663151, 0.1088607567303792, 0.39473338590556006, 0.43434815296700735, 0.44626977370247534, 0.43296245709599046, 0.415432626693628, 0.43634736491664605, 0.40883646343769, 0.4220456801995671, 0.4332665427844826, 0.0850041721590391, 0.11858147214306847, 0.1130766767192305, 0.12055234413945837, 0.11950333722290418, 0.10355781243639284, 0.10340187685177171, 0.10430040095935889, 0.14032804117516684, 0.19311101907014783, 0.18998637143948716, 0.25319170035613225, 0.2248906882526588, 0.18602940986100824, 0.21752820062201084, 0.247440186962113, 0.2156265358338706, 0.2221127596204734, 0.28418815588815705, 0.24613944899698603, 0.2541432630048851, 0.2992450120814416, 0.30493453432633, 0.28640837512498096, 0.2389803584535729, 0.28932781921587014, 0.2749524051186957, 0.2193774099730228, 0.18250382181793645, 0.23519163339343696, 0.19075785609275087, 0.22215552118539483, 0.19084195404761484, 0.18186151056609556, 0.22634336575488045, 0.17829002870187127, 0.18690641633057203, 0.18898660792748823, 0.20921095477068552, 0.18747342829791935, 0.17889642305847153, 0.2138325341401025, 0.19414285977617796, 0.1873692027581737, 0.2053143598019046, 0.18582597866681616, 0.195298031413913, 0.21099483382465611, 0.19421320811584208, 0.20460645099911057, 0.19308218429810642, 0.19106123803974318, 0.19055158853488519, 0.1892720577942888, 0.1815378126276479, 0.20525780894953105, 0.16194386436929142, 0.16483095833146177, 0.19186949516171403, 0.17559669602149075, 0.20267108994051763, 0.6708280591954981, 0.6583593928376796, 0.22545918931218478, 0.20328340537054512, 0.11204967398297117, 0.16333022324353297, 0.1954865472741084, 0.19068898218890173, 0.439695106113579, 0.1561378400539717, 0.1513068216861253, 0.18070647064057044, 0.1831765809275182, 0.16847561085764062, 0.17293558445797863, 0.17856926075128954, 0.16989801634060187, 0.17916153092442144, 0.18694725235399356, 0.17216443168612316, 0.10332615158895297, 0.08274971498080519, 0.0729879097041346, 0.09248004029407653, 0.07415179574643949, 0.08429053998460367, 0.07132646309369084, 0.07744014797237708, 0.08211056826314544]}, "mutation_prompt": null}
{"id": "1121d4f7-e68f-4555-b550-b168d273e4bc", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Enhance the algorithm by incorporating a dynamic adaptive chaos parameter based on the population diversity to improve exploration in the search space.", "configspace": "", "generation": 87, "fitness": 0.21672011307055475, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.49040614750808675, 0.46959630063917546, 0.4306752144823811, 0.4654830952853557, 0.46176023855867965, 0.4487851165327127, 0.5100211738894553, 0.4639485750721276, 0.5145814777183633, 0.03427787801762949, 9.999999999998899e-05, 0.05006406396739149, 0.016300742007323787, 9.999999999998899e-05, 9.999999999998899e-05, 0.09146761816186422, 0.061095904201543316, 9.999999999998899e-05, 0.1040355627496039, 0.11601663518226846, 0.10898643191016777, 0.10507349112204356, 0.09620120258113507, 0.1041102174612677, 0.10013354890224868, 0.11666876449943753, 0.11855210154798146, 0.09052501579685646, 0.09138341056556532, 0.08966190315254319, 0.09489543155420577, 0.08983916896709176, 0.07169978007072919, 0.08792482588833739, 0.09019473553883295, 0.09053767033878135, 0.915132770367499, 0.8495191723327142, 0.9727750001431898, 0.9527168787145527, 0.9033038310052801, 0.8811395694872776, 0.973590906419385, 0.8601612768309188, 0.9255577200231913, 0.25026703697369423, 0.25564309599540125, 0.29040836218608534, 0.24108112411852944, 0.29062258156358334, 0.2743737138069241, 0.2772716280038554, 0.29344393718397077, 0.28028422654059615, 0.22205438326156113, 0.24748047806656792, 0.7250976308190902, 0.2652192308174939, 0.280531202131056, 0.3247908253390426, 0.3401013119396886, 0.3064750583433612, 0.34454373594196075, 0.15524346021439228, 0.2116447668850402, 0.22166459539922545, 0.23574832720013017, 0.1722109127314183, 0.1426583349876781, 0.15843184574456481, 0.1657013278931707, 0.216041724791033, 0.12983576117517992, 0.19594331760791328, 0.12445216908401868, 0.15106754417151858, 0.1649699608298113, 0.28718298409944565, 0.153753347607133, 0.09624230281254531, 0.1502347046841691, 9.999999999998899e-05, 0.03394266581859284, 0.03613576780975836, 0.013688398911047228, 0.036010012342344244, 0.008585848704285803, 0.003406391796435315, 0.02837986957237515, 0.03734116726722281, 0.1089352575467496, 0.10829931532816484, 0.12143867577991363, 0.15178797336787175, 0.12795130645300068, 0.14923654662891617, 0.054484998687053254, 0.11358372959461971, 0.10866068841462617, 0.0004925605740916383, 9.999999999998899e-05, 9.999999999998899e-05, 0.0048017561274235065, 0.06136653302258965, 9.999999999998899e-05, 0.03604015215455725, 9.999999999998899e-05, 9.999999999998899e-05, 0.11864139275112995, 0.13559544740494134, 0.04977293671958194, 0.0660442526226177, 0.11180503887828164, 0.12066879343024306, 0.085839700239418, 0.1388516453663151, 0.1088607567303792, 0.39473338590556006, 0.43434815296700735, 0.44626977370247534, 0.43296245709599046, 0.415432626693628, 0.43634736491664605, 0.40883646343769, 0.4220456801995671, 0.4332665427844826, 0.0850041721590391, 0.11858147214306847, 0.1130766767192305, 0.12055234413945837, 0.11950333722290418, 0.10355781243639284, 0.10340187685177171, 0.10430040095935889, 0.14032804117516684, 0.19311101907014783, 0.18998637143948716, 0.25319170035613225, 0.2248906882526588, 0.18602940986100824, 0.21752820062201084, 0.247440186962113, 0.2156265358338706, 0.2221127596204734, 0.28418815588815705, 0.24613944899698603, 0.2541432630048851, 0.2992450120814416, 0.30493453432633, 0.28640837512498096, 0.2389803584535729, 0.28932781921587014, 0.2749524051186957, 0.2193774099730228, 0.18250382181793645, 0.23519163339343696, 0.19075785609275087, 0.22215552118539483, 0.19084195404761484, 0.18186151056609556, 0.22634336575488045, 0.17829002870187127, 0.18690641633057203, 0.18898660792748823, 0.20921095477068552, 0.18747342829791935, 0.17889642305847153, 0.2138325341401025, 0.19414285977617796, 0.1873692027581737, 0.2053143598019046, 0.18582597866681616, 0.195298031413913, 0.21099483382465611, 0.19421320811584208, 0.20460645099911057, 0.19308218429810642, 0.19106123803974318, 0.19055158853488519, 0.1892720577942888, 0.1815378126276479, 0.20525780894953105, 0.16194386436929142, 0.16483095833146177, 0.19186949516171403, 0.17559669602149075, 0.20267108994051763, 0.6708280591954981, 0.6583593928376796, 0.22545918931218478, 0.20328340537054512, 0.11204967398297117, 0.16333022324353297, 0.1954865472741084, 0.19068898218890173, 0.439695106113579, 0.1561378400539717, 0.1513068216861253, 0.18070647064057044, 0.1831765809275182, 0.16847561085764062, 0.17293558445797863, 0.17856926075128954, 0.16989801634060187, 0.17916153092442144, 0.18694725235399356, 0.17216443168612316, 0.10332615158895297, 0.08274971498080519, 0.0729879097041346, 0.09248004029407653, 0.07415179574643949, 0.08429053998460367, 0.07132646309369084, 0.07744014797237708, 0.08211056826314544]}, "mutation_prompt": null}
{"id": "994dba2e-fd81-415a-b3a9-0c1b61bd4d43", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance the search process by incorporating a self-adjusting chaos parameter to dynamically control the exploration-exploitation trade-off during optimization.", "configspace": "", "generation": 88, "fitness": 0.21672011307055475, "feedback": "The algorithm DynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.49040614750808675, 0.46959630063917546, 0.4306752144823811, 0.4654830952853557, 0.46176023855867965, 0.4487851165327127, 0.5100211738894553, 0.4639485750721276, 0.5145814777183633, 0.03427787801762949, 9.999999999998899e-05, 0.05006406396739149, 0.016300742007323787, 9.999999999998899e-05, 9.999999999998899e-05, 0.09146761816186422, 0.061095904201543316, 9.999999999998899e-05, 0.1040355627496039, 0.11601663518226846, 0.10898643191016777, 0.10507349112204356, 0.09620120258113507, 0.1041102174612677, 0.10013354890224868, 0.11666876449943753, 0.11855210154798146, 0.09052501579685646, 0.09138341056556532, 0.08966190315254319, 0.09489543155420577, 0.08983916896709176, 0.07169978007072919, 0.08792482588833739, 0.09019473553883295, 0.09053767033878135, 0.915132770367499, 0.8495191723327142, 0.9727750001431898, 0.9527168787145527, 0.9033038310052801, 0.8811395694872776, 0.973590906419385, 0.8601612768309188, 0.9255577200231913, 0.25026703697369423, 0.25564309599540125, 0.29040836218608534, 0.24108112411852944, 0.29062258156358334, 0.2743737138069241, 0.2772716280038554, 0.29344393718397077, 0.28028422654059615, 0.22205438326156113, 0.24748047806656792, 0.7250976308190902, 0.2652192308174939, 0.280531202131056, 0.3247908253390426, 0.3401013119396886, 0.3064750583433612, 0.34454373594196075, 0.15524346021439228, 0.2116447668850402, 0.22166459539922545, 0.23574832720013017, 0.1722109127314183, 0.1426583349876781, 0.15843184574456481, 0.1657013278931707, 0.216041724791033, 0.12983576117517992, 0.19594331760791328, 0.12445216908401868, 0.15106754417151858, 0.1649699608298113, 0.28718298409944565, 0.153753347607133, 0.09624230281254531, 0.1502347046841691, 9.999999999998899e-05, 0.03394266581859284, 0.03613576780975836, 0.013688398911047228, 0.036010012342344244, 0.008585848704285803, 0.003406391796435315, 0.02837986957237515, 0.03734116726722281, 0.1089352575467496, 0.10829931532816484, 0.12143867577991363, 0.15178797336787175, 0.12795130645300068, 0.14923654662891617, 0.054484998687053254, 0.11358372959461971, 0.10866068841462617, 0.0004925605740916383, 9.999999999998899e-05, 9.999999999998899e-05, 0.0048017561274235065, 0.06136653302258965, 9.999999999998899e-05, 0.03604015215455725, 9.999999999998899e-05, 9.999999999998899e-05, 0.11864139275112995, 0.13559544740494134, 0.04977293671958194, 0.0660442526226177, 0.11180503887828164, 0.12066879343024306, 0.085839700239418, 0.1388516453663151, 0.1088607567303792, 0.39473338590556006, 0.43434815296700735, 0.44626977370247534, 0.43296245709599046, 0.415432626693628, 0.43634736491664605, 0.40883646343769, 0.4220456801995671, 0.4332665427844826, 0.0850041721590391, 0.11858147214306847, 0.1130766767192305, 0.12055234413945837, 0.11950333722290418, 0.10355781243639284, 0.10340187685177171, 0.10430040095935889, 0.14032804117516684, 0.19311101907014783, 0.18998637143948716, 0.25319170035613225, 0.2248906882526588, 0.18602940986100824, 0.21752820062201084, 0.247440186962113, 0.2156265358338706, 0.2221127596204734, 0.28418815588815705, 0.24613944899698603, 0.2541432630048851, 0.2992450120814416, 0.30493453432633, 0.28640837512498096, 0.2389803584535729, 0.28932781921587014, 0.2749524051186957, 0.2193774099730228, 0.18250382181793645, 0.23519163339343696, 0.19075785609275087, 0.22215552118539483, 0.19084195404761484, 0.18186151056609556, 0.22634336575488045, 0.17829002870187127, 0.18690641633057203, 0.18898660792748823, 0.20921095477068552, 0.18747342829791935, 0.17889642305847153, 0.2138325341401025, 0.19414285977617796, 0.1873692027581737, 0.2053143598019046, 0.18582597866681616, 0.195298031413913, 0.21099483382465611, 0.19421320811584208, 0.20460645099911057, 0.19308218429810642, 0.19106123803974318, 0.19055158853488519, 0.1892720577942888, 0.1815378126276479, 0.20525780894953105, 0.16194386436929142, 0.16483095833146177, 0.19186949516171403, 0.17559669602149075, 0.20267108994051763, 0.6708280591954981, 0.6583593928376796, 0.22545918931218478, 0.20328340537054512, 0.11204967398297117, 0.16333022324353297, 0.1954865472741084, 0.19068898218890173, 0.439695106113579, 0.1561378400539717, 0.1513068216861253, 0.18070647064057044, 0.1831765809275182, 0.16847561085764062, 0.17293558445797863, 0.17856926075128954, 0.16989801634060187, 0.17916153092442144, 0.18694725235399356, 0.17216443168612316, 0.10332615158895297, 0.08274971498080519, 0.0729879097041346, 0.09248004029407653, 0.07415179574643949, 0.08429053998460367, 0.07132646309369084, 0.07744014797237708, 0.08211056826314544]}, "mutation_prompt": null}
{"id": "debc7736-6245-431b-bb33-0bc4a10e2351", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def diversity_based_mutate(x, best, population):\n            mean_point = np.mean(population, axis=0)\n            distance = np.linalg.norm(x - mean_point) / self.dim\n            return np.clip(x + distance * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n                new_population[i] = diversity_based_mutate(new_population[i], best, new_population)\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance the algorithm by incorporating a dynamic mutation strategy based on population diversity for improved exploration and exploitation.", "configspace": "", "generation": 89, "fitness": 0.16987060131729861, "feedback": "The algorithm DynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.4225227281012952, 0.39227573882924205, 0.43025911115364524, 0.44074176535613463, 0.4441531167396875, 0.3856251446186756, 0.3824448307109305, 0.40676289470925053, 0.4095713724888974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05732613018015853, 0.07043851356795716, 0.06931725712273507, 0.07875945225419545, 0.07885784635960058, 0.07018799582738555, 0.07984454524242013, 0.08843038582414575, 0.07144725076790748, 0.062238119894099664, 0.06552910459293615, 0.06663458585472526, 0.058886840354996806, 0.06186822702225814, 0.057888740844482145, 0.048325137037822374, 0.07702641485155182, 0.05335380803362655, 0.8573683261397702, 0.8883834227229062, 0.7756881365322752, 0.9263525163378162, 0.8650543879564486, 0.8975830970305918, 0.871514438792027, 0.8477146042173018, 0.8042393528416762, 0.24001366864257023, 0.18364670753218093, 0.15939849564464947, 0.1576437382551874, 0.1523349592953509, 0.13128045231583785, 0.1596452753797235, 0.13981547999273458, 0.15475340222620593, 0.1376956570467237, 0.1634058304948488, 0.19092861074780432, 0.215003891863211, 0.19957703358590628, 0.16602562643140806, 0.16543454465398955, 0.17472434319657237, 0.22255001990311263, 0.10715394646551635, 0.13555915081164416, 0.10418874102613795, 0.13717343229090606, 0.12442275431839767, 0.11793751336920599, 0.12053486458090301, 0.143209444399936, 0.1159983154865184, 0.10469848076498034, 0.13472857482999046, 0.11027064666306963, 0.1208748111485971, 0.11827013556065535, 0.13821007466867485, 0.09986235028562096, 0.0850475177818657, 0.12545480803137488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09823340905871303, 0.06477707144205214, 0.05262102330956464, 0.046841259775649124, 0.06256802009524531, 0.05506797267331309, 0.055775596116536486, 0.05375166335377213, 0.10933937404629601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04762619533602974, 0.05106670676997804, 0.022358219997285822, 0.06389074721380839, 0.058343691152955346, 0.04711609079866197, 0.06119908765956439, 0.07041372318831085, 0.03691953888964694, 0.37230166600097714, 0.36028114502700426, 0.3425164674033503, 0.3542616372916636, 0.36815842860824777, 0.32402815698989884, 0.3633976601916974, 0.3744804262014044, 0.36300620431827424, 0.08301434608411906, 0.08361814801722922, 0.13393584277655934, 0.07785952656739248, 0.06848561326633085, 0.08798450268427627, 0.09016662675465648, 0.07799031841440052, 0.05723344783512552, 0.1493321341834355, 0.1225319887140578, 0.14584661400214105, 0.16658617447681423, 0.13997199438064167, 0.13690741893378655, 0.15028294995260894, 0.13002311887477203, 0.14942503373274374, 0.20927550181885124, 0.1769556316162363, 0.2406781157300475, 0.21844659561356483, 0.18878271405733227, 0.25775394181790223, 0.2668901609118258, 0.2552960850857837, 0.2295026417234216, 0.1667637850729341, 0.15130515468876327, 0.13965248359224647, 0.13908788496970226, 0.14116510576730468, 0.13344478951504557, 0.20332112314582873, 0.12711911397477993, 0.1411023161414463, 0.17586752852356036, 0.17087589964766958, 0.16352066891870987, 0.19935164160658958, 0.17762168118253374, 0.170826538962783, 0.17340726100750692, 0.16777096345867337, 0.17245865543784888, 0.1653015169937042, 0.16493683028716366, 0.16209935008198795, 0.17189507621053235, 0.1654559873943683, 0.1747039448562433, 0.16724496139062905, 0.15608266034328155, 0.16252590747822726, 0.17421192611188252, 0.27738456096876607, 0.1792264985018861, 0.35807391296300883, 0.23989082835211573, 0.23412271572309562, 0.20811286357380887, 0.15660841347308674, 0.15171448738480597, 0.16399450760789402, 0.19762037929039833, 0.1893390677635044, 0.17021253571431427, 0.18406574601063297, 0.30896777984651447, 0.20153752497714927, 0.14801697368658695, 0.20149431439871568, 0.17192950235754834, 0.1787485974551375, 0.20336434201029785, 0.17785105252061695, 0.17410950794782132, 0.20734989880161447, 0.1857788375527174, 0.17852220642182115, 0.18363358573426436, 0.0643033640921572, 0.0670735990574225, 0.057644221895955305, 0.0622387808349657, 0.07175249778079618, 0.0679995999325187, 0.05724570316102651, 0.06658699651435729, 0.06650671192768354]}, "mutation_prompt": null}
{"id": "0f76daee-a462-45bf-85a6-9c6159b6fca9", "solution": "import numpy as np\n\nclass ImprovedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f * (1 - (fitness_new - best) / best))\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n        return best", "name": "ImprovedDynamicChaosDEAPSO", "description": "Integrate a self-adaptive chaos parameter for individual mutation rates based on performance and diversification.", "configspace": "", "generation": 90, "fitness": 0.19926483053303037, "feedback": "The algorithm ImprovedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.45028631888666937, 0.4783219268653086, 0.4716189438148576, 0.4227920738598374, 0.4629639253622909, 0.4710667505884941, 0.5075871471460955, 0.4333613870089703, 0.47383295313600016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09243166725039687, 0.1392956875384601, 0.10608986104614815, 0.12367209670813573, 0.12902142932271832, 0.11097178235287597, 0.12592239651469772, 0.13857159813778963, 0.10198521622035173, 0.09238497920509581, 0.08528828048012271, 0.08509483501668569, 0.08267062440963624, 0.08216192390454524, 0.08291336056568399, 0.12212089543453308, 0.05886672439582452, 0.08679229235387087, 0.7821113518753589, 0.9261629477025515, 0.9488313160852639, 0.9526208222440622, 0.9167609404880287, 0.8270024687389975, 0.9729891682325819, 0.9472564276062583, 0.9120752134349566, 0.2178222559231372, 0.22568070733312628, 0.11361766641236404, 0.18372729047322023, 0.22042760694094288, 0.1958930096658844, 0.1567684862558012, 0.25718307750546787, 0.2985169567263487, 0.3368774659490984, 0.3507739264784079, 0.33038005944362414, 0.546371833466538, 0.24277031913998948, 0.24734232853594718, 0.512444117941996, 0.2612089798825722, 0.32064560900836814, 0.14206161760269476, 0.12267559103931913, 0.12484663795957107, 0.1607752025315644, 0.1139792847333001, 0.12423218747170484, 0.11996057275192384, 0.13988479581459723, 0.15331313589070983, 0.0014309656062067022, 0.1417537562031823, 0.18581106724042107, 0.048644227648075855, 0.13328070296156236, 0.1349499856441827, 0.10822022694247357, 0.11279066017309547, 0.08487917655719379, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08899677759019864, 0.03787643264870655, 0.053502874402178935, 0.020725135295265096, 0.04438806112638083, 0.05565885933118209, 0.039339613378714056, 0.04725693993679092, 0.03173217983710597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06979078263101823, 0.1246504486500638, 0.1323254097252784, 0.025043592214518462, 0.0525067170952338, 0.02882557314253331, 0.09892002928476995, 0.08325607988357986, 0.11768336972366955, 0.41080774612887094, 0.4044109072264467, 0.43743634269024023, 0.43678438037658684, 0.39698766084283243, 0.40605856582828426, 0.4087814545938673, 0.39299947295976057, 0.39762794838403204, 0.13308942327990658, 0.10334508245454577, 0.10102160072905775, 0.1089204937420718, 0.11392623125011092, 0.11940991002850299, 0.08687652603328588, 0.08504053091775621, 0.08354873418458664, 0.24902609805293108, 0.2941523917177328, 0.17359371386827283, 0.21885063926260973, 0.21059684725575345, 0.15782360065161305, 0.1756488751212526, 0.2870350561869127, 0.22132667962215857, 0.2842133202303332, 0.25700340168209634, 0.2723090129142314, 0.2790883529693601, 0.28010845390440364, 0.27404502796598507, 0.2954575354941701, 0.28683109195004286, 0.28905431208635224, 0.19837071659449512, 0.1448695414934157, 0.23225166907477468, 0.21347696906464275, 0.20623444349625364, 0.19905510361358125, 0.2040384270412937, 0.17276507730359858, 0.18121989098186175, 0.2124364419915159, 0.17855198765307945, 0.1923885906441335, 0.19079974664673405, 0.17643121197034584, 0.19376905098413466, 0.18446901982372987, 0.1870110709436924, 0.17575573024311086, 0.17498733343521267, 0.16999028105088743, 0.17760592955156584, 0.17534450450478578, 0.21409317011892848, 0.2811419378791027, 0.16473442743105116, 0.1759096232856322, 0.16806537224309726, 0.1808439459925496, 0.19278149580269321, 0.1657575490817671, 0.15801010430707008, 0.16195745085113322, 0.18037891126181982, 0.18331965052641142, 0.677384527387644, 0.16847190516086574, 0.5365277920426621, 0.20205815400874882, 0.11204137893622934, 0.16407799703297765, 0.199847345937733, 0.20218049451788567, 0.14688472392931762, 0.149351852550774, 0.14901466101722471, 0.17303477879693874, 0.17994987301832877, 0.17654747803600135, 0.18791207812103616, 0.16361221731277786, 0.1811637349911256, 0.18486986996119148, 0.18406317121564364, 0.18030877597444284, 0.06961868778199964, 0.07721191327088817, 0.08138968509676636, 0.07667150507423737, 0.07863461626466339, 0.07717296341672952, 0.07499156887188452, 0.07799780139409218, 0.07513994285273129]}, "mutation_prompt": null}
{"id": "928084dc-4064-43f9-98d8-f8d4534aa73d", "solution": "import numpy as np\n\nclass EnhancedDynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.p_mutate = 0.2\n        self.p_explore_mutate = 0.1  # Updated parameter\n        self.p_self_adaptive_mutate = 0.1  # Updated parameter\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.p_mutate:  # Updated parameter\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                if np.random.rand() < self.p_explore_mutate:  # Updated parameter\n                    new_population[i] = explore_mutate(new_population[i])\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n        return best", "name": "EnhancedDynamicChaosDEAPSO", "description": "Enhance the convergence by incorporating a dynamic ensemble of mutation strategies with adaptive probabilities based on individual and population performance.", "configspace": "", "generation": 91, "fitness": 0.1906411580788985, "feedback": "The algorithm EnhancedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.3721470959403288, 0.3383067773836751, 0.4114989326631284, 0.3462401646529908, 0.3724686755753991, 0.387677219358478, 0.3789399745992219, 0.3961056959648427, 0.47691404738110854, 0.0026042310139062774, 0.0032957012039216416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005051722667757885, 9.999999999998899e-05, 0.07871348909804221, 0.09179754915010474, 0.08188877270806638, 0.09191354923285211, 0.09740351441879214, 0.11252658840440255, 0.08054232452490961, 0.08134736026647771, 0.09062770945846965, 0.07799577296884708, 0.08600647693221286, 0.0655828094560269, 0.07165567218887536, 0.0678957368766836, 0.0677411988380161, 0.06846061525641722, 0.08210230991014233, 0.06416375699687615, 0.9119003439655282, 0.9719508004909596, 0.9828378657591076, 0.9168126869811529, 0.90637241873403, 0.919911109899649, 0.9284235667195838, 0.9561610497664637, 0.9426764728373163, 0.22361948001265286, 0.23341479121830522, 0.20806424026080161, 0.22854221604360014, 0.21969605207554022, 0.17492742476179168, 0.22061372202271645, 0.22858835721184556, 0.19868853135143716, 0.22299580314263245, 0.30923297040487996, 0.2576008739509763, 0.2017563644619108, 0.20359023625852113, 0.24930352785529364, 0.3046686267374751, 0.24989816883880267, 0.18826742039479105, 0.12350910116466984, 0.11632961463226621, 0.1128687908220638, 0.13413357330688125, 0.14393468566723733, 0.12731157658513115, 0.12890518062293288, 0.11039079917097938, 0.10560004998325345, 0.12789773513991165, 0.14070154152435865, 0.12016125015199564, 0.11625004777124937, 0.14028845188306371, 0.10589125940774924, 0.1273011390645179, 0.12430631974315798, 0.1392876171875843, 0.0029454321182645904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006727676248374892, 0.0070024446780394545, 0.025031295664831532, 9.999999999998899e-05, 0.008307257327805573, 0.06892920572537009, 0.07868270332517513, 0.10794690516148275, 0.053481412336619405, 0.07830295735520199, 0.07433325114663858, 0.10547866368581849, 0.0993480221331251, 0.08590458823905878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06981849353865766, 0.05910109878522907, 0.06656860743264426, 0.0888624099933244, 0.10189427947465557, 0.0777908953950337, 0.07895846786137484, 0.07468349130133534, 0.09081339281752554, 0.35288149397751345, 0.32198190295208173, 0.35192300736914317, 0.376594929395338, 0.32580313004380723, 0.3550628275165215, 0.31307417264293247, 0.33522917230079907, 0.34457973086105753, 0.08443262839518173, 0.09460303335687292, 0.08433482511757462, 0.08025896815578448, 0.08685428530115347, 0.08452924938101514, 0.08774893122160343, 0.10161189213137767, 0.07568906746080517, 0.22044593217747133, 0.1525912902513854, 0.15388115435130512, 0.14363411936317239, 0.1730441805084354, 0.14023183101602332, 0.14160600002177726, 0.2588115266983294, 0.1830949669977192, 0.21173920138015023, 0.2398780550813362, 0.23183370056863772, 0.2201413189290944, 0.25374488406286877, 0.21656580368849299, 0.2502312187529119, 0.200806601071988, 0.24268953657413395, 0.20635164942955653, 0.1896080312745294, 0.19102825036550608, 0.18619327158949606, 0.18591921948175572, 0.18504685444887115, 0.17347552605255312, 0.17084907253532367, 0.20621897271431866, 0.18497027483560657, 0.17996510060531523, 0.20538054301641318, 0.1765191780819787, 0.18417644994624893, 0.18581434056122226, 0.1865427512015576, 0.16799137667305508, 0.2028064334260672, 0.18834142098794893, 0.1741281307753476, 0.1900276572988977, 0.17858768409138703, 0.1739345918297911, 0.1823752265370031, 0.1832151151633492, 0.17512770341026485, 0.17410703159465157, 0.3399879584215785, 0.15151283613785294, 0.26145352914165965, 0.5790579551495585, 0.18371954163606008, 0.19329519372158177, 0.6726626610063632, 0.1889581272737172, 0.19655613471810374, 0.23503626821195145, 0.5222258326375808, 0.20135626258702777, 0.16407317748531292, 0.19463611057537633, 0.3085257264821121, 0.218389137132304, 0.20958599479021, 0.29176026462123605, 0.1953043103079849, 0.1838698174951059, 0.188337133925636, 0.1736627710714762, 0.18332326756403916, 0.18268677146998458, 0.1795830356259579, 0.1822056299429451, 0.17883749452568865, 0.06411472418423869, 0.07550057468261662, 0.0730026217687949, 0.06675479814233043, 0.07355750680825657, 0.08150498261675454, 0.07236163001157658, 0.08367059352493467, 0.078541089817031]}, "mutation_prompt": null}
{"id": "676311fa-7c50-49eb-94f7-88b7273a7045", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO_PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n        self.inertia_weight = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        def particle_swarm_optimization(population, fitness, best, velocity, pbest, gbest):\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                velocity[i] = self.inertia_weight*velocity[i] + self.c1*r1*(pbest[i]-population[i]) + self.c2*r2*(gbest-population[i])\n                population[i] = np.clip(population[i] + velocity[i], -5.0, 5.0)\n                fitness_new = func(population[i])\n                if fitness_new < fitness[i]:\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                        pbest[i] = population[i]\n                if fitness_new < func(gbest):\n                    gbest = population[i]\n            return population, fitness, best, velocity, pbest, gbest\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        pbest = np.copy(population)\n        gbest = np.copy(population[np.argmin(fitness)])\n        velocity = np.zeros_like(population)\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, 0.9, 0.9, 0.3)\n            population, fitness, best, velocity, pbest, gbest = particle_swarm_optimization(population, fitness, best, velocity, pbest, gbest)\n        return best", "name": "DynamicChaosDEAPSO_PSO", "description": "Integrate Particle Swarm Optimization to enhance the exploration and exploitation capabilities of the DynamicChaosDEAPSO algorithm.", "configspace": "", "generation": 92, "fitness": 0.1551695664187125, "feedback": "The algorithm DynamicChaosDEAPSO_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.3594487764481833, 0.2708033159730867, 0.36902971070887103, 0.2765903382308208, 0.288332041075854, 0.29178133272435847, 0.3437209683297514, 0.2928892628368098, 0.34771266869073914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062285898288228836, 0.06231184276629087, 0.05849152127292112, 0.07823546384075575, 0.0745390757653247, 0.08551514554790463, 0.05193671245706133, 0.06228418644591016, 0.07287196036035926, 0.062336869695064356, 0.059474554548598624, 0.044211074672276696, 0.05469530481227902, 0.06504265792399877, 0.07265158091617996, 0.05391533018940953, 0.0577966393870345, 0.0547045786257806, 0.9865212730191671, 0.8859465548290804, 0.9748525966757327, 0.9292965122559902, 0.9024730583753373, 0.9099594480136742, 0.7536214556085314, 0.962120529497994, 0.8251189305223676, 0.153762598731652, 0.12251528869515693, 0.14112618243223574, 0.15729214456438967, 0.133085620940951, 0.1379362706827102, 0.1796004315532984, 0.14893831020481108, 0.12388406768546645, 0.20442442037455766, 0.16260632701811684, 0.16759299428180452, 0.2268646434984931, 0.1771500704312513, 0.15826616250696002, 0.1451403858231599, 0.1991725241826574, 0.24991606043719172, 0.1467181013503901, 0.10708717130111323, 0.09169686693694223, 0.06508943086883823, 0.08182941313589165, 0.07057170311482697, 0.09283171457513906, 0.07858487568642936, 0.07262908207844831, 0.09471312535644649, 0.05467816641976009, 0.08097848534128116, 0.09995620586387755, 0.12294649116948708, 0.0985675445224844, 0.11507488185406434, 0.010166993775097999, 0.09220219322323664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08964634131496985, 0.06075622631458866, 0.05206881845201383, 0.09780633848981668, 0.023001600614965922, 0.03409056101592356, 0.05040104607283502, 0.046290955002505685, 0.03662701172792682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04393867002604934, 0.021534473346637828, 0.02738768252827939, 0.008983100698084279, 0.05321160990494811, 0.05207790369491794, 0.026981043461632326, 0.04077591604752362, 0.07105209680602964, 0.2884772430333392, 0.26802892631432707, 0.30239377888871455, 0.2551576052322927, 0.24685138778436044, 0.3047030481472546, 0.2999425386964377, 0.2894671132521437, 0.27650410170448314, 0.07054599993156496, 0.06895349325685185, 0.05492194791990135, 0.0744952899278769, 0.08718929472297043, 0.07842634674650217, 0.03789207959830476, 0.0721719159273323, 0.06233895717509619, 0.1317032351913554, 0.14244920318917464, 0.14675734692905174, 0.17789128940405208, 0.14325188715978898, 0.15248754683336696, 0.143014215960086, 0.14095764286728696, 0.13719998397498745, 0.1885722910664951, 0.1933308949972845, 0.19467823489626823, 0.21488310959571177, 0.18264738452907703, 0.23285748632121517, 0.18648333715229082, 0.18676656908148714, 0.15276155518359869, 0.181474581344355, 0.10773291056835255, 0.12977954416938775, 0.16018687211156102, 0.14650886213584402, 0.14832823805422135, 0.12076762486434622, 0.12471100908197219, 0.12206046164999718, 0.16102028151211156, 0.16157389934374, 0.17412645285585437, 0.18208837111259069, 0.1643498158085398, 0.1837049208273035, 0.22516090217424944, 0.1682297341672696, 0.18659190145693716, 0.15740122421295022, 0.16946812889680474, 0.17853723653123832, 0.1848145315097387, 0.1670155873703525, 0.1664110003733702, 0.1706845050446324, 0.16768721328742264, 0.15668304145573275, 0.16420829618348398, 0.17754734940285655, 0.17453764753113377, 0.37692719826825083, 0.1810807192321352, 0.138012744697939, 0.14215177506416543, 0.1394633547044929, 0.1650383670037774, 0.2541594371149004, 0.16330459579662582, 0.1682150065214162, 0.22007836060176356, 0.15651813861526975, 0.18599768664623384, 0.134590863975785, 0.12333485672619426, 0.19726052647811698, 0.18457764496447637, 0.17567455545956712, 0.18726649259991013, 0.1704217716642601, 0.1846439092939599, 0.17126521513309367, 0.17486983417762092, 0.18146782119183613, 0.17924466912042514, 0.07189501880497251, 0.07182739218815148, 0.06132739233562279, 0.05655651846507914, 0.05543516679284366, 0.05376716373694723, 0.06669624309434075, 0.07335207500004692, 0.07120988587098931]}, "mutation_prompt": null}
{"id": "f20c8de6-8b28-4b4e-b4b7-6eddb9077469", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance the diversity maintenance by introducing a dynamic chaos-driven mutation strategy based on individual performance for better exploration in the search space.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.49040614750808675, 0.46959630063917546, 0.4306752144823811, 0.4654830952853557, 0.46176023855867965, 0.4487851165327127, 0.5100211738894553, 0.4639485750721276, 0.5145814777183633, 0.03427787801762949, 9.999999999998899e-05, 0.05006406396739149, 0.016300742007323787, 9.999999999998899e-05, 9.999999999998899e-05, 0.09146761816186422, 0.061095904201543316, 9.999999999998899e-05, 0.1040355627496039, 0.11601663518226846, 0.10898643191016777, 0.10507349112204356, 0.09620120258113507, 0.1041102174612677, 0.10013354890224868, 0.11666876449943753, 0.11855210154798146, 0.09052501579685646, 0.09138341056556532, 0.08966190315254319, 0.09489543155420577, 0.08983916896709176, 0.07169978007072919, 0.08792482588833739, 0.09019473553883295, 0.09053767033878135, 0.915132770367499, 0.8495191723327142, 0.9727750001431898, 0.9527168787145527, 0.9033038310052801, 0.8811395694872776, 0.973590906419385, 0.8601612768309188, 0.9255577200231913, 0.25026703697369423, 0.25564309599540125, 0.29040836218608534, 0.24108112411852944, 0.29062258156358334, 0.2743737138069241, 0.2772716280038554, 0.29344393718397077, 0.28028422654059615, 0.22205438326156113, 0.24748047806656792, 0.7250976308190902, 0.2652192308174939, 0.280531202131056, 0.3247908253390426, 0.3401013119396886, 0.3064750583433612, 0.34454373594196075, 0.15524346021439228, 0.2116447668850402, 0.22166459539922545, 0.23574832720013017, 0.1722109127314183, 0.1426583349876781, 0.15843184574456481, 0.1657013278931707, 0.216041724791033, 0.12983576117517992, 0.19594331760791328, 0.12445216908401868, 0.15106754417151858, 0.1649699608298113, 0.28718298409944565, 0.153753347607133, 0.09624230281254531, 0.1502347046841691, 9.999999999998899e-05, 0.03394266581859284, 0.03613576780975836, 0.013688398911047228, 0.036010012342344244, 0.008585848704285803, 0.003406391796435315, 0.02837986957237515, 0.03734116726722281, 0.1089352575467496, 0.10829931532816484, 0.12143867577991363, 0.15178797336787175, 0.12795130645300068, 0.14923654662891617, 0.054484998687053254, 0.11358372959461971, 0.10866068841462617, 0.0004925605740916383, 9.999999999998899e-05, 9.999999999998899e-05, 0.0048017561274235065, 0.06136653302258965, 9.999999999998899e-05, 0.03604015215455725, 9.999999999998899e-05, 9.999999999998899e-05, 0.11864139275112995, 0.13559544740494134, 0.04977293671958194, 0.0660442526226177, 0.11180503887828164, 0.12066879343024306, 0.085839700239418, 0.1388516453663151, 0.1088607567303792, 0.39473338590556006, 0.43434815296700735, 0.44626977370247534, 0.43296245709599046, 0.415432626693628, 0.43634736491664605, 0.40883646343769, 0.4220456801995671, 0.4332665427844826, 0.0850041721590391, 0.11858147214306847, 0.1130766767192305, 0.12055234413945837, 0.11950333722290418, 0.10355781243639284, 0.10340187685177171, 0.10430040095935889, 0.14032804117516684, 0.19311101907014783, 0.18998637143948716, 0.25319170035613225, 0.2248906882526588, 0.18602940986100824, 0.21752820062201084, 0.247440186962113, 0.2156265358338706, 0.2221127596204734, 0.28418815588815705, 0.24613944899698603, 0.2541432630048851, 0.2992450120814416, 0.30493453432633, 0.28640837512498096, 0.2389803584535729, 0.28932781921587014, 0.2749524051186957, 0.2193774099730228, 0.18250382181793645, 0.23519163339343696, 0.19075785609275087, 0.22215552118539483, 0.19084195404761484, 0.18186151056609556, 0.22634336575488045, 0.17829002870187127, 0.18690641633057203, 0.18898660792748823, 0.20921095477068552, 0.18747342829791935, 0.17889642305847153, 0.2138325341401025, 0.19414285977617796, 0.1873692027581737, 0.2053143598019046, 0.18582597866681616, 0.195298031413913, 0.21099483382465611, 0.19421320811584208, 0.20460645099911057, 0.19308218429810642, 0.19106123803974318, 0.19055158853488519, 0.1892720577942888, 0.1815378126276479, 0.20525780894953105, 0.16194386436929142, 0.16483095833146177, 0.19186949516171403, 0.17559669602149075, 0.20267108994051763, 0.6708280591954981, 0.6583593928376796, 0.22545918931218478, 0.20328340537054512, 0.11204967398297117, 0.16333022324353297, 0.1954865472741084, 0.19068898218890173, 0.439695106113579, 0.1561378400539717, 0.1513068216861253, 0.18070647064057044, 0.1831765809275182, 0.16847561085764062, 0.17293558445797863, 0.17856926075128954, 0.16989801634060187, 0.17916153092442144, 0.18694725235399356, 0.17216443168612316, 0.10332615158895297, 0.08274971498080519, 0.0729879097041346, 0.09248004029407653, 0.07415179574643949, 0.08429053998460367, 0.07132646309369084, 0.07744014797237708, 0.08211056826314544]}, "mutation_prompt": null}
{"id": "588ec056-1d3b-42d7-865b-535ec37e6955", "solution": "import numpy as np\n\nclass DynamicChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n        return best", "name": "DynamicChaosDEAPSO", "description": "Enhance the diversity maintenance by introducing a dynamic chaos-driven mutation strategy based on individual performance for better exploration in the search space.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.49040614750808675, 0.46959630063917546, 0.4306752144823811, 0.4654830952853557, 0.46176023855867965, 0.4487851165327127, 0.5100211738894553, 0.4639485750721276, 0.5145814777183633, 0.03427787801762949, 9.999999999998899e-05, 0.05006406396739149, 0.016300742007323787, 9.999999999998899e-05, 9.999999999998899e-05, 0.09146761816186422, 0.061095904201543316, 9.999999999998899e-05, 0.1040355627496039, 0.11601663518226846, 0.10898643191016777, 0.10507349112204356, 0.09620120258113507, 0.1041102174612677, 0.10013354890224868, 0.11666876449943753, 0.11855210154798146, 0.09052501579685646, 0.09138341056556532, 0.08966190315254319, 0.09489543155420577, 0.08983916896709176, 0.07169978007072919, 0.08792482588833739, 0.09019473553883295, 0.09053767033878135, 0.915132770367499, 0.8495191723327142, 0.9727750001431898, 0.9527168787145527, 0.9033038310052801, 0.8811395694872776, 0.973590906419385, 0.8601612768309188, 0.9255577200231913, 0.25026703697369423, 0.25564309599540125, 0.29040836218608534, 0.24108112411852944, 0.29062258156358334, 0.2743737138069241, 0.2772716280038554, 0.29344393718397077, 0.28028422654059615, 0.22205438326156113, 0.24748047806656792, 0.7250976308190902, 0.2652192308174939, 0.280531202131056, 0.3247908253390426, 0.3401013119396886, 0.3064750583433612, 0.34454373594196075, 0.15524346021439228, 0.2116447668850402, 0.22166459539922545, 0.23574832720013017, 0.1722109127314183, 0.1426583349876781, 0.15843184574456481, 0.1657013278931707, 0.216041724791033, 0.12983576117517992, 0.19594331760791328, 0.12445216908401868, 0.15106754417151858, 0.1649699608298113, 0.28718298409944565, 0.153753347607133, 0.09624230281254531, 0.1502347046841691, 9.999999999998899e-05, 0.03394266581859284, 0.03613576780975836, 0.013688398911047228, 0.036010012342344244, 0.008585848704285803, 0.003406391796435315, 0.02837986957237515, 0.03734116726722281, 0.1089352575467496, 0.10829931532816484, 0.12143867577991363, 0.15178797336787175, 0.12795130645300068, 0.14923654662891617, 0.054484998687053254, 0.11358372959461971, 0.10866068841462617, 0.0004925605740916383, 9.999999999998899e-05, 9.999999999998899e-05, 0.0048017561274235065, 0.06136653302258965, 9.999999999998899e-05, 0.03604015215455725, 9.999999999998899e-05, 9.999999999998899e-05, 0.11864139275112995, 0.13559544740494134, 0.04977293671958194, 0.0660442526226177, 0.11180503887828164, 0.12066879343024306, 0.085839700239418, 0.1388516453663151, 0.1088607567303792, 0.39473338590556006, 0.43434815296700735, 0.44626977370247534, 0.43296245709599046, 0.415432626693628, 0.43634736491664605, 0.40883646343769, 0.4220456801995671, 0.4332665427844826, 0.0850041721590391, 0.11858147214306847, 0.1130766767192305, 0.12055234413945837, 0.11950333722290418, 0.10355781243639284, 0.10340187685177171, 0.10430040095935889, 0.14032804117516684, 0.19311101907014783, 0.18998637143948716, 0.25319170035613225, 0.2248906882526588, 0.18602940986100824, 0.21752820062201084, 0.247440186962113, 0.2156265358338706, 0.2221127596204734, 0.28418815588815705, 0.24613944899698603, 0.2541432630048851, 0.2992450120814416, 0.30493453432633, 0.28640837512498096, 0.2389803584535729, 0.28932781921587014, 0.2749524051186957, 0.2193774099730228, 0.18250382181793645, 0.23519163339343696, 0.19075785609275087, 0.22215552118539483, 0.19084195404761484, 0.18186151056609556, 0.22634336575488045, 0.17829002870187127, 0.18690641633057203, 0.18898660792748823, 0.20921095477068552, 0.18747342829791935, 0.17889642305847153, 0.2138325341401025, 0.19414285977617796, 0.1873692027581737, 0.2053143598019046, 0.18582597866681616, 0.195298031413913, 0.21099483382465611, 0.19421320811584208, 0.20460645099911057, 0.19308218429810642, 0.19106123803974318, 0.19055158853488519, 0.1892720577942888, 0.1815378126276479, 0.20525780894953105, 0.16194386436929142, 0.16483095833146177, 0.19186949516171403, 0.17559669602149075, 0.20267108994051763, 0.6708280591954981, 0.6583593928376796, 0.22545918931218478, 0.20328340537054512, 0.11204967398297117, 0.16333022324353297, 0.1954865472741084, 0.19068898218890173, 0.439695106113579, 0.1561378400539717, 0.1513068216861253, 0.18070647064057044, 0.1831765809275182, 0.16847561085764062, 0.17293558445797863, 0.17856926075128954, 0.16989801634060187, 0.17916153092442144, 0.18694725235399356, 0.17216443168612316, 0.10332615158895297, 0.08274971498080519, 0.0729879097041346, 0.09248004029407653, 0.07415179574643949, 0.08429053998460367, 0.07132646309369084, 0.07744014797237708, 0.08211056826314544]}, "mutation_prompt": null}
{"id": "4f3249a8-f992-4e0a-b1c3-f72875834c14", "solution": "import numpy as np\n\nclass EnhancedDynamicChaosDEAPSO(DynamicChaosDEAPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.radius_min = 0.05\n        self.radius_max = 0.2\n\n    def local_search(self, x, best, radius=0.1):\n        radius = np.clip(radius, self.radius_min, self.radius_max)\n        x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n        if func(x_new) < func(x):\n            return x_new\n        else:\n            return x\n\n    def adaptive_local_search(self, x, best, radius):\n        return self.local_search(x, best, radius)\n\n    def differential_evolution(self, population, fitness, best, f, cr, chaos_param):\n        new_population = np.copy(population)\n        for i in range(self.population_size):\n            a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n            x_new = self.mutate(population[i], a, b, c, f)\n            if np.all(x_new == population[i]) or np.random.rand() < cr:\n                x_new = a + f * (b - c)\n            fitness_new = func(x_new)\n            if fitness_new < fitness[i]:\n                new_population[i] = x_new\n                fitness[i] = fitness_new\n                if fitness_new < best:\n                    best = fitness_new\n            if np.random.rand() < self.mutation_prob:\n                new_population[i] = self.self_adaptive_mutate(new_population[i], f)\n            new_population[i] = self.chaotic_search(new_population[i], best, chaos_param)\n            new_population[i] = self.adaptive_local_search(new_population[i], best, self.radius_min + (self.radius_max - self.radius_min) * (i+1) / self.population_size)  # Integrate adaptive local search\n        return new_population, fitness, best", "name": "EnhancedDynamicChaosDEAPSO", "description": "Enhance the algorithm by incorporating a dynamic chaos-driven mutation strategy with adaptive search radius for improved exploration and exploitation in the search space.", "configspace": "", "generation": 95, "fitness": 0.16987060131729861, "feedback": "The algorithm EnhancedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.4225227281012952, 0.39227573882924205, 0.43025911115364524, 0.44074176535613463, 0.4441531167396875, 0.3856251446186756, 0.3824448307109305, 0.40676289470925053, 0.4095713724888974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05732613018015853, 0.07043851356795716, 0.06931725712273507, 0.07875945225419545, 0.07885784635960058, 0.07018799582738555, 0.07984454524242013, 0.08843038582414575, 0.07144725076790748, 0.062238119894099664, 0.06552910459293615, 0.06663458585472526, 0.058886840354996806, 0.06186822702225814, 0.057888740844482145, 0.048325137037822374, 0.07702641485155182, 0.05335380803362655, 0.8573683261397702, 0.8883834227229062, 0.7756881365322752, 0.9263525163378162, 0.8650543879564486, 0.8975830970305918, 0.871514438792027, 0.8477146042173018, 0.8042393528416762, 0.24001366864257023, 0.18364670753218093, 0.15939849564464947, 0.1576437382551874, 0.1523349592953509, 0.13128045231583785, 0.1596452753797235, 0.13981547999273458, 0.15475340222620593, 0.1376956570467237, 0.1634058304948488, 0.19092861074780432, 0.215003891863211, 0.19957703358590628, 0.16602562643140806, 0.16543454465398955, 0.17472434319657237, 0.22255001990311263, 0.10715394646551635, 0.13555915081164416, 0.10418874102613795, 0.13717343229090606, 0.12442275431839767, 0.11793751336920599, 0.12053486458090301, 0.143209444399936, 0.1159983154865184, 0.10469848076498034, 0.13472857482999046, 0.11027064666306963, 0.1208748111485971, 0.11827013556065535, 0.13821007466867485, 0.09986235028562096, 0.0850475177818657, 0.12545480803137488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09823340905871303, 0.06477707144205214, 0.05262102330956464, 0.046841259775649124, 0.06256802009524531, 0.05506797267331309, 0.055775596116536486, 0.05375166335377213, 0.10933937404629601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04762619533602974, 0.05106670676997804, 0.022358219997285822, 0.06389074721380839, 0.058343691152955346, 0.04711609079866197, 0.06119908765956439, 0.07041372318831085, 0.03691953888964694, 0.37230166600097714, 0.36028114502700426, 0.3425164674033503, 0.3542616372916636, 0.36815842860824777, 0.32402815698989884, 0.3633976601916974, 0.3744804262014044, 0.36300620431827424, 0.08301434608411906, 0.08361814801722922, 0.13393584277655934, 0.07785952656739248, 0.06848561326633085, 0.08798450268427627, 0.09016662675465648, 0.07799031841440052, 0.05723344783512552, 0.1493321341834355, 0.1225319887140578, 0.14584661400214105, 0.16658617447681423, 0.13997199438064167, 0.13690741893378655, 0.15028294995260894, 0.13002311887477203, 0.14942503373274374, 0.20927550181885124, 0.1769556316162363, 0.2406781157300475, 0.21844659561356483, 0.18878271405733227, 0.25775394181790223, 0.2668901609118258, 0.2552960850857837, 0.2295026417234216, 0.1667637850729341, 0.15130515468876327, 0.13965248359224647, 0.13908788496970226, 0.14116510576730468, 0.13344478951504557, 0.20332112314582873, 0.12711911397477993, 0.1411023161414463, 0.17586752852356036, 0.17087589964766958, 0.16352066891870987, 0.19935164160658958, 0.17762168118253374, 0.170826538962783, 0.17340726100750692, 0.16777096345867337, 0.17245865543784888, 0.1653015169937042, 0.16493683028716366, 0.16209935008198795, 0.17189507621053235, 0.1654559873943683, 0.1747039448562433, 0.16724496139062905, 0.15608266034328155, 0.16252590747822726, 0.17421192611188252, 0.27738456096876607, 0.1792264985018861, 0.35807391296300883, 0.23989082835211573, 0.23412271572309562, 0.20811286357380887, 0.15660841347308674, 0.15171448738480597, 0.16399450760789402, 0.19762037929039833, 0.1893390677635044, 0.17021253571431427, 0.18406574601063297, 0.30896777984651447, 0.20153752497714927, 0.14801697368658695, 0.20149431439871568, 0.17192950235754834, 0.1787485974551375, 0.20336434201029785, 0.17785105252061695, 0.17410950794782132, 0.20734989880161447, 0.1857788375527174, 0.17852220642182115, 0.18363358573426436, 0.0643033640921572, 0.0670735990574225, 0.057644221895955305, 0.0622387808349657, 0.07175249778079618, 0.0679995999325187, 0.05724570316102651, 0.06658699651435729, 0.06650671192768354]}, "mutation_prompt": null}
{"id": "6606ef8f-8000-4cf1-b05b-ab35d814643f", "solution": "import numpy as np\n\nclass SimulatedAnnealingDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x) or np.random.rand() < np.exp((func(x) - func(x_new)) / T):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n        T = 1.0\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n            T *= 0.95  # Cooling schedule for simulated annealing\n        return best", "name": "SimulatedAnnealingDEAPSO", "description": "Integrate a simulated annealing mechanism to allow for probabilistic acceptance of worse solutions for better exploration in the search space.", "configspace": "", "generation": 96, "fitness": 0.1985969237583669, "feedback": "The algorithm SimulatedAnnealingDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.4181062248317229, 0.4018485639941922, 0.36779386234201705, 0.41671338836162675, 0.3786736116552002, 0.37644294949470136, 0.44265664648204706, 0.3843097928468058, 0.3851723281564111, 9.999999999998899e-05, 0.042710923718069393, 0.010843166232266555, 9.999999999998899e-05, 0.001406795457247978, 9.999999999998899e-05, 0.04616468933144957, 0.023781130318217936, 0.049023901261237235, 0.11071822504460505, 0.09856445449466378, 0.1071762354581347, 0.12189212212407763, 0.09098531776413654, 0.12758014145580798, 0.09990222870926724, 0.07948015193462665, 0.11198271542983707, 0.0902758873541516, 0.0932681850928726, 0.07680830663057381, 0.08147863516184284, 0.06761617418372656, 0.09106274821710181, 0.08364059446857997, 0.10393035041510135, 0.08180751716917789, 0.9716925615308081, 0.761690054486196, 0.8867030215535989, 0.9023879305544704, 0.9688233241746347, 0.8457705726818038, 0.7964208762315879, 0.9158459776167887, 0.8772898005172065, 0.24460872553478596, 0.28066171257058536, 0.25676597037845617, 0.22836386288407107, 0.23146892775272032, 0.2768974411097329, 0.2702385909995364, 0.25052745750481487, 0.2669827357145499, 0.2901643786181368, 0.2895652011510852, 0.5859920627553843, 0.33111605127003163, 0.2455194583349487, 0.32466878228962126, 0.31969749324549257, 0.2740244368483914, 0.22762855301578133, 0.12022760091927431, 0.12612028388938012, 0.13691160706708783, 0.12004268680759667, 0.11541256158055113, 0.14747835304667622, 0.12008153353887407, 0.14795296252473267, 0.17417126325597432, 0.1303556047020109, 0.10563296993549143, 0.11086744844080765, 0.13002589915203444, 0.1650161485723758, 0.15954220119691054, 0.14595808937595134, 0.12347663578996382, 0.13166552610076088, 0.01299539813955708, 0.043496455193061445, 9.999999999998899e-05, 0.006112669612413413, 0.0018940312002198034, 9.999999999998899e-05, 0.04384060617224894, 9.999999999998899e-05, 9.999999999998899e-05, 0.09463684415821938, 0.14728186293385204, 0.07980445443076056, 0.07420624872723725, 0.04141858462778658, 0.0966813957199889, 0.1334816297021273, 0.09275220993977784, 0.07480138171157691, 9.999999999998899e-05, 9.999999999998899e-05, 0.008546817062228707, 9.999999999998899e-05, 0.02939984098208659, 0.006787768257576654, 0.020101652856251206, 9.999999999998899e-05, 9.999999999998899e-05, 0.13188485956915852, 0.05188770428282474, 0.13237264927142334, 0.12942629480297496, 0.08072481657425745, 0.11639838736034236, 0.10988774711036764, 0.10083478814125335, 0.09349306726876261, 0.3755991948985473, 0.3655542478505135, 0.3728734119887708, 0.374511683809992, 0.4146658386839496, 0.3659174193180639, 0.35956108215327576, 0.35952142562606837, 0.3834256826821951, 0.08362928533943592, 0.09606807177800947, 0.12458094125049557, 0.10126703695223083, 0.1081681375352811, 0.10364526959018383, 0.1020960328371151, 0.10127780800723507, 0.12339399107980042, 0.1405888362190677, 0.1835676812187954, 0.16567309065229852, 0.19396610326912733, 0.20314863095240399, 0.17780498250957244, 0.1835328444776354, 0.16635858545988935, 0.18387814884505593, 0.2833485952835276, 0.25154782737795145, 0.26579984424526426, 0.24988500955093018, 0.2735727088083524, 0.251760048508072, 0.28299995489410135, 0.19873962888501906, 0.21793386872774623, 0.22546006144822772, 0.21866964520821053, 0.21427557775698358, 0.21977852455667446, 0.235091900950678, 0.22425711218563238, 0.2213761679579851, 0.19169455999701845, 0.1831257770511321, 0.17200074574792712, 0.1818504593894913, 0.2089055625439492, 0.18413189436752986, 0.19026214144169884, 0.19017562345417893, 0.19399034330086296, 0.17329838777951623, 0.180587580686546, 0.19743841274260898, 0.1900932198951697, 0.19007561400981887, 0.21021764336639692, 0.17165816401559464, 0.17918342037585622, 0.2050227009624659, 0.19393879836613348, 0.1829251258702086, 0.1601868529715259, 0.16721548760163873, 0.20235395530741884, 0.5264699695407269, 0.19107893264392228, 0.19189895118564315, 0.1620049340709191, 0.17967137900279717, 0.5014948422290237, 0.45055269668751274, 0.20286544635578996, 0.14044157942038404, 0.16427020322166863, 0.16190169778959174, 0.1947052838547133, 0.2017022086113589, 0.15310036764793022, 0.25686317944912784, 0.18610045057590352, 0.17366027526267402, 0.17148127568531712, 0.17867653436244868, 0.16850337768772117, 0.163683139246796, 0.16778871188420885, 0.17762309095126694, 0.18112478437585544, 0.0708004312102819, 0.07011549140889672, 0.07766601929487515, 0.07615403433467671, 0.07417936043738249, 0.06822037351931154, 0.06908023634008564, 0.06347035036429172, 0.07785804195758883]}, "mutation_prompt": null}
{"id": "013dec7f-66d9-474f-98a0-8e65308c911e", "solution": "import numpy as np\n\nclass AdaptiveChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f, fitness_land):\n            mutation_step = np.abs(np.mean(fitness_land) - func(x)) + 1e-6\n            return np.clip(x + f * np.random.normal(0, mutation_step, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f, fitness)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n            return new_population, fitness, best\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best = differential_evolution(population, fitness, best, f, cr, chaos_param)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n        return best", "name": "AdaptiveChaosDEAPSO", "description": "Improve the exploration-exploitation balance by integrating a novel adaptive chaos-driven mechanism for mutation with varying step sizes based on local fitness landscape information.", "configspace": "", "generation": 97, "fitness": 0.17111157978329009, "feedback": "The algorithm AdaptiveChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.45597136452681675, 0.40438978299091777, 0.44063512626909507, 0.40949068950976697, 0.4278720528175338, 0.43960150348706795, 0.4373886902444125, 0.4309040130695183, 0.42461387192425304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0741808988967727, 0.09431787767471755, 0.10386603678449524, 0.0638707955550537, 0.05530459924925002, 0.09073722828182418, 0.08159337082673046, 0.06914136284272465, 0.08248886884140505, 0.054045071511962806, 0.03480459248445933, 0.06762622562647524, 0.04595114494280084, 0.04955695596268839, 0.05758049234666829, 0.07105635379627784, 0.06537188016278617, 0.05236216323609677, 0.9122949072792553, 0.9457071359068707, 0.9368436020494542, 0.9336583507283398, 0.9238343066156484, 0.915958077153786, 0.8502106804126889, 0.814326233449962, 0.8701187979358949, 0.24784927853491368, 0.25140201274333773, 0.20743688635674162, 0.22364346266528534, 0.24931368489161865, 0.21548284645075544, 0.18371042623033085, 0.22765485492600723, 0.23446855521761767, 0.11324296880258278, 0.1879820566971122, 0.16314112367340894, 0.31762927553359865, 0.17855437098538807, 0.16808696690809288, 0.19933528922919652, 0.19261508456911935, 0.2955902845286843, 0.03285443240940167, 0.060855502992460786, 0.07982042685377821, 0.08413485356011552, 0.07526815115739738, 0.08705164427130041, 0.0463645852514204, 0.11613973808844325, 0.07164151055782675, 0.054164956086513505, 0.08406420750061627, 0.012267277301155954, 0.042063578971195614, 0.13845955166976798, 0.02941703177643573, 0.02955901948903905, 0.0031682503862809908, 0.04295741763765437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05233791738354954, 0.044718981635799904, 0.042399376495713126, 0.04559531997324162, 0.066962261840809, 0.022110337330285446, 0.0336065994971797, 0.059696680115137624, 0.053932351582535065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041140738234299756, 0.036910202279591076, 0.0145450168443505, 9.999999999998899e-05, 0.01308205840088561, 0.02604278953660255, 0.008702250662874444, 0.027877664607247055, 0.029549291984953596, 0.3979397003755011, 0.37730757161815986, 0.3794157945904152, 0.4129754750422986, 0.3776500577835803, 0.3887630855099533, 0.39110955147954285, 0.39837723990845686, 0.41529289623948207, 0.07593786520047052, 0.08365736311288419, 0.07056040997950952, 0.07297521669284268, 0.06130614939365919, 0.06704847438106554, 0.06314107602522456, 0.06194230687937674, 0.08459445067139859, 0.14226841793160294, 0.14267931494460484, 0.16723893550906743, 0.2260587266889178, 0.16228392938362812, 0.1574420122058524, 0.14960307175458076, 0.1485444222472594, 0.15785270275398255, 0.2520519602318301, 0.2829651188700242, 0.26590958747611826, 0.26159781065921983, 0.2866148031258262, 0.2675908079167916, 0.20640047846911047, 0.2641980559578312, 0.3015089805579705, 0.15841120571310363, 0.19817163103725954, 0.2354866499911522, 0.18037277250784423, 0.19030453654149582, 0.16447621926098932, 0.172643592458965, 0.23583781075307975, 0.17979534828214605, 0.18129933996393388, 0.19231412035316842, 0.19750707645367782, 0.16953445940225897, 0.18197132720996156, 0.18248823397471448, 0.18621030542957528, 0.18008583751217633, 0.17340680973170852, 0.16982740040465594, 0.19552124888648792, 0.18593312359994474, 0.15675199697890763, 0.17062574111433082, 0.17610081545481293, 0.15579444632773864, 0.1728732870517924, 0.1506082196452464, 0.15921732361822782, 0.20474408809394706, 0.17646775381005608, 0.178646900793882, 0.19610432999111405, 0.15561995199625123, 0.17382289129895767, 0.12173668481734135, 0.1817328663738914, 0.16839973224108928, 0.18727648477470993, 0.161213614502695, 0.18883643804730044, 0.19119750854720596, 0.1526012236781431, 0.1467388352838539, 0.20029085574574412, 0.19428638562535927, 0.1739165654569944, 0.1835511391030844, 0.1763795980531484, 0.1717872061053367, 0.16514482986969792, 0.18640901052054537, 0.17981600722098268, 0.17568203452048892, 0.17475115293957022, 0.061176196103449154, 0.06643501890573056, 0.07201326391035368, 0.05221292067386352, 0.0632502724949856, 0.06325437234622644, 0.058304524817067604, 0.05983852996009009, 0.0630108346359759]}, "mutation_prompt": null}
{"id": "754fdedb-9165-48cc-81e1-06d4f556cb1f", "solution": "import numpy as np\n\nclass ImprovedChaosDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.max_iterations = budget // self.population_size\n        self.w = 0.9\n        self.w_min = 0.4\n        self.w_max = 0.9\n        self.mutation_prob = 0.2\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        def mutate(x, a, b, c, f):\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        def explore_mutate(x):\n            return np.clip(x + np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def chaotic_search(x, best, chaos_param):\n            new_x = x + chaos_param * np.random.uniform(-5.0, 5.0, x.shape)\n            new_x = np.clip(new_x, -5.0, 5.0)\n            if func(new_x) < func(x):\n                return new_x\n            else:\n                return x\n\n        def local_search(x, best, radius=0.1):\n            x_new = np.clip(x + radius * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def historical_best_search(x, best_history, best, radius=0.1):\n            x_new = x + radius * (best_history - x)  # Move towards historical best\n            x_new = np.clip(x_new, -5.0, 5.0)\n            if func(x_new) < func(x):\n                return x_new\n            else:\n                return x\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param, best_history):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                        best_history = x_new  # Update historical best\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)  # Integrate local search\n                new_population[i] = historical_best_search(new_population[i], best_history, best)\n            return new_population, fitness, best, best_history\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best = np.min(fitness)\n        best_history = population[np.argmin(fitness)]\n        f = 0.9\n        cr = 0.9\n        chaos_param = 0.3\n\n        for _ in range(self.max_iterations):\n            population, fitness, best, best_history = differential_evolution(population, fitness, best, f, cr, chaos_param, best_history)\n            f = max(0.1, f * 0.95)  # Adaptive mutation rate adjustment\n            cr = max(0.1, cr * 0.95)  # Adaptive crossover rate adjustment\n            diversity = np.std(population, axis=0)\n            chaos_param = max(0.1, min(0.5, np.mean(diversity)))\n            chaos_param = max(0.1, chaos_param * 0.97)  # Dynamic chaos parameter adjustment based on diversity\n        return best", "name": "ImprovedChaosDEAPSO", "description": "Introduce a novel chaos-driven local search mechanism based on historical best solutions for enhanced exploitation in the search space.", "configspace": "", "generation": 98, "fitness": 0.20623631303193268, "feedback": "The algorithm ImprovedChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.554883471095587, 0.5004906034790747, 0.5328112181833766, 0.4899897637051849, 0.48483812029953977, 0.5692598988451399, 0.5310553433673522, 0.4768176551147941, 0.545162848507929, 9.999999999998899e-05, 9.999999999998899e-05, 0.0054851264921979, 0.03153204385145403, 0.019726744034027632, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1220360545701702, 0.12503230048693892, 0.15462227048422106, 0.11290479651723562, 0.09651623178256397, 0.1168163898931116, 0.0890862043828975, 0.10444210714183988, 0.10623397492191466, 0.0920642487958685, 0.0799818341105285, 0.10246509867331732, 0.112686275232035, 0.061958607741408156, 0.08869086143306126, 0.08471080083504512, 0.08092550669836729, 0.08869733618140252, 0.9188956933904835, 0.8140570829341428, 0.9301984700114835, 0.9500262826173704, 0.8529447401433811, 0.47776463421472914, 0.9661525929128241, 0.7029831087526583, 0.8257661912659742, 0.29835730375562985, 0.2935784599240151, 0.29623613294433593, 0.26085909230952364, 0.2883740832660836, 0.32390606157020074, 0.29148664821372394, 0.22336616723951863, 0.27828035436178744, 0.32249206720061696, 0.20905292477067816, 0.3254505804735629, 0.26271341334641884, 0.19881434463790826, 0.3014496064082838, 0.32759151319780144, 0.21974392327215664, 0.2738151454335862, 0.1357496007794161, 0.12672189357038188, 0.13464599397880506, 0.11613215238724206, 0.1212366484086479, 0.11663274251085498, 0.13942402155215927, 0.22961564607071516, 0.14181429208816643, 0.13034340870491123, 0.12457070514965618, 0.1226815264819916, 0.1390416418023408, 0.1613404631007217, 0.12008326314450257, 0.11858231512659134, 0.11539046608187142, 0.13244630733347584, 0.005720909740989044, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733767281630774, 0.0015739126247920066, 0.05826991020043226, 0.025130581202426727, 9.999999999998899e-05, 0.0027292131503250383, 0.0484471158276909, 0.059439725205892135, 0.08317384369601566, 0.09245352884630431, 0.11633810690838853, 0.07393125833478809, 0.12265260315759496, 0.09158945191120005, 0.08252883521893184, 0.057398361534351516, 0.052603633988406506, 0.07470223964911837, 0.07640194722599902, 0.025659380912725793, 0.029739075392530845, 0.027221202082183815, 0.044889536040722655, 0.06478704968271154, 0.13095443313074595, 0.13777989471935526, 0.13130899786783068, 0.06662196974848844, 0.10358485733497924, 0.11593459302003861, 0.14552269501513493, 0.11655719339337323, 0.11821957181345422, 0.4786292681521983, 0.4614657193153756, 0.46579617768639403, 0.4193359497616389, 0.42455702222795844, 0.45222431530704754, 0.4235256772032381, 0.44560558368771286, 0.4520846674713026, 0.12003224654337596, 0.11254576757294399, 0.1238652000883147, 0.11129771701677615, 0.08316526452405837, 0.13091718197282531, 0.09407566232810927, 0.14879602476937637, 0.1038755468441308, 0.20598736824244457, 0.19778905012861692, 0.1560150229645949, 0.1811420958741191, 0.2544438469334205, 0.26240423377356403, 0.3150294156095975, 0.16530358876296491, 0.19823849314677477, 0.275865062189385, 0.2738353598849933, 0.23373727591360904, 0.2743748481186231, 0.27367777311513464, 0.2956315844471451, 0.250599091694503, 0.24451335795491091, 0.2861947606043139, 0.22228341061919754, 0.21447685661396854, 0.225945128022791, 0.232668786001338, 0.21727115194814695, 0.20610555703048083, 0.17332375555488455, 0.18797900762050823, 0.20828829057951448, 0.1746104271076525, 0.19072410639007353, 0.18270008959048323, 0.17811528030033041, 0.19171536557180957, 0.19139248818305277, 0.20050305591158812, 0.19612425616130824, 0.20263138077877796, 0.2196751733923975, 0.18476588562272167, 0.2069902926891053, 0.19259889256179252, 0.19634838646804287, 0.17279317519352821, 0.19668618422179063, 0.21057603357175103, 0.17755589790233406, 0.1831887947514811, 0.18190002638501923, 0.1672189156158883, 0.21540455070917752, 0.19415809567289521, 0.17067862525293953, 0.16189379778197222, 0.1866331132132394, 0.17303870896542028, 0.47379673661782373, 0.20462330229613157, 0.28028196617976475, 0.23753754980460973, 0.2051319761095015, 0.1913963235837588, 0.1615693390810704, 0.14564206421462478, 0.15914485284319313, 0.17087053244205885, 0.1775635260289331, 0.20272165768967876, 0.17109793188264433, 0.18756201645744608, 0.17427953365236004, 0.19220555477255952, 0.16730638716382618, 0.16919872822387172, 0.07590851698586831, 0.07073146246290651, 0.07389571227841929, 0.07095910840706188, 0.07291872361923857, 0.07549398128409834, 0.08305093372261996, 0.07600362012183082, 0.0783785716241957]}, "mutation_prompt": null}
{"id": "d067d0c9-cbed-4db8-ac81-aae8efdead2e", "solution": "import numpy as np\n\nclass EnhancedDynamicChaosDEAPSO(DynamicChaosDEAPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_control = 0.1\n\n    def __call__(self, func):\n        def self_adaptive_mutate(x, f):\n            return np.clip(x + f * np.random.normal(0, 1, x.shape), -5.0, 5.0)\n\n        def differential_evolution(population, fitness, best, f, cr, chaos_param):\n            new_population = np.copy(population)\n            for i in range(self.population_size):\n                a, b, c = population[np.random.choice(range(self.population_size), 3, replace=False)]\n                x_new = mutate(population[i], a, b, c, f)\n                if np.all(x_new == population[i]) or np.random.rand() < cr:\n                    x_new = a + f * (b - c)\n                fitness_new = func(x_new)\n                if fitness_new < fitness[i]:\n                    new_population[i] = x_new\n                    fitness[i] = fitness_new\n                    if fitness_new < best:\n                        best = fitness_new\n                if np.random.rand() < self.mutation_prob:\n                    new_population[i] = self_adaptive_mutate(new_population[i], f)\n                new_population[i] = chaotic_search(new_population[i], best, chaos_param)\n                new_population[i] = local_search(new_population[i], best)\n            return new_population, fitness, best\n\n        self.mutation_prob = self.mutation_control  # Adjusted mutation probability based on individual performance\n        return super().__call__(func)", "name": "EnhancedDynamicChaosDEAPSO", "description": "Enhance the algorithm by incorporating a dynamic chaos-driven mutation strategy based on individual performance for better exploration and diversity maintenance, utilizing a self-adaptive mechanism for mutation control.", "configspace": "", "generation": 99, "fitness": 0.17910740790064741, "feedback": "The algorithm EnhancedDynamicChaosDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "92c9b8fd-71bb-4ba6-80d7-55d18254f105", "metadata": {"aucs": [0.5037282551406961, 0.477771207893831, 0.44716109399694093, 0.480365458801293, 0.4169658419707175, 0.45676146264722106, 0.43972888913672337, 0.46637553517985053, 0.4673306896386441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07805866463275579, 0.07001296331998508, 0.08591132824669434, 0.07598662307647064, 0.06809846485096427, 0.09982084762651955, 0.0677708829525967, 0.07846594262045659, 0.06845813880836538, 0.06996814820527908, 0.07262626285522233, 0.06111692279403502, 0.07737159869607224, 0.04563611287197711, 0.06335570133286295, 0.05774893171797668, 0.0688255069945497, 0.04623901607173775, 0.9138341943776987, 0.9429602074074963, 0.893872814369609, 0.9749359619934233, 0.9249519838682835, 0.9805044748768662, 0.9287242716244355, 0.8848646773864597, 0.8421654060348411, 0.16326607225909595, 0.10862516814100176, 0.23799445493346483, 0.14440224379651367, 0.13001452021183946, 0.14247958424423124, 0.12520630318394377, 0.22678225178142952, 0.15889739648135237, 0.1529346184237289, 0.17511199584187143, 0.19778301329477987, 0.19793992986878883, 0.18649201720833886, 0.35042767112605366, 0.1893024560458456, 0.164515644529322, 0.19304611470267496, 0.17787117763093951, 0.12385325548202197, 0.12161543799753727, 0.15323230979539915, 0.14217081984879187, 0.15397455479693622, 0.13508732822638103, 0.1394114234262699, 0.12689120164277834, 0.146538421129221, 0.0771348994056783, 0.10775623265802237, 0.13804577193733603, 0.13608891541290036, 0.11725426465665145, 0.13060043985751202, 0.14427629523620067, 0.1410022292612665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09025948989622035, 0.06078373461455777, 0.09350648284078056, 0.08479374010677021, 0.04641821715815764, 0.04738818911524845, 0.06251037401196713, 0.0789144034432907, 0.07331593754886523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014149951659213622, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07567538442471233, 0.0961901183659788, 0.08532636831516704, 0.0357531945234163, 0.052095590323887, 0.07846797495225533, 0.06167996129126363, 0.06796320414461765, 0.08883155010584287, 0.36725068721373144, 0.36891806579247033, 0.3745007787136342, 0.39429361887307435, 0.36421559021247596, 0.4113255747240433, 0.3877093406983678, 0.3733416582853907, 0.3805473442766968, 0.09038784895065477, 0.07456935596444259, 0.06995580878463048, 0.0792623762272695, 0.07186179383821456, 0.07950923728118453, 0.07036523149068219, 0.07181543120689893, 0.07516665087833951, 0.15746101640845978, 0.1286679002686162, 0.13788570768934205, 0.14820580164172859, 0.13652904159324641, 0.1272380445566016, 0.13997076517990226, 0.1578839753100385, 0.15990244606751836, 0.1864876370915859, 0.21515400617102765, 0.19682145854829303, 0.19146345930385456, 0.2254731466766925, 0.24566286412967298, 0.21090598967987184, 0.23264290285986955, 0.18096762785075893, 0.1647021594749455, 0.14761781311448052, 0.1868010310922812, 0.15226051753586056, 0.16510273371813966, 0.1652356312155986, 0.16639376735218125, 0.18731650145267809, 0.13502874306913326, 0.18775614037132504, 0.1643593412192893, 0.16529824757082157, 0.18709708277842751, 0.20775208219556607, 0.17952357486125725, 0.1711473961476988, 0.19575910424153486, 0.19283779833981374, 0.17579392380722492, 0.16823937227362207, 0.17258418060105474, 0.186969169542755, 0.16616024408131447, 0.181012539339936, 0.1659812258489799, 0.1581577069675537, 0.162948751595951, 0.16355349031747135, 0.1665189935778293, 0.19877871853548013, 0.1687242094021989, 0.5137877450581783, 0.1696372264705398, 0.17164145104851924, 0.5774378816911958, 0.1910908601075847, 0.10056831109461672, 0.19590230341433257, 0.19421784515133245, 0.20197405128368096, 0.17835815033118274, 0.19233116066237577, 0.19662351327133976, 0.15714651553665393, 0.15029123866460958, 0.18674070326613323, 0.1759386632244334, 0.19546628474863126, 0.17534564566466748, 0.17613729950137746, 0.18926143252618677, 0.1858623212618461, 0.18361277168320278, 0.18169351975970616, 0.058397583492143856, 0.05672834986983122, 0.06620874157565282, 0.059226089901374124, 0.06468545626008415, 0.0548071319398743, 0.06832450161709602, 0.0592953926572658, 0.07633775887791616]}, "mutation_prompt": null}
