{"id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by the musical process of searching for a perfect state of harmony, incorporating memory considerations and randomness in the search process.", "configspace": "", "generation": 0, "fitness": 0.07847416376597556, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1956780150766152, 0.20980195439881666, 0.21976945459136188, 0.2263941482505516, 0.20578707980718525, 0.24426728618763172, 0.24106234285415962, 0.22132848900176705, 0.2601653157550171, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06366615037361023, 0.08100809515989116, 0.060805777483776136, 0.06618617921067593, 0.04493651871227866, 0.07058494574302732, 0.07227109730859815, 0.05674656897263397, 0.04935508107867825, 0.06656195889958294, 0.06314648024659886, 0.051309596799623436, 0.058159628198871216, 0.04937452712042645, 0.0649349967903341, 0.04736937252427764, 0.03950785610772478, 0.05515483948209399, 0.08487127819596896, 0.10672305891523048, 0.10841108699957547, 0.10918896889419938, 0.09987871223729294, 0.09874203644539303, 0.11136453414116199, 0.10212804350124804, 0.0984450692662121, 0.026739025817269058, 0.04747648633978918, 0.12066255176156959, 0.06278136942198931, 0.04298140256691496, 0.07170095058549941, 0.11553126731699725, 0.04923339815518435, 0.0086646011801913, 0.12544653889513668, 0.0767728599965225, 0.10277715126690179, 0.10286074687135316, 0.08064033818733407, 0.04398800384135959, 0.07143615985001028, 0.043024347509085015, 0.0845605929644937, 0.0012338035426715521, 0.011317346778000448, 0.019326947784617743, 0.0037510717061300936, 0.025984312870689252, 9.999999999998899e-05, 0.006659311863200901, 0.007085927410520165, 0.05007977389844109, 0.050585113055899966, 0.0005386751105296295, 0.0625526263381293, 0.02787360847346332, 0.015576427209637034, 0.047579218802085044, 0.02854503790944729, 9.999999999998899e-05, 0.07094152761682238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00696968662103481, 0.013603665017395516, 0.0388316139811945, 0.013767116541428703, 9.999999999998899e-05, 0.011258852054792823, 0.011365229275376088, 0.0007633874060926082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023486010735407348, 0.0009519676958383849, 0.04015973641384807, 0.005216200320404818, 0.005770712097473707, 0.02310849345347854, 0.002310189962247189, 0.028660568610945347, 0.00799971829199242, 0.20454702940274594, 0.17614710857333793, 0.20667968113651347, 0.22319453420262592, 0.19791252947377902, 0.20137629190330664, 0.16806680617945657, 0.20671031559412612, 0.2427516349860287, 0.041512705260646876, 0.0473469088488655, 0.03173276612531406, 0.03657835125494735, 0.03427276167046078, 0.060573244908288304, 0.03093604041598841, 0.03888627056026783, 0.047146983731645054, 0.0928118600170752, 0.09489918002006759, 0.15765033424803754, 0.11174938637803367, 0.0915104391760535, 0.08300235764120911, 0.10787549086006276, 0.08310023861133464, 0.07773218402287241, 0.11844087337980203, 0.18568991761663534, 0.11017371051745772, 0.1468590438265408, 0.1322838821495408, 0.16001183522426732, 0.12600059478793246, 0.14817956535031462, 0.09334180379590762, 0.09802672007567548, 0.12556791332335704, 0.06807599081824833, 0.0816134787942896, 0.11395791291419066, 0.08029319359566234, 0.06331149316451068, 0.09888210452880741, 0.058828044914483124, 0.13246153973254027, 0.14058762311725825, 0.16614924643410867, 0.15673817330356432, 0.12365912232783738, 0.12579574224205992, 0.158933105499115, 0.12576027391219635, 0.15056725556617256, 0.15352854066815746, 0.11204210881259513, 0.16191557695280367, 0.1456405068573705, 0.14175235700223565, 0.09714731379219632, 0.10804442134482128, 0.11215535071875571, 0.095376352103273, 0.12917509271418293, 0.07034510521701032, 0.12117547656944172, 0.15493252733616647, 0.17098785880090162, 0.12996644610977603, 0.09247878966909306, 0.10019117945718714, 0.09958594052050374, 0.07281964489156012, 0.07771866623378643, 0.07449701041103074, 0.0460121073754759, 0.13177221174087206, 0.07373852669813585, 0.09002432690156781, 0.055927163540148817, 0.08279632172972962, 0.15459060589533635, 0.15582800124663898, 0.16182078971574543, 0.13749376298643456, 0.16392743170020152, 0.14555781734258322, 0.1457802511019567, 0.13462631859441554, 0.18107295865888606, 0.0347120943644299, 0.03482249809888749, 0.04138728894420396, 0.04082801490772614, 0.057938424403998434, 0.028542289697621293, 0.04044503592196402, 0.03660994695503372, 0.0376145161832504]}, "mutation_prompt": null}
{"id": "274a1dd6-4df1-41b4-bf29-9039ecc5c4e3", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=[0.001, 0.1]):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth * np.exp(0.1 * (np.random.rand() - 0.5)), self.bandwidth_range[0], self.bandwidth_range[1])\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search algorithm with adaptive bandwidth adjustment for better exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.06916710622883973, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {"aucs": [0.13926706606185402, 0.2566912376054543, 0.1438872767820356, 0.08627745418589639, 0.24777452816886802, 0.09034115145305677, 0.1569906298195639, 0.2578570079580975, 0.13142988006405798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050408202804141045, 0.07754155483933178, 0.02862986398471712, 0.027630550264128972, 0.11974557094960869, 0.0052928232458225866, 0.04760197380279574, 0.08089364228887952, 0.02611369318986745, 0.036349993192326346, 0.0693299333386389, 0.023022674747634864, 0.04576904231945811, 0.05996528200159479, 0.0036614610089378274, 0.023029794640930912, 0.08111957285917726, 0.0015946479140389602, 0.09121374206167088, 0.11179177079616598, 0.0737304839257511, 0.07520383924402108, 0.11236536401479846, 0.06900646159862522, 0.07573164461042725, 0.11242144060251247, 0.06893702779408417, 0.03155419419113825, 0.06275568190228609, 0.019773856771387543, 0.004747963920355369, 0.10691483103187416, 0.04067562893252741, 0.0820883034455292, 0.07069306238367312, 0.01148909739646864, 0.13580178630717632, 0.07837481130116608, 0.07719776650397525, 0.05460738938416021, 0.13026146457566612, 0.07944911820630263, 0.05566277922741647, 0.10682415461254624, 0.10182350210427327, 9.999999999998899e-05, 0.004379938498054625, 9.999999999998899e-05, 0.05153974798722594, 0.060139455974760114, 9.999999999998899e-05, 0.00010651684119478144, 0.037876564993126194, 9.999999999998899e-05, 0.03103132348131854, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004044965816286661, 0.04351970507660741, 0.0019333393578595537, 0.04626454149701387, 9.999999999998899e-05, 0.04657336098013842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0039343785393539665, 0.014859100072641906, 9.999999999998899e-05, 0.00572962192124582, 0.0013178662726233137, 0.00042956616140577, 0.0008799385398163828, 0.0873447335541836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001074888050207612, 0.00396203021413255, 9.999999999998899e-05, 0.006421292394118816, 0.008357539097998745, 9.999999999998899e-05, 0.004660078779887389, 0.006178818033633959, 9.999999999998899e-05, 0.1431773104405598, 0.20670232661044852, 0.18819544180749304, 0.15910364824457068, 0.22787141955867296, 0.13215818429286885, 0.15336734122570217, 0.21377656077994744, 0.19683436573018276, 0.039957955582694216, 0.040862610074009376, 0.000530864426150246, 0.009594067152467134, 0.03025209762156722, 0.045060891195580544, 0.028058452720243987, 0.032567968277021464, 0.03162730853708162, 0.0738050895999981, 0.10136573211986777, 0.13356667809640133, 0.09940685506114155, 0.1435031489830786, 0.06285665223051495, 0.0852249773266398, 0.11708371092502368, 0.07722957386607887, 0.13669130542613306, 0.22526851784690793, 0.13017744852193447, 0.1573539303233592, 0.15602687681324878, 0.1358966557905611, 0.1254698362693638, 0.14305118714560927, 0.09732265968380993, 0.07125612374025081, 0.16750945415690133, 0.05469295364034621, 0.07627137135742634, 0.08157100349512858, 0.054963973764920904, 0.06029007146939147, 0.12115312414399637, 0.05740979057469009, 0.1264318869183818, 0.1325660962769365, 0.11816199320668785, 0.12747015187149957, 0.12386917529341024, 0.10965165969299051, 0.15626948613578284, 0.13703380695746548, 0.12616161407899285, 0.12574156921358914, 0.15370144407795028, 0.007589024591028282, 0.060333000801150005, 0.12954294595229554, 9.999999999998899e-05, 0.027441998705683757, 0.1356599708873094, 0.10537361840554316, 0.10439039197611832, 0.10072660990672633, 0.07364144512304971, 0.1103611696022897, 0.1746622484026653, 0.07874155016671591, 0.10332631922414581, 0.10236643101256593, 0.0897598791879678, 0.0750484358690614, 0.07136682728615162, 0.056312924512277096, 0.06730968078634214, 0.17286569053157708, 0.10770969604656477, 0.050870978841164094, 0.13592803959416944, 0.07164379488661743, 0.14354742413747623, 0.13287116509627794, 0.14761472646540152, 0.13424533156306206, 0.14549311952605093, 0.12464023871537233, 0.1603807158156082, 0.14020666545294314, 0.14684555899005758, 0.03140755318452726, 0.04086180622894975, 0.04194545863747534, 0.06179457303499125, 0.04567483271474959, 0.018193128877633358, 0.031201228967008166, 0.05150468687255505, 0.03328513923931664]}, "mutation_prompt": null}
{"id": "d92f6fb1-3267-4e9f-a4c1-5ea7916120cf", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch(HarmonySearch):\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_bandwidth=0.01, bandwidth_decay=0.95):\n        super().__init__(budget, dim, harmony_memory_size, initial_bandwidth)\n        self.bandwidth_decay = bandwidth_decay\n\n    def __call__(self, func):\n        def improvise(harmony_memory, bandwidth):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        harmony_memory = self.initialize_harmony_memory()\n        bandwidth = self.bandwidth\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory, bandwidth)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = self.update_harmony_memory(harmony_memory, new_solution)\n\n            bandwidth *= self.bandwidth_decay\n            bandwidth = max(bandwidth, 0.001)  # Ensure minimum bandwidth\n\n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search algorithm by introducing dynamic bandwidth adaptation during improvisation to improve exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedHarmonySearch' object has no attribute 'initialize_harmony_memory'\").", "error": "AttributeError(\"'EnhancedHarmonySearch' object has no attribute 'initialize_harmony_memory'\")", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {}, "mutation_prompt": null}
{"id": "4dc48b45-db9f-4875-ab6d-8647a6737375", "solution": "import numpy as np\n\nclass DynamicBandwidthHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_min=0.001, bandwidth_max=0.1, bandwidth_decay=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_min = bandwidth_min\n        self.bandwidth_max = bandwidth_max\n        self.bandwidth_decay = bandwidth_decay\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n\n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n\n            # Dynamic bandwidth adjustment\n            self.bandwidth = max(self.bandwidth * self.bandwidth_decay, self.bandwidth_min)\n\n        return harmony_memory[0]", "name": "DynamicBandwidthHarmonySearch", "description": "Enhancing Harmony Search by introducing dynamic bandwidth adjustment for improved exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": 0.04197523042236805, "feedback": "The algorithm DynamicBandwidthHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {"aucs": [0.08270043183689102, 0.06495047977569124, 0.09873612484871341, 0.1301497802832664, 0.05638146514656206, 0.046807094719618414, 0.10555399594282977, 0.1253266177978679, 0.09078462143057897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017617236930882574, 0.025450899980845487, 0.02248313554618575, 0.007342085418715172, 0.0014283097195840755, 0.0008815370086747709, 0.02973289954453262, 0.001661535254553037, 0.007536946548244106, 9.999999999998899e-05, 9.999999999998899e-05, 0.014768350488286508, 0.028635159374590824, 9.999999999998899e-05, 0.0004702169397420297, 0.008126711662376884, 0.0022209895734449647, 0.00015805464927687307, 0.07375299822338988, 0.05123494918160376, 0.0620742020479198, 0.07302158147688009, 0.053653513707492495, 0.05680997267988841, 0.07144122534914155, 0.05757727508317134, 0.05256615181237301, 0.0139582778300964, 0.006778262174221394, 0.003970476267008416, 9.999999999998899e-05, 0.0019111405399384607, 0.004172564190499051, 0.08327841174856165, 0.01712449207431166, 9.999999999998899e-05, 0.10291813870138689, 0.03778610253771475, 0.020921985221011297, 0.04632208585138575, 0.00013849728776516024, 0.03262702884003865, 0.027755276032550902, 9.999999999998899e-05, 0.033316604243896486, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015490969331495297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1270954661698661, 0.13731363913011152, 0.18736487678020508, 0.14518654812529952, 0.11442753139668838, 0.09585434463712372, 0.1241989910538519, 0.09993161901808412, 0.12868221440292926, 0.02321505744156982, 9.999999999998899e-05, 0.000396829619585648, 0.006107176545363302, 0.007056415710103847, 0.03748917528926976, 0.03301944531938916, 9.999999999998899e-05, 0.038433602350187, 0.0703786599185896, 0.06879294921579315, 0.057053546164385294, 0.09851365846536009, 0.06581147714910274, 0.0605053182183064, 0.06216046768551764, 0.049131173259502225, 0.0772184578107794, 0.11776544205113149, 0.14127991264231166, 0.10631951986467414, 0.1319037233621877, 0.10613973818235756, 0.11234346293029285, 0.11843747830633389, 0.11331319160276365, 0.0858485188479261, 0.06398597075241796, 0.0778282170599447, 0.04134178606259409, 0.07630454602815095, 0.05233497695562328, 0.06105801113854792, 0.056453156984066166, 0.07267422777322519, 0.03625222840481912, 0.12113971705936488, 0.07439999760537519, 0.11396975188881275, 0.10875462860631746, 0.08499314881199338, 0.1171009631839579, 0.12282666595343306, 0.09567536059985637, 0.12656019833771792, 9.999999999998899e-05, 9.999999999998899e-05, 0.05011122926088496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07526288750020416, 9.999999999998899e-05, 0.08159602337292782, 0.05986015101589526, 0.07223723997734, 0.10409389504767008, 0.12069214407866935, 0.07492014549282922, 0.0763319390165994, 0.0873234895289493, 0.06545590191251927, 0.061770748602755554, 0.07627506120656802, 0.02640118879984965, 0.03168711575153593, 0.0685983823448234, 0.04649796433994069, 0.035940194697121064, 0.05545005865784547, 0.04144735813483513, 0.14165107087483997, 0.12109641987167452, 0.14761056389492533, 0.12210733000781437, 0.11487891661956295, 0.13141015324469085, 0.13761976461785452, 0.10940458954556798, 0.1469102976536939, 0.025822196233297845, 0.020202522457571703, 0.0314063519727622, 0.011239530283328136, 0.006775535950429679, 0.02223601868070635, 0.013041158345187043, 0.02052827899849541, 0.014147780908820295]}, "mutation_prompt": null}
{"id": "6364ff9e-a5e8-4611-8ff8-d62d481be05e", "solution": "import numpy as np\n\nclass DynamicBandwidthHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_bandwidth=0.01, bandwidth_decay=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.initial_bandwidth = initial_bandwidth\n        self.bandwidth_decay = bandwidth_decay\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory, bandwidth):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        bandwidth = self.initial_bandwidth\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory, bandwidth)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n            bandwidth *= self.bandwidth_decay\n        \n        return harmony_memory[0]", "name": "DynamicBandwidthHarmonySearch", "description": "Enhancing Harmony Search by incorporating dynamic bandwidth adjustment based on convergence", "configspace": "", "generation": 4, "fitness": 0.031669916512360174, "feedback": "The algorithm DynamicBandwidthHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.04.", "error": "", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {"aucs": [0.07782407582921769, 0.06428650714530926, 0.0823794061841916, 0.0334529407797467, 0.05261136135444755, 0.04232903452405046, 0.05138497539486142, 0.0516267765883589, 0.06710447086031657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014667880433046232, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012173085517857007, 9.999999999998899e-05, 0.026804692450587808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019584109309318087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04517271571448567, 0.03363776509518723, 0.04286921224027718, 0.03908422136857137, 0.04682890834168685, 0.043220173010141694, 0.03788269290330115, 0.048938359102710605, 0.03699625409558904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031528102541322767, 9.999999999998899e-05, 0.06134019236981836, 0.011291093459621204, 9.999999999998899e-05, 0.10023674149328321, 0.03778610253771475, 0.006491308320532019, 0.004560432796771208, 9.999999999998899e-05, 9.999999999998899e-05, 0.026268829791731285, 9.999999999998899e-05, 0.00990601666191182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07839693847778872, 0.10700744368242354, 0.14837445648140857, 0.09422509055791928, 0.08046296879726578, 0.09585434463712372, 0.12408185305374586, 0.09717775218658375, 0.12105767020109237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006107176545363302, 9.999999999998899e-05, 0.02825375651628459, 9.999999999998899e-05, 9.999999999998899e-05, 0.026760334164489863, 0.0703786599185896, 0.06730723644018488, 0.05467197627543319, 0.09851365846536009, 0.06581147714910274, 0.05642729912376876, 0.054971115899821066, 0.048569395727607434, 0.0772184578107794, 0.09606144259730298, 0.09624312305482641, 0.10359567284638338, 0.10844960871834919, 0.08299071431740945, 0.08327433881005308, 0.11417661490700082, 0.1001266414367663, 0.07785225673488783, 0.03331997220204452, 0.030841468819267304, 0.03464093939913415, 0.0446328663116099, 0.01547739310513585, 0.03714635871791505, 0.056453156984066166, 0.03852238331208313, 0.011879002625706181, 0.09699969980496626, 0.06033606067126329, 0.11092456082458779, 0.10286270560349098, 0.06746202645163901, 0.08177561155163837, 0.12243744026705572, 0.06493580227796936, 0.1262200278365151, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05749830031304648, 0.0561346414718239, 0.05625509682820862, 0.06715872579267779, 0.12069214407866935, 0.06174282351006899, 0.060910483728084386, 0.05659965821041202, 0.05366958689742696, 0.038233821502972054, 0.03966312777938985, 0.017366110874238117, 0.018601904126938407, 0.021595517639605877, 0.04550449004614221, 0.018965849839618576, 0.015833865732024388, 0.04144735813483513, 0.10095044399997677, 0.12016399039927861, 0.14761056389492533, 0.10734320464879132, 0.1140420046313726, 0.12463538079712777, 0.11666622152699913, 0.10865588443665053, 0.1469102976536939, 0.002976435099140473, 0.01219107085442317, 0.0314063519727622, 9.999999999998899e-05, 0.0058692106073962025, 0.008266109691283052, 0.0037855041994553362, 9.999999999998899e-05, 0.01168899371514931]}, "mutation_prompt": null}
{"id": "fa766788-aa28-45f2-b186-3b5ea865a545", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by the musical process of searching for a perfect state of harmony, incorporating memory considerations and randomness in the search process.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {"aucs": [0.1956780150766152, 0.20980195439881666, 0.21976945459136188, 0.2263941482505516, 0.20578707980718525, 0.24426728618763172, 0.24106234285415962, 0.22132848900176705, 0.2601653157550171, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06366615037361023, 0.08100809515989116, 0.060805777483776136, 0.06618617921067593, 0.04493651871227866, 0.07058494574302732, 0.07227109730859815, 0.05674656897263397, 0.04935508107867825, 0.06656195889958294, 0.06314648024659886, 0.051309596799623436, 0.058159628198871216, 0.04937452712042645, 0.0649349967903341, 0.04736937252427764, 0.03950785610772478, 0.05515483948209399, 0.08487127819596896, 0.10672305891523048, 0.10841108699957547, 0.10918896889419938, 0.09987871223729294, 0.09874203644539303, 0.11136453414116199, 0.10212804350124804, 0.0984450692662121, 0.026739025817269058, 0.04747648633978918, 0.12066255176156959, 0.06278136942198931, 0.04298140256691496, 0.07170095058549941, 0.11553126731699725, 0.04923339815518435, 0.0086646011801913, 0.12544653889513668, 0.0767728599965225, 0.10277715126690179, 0.10286074687135316, 0.08064033818733407, 0.04398800384135959, 0.07143615985001028, 0.043024347509085015, 0.0845605929644937, 0.0012338035426715521, 0.011317346778000448, 0.019326947784617743, 0.0037510717061300936, 0.025984312870689252, 9.999999999998899e-05, 0.006659311863200901, 0.007085927410520165, 0.05007977389844109, 0.050585113055899966, 0.0005386751105296295, 0.0625526263381293, 0.02787360847346332, 0.015576427209637034, 0.047579218802085044, 0.02854503790944729, 9.999999999998899e-05, 0.07094152761682238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00696968662103481, 0.013603665017395516, 0.0388316139811945, 0.013767116541428703, 9.999999999998899e-05, 0.011258852054792823, 0.011365229275376088, 0.0007633874060926082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023486010735407348, 0.0009519676958383849, 0.04015973641384807, 0.005216200320404818, 0.005770712097473707, 0.02310849345347854, 0.002310189962247189, 0.028660568610945347, 0.00799971829199242, 0.20454702940274594, 0.17614710857333793, 0.20667968113651347, 0.22319453420262592, 0.19791252947377902, 0.20137629190330664, 0.16806680617945657, 0.20671031559412612, 0.2427516349860287, 0.041512705260646876, 0.0473469088488655, 0.03173276612531406, 0.03657835125494735, 0.03427276167046078, 0.060573244908288304, 0.03093604041598841, 0.03888627056026783, 0.047146983731645054, 0.0928118600170752, 0.09489918002006759, 0.15765033424803754, 0.11174938637803367, 0.0915104391760535, 0.08300235764120911, 0.10787549086006276, 0.08310023861133464, 0.07773218402287241, 0.11844087337980203, 0.18568991761663534, 0.11017371051745772, 0.1468590438265408, 0.1322838821495408, 0.16001183522426732, 0.12600059478793246, 0.14817956535031462, 0.09334180379590762, 0.09802672007567548, 0.12556791332335704, 0.06807599081824833, 0.0816134787942896, 0.11395791291419066, 0.08029319359566234, 0.06331149316451068, 0.09888210452880741, 0.058828044914483124, 0.13246153973254027, 0.14058762311725825, 0.16614924643410867, 0.15673817330356432, 0.12365912232783738, 0.12579574224205992, 0.158933105499115, 0.12576027391219635, 0.15056725556617256, 0.15352854066815746, 0.11204210881259513, 0.16191557695280367, 0.1456405068573705, 0.14175235700223565, 0.09714731379219632, 0.10804442134482128, 0.11215535071875571, 0.095376352103273, 0.12917509271418293, 0.07034510521701032, 0.12117547656944172, 0.15493252733616647, 0.17098785880090162, 0.12996644610977603, 0.09247878966909306, 0.10019117945718714, 0.09958594052050374, 0.07281964489156012, 0.07771866623378643, 0.07449701041103074, 0.0460121073754759, 0.13177221174087206, 0.07373852669813585, 0.09002432690156781, 0.055927163540148817, 0.08279632172972962, 0.15459060589533635, 0.15582800124663898, 0.16182078971574543, 0.13749376298643456, 0.16392743170020152, 0.14555781734258322, 0.1457802511019567, 0.13462631859441554, 0.18107295865888606, 0.0347120943644299, 0.03482249809888749, 0.04138728894420396, 0.04082801490772614, 0.057938424403998434, 0.028542289697621293, 0.04044503592196402, 0.03660994695503372, 0.0376145161832504]}, "mutation_prompt": null}
{"id": "c399d573-25d3-4d25-93d5-b375eb2470e1", "solution": "import numpy as np\n\nclass DynamicBandwidthHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_bandwidth=0.01, bandwidth_decay=0.95, bandwidth_min=0.001):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = initial_bandwidth\n        self.bandwidth_decay = bandwidth_decay\n        self.bandwidth_min = bandwidth_min\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n            self.bandwidth = max(self.bandwidth * self.bandwidth_decay, self.bandwidth_min)\n        \n        return harmony_memory[0]", "name": "DynamicBandwidthHarmonySearch", "description": "Enhancing Harmony Search Algorithm by introducing a dynamic bandwidth adjustment mechanism to balance exploration and exploitation during the search process.", "configspace": "", "generation": 6, "fitness": 0.04197523042236805, "feedback": "The algorithm DynamicBandwidthHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {"aucs": [0.08270043183689102, 0.06495047977569124, 0.09873612484871341, 0.1301497802832664, 0.05638146514656206, 0.046807094719618414, 0.10555399594282977, 0.1253266177978679, 0.09078462143057897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017617236930882574, 0.025450899980845487, 0.02248313554618575, 0.007342085418715172, 0.0014283097195840755, 0.0008815370086747709, 0.02973289954453262, 0.001661535254553037, 0.007536946548244106, 9.999999999998899e-05, 9.999999999998899e-05, 0.014768350488286508, 0.028635159374590824, 9.999999999998899e-05, 0.0004702169397420297, 0.008126711662376884, 0.0022209895734449647, 0.00015805464927687307, 0.07375299822338988, 0.05123494918160376, 0.0620742020479198, 0.07302158147688009, 0.053653513707492495, 0.05680997267988841, 0.07144122534914155, 0.05757727508317134, 0.05256615181237301, 0.0139582778300964, 0.006778262174221394, 0.003970476267008416, 9.999999999998899e-05, 0.0019111405399384607, 0.004172564190499051, 0.08327841174856165, 0.01712449207431166, 9.999999999998899e-05, 0.10291813870138689, 0.03778610253771475, 0.020921985221011297, 0.04632208585138575, 0.00013849728776516024, 0.03262702884003865, 0.027755276032550902, 9.999999999998899e-05, 0.033316604243896486, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015490969331495297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1270954661698661, 0.13731363913011152, 0.18736487678020508, 0.14518654812529952, 0.11442753139668838, 0.09585434463712372, 0.1241989910538519, 0.09993161901808412, 0.12868221440292926, 0.02321505744156982, 9.999999999998899e-05, 0.000396829619585648, 0.006107176545363302, 0.007056415710103847, 0.03748917528926976, 0.03301944531938916, 9.999999999998899e-05, 0.038433602350187, 0.0703786599185896, 0.06879294921579315, 0.057053546164385294, 0.09851365846536009, 0.06581147714910274, 0.0605053182183064, 0.06216046768551764, 0.049131173259502225, 0.0772184578107794, 0.11776544205113149, 0.14127991264231166, 0.10631951986467414, 0.1319037233621877, 0.10613973818235756, 0.11234346293029285, 0.11843747830633389, 0.11331319160276365, 0.0858485188479261, 0.06398597075241796, 0.0778282170599447, 0.04134178606259409, 0.07630454602815095, 0.05233497695562328, 0.06105801113854792, 0.056453156984066166, 0.07267422777322519, 0.03625222840481912, 0.12113971705936488, 0.07439999760537519, 0.11396975188881275, 0.10875462860631746, 0.08499314881199338, 0.1171009631839579, 0.12282666595343306, 0.09567536059985637, 0.12656019833771792, 9.999999999998899e-05, 9.999999999998899e-05, 0.05011122926088496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07526288750020416, 9.999999999998899e-05, 0.08159602337292782, 0.05986015101589526, 0.07223723997734, 0.10409389504767008, 0.12069214407866935, 0.07492014549282922, 0.0763319390165994, 0.0873234895289493, 0.06545590191251927, 0.061770748602755554, 0.07627506120656802, 0.02640118879984965, 0.03168711575153593, 0.0685983823448234, 0.04649796433994069, 0.035940194697121064, 0.05545005865784547, 0.04144735813483513, 0.14165107087483997, 0.12109641987167452, 0.14761056389492533, 0.12210733000781437, 0.11487891661956295, 0.13141015324469085, 0.13761976461785452, 0.10940458954556798, 0.1469102976536939, 0.025822196233297845, 0.020202522457571703, 0.0314063519727622, 0.011239530283328136, 0.006775535950429679, 0.02223601868070635, 0.013041158345187043, 0.02052827899849541, 0.014147780908820295]}, "mutation_prompt": null}
{"id": "a978bd6c-a580-4674-8b3c-630cf877759e", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by the musical process of searching for a perfect state of harmony, incorporating memory considerations and randomness in the search process.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {"aucs": [0.1956780150766152, 0.20980195439881666, 0.21976945459136188, 0.2263941482505516, 0.20578707980718525, 0.24426728618763172, 0.24106234285415962, 0.22132848900176705, 0.2601653157550171, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06366615037361023, 0.08100809515989116, 0.060805777483776136, 0.06618617921067593, 0.04493651871227866, 0.07058494574302732, 0.07227109730859815, 0.05674656897263397, 0.04935508107867825, 0.06656195889958294, 0.06314648024659886, 0.051309596799623436, 0.058159628198871216, 0.04937452712042645, 0.0649349967903341, 0.04736937252427764, 0.03950785610772478, 0.05515483948209399, 0.08487127819596896, 0.10672305891523048, 0.10841108699957547, 0.10918896889419938, 0.09987871223729294, 0.09874203644539303, 0.11136453414116199, 0.10212804350124804, 0.0984450692662121, 0.026739025817269058, 0.04747648633978918, 0.12066255176156959, 0.06278136942198931, 0.04298140256691496, 0.07170095058549941, 0.11553126731699725, 0.04923339815518435, 0.0086646011801913, 0.12544653889513668, 0.0767728599965225, 0.10277715126690179, 0.10286074687135316, 0.08064033818733407, 0.04398800384135959, 0.07143615985001028, 0.043024347509085015, 0.0845605929644937, 0.0012338035426715521, 0.011317346778000448, 0.019326947784617743, 0.0037510717061300936, 0.025984312870689252, 9.999999999998899e-05, 0.006659311863200901, 0.007085927410520165, 0.05007977389844109, 0.050585113055899966, 0.0005386751105296295, 0.0625526263381293, 0.02787360847346332, 0.015576427209637034, 0.047579218802085044, 0.02854503790944729, 9.999999999998899e-05, 0.07094152761682238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00696968662103481, 0.013603665017395516, 0.0388316139811945, 0.013767116541428703, 9.999999999998899e-05, 0.011258852054792823, 0.011365229275376088, 0.0007633874060926082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023486010735407348, 0.0009519676958383849, 0.04015973641384807, 0.005216200320404818, 0.005770712097473707, 0.02310849345347854, 0.002310189962247189, 0.028660568610945347, 0.00799971829199242, 0.20454702940274594, 0.17614710857333793, 0.20667968113651347, 0.22319453420262592, 0.19791252947377902, 0.20137629190330664, 0.16806680617945657, 0.20671031559412612, 0.2427516349860287, 0.041512705260646876, 0.0473469088488655, 0.03173276612531406, 0.03657835125494735, 0.03427276167046078, 0.060573244908288304, 0.03093604041598841, 0.03888627056026783, 0.047146983731645054, 0.0928118600170752, 0.09489918002006759, 0.15765033424803754, 0.11174938637803367, 0.0915104391760535, 0.08300235764120911, 0.10787549086006276, 0.08310023861133464, 0.07773218402287241, 0.11844087337980203, 0.18568991761663534, 0.11017371051745772, 0.1468590438265408, 0.1322838821495408, 0.16001183522426732, 0.12600059478793246, 0.14817956535031462, 0.09334180379590762, 0.09802672007567548, 0.12556791332335704, 0.06807599081824833, 0.0816134787942896, 0.11395791291419066, 0.08029319359566234, 0.06331149316451068, 0.09888210452880741, 0.058828044914483124, 0.13246153973254027, 0.14058762311725825, 0.16614924643410867, 0.15673817330356432, 0.12365912232783738, 0.12579574224205992, 0.158933105499115, 0.12576027391219635, 0.15056725556617256, 0.15352854066815746, 0.11204210881259513, 0.16191557695280367, 0.1456405068573705, 0.14175235700223565, 0.09714731379219632, 0.10804442134482128, 0.11215535071875571, 0.095376352103273, 0.12917509271418293, 0.07034510521701032, 0.12117547656944172, 0.15493252733616647, 0.17098785880090162, 0.12996644610977603, 0.09247878966909306, 0.10019117945718714, 0.09958594052050374, 0.07281964489156012, 0.07771866623378643, 0.07449701041103074, 0.0460121073754759, 0.13177221174087206, 0.07373852669813585, 0.09002432690156781, 0.055927163540148817, 0.08279632172972962, 0.15459060589533635, 0.15582800124663898, 0.16182078971574543, 0.13749376298643456, 0.16392743170020152, 0.14555781734258322, 0.1457802511019567, 0.13462631859441554, 0.18107295865888606, 0.0347120943644299, 0.03482249809888749, 0.04138728894420396, 0.04082801490772614, 0.057938424403998434, 0.028542289697621293, 0.04044503592196402, 0.03660994695503372, 0.0376145161832504]}, "mutation_prompt": null}
{"id": "9284fd30-b262-4d7b-9575-563ab6fef65f", "solution": "import numpy as np\n\nclass DynamicBandwidthHarmonySearch(HarmonySearch):\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_bandwidth=0.01, bandwidth_decay=0.95):\n        super().__init__(budget, dim, harmony_memory_size, initial_bandwidth)\n        self.bandwidth_decay = bandwidth_decay\n    \n    def __call__(self, func):\n        def improvise(harmony_memory, current_bandwidth):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < current_bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = self.initialize_harmony_memory()\n        current_bandwidth = self.bandwidth\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory, current_bandwidth)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = self.update_harmony_memory(harmony_memory, new_solution)\n            current_bandwidth *= self.bandwidth_decay\n        \n        return harmony_memory[0]", "name": "DynamicBandwidthHarmonySearch", "description": "Enhancing Harmony Search algorithm with dynamic bandwidth adaptation to balance exploration and exploitation.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicBandwidthHarmonySearch' object has no attribute 'initialize_harmony_memory'\").", "error": "AttributeError(\"'DynamicBandwidthHarmonySearch' object has no attribute 'initialize_harmony_memory'\")", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {}, "mutation_prompt": null}
{"id": "1edd4034-4c66-4965-89cf-a5ca6fd34833", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch(HarmonySearch):\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth_range=(0.01, 0.1)):\n        super().__init__(budget, dim, harmony_memory_size, bandwidth_range[0])\n        self.bandwidth_range = bandwidth_range\n\n    def __call__(self, func):\n        def improvise(harmony_memory, bandwidth):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        harmony_memory = self.initialize_harmony_memory()\n        for _ in range(self.budget):\n            bandwidth = self.bandwidth_range[0] + (_ / self.budget) * (self.bandwidth_range[1] - self.bandwidth_range[0])\n            new_solution = improvise(harmony_memory, bandwidth)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = self.update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search algorithm by incorporating adaptive bandwidth control to dynamically adjust exploration-exploitation trade-off during optimization.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedHarmonySearch' object has no attribute 'initialize_harmony_memory'\").", "error": "AttributeError(\"'EnhancedHarmonySearch' object has no attribute 'initialize_harmony_memory'\")", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {}, "mutation_prompt": null}
{"id": "b61a1f70-6b07-4aec-938b-ff2aacacfb0e", "solution": "import numpy as np\n\nclass DynamicHarmonySearch(HarmonySearch):\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_bandwidth=0.01, bandwidth_decay=0.95):\n        super().__init__(budget, dim, harmony_memory_size, initial_bandwidth)\n        self.bandwidth_decay = bandwidth_decay\n\n    def __call__(self, func):\n        def improvise(harmony_memory, bandwidth):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n\n        harmony_memory = self.initialize_harmony_memory()\n        bandwidth = self.bandwidth\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory, bandwidth)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = self.update_harmony_memory(harmony_memory, new_solution)\n                bandwidth *= self.bandwidth_decay\n\n        return harmony_memory[0]", "name": "DynamicHarmonySearch", "description": "Enhancing Harmony Search algorithm by incorporating dynamic bandwidth adaptation based on function landscape exploration.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicHarmonySearch' object has no attribute 'initialize_harmony_memory'\").", "error": "AttributeError(\"'DynamicHarmonySearch' object has no attribute 'initialize_harmony_memory'\")", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {}, "mutation_prompt": null}
{"id": "af032588-df37-4857-99b4-5350c260743d", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm - A metaheuristic algorithm inspired by the musical process of searching for a perfect state of harmony, incorporating memory considerations and randomness in the search process.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {"aucs": [0.1956780150766152, 0.20980195439881666, 0.21976945459136188, 0.2263941482505516, 0.20578707980718525, 0.24426728618763172, 0.24106234285415962, 0.22132848900176705, 0.2601653157550171, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06366615037361023, 0.08100809515989116, 0.060805777483776136, 0.06618617921067593, 0.04493651871227866, 0.07058494574302732, 0.07227109730859815, 0.05674656897263397, 0.04935508107867825, 0.06656195889958294, 0.06314648024659886, 0.051309596799623436, 0.058159628198871216, 0.04937452712042645, 0.0649349967903341, 0.04736937252427764, 0.03950785610772478, 0.05515483948209399, 0.08487127819596896, 0.10672305891523048, 0.10841108699957547, 0.10918896889419938, 0.09987871223729294, 0.09874203644539303, 0.11136453414116199, 0.10212804350124804, 0.0984450692662121, 0.026739025817269058, 0.04747648633978918, 0.12066255176156959, 0.06278136942198931, 0.04298140256691496, 0.07170095058549941, 0.11553126731699725, 0.04923339815518435, 0.0086646011801913, 0.12544653889513668, 0.0767728599965225, 0.10277715126690179, 0.10286074687135316, 0.08064033818733407, 0.04398800384135959, 0.07143615985001028, 0.043024347509085015, 0.0845605929644937, 0.0012338035426715521, 0.011317346778000448, 0.019326947784617743, 0.0037510717061300936, 0.025984312870689252, 9.999999999998899e-05, 0.006659311863200901, 0.007085927410520165, 0.05007977389844109, 0.050585113055899966, 0.0005386751105296295, 0.0625526263381293, 0.02787360847346332, 0.015576427209637034, 0.047579218802085044, 0.02854503790944729, 9.999999999998899e-05, 0.07094152761682238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00696968662103481, 0.013603665017395516, 0.0388316139811945, 0.013767116541428703, 9.999999999998899e-05, 0.011258852054792823, 0.011365229275376088, 0.0007633874060926082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023486010735407348, 0.0009519676958383849, 0.04015973641384807, 0.005216200320404818, 0.005770712097473707, 0.02310849345347854, 0.002310189962247189, 0.028660568610945347, 0.00799971829199242, 0.20454702940274594, 0.17614710857333793, 0.20667968113651347, 0.22319453420262592, 0.19791252947377902, 0.20137629190330664, 0.16806680617945657, 0.20671031559412612, 0.2427516349860287, 0.041512705260646876, 0.0473469088488655, 0.03173276612531406, 0.03657835125494735, 0.03427276167046078, 0.060573244908288304, 0.03093604041598841, 0.03888627056026783, 0.047146983731645054, 0.0928118600170752, 0.09489918002006759, 0.15765033424803754, 0.11174938637803367, 0.0915104391760535, 0.08300235764120911, 0.10787549086006276, 0.08310023861133464, 0.07773218402287241, 0.11844087337980203, 0.18568991761663534, 0.11017371051745772, 0.1468590438265408, 0.1322838821495408, 0.16001183522426732, 0.12600059478793246, 0.14817956535031462, 0.09334180379590762, 0.09802672007567548, 0.12556791332335704, 0.06807599081824833, 0.0816134787942896, 0.11395791291419066, 0.08029319359566234, 0.06331149316451068, 0.09888210452880741, 0.058828044914483124, 0.13246153973254027, 0.14058762311725825, 0.16614924643410867, 0.15673817330356432, 0.12365912232783738, 0.12579574224205992, 0.158933105499115, 0.12576027391219635, 0.15056725556617256, 0.15352854066815746, 0.11204210881259513, 0.16191557695280367, 0.1456405068573705, 0.14175235700223565, 0.09714731379219632, 0.10804442134482128, 0.11215535071875571, 0.095376352103273, 0.12917509271418293, 0.07034510521701032, 0.12117547656944172, 0.15493252733616647, 0.17098785880090162, 0.12996644610977603, 0.09247878966909306, 0.10019117945718714, 0.09958594052050374, 0.07281964489156012, 0.07771866623378643, 0.07449701041103074, 0.0460121073754759, 0.13177221174087206, 0.07373852669813585, 0.09002432690156781, 0.055927163540148817, 0.08279632172972962, 0.15459060589533635, 0.15582800124663898, 0.16182078971574543, 0.13749376298643456, 0.16392743170020152, 0.14555781734258322, 0.1457802511019567, 0.13462631859441554, 0.18107295865888606, 0.0347120943644299, 0.03482249809888749, 0.04138728894420396, 0.04082801490772614, 0.057938424403998434, 0.028542289697621293, 0.04044503592196402, 0.03660994695503372, 0.0376145161832504]}, "mutation_prompt": null}
{"id": "bc02a210-9d8f-43dc-907e-8e62c2457a12", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Introducing self-adaptive parameter adjustment for bandwidth during harmony improvisation to enhance exploration-exploitation balance.", "configspace": "", "generation": 12, "fitness": 0.1048995780835566, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "3e417474-ea23-42b4-b81a-4bc365de36a2", "metadata": {"aucs": [0.2981923128553804, 0.2507086583681436, 0.25999031768448044, 0.2722687504915128, 0.2995108124614071, 0.24917780549060653, 0.25427030804208384, 0.27691337613482114, 0.27254521041889834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013759387500456799, 9.999999999998899e-05, 0.01877019247675238, 0.09457417652540168, 0.11718722744666288, 0.10071347976503753, 0.07678215617117601, 0.11284853998383992, 0.10842277616006046, 0.08679264950806098, 0.10609971039729282, 0.09684412033472944, 0.0817168536412386, 0.09172166685487027, 0.08338155586454632, 0.08068373402592466, 0.09518313092185804, 0.0924969646699989, 0.0882373432549941, 0.13027076499681212, 0.06971753727541186, 0.12485887124036432, 0.1352967105762911, 0.10903567991743623, 0.1104555056876132, 0.12570990021716588, 0.1133462936871612, 0.11453030774251638, 0.12443213041381618, 0.11589174742214892, 0.06923189211126957, 0.11955497443778418, 0.12225910456429834, 0.1206367727638522, 0.15866937007304283, 0.13563504458436104, 0.10613484022446451, 0.08857986957869068, 0.08794033397422008, 0.12499198781371201, 0.08047318291863981, 0.11921265620495358, 0.14317607348416428, 0.14580180535381548, 0.13129608301204776, 0.0668199057449892, 0.11006504237344938, 0.13940501095202873, 0.04848358862943114, 0.034814593638744395, 0.03584195985139338, 0.03462119783604378, 0.05445838494775346, 0.04346155431633614, 0.0258724495088829, 0.021579016843666476, 0.09987859242138597, 0.09931304851287859, 9.999999999998899e-05, 0.060239995817096714, 0.054537481434704715, 0.08856299924054967, 0.09997334478850384, 0.061110184457028094, 0.03335499975127254, 0.10289083933133092, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05415338010298987, 0.018192301960970547, 0.05536858982267967, 0.053783243090689936, 9.999999999998899e-05, 0.008305671052352914, 0.04592396176712976, 0.03735641374861376, 0.013172850428587846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015689711104182935, 0.02370476707706859, 0.05210139838728045, 9.999999999998899e-05, 0.013555574743443266, 0.027504107801524014, 0.02157912282558405, 0.020561424681395324, 0.04470399694518912, 0.21400473932786146, 0.2736321838363217, 0.24725507648854805, 0.23832690338675677, 0.28069185781945005, 0.2524892159592812, 0.2643333876674133, 0.2667988533665684, 0.24752157553331866, 0.041570106101911586, 0.03936073371501847, 0.033570475343275064, 0.04649089110574656, 0.04230197530791191, 0.045937182024742285, 0.06187800087238704, 0.018107246107138653, 0.09451538238414392, 0.1461040249005766, 0.17585801186741823, 0.12517356437992966, 0.12311329424353734, 0.11998199582508828, 0.08731082253390399, 0.10035125222101993, 0.11893627602150514, 0.08893680494536216, 0.186526839001543, 0.21442226301829548, 0.14944613073134028, 0.18081997546840134, 0.20141875475568527, 0.18703484402362336, 0.13583260003224218, 0.1664961491339041, 0.1494163772937962, 0.09425060036612398, 0.14500653844060085, 0.0971469557182496, 0.11727483583098641, 0.1350163891542696, 0.1397483017307608, 0.07859789936815431, 0.132633433796431, 0.10725001951810043, 0.1754018248036635, 0.16242672345944853, 0.17891665941353896, 0.14820052100557168, 0.1496207792134252, 0.16154773631524133, 0.15112749783514523, 0.13658832124412856, 0.17022197906853176, 0.18767310158107386, 0.14609625378024704, 0.18516646189238328, 0.17349565366684905, 0.1443261603112438, 0.1939069967610071, 0.17482718541186026, 0.16755411942542775, 0.16889567957571094, 0.16676511320108145, 0.10460328221045434, 0.14297303715714604, 0.31194901063048985, 0.18320216280281154, 0.13998272537676093, 0.12714027980644405, 0.11117530628665995, 0.13790419410655264, 0.07958425700796667, 0.09249247186599019, 0.0997869804774798, 0.14201145088279188, 0.17297008783789536, 0.17306753565029664, 0.1287699230074244, 0.14441250393199223, 0.09865958980954093, 0.16267178371657687, 0.14260687373336756, 0.16268014955396937, 0.14847015342759473, 0.17731143094556956, 0.15291296244874297, 0.155781760094299, 0.1638418773292979, 0.16526339110506505, 0.048002717594638145, 0.04739288585164336, 0.05386554168351809, 0.04843068950485918, 0.06624325652314744, 0.04205827848281862, 0.04628704628669311, 0.04311396632979103, 0.05436643029027233]}, "mutation_prompt": null}
{"id": "10630ecb-aeb2-415a-b5c8-2b915b4c1ed3", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Introducing self-adaptive parameter adjustment for bandwidth during harmony improvisation to enhance exploration-exploitation balance.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc02a210-9d8f-43dc-907e-8e62c2457a12", "metadata": {"aucs": [0.2981923128553804, 0.2507086583681436, 0.25999031768448044, 0.2722687504915128, 0.2995108124614071, 0.24917780549060653, 0.25427030804208384, 0.27691337613482114, 0.27254521041889834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013759387500456799, 9.999999999998899e-05, 0.01877019247675238, 0.09457417652540168, 0.11718722744666288, 0.10071347976503753, 0.07678215617117601, 0.11284853998383992, 0.10842277616006046, 0.08679264950806098, 0.10609971039729282, 0.09684412033472944, 0.0817168536412386, 0.09172166685487027, 0.08338155586454632, 0.08068373402592466, 0.09518313092185804, 0.0924969646699989, 0.0882373432549941, 0.13027076499681212, 0.06971753727541186, 0.12485887124036432, 0.1352967105762911, 0.10903567991743623, 0.1104555056876132, 0.12570990021716588, 0.1133462936871612, 0.11453030774251638, 0.12443213041381618, 0.11589174742214892, 0.06923189211126957, 0.11955497443778418, 0.12225910456429834, 0.1206367727638522, 0.15866937007304283, 0.13563504458436104, 0.10613484022446451, 0.08857986957869068, 0.08794033397422008, 0.12499198781371201, 0.08047318291863981, 0.11921265620495358, 0.14317607348416428, 0.14580180535381548, 0.13129608301204776, 0.0668199057449892, 0.11006504237344938, 0.13940501095202873, 0.04848358862943114, 0.034814593638744395, 0.03584195985139338, 0.03462119783604378, 0.05445838494775346, 0.04346155431633614, 0.0258724495088829, 0.021579016843666476, 0.09987859242138597, 0.09931304851287859, 9.999999999998899e-05, 0.060239995817096714, 0.054537481434704715, 0.08856299924054967, 0.09997334478850384, 0.061110184457028094, 0.03335499975127254, 0.10289083933133092, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05415338010298987, 0.018192301960970547, 0.05536858982267967, 0.053783243090689936, 9.999999999998899e-05, 0.008305671052352914, 0.04592396176712976, 0.03735641374861376, 0.013172850428587846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015689711104182935, 0.02370476707706859, 0.05210139838728045, 9.999999999998899e-05, 0.013555574743443266, 0.027504107801524014, 0.02157912282558405, 0.020561424681395324, 0.04470399694518912, 0.21400473932786146, 0.2736321838363217, 0.24725507648854805, 0.23832690338675677, 0.28069185781945005, 0.2524892159592812, 0.2643333876674133, 0.2667988533665684, 0.24752157553331866, 0.041570106101911586, 0.03936073371501847, 0.033570475343275064, 0.04649089110574656, 0.04230197530791191, 0.045937182024742285, 0.06187800087238704, 0.018107246107138653, 0.09451538238414392, 0.1461040249005766, 0.17585801186741823, 0.12517356437992966, 0.12311329424353734, 0.11998199582508828, 0.08731082253390399, 0.10035125222101993, 0.11893627602150514, 0.08893680494536216, 0.186526839001543, 0.21442226301829548, 0.14944613073134028, 0.18081997546840134, 0.20141875475568527, 0.18703484402362336, 0.13583260003224218, 0.1664961491339041, 0.1494163772937962, 0.09425060036612398, 0.14500653844060085, 0.0971469557182496, 0.11727483583098641, 0.1350163891542696, 0.1397483017307608, 0.07859789936815431, 0.132633433796431, 0.10725001951810043, 0.1754018248036635, 0.16242672345944853, 0.17891665941353896, 0.14820052100557168, 0.1496207792134252, 0.16154773631524133, 0.15112749783514523, 0.13658832124412856, 0.17022197906853176, 0.18767310158107386, 0.14609625378024704, 0.18516646189238328, 0.17349565366684905, 0.1443261603112438, 0.1939069967610071, 0.17482718541186026, 0.16755411942542775, 0.16889567957571094, 0.16676511320108145, 0.10460328221045434, 0.14297303715714604, 0.31194901063048985, 0.18320216280281154, 0.13998272537676093, 0.12714027980644405, 0.11117530628665995, 0.13790419410655264, 0.07958425700796667, 0.09249247186599019, 0.0997869804774798, 0.14201145088279188, 0.17297008783789536, 0.17306753565029664, 0.1287699230074244, 0.14441250393199223, 0.09865958980954093, 0.16267178371657687, 0.14260687373336756, 0.16268014955396937, 0.14847015342759473, 0.17731143094556956, 0.15291296244874297, 0.155781760094299, 0.1638418773292979, 0.16526339110506505, 0.048002717594638145, 0.04739288585164336, 0.05386554168351809, 0.04843068950485918, 0.06624325652314744, 0.04205827848281862, 0.04628704628669311, 0.04311396632979103, 0.05436643029027233]}, "mutation_prompt": null}
{"id": "27eeebb8-8857-4bb6-b525-b63bcdf94e8d", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "HarmonySearch", "description": "Introducing self-adaptive parameter adjustment for bandwidth during harmony improvisation to enhance exploration-exploitation balance.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc02a210-9d8f-43dc-907e-8e62c2457a12", "metadata": {"aucs": [0.2981923128553804, 0.2507086583681436, 0.25999031768448044, 0.2722687504915128, 0.2995108124614071, 0.24917780549060653, 0.25427030804208384, 0.27691337613482114, 0.27254521041889834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013759387500456799, 9.999999999998899e-05, 0.01877019247675238, 0.09457417652540168, 0.11718722744666288, 0.10071347976503753, 0.07678215617117601, 0.11284853998383992, 0.10842277616006046, 0.08679264950806098, 0.10609971039729282, 0.09684412033472944, 0.0817168536412386, 0.09172166685487027, 0.08338155586454632, 0.08068373402592466, 0.09518313092185804, 0.0924969646699989, 0.0882373432549941, 0.13027076499681212, 0.06971753727541186, 0.12485887124036432, 0.1352967105762911, 0.10903567991743623, 0.1104555056876132, 0.12570990021716588, 0.1133462936871612, 0.11453030774251638, 0.12443213041381618, 0.11589174742214892, 0.06923189211126957, 0.11955497443778418, 0.12225910456429834, 0.1206367727638522, 0.15866937007304283, 0.13563504458436104, 0.10613484022446451, 0.08857986957869068, 0.08794033397422008, 0.12499198781371201, 0.08047318291863981, 0.11921265620495358, 0.14317607348416428, 0.14580180535381548, 0.13129608301204776, 0.0668199057449892, 0.11006504237344938, 0.13940501095202873, 0.04848358862943114, 0.034814593638744395, 0.03584195985139338, 0.03462119783604378, 0.05445838494775346, 0.04346155431633614, 0.0258724495088829, 0.021579016843666476, 0.09987859242138597, 0.09931304851287859, 9.999999999998899e-05, 0.060239995817096714, 0.054537481434704715, 0.08856299924054967, 0.09997334478850384, 0.061110184457028094, 0.03335499975127254, 0.10289083933133092, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05415338010298987, 0.018192301960970547, 0.05536858982267967, 0.053783243090689936, 9.999999999998899e-05, 0.008305671052352914, 0.04592396176712976, 0.03735641374861376, 0.013172850428587846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015689711104182935, 0.02370476707706859, 0.05210139838728045, 9.999999999998899e-05, 0.013555574743443266, 0.027504107801524014, 0.02157912282558405, 0.020561424681395324, 0.04470399694518912, 0.21400473932786146, 0.2736321838363217, 0.24725507648854805, 0.23832690338675677, 0.28069185781945005, 0.2524892159592812, 0.2643333876674133, 0.2667988533665684, 0.24752157553331866, 0.041570106101911586, 0.03936073371501847, 0.033570475343275064, 0.04649089110574656, 0.04230197530791191, 0.045937182024742285, 0.06187800087238704, 0.018107246107138653, 0.09451538238414392, 0.1461040249005766, 0.17585801186741823, 0.12517356437992966, 0.12311329424353734, 0.11998199582508828, 0.08731082253390399, 0.10035125222101993, 0.11893627602150514, 0.08893680494536216, 0.186526839001543, 0.21442226301829548, 0.14944613073134028, 0.18081997546840134, 0.20141875475568527, 0.18703484402362336, 0.13583260003224218, 0.1664961491339041, 0.1494163772937962, 0.09425060036612398, 0.14500653844060085, 0.0971469557182496, 0.11727483583098641, 0.1350163891542696, 0.1397483017307608, 0.07859789936815431, 0.132633433796431, 0.10725001951810043, 0.1754018248036635, 0.16242672345944853, 0.17891665941353896, 0.14820052100557168, 0.1496207792134252, 0.16154773631524133, 0.15112749783514523, 0.13658832124412856, 0.17022197906853176, 0.18767310158107386, 0.14609625378024704, 0.18516646189238328, 0.17349565366684905, 0.1443261603112438, 0.1939069967610071, 0.17482718541186026, 0.16755411942542775, 0.16889567957571094, 0.16676511320108145, 0.10460328221045434, 0.14297303715714604, 0.31194901063048985, 0.18320216280281154, 0.13998272537676093, 0.12714027980644405, 0.11117530628665995, 0.13790419410655264, 0.07958425700796667, 0.09249247186599019, 0.0997869804774798, 0.14201145088279188, 0.17297008783789536, 0.17306753565029664, 0.1287699230074244, 0.14441250393199223, 0.09865958980954093, 0.16267178371657687, 0.14260687373336756, 0.16268014955396937, 0.14847015342759473, 0.17731143094556956, 0.15291296244874297, 0.155781760094299, 0.1638418773292979, 0.16526339110506505, 0.048002717594638145, 0.04739288585164336, 0.05386554168351809, 0.04843068950485918, 0.06624325652314744, 0.04205827848281862, 0.04628704628669311, 0.04311396632979103, 0.05436643029027233]}, "mutation_prompt": null}
{"id": "7669df6a-d0b3-44f5-9b8f-0c0d806b6350", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_solution[i] += np.random.uniform(-1.0, 1.0)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search by introducing pitch adjustment to explore the search space more effectively.", "configspace": "", "generation": 15, "fitness": 0.1676479704263677, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.15.", "error": "", "parent_id": "bc02a210-9d8f-43dc-907e-8e62c2457a12", "metadata": {"aucs": [0.35037943195493326, 0.36048712859732146, 0.43001122787741874, 0.309053066048522, 0.3994703894321968, 0.38719534571150493, 0.37675588152339134, 0.4056893185762409, 0.40714632745423773, 0.0672078763797419, 0.09029801692091166, 0.024141287723396854, 0.05722304320869376, 0.08428500832135177, 0.05054293529662013, 0.011679197219426896, 0.09923695875255212, 0.010005944554172141, 0.17716891460599615, 0.1937798917276512, 0.13537339268776194, 0.16592164113693875, 0.16212280617108865, 0.1601142554405215, 0.16362634260104347, 0.15697245793206527, 0.13304144973915422, 0.15926909620023566, 0.11941487880240309, 0.15116298757325497, 0.13896165488549628, 0.14710980757082293, 0.15314306113373477, 0.1356428108055332, 0.127151619394414, 0.11395176294293108, 0.7873443431176799, 0.8495005530830929, 0.7300521317157971, 0.7572703279763691, 0.7717895645055409, 0.6677217535654439, 0.6716636872756105, 0.6676985548717926, 0.6724745721800931, 0.14533500377649144, 0.1751203906838733, 0.20508345170916953, 0.18923295427894893, 0.17790319857431947, 0.19835103689616285, 0.1710174984568028, 0.14891114469837174, 0.11261673266270644, 0.2054975509212763, 0.09904483508386641, 0.22212344381473037, 0.25066029870633555, 0.13460760979962594, 0.17461082484061385, 0.1850021509947688, 0.12695882835220196, 0.17139032056520898, 0.10548314382468782, 0.03559488407901268, 0.1635643067661955, 0.07824050290315465, 0.07406488834256908, 0.11391263128846874, 0.09941863534042861, 0.12512158629971804, 0.11238449855033217, 0.1106559660629931, 0.039690107286547205, 0.12264685075481119, 0.14206304046480123, 0.10391672245657613, 0.11285351386254494, 0.1297169283560381, 0.08690258108734994, 0.11623242682926882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0621004650722794, 0.05474365935562686, 0.023878559442124248, 0.05490519602682453, 9.999999999998899e-05, 0.03255800647360063, 0.13340838328582938, 0.05987855968347344, 0.04250242334284282, 9.999999999998899e-05, 0.00018815677502115324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012732590848918424, 9.999999999998899e-05, 0.0074058507652543515, 9.999999999998899e-05, 0.07163148823069154, 0.06888401492217366, 0.051645393255851935, 0.05149538079137128, 0.09547646596411974, 0.09101001425724353, 0.055984935964862204, 0.05862436302861129, 0.07036992871326131, 0.3114435974630432, 0.33081832654974774, 0.36750479703424355, 0.3517769580626754, 0.3124307165413889, 0.3156488540063628, 0.3523611847846655, 0.3202710798186723, 0.3712098805167994, 0.043156856145569744, 0.04253217797619813, 0.06638153422301674, 0.06927349786399606, 0.03538806433360464, 0.10764478871908523, 0.039246858845283006, 0.03256124973517294, 0.08561333956893524, 0.16888092507379948, 0.16779001917808345, 0.2415691764222745, 0.22742613617845875, 0.13825904070846318, 0.2071921494029798, 0.18387309542197527, 0.2880686987492327, 0.11654915162500601, 0.13439716864441542, 0.22926001323466516, 0.1723395765055319, 0.2483856088430655, 0.1878469426666186, 0.1643198422005533, 0.21614762374520868, 0.1737382286540382, 0.15045788037712282, 0.14900233079469705, 0.18470338577501333, 0.11217997052253559, 0.1350984622365975, 0.12393458000539126, 0.16295561107796275, 0.10139225875546831, 0.14577889769307495, 0.08196111771390346, 0.1813760569768026, 0.17280684533464863, 0.2167205594633389, 0.18104536133156846, 0.13917279312512731, 0.17869702457910275, 0.18590601597415923, 0.16758704324206752, 0.1766453274929186, 0.19455546492662135, 0.20524227555146324, 0.21589972569006644, 0.1948319932376006, 0.16762492567280607, 0.15718743636687815, 0.1913708330395434, 0.18629579077597613, 0.19044244428186052, 0.32326035118465524, 0.15340232590630898, 0.18976579169426122, 0.4078598663566749, 0.19400963289523665, 0.10143982339144753, 0.14838662364880384, 0.1516326687575269, 0.15611044088647164, 0.20818820490159218, 0.23067903865880557, 0.10632525759469669, 0.1839227513443178, 0.19534440694986732, 0.18378840184192236, 0.09023206239749892, 0.13982841585269234, 0.10865212260316459, 0.17877670965689063, 0.17852142647160418, 0.16631818346448402, 0.16713421239931925, 0.17996836941092242, 0.1693362436740532, 0.18989176469309976, 0.17467392367739543, 0.17894592804405896, 0.05989453629747099, 0.11373640700417675, 0.06533287611959382, 0.06722800776545523, 0.06748767539102807, 0.05339121343354003, 0.10640837274310455, 0.05469006112278729, 0.04947024340131956]}, "mutation_prompt": null}
{"id": "b62b3d72-a18b-4d0f-81be-dc13a8b75e19", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_solution[i] += np.random.uniform(-1.0, 1.0)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search by introducing pitch adjustment to explore the search space more effectively.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7669df6a-d0b3-44f5-9b8f-0c0d806b6350", "metadata": {"aucs": [0.35037943195493326, 0.36048712859732146, 0.43001122787741874, 0.309053066048522, 0.3994703894321968, 0.38719534571150493, 0.37675588152339134, 0.4056893185762409, 0.40714632745423773, 0.0672078763797419, 0.09029801692091166, 0.024141287723396854, 0.05722304320869376, 0.08428500832135177, 0.05054293529662013, 0.011679197219426896, 0.09923695875255212, 0.010005944554172141, 0.17716891460599615, 0.1937798917276512, 0.13537339268776194, 0.16592164113693875, 0.16212280617108865, 0.1601142554405215, 0.16362634260104347, 0.15697245793206527, 0.13304144973915422, 0.15926909620023566, 0.11941487880240309, 0.15116298757325497, 0.13896165488549628, 0.14710980757082293, 0.15314306113373477, 0.1356428108055332, 0.127151619394414, 0.11395176294293108, 0.7873443431176799, 0.8495005530830929, 0.7300521317157971, 0.7572703279763691, 0.7717895645055409, 0.6677217535654439, 0.6716636872756105, 0.6676985548717926, 0.6724745721800931, 0.14533500377649144, 0.1751203906838733, 0.20508345170916953, 0.18923295427894893, 0.17790319857431947, 0.19835103689616285, 0.1710174984568028, 0.14891114469837174, 0.11261673266270644, 0.2054975509212763, 0.09904483508386641, 0.22212344381473037, 0.25066029870633555, 0.13460760979962594, 0.17461082484061385, 0.1850021509947688, 0.12695882835220196, 0.17139032056520898, 0.10548314382468782, 0.03559488407901268, 0.1635643067661955, 0.07824050290315465, 0.07406488834256908, 0.11391263128846874, 0.09941863534042861, 0.12512158629971804, 0.11238449855033217, 0.1106559660629931, 0.039690107286547205, 0.12264685075481119, 0.14206304046480123, 0.10391672245657613, 0.11285351386254494, 0.1297169283560381, 0.08690258108734994, 0.11623242682926882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0621004650722794, 0.05474365935562686, 0.023878559442124248, 0.05490519602682453, 9.999999999998899e-05, 0.03255800647360063, 0.13340838328582938, 0.05987855968347344, 0.04250242334284282, 9.999999999998899e-05, 0.00018815677502115324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012732590848918424, 9.999999999998899e-05, 0.0074058507652543515, 9.999999999998899e-05, 0.07163148823069154, 0.06888401492217366, 0.051645393255851935, 0.05149538079137128, 0.09547646596411974, 0.09101001425724353, 0.055984935964862204, 0.05862436302861129, 0.07036992871326131, 0.3114435974630432, 0.33081832654974774, 0.36750479703424355, 0.3517769580626754, 0.3124307165413889, 0.3156488540063628, 0.3523611847846655, 0.3202710798186723, 0.3712098805167994, 0.043156856145569744, 0.04253217797619813, 0.06638153422301674, 0.06927349786399606, 0.03538806433360464, 0.10764478871908523, 0.039246858845283006, 0.03256124973517294, 0.08561333956893524, 0.16888092507379948, 0.16779001917808345, 0.2415691764222745, 0.22742613617845875, 0.13825904070846318, 0.2071921494029798, 0.18387309542197527, 0.2880686987492327, 0.11654915162500601, 0.13439716864441542, 0.22926001323466516, 0.1723395765055319, 0.2483856088430655, 0.1878469426666186, 0.1643198422005533, 0.21614762374520868, 0.1737382286540382, 0.15045788037712282, 0.14900233079469705, 0.18470338577501333, 0.11217997052253559, 0.1350984622365975, 0.12393458000539126, 0.16295561107796275, 0.10139225875546831, 0.14577889769307495, 0.08196111771390346, 0.1813760569768026, 0.17280684533464863, 0.2167205594633389, 0.18104536133156846, 0.13917279312512731, 0.17869702457910275, 0.18590601597415923, 0.16758704324206752, 0.1766453274929186, 0.19455546492662135, 0.20524227555146324, 0.21589972569006644, 0.1948319932376006, 0.16762492567280607, 0.15718743636687815, 0.1913708330395434, 0.18629579077597613, 0.19044244428186052, 0.32326035118465524, 0.15340232590630898, 0.18976579169426122, 0.4078598663566749, 0.19400963289523665, 0.10143982339144753, 0.14838662364880384, 0.1516326687575269, 0.15611044088647164, 0.20818820490159218, 0.23067903865880557, 0.10632525759469669, 0.1839227513443178, 0.19534440694986732, 0.18378840184192236, 0.09023206239749892, 0.13982841585269234, 0.10865212260316459, 0.17877670965689063, 0.17852142647160418, 0.16631818346448402, 0.16713421239931925, 0.17996836941092242, 0.1693362436740532, 0.18989176469309976, 0.17467392367739543, 0.17894592804405896, 0.05989453629747099, 0.11373640700417675, 0.06533287611959382, 0.06722800776545523, 0.06748767539102807, 0.05339121343354003, 0.10640837274310455, 0.05469006112278729, 0.04947024340131956]}, "mutation_prompt": null}
{"id": "f69af234-b66f-4f34-9bf5-6f93e75d974e", "solution": "import numpy as np\n\nclass DynamicPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, dynamic_pitch_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.dynamic_pitch_range = dynamic_pitch_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    dynamic_pitch = np.random.uniform(*self.dynamic_pitch_range)\n                    new_solution[i] += np.random.uniform(-dynamic_pitch, dynamic_pitch)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicPitchHarmonySearch", "description": "Employing a dynamic pitch adjustment strategy to adaptively control exploration and exploitation trade-off during the search process.", "configspace": "", "generation": 17, "fitness": 0.1511746190262927, "feedback": "The algorithm DynamicPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "7669df6a-d0b3-44f5-9b8f-0c0d806b6350", "metadata": {"aucs": [0.3487014599263272, 0.3919060375145863, 0.43475965745287715, 0.39182191574477376, 0.3522869709376786, 0.3498517473439803, 0.2959161252655773, 0.382771089999687, 0.43521354361157316, 0.05498675034696132, 0.14461674560124482, 0.07207523030202934, 0.07183488605702038, 0.07927291688754945, 0.07439842354380255, 0.06354891762721582, 0.10292812266451856, 0.10524923992320578, 0.1147527820074018, 0.14351825520430195, 0.09893837460053545, 0.11788991976868912, 0.11729090766727113, 0.13999021216394703, 0.1371401565718805, 0.122397481930826, 0.14669772534436465, 0.12321487814099163, 0.09910917352436555, 0.0842143901586554, 0.12911709035190366, 0.07855094505862237, 0.06517379839358439, 0.08657029079799539, 0.1064677673230483, 0.0896387661182555, 0.6162087655533259, 0.6000862633026203, 0.5714616723878607, 0.6416788806894675, 0.6681661963752817, 0.4683563006742658, 0.6339209263046726, 0.5938404605746762, 0.46301348329773306, 0.09608511307546685, 0.10794701930729056, 0.09684922696945819, 0.12582318607903975, 0.1263481597805176, 0.16785721913944274, 0.12275696329906527, 0.07491297586817869, 0.12141285438798877, 0.15509200258356048, 0.07828342823628898, 0.12393250375071907, 0.16158788900194254, 0.19819697081889298, 0.12909207486294727, 0.13601312612215732, 0.12099481923386635, 0.16617331651285094, 0.08930192541422544, 0.07740663991646124, 0.1035768366680131, 0.029207842460263755, 0.0730381233220283, 0.10840774745982817, 0.10753089077078859, 0.12036030355758998, 0.11629529371437353, 0.1275465488592088, 0.10615816812081535, 0.10691123285108528, 0.09137822969279497, 0.17801945899442906, 0.12866707015384105, 0.11129347664378453, 0.09274267517844459, 0.12376219579469727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04033924769171149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06804746119504412, 0.04893290653393012, 0.055734444845600195, 0.06281960746159543, 9.999999999998899e-05, 0.011047373283980089, 0.18249134850051718, 0.03555108920629879, 0.05689054104751379, 0.011830108411042595, 0.023923918420314605, 0.027002581463213993, 0.00311013835262397, 0.013144630591610085, 0.04349446583850425, 0.011765493709490649, 0.012536380202465058, 0.0010137117291378894, 0.0723632938068276, 0.03228623164277955, 0.042739337504031916, 0.053651602447437496, 0.02611462506619222, 0.08780698673880583, 0.08438813497377773, 0.06925659479700896, 0.11393297808534475, 0.2996107987941067, 0.33923226087744474, 0.3828479316417889, 0.2996934613777468, 0.3108055383692697, 0.33610036991051817, 0.3423949134548777, 0.3187179320974477, 0.3561918083581217, 0.04826042829482158, 0.04677004931425288, 0.03346072728720029, 0.13028933760827877, 0.04711925120074123, 0.08694163474780525, 0.04558335220076348, 0.049199473638195323, 0.06753600046835895, 0.16546979319130029, 0.17563035509348934, 0.12617795953628042, 0.25524495469937036, 0.1410494981973176, 0.11803689029166775, 0.1498752201241741, 0.17528943989743095, 0.10740429107529781, 0.13317540475323786, 0.1368915796865866, 0.16680976624904265, 0.22839490657165673, 0.18624253420037207, 0.14904659057865433, 0.14424508616463882, 0.13369564690618085, 0.1251783746502244, 0.13800249145411636, 0.17346395847842233, 0.08693705054726908, 0.19761510277876249, 0.08723182749508052, 0.08989461419682399, 0.15540280637509774, 0.16091341099523793, 0.11785559032840831, 0.18711651922801353, 0.16218199043265435, 0.24578801846902665, 0.182360739541373, 0.12941972087286446, 0.23473610841727854, 0.1637859783340997, 0.1567166349863819, 0.2184679557415824, 0.1399217155989576, 0.15162165243551484, 0.15837945192771807, 0.15033830677239857, 0.18461743095479866, 0.15449989047970158, 0.1821588354777629, 0.16672500465251594, 0.15207217039731546, 0.15983835287657144, 0.16620023473390788, 0.13468817103629804, 0.4802613805655357, 0.1915395267695077, 0.09734818723916139, 0.1290008496358499, 0.11639267956813693, 0.16776183901519637, 0.19688288177978053, 0.10530269066985332, 0.16236523368951317, 0.07167417804800824, 0.089260991433874, 0.1844689753828922, 0.09643022650702537, 0.1526767204545607, 0.14467736141250698, 0.1721727871894706, 0.2239206933553577, 0.184740169612725, 0.171776272678553, 0.1702740307185724, 0.16902470990227536, 0.1749291700425878, 0.2002333744354523, 0.2324262495539381, 0.06811788374547756, 0.038300054943482986, 0.05627542856246981, 0.06668634145016572, 0.06973676202459644, 0.04300894295345059, 0.04882328706150296, 0.06665588131796718, 0.059382263248859646]}, "mutation_prompt": null}
{"id": "ee7b71ee-6998-443b-a55e-faa8f3b281f0", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_solution[i] += np.random.uniform(-1.0, 1.0)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search by introducing pitch adjustment to explore the search space more effectively.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7669df6a-d0b3-44f5-9b8f-0c0d806b6350", "metadata": {"aucs": [0.35037943195493326, 0.36048712859732146, 0.43001122787741874, 0.309053066048522, 0.3994703894321968, 0.38719534571150493, 0.37675588152339134, 0.4056893185762409, 0.40714632745423773, 0.0672078763797419, 0.09029801692091166, 0.024141287723396854, 0.05722304320869376, 0.08428500832135177, 0.05054293529662013, 0.011679197219426896, 0.09923695875255212, 0.010005944554172141, 0.17716891460599615, 0.1937798917276512, 0.13537339268776194, 0.16592164113693875, 0.16212280617108865, 0.1601142554405215, 0.16362634260104347, 0.15697245793206527, 0.13304144973915422, 0.15926909620023566, 0.11941487880240309, 0.15116298757325497, 0.13896165488549628, 0.14710980757082293, 0.15314306113373477, 0.1356428108055332, 0.127151619394414, 0.11395176294293108, 0.7873443431176799, 0.8495005530830929, 0.7300521317157971, 0.7572703279763691, 0.7717895645055409, 0.6677217535654439, 0.6716636872756105, 0.6676985548717926, 0.6724745721800931, 0.14533500377649144, 0.1751203906838733, 0.20508345170916953, 0.18923295427894893, 0.17790319857431947, 0.19835103689616285, 0.1710174984568028, 0.14891114469837174, 0.11261673266270644, 0.2054975509212763, 0.09904483508386641, 0.22212344381473037, 0.25066029870633555, 0.13460760979962594, 0.17461082484061385, 0.1850021509947688, 0.12695882835220196, 0.17139032056520898, 0.10548314382468782, 0.03559488407901268, 0.1635643067661955, 0.07824050290315465, 0.07406488834256908, 0.11391263128846874, 0.09941863534042861, 0.12512158629971804, 0.11238449855033217, 0.1106559660629931, 0.039690107286547205, 0.12264685075481119, 0.14206304046480123, 0.10391672245657613, 0.11285351386254494, 0.1297169283560381, 0.08690258108734994, 0.11623242682926882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0621004650722794, 0.05474365935562686, 0.023878559442124248, 0.05490519602682453, 9.999999999998899e-05, 0.03255800647360063, 0.13340838328582938, 0.05987855968347344, 0.04250242334284282, 9.999999999998899e-05, 0.00018815677502115324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012732590848918424, 9.999999999998899e-05, 0.0074058507652543515, 9.999999999998899e-05, 0.07163148823069154, 0.06888401492217366, 0.051645393255851935, 0.05149538079137128, 0.09547646596411974, 0.09101001425724353, 0.055984935964862204, 0.05862436302861129, 0.07036992871326131, 0.3114435974630432, 0.33081832654974774, 0.36750479703424355, 0.3517769580626754, 0.3124307165413889, 0.3156488540063628, 0.3523611847846655, 0.3202710798186723, 0.3712098805167994, 0.043156856145569744, 0.04253217797619813, 0.06638153422301674, 0.06927349786399606, 0.03538806433360464, 0.10764478871908523, 0.039246858845283006, 0.03256124973517294, 0.08561333956893524, 0.16888092507379948, 0.16779001917808345, 0.2415691764222745, 0.22742613617845875, 0.13825904070846318, 0.2071921494029798, 0.18387309542197527, 0.2880686987492327, 0.11654915162500601, 0.13439716864441542, 0.22926001323466516, 0.1723395765055319, 0.2483856088430655, 0.1878469426666186, 0.1643198422005533, 0.21614762374520868, 0.1737382286540382, 0.15045788037712282, 0.14900233079469705, 0.18470338577501333, 0.11217997052253559, 0.1350984622365975, 0.12393458000539126, 0.16295561107796275, 0.10139225875546831, 0.14577889769307495, 0.08196111771390346, 0.1813760569768026, 0.17280684533464863, 0.2167205594633389, 0.18104536133156846, 0.13917279312512731, 0.17869702457910275, 0.18590601597415923, 0.16758704324206752, 0.1766453274929186, 0.19455546492662135, 0.20524227555146324, 0.21589972569006644, 0.1948319932376006, 0.16762492567280607, 0.15718743636687815, 0.1913708330395434, 0.18629579077597613, 0.19044244428186052, 0.32326035118465524, 0.15340232590630898, 0.18976579169426122, 0.4078598663566749, 0.19400963289523665, 0.10143982339144753, 0.14838662364880384, 0.1516326687575269, 0.15611044088647164, 0.20818820490159218, 0.23067903865880557, 0.10632525759469669, 0.1839227513443178, 0.19534440694986732, 0.18378840184192236, 0.09023206239749892, 0.13982841585269234, 0.10865212260316459, 0.17877670965689063, 0.17852142647160418, 0.16631818346448402, 0.16713421239931925, 0.17996836941092242, 0.1693362436740532, 0.18989176469309976, 0.17467392367739543, 0.17894592804405896, 0.05989453629747099, 0.11373640700417675, 0.06533287611959382, 0.06722800776545523, 0.06748767539102807, 0.05339121343354003, 0.10640837274310455, 0.05469006112278729, 0.04947024340131956]}, "mutation_prompt": null}
{"id": "6b917119-93a4-4852-8a5a-f45e6e242a50", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_solution[i] += np.random.uniform(-1.0, 1.0)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search by introducing pitch adjustment to explore the search space more effectively.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7669df6a-d0b3-44f5-9b8f-0c0d806b6350", "metadata": {"aucs": [0.35037943195493326, 0.36048712859732146, 0.43001122787741874, 0.309053066048522, 0.3994703894321968, 0.38719534571150493, 0.37675588152339134, 0.4056893185762409, 0.40714632745423773, 0.0672078763797419, 0.09029801692091166, 0.024141287723396854, 0.05722304320869376, 0.08428500832135177, 0.05054293529662013, 0.011679197219426896, 0.09923695875255212, 0.010005944554172141, 0.17716891460599615, 0.1937798917276512, 0.13537339268776194, 0.16592164113693875, 0.16212280617108865, 0.1601142554405215, 0.16362634260104347, 0.15697245793206527, 0.13304144973915422, 0.15926909620023566, 0.11941487880240309, 0.15116298757325497, 0.13896165488549628, 0.14710980757082293, 0.15314306113373477, 0.1356428108055332, 0.127151619394414, 0.11395176294293108, 0.7873443431176799, 0.8495005530830929, 0.7300521317157971, 0.7572703279763691, 0.7717895645055409, 0.6677217535654439, 0.6716636872756105, 0.6676985548717926, 0.6724745721800931, 0.14533500377649144, 0.1751203906838733, 0.20508345170916953, 0.18923295427894893, 0.17790319857431947, 0.19835103689616285, 0.1710174984568028, 0.14891114469837174, 0.11261673266270644, 0.2054975509212763, 0.09904483508386641, 0.22212344381473037, 0.25066029870633555, 0.13460760979962594, 0.17461082484061385, 0.1850021509947688, 0.12695882835220196, 0.17139032056520898, 0.10548314382468782, 0.03559488407901268, 0.1635643067661955, 0.07824050290315465, 0.07406488834256908, 0.11391263128846874, 0.09941863534042861, 0.12512158629971804, 0.11238449855033217, 0.1106559660629931, 0.039690107286547205, 0.12264685075481119, 0.14206304046480123, 0.10391672245657613, 0.11285351386254494, 0.1297169283560381, 0.08690258108734994, 0.11623242682926882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0621004650722794, 0.05474365935562686, 0.023878559442124248, 0.05490519602682453, 9.999999999998899e-05, 0.03255800647360063, 0.13340838328582938, 0.05987855968347344, 0.04250242334284282, 9.999999999998899e-05, 0.00018815677502115324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012732590848918424, 9.999999999998899e-05, 0.0074058507652543515, 9.999999999998899e-05, 0.07163148823069154, 0.06888401492217366, 0.051645393255851935, 0.05149538079137128, 0.09547646596411974, 0.09101001425724353, 0.055984935964862204, 0.05862436302861129, 0.07036992871326131, 0.3114435974630432, 0.33081832654974774, 0.36750479703424355, 0.3517769580626754, 0.3124307165413889, 0.3156488540063628, 0.3523611847846655, 0.3202710798186723, 0.3712098805167994, 0.043156856145569744, 0.04253217797619813, 0.06638153422301674, 0.06927349786399606, 0.03538806433360464, 0.10764478871908523, 0.039246858845283006, 0.03256124973517294, 0.08561333956893524, 0.16888092507379948, 0.16779001917808345, 0.2415691764222745, 0.22742613617845875, 0.13825904070846318, 0.2071921494029798, 0.18387309542197527, 0.2880686987492327, 0.11654915162500601, 0.13439716864441542, 0.22926001323466516, 0.1723395765055319, 0.2483856088430655, 0.1878469426666186, 0.1643198422005533, 0.21614762374520868, 0.1737382286540382, 0.15045788037712282, 0.14900233079469705, 0.18470338577501333, 0.11217997052253559, 0.1350984622365975, 0.12393458000539126, 0.16295561107796275, 0.10139225875546831, 0.14577889769307495, 0.08196111771390346, 0.1813760569768026, 0.17280684533464863, 0.2167205594633389, 0.18104536133156846, 0.13917279312512731, 0.17869702457910275, 0.18590601597415923, 0.16758704324206752, 0.1766453274929186, 0.19455546492662135, 0.20524227555146324, 0.21589972569006644, 0.1948319932376006, 0.16762492567280607, 0.15718743636687815, 0.1913708330395434, 0.18629579077597613, 0.19044244428186052, 0.32326035118465524, 0.15340232590630898, 0.18976579169426122, 0.4078598663566749, 0.19400963289523665, 0.10143982339144753, 0.14838662364880384, 0.1516326687575269, 0.15611044088647164, 0.20818820490159218, 0.23067903865880557, 0.10632525759469669, 0.1839227513443178, 0.19534440694986732, 0.18378840184192236, 0.09023206239749892, 0.13982841585269234, 0.10865212260316459, 0.17877670965689063, 0.17852142647160418, 0.16631818346448402, 0.16713421239931925, 0.17996836941092242, 0.1693362436740532, 0.18989176469309976, 0.17467392367739543, 0.17894592804405896, 0.05989453629747099, 0.11373640700417675, 0.06533287611959382, 0.06722800776545523, 0.06748767539102807, 0.05339121343354003, 0.10640837274310455, 0.05469006112278729, 0.04947024340131956]}, "mutation_prompt": null}
{"id": "44a3c45d-c92b-4345-870b-e6e81d35b344", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_solution[i] += np.random.uniform(-1.0, 1.0)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search by introducing pitch adjustment to explore the search space more effectively.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7669df6a-d0b3-44f5-9b8f-0c0d806b6350", "metadata": {"aucs": [0.35037943195493326, 0.36048712859732146, 0.43001122787741874, 0.309053066048522, 0.3994703894321968, 0.38719534571150493, 0.37675588152339134, 0.4056893185762409, 0.40714632745423773, 0.0672078763797419, 0.09029801692091166, 0.024141287723396854, 0.05722304320869376, 0.08428500832135177, 0.05054293529662013, 0.011679197219426896, 0.09923695875255212, 0.010005944554172141, 0.17716891460599615, 0.1937798917276512, 0.13537339268776194, 0.16592164113693875, 0.16212280617108865, 0.1601142554405215, 0.16362634260104347, 0.15697245793206527, 0.13304144973915422, 0.15926909620023566, 0.11941487880240309, 0.15116298757325497, 0.13896165488549628, 0.14710980757082293, 0.15314306113373477, 0.1356428108055332, 0.127151619394414, 0.11395176294293108, 0.7873443431176799, 0.8495005530830929, 0.7300521317157971, 0.7572703279763691, 0.7717895645055409, 0.6677217535654439, 0.6716636872756105, 0.6676985548717926, 0.6724745721800931, 0.14533500377649144, 0.1751203906838733, 0.20508345170916953, 0.18923295427894893, 0.17790319857431947, 0.19835103689616285, 0.1710174984568028, 0.14891114469837174, 0.11261673266270644, 0.2054975509212763, 0.09904483508386641, 0.22212344381473037, 0.25066029870633555, 0.13460760979962594, 0.17461082484061385, 0.1850021509947688, 0.12695882835220196, 0.17139032056520898, 0.10548314382468782, 0.03559488407901268, 0.1635643067661955, 0.07824050290315465, 0.07406488834256908, 0.11391263128846874, 0.09941863534042861, 0.12512158629971804, 0.11238449855033217, 0.1106559660629931, 0.039690107286547205, 0.12264685075481119, 0.14206304046480123, 0.10391672245657613, 0.11285351386254494, 0.1297169283560381, 0.08690258108734994, 0.11623242682926882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0621004650722794, 0.05474365935562686, 0.023878559442124248, 0.05490519602682453, 9.999999999998899e-05, 0.03255800647360063, 0.13340838328582938, 0.05987855968347344, 0.04250242334284282, 9.999999999998899e-05, 0.00018815677502115324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012732590848918424, 9.999999999998899e-05, 0.0074058507652543515, 9.999999999998899e-05, 0.07163148823069154, 0.06888401492217366, 0.051645393255851935, 0.05149538079137128, 0.09547646596411974, 0.09101001425724353, 0.055984935964862204, 0.05862436302861129, 0.07036992871326131, 0.3114435974630432, 0.33081832654974774, 0.36750479703424355, 0.3517769580626754, 0.3124307165413889, 0.3156488540063628, 0.3523611847846655, 0.3202710798186723, 0.3712098805167994, 0.043156856145569744, 0.04253217797619813, 0.06638153422301674, 0.06927349786399606, 0.03538806433360464, 0.10764478871908523, 0.039246858845283006, 0.03256124973517294, 0.08561333956893524, 0.16888092507379948, 0.16779001917808345, 0.2415691764222745, 0.22742613617845875, 0.13825904070846318, 0.2071921494029798, 0.18387309542197527, 0.2880686987492327, 0.11654915162500601, 0.13439716864441542, 0.22926001323466516, 0.1723395765055319, 0.2483856088430655, 0.1878469426666186, 0.1643198422005533, 0.21614762374520868, 0.1737382286540382, 0.15045788037712282, 0.14900233079469705, 0.18470338577501333, 0.11217997052253559, 0.1350984622365975, 0.12393458000539126, 0.16295561107796275, 0.10139225875546831, 0.14577889769307495, 0.08196111771390346, 0.1813760569768026, 0.17280684533464863, 0.2167205594633389, 0.18104536133156846, 0.13917279312512731, 0.17869702457910275, 0.18590601597415923, 0.16758704324206752, 0.1766453274929186, 0.19455546492662135, 0.20524227555146324, 0.21589972569006644, 0.1948319932376006, 0.16762492567280607, 0.15718743636687815, 0.1913708330395434, 0.18629579077597613, 0.19044244428186052, 0.32326035118465524, 0.15340232590630898, 0.18976579169426122, 0.4078598663566749, 0.19400963289523665, 0.10143982339144753, 0.14838662364880384, 0.1516326687575269, 0.15611044088647164, 0.20818820490159218, 0.23067903865880557, 0.10632525759469669, 0.1839227513443178, 0.19534440694986732, 0.18378840184192236, 0.09023206239749892, 0.13982841585269234, 0.10865212260316459, 0.17877670965689063, 0.17852142647160418, 0.16631818346448402, 0.16713421239931925, 0.17996836941092242, 0.1693362436740532, 0.18989176469309976, 0.17467392367739543, 0.17894592804405896, 0.05989453629747099, 0.11373640700417675, 0.06533287611959382, 0.06722800776545523, 0.06748767539102807, 0.05339121343354003, 0.10640837274310455, 0.05469006112278729, 0.04947024340131956]}, "mutation_prompt": null}
{"id": "103ab88f-64a1-4b1f-b9e9-075b165709e8", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_solution[i] += np.random.uniform(-1.0, 1.0)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search by introducing pitch adjustment to explore the search space more effectively.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7669df6a-d0b3-44f5-9b8f-0c0d806b6350", "metadata": {"aucs": [0.35037943195493326, 0.36048712859732146, 0.43001122787741874, 0.309053066048522, 0.3994703894321968, 0.38719534571150493, 0.37675588152339134, 0.4056893185762409, 0.40714632745423773, 0.0672078763797419, 0.09029801692091166, 0.024141287723396854, 0.05722304320869376, 0.08428500832135177, 0.05054293529662013, 0.011679197219426896, 0.09923695875255212, 0.010005944554172141, 0.17716891460599615, 0.1937798917276512, 0.13537339268776194, 0.16592164113693875, 0.16212280617108865, 0.1601142554405215, 0.16362634260104347, 0.15697245793206527, 0.13304144973915422, 0.15926909620023566, 0.11941487880240309, 0.15116298757325497, 0.13896165488549628, 0.14710980757082293, 0.15314306113373477, 0.1356428108055332, 0.127151619394414, 0.11395176294293108, 0.7873443431176799, 0.8495005530830929, 0.7300521317157971, 0.7572703279763691, 0.7717895645055409, 0.6677217535654439, 0.6716636872756105, 0.6676985548717926, 0.6724745721800931, 0.14533500377649144, 0.1751203906838733, 0.20508345170916953, 0.18923295427894893, 0.17790319857431947, 0.19835103689616285, 0.1710174984568028, 0.14891114469837174, 0.11261673266270644, 0.2054975509212763, 0.09904483508386641, 0.22212344381473037, 0.25066029870633555, 0.13460760979962594, 0.17461082484061385, 0.1850021509947688, 0.12695882835220196, 0.17139032056520898, 0.10548314382468782, 0.03559488407901268, 0.1635643067661955, 0.07824050290315465, 0.07406488834256908, 0.11391263128846874, 0.09941863534042861, 0.12512158629971804, 0.11238449855033217, 0.1106559660629931, 0.039690107286547205, 0.12264685075481119, 0.14206304046480123, 0.10391672245657613, 0.11285351386254494, 0.1297169283560381, 0.08690258108734994, 0.11623242682926882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0621004650722794, 0.05474365935562686, 0.023878559442124248, 0.05490519602682453, 9.999999999998899e-05, 0.03255800647360063, 0.13340838328582938, 0.05987855968347344, 0.04250242334284282, 9.999999999998899e-05, 0.00018815677502115324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012732590848918424, 9.999999999998899e-05, 0.0074058507652543515, 9.999999999998899e-05, 0.07163148823069154, 0.06888401492217366, 0.051645393255851935, 0.05149538079137128, 0.09547646596411974, 0.09101001425724353, 0.055984935964862204, 0.05862436302861129, 0.07036992871326131, 0.3114435974630432, 0.33081832654974774, 0.36750479703424355, 0.3517769580626754, 0.3124307165413889, 0.3156488540063628, 0.3523611847846655, 0.3202710798186723, 0.3712098805167994, 0.043156856145569744, 0.04253217797619813, 0.06638153422301674, 0.06927349786399606, 0.03538806433360464, 0.10764478871908523, 0.039246858845283006, 0.03256124973517294, 0.08561333956893524, 0.16888092507379948, 0.16779001917808345, 0.2415691764222745, 0.22742613617845875, 0.13825904070846318, 0.2071921494029798, 0.18387309542197527, 0.2880686987492327, 0.11654915162500601, 0.13439716864441542, 0.22926001323466516, 0.1723395765055319, 0.2483856088430655, 0.1878469426666186, 0.1643198422005533, 0.21614762374520868, 0.1737382286540382, 0.15045788037712282, 0.14900233079469705, 0.18470338577501333, 0.11217997052253559, 0.1350984622365975, 0.12393458000539126, 0.16295561107796275, 0.10139225875546831, 0.14577889769307495, 0.08196111771390346, 0.1813760569768026, 0.17280684533464863, 0.2167205594633389, 0.18104536133156846, 0.13917279312512731, 0.17869702457910275, 0.18590601597415923, 0.16758704324206752, 0.1766453274929186, 0.19455546492662135, 0.20524227555146324, 0.21589972569006644, 0.1948319932376006, 0.16762492567280607, 0.15718743636687815, 0.1913708330395434, 0.18629579077597613, 0.19044244428186052, 0.32326035118465524, 0.15340232590630898, 0.18976579169426122, 0.4078598663566749, 0.19400963289523665, 0.10143982339144753, 0.14838662364880384, 0.1516326687575269, 0.15611044088647164, 0.20818820490159218, 0.23067903865880557, 0.10632525759469669, 0.1839227513443178, 0.19534440694986732, 0.18378840184192236, 0.09023206239749892, 0.13982841585269234, 0.10865212260316459, 0.17877670965689063, 0.17852142647160418, 0.16631818346448402, 0.16713421239931925, 0.17996836941092242, 0.1693362436740532, 0.18989176469309976, 0.17467392367739543, 0.17894592804405896, 0.05989453629747099, 0.11373640700417675, 0.06533287611959382, 0.06722800776545523, 0.06748767539102807, 0.05339121343354003, 0.10640837274310455, 0.05469006112278729, 0.04947024340131956]}, "mutation_prompt": null}
{"id": "b1f08f87-ee57-468b-b0d3-9be6179d72e8", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_solution[i] += np.random.uniform(-1.0, 1.0)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search by introducing pitch adjustment to explore the search space more effectively.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7669df6a-d0b3-44f5-9b8f-0c0d806b6350", "metadata": {"aucs": [0.35037943195493326, 0.36048712859732146, 0.43001122787741874, 0.309053066048522, 0.3994703894321968, 0.38719534571150493, 0.37675588152339134, 0.4056893185762409, 0.40714632745423773, 0.0672078763797419, 0.09029801692091166, 0.024141287723396854, 0.05722304320869376, 0.08428500832135177, 0.05054293529662013, 0.011679197219426896, 0.09923695875255212, 0.010005944554172141, 0.17716891460599615, 0.1937798917276512, 0.13537339268776194, 0.16592164113693875, 0.16212280617108865, 0.1601142554405215, 0.16362634260104347, 0.15697245793206527, 0.13304144973915422, 0.15926909620023566, 0.11941487880240309, 0.15116298757325497, 0.13896165488549628, 0.14710980757082293, 0.15314306113373477, 0.1356428108055332, 0.127151619394414, 0.11395176294293108, 0.7873443431176799, 0.8495005530830929, 0.7300521317157971, 0.7572703279763691, 0.7717895645055409, 0.6677217535654439, 0.6716636872756105, 0.6676985548717926, 0.6724745721800931, 0.14533500377649144, 0.1751203906838733, 0.20508345170916953, 0.18923295427894893, 0.17790319857431947, 0.19835103689616285, 0.1710174984568028, 0.14891114469837174, 0.11261673266270644, 0.2054975509212763, 0.09904483508386641, 0.22212344381473037, 0.25066029870633555, 0.13460760979962594, 0.17461082484061385, 0.1850021509947688, 0.12695882835220196, 0.17139032056520898, 0.10548314382468782, 0.03559488407901268, 0.1635643067661955, 0.07824050290315465, 0.07406488834256908, 0.11391263128846874, 0.09941863534042861, 0.12512158629971804, 0.11238449855033217, 0.1106559660629931, 0.039690107286547205, 0.12264685075481119, 0.14206304046480123, 0.10391672245657613, 0.11285351386254494, 0.1297169283560381, 0.08690258108734994, 0.11623242682926882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0621004650722794, 0.05474365935562686, 0.023878559442124248, 0.05490519602682453, 9.999999999998899e-05, 0.03255800647360063, 0.13340838328582938, 0.05987855968347344, 0.04250242334284282, 9.999999999998899e-05, 0.00018815677502115324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012732590848918424, 9.999999999998899e-05, 0.0074058507652543515, 9.999999999998899e-05, 0.07163148823069154, 0.06888401492217366, 0.051645393255851935, 0.05149538079137128, 0.09547646596411974, 0.09101001425724353, 0.055984935964862204, 0.05862436302861129, 0.07036992871326131, 0.3114435974630432, 0.33081832654974774, 0.36750479703424355, 0.3517769580626754, 0.3124307165413889, 0.3156488540063628, 0.3523611847846655, 0.3202710798186723, 0.3712098805167994, 0.043156856145569744, 0.04253217797619813, 0.06638153422301674, 0.06927349786399606, 0.03538806433360464, 0.10764478871908523, 0.039246858845283006, 0.03256124973517294, 0.08561333956893524, 0.16888092507379948, 0.16779001917808345, 0.2415691764222745, 0.22742613617845875, 0.13825904070846318, 0.2071921494029798, 0.18387309542197527, 0.2880686987492327, 0.11654915162500601, 0.13439716864441542, 0.22926001323466516, 0.1723395765055319, 0.2483856088430655, 0.1878469426666186, 0.1643198422005533, 0.21614762374520868, 0.1737382286540382, 0.15045788037712282, 0.14900233079469705, 0.18470338577501333, 0.11217997052253559, 0.1350984622365975, 0.12393458000539126, 0.16295561107796275, 0.10139225875546831, 0.14577889769307495, 0.08196111771390346, 0.1813760569768026, 0.17280684533464863, 0.2167205594633389, 0.18104536133156846, 0.13917279312512731, 0.17869702457910275, 0.18590601597415923, 0.16758704324206752, 0.1766453274929186, 0.19455546492662135, 0.20524227555146324, 0.21589972569006644, 0.1948319932376006, 0.16762492567280607, 0.15718743636687815, 0.1913708330395434, 0.18629579077597613, 0.19044244428186052, 0.32326035118465524, 0.15340232590630898, 0.18976579169426122, 0.4078598663566749, 0.19400963289523665, 0.10143982339144753, 0.14838662364880384, 0.1516326687575269, 0.15611044088647164, 0.20818820490159218, 0.23067903865880557, 0.10632525759469669, 0.1839227513443178, 0.19534440694986732, 0.18378840184192236, 0.09023206239749892, 0.13982841585269234, 0.10865212260316459, 0.17877670965689063, 0.17852142647160418, 0.16631818346448402, 0.16713421239931925, 0.17996836941092242, 0.1693362436740532, 0.18989176469309976, 0.17467392367739543, 0.17894592804405896, 0.05989453629747099, 0.11373640700417675, 0.06533287611959382, 0.06722800776545523, 0.06748767539102807, 0.05339121343354003, 0.10640837274310455, 0.05469006112278729, 0.04947024340131956]}, "mutation_prompt": null}
{"id": "26faf7d3-8a35-48f9-9bc4-98b95c9966b4", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_solution[i] += np.random.uniform(-1.0, 1.0)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedHarmonySearch", "description": "Enhancing Harmony Search by introducing pitch adjustment to explore the search space more effectively.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7669df6a-d0b3-44f5-9b8f-0c0d806b6350", "metadata": {"aucs": [0.35037943195493326, 0.36048712859732146, 0.43001122787741874, 0.309053066048522, 0.3994703894321968, 0.38719534571150493, 0.37675588152339134, 0.4056893185762409, 0.40714632745423773, 0.0672078763797419, 0.09029801692091166, 0.024141287723396854, 0.05722304320869376, 0.08428500832135177, 0.05054293529662013, 0.011679197219426896, 0.09923695875255212, 0.010005944554172141, 0.17716891460599615, 0.1937798917276512, 0.13537339268776194, 0.16592164113693875, 0.16212280617108865, 0.1601142554405215, 0.16362634260104347, 0.15697245793206527, 0.13304144973915422, 0.15926909620023566, 0.11941487880240309, 0.15116298757325497, 0.13896165488549628, 0.14710980757082293, 0.15314306113373477, 0.1356428108055332, 0.127151619394414, 0.11395176294293108, 0.7873443431176799, 0.8495005530830929, 0.7300521317157971, 0.7572703279763691, 0.7717895645055409, 0.6677217535654439, 0.6716636872756105, 0.6676985548717926, 0.6724745721800931, 0.14533500377649144, 0.1751203906838733, 0.20508345170916953, 0.18923295427894893, 0.17790319857431947, 0.19835103689616285, 0.1710174984568028, 0.14891114469837174, 0.11261673266270644, 0.2054975509212763, 0.09904483508386641, 0.22212344381473037, 0.25066029870633555, 0.13460760979962594, 0.17461082484061385, 0.1850021509947688, 0.12695882835220196, 0.17139032056520898, 0.10548314382468782, 0.03559488407901268, 0.1635643067661955, 0.07824050290315465, 0.07406488834256908, 0.11391263128846874, 0.09941863534042861, 0.12512158629971804, 0.11238449855033217, 0.1106559660629931, 0.039690107286547205, 0.12264685075481119, 0.14206304046480123, 0.10391672245657613, 0.11285351386254494, 0.1297169283560381, 0.08690258108734994, 0.11623242682926882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0621004650722794, 0.05474365935562686, 0.023878559442124248, 0.05490519602682453, 9.999999999998899e-05, 0.03255800647360063, 0.13340838328582938, 0.05987855968347344, 0.04250242334284282, 9.999999999998899e-05, 0.00018815677502115324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012732590848918424, 9.999999999998899e-05, 0.0074058507652543515, 9.999999999998899e-05, 0.07163148823069154, 0.06888401492217366, 0.051645393255851935, 0.05149538079137128, 0.09547646596411974, 0.09101001425724353, 0.055984935964862204, 0.05862436302861129, 0.07036992871326131, 0.3114435974630432, 0.33081832654974774, 0.36750479703424355, 0.3517769580626754, 0.3124307165413889, 0.3156488540063628, 0.3523611847846655, 0.3202710798186723, 0.3712098805167994, 0.043156856145569744, 0.04253217797619813, 0.06638153422301674, 0.06927349786399606, 0.03538806433360464, 0.10764478871908523, 0.039246858845283006, 0.03256124973517294, 0.08561333956893524, 0.16888092507379948, 0.16779001917808345, 0.2415691764222745, 0.22742613617845875, 0.13825904070846318, 0.2071921494029798, 0.18387309542197527, 0.2880686987492327, 0.11654915162500601, 0.13439716864441542, 0.22926001323466516, 0.1723395765055319, 0.2483856088430655, 0.1878469426666186, 0.1643198422005533, 0.21614762374520868, 0.1737382286540382, 0.15045788037712282, 0.14900233079469705, 0.18470338577501333, 0.11217997052253559, 0.1350984622365975, 0.12393458000539126, 0.16295561107796275, 0.10139225875546831, 0.14577889769307495, 0.08196111771390346, 0.1813760569768026, 0.17280684533464863, 0.2167205594633389, 0.18104536133156846, 0.13917279312512731, 0.17869702457910275, 0.18590601597415923, 0.16758704324206752, 0.1766453274929186, 0.19455546492662135, 0.20524227555146324, 0.21589972569006644, 0.1948319932376006, 0.16762492567280607, 0.15718743636687815, 0.1913708330395434, 0.18629579077597613, 0.19044244428186052, 0.32326035118465524, 0.15340232590630898, 0.18976579169426122, 0.4078598663566749, 0.19400963289523665, 0.10143982339144753, 0.14838662364880384, 0.1516326687575269, 0.15611044088647164, 0.20818820490159218, 0.23067903865880557, 0.10632525759469669, 0.1839227513443178, 0.19534440694986732, 0.18378840184192236, 0.09023206239749892, 0.13982841585269234, 0.10865212260316459, 0.17877670965689063, 0.17852142647160418, 0.16631818346448402, 0.16713421239931925, 0.17996836941092242, 0.1693362436740532, 0.18989176469309976, 0.17467392367739543, 0.17894592804405896, 0.05989453629747099, 0.11373640700417675, 0.06533287611959382, 0.06722800776545523, 0.06748767539102807, 0.05339121343354003, 0.10640837274310455, 0.05469006112278729, 0.04947024340131956]}, "mutation_prompt": null}
{"id": "1827949e-c6cd-4c64-9302-e9593d19fa72", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    new_solution[i] += np.random.uniform(-1.0, 1.0)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedHarmonySearchOpposition", "description": "Enhancing Harmony Search with Opposition-Based Learning to introduce diverse search directions and improve convergence.", "configspace": "", "generation": 24, "fitness": 0.17554824679111097, "feedback": "The algorithm EnhancedHarmonySearchOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "7669df6a-d0b3-44f5-9b8f-0c0d806b6350", "metadata": {"aucs": [0.46051230548081123, 0.41543466721609146, 0.46468982424836547, 0.39098856525143444, 0.38410426359897576, 0.40992091295268474, 0.43760459078227765, 0.4335952910478019, 0.48476463531463676, 0.2122879700888065, 0.007948701417681558, 0.0996052896761479, 0.13903403548189286, 0.00292364088083652, 9.999999999998899e-05, 0.1046450291346187, 0.036303559476621894, 0.10816732950658137, 0.07289973597665833, 0.0719914258413149, 0.09312940453270768, 0.09180317978695496, 0.07852582185001922, 0.08206370964093057, 0.06583068291158756, 0.08340206480071266, 0.06808823750630888, 0.07555192851452663, 0.06457540231970438, 0.06034485965325387, 0.06527834450395353, 0.07938196429082878, 0.07594193452248288, 0.059811552316892835, 0.07373938317406736, 0.063855738456425, 0.8289222246411623, 0.6475883298127976, 0.8263543527367361, 0.8237291793848605, 0.5199114656936065, 0.7016027605030568, 0.09450243238629041, 0.829804612499024, 0.8480967092820277, 0.043904565818188135, 0.11559433371429217, 0.08952494005306688, 0.19637531541627862, 0.23009197401299375, 0.1758309886191346, 0.19802620175208063, 0.16357853584673043, 0.1314283783083955, 0.2046849434580168, 0.1836439532996227, 0.22707607979422928, 0.2560634532084236, 0.1324369761104539, 0.18664212193795082, 0.3053926911103776, 0.3784768395179744, 0.2994541855473465, 0.14329965421118085, 0.12313674193446755, 0.11936110172577641, 0.11196642475632557, 0.09170776383695045, 0.11441242558048048, 0.12832715377344972, 0.13158090694676283, 0.2853659917385175, 0.19270991764256973, 0.11661225644248041, 0.14280746943341704, 0.1332573007641693, 0.12609324553426904, 0.12993981470364813, 0.12697874361471262, 0.04831026662257587, 0.13381699662562552, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04275971497859177, 0.08467779247000129, 0.11327562695917914, 0.04792122301506019, 0.00280917674022807, 0.03428519291670529, 0.12097829331331156, 0.08706163126485011, 0.07499095390547228, 9.999999999998899e-05, 9.999999999998899e-05, 0.011246797688919452, 0.006517813241248005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06278374031169076, 0.0020430755672373735, 0.034585594163546785, 0.1099619925621429, 0.06862554180366665, 0.09153398761130871, 0.10490503177705524, 0.0943960423126331, 0.09474201683389294, 0.10381862128038521, 0.06964102778638515, 0.3823277109606288, 0.4223522217945963, 0.34185830383144544, 0.39111449293442835, 0.2990300394744331, 0.3232890585191208, 0.4201166810511632, 0.41502972095738955, 0.38870155283552343, 0.0953572649988178, 0.07824233728751973, 0.10126579566290728, 0.08709079041273748, 0.08994475135830493, 0.08091339975606038, 0.06821787015682257, 0.08430387899594638, 0.0826880839862788, 0.10137598585129559, 0.10298717833938242, 0.10602611159021491, 0.12341714282904448, 0.12403044947385822, 0.11621670390745698, 0.09445231426320677, 0.11999859434888527, 0.13510118260475612, 0.29809888594925127, 0.2949988745022243, 0.31873491407922216, 0.22121574043379655, 0.30616672680205903, 0.22379683815770268, 0.21173631320404196, 0.2650036254529795, 0.27867216655551597, 0.1336490764939413, 0.2403965056673958, 0.2606011431926183, 0.2014063130671806, 0.21845734533131878, 0.22395807250935285, 0.1471846941419237, 0.13864489032577398, 0.19288060617791603, 0.2114956190502828, 0.16658082723109435, 0.2178637019397579, 0.18394793930863818, 0.19048893225289898, 0.2119756000485189, 0.21850808375419795, 0.20375878518313506, 0.20350937873832597, 0.16505806683573887, 0.18551217244646512, 0.1714493239365973, 0.1852374752875361, 0.16940997193444673, 0.21553596990953916, 0.1814230905560723, 0.2008014748640321, 0.16853900787784293, 0.16435035955974475, 0.16583808552210666, 0.18244886681990014, 0.39509661975258226, 0.1728726284980614, 0.11255423402634046, 0.1506301311786703, 0.182965320029852, 0.14222062208718778, 0.288083891143014, 0.13752517982016343, 0.25130941944247953, 0.17830788067709835, 0.16491575739952546, 0.18284269693424837, 0.21886095001691752, 0.168779816189204, 0.2076182483738721, 0.1708084437273033, 0.16852084996655303, 0.18072224790671843, 0.17583403741936654, 0.16515786613262684, 0.17235269583068857, 0.16370686296599635, 0.16611253248178526, 0.19395415805116145, 0.07770170524061648, 0.07884791946237113, 0.07993118014350309, 0.07469085718009805, 0.07070354241125221, 0.06956496189191708, 0.07058200772168333, 0.06983924904307082, 0.07779211943912523]}, "mutation_prompt": null}
{"id": "d1c08c77-4ea5-4226-bda1-1493455a774d", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "ImprovedHarmonySearchOpposition", "description": "Improving EnhancedHarmonySearchOpposition by incorporating a dynamic pitch adjustment mechanism to adapt step sizes per dimension during improvisation.", "configspace": "", "generation": 25, "fitness": 0.17690783486761885, "feedback": "The algorithm ImprovedHarmonySearchOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.16.", "error": "", "parent_id": "1827949e-c6cd-4c64-9302-e9593d19fa72", "metadata": {"aucs": [0.510200616837269, 0.4459373972311891, 0.4845654753275317, 0.3804776713774135, 0.4536015323669299, 0.5372940199035867, 0.5025902142218166, 0.47481748384174627, 0.5490137406452571, 0.18973553212793803, 0.19932997497480576, 9.999999999998899e-05, 0.0951725656771103, 9.999999999998899e-05, 0.04312395578984707, 0.04905935358007085, 0.12367243974949726, 0.0997565850588773, 0.10835389756632974, 0.09946511271390501, 0.06870631505948055, 0.05662907803475914, 0.09476565893482003, 0.0739422202877913, 0.07396542263506833, 0.05407787198029723, 0.06169966828741058, 0.09200550131438756, 0.037383857497386264, 0.06912044657113914, 0.08726800014527503, 0.039685714575541486, 0.07125041892237283, 0.06895608908222528, 0.07960600277309782, 0.05382960946555326, 0.843829584924585, 0.7739773180313534, 0.7961722483262841, 0.8354681737093496, 0.8607500867573955, 0.47839102069871897, 0.7942746873825617, 0.7042170907795031, 0.5051919911720727, 0.1611637144078799, 0.1575683946569727, 0.056420986393004524, 0.20102261092132556, 0.2077176089288496, 0.10345160807603004, 0.20256183281567297, 0.08107889060067686, 0.0457111107633289, 0.13547690077310304, 0.17475926214950321, 0.24448086106801215, 0.15244293721036606, 0.1528221330158529, 0.14700335785105345, 0.13531046554298243, 0.16225508752481144, 0.3115150345857397, 0.16715279558034213, 0.14189981722345035, 0.11292322346912043, 0.12461653696519093, 0.180006261425547, 0.1419429358390727, 0.13868510895258912, 0.15293696177614235, 0.12106694043206878, 0.1372022054781622, 0.10439992153641431, 0.10418991604744188, 0.14048917774457115, 0.1335170213992678, 0.13422586092946054, 0.14618902864807637, 0.17505363800843077, 0.1301944021926047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1774394867800707, 9.999999999998899e-05, 9.999999999998899e-05, 0.04009616366327651, 9.999999999998899e-05, 0.06905249594236484, 0.07222599795148377, 0.0966617743822733, 0.06126809519963394, 0.023181744156287265, 0.056031227327459576, 0.1773943046252252, 0.02500428682137512, 0.11001166013364494, 0.03550069498248032, 0.04920028528319964, 0.05559399307609669, 0.00048410399993603637, 0.053110912215844075, 0.05481154520128961, 0.05372743519870782, 0.02686100421841653, 0.02194403328623651, 0.060312343680285596, 0.09837363207537697, 0.06204077996783508, 0.01416421229372844, 0.07168958405224202, 0.15167946103495178, 0.0040112771273392855, 0.053549990875768394, 0.02860288682438772, 0.3589618706094878, 0.3663284137325039, 0.35020305682312924, 0.35044729880528425, 0.38661984729564447, 0.31160015911396144, 0.3805351255122703, 0.36179346956492187, 0.3520946967204158, 0.07750042500414145, 0.07457238604839289, 0.07801430264943465, 0.08502939767471795, 0.07798192393024661, 0.09023180396852892, 0.06614596612547408, 0.07751488016643271, 0.10342917798895956, 0.13162633541120794, 0.10357322944620706, 0.1580662102687529, 0.10320718601944845, 0.11211890352373555, 0.10088821205909937, 0.11158220488879722, 0.14517847708349696, 0.12341469730208521, 0.1619966617223394, 0.33497190867950744, 0.20294301280242488, 0.22193435567917952, 0.23875185110732022, 0.20297732230777077, 0.2013128275004228, 0.2141982770719285, 0.28826723007718913, 0.19957891103336223, 0.2509074929457782, 0.11575721154559182, 0.20096118982389788, 0.21684010517331498, 0.22893761609897778, 0.18386323063763443, 0.15681662887055703, 0.20798476126178578, 0.18885292153838484, 0.2161434807732806, 0.23285976786555862, 0.19552963567490755, 0.2172575036996658, 0.19980989357062673, 0.18188530930935876, 0.19301901831107648, 0.21665399694314513, 0.19029137347490965, 0.15671134234506934, 0.1638395792516143, 0.17918316347518026, 0.17031367719797563, 0.1868113146161937, 0.18557218579975177, 0.17545353173968847, 0.16546306857356774, 0.18471522255765438, 0.185836028121384, 0.2412605682427491, 0.5789020717139812, 0.1849760775727114, 0.11754082348861028, 0.15236926268286388, 0.14219238435495496, 0.11920626845375759, 0.41029388833681635, 0.18801028974877654, 0.09965122053500997, 0.0945276822840031, 0.14955278576495135, 0.17077787413793866, 0.12543598588246663, 0.16892489126939714, 0.1339232747350141, 0.18248931777963606, 0.16020545601367264, 0.19566696042846476, 0.18255957404711387, 0.17627260707182435, 0.17658150415102425, 0.18767708732380406, 0.18240961219511043, 0.1728071379524495, 0.0905322465297802, 0.0825236859136026, 0.07377875312028914, 0.06719090321404564, 0.0893204304497125, 0.0858243362043033, 0.0854418171041067, 0.07108376996505794, 0.07260790617302504]}, "mutation_prompt": null}
{"id": "8f935092-7de8-4b0b-a172-7e4493dd2406", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "ImprovedHarmonySearchOpposition", "description": "Improving EnhancedHarmonySearchOpposition by incorporating a dynamic pitch adjustment mechanism to adapt step sizes per dimension during improvisation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1c08c77-4ea5-4226-bda1-1493455a774d", "metadata": {"aucs": [0.510200616837269, 0.4459373972311891, 0.4845654753275317, 0.3804776713774135, 0.4536015323669299, 0.5372940199035867, 0.5025902142218166, 0.47481748384174627, 0.5490137406452571, 0.18973553212793803, 0.19932997497480576, 9.999999999998899e-05, 0.0951725656771103, 9.999999999998899e-05, 0.04312395578984707, 0.04905935358007085, 0.12367243974949726, 0.0997565850588773, 0.10835389756632974, 0.09946511271390501, 0.06870631505948055, 0.05662907803475914, 0.09476565893482003, 0.0739422202877913, 0.07396542263506833, 0.05407787198029723, 0.06169966828741058, 0.09200550131438756, 0.037383857497386264, 0.06912044657113914, 0.08726800014527503, 0.039685714575541486, 0.07125041892237283, 0.06895608908222528, 0.07960600277309782, 0.05382960946555326, 0.843829584924585, 0.7739773180313534, 0.7961722483262841, 0.8354681737093496, 0.8607500867573955, 0.47839102069871897, 0.7942746873825617, 0.7042170907795031, 0.5051919911720727, 0.1611637144078799, 0.1575683946569727, 0.056420986393004524, 0.20102261092132556, 0.2077176089288496, 0.10345160807603004, 0.20256183281567297, 0.08107889060067686, 0.0457111107633289, 0.13547690077310304, 0.17475926214950321, 0.24448086106801215, 0.15244293721036606, 0.1528221330158529, 0.14700335785105345, 0.13531046554298243, 0.16225508752481144, 0.3115150345857397, 0.16715279558034213, 0.14189981722345035, 0.11292322346912043, 0.12461653696519093, 0.180006261425547, 0.1419429358390727, 0.13868510895258912, 0.15293696177614235, 0.12106694043206878, 0.1372022054781622, 0.10439992153641431, 0.10418991604744188, 0.14048917774457115, 0.1335170213992678, 0.13422586092946054, 0.14618902864807637, 0.17505363800843077, 0.1301944021926047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1774394867800707, 9.999999999998899e-05, 9.999999999998899e-05, 0.04009616366327651, 9.999999999998899e-05, 0.06905249594236484, 0.07222599795148377, 0.0966617743822733, 0.06126809519963394, 0.023181744156287265, 0.056031227327459576, 0.1773943046252252, 0.02500428682137512, 0.11001166013364494, 0.03550069498248032, 0.04920028528319964, 0.05559399307609669, 0.00048410399993603637, 0.053110912215844075, 0.05481154520128961, 0.05372743519870782, 0.02686100421841653, 0.02194403328623651, 0.060312343680285596, 0.09837363207537697, 0.06204077996783508, 0.01416421229372844, 0.07168958405224202, 0.15167946103495178, 0.0040112771273392855, 0.053549990875768394, 0.02860288682438772, 0.3589618706094878, 0.3663284137325039, 0.35020305682312924, 0.35044729880528425, 0.38661984729564447, 0.31160015911396144, 0.3805351255122703, 0.36179346956492187, 0.3520946967204158, 0.07750042500414145, 0.07457238604839289, 0.07801430264943465, 0.08502939767471795, 0.07798192393024661, 0.09023180396852892, 0.06614596612547408, 0.07751488016643271, 0.10342917798895956, 0.13162633541120794, 0.10357322944620706, 0.1580662102687529, 0.10320718601944845, 0.11211890352373555, 0.10088821205909937, 0.11158220488879722, 0.14517847708349696, 0.12341469730208521, 0.1619966617223394, 0.33497190867950744, 0.20294301280242488, 0.22193435567917952, 0.23875185110732022, 0.20297732230777077, 0.2013128275004228, 0.2141982770719285, 0.28826723007718913, 0.19957891103336223, 0.2509074929457782, 0.11575721154559182, 0.20096118982389788, 0.21684010517331498, 0.22893761609897778, 0.18386323063763443, 0.15681662887055703, 0.20798476126178578, 0.18885292153838484, 0.2161434807732806, 0.23285976786555862, 0.19552963567490755, 0.2172575036996658, 0.19980989357062673, 0.18188530930935876, 0.19301901831107648, 0.21665399694314513, 0.19029137347490965, 0.15671134234506934, 0.1638395792516143, 0.17918316347518026, 0.17031367719797563, 0.1868113146161937, 0.18557218579975177, 0.17545353173968847, 0.16546306857356774, 0.18471522255765438, 0.185836028121384, 0.2412605682427491, 0.5789020717139812, 0.1849760775727114, 0.11754082348861028, 0.15236926268286388, 0.14219238435495496, 0.11920626845375759, 0.41029388833681635, 0.18801028974877654, 0.09965122053500997, 0.0945276822840031, 0.14955278576495135, 0.17077787413793866, 0.12543598588246663, 0.16892489126939714, 0.1339232747350141, 0.18248931777963606, 0.16020545601367264, 0.19566696042846476, 0.18255957404711387, 0.17627260707182435, 0.17658150415102425, 0.18767708732380406, 0.18240961219511043, 0.1728071379524495, 0.0905322465297802, 0.0825236859136026, 0.07377875312028914, 0.06719090321404564, 0.0893204304497125, 0.0858243362043033, 0.0854418171041067, 0.07108376996505794, 0.07260790617302504]}, "mutation_prompt": null}
{"id": "6e9623c8-b36f-41d4-9db8-413af6c66776", "solution": "import numpy as np\n\nclass AdaptiveHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.initial_bandwidth = initial_bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.bandwidths = np.full(dim, initial_bandwidth)\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidths[i]:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            for i in range(self.dim):\n                self.bandwidths[i] = np.clip(self.bandwidths[i] + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "AdaptiveHarmonySearchOpposition", "description": "Enhancing the algorithm by introducing adaptive bandwidth for each dimension based on local convergence rates to improve exploration and exploitation balance.", "configspace": "", "generation": 27, "fitness": 0.1690212236188334, "feedback": "The algorithm AdaptiveHarmonySearchOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "d1c08c77-4ea5-4226-bda1-1493455a774d", "metadata": {"aucs": [0.5293396504864538, 0.5565918129238134, 0.4996469883898047, 0.11219038831447214, 0.4392493775117684, 0.43122861746338825, 0.43031902536579436, 0.4875764287360098, 0.4980399182055315, 0.14325402178161584, 9.999999999998899e-05, 0.00039800290510394465, 0.009926083415040421, 0.11921139454592244, 0.09693007209766857, 0.09574127563484758, 0.12695051895145226, 0.17550249571251075, 0.08039434777666632, 0.10602794559408191, 0.07921541194527049, 0.06538887043203812, 0.08155205674196264, 0.1029498977613883, 0.05180964426329171, 0.06903442089170475, 0.08798861159043758, 0.06136692008326461, 0.04074800606806617, 0.06463961482609792, 0.07396655766562688, 0.0506519402948834, 0.08513535367260283, 0.05810900149938503, 0.058007398399793075, 0.05782219261363186, 0.9285891210943765, 0.8312455864810997, 0.8147820563781331, 0.7428603975190955, 0.7291504073345823, 0.839341264978726, 0.32791589843113456, 0.8279179257060316, 0.7859996405345651, 0.18557562997230748, 0.0040533628364739505, 0.12771466253343222, 0.10187991517774775, 0.09817480750192975, 0.06080788727744879, 0.19238313720053124, 0.07252241353577937, 0.02470476808588118, 0.15920723175772178, 0.12927111661145152, 0.21678668765317854, 0.1984191379920699, 0.12015983800779362, 0.08455512948930499, 0.14967648278307555, 0.17245264799238536, 0.22979304527612654, 0.3571948428292935, 9.999999999998899e-05, 0.09495186385347132, 0.1518951140125302, 0.10649432252083113, 0.1278343713021517, 0.12082377977887282, 0.128834826083699, 0.21999983577252846, 0.1380901580604481, 0.10073258450274658, 0.12684403722317295, 0.13174638816518236, 0.13851265384227396, 0.13185084077340303, 0.15334999327506615, 9.999999999998899e-05, 0.1170913129108454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323062306558878, 9.999999999998899e-05, 0.13400958258939777, 0.03392508639991487, 0.07354612157482321, 0.06859713516788346, 0.022283303362413576, 0.018662395161186174, 0.12543894246586207, 0.06030490442689462, 0.08360468275964195, 0.09171369565344778, 9.999999999998899e-05, 0.12194969735088745, 0.037947887004262326, 0.03293516925188433, 0.012765654889969502, 0.029905889560553955, 0.04023458448431316, 0.023873236890027516, 0.06530362336617856, 0.06869388235401563, 0.07855194520565545, 9.999999999998899e-05, 0.04761039084227181, 0.034665002344964724, 9.999999999998899e-05, 0.10470472890953875, 0.02861736342684762, 0.3365128915163842, 0.3661014660968116, 0.4170938503281364, 0.31294827412928405, 0.32804011512004294, 0.18090719811701073, 0.37889408278077963, 0.31556662511244893, 0.3548513462246099, 0.08591097735241693, 0.07391615333788504, 0.0702386702258262, 0.08544633009877545, 0.10272377803292843, 0.05751011127475025, 0.06593606860748236, 0.07938155896157062, 0.07535043975985445, 0.12083135637709708, 0.09032808635950806, 0.11718667120555115, 0.1079991003508125, 0.09935977534546037, 0.09658555912332722, 0.11127345432467062, 0.09797369078898377, 0.10663220236034454, 0.23422495221241113, 0.27120268472535536, 0.18367854356254287, 0.27360400779272553, 0.3466570337502851, 0.29191255716487363, 0.24510579265580568, 0.2944431314462933, 0.28815706574926225, 0.19892832026292584, 0.2795084537464916, 0.11203743512412945, 0.14955055227231673, 0.30407406713526397, 0.16113486848084557, 0.1876785896877572, 0.2657078479355921, 0.15748670018890332, 0.2057859029828637, 0.19721962221616474, 0.22265365059523057, 0.21858939726612503, 0.2305677376219485, 0.2189320225801057, 0.19455328358695145, 0.2081212514069959, 0.1764505999542072, 0.16938567495080648, 0.19225675902793393, 0.1661619764977631, 0.1554211142300237, 0.15711101821119333, 0.2000043336667643, 0.1634601839059191, 0.17275981785585248, 0.17331054523253264, 0.1750168102404046, 0.1154320707616131, 0.13717878987654963, 0.465793679076312, 0.13408908444836032, 0.19152857960657654, 0.1338491878894139, 0.12459053707203316, 0.15589984702788917, 0.2030141519129245, 0.10709273944647724, 0.12310013701130607, 0.11922702146075737, 0.17214210597491253, 0.18806162438772767, 0.18549356239492587, 0.15531369850502053, 0.12076630888879847, 0.16734647222264887, 0.16597920527474708, 0.1757337848214996, 0.16425791000083678, 0.1577693984928994, 0.16556374137020646, 0.17415086684348902, 0.1739696864028245, 0.1651796979333776, 0.0783089700959183, 0.06581945539272749, 0.08888374018118916, 0.08192121132842445, 0.07150361977430753, 0.06995683156557753, 0.07231841273693462, 0.07378773559472396, 0.0716393785390419]}, "mutation_prompt": null}
{"id": "ddbc18f9-12d3-45f5-93aa-71d72b7d26d6", "solution": "import numpy as np\n\nclass AdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "AdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing the ImprovedHarmonySearchOpposition algorithm by introducing adaptive memory consideration and an elitism mechanism to preserve the best solutions found.", "configspace": "", "generation": 28, "fitness": 0.19301184776683714, "feedback": "The algorithm AdaptiveMemoryHarmonySearchOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "d1c08c77-4ea5-4226-bda1-1493455a774d", "metadata": {"aucs": [0.5631942254225996, 0.4846251330195377, 0.5002937641839353, 0.6916962744338302, 0.5842491225061672, 0.41658686552957547, 0.6272899498124038, 0.49494596022564985, 0.5267532593927604, 0.24530705658404084, 0.09903182111454933, 0.012414627995604333, 0.10878994725361135, 0.1310013466838894, 0.17294594105380456, 9.999999999998899e-05, 0.11602642144866238, 0.03203674559149117, 0.10187073839778604, 0.057320999428378094, 0.11845515957337427, 0.11653428135625832, 0.08721429972771855, 0.05726649810770923, 0.08987786857437696, 0.09495288022143233, 0.06641560834894367, 0.08350602596083023, 0.08787826038590707, 0.06942201974560025, 0.09726572068444717, 0.07567813326739248, 0.07263134051191522, 0.06616988154655645, 0.07136081023669993, 0.07615864957718443, 0.8362306066003902, 0.9245194925270295, 0.8433228612763299, 0.8220604195600768, 0.8904704583769644, 0.726416564456456, 0.7854989574583074, 0.8903462734423397, 0.613297706638795, 0.1563105356851271, 0.10546002653301034, 0.07884396238827263, 0.12281403919290201, 0.12204954311410654, 0.10547349313025933, 0.18077101503085757, 0.10987210729487418, 0.05876304298837842, 0.24248524536742666, 0.16897720761191481, 0.11292518388726114, 0.20773439511009584, 0.18671233525832664, 0.16220144906173828, 0.11855908374296265, 0.3180830665427189, 0.21044606262472298, 0.14279616447055554, 0.13847499254123363, 0.006315150292449889, 0.1492023073771408, 0.009557613044442026, 0.19298709371363099, 0.12219699317213994, 0.12748260224901808, 0.12268493925275248, 0.1334828262893114, 0.0014591609405366635, 0.14126270938684482, 0.12231212474662823, 0.14066058215970367, 0.14578150219322583, 0.1742752825916345, 0.11652615834609592, 0.13340690645515807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0831113584007277, 9.999999999998899e-05, 0.16847152374507512, 0.06336721099093467, 0.07486013988785722, 0.06607966691611711, 0.03670125606743346, 0.044603637946512564, 0.1302917174710756, 0.031990269215340095, 0.13489960000985213, 0.11307664820773511, 0.14056600035206535, 0.07409748262893079, 0.053326056457015714, 0.17268117326214338, 0.05449959327277609, 0.0884743695321224, 0.05157506659730604, 0.04192763951907197, 0.033763588310196435, 0.15149928453670636, 0.05877140681595061, 0.06286562841058674, 0.02873559402773096, 0.08888808314101748, 0.04869170422811786, 0.048541128905094766, 0.03180137994779175, 0.3710741135637967, 0.4256306414705361, 0.28477967810027416, 0.3231603837899034, 0.5234624358735873, 0.36831064631526, 0.44187997034926296, 0.3661459923894579, 0.3144699320936424, 0.10133720590560946, 0.08777112714574309, 0.07635022764588795, 0.08440298142361025, 0.09609566895036292, 0.08591479385924938, 0.10204875565105354, 0.1030605925820186, 0.07777904041263906, 0.14403198641331205, 0.12259040392443765, 0.11199873379423153, 0.12296252169729105, 0.14646265423371696, 0.13841016434258613, 0.1313305893601704, 0.11668346327527723, 0.12453138513209339, 0.21106186069926336, 0.370274646411751, 0.19994815134008437, 0.3066819479505519, 0.31383537253427307, 0.27168130139267554, 0.21801028272860268, 0.3741721086554852, 0.21465152760084805, 0.14926112481186393, 0.3051412575552648, 0.19061292623275272, 0.27292961075047806, 0.3368511167991275, 0.25964033595277636, 0.2804297953147926, 0.17269172554516632, 0.13601760585693956, 0.23742922268261768, 0.19440861517575014, 0.21006635218071856, 0.2149266608821654, 0.20791494958792844, 0.21972126634801448, 0.24962337778897892, 0.20996454201310177, 0.20012132905901714, 0.15166198216632143, 0.21720385311221824, 0.19713635556279674, 0.1736177962202997, 0.20159999582595267, 0.22382349551669545, 0.19718057098573827, 0.16216221546915133, 0.16645133597035422, 0.1854055083064986, 0.17555053476582583, 0.18464300225140906, 0.4685478574509302, 0.16256275633230943, 0.1689577336740209, 0.4492914608069818, 0.11146445531198956, 0.30019207365355227, 0.23714549612917168, 0.19390653989343565, 0.41223387474283024, 0.14798894691929942, 0.163464732292808, 0.1850158290199101, 0.10179812825913381, 0.10149498491263254, 0.258797576269299, 0.16173262041859304, 0.17487184504868325, 0.20208691604271667, 0.17055009776387142, 0.17500630683735197, 0.17878136114939136, 0.18032661514526205, 0.17021284353762334, 0.17671595835359044, 0.07592428639443438, 0.08479091381217063, 0.10321582212284397, 0.1144058119900575, 0.0834227067759199, 0.07965473426773606, 0.08825291053699291, 0.08114793136963305, 0.07167914987033241]}, "mutation_prompt": null}
{"id": "5e012885-8f6a-4eb5-9715-23dc0bdb9656", "solution": "import numpy as np\n\nclass DynamicPitchAdjAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory, eval_count):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate * (eval_count / self.budget):  # Dynamic adjustment\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        eval_count = 0\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory, eval_count)\n            eval_count += 1\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicPitchAdjAdaptiveMemoryHarmonySearchOpposition", "description": "Introducing dynamic pitch adjustment based on function evaluations to improve exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.16929801175235112, "feedback": "The algorithm DynamicPitchAdjAdaptiveMemoryHarmonySearchOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "ddbc18f9-12d3-45f5-93aa-71d72b7d26d6", "metadata": {"aucs": [0.4113462190891972, 0.3736443778398527, 0.32121563891687355, 0.3668593875200742, 0.24579066518959103, 0.11694423745892579, 0.2827536573011833, 0.2903900269520847, 0.24744993093193102, 0.2031516696043223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14974283137987443, 9.999999999998899e-05, 0.22664486164405762, 0.10044935967770507, 0.008447160533188836, 0.12638818731302814, 0.09662311298425008, 0.0683278638615904, 0.09161735102312485, 0.09066331388176951, 0.09166521371846592, 0.08096471416707296, 0.06558824404491659, 0.09705086341909552, 0.07986282715091553, 0.07381742058591823, 0.0576187718051695, 0.08819114678813245, 0.07530162014408748, 0.06792513217873752, 0.09047691699329585, 0.08808710921330798, 0.06430235131270767, 0.924694161268587, 0.7947031861782723, 0.7587615530320182, 0.8297359206225838, 0.8671373174782261, 0.8369842469055175, 0.7896664868744748, 0.791436469964782, 0.6311841539924529, 0.09338971496374104, 0.06180064996458279, 0.02072732486171447, 0.06982006741946845, 0.11179983362393564, 0.03680824657473791, 0.15205933157485685, 0.08654355164784433, 0.13818935740182425, 0.22570925932110752, 0.1354696286997985, 0.16625788187738366, 0.18483093416915886, 0.18726951146615578, 0.13199585923520551, 0.12794621277709972, 0.1828684167300001, 0.1725178776416234, 0.05707874375060018, 0.1148487386270004, 0.040115210239912824, 0.03235388954038132, 0.12769596239418368, 0.14379908936640662, 0.06547139685013259, 0.20955809055890828, 0.07105476599915606, 0.14596441113021952, 0.1171445041778767, 0.13628533519935282, 0.1371822658732169, 0.1302846168687153, 0.2542473213935893, 0.1629319081727998, 0.08874205386673417, 0.11729911637413593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053927371303665095, 0.01296983140364194, 0.08406477551769809, 0.03026405016809508, 0.07760725148309444, 0.056257112799391495, 0.06095730759520157, 0.016698756738064202, 0.09089985200926565, 0.08407237026809766, 0.09964369001960238, 9.999999999998899e-05, 0.0998308883811666, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003459510434715596, 0.07980476979165874, 0.023801570724650056, 9.999999999998899e-05, 0.1144652838863871, 0.06344492320683315, 9.999999999998899e-05, 9.999999999998899e-05, 0.032299956625275406, 0.02728582777574351, 0.009217415256442152, 0.004275844897818515, 0.020387175983578865, 0.2945229795298726, 0.3602397606910678, 0.26024908305126637, 0.25427884845152293, 0.28358714395354045, 0.5088563064636618, 0.23881455452422573, 0.37850558655647626, 0.31621217466079854, 0.08443624481323475, 0.08604450567702315, 0.09885428786435002, 0.08310030754207254, 0.08552121030677262, 0.11057464943582418, 0.1069295166116524, 0.1293570084608957, 0.09106255457941259, 0.13019309536382317, 0.13219833745526444, 0.11905231223311907, 0.12890392777763449, 0.20424679110884703, 0.13018588404005094, 0.12567339951544232, 0.13046097916203303, 0.1476295115407198, 0.16911141934315943, 0.2609444175802017, 0.16809317742206809, 0.2537821073038139, 0.2971108826077906, 0.287745255071581, 0.2078042929031243, 0.25645925392253455, 0.17169128028451264, 0.30400381008164445, 0.22315173475184535, 0.12057854113859212, 0.29485075112491965, 0.23224612549761392, 0.431564195073763, 0.1704464407064632, 0.1865421442063413, 0.14979756937895783, 0.19551262496391242, 0.2035941061677794, 0.21417548020708332, 0.2166515574636475, 0.23046571728308296, 0.21366878249148424, 0.19929344230891888, 0.1996859459773399, 0.1879665918338984, 0.19284814933240113, 0.15249953542319783, 0.1776762658578429, 0.17479415672317555, 0.17606536309517273, 0.18441372855353355, 0.1850410811984582, 0.1735128771435891, 0.09397471356685982, 0.1813204689867346, 0.14542300759276472, 0.15881986900600953, 0.5477421914659317, 0.1207326411011933, 0.17069930967715918, 0.7754392161058226, 0.2561851772236292, 0.12512903856766844, 0.19921544666405244, 0.07142106725057673, 0.2151668308471073, 0.1365459357995331, 0.15346958592280247, 0.19929704213185706, 0.20748016157598625, 0.17342580490194504, 0.145790387232268, 0.17335536327254653, 0.19432905761821617, 0.1893467827316444, 0.17597140943329925, 0.15985701854711065, 0.1990394375096889, 0.18317149142794265, 0.18337378843908148, 0.17676730361217619, 0.08259342262292124, 0.07634024979859366, 0.07910670095290939, 0.08635525241616493, 0.08336286668616033, 0.09033575401385407, 0.07228487772176717, 0.07707682477686628, 0.07584297796793305]}, "mutation_prompt": null}
{"id": "fc7627c2-ad3e-4aac-be59-02ebf6f504f5", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMemoryHarmonySearchOppositionDynamicPitch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    # Dynamic pitch adjustment based on landscape analysis\n                    func_values = func(harmony_memory)\n                    min_func_val = np.min(func_values)\n                    max_func_val = np.max(func_values)\n                    pitch_range = (max_func_val - min_func_val) * np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "ImprovedAdaptiveMemoryHarmonySearchOppositionDynamicPitch", "description": "Introducing dynamic pitch adjustment based on function landscape analysis to enhance exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": 0.14515376829065094, "feedback": "The algorithm ImprovedAdaptiveMemoryHarmonySearchOppositionDynamicPitch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "ddbc18f9-12d3-45f5-93aa-71d72b7d26d6", "metadata": {"aucs": [0.5230426640384254, 0.4037011453192265, 0.25846893477068267, 0.2293592171658404, 0.4320769044847306, 0.3054063000500008, 0.2283604852810016, 0.3787528167200933, 0.2697035151351007, 0.0876614741130528, 0.046082435787857645, 9.999999999998899e-05, 0.2900578800238248, 0.09114429884305864, 0.0027790359071521165, 0.004281281290039796, 0.03102827921950424, 0.023555591036046097, 0.06569802665828806, 0.058231204744027654, 0.08881448516473267, 0.05917158286461166, 0.06244715800114131, 0.0783574869680741, 0.06656371792639215, 0.051075631566599444, 0.06587180597544628, 0.04703391184485606, 0.04741608329286151, 0.037767161967746876, 0.060442917358242476, 0.06429619218424776, 0.04281581375927035, 0.07661898595729688, 0.051955372796428256, 0.060483588201120986, 0.87061599706555, 0.8512623550935692, 0.49259728221704124, 0.695030524029662, 0.8840548220666654, 0.4757441277301716, 0.6404451676824772, 0.787626124298428, 0.6486835775556412, 0.10562043348774475, 0.06846682571147122, 0.09183051620473381, 0.08793964125611198, 0.1413895424502042, 0.10469064680443374, 0.11433166222806335, 0.07996353447512428, 0.09682827322834042, 0.14782823140784218, 0.16776566306204477, 0.19160607967305432, 0.19638470390186735, 0.1877707937090365, 0.3046448675776644, 0.1295973192805806, 0.19666911861894998, 0.14198455350017536, 0.0040872363723161165, 0.10806731169133454, 0.11943569254830255, 0.18118981340629525, 0.04140942514793533, 0.03806302039144649, 0.09247228378153627, 0.05797502685769651, 0.052306653115330115, 0.10768893254387513, 0.07426674915738274, 0.07969265280329074, 0.11148975930872751, 0.11559673460844877, 0.10956648238341371, 0.09114127114063142, 0.08888869692886325, 0.1520003707766704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027888542131521143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061970676199458063, 0.02058988127376782, 0.06173173657233988, 0.021169682460719375, 9.999999999998899e-05, 0.010628180563654444, 0.02160316687849917, 0.005724282110321499, 0.05714242961876448, 0.0007838051917191668, 9.999999999998899e-05, 9.999999999998899e-05, 0.041057313071536705, 0.05806556339203994, 0.004746938625581842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000659048435448728, 0.0749922573151458, 0.03549055515638433, 0.04999340619465098, 0.0760232415544182, 0.06152398581339713, 0.0077514246397726305, 0.02356494776889262, 0.02708625377888052, 0.40427934298081536, 0.37122661095776255, 0.21387752694824835, 0.1977684154753373, 0.26272259107500096, 0.24455046956376514, 0.4197855238410957, 0.43951208211825976, 0.2551854279336385, 0.08330476204939496, 0.07353381375604784, 0.0625558670295977, 0.058724345552191304, 0.07053167303021857, 0.06153063615336396, 0.06831331919219263, 0.06945179850914096, 0.0703643457968055, 0.092478593432743, 0.09927256674911022, 0.11039479718207423, 0.09853490957846645, 0.11424906561020565, 0.09096850301934989, 0.121471189848532, 0.091646719059854, 0.08545725486098077, 0.20280160887993892, 0.20476964333407655, 0.15568070572335924, 0.22667571020819377, 0.23855872814364698, 0.22176066629325442, 0.2792669070138537, 0.2677478293777479, 0.17829303730598567, 0.17469311789973707, 0.195764485228489, 0.11055827493620185, 0.16365707239751426, 0.15393908653487798, 0.20237979142682483, 0.13009643076558075, 0.1611889385824523, 0.13978649355213224, 0.17622577487194757, 0.1835916525104626, 0.18489679608228837, 0.17168188843482346, 0.1897241232537531, 0.16643418831714285, 0.1936228910513672, 0.1549424498959201, 0.1747460979559624, 0.1575316803241934, 0.1518489501274367, 0.15989895758177575, 0.15957895108983267, 0.1499563172371816, 0.16230089863190755, 0.16123017890197822, 0.1647027937030211, 0.14912779705061185, 0.10736351810034395, 0.16442587530777697, 0.16234463832131518, 0.29597332083222605, 0.1338836471346675, 0.19521153180812634, 0.1092524762647552, 0.13539078504565172, 0.1486894667160502, 0.13529957804974835, 0.07315522184992407, 0.16064947064686252, 0.10661586619734731, 0.14399951650970144, 0.1526847200889917, 0.15278144699953666, 0.1162637297572735, 0.16641851575055677, 0.13845566843817836, 0.1451124086859752, 0.17299774600034923, 0.15854479736856397, 0.14111583130110794, 0.163953289886407, 0.1668641250080546, 0.18142783767771442, 0.17299249652322668, 0.07834917255098428, 0.06998794957330723, 0.05492341525203703, 0.06306348148459551, 0.057537785584623635, 0.0685557549486635, 0.042107527663111655, 0.0517773589479148, 0.06986939804955095]}, "mutation_prompt": null}
{"id": "f9be231c-ca49-4d23-8241-203ffe9f6677", "solution": "import numpy as np\n\nclass AdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, memory_consideration_decay_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.memory_consideration_decay_rate = memory_consideration_decay_rate\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n\n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n            self.memory_consideration_prob *= self.memory_consideration_decay_rate  # Dynamic memory consideration adjustment\n\n        return harmony_memory[0]", "name": "AdaptiveMemoryHarmonySearchOpposition", "description": "Introducing dynamic adjustment of memory consideration probability based on solution quality to enhance exploration-exploitation balance.", "configspace": "", "generation": 31, "fitness": 0.18462510118872977, "feedback": "The algorithm AdaptiveMemoryHarmonySearchOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.17.", "error": "", "parent_id": "ddbc18f9-12d3-45f5-93aa-71d72b7d26d6", "metadata": {"aucs": [0.5506661224032362, 0.6139228912011063, 0.5545991579026179, 0.5636745172976658, 0.4053011348968435, 0.4247442335078946, 0.5107508310062447, 0.5779829145042337, 0.5276724616691714, 0.021713854633163998, 0.1363624568957339, 0.0023454292402111943, 0.12207608098805212, 0.08917833039658885, 0.05781040401673798, 0.10752262712093885, 0.1403164939040773, 0.009979241027345598, 0.08400579140067221, 0.08179314278964378, 0.09620524525683194, 0.0661878720777842, 0.0764131007776212, 0.07409799353153634, 0.06505862131968299, 0.09097166668250889, 0.10162152822870207, 0.07143767569686366, 0.053336168363814385, 0.07901961781201916, 0.09235469596824208, 0.07990725551392264, 0.04499457490813186, 0.07953285679828337, 0.06069643796488633, 0.0746769698761447, 0.8785061975010762, 0.7479901044939512, 0.8136878339673556, 0.8781468723074881, 0.7512995477927256, 0.41875378177231304, 0.8477643743220729, 0.5899236998983022, 0.09250343585398058, 0.24304362211309283, 0.16157224711114881, 0.2223333727824457, 0.14110041295635622, 0.16063041345821405, 0.15120261491766795, 0.15917008389577147, 0.09480785332575947, 0.11590947407531038, 0.16795111943772623, 0.13747261157392854, 0.1037259311550317, 0.3590946174203621, 0.134476097699059, 0.3262774369584127, 0.2065913253345475, 0.2387336428030773, 0.2244950655972211, 0.16693398434911655, 0.136050648197792, 0.1363244743791009, 0.23401561365971235, 0.11011827749797998, 0.0642523100125898, 0.13787833163501761, 0.13564651571442865, 0.12480819027127077, 0.16915496723864232, 0.13608749860948832, 0.11758858469165734, 0.12180134422113076, 0.19778445946455037, 0.11677732281676267, 0.14303621307169778, 9.999999999998899e-05, 0.12157698088477831, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009256614529932428, 9.999999999998899e-05, 9.999999999998899e-05, 0.03808542868368148, 0.08605768558685378, 0.107193695897283, 0.07948034687028704, 0.035411621326875364, 0.026903264610639632, 0.01909720065167042, 0.09614097426603585, 0.08685810961301865, 0.056108190853360385, 0.10045045111722173, 0.012426407901799719, 0.02643161721317433, 0.045577600122213124, 0.10483748989964647, 0.07607208863429349, 0.04257256226026529, 0.11980683842366557, 0.03469923756971727, 0.059887124514763856, 0.15001233554535243, 0.051967202691819314, 0.13434616282710865, 0.09383499465452061, 0.0615555544212264, 0.08418025601573864, 0.09380330223326894, 0.011365249437415015, 0.4676201890328462, 0.4036815100995754, 0.38441264800704955, 0.3581931062526381, 0.4311929528490137, 0.34303239591190726, 0.4159845000277195, 0.4016655267298004, 0.36723170660004667, 0.09184492360178864, 0.09207655027042472, 0.054626630018793754, 0.09377966514941238, 0.07364325392387405, 0.08366231854253836, 0.09335521260584789, 0.08864031666547922, 0.08524109579493322, 0.11353559938990243, 0.10792242403407559, 0.10406818990913203, 0.19962249763041984, 0.10877847020841525, 0.11613146148403808, 0.10011146301183194, 0.10733361784936701, 0.11820929818818438, 0.24354894197363874, 0.22661709827795817, 0.1971838095652655, 0.3303037367937365, 0.24641982362037562, 0.19585725249890584, 0.34355914311314817, 0.31070612821210486, 0.20674790082825245, 0.12389959576111365, 0.22817420836445235, 0.19249235412786092, 0.22034948011759525, 0.24870247694338854, 0.21261318461221612, 0.17715378770757306, 0.17838247647461636, 0.1500399963382797, 0.18648841500257318, 0.19884825968686204, 0.21666484680277076, 0.21940440220309787, 0.2187581918708552, 0.21672072214922056, 0.1872954654070822, 0.21714998996016543, 0.18977059749633685, 0.20438145871973856, 0.21155919200355666, 0.1597499607390499, 0.18586274035431138, 0.19796675389381602, 0.2265027349635117, 0.15785787383902294, 0.1614057324435042, 0.16907455052646292, 0.16736594311694952, 0.14808369116537157, 0.2733749202697795, 0.49532244914738566, 0.3912637962518767, 0.10988540701556249, 0.15419749315626663, 0.3464515533671755, 0.16405908748146736, 0.4079918533363345, 0.18999384184162305, 0.4449476773694492, 0.12098277762246923, 0.1310906644116392, 0.2034316375389883, 0.23880858713892106, 0.13642892463245115, 0.07362222530114126, 0.16941977433341493, 0.1698775574936482, 0.15877359144458592, 0.18323108330389903, 0.16765814797959244, 0.16770224934724065, 0.19104561534959918, 0.17961241623857982, 0.17180563471099541, 0.07747677849717494, 0.0819822569755293, 0.0944875960133893, 0.07352997438283715, 0.0696257370658494, 0.0745015702897599, 0.08634852995863673, 0.07556614664564332, 0.05411434619681499]}, "mutation_prompt": null}
{"id": "442a88ee-675a-4507-8ea4-f24fbf345c0e", "solution": "import numpy as np\n\nclass AdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "AdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing the ImprovedHarmonySearchOpposition algorithm by introducing adaptive memory consideration and an elitism mechanism to preserve the best solutions found.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ddbc18f9-12d3-45f5-93aa-71d72b7d26d6", "metadata": {"aucs": [0.5631942254225996, 0.4846251330195377, 0.5002937641839353, 0.6916962744338302, 0.5842491225061672, 0.41658686552957547, 0.6272899498124038, 0.49494596022564985, 0.5267532593927604, 0.24530705658404084, 0.09903182111454933, 0.012414627995604333, 0.10878994725361135, 0.1310013466838894, 0.17294594105380456, 9.999999999998899e-05, 0.11602642144866238, 0.03203674559149117, 0.10187073839778604, 0.057320999428378094, 0.11845515957337427, 0.11653428135625832, 0.08721429972771855, 0.05726649810770923, 0.08987786857437696, 0.09495288022143233, 0.06641560834894367, 0.08350602596083023, 0.08787826038590707, 0.06942201974560025, 0.09726572068444717, 0.07567813326739248, 0.07263134051191522, 0.06616988154655645, 0.07136081023669993, 0.07615864957718443, 0.8362306066003902, 0.9245194925270295, 0.8433228612763299, 0.8220604195600768, 0.8904704583769644, 0.726416564456456, 0.7854989574583074, 0.8903462734423397, 0.613297706638795, 0.1563105356851271, 0.10546002653301034, 0.07884396238827263, 0.12281403919290201, 0.12204954311410654, 0.10547349313025933, 0.18077101503085757, 0.10987210729487418, 0.05876304298837842, 0.24248524536742666, 0.16897720761191481, 0.11292518388726114, 0.20773439511009584, 0.18671233525832664, 0.16220144906173828, 0.11855908374296265, 0.3180830665427189, 0.21044606262472298, 0.14279616447055554, 0.13847499254123363, 0.006315150292449889, 0.1492023073771408, 0.009557613044442026, 0.19298709371363099, 0.12219699317213994, 0.12748260224901808, 0.12268493925275248, 0.1334828262893114, 0.0014591609405366635, 0.14126270938684482, 0.12231212474662823, 0.14066058215970367, 0.14578150219322583, 0.1742752825916345, 0.11652615834609592, 0.13340690645515807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0831113584007277, 9.999999999998899e-05, 0.16847152374507512, 0.06336721099093467, 0.07486013988785722, 0.06607966691611711, 0.03670125606743346, 0.044603637946512564, 0.1302917174710756, 0.031990269215340095, 0.13489960000985213, 0.11307664820773511, 0.14056600035206535, 0.07409748262893079, 0.053326056457015714, 0.17268117326214338, 0.05449959327277609, 0.0884743695321224, 0.05157506659730604, 0.04192763951907197, 0.033763588310196435, 0.15149928453670636, 0.05877140681595061, 0.06286562841058674, 0.02873559402773096, 0.08888808314101748, 0.04869170422811786, 0.048541128905094766, 0.03180137994779175, 0.3710741135637967, 0.4256306414705361, 0.28477967810027416, 0.3231603837899034, 0.5234624358735873, 0.36831064631526, 0.44187997034926296, 0.3661459923894579, 0.3144699320936424, 0.10133720590560946, 0.08777112714574309, 0.07635022764588795, 0.08440298142361025, 0.09609566895036292, 0.08591479385924938, 0.10204875565105354, 0.1030605925820186, 0.07777904041263906, 0.14403198641331205, 0.12259040392443765, 0.11199873379423153, 0.12296252169729105, 0.14646265423371696, 0.13841016434258613, 0.1313305893601704, 0.11668346327527723, 0.12453138513209339, 0.21106186069926336, 0.370274646411751, 0.19994815134008437, 0.3066819479505519, 0.31383537253427307, 0.27168130139267554, 0.21801028272860268, 0.3741721086554852, 0.21465152760084805, 0.14926112481186393, 0.3051412575552648, 0.19061292623275272, 0.27292961075047806, 0.3368511167991275, 0.25964033595277636, 0.2804297953147926, 0.17269172554516632, 0.13601760585693956, 0.23742922268261768, 0.19440861517575014, 0.21006635218071856, 0.2149266608821654, 0.20791494958792844, 0.21972126634801448, 0.24962337778897892, 0.20996454201310177, 0.20012132905901714, 0.15166198216632143, 0.21720385311221824, 0.19713635556279674, 0.1736177962202997, 0.20159999582595267, 0.22382349551669545, 0.19718057098573827, 0.16216221546915133, 0.16645133597035422, 0.1854055083064986, 0.17555053476582583, 0.18464300225140906, 0.4685478574509302, 0.16256275633230943, 0.1689577336740209, 0.4492914608069818, 0.11146445531198956, 0.30019207365355227, 0.23714549612917168, 0.19390653989343565, 0.41223387474283024, 0.14798894691929942, 0.163464732292808, 0.1850158290199101, 0.10179812825913381, 0.10149498491263254, 0.258797576269299, 0.16173262041859304, 0.17487184504868325, 0.20208691604271667, 0.17055009776387142, 0.17500630683735197, 0.17878136114939136, 0.18032661514526205, 0.17021284353762334, 0.17671595835359044, 0.07592428639443438, 0.08479091381217063, 0.10321582212284397, 0.1144058119900575, 0.0834227067759199, 0.07965473426773606, 0.08825291053699291, 0.08114793136963305, 0.07167914987033241]}, "mutation_prompt": null}
{"id": "74b85513-d725-4448-8b5d-30d057ed9dfa", "solution": "import numpy as np\n\nclass AdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "AdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing the ImprovedHarmonySearchOpposition algorithm by introducing adaptive memory consideration and an elitism mechanism to preserve the best solutions found.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ddbc18f9-12d3-45f5-93aa-71d72b7d26d6", "metadata": {"aucs": [0.5631942254225996, 0.4846251330195377, 0.5002937641839353, 0.6916962744338302, 0.5842491225061672, 0.41658686552957547, 0.6272899498124038, 0.49494596022564985, 0.5267532593927604, 0.24530705658404084, 0.09903182111454933, 0.012414627995604333, 0.10878994725361135, 0.1310013466838894, 0.17294594105380456, 9.999999999998899e-05, 0.11602642144866238, 0.03203674559149117, 0.10187073839778604, 0.057320999428378094, 0.11845515957337427, 0.11653428135625832, 0.08721429972771855, 0.05726649810770923, 0.08987786857437696, 0.09495288022143233, 0.06641560834894367, 0.08350602596083023, 0.08787826038590707, 0.06942201974560025, 0.09726572068444717, 0.07567813326739248, 0.07263134051191522, 0.06616988154655645, 0.07136081023669993, 0.07615864957718443, 0.8362306066003902, 0.9245194925270295, 0.8433228612763299, 0.8220604195600768, 0.8904704583769644, 0.726416564456456, 0.7854989574583074, 0.8903462734423397, 0.613297706638795, 0.1563105356851271, 0.10546002653301034, 0.07884396238827263, 0.12281403919290201, 0.12204954311410654, 0.10547349313025933, 0.18077101503085757, 0.10987210729487418, 0.05876304298837842, 0.24248524536742666, 0.16897720761191481, 0.11292518388726114, 0.20773439511009584, 0.18671233525832664, 0.16220144906173828, 0.11855908374296265, 0.3180830665427189, 0.21044606262472298, 0.14279616447055554, 0.13847499254123363, 0.006315150292449889, 0.1492023073771408, 0.009557613044442026, 0.19298709371363099, 0.12219699317213994, 0.12748260224901808, 0.12268493925275248, 0.1334828262893114, 0.0014591609405366635, 0.14126270938684482, 0.12231212474662823, 0.14066058215970367, 0.14578150219322583, 0.1742752825916345, 0.11652615834609592, 0.13340690645515807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0831113584007277, 9.999999999998899e-05, 0.16847152374507512, 0.06336721099093467, 0.07486013988785722, 0.06607966691611711, 0.03670125606743346, 0.044603637946512564, 0.1302917174710756, 0.031990269215340095, 0.13489960000985213, 0.11307664820773511, 0.14056600035206535, 0.07409748262893079, 0.053326056457015714, 0.17268117326214338, 0.05449959327277609, 0.0884743695321224, 0.05157506659730604, 0.04192763951907197, 0.033763588310196435, 0.15149928453670636, 0.05877140681595061, 0.06286562841058674, 0.02873559402773096, 0.08888808314101748, 0.04869170422811786, 0.048541128905094766, 0.03180137994779175, 0.3710741135637967, 0.4256306414705361, 0.28477967810027416, 0.3231603837899034, 0.5234624358735873, 0.36831064631526, 0.44187997034926296, 0.3661459923894579, 0.3144699320936424, 0.10133720590560946, 0.08777112714574309, 0.07635022764588795, 0.08440298142361025, 0.09609566895036292, 0.08591479385924938, 0.10204875565105354, 0.1030605925820186, 0.07777904041263906, 0.14403198641331205, 0.12259040392443765, 0.11199873379423153, 0.12296252169729105, 0.14646265423371696, 0.13841016434258613, 0.1313305893601704, 0.11668346327527723, 0.12453138513209339, 0.21106186069926336, 0.370274646411751, 0.19994815134008437, 0.3066819479505519, 0.31383537253427307, 0.27168130139267554, 0.21801028272860268, 0.3741721086554852, 0.21465152760084805, 0.14926112481186393, 0.3051412575552648, 0.19061292623275272, 0.27292961075047806, 0.3368511167991275, 0.25964033595277636, 0.2804297953147926, 0.17269172554516632, 0.13601760585693956, 0.23742922268261768, 0.19440861517575014, 0.21006635218071856, 0.2149266608821654, 0.20791494958792844, 0.21972126634801448, 0.24962337778897892, 0.20996454201310177, 0.20012132905901714, 0.15166198216632143, 0.21720385311221824, 0.19713635556279674, 0.1736177962202997, 0.20159999582595267, 0.22382349551669545, 0.19718057098573827, 0.16216221546915133, 0.16645133597035422, 0.1854055083064986, 0.17555053476582583, 0.18464300225140906, 0.4685478574509302, 0.16256275633230943, 0.1689577336740209, 0.4492914608069818, 0.11146445531198956, 0.30019207365355227, 0.23714549612917168, 0.19390653989343565, 0.41223387474283024, 0.14798894691929942, 0.163464732292808, 0.1850158290199101, 0.10179812825913381, 0.10149498491263254, 0.258797576269299, 0.16173262041859304, 0.17487184504868325, 0.20208691604271667, 0.17055009776387142, 0.17500630683735197, 0.17878136114939136, 0.18032661514526205, 0.17021284353762334, 0.17671595835359044, 0.07592428639443438, 0.08479091381217063, 0.10321582212284397, 0.1144058119900575, 0.0834227067759199, 0.07965473426773606, 0.08825291053699291, 0.08114793136963305, 0.07167914987033241]}, "mutation_prompt": null}
{"id": "42e89903-4bdf-425b-b842-bb9ba2ddfeb6", "solution": "import numpy as np\n\nclass AdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "AdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing the ImprovedHarmonySearchOpposition algorithm by introducing adaptive memory consideration and an elitism mechanism to preserve the best solutions found.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ddbc18f9-12d3-45f5-93aa-71d72b7d26d6", "metadata": {"aucs": [0.5631942254225996, 0.4846251330195377, 0.5002937641839353, 0.6916962744338302, 0.5842491225061672, 0.41658686552957547, 0.6272899498124038, 0.49494596022564985, 0.5267532593927604, 0.24530705658404084, 0.09903182111454933, 0.012414627995604333, 0.10878994725361135, 0.1310013466838894, 0.17294594105380456, 9.999999999998899e-05, 0.11602642144866238, 0.03203674559149117, 0.10187073839778604, 0.057320999428378094, 0.11845515957337427, 0.11653428135625832, 0.08721429972771855, 0.05726649810770923, 0.08987786857437696, 0.09495288022143233, 0.06641560834894367, 0.08350602596083023, 0.08787826038590707, 0.06942201974560025, 0.09726572068444717, 0.07567813326739248, 0.07263134051191522, 0.06616988154655645, 0.07136081023669993, 0.07615864957718443, 0.8362306066003902, 0.9245194925270295, 0.8433228612763299, 0.8220604195600768, 0.8904704583769644, 0.726416564456456, 0.7854989574583074, 0.8903462734423397, 0.613297706638795, 0.1563105356851271, 0.10546002653301034, 0.07884396238827263, 0.12281403919290201, 0.12204954311410654, 0.10547349313025933, 0.18077101503085757, 0.10987210729487418, 0.05876304298837842, 0.24248524536742666, 0.16897720761191481, 0.11292518388726114, 0.20773439511009584, 0.18671233525832664, 0.16220144906173828, 0.11855908374296265, 0.3180830665427189, 0.21044606262472298, 0.14279616447055554, 0.13847499254123363, 0.006315150292449889, 0.1492023073771408, 0.009557613044442026, 0.19298709371363099, 0.12219699317213994, 0.12748260224901808, 0.12268493925275248, 0.1334828262893114, 0.0014591609405366635, 0.14126270938684482, 0.12231212474662823, 0.14066058215970367, 0.14578150219322583, 0.1742752825916345, 0.11652615834609592, 0.13340690645515807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0831113584007277, 9.999999999998899e-05, 0.16847152374507512, 0.06336721099093467, 0.07486013988785722, 0.06607966691611711, 0.03670125606743346, 0.044603637946512564, 0.1302917174710756, 0.031990269215340095, 0.13489960000985213, 0.11307664820773511, 0.14056600035206535, 0.07409748262893079, 0.053326056457015714, 0.17268117326214338, 0.05449959327277609, 0.0884743695321224, 0.05157506659730604, 0.04192763951907197, 0.033763588310196435, 0.15149928453670636, 0.05877140681595061, 0.06286562841058674, 0.02873559402773096, 0.08888808314101748, 0.04869170422811786, 0.048541128905094766, 0.03180137994779175, 0.3710741135637967, 0.4256306414705361, 0.28477967810027416, 0.3231603837899034, 0.5234624358735873, 0.36831064631526, 0.44187997034926296, 0.3661459923894579, 0.3144699320936424, 0.10133720590560946, 0.08777112714574309, 0.07635022764588795, 0.08440298142361025, 0.09609566895036292, 0.08591479385924938, 0.10204875565105354, 0.1030605925820186, 0.07777904041263906, 0.14403198641331205, 0.12259040392443765, 0.11199873379423153, 0.12296252169729105, 0.14646265423371696, 0.13841016434258613, 0.1313305893601704, 0.11668346327527723, 0.12453138513209339, 0.21106186069926336, 0.370274646411751, 0.19994815134008437, 0.3066819479505519, 0.31383537253427307, 0.27168130139267554, 0.21801028272860268, 0.3741721086554852, 0.21465152760084805, 0.14926112481186393, 0.3051412575552648, 0.19061292623275272, 0.27292961075047806, 0.3368511167991275, 0.25964033595277636, 0.2804297953147926, 0.17269172554516632, 0.13601760585693956, 0.23742922268261768, 0.19440861517575014, 0.21006635218071856, 0.2149266608821654, 0.20791494958792844, 0.21972126634801448, 0.24962337778897892, 0.20996454201310177, 0.20012132905901714, 0.15166198216632143, 0.21720385311221824, 0.19713635556279674, 0.1736177962202997, 0.20159999582595267, 0.22382349551669545, 0.19718057098573827, 0.16216221546915133, 0.16645133597035422, 0.1854055083064986, 0.17555053476582583, 0.18464300225140906, 0.4685478574509302, 0.16256275633230943, 0.1689577336740209, 0.4492914608069818, 0.11146445531198956, 0.30019207365355227, 0.23714549612917168, 0.19390653989343565, 0.41223387474283024, 0.14798894691929942, 0.163464732292808, 0.1850158290199101, 0.10179812825913381, 0.10149498491263254, 0.258797576269299, 0.16173262041859304, 0.17487184504868325, 0.20208691604271667, 0.17055009776387142, 0.17500630683735197, 0.17878136114939136, 0.18032661514526205, 0.17021284353762334, 0.17671595835359044, 0.07592428639443438, 0.08479091381217063, 0.10321582212284397, 0.1144058119900575, 0.0834227067759199, 0.07965473426773606, 0.08825291053699291, 0.08114793136963305, 0.07167914987033241]}, "mutation_prompt": null}
{"id": "eef507f0-245d-40da-be13-9ded2d3117d6", "solution": "import numpy as np\n\nclass DynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Introducing dynamic parameter adaptation to adjust bandwidth and pitch adjustment rates during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 35, "fitness": 0.19536213938136957, "feedback": "The algorithm DynamicAdaptiveMemoryHarmonySearchOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "ddbc18f9-12d3-45f5-93aa-71d72b7d26d6", "metadata": {"aucs": [0.6132696892204104, 0.6002714963249125, 0.7332905766849939, 0.5780211310524574, 0.6239574321809978, 0.40712443109850516, 0.551874306132006, 0.6473418135051723, 0.5127860673633614, 0.24780899046745253, 0.05405994714961704, 9.999999999998899e-05, 0.30837727735794873, 0.01397676572486306, 9.999999999998899e-05, 0.0233824765438152, 0.1920007720939375, 0.06578345014964448, 0.09066595841125669, 0.10673579154961665, 0.08566433999703171, 0.06997505297570483, 0.06161449802794616, 0.10110429258181741, 0.08836652584141846, 0.12227152459785628, 0.103849052712909, 0.08463436843295336, 0.07472148183144367, 0.09229024939227004, 0.06577833999398752, 0.056358696926074536, 0.07513353690900326, 0.09546255701290596, 0.08939863515837787, 0.07500715316667561, 0.8422143355097554, 0.8016439552350817, 0.7809606228148934, 0.794993465661394, 0.8586006044486202, 0.555313374677462, 0.8255363399693172, 0.9051261777417399, 0.3173439713694657, 0.15699551213542817, 0.08046450223450596, 0.1851028276787905, 0.1787799661868159, 0.21877504383687418, 0.21424840829325098, 0.06175326503751277, 0.11988467087694976, 0.2120601222022176, 0.18260699916001477, 0.2186133927062669, 0.11670776576442299, 0.2697738603446894, 0.20390920259561562, 0.10892355964519806, 0.12021533019784891, 0.17525566144183935, 0.33425344834353243, 0.09930543344752951, 0.1336445451431113, 0.10375552171078872, 0.12750660995950325, 0.11770979998715825, 0.14409024085796063, 0.13180094287094601, 0.17167771340397742, 0.11892181717844219, 0.13267215350621697, 0.11908548722843948, 0.13478266226352875, 0.12414191977756073, 0.14727906004897484, 0.15452146860137306, 0.1642707560023704, 0.09591311764170951, 0.13008815344993763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019861433398042916, 9.999999999998899e-05, 9.999999999998899e-05, 0.0400687696910087, 9.999999999998899e-05, 0.0748609493592498, 0.08763623035202617, 0.0301069210720758, 0.06467192426762158, 0.05589375264111385, 0.027699932976151698, 0.09131270290514892, 0.06426262557767692, 0.06992604613652587, 0.23903949195475893, 0.08609014311015284, 0.05047572562207825, 0.09222973114775468, 0.15456070084731033, 0.12794347841164067, 0.11702507810161822, 0.0772752368461117, 0.009552252792853322, 0.10393406422784124, 0.14260777786716006, 0.05220857432283432, 0.04828625036926748, 0.09505760046480427, 0.0451406870880815, 0.050440954449133324, 0.07703624328133574, 0.0960782840517228, 0.3515663900051129, 0.4383220966512167, 0.3366274818224414, 0.3195335206683262, 0.456228202084101, 0.3827382751322359, 0.3388756617540918, 0.4231198900357632, 0.31409192165285527, 0.09196288681063247, 0.09317598791731074, 0.07700543036286911, 0.08236207915883753, 0.06756931389005472, 0.23908879292056828, 0.07102624272606084, 0.08596465075264481, 0.10987342914407405, 0.1382908448355965, 0.1187556281169474, 0.2537084617746701, 0.1398816981093165, 0.13224321514675708, 0.12696731198051692, 0.12707166616611398, 0.16186454302468722, 0.13213097947093722, 0.34654379267620694, 0.39277956660667146, 0.42782342241479343, 0.22397884277574298, 0.3855284122987145, 0.27751270259259186, 0.223414891280574, 0.39282370685819634, 0.21451669113872363, 0.2017788878238711, 0.25647425648680233, 0.1928460194932362, 0.1674512544892185, 0.26382623144282513, 0.2675338961778002, 0.18029106580470777, 0.22116738840959627, 0.2055723819957832, 0.22104213398523476, 0.22988360443286726, 0.214807162169948, 0.23049368000802883, 0.19117860817318455, 0.21078564218037965, 0.21083790851248374, 0.21156455663868756, 0.20035806460501648, 0.178001999873732, 0.17553210148918774, 0.2138219959297406, 0.1769864696095811, 0.17097638337919963, 0.1886792976395767, 0.17596379089454406, 0.1859877241869532, 0.1714726163335072, 0.17561611047296932, 0.3001055165943741, 0.1830133836351827, 0.4527735271966, 0.18236760716044487, 0.5116503130922747, 0.16094041952618754, 0.13607394280542773, 0.16633151531433954, 0.17782083856196929, 0.1587954093734959, 0.19032915501066305, 0.1859459715323415, 0.16401685295642765, 0.07934886414559494, 0.10116121444325621, 0.11448317626881399, 0.23609791522649926, 0.1663891912106923, 0.18478961951613515, 0.15965650000099652, 0.18005686164826906, 0.1690737186957787, 0.17773120102274986, 0.1783941967195697, 0.1910956195852167, 0.17897233487209196, 0.09458772144183514, 0.08236389543687639, 0.07834204070971995, 0.06970588688823987, 0.07819255187975338, 0.09517238982289566, 0.08387564825505212, 0.07788717571652648, 0.06901403562243846]}, "mutation_prompt": null}
{"id": "6685d62b-427b-4776-8455-93963c28ef58", "solution": "import numpy as np\n\nclass DynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Introducing dynamic parameter adaptation to adjust bandwidth and pitch adjustment rates during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eef507f0-245d-40da-be13-9ded2d3117d6", "metadata": {"aucs": [0.6132696892204104, 0.6002714963249125, 0.7332905766849939, 0.5780211310524574, 0.6239574321809978, 0.40712443109850516, 0.551874306132006, 0.6473418135051723, 0.5127860673633614, 0.24780899046745253, 0.05405994714961704, 9.999999999998899e-05, 0.30837727735794873, 0.01397676572486306, 9.999999999998899e-05, 0.0233824765438152, 0.1920007720939375, 0.06578345014964448, 0.09066595841125669, 0.10673579154961665, 0.08566433999703171, 0.06997505297570483, 0.06161449802794616, 0.10110429258181741, 0.08836652584141846, 0.12227152459785628, 0.103849052712909, 0.08463436843295336, 0.07472148183144367, 0.09229024939227004, 0.06577833999398752, 0.056358696926074536, 0.07513353690900326, 0.09546255701290596, 0.08939863515837787, 0.07500715316667561, 0.8422143355097554, 0.8016439552350817, 0.7809606228148934, 0.794993465661394, 0.8586006044486202, 0.555313374677462, 0.8255363399693172, 0.9051261777417399, 0.3173439713694657, 0.15699551213542817, 0.08046450223450596, 0.1851028276787905, 0.1787799661868159, 0.21877504383687418, 0.21424840829325098, 0.06175326503751277, 0.11988467087694976, 0.2120601222022176, 0.18260699916001477, 0.2186133927062669, 0.11670776576442299, 0.2697738603446894, 0.20390920259561562, 0.10892355964519806, 0.12021533019784891, 0.17525566144183935, 0.33425344834353243, 0.09930543344752951, 0.1336445451431113, 0.10375552171078872, 0.12750660995950325, 0.11770979998715825, 0.14409024085796063, 0.13180094287094601, 0.17167771340397742, 0.11892181717844219, 0.13267215350621697, 0.11908548722843948, 0.13478266226352875, 0.12414191977756073, 0.14727906004897484, 0.15452146860137306, 0.1642707560023704, 0.09591311764170951, 0.13008815344993763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019861433398042916, 9.999999999998899e-05, 9.999999999998899e-05, 0.0400687696910087, 9.999999999998899e-05, 0.0748609493592498, 0.08763623035202617, 0.0301069210720758, 0.06467192426762158, 0.05589375264111385, 0.027699932976151698, 0.09131270290514892, 0.06426262557767692, 0.06992604613652587, 0.23903949195475893, 0.08609014311015284, 0.05047572562207825, 0.09222973114775468, 0.15456070084731033, 0.12794347841164067, 0.11702507810161822, 0.0772752368461117, 0.009552252792853322, 0.10393406422784124, 0.14260777786716006, 0.05220857432283432, 0.04828625036926748, 0.09505760046480427, 0.0451406870880815, 0.050440954449133324, 0.07703624328133574, 0.0960782840517228, 0.3515663900051129, 0.4383220966512167, 0.3366274818224414, 0.3195335206683262, 0.456228202084101, 0.3827382751322359, 0.3388756617540918, 0.4231198900357632, 0.31409192165285527, 0.09196288681063247, 0.09317598791731074, 0.07700543036286911, 0.08236207915883753, 0.06756931389005472, 0.23908879292056828, 0.07102624272606084, 0.08596465075264481, 0.10987342914407405, 0.1382908448355965, 0.1187556281169474, 0.2537084617746701, 0.1398816981093165, 0.13224321514675708, 0.12696731198051692, 0.12707166616611398, 0.16186454302468722, 0.13213097947093722, 0.34654379267620694, 0.39277956660667146, 0.42782342241479343, 0.22397884277574298, 0.3855284122987145, 0.27751270259259186, 0.223414891280574, 0.39282370685819634, 0.21451669113872363, 0.2017788878238711, 0.25647425648680233, 0.1928460194932362, 0.1674512544892185, 0.26382623144282513, 0.2675338961778002, 0.18029106580470777, 0.22116738840959627, 0.2055723819957832, 0.22104213398523476, 0.22988360443286726, 0.214807162169948, 0.23049368000802883, 0.19117860817318455, 0.21078564218037965, 0.21083790851248374, 0.21156455663868756, 0.20035806460501648, 0.178001999873732, 0.17553210148918774, 0.2138219959297406, 0.1769864696095811, 0.17097638337919963, 0.1886792976395767, 0.17596379089454406, 0.1859877241869532, 0.1714726163335072, 0.17561611047296932, 0.3001055165943741, 0.1830133836351827, 0.4527735271966, 0.18236760716044487, 0.5116503130922747, 0.16094041952618754, 0.13607394280542773, 0.16633151531433954, 0.17782083856196929, 0.1587954093734959, 0.19032915501066305, 0.1859459715323415, 0.16401685295642765, 0.07934886414559494, 0.10116121444325621, 0.11448317626881399, 0.23609791522649926, 0.1663891912106923, 0.18478961951613515, 0.15965650000099652, 0.18005686164826906, 0.1690737186957787, 0.17773120102274986, 0.1783941967195697, 0.1910956195852167, 0.17897233487209196, 0.09458772144183514, 0.08236389543687639, 0.07834204070971995, 0.06970588688823987, 0.07819255187975338, 0.09517238982289566, 0.08387564825505212, 0.07788717571652648, 0.06901403562243846]}, "mutation_prompt": null}
{"id": "73cd68c5-4337-4a22-b725-e4985314db72", "solution": "import numpy as np\n\nclass DynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Introducing dynamic parameter adaptation to adjust bandwidth and pitch adjustment rates during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eef507f0-245d-40da-be13-9ded2d3117d6", "metadata": {"aucs": [0.6132696892204104, 0.6002714963249125, 0.7332905766849939, 0.5780211310524574, 0.6239574321809978, 0.40712443109850516, 0.551874306132006, 0.6473418135051723, 0.5127860673633614, 0.24780899046745253, 0.05405994714961704, 9.999999999998899e-05, 0.30837727735794873, 0.01397676572486306, 9.999999999998899e-05, 0.0233824765438152, 0.1920007720939375, 0.06578345014964448, 0.09066595841125669, 0.10673579154961665, 0.08566433999703171, 0.06997505297570483, 0.06161449802794616, 0.10110429258181741, 0.08836652584141846, 0.12227152459785628, 0.103849052712909, 0.08463436843295336, 0.07472148183144367, 0.09229024939227004, 0.06577833999398752, 0.056358696926074536, 0.07513353690900326, 0.09546255701290596, 0.08939863515837787, 0.07500715316667561, 0.8422143355097554, 0.8016439552350817, 0.7809606228148934, 0.794993465661394, 0.8586006044486202, 0.555313374677462, 0.8255363399693172, 0.9051261777417399, 0.3173439713694657, 0.15699551213542817, 0.08046450223450596, 0.1851028276787905, 0.1787799661868159, 0.21877504383687418, 0.21424840829325098, 0.06175326503751277, 0.11988467087694976, 0.2120601222022176, 0.18260699916001477, 0.2186133927062669, 0.11670776576442299, 0.2697738603446894, 0.20390920259561562, 0.10892355964519806, 0.12021533019784891, 0.17525566144183935, 0.33425344834353243, 0.09930543344752951, 0.1336445451431113, 0.10375552171078872, 0.12750660995950325, 0.11770979998715825, 0.14409024085796063, 0.13180094287094601, 0.17167771340397742, 0.11892181717844219, 0.13267215350621697, 0.11908548722843948, 0.13478266226352875, 0.12414191977756073, 0.14727906004897484, 0.15452146860137306, 0.1642707560023704, 0.09591311764170951, 0.13008815344993763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019861433398042916, 9.999999999998899e-05, 9.999999999998899e-05, 0.0400687696910087, 9.999999999998899e-05, 0.0748609493592498, 0.08763623035202617, 0.0301069210720758, 0.06467192426762158, 0.05589375264111385, 0.027699932976151698, 0.09131270290514892, 0.06426262557767692, 0.06992604613652587, 0.23903949195475893, 0.08609014311015284, 0.05047572562207825, 0.09222973114775468, 0.15456070084731033, 0.12794347841164067, 0.11702507810161822, 0.0772752368461117, 0.009552252792853322, 0.10393406422784124, 0.14260777786716006, 0.05220857432283432, 0.04828625036926748, 0.09505760046480427, 0.0451406870880815, 0.050440954449133324, 0.07703624328133574, 0.0960782840517228, 0.3515663900051129, 0.4383220966512167, 0.3366274818224414, 0.3195335206683262, 0.456228202084101, 0.3827382751322359, 0.3388756617540918, 0.4231198900357632, 0.31409192165285527, 0.09196288681063247, 0.09317598791731074, 0.07700543036286911, 0.08236207915883753, 0.06756931389005472, 0.23908879292056828, 0.07102624272606084, 0.08596465075264481, 0.10987342914407405, 0.1382908448355965, 0.1187556281169474, 0.2537084617746701, 0.1398816981093165, 0.13224321514675708, 0.12696731198051692, 0.12707166616611398, 0.16186454302468722, 0.13213097947093722, 0.34654379267620694, 0.39277956660667146, 0.42782342241479343, 0.22397884277574298, 0.3855284122987145, 0.27751270259259186, 0.223414891280574, 0.39282370685819634, 0.21451669113872363, 0.2017788878238711, 0.25647425648680233, 0.1928460194932362, 0.1674512544892185, 0.26382623144282513, 0.2675338961778002, 0.18029106580470777, 0.22116738840959627, 0.2055723819957832, 0.22104213398523476, 0.22988360443286726, 0.214807162169948, 0.23049368000802883, 0.19117860817318455, 0.21078564218037965, 0.21083790851248374, 0.21156455663868756, 0.20035806460501648, 0.178001999873732, 0.17553210148918774, 0.2138219959297406, 0.1769864696095811, 0.17097638337919963, 0.1886792976395767, 0.17596379089454406, 0.1859877241869532, 0.1714726163335072, 0.17561611047296932, 0.3001055165943741, 0.1830133836351827, 0.4527735271966, 0.18236760716044487, 0.5116503130922747, 0.16094041952618754, 0.13607394280542773, 0.16633151531433954, 0.17782083856196929, 0.1587954093734959, 0.19032915501066305, 0.1859459715323415, 0.16401685295642765, 0.07934886414559494, 0.10116121444325621, 0.11448317626881399, 0.23609791522649926, 0.1663891912106923, 0.18478961951613515, 0.15965650000099652, 0.18005686164826906, 0.1690737186957787, 0.17773120102274986, 0.1783941967195697, 0.1910956195852167, 0.17897233487209196, 0.09458772144183514, 0.08236389543687639, 0.07834204070971995, 0.06970588688823987, 0.07819255187975338, 0.09517238982289566, 0.08387564825505212, 0.07788717571652648, 0.06901403562243846]}, "mutation_prompt": null}
{"id": "ca606a4e-4d4e-4768-90fd-cdbb1e98e681", "solution": "import numpy as np\n\nclass DynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Introducing dynamic parameter adaptation to adjust bandwidth and pitch adjustment rates during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eef507f0-245d-40da-be13-9ded2d3117d6", "metadata": {"aucs": [0.6132696892204104, 0.6002714963249125, 0.7332905766849939, 0.5780211310524574, 0.6239574321809978, 0.40712443109850516, 0.551874306132006, 0.6473418135051723, 0.5127860673633614, 0.24780899046745253, 0.05405994714961704, 9.999999999998899e-05, 0.30837727735794873, 0.01397676572486306, 9.999999999998899e-05, 0.0233824765438152, 0.1920007720939375, 0.06578345014964448, 0.09066595841125669, 0.10673579154961665, 0.08566433999703171, 0.06997505297570483, 0.06161449802794616, 0.10110429258181741, 0.08836652584141846, 0.12227152459785628, 0.103849052712909, 0.08463436843295336, 0.07472148183144367, 0.09229024939227004, 0.06577833999398752, 0.056358696926074536, 0.07513353690900326, 0.09546255701290596, 0.08939863515837787, 0.07500715316667561, 0.8422143355097554, 0.8016439552350817, 0.7809606228148934, 0.794993465661394, 0.8586006044486202, 0.555313374677462, 0.8255363399693172, 0.9051261777417399, 0.3173439713694657, 0.15699551213542817, 0.08046450223450596, 0.1851028276787905, 0.1787799661868159, 0.21877504383687418, 0.21424840829325098, 0.06175326503751277, 0.11988467087694976, 0.2120601222022176, 0.18260699916001477, 0.2186133927062669, 0.11670776576442299, 0.2697738603446894, 0.20390920259561562, 0.10892355964519806, 0.12021533019784891, 0.17525566144183935, 0.33425344834353243, 0.09930543344752951, 0.1336445451431113, 0.10375552171078872, 0.12750660995950325, 0.11770979998715825, 0.14409024085796063, 0.13180094287094601, 0.17167771340397742, 0.11892181717844219, 0.13267215350621697, 0.11908548722843948, 0.13478266226352875, 0.12414191977756073, 0.14727906004897484, 0.15452146860137306, 0.1642707560023704, 0.09591311764170951, 0.13008815344993763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019861433398042916, 9.999999999998899e-05, 9.999999999998899e-05, 0.0400687696910087, 9.999999999998899e-05, 0.0748609493592498, 0.08763623035202617, 0.0301069210720758, 0.06467192426762158, 0.05589375264111385, 0.027699932976151698, 0.09131270290514892, 0.06426262557767692, 0.06992604613652587, 0.23903949195475893, 0.08609014311015284, 0.05047572562207825, 0.09222973114775468, 0.15456070084731033, 0.12794347841164067, 0.11702507810161822, 0.0772752368461117, 0.009552252792853322, 0.10393406422784124, 0.14260777786716006, 0.05220857432283432, 0.04828625036926748, 0.09505760046480427, 0.0451406870880815, 0.050440954449133324, 0.07703624328133574, 0.0960782840517228, 0.3515663900051129, 0.4383220966512167, 0.3366274818224414, 0.3195335206683262, 0.456228202084101, 0.3827382751322359, 0.3388756617540918, 0.4231198900357632, 0.31409192165285527, 0.09196288681063247, 0.09317598791731074, 0.07700543036286911, 0.08236207915883753, 0.06756931389005472, 0.23908879292056828, 0.07102624272606084, 0.08596465075264481, 0.10987342914407405, 0.1382908448355965, 0.1187556281169474, 0.2537084617746701, 0.1398816981093165, 0.13224321514675708, 0.12696731198051692, 0.12707166616611398, 0.16186454302468722, 0.13213097947093722, 0.34654379267620694, 0.39277956660667146, 0.42782342241479343, 0.22397884277574298, 0.3855284122987145, 0.27751270259259186, 0.223414891280574, 0.39282370685819634, 0.21451669113872363, 0.2017788878238711, 0.25647425648680233, 0.1928460194932362, 0.1674512544892185, 0.26382623144282513, 0.2675338961778002, 0.18029106580470777, 0.22116738840959627, 0.2055723819957832, 0.22104213398523476, 0.22988360443286726, 0.214807162169948, 0.23049368000802883, 0.19117860817318455, 0.21078564218037965, 0.21083790851248374, 0.21156455663868756, 0.20035806460501648, 0.178001999873732, 0.17553210148918774, 0.2138219959297406, 0.1769864696095811, 0.17097638337919963, 0.1886792976395767, 0.17596379089454406, 0.1859877241869532, 0.1714726163335072, 0.17561611047296932, 0.3001055165943741, 0.1830133836351827, 0.4527735271966, 0.18236760716044487, 0.5116503130922747, 0.16094041952618754, 0.13607394280542773, 0.16633151531433954, 0.17782083856196929, 0.1587954093734959, 0.19032915501066305, 0.1859459715323415, 0.16401685295642765, 0.07934886414559494, 0.10116121444325621, 0.11448317626881399, 0.23609791522649926, 0.1663891912106923, 0.18478961951613515, 0.15965650000099652, 0.18005686164826906, 0.1690737186957787, 0.17773120102274986, 0.1783941967195697, 0.1910956195852167, 0.17897233487209196, 0.09458772144183514, 0.08236389543687639, 0.07834204070971995, 0.06970588688823987, 0.07819255187975338, 0.09517238982289566, 0.08387564825505212, 0.07788717571652648, 0.06901403562243846]}, "mutation_prompt": null}
{"id": "e69efed4-efd3-46ac-86ae-1ae6f6497082", "solution": "import numpy as np\n\nclass DynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Introducing dynamic parameter adaptation to adjust bandwidth and pitch adjustment rates during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eef507f0-245d-40da-be13-9ded2d3117d6", "metadata": {"aucs": [0.6132696892204104, 0.6002714963249125, 0.7332905766849939, 0.5780211310524574, 0.6239574321809978, 0.40712443109850516, 0.551874306132006, 0.6473418135051723, 0.5127860673633614, 0.24780899046745253, 0.05405994714961704, 9.999999999998899e-05, 0.30837727735794873, 0.01397676572486306, 9.999999999998899e-05, 0.0233824765438152, 0.1920007720939375, 0.06578345014964448, 0.09066595841125669, 0.10673579154961665, 0.08566433999703171, 0.06997505297570483, 0.06161449802794616, 0.10110429258181741, 0.08836652584141846, 0.12227152459785628, 0.103849052712909, 0.08463436843295336, 0.07472148183144367, 0.09229024939227004, 0.06577833999398752, 0.056358696926074536, 0.07513353690900326, 0.09546255701290596, 0.08939863515837787, 0.07500715316667561, 0.8422143355097554, 0.8016439552350817, 0.7809606228148934, 0.794993465661394, 0.8586006044486202, 0.555313374677462, 0.8255363399693172, 0.9051261777417399, 0.3173439713694657, 0.15699551213542817, 0.08046450223450596, 0.1851028276787905, 0.1787799661868159, 0.21877504383687418, 0.21424840829325098, 0.06175326503751277, 0.11988467087694976, 0.2120601222022176, 0.18260699916001477, 0.2186133927062669, 0.11670776576442299, 0.2697738603446894, 0.20390920259561562, 0.10892355964519806, 0.12021533019784891, 0.17525566144183935, 0.33425344834353243, 0.09930543344752951, 0.1336445451431113, 0.10375552171078872, 0.12750660995950325, 0.11770979998715825, 0.14409024085796063, 0.13180094287094601, 0.17167771340397742, 0.11892181717844219, 0.13267215350621697, 0.11908548722843948, 0.13478266226352875, 0.12414191977756073, 0.14727906004897484, 0.15452146860137306, 0.1642707560023704, 0.09591311764170951, 0.13008815344993763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019861433398042916, 9.999999999998899e-05, 9.999999999998899e-05, 0.0400687696910087, 9.999999999998899e-05, 0.0748609493592498, 0.08763623035202617, 0.0301069210720758, 0.06467192426762158, 0.05589375264111385, 0.027699932976151698, 0.09131270290514892, 0.06426262557767692, 0.06992604613652587, 0.23903949195475893, 0.08609014311015284, 0.05047572562207825, 0.09222973114775468, 0.15456070084731033, 0.12794347841164067, 0.11702507810161822, 0.0772752368461117, 0.009552252792853322, 0.10393406422784124, 0.14260777786716006, 0.05220857432283432, 0.04828625036926748, 0.09505760046480427, 0.0451406870880815, 0.050440954449133324, 0.07703624328133574, 0.0960782840517228, 0.3515663900051129, 0.4383220966512167, 0.3366274818224414, 0.3195335206683262, 0.456228202084101, 0.3827382751322359, 0.3388756617540918, 0.4231198900357632, 0.31409192165285527, 0.09196288681063247, 0.09317598791731074, 0.07700543036286911, 0.08236207915883753, 0.06756931389005472, 0.23908879292056828, 0.07102624272606084, 0.08596465075264481, 0.10987342914407405, 0.1382908448355965, 0.1187556281169474, 0.2537084617746701, 0.1398816981093165, 0.13224321514675708, 0.12696731198051692, 0.12707166616611398, 0.16186454302468722, 0.13213097947093722, 0.34654379267620694, 0.39277956660667146, 0.42782342241479343, 0.22397884277574298, 0.3855284122987145, 0.27751270259259186, 0.223414891280574, 0.39282370685819634, 0.21451669113872363, 0.2017788878238711, 0.25647425648680233, 0.1928460194932362, 0.1674512544892185, 0.26382623144282513, 0.2675338961778002, 0.18029106580470777, 0.22116738840959627, 0.2055723819957832, 0.22104213398523476, 0.22988360443286726, 0.214807162169948, 0.23049368000802883, 0.19117860817318455, 0.21078564218037965, 0.21083790851248374, 0.21156455663868756, 0.20035806460501648, 0.178001999873732, 0.17553210148918774, 0.2138219959297406, 0.1769864696095811, 0.17097638337919963, 0.1886792976395767, 0.17596379089454406, 0.1859877241869532, 0.1714726163335072, 0.17561611047296932, 0.3001055165943741, 0.1830133836351827, 0.4527735271966, 0.18236760716044487, 0.5116503130922747, 0.16094041952618754, 0.13607394280542773, 0.16633151531433954, 0.17782083856196929, 0.1587954093734959, 0.19032915501066305, 0.1859459715323415, 0.16401685295642765, 0.07934886414559494, 0.10116121444325621, 0.11448317626881399, 0.23609791522649926, 0.1663891912106923, 0.18478961951613515, 0.15965650000099652, 0.18005686164826906, 0.1690737186957787, 0.17773120102274986, 0.1783941967195697, 0.1910956195852167, 0.17897233487209196, 0.09458772144183514, 0.08236389543687639, 0.07834204070971995, 0.06970588688823987, 0.07819255187975338, 0.09517238982289566, 0.08387564825505212, 0.07788717571652648, 0.06901403562243846]}, "mutation_prompt": null}
{"id": "c2227f0f-5c7f-4553-b7a0-33ad5e39f0e8", "solution": "import numpy as np\n\nclass DynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Introducing dynamic parameter adaptation to adjust bandwidth and pitch adjustment rates during optimization to enhance exploration and exploitation balance.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "eef507f0-245d-40da-be13-9ded2d3117d6", "metadata": {"aucs": [0.6132696892204104, 0.6002714963249125, 0.7332905766849939, 0.5780211310524574, 0.6239574321809978, 0.40712443109850516, 0.551874306132006, 0.6473418135051723, 0.5127860673633614, 0.24780899046745253, 0.05405994714961704, 9.999999999998899e-05, 0.30837727735794873, 0.01397676572486306, 9.999999999998899e-05, 0.0233824765438152, 0.1920007720939375, 0.06578345014964448, 0.09066595841125669, 0.10673579154961665, 0.08566433999703171, 0.06997505297570483, 0.06161449802794616, 0.10110429258181741, 0.08836652584141846, 0.12227152459785628, 0.103849052712909, 0.08463436843295336, 0.07472148183144367, 0.09229024939227004, 0.06577833999398752, 0.056358696926074536, 0.07513353690900326, 0.09546255701290596, 0.08939863515837787, 0.07500715316667561, 0.8422143355097554, 0.8016439552350817, 0.7809606228148934, 0.794993465661394, 0.8586006044486202, 0.555313374677462, 0.8255363399693172, 0.9051261777417399, 0.3173439713694657, 0.15699551213542817, 0.08046450223450596, 0.1851028276787905, 0.1787799661868159, 0.21877504383687418, 0.21424840829325098, 0.06175326503751277, 0.11988467087694976, 0.2120601222022176, 0.18260699916001477, 0.2186133927062669, 0.11670776576442299, 0.2697738603446894, 0.20390920259561562, 0.10892355964519806, 0.12021533019784891, 0.17525566144183935, 0.33425344834353243, 0.09930543344752951, 0.1336445451431113, 0.10375552171078872, 0.12750660995950325, 0.11770979998715825, 0.14409024085796063, 0.13180094287094601, 0.17167771340397742, 0.11892181717844219, 0.13267215350621697, 0.11908548722843948, 0.13478266226352875, 0.12414191977756073, 0.14727906004897484, 0.15452146860137306, 0.1642707560023704, 0.09591311764170951, 0.13008815344993763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019861433398042916, 9.999999999998899e-05, 9.999999999998899e-05, 0.0400687696910087, 9.999999999998899e-05, 0.0748609493592498, 0.08763623035202617, 0.0301069210720758, 0.06467192426762158, 0.05589375264111385, 0.027699932976151698, 0.09131270290514892, 0.06426262557767692, 0.06992604613652587, 0.23903949195475893, 0.08609014311015284, 0.05047572562207825, 0.09222973114775468, 0.15456070084731033, 0.12794347841164067, 0.11702507810161822, 0.0772752368461117, 0.009552252792853322, 0.10393406422784124, 0.14260777786716006, 0.05220857432283432, 0.04828625036926748, 0.09505760046480427, 0.0451406870880815, 0.050440954449133324, 0.07703624328133574, 0.0960782840517228, 0.3515663900051129, 0.4383220966512167, 0.3366274818224414, 0.3195335206683262, 0.456228202084101, 0.3827382751322359, 0.3388756617540918, 0.4231198900357632, 0.31409192165285527, 0.09196288681063247, 0.09317598791731074, 0.07700543036286911, 0.08236207915883753, 0.06756931389005472, 0.23908879292056828, 0.07102624272606084, 0.08596465075264481, 0.10987342914407405, 0.1382908448355965, 0.1187556281169474, 0.2537084617746701, 0.1398816981093165, 0.13224321514675708, 0.12696731198051692, 0.12707166616611398, 0.16186454302468722, 0.13213097947093722, 0.34654379267620694, 0.39277956660667146, 0.42782342241479343, 0.22397884277574298, 0.3855284122987145, 0.27751270259259186, 0.223414891280574, 0.39282370685819634, 0.21451669113872363, 0.2017788878238711, 0.25647425648680233, 0.1928460194932362, 0.1674512544892185, 0.26382623144282513, 0.2675338961778002, 0.18029106580470777, 0.22116738840959627, 0.2055723819957832, 0.22104213398523476, 0.22988360443286726, 0.214807162169948, 0.23049368000802883, 0.19117860817318455, 0.21078564218037965, 0.21083790851248374, 0.21156455663868756, 0.20035806460501648, 0.178001999873732, 0.17553210148918774, 0.2138219959297406, 0.1769864696095811, 0.17097638337919963, 0.1886792976395767, 0.17596379089454406, 0.1859877241869532, 0.1714726163335072, 0.17561611047296932, 0.3001055165943741, 0.1830133836351827, 0.4527735271966, 0.18236760716044487, 0.5116503130922747, 0.16094041952618754, 0.13607394280542773, 0.16633151531433954, 0.17782083856196929, 0.1587954093734959, 0.19032915501066305, 0.1859459715323415, 0.16401685295642765, 0.07934886414559494, 0.10116121444325621, 0.11448317626881399, 0.23609791522649926, 0.1663891912106923, 0.18478961951613515, 0.15965650000099652, 0.18005686164826906, 0.1690737186957787, 0.17773120102274986, 0.1783941967195697, 0.1910956195852167, 0.17897233487209196, 0.09458772144183514, 0.08236389543687639, 0.07834204070971995, 0.06970588688823987, 0.07819255187975338, 0.09517238982289566, 0.08387564825505212, 0.07788717571652648, 0.06901403562243846]}, "mutation_prompt": null}
{"id": "9660163d-31e7-4695-856b-24518a776862", "solution": "import numpy as np\n\nclass ImprovedDynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, initial_bandwidth=0.01, bandwidth_range=(0.01, 0.1), initial_pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.initial_bandwidth = initial_bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.initial_pitch_adjustment_rate = initial_pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory, bandwidth, pitch_adjustment_rate):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        bandwidth = self.initial_bandwidth\n        pitch_adjustment_rate = self.initial_pitch_adjustment_rate\n        for _ in range(self.budget):\n            bandwidth = np.clip(bandwidth + np.random.uniform(-0.005, 0.005), *self.bandwidth_range)  # Adaptive bandwidth adjustment\n            pitch_adjustment_rate = np.clip(pitch_adjustment_rate + np.random.uniform(-0.025, 0.025), *self.pitch_adjustment_range)  # Adaptive pitch adjustment rate\n            new_solution = improvise(harmony_memory, bandwidth, pitch_adjustment_rate)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "ImprovedDynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Improving exploration and exploitation balance by incorporating adaptive mutation rates based on function landscape characteristics.", "configspace": "", "generation": 41, "fitness": 0.1915406031943967, "feedback": "The algorithm ImprovedDynamicAdaptiveMemoryHarmonySearchOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.17.", "error": "", "parent_id": "eef507f0-245d-40da-be13-9ded2d3117d6", "metadata": {"aucs": [0.5536167220032309, 0.5860407312823201, 0.7021296748446754, 0.44171819066435647, 0.5569596553572105, 0.40455736370058526, 0.5022004092069119, 0.6749198933135282, 0.5136264699598841, 0.2199266359518539, 0.22236305183331284, 0.0812852851245165, 0.14233542345668415, 0.1111861648811675, 0.11150967169890846, 0.13067052500760656, 0.04697516493055043, 0.16683031577726415, 0.08633180301210686, 0.09450066213164332, 0.0754282606959239, 0.07663614578036537, 0.07376511686417997, 0.07075890479329117, 0.0932460340571808, 0.06371621033189678, 0.05874550130118694, 0.0705562540704312, 0.06165843631917889, 0.06270674722339631, 0.09571669826277396, 0.09276648014958078, 0.06457850585426783, 0.08654947739293262, 0.08787573629647649, 0.05721937417476841, 0.7767621533626756, 0.6359534292236599, 0.7185275593120326, 0.6314402904078167, 0.707941588059235, 0.6854029460709987, 0.6437842084805263, 0.7196720013806618, 0.8021251329032779, 0.1823805900532195, 0.1450002858854066, 0.10785820855058015, 0.12215055626002647, 0.2235005561150234, 0.11553878061154665, 0.115385448990029, 0.16395797394499878, 0.08192457570500444, 0.18187735080311918, 0.15208973550028682, 0.16117330801955065, 0.3501438518304345, 0.18500495416899387, 0.18642567755082673, 0.133175486682791, 0.11774692781597984, 0.24021729318441054, 0.11868940550479423, 0.14650000381412542, 0.10662430346287988, 9.999999999998899e-05, 0.17153903526180148, 0.14548287545362693, 0.14080241658243886, 0.1364917602221125, 0.3003476221192193, 0.11925750442821514, 0.11599169562736822, 0.1633534044932491, 0.1246325661516956, 0.13315551646120527, 0.1186292474740992, 0.14892782550708505, 0.17806142532877856, 0.12338320910399292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025421091002996943, 9.999999999998899e-05, 9.999999999998899e-05, 0.018502652199670178, 0.00026656768671906583, 0.13020551442289596, 0.051291916091022904, 0.04313725087263487, 0.05122888085220312, 0.10178613560053984, 0.05470624763961407, 0.09744315847984475, 0.028233508035024224, 0.0677952923034556, 0.10557920757426187, 0.009449525561754157, 0.18819034745867524, 0.06409192530159014, 0.11365310929246386, 0.08952073217321144, 0.006536747297385959, 0.16167384738085366, 0.04530963456125414, 0.056690772342691154, 0.1261775341420267, 0.0664946612725349, 0.07211557797906576, 0.09840699500856076, 0.2407920853228035, 0.0634899416693332, 0.11602440252095625, 0.02947633503910252, 0.4454117563041812, 0.4920247847494107, 0.3668389335975938, 0.3080248055065118, 0.49321135057261734, 0.3101974837705076, 0.44270827517972633, 0.4805479835098576, 0.3492030215695259, 0.08157304153780309, 0.08017275711169114, 0.0766579956701624, 0.08312275419741144, 0.08999926707963857, 0.09781665352551683, 0.11341112629734074, 0.12423724208700737, 0.12149942675183245, 0.10684678171907691, 0.11719062622940968, 0.10573895081767348, 0.11950128736566623, 0.12010699795267898, 0.12011427524895768, 0.12197694710628604, 0.1281216059996808, 0.13248987112973076, 0.25066651699381726, 0.3400417618915227, 0.2569874664885874, 0.2529933671354744, 0.19455233340199152, 0.24538475891764233, 0.2027184176278407, 0.42923749145415135, 0.1709594733745693, 0.12075649327101579, 0.24225651192124187, 0.19255509219976608, 0.17779773296918921, 0.28016109904937636, 0.27627325535932745, 0.19567867809503292, 0.20474490640708887, 0.17892805925870903, 0.17928253752137457, 0.2324833836623379, 0.21509862231878574, 0.23471870097371084, 0.2216272091008542, 0.194580738641418, 0.20624314550723644, 0.1986894982563886, 0.2042298214123962, 0.20114672886326357, 0.16803484718684725, 0.17625405352949897, 0.2066112572647939, 0.23052875289321306, 0.19957672953635697, 0.19165796642033917, 0.17085886235323922, 0.16861080978672183, 0.17884345117666456, 0.3480322229656012, 0.18267372385147018, 0.5755319286032095, 0.19368387462771564, 0.5243483259912328, 0.1443748975350403, 0.13843118894965667, 0.1517332693552651, 0.260401385383356, 0.07134985545931016, 0.0676732915786683, 0.1845058110684119, 0.19929861967050289, 0.17411152043503042, 0.10782798154952145, 0.2575418403458991, 0.09874067048027169, 0.16365266310902482, 0.17467137304561753, 0.1798457756728079, 0.18396148753677988, 0.2178592533570709, 0.22155034751031066, 0.17458853524051987, 0.17776303759610979, 0.1782557998174128, 0.09369603738084475, 0.0834700094088523, 0.0693087014411945, 0.09283879271123385, 0.08720313909534139, 0.08877115016680659, 0.07018063083686488, 0.08201597616835299, 0.08733065457400113]}, "mutation_prompt": null}
{"id": "f50c6f45-95d4-4994-ad30-b006c807c6a9", "solution": "import numpy as np\n\nclass DynamicAdaptiveMemoryHarmonySearchOppositionImproved:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.memory_consideration_prob:\n                    fitness_values = func(harmony_memory)\n                    prob = (fitness_values - np.min(fitness_values)) / (np.max(fitness_values) - np.min(fitness_values))\n                    selected_index = np.random.choice(self.harmony_memory_size, p=prob)\n                    new_solution[i] = harmony_memory[selected_index, i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicAdaptiveMemoryHarmonySearchOppositionImproved", "description": "Improving exploration by introducing a dynamic memory consideration probability based on fitness values of solutions in Harmony Memory.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities do not sum to 1').", "error": "ValueError('probabilities do not sum to 1')", "parent_id": "eef507f0-245d-40da-be13-9ded2d3117d6", "metadata": {}, "mutation_prompt": null}
{"id": "4c07dbbd-f32b-4a39-8fe4-0cbb9d088cdd", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing exploration by introducing a dynamic memory consideration probability during solution improvisation.", "configspace": "", "generation": 43, "fitness": 0.20043932955651853, "feedback": "The algorithm EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "eef507f0-245d-40da-be13-9ded2d3117d6", "metadata": {"aucs": [0.7980340943836375, 0.5129479589681162, 0.6194819758086403, 0.4845893102498753, 0.6981325009775603, 0.5394306031391863, 0.586389971356706, 0.6652546522160674, 0.5008127023238513, 0.1735354734539185, 0.11684888459765175, 9.999999999998899e-05, 0.26502986909736415, 9.999999999998899e-05, 0.20708269159015447, 0.12884165083270205, 0.20128752465558442, 0.10448407412864602, 0.08372776741355681, 0.12355526833932906, 0.09174521704568683, 0.09037723484200377, 0.0728609322489181, 0.11876835573632305, 0.11413675119950617, 0.05977215578492412, 0.09413010150915146, 0.09758724096343774, 0.06551118067572481, 0.07992689239406814, 0.0810393819426437, 0.08326924526832169, 0.08239788552632255, 0.10094291459673455, 0.06576996864439477, 0.08596497828300542, 0.8527937681805614, 0.5822672473715379, 0.8093489329482833, 0.6801910068758061, 0.6402438586701693, 0.780431581839232, 0.8030719028444516, 0.7677220987682725, 0.8495480900135932, 0.27233350844297044, 0.09902998316667122, 0.0911231380648595, 0.15416519184687227, 0.14799903977917106, 0.10423288000787101, 0.15316167214970122, 0.09061659684863022, 0.14018209873410648, 0.162905425457745, 0.22089565391993804, 0.10851662900616244, 0.2652807547519531, 0.09838109547982987, 0.18447945850482617, 0.16848640169789109, 0.11771983039340828, 0.2267777076273566, 0.21972285506215783, 0.16683233426102484, 0.05704886706002632, 0.1934030804372573, 0.022043919285563263, 0.1720551585546537, 0.1766197541789235, 0.19312592945488383, 0.13779470934989835, 0.17569416648753466, 0.1198283493926916, 0.10571662342086108, 0.12685581847545468, 0.133847047308999, 0.13581461458803967, 0.13516938532548262, 0.09918750842919488, 0.16660701385843057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04366880009713292, 0.03803195742753418, 0.053138281211760674, 0.09569489260743047, 0.07302472683879713, 0.049831048694499946, 0.09581245509077341, 0.05428123914634764, 0.10318728684523482, 0.07489633120608707, 0.06751609717091234, 0.0698161896992393, 0.07642913621620662, 0.030739023828359135, 0.044333691135704845, 0.16672675382803914, 0.06272167527477868, 0.03006434419831261, 0.051657279484833674, 0.06660432047770282, 0.05681244503727867, 0.23787474660357444, 0.07760421314379562, 0.03693783669006423, 0.13221667254261504, 0.14672780742466474, 0.11692645136783464, 0.0788743042429676, 0.04815385133270045, 0.5071598814371914, 0.4404031708049695, 0.33497032813407557, 0.31872762042371716, 0.4065155366832436, 0.3546634064185147, 0.359693177209356, 0.42794611089382395, 0.4578012766234988, 0.11034857295316347, 0.076900872600012, 0.06731177524296106, 0.104273705596861, 0.08277197781714785, 0.10684660130002488, 0.0947619807496829, 0.0984581480112311, 0.08403177069588907, 0.11839920813241733, 0.15001679542707713, 0.1485113634445725, 0.15651165547680757, 0.1264477202226102, 0.17219061056600182, 0.12549074760798684, 0.14646042148175076, 0.11556717371779923, 0.1901081913175049, 0.328591409090464, 0.1994943210219854, 0.25437990734362315, 0.4157203520156175, 0.34854576652410574, 0.21689907096646943, 0.39059811898068497, 0.21776766963372052, 0.2766747900102543, 0.1555621737812498, 0.3224486458736059, 0.25861199651876077, 0.21751321300956983, 0.2883060524532989, 0.14001944697383528, 0.17341442396030537, 0.23003963173688258, 0.1966499032424902, 0.20410232373964332, 0.21942622427328784, 0.19801240380045415, 0.23328372619324123, 0.2419816335512639, 0.22183740891101522, 0.19575323971782155, 0.2040635809812993, 0.16408927230232984, 0.19260795961069543, 0.19447861600805494, 0.18008901789141396, 0.225905095345746, 0.16827807850408882, 0.1790829287930895, 0.18310422836050144, 0.1724769680787409, 0.18083300414511583, 0.40627568273120507, 0.18035407077276855, 0.17050672348179263, 0.1668027163567929, 0.11301344953949122, 0.581390015238257, 0.7596854246194512, 0.15354248598011178, 0.3330522489343559, 0.18326080868907457, 0.4349521134678507, 0.09697184876692955, 0.1933260368742158, 0.18310054096817252, 0.12035154478385668, 0.1010330425036895, 0.16156770651573094, 0.1679235236950508, 0.1925231371303735, 0.17985789872242042, 0.18278546151029662, 0.1701904343513766, 0.16966785997746936, 0.1728130776633119, 0.17314619356680738, 0.17089212350884186, 0.07396417838606573, 0.08224506165203127, 0.09306965808231049, 0.09484231119390751, 0.07482387094450205, 0.07815324165508697, 0.05579652745124464, 0.09351677428978222, 0.07142102848691245]}, "mutation_prompt": null}
{"id": "37881b2d-ebff-461f-b191-ee7360a5ed37", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing exploration by introducing a dynamic memory consideration probability during solution improvisation.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c07dbbd-f32b-4a39-8fe4-0cbb9d088cdd", "metadata": {"aucs": [0.7980340943836375, 0.5129479589681162, 0.6194819758086403, 0.4845893102498753, 0.6981325009775603, 0.5394306031391863, 0.586389971356706, 0.6652546522160674, 0.5008127023238513, 0.1735354734539185, 0.11684888459765175, 9.999999999998899e-05, 0.26502986909736415, 9.999999999998899e-05, 0.20708269159015447, 0.12884165083270205, 0.20128752465558442, 0.10448407412864602, 0.08372776741355681, 0.12355526833932906, 0.09174521704568683, 0.09037723484200377, 0.0728609322489181, 0.11876835573632305, 0.11413675119950617, 0.05977215578492412, 0.09413010150915146, 0.09758724096343774, 0.06551118067572481, 0.07992689239406814, 0.0810393819426437, 0.08326924526832169, 0.08239788552632255, 0.10094291459673455, 0.06576996864439477, 0.08596497828300542, 0.8527937681805614, 0.5822672473715379, 0.8093489329482833, 0.6801910068758061, 0.6402438586701693, 0.780431581839232, 0.8030719028444516, 0.7677220987682725, 0.8495480900135932, 0.27233350844297044, 0.09902998316667122, 0.0911231380648595, 0.15416519184687227, 0.14799903977917106, 0.10423288000787101, 0.15316167214970122, 0.09061659684863022, 0.14018209873410648, 0.162905425457745, 0.22089565391993804, 0.10851662900616244, 0.2652807547519531, 0.09838109547982987, 0.18447945850482617, 0.16848640169789109, 0.11771983039340828, 0.2267777076273566, 0.21972285506215783, 0.16683233426102484, 0.05704886706002632, 0.1934030804372573, 0.022043919285563263, 0.1720551585546537, 0.1766197541789235, 0.19312592945488383, 0.13779470934989835, 0.17569416648753466, 0.1198283493926916, 0.10571662342086108, 0.12685581847545468, 0.133847047308999, 0.13581461458803967, 0.13516938532548262, 0.09918750842919488, 0.16660701385843057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04366880009713292, 0.03803195742753418, 0.053138281211760674, 0.09569489260743047, 0.07302472683879713, 0.049831048694499946, 0.09581245509077341, 0.05428123914634764, 0.10318728684523482, 0.07489633120608707, 0.06751609717091234, 0.0698161896992393, 0.07642913621620662, 0.030739023828359135, 0.044333691135704845, 0.16672675382803914, 0.06272167527477868, 0.03006434419831261, 0.051657279484833674, 0.06660432047770282, 0.05681244503727867, 0.23787474660357444, 0.07760421314379562, 0.03693783669006423, 0.13221667254261504, 0.14672780742466474, 0.11692645136783464, 0.0788743042429676, 0.04815385133270045, 0.5071598814371914, 0.4404031708049695, 0.33497032813407557, 0.31872762042371716, 0.4065155366832436, 0.3546634064185147, 0.359693177209356, 0.42794611089382395, 0.4578012766234988, 0.11034857295316347, 0.076900872600012, 0.06731177524296106, 0.104273705596861, 0.08277197781714785, 0.10684660130002488, 0.0947619807496829, 0.0984581480112311, 0.08403177069588907, 0.11839920813241733, 0.15001679542707713, 0.1485113634445725, 0.15651165547680757, 0.1264477202226102, 0.17219061056600182, 0.12549074760798684, 0.14646042148175076, 0.11556717371779923, 0.1901081913175049, 0.328591409090464, 0.1994943210219854, 0.25437990734362315, 0.4157203520156175, 0.34854576652410574, 0.21689907096646943, 0.39059811898068497, 0.21776766963372052, 0.2766747900102543, 0.1555621737812498, 0.3224486458736059, 0.25861199651876077, 0.21751321300956983, 0.2883060524532989, 0.14001944697383528, 0.17341442396030537, 0.23003963173688258, 0.1966499032424902, 0.20410232373964332, 0.21942622427328784, 0.19801240380045415, 0.23328372619324123, 0.2419816335512639, 0.22183740891101522, 0.19575323971782155, 0.2040635809812993, 0.16408927230232984, 0.19260795961069543, 0.19447861600805494, 0.18008901789141396, 0.225905095345746, 0.16827807850408882, 0.1790829287930895, 0.18310422836050144, 0.1724769680787409, 0.18083300414511583, 0.40627568273120507, 0.18035407077276855, 0.17050672348179263, 0.1668027163567929, 0.11301344953949122, 0.581390015238257, 0.7596854246194512, 0.15354248598011178, 0.3330522489343559, 0.18326080868907457, 0.4349521134678507, 0.09697184876692955, 0.1933260368742158, 0.18310054096817252, 0.12035154478385668, 0.1010330425036895, 0.16156770651573094, 0.1679235236950508, 0.1925231371303735, 0.17985789872242042, 0.18278546151029662, 0.1701904343513766, 0.16966785997746936, 0.1728130776633119, 0.17314619356680738, 0.17089212350884186, 0.07396417838606573, 0.08224506165203127, 0.09306965808231049, 0.09484231119390751, 0.07482387094450205, 0.07815324165508697, 0.05579652745124464, 0.09351677428978222, 0.07142102848691245]}, "mutation_prompt": null}
{"id": "e8c2cb9e-6715-4855-a696-a6d945e4968a", "solution": "import numpy as np\n\nclass MultiBandDynamicMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_ranges=[(0.1, 0.5) for _ in range(dim)], memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_ranges = pitch_adjustment_ranges\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_ranges[i])\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "MultiBandDynamicMemoryHarmonySearchOpposition", "description": "Improving exploration and exploitation balance by incorporating multi-band dynamic pitch adjustment across dimensions during solution improvisation.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'dim' is not defined\").", "error": "NameError(\"name 'dim' is not defined\")", "parent_id": "4c07dbbd-f32b-4a39-8fe4-0cbb9d088cdd", "metadata": {}, "mutation_prompt": null}
{"id": "441fc35c-6a48-4c5e-b427-05523aec0b1e", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing exploration by introducing a dynamic memory consideration probability during solution improvisation.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c07dbbd-f32b-4a39-8fe4-0cbb9d088cdd", "metadata": {"aucs": [0.7980340943836375, 0.5129479589681162, 0.6194819758086403, 0.4845893102498753, 0.6981325009775603, 0.5394306031391863, 0.586389971356706, 0.6652546522160674, 0.5008127023238513, 0.1735354734539185, 0.11684888459765175, 9.999999999998899e-05, 0.26502986909736415, 9.999999999998899e-05, 0.20708269159015447, 0.12884165083270205, 0.20128752465558442, 0.10448407412864602, 0.08372776741355681, 0.12355526833932906, 0.09174521704568683, 0.09037723484200377, 0.0728609322489181, 0.11876835573632305, 0.11413675119950617, 0.05977215578492412, 0.09413010150915146, 0.09758724096343774, 0.06551118067572481, 0.07992689239406814, 0.0810393819426437, 0.08326924526832169, 0.08239788552632255, 0.10094291459673455, 0.06576996864439477, 0.08596497828300542, 0.8527937681805614, 0.5822672473715379, 0.8093489329482833, 0.6801910068758061, 0.6402438586701693, 0.780431581839232, 0.8030719028444516, 0.7677220987682725, 0.8495480900135932, 0.27233350844297044, 0.09902998316667122, 0.0911231380648595, 0.15416519184687227, 0.14799903977917106, 0.10423288000787101, 0.15316167214970122, 0.09061659684863022, 0.14018209873410648, 0.162905425457745, 0.22089565391993804, 0.10851662900616244, 0.2652807547519531, 0.09838109547982987, 0.18447945850482617, 0.16848640169789109, 0.11771983039340828, 0.2267777076273566, 0.21972285506215783, 0.16683233426102484, 0.05704886706002632, 0.1934030804372573, 0.022043919285563263, 0.1720551585546537, 0.1766197541789235, 0.19312592945488383, 0.13779470934989835, 0.17569416648753466, 0.1198283493926916, 0.10571662342086108, 0.12685581847545468, 0.133847047308999, 0.13581461458803967, 0.13516938532548262, 0.09918750842919488, 0.16660701385843057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04366880009713292, 0.03803195742753418, 0.053138281211760674, 0.09569489260743047, 0.07302472683879713, 0.049831048694499946, 0.09581245509077341, 0.05428123914634764, 0.10318728684523482, 0.07489633120608707, 0.06751609717091234, 0.0698161896992393, 0.07642913621620662, 0.030739023828359135, 0.044333691135704845, 0.16672675382803914, 0.06272167527477868, 0.03006434419831261, 0.051657279484833674, 0.06660432047770282, 0.05681244503727867, 0.23787474660357444, 0.07760421314379562, 0.03693783669006423, 0.13221667254261504, 0.14672780742466474, 0.11692645136783464, 0.0788743042429676, 0.04815385133270045, 0.5071598814371914, 0.4404031708049695, 0.33497032813407557, 0.31872762042371716, 0.4065155366832436, 0.3546634064185147, 0.359693177209356, 0.42794611089382395, 0.4578012766234988, 0.11034857295316347, 0.076900872600012, 0.06731177524296106, 0.104273705596861, 0.08277197781714785, 0.10684660130002488, 0.0947619807496829, 0.0984581480112311, 0.08403177069588907, 0.11839920813241733, 0.15001679542707713, 0.1485113634445725, 0.15651165547680757, 0.1264477202226102, 0.17219061056600182, 0.12549074760798684, 0.14646042148175076, 0.11556717371779923, 0.1901081913175049, 0.328591409090464, 0.1994943210219854, 0.25437990734362315, 0.4157203520156175, 0.34854576652410574, 0.21689907096646943, 0.39059811898068497, 0.21776766963372052, 0.2766747900102543, 0.1555621737812498, 0.3224486458736059, 0.25861199651876077, 0.21751321300956983, 0.2883060524532989, 0.14001944697383528, 0.17341442396030537, 0.23003963173688258, 0.1966499032424902, 0.20410232373964332, 0.21942622427328784, 0.19801240380045415, 0.23328372619324123, 0.2419816335512639, 0.22183740891101522, 0.19575323971782155, 0.2040635809812993, 0.16408927230232984, 0.19260795961069543, 0.19447861600805494, 0.18008901789141396, 0.225905095345746, 0.16827807850408882, 0.1790829287930895, 0.18310422836050144, 0.1724769680787409, 0.18083300414511583, 0.40627568273120507, 0.18035407077276855, 0.17050672348179263, 0.1668027163567929, 0.11301344953949122, 0.581390015238257, 0.7596854246194512, 0.15354248598011178, 0.3330522489343559, 0.18326080868907457, 0.4349521134678507, 0.09697184876692955, 0.1933260368742158, 0.18310054096817252, 0.12035154478385668, 0.1010330425036895, 0.16156770651573094, 0.1679235236950508, 0.1925231371303735, 0.17985789872242042, 0.18278546151029662, 0.1701904343513766, 0.16966785997746936, 0.1728130776633119, 0.17314619356680738, 0.17089212350884186, 0.07396417838606573, 0.08224506165203127, 0.09306965808231049, 0.09484231119390751, 0.07482387094450205, 0.07815324165508697, 0.05579652745124464, 0.09351677428978222, 0.07142102848691245]}, "mutation_prompt": null}
{"id": "7e2d9acb-5736-454a-88d9-d922a8ef372e", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing exploration by introducing a dynamic memory consideration probability during solution improvisation.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c07dbbd-f32b-4a39-8fe4-0cbb9d088cdd", "metadata": {"aucs": [0.7980340943836375, 0.5129479589681162, 0.6194819758086403, 0.4845893102498753, 0.6981325009775603, 0.5394306031391863, 0.586389971356706, 0.6652546522160674, 0.5008127023238513, 0.1735354734539185, 0.11684888459765175, 9.999999999998899e-05, 0.26502986909736415, 9.999999999998899e-05, 0.20708269159015447, 0.12884165083270205, 0.20128752465558442, 0.10448407412864602, 0.08372776741355681, 0.12355526833932906, 0.09174521704568683, 0.09037723484200377, 0.0728609322489181, 0.11876835573632305, 0.11413675119950617, 0.05977215578492412, 0.09413010150915146, 0.09758724096343774, 0.06551118067572481, 0.07992689239406814, 0.0810393819426437, 0.08326924526832169, 0.08239788552632255, 0.10094291459673455, 0.06576996864439477, 0.08596497828300542, 0.8527937681805614, 0.5822672473715379, 0.8093489329482833, 0.6801910068758061, 0.6402438586701693, 0.780431581839232, 0.8030719028444516, 0.7677220987682725, 0.8495480900135932, 0.27233350844297044, 0.09902998316667122, 0.0911231380648595, 0.15416519184687227, 0.14799903977917106, 0.10423288000787101, 0.15316167214970122, 0.09061659684863022, 0.14018209873410648, 0.162905425457745, 0.22089565391993804, 0.10851662900616244, 0.2652807547519531, 0.09838109547982987, 0.18447945850482617, 0.16848640169789109, 0.11771983039340828, 0.2267777076273566, 0.21972285506215783, 0.16683233426102484, 0.05704886706002632, 0.1934030804372573, 0.022043919285563263, 0.1720551585546537, 0.1766197541789235, 0.19312592945488383, 0.13779470934989835, 0.17569416648753466, 0.1198283493926916, 0.10571662342086108, 0.12685581847545468, 0.133847047308999, 0.13581461458803967, 0.13516938532548262, 0.09918750842919488, 0.16660701385843057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04366880009713292, 0.03803195742753418, 0.053138281211760674, 0.09569489260743047, 0.07302472683879713, 0.049831048694499946, 0.09581245509077341, 0.05428123914634764, 0.10318728684523482, 0.07489633120608707, 0.06751609717091234, 0.0698161896992393, 0.07642913621620662, 0.030739023828359135, 0.044333691135704845, 0.16672675382803914, 0.06272167527477868, 0.03006434419831261, 0.051657279484833674, 0.06660432047770282, 0.05681244503727867, 0.23787474660357444, 0.07760421314379562, 0.03693783669006423, 0.13221667254261504, 0.14672780742466474, 0.11692645136783464, 0.0788743042429676, 0.04815385133270045, 0.5071598814371914, 0.4404031708049695, 0.33497032813407557, 0.31872762042371716, 0.4065155366832436, 0.3546634064185147, 0.359693177209356, 0.42794611089382395, 0.4578012766234988, 0.11034857295316347, 0.076900872600012, 0.06731177524296106, 0.104273705596861, 0.08277197781714785, 0.10684660130002488, 0.0947619807496829, 0.0984581480112311, 0.08403177069588907, 0.11839920813241733, 0.15001679542707713, 0.1485113634445725, 0.15651165547680757, 0.1264477202226102, 0.17219061056600182, 0.12549074760798684, 0.14646042148175076, 0.11556717371779923, 0.1901081913175049, 0.328591409090464, 0.1994943210219854, 0.25437990734362315, 0.4157203520156175, 0.34854576652410574, 0.21689907096646943, 0.39059811898068497, 0.21776766963372052, 0.2766747900102543, 0.1555621737812498, 0.3224486458736059, 0.25861199651876077, 0.21751321300956983, 0.2883060524532989, 0.14001944697383528, 0.17341442396030537, 0.23003963173688258, 0.1966499032424902, 0.20410232373964332, 0.21942622427328784, 0.19801240380045415, 0.23328372619324123, 0.2419816335512639, 0.22183740891101522, 0.19575323971782155, 0.2040635809812993, 0.16408927230232984, 0.19260795961069543, 0.19447861600805494, 0.18008901789141396, 0.225905095345746, 0.16827807850408882, 0.1790829287930895, 0.18310422836050144, 0.1724769680787409, 0.18083300414511583, 0.40627568273120507, 0.18035407077276855, 0.17050672348179263, 0.1668027163567929, 0.11301344953949122, 0.581390015238257, 0.7596854246194512, 0.15354248598011178, 0.3330522489343559, 0.18326080868907457, 0.4349521134678507, 0.09697184876692955, 0.1933260368742158, 0.18310054096817252, 0.12035154478385668, 0.1010330425036895, 0.16156770651573094, 0.1679235236950508, 0.1925231371303735, 0.17985789872242042, 0.18278546151029662, 0.1701904343513766, 0.16966785997746936, 0.1728130776633119, 0.17314619356680738, 0.17089212350884186, 0.07396417838606573, 0.08224506165203127, 0.09306965808231049, 0.09484231119390751, 0.07482387094450205, 0.07815324165508697, 0.05579652745124464, 0.09351677428978222, 0.07142102848691245]}, "mutation_prompt": null}
{"id": "96135c69-1a2d-4a66-8415-b6e9e4f1bdf5", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing exploration by introducing a dynamic memory consideration probability during solution improvisation.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c07dbbd-f32b-4a39-8fe4-0cbb9d088cdd", "metadata": {"aucs": [0.7980340943836375, 0.5129479589681162, 0.6194819758086403, 0.4845893102498753, 0.6981325009775603, 0.5394306031391863, 0.586389971356706, 0.6652546522160674, 0.5008127023238513, 0.1735354734539185, 0.11684888459765175, 9.999999999998899e-05, 0.26502986909736415, 9.999999999998899e-05, 0.20708269159015447, 0.12884165083270205, 0.20128752465558442, 0.10448407412864602, 0.08372776741355681, 0.12355526833932906, 0.09174521704568683, 0.09037723484200377, 0.0728609322489181, 0.11876835573632305, 0.11413675119950617, 0.05977215578492412, 0.09413010150915146, 0.09758724096343774, 0.06551118067572481, 0.07992689239406814, 0.0810393819426437, 0.08326924526832169, 0.08239788552632255, 0.10094291459673455, 0.06576996864439477, 0.08596497828300542, 0.8527937681805614, 0.5822672473715379, 0.8093489329482833, 0.6801910068758061, 0.6402438586701693, 0.780431581839232, 0.8030719028444516, 0.7677220987682725, 0.8495480900135932, 0.27233350844297044, 0.09902998316667122, 0.0911231380648595, 0.15416519184687227, 0.14799903977917106, 0.10423288000787101, 0.15316167214970122, 0.09061659684863022, 0.14018209873410648, 0.162905425457745, 0.22089565391993804, 0.10851662900616244, 0.2652807547519531, 0.09838109547982987, 0.18447945850482617, 0.16848640169789109, 0.11771983039340828, 0.2267777076273566, 0.21972285506215783, 0.16683233426102484, 0.05704886706002632, 0.1934030804372573, 0.022043919285563263, 0.1720551585546537, 0.1766197541789235, 0.19312592945488383, 0.13779470934989835, 0.17569416648753466, 0.1198283493926916, 0.10571662342086108, 0.12685581847545468, 0.133847047308999, 0.13581461458803967, 0.13516938532548262, 0.09918750842919488, 0.16660701385843057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04366880009713292, 0.03803195742753418, 0.053138281211760674, 0.09569489260743047, 0.07302472683879713, 0.049831048694499946, 0.09581245509077341, 0.05428123914634764, 0.10318728684523482, 0.07489633120608707, 0.06751609717091234, 0.0698161896992393, 0.07642913621620662, 0.030739023828359135, 0.044333691135704845, 0.16672675382803914, 0.06272167527477868, 0.03006434419831261, 0.051657279484833674, 0.06660432047770282, 0.05681244503727867, 0.23787474660357444, 0.07760421314379562, 0.03693783669006423, 0.13221667254261504, 0.14672780742466474, 0.11692645136783464, 0.0788743042429676, 0.04815385133270045, 0.5071598814371914, 0.4404031708049695, 0.33497032813407557, 0.31872762042371716, 0.4065155366832436, 0.3546634064185147, 0.359693177209356, 0.42794611089382395, 0.4578012766234988, 0.11034857295316347, 0.076900872600012, 0.06731177524296106, 0.104273705596861, 0.08277197781714785, 0.10684660130002488, 0.0947619807496829, 0.0984581480112311, 0.08403177069588907, 0.11839920813241733, 0.15001679542707713, 0.1485113634445725, 0.15651165547680757, 0.1264477202226102, 0.17219061056600182, 0.12549074760798684, 0.14646042148175076, 0.11556717371779923, 0.1901081913175049, 0.328591409090464, 0.1994943210219854, 0.25437990734362315, 0.4157203520156175, 0.34854576652410574, 0.21689907096646943, 0.39059811898068497, 0.21776766963372052, 0.2766747900102543, 0.1555621737812498, 0.3224486458736059, 0.25861199651876077, 0.21751321300956983, 0.2883060524532989, 0.14001944697383528, 0.17341442396030537, 0.23003963173688258, 0.1966499032424902, 0.20410232373964332, 0.21942622427328784, 0.19801240380045415, 0.23328372619324123, 0.2419816335512639, 0.22183740891101522, 0.19575323971782155, 0.2040635809812993, 0.16408927230232984, 0.19260795961069543, 0.19447861600805494, 0.18008901789141396, 0.225905095345746, 0.16827807850408882, 0.1790829287930895, 0.18310422836050144, 0.1724769680787409, 0.18083300414511583, 0.40627568273120507, 0.18035407077276855, 0.17050672348179263, 0.1668027163567929, 0.11301344953949122, 0.581390015238257, 0.7596854246194512, 0.15354248598011178, 0.3330522489343559, 0.18326080868907457, 0.4349521134678507, 0.09697184876692955, 0.1933260368742158, 0.18310054096817252, 0.12035154478385668, 0.1010330425036895, 0.16156770651573094, 0.1679235236950508, 0.1925231371303735, 0.17985789872242042, 0.18278546151029662, 0.1701904343513766, 0.16966785997746936, 0.1728130776633119, 0.17314619356680738, 0.17089212350884186, 0.07396417838606573, 0.08224506165203127, 0.09306965808231049, 0.09484231119390751, 0.07482387094450205, 0.07815324165508697, 0.05579652745124464, 0.09351677428978222, 0.07142102848691245]}, "mutation_prompt": null}
{"id": "9f9ee0c8-104c-470a-952c-a83799773fb1", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing exploration by introducing a dynamic memory consideration probability during solution improvisation.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c07dbbd-f32b-4a39-8fe4-0cbb9d088cdd", "metadata": {"aucs": [0.7980340943836375, 0.5129479589681162, 0.6194819758086403, 0.4845893102498753, 0.6981325009775603, 0.5394306031391863, 0.586389971356706, 0.6652546522160674, 0.5008127023238513, 0.1735354734539185, 0.11684888459765175, 9.999999999998899e-05, 0.26502986909736415, 9.999999999998899e-05, 0.20708269159015447, 0.12884165083270205, 0.20128752465558442, 0.10448407412864602, 0.08372776741355681, 0.12355526833932906, 0.09174521704568683, 0.09037723484200377, 0.0728609322489181, 0.11876835573632305, 0.11413675119950617, 0.05977215578492412, 0.09413010150915146, 0.09758724096343774, 0.06551118067572481, 0.07992689239406814, 0.0810393819426437, 0.08326924526832169, 0.08239788552632255, 0.10094291459673455, 0.06576996864439477, 0.08596497828300542, 0.8527937681805614, 0.5822672473715379, 0.8093489329482833, 0.6801910068758061, 0.6402438586701693, 0.780431581839232, 0.8030719028444516, 0.7677220987682725, 0.8495480900135932, 0.27233350844297044, 0.09902998316667122, 0.0911231380648595, 0.15416519184687227, 0.14799903977917106, 0.10423288000787101, 0.15316167214970122, 0.09061659684863022, 0.14018209873410648, 0.162905425457745, 0.22089565391993804, 0.10851662900616244, 0.2652807547519531, 0.09838109547982987, 0.18447945850482617, 0.16848640169789109, 0.11771983039340828, 0.2267777076273566, 0.21972285506215783, 0.16683233426102484, 0.05704886706002632, 0.1934030804372573, 0.022043919285563263, 0.1720551585546537, 0.1766197541789235, 0.19312592945488383, 0.13779470934989835, 0.17569416648753466, 0.1198283493926916, 0.10571662342086108, 0.12685581847545468, 0.133847047308999, 0.13581461458803967, 0.13516938532548262, 0.09918750842919488, 0.16660701385843057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04366880009713292, 0.03803195742753418, 0.053138281211760674, 0.09569489260743047, 0.07302472683879713, 0.049831048694499946, 0.09581245509077341, 0.05428123914634764, 0.10318728684523482, 0.07489633120608707, 0.06751609717091234, 0.0698161896992393, 0.07642913621620662, 0.030739023828359135, 0.044333691135704845, 0.16672675382803914, 0.06272167527477868, 0.03006434419831261, 0.051657279484833674, 0.06660432047770282, 0.05681244503727867, 0.23787474660357444, 0.07760421314379562, 0.03693783669006423, 0.13221667254261504, 0.14672780742466474, 0.11692645136783464, 0.0788743042429676, 0.04815385133270045, 0.5071598814371914, 0.4404031708049695, 0.33497032813407557, 0.31872762042371716, 0.4065155366832436, 0.3546634064185147, 0.359693177209356, 0.42794611089382395, 0.4578012766234988, 0.11034857295316347, 0.076900872600012, 0.06731177524296106, 0.104273705596861, 0.08277197781714785, 0.10684660130002488, 0.0947619807496829, 0.0984581480112311, 0.08403177069588907, 0.11839920813241733, 0.15001679542707713, 0.1485113634445725, 0.15651165547680757, 0.1264477202226102, 0.17219061056600182, 0.12549074760798684, 0.14646042148175076, 0.11556717371779923, 0.1901081913175049, 0.328591409090464, 0.1994943210219854, 0.25437990734362315, 0.4157203520156175, 0.34854576652410574, 0.21689907096646943, 0.39059811898068497, 0.21776766963372052, 0.2766747900102543, 0.1555621737812498, 0.3224486458736059, 0.25861199651876077, 0.21751321300956983, 0.2883060524532989, 0.14001944697383528, 0.17341442396030537, 0.23003963173688258, 0.1966499032424902, 0.20410232373964332, 0.21942622427328784, 0.19801240380045415, 0.23328372619324123, 0.2419816335512639, 0.22183740891101522, 0.19575323971782155, 0.2040635809812993, 0.16408927230232984, 0.19260795961069543, 0.19447861600805494, 0.18008901789141396, 0.225905095345746, 0.16827807850408882, 0.1790829287930895, 0.18310422836050144, 0.1724769680787409, 0.18083300414511583, 0.40627568273120507, 0.18035407077276855, 0.17050672348179263, 0.1668027163567929, 0.11301344953949122, 0.581390015238257, 0.7596854246194512, 0.15354248598011178, 0.3330522489343559, 0.18326080868907457, 0.4349521134678507, 0.09697184876692955, 0.1933260368742158, 0.18310054096817252, 0.12035154478385668, 0.1010330425036895, 0.16156770651573094, 0.1679235236950508, 0.1925231371303735, 0.17985789872242042, 0.18278546151029662, 0.1701904343513766, 0.16966785997746936, 0.1728130776633119, 0.17314619356680738, 0.17089212350884186, 0.07396417838606573, 0.08224506165203127, 0.09306965808231049, 0.09484231119390751, 0.07482387094450205, 0.07815324165508697, 0.05579652745124464, 0.09351677428978222, 0.07142102848691245]}, "mutation_prompt": null}
{"id": "984d39b7-35e0-4e26-8de3-2e1d618db818", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing exploration by introducing a dynamic memory consideration probability during solution improvisation.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c07dbbd-f32b-4a39-8fe4-0cbb9d088cdd", "metadata": {"aucs": [0.7980340943836375, 0.5129479589681162, 0.6194819758086403, 0.4845893102498753, 0.6981325009775603, 0.5394306031391863, 0.586389971356706, 0.6652546522160674, 0.5008127023238513, 0.1735354734539185, 0.11684888459765175, 9.999999999998899e-05, 0.26502986909736415, 9.999999999998899e-05, 0.20708269159015447, 0.12884165083270205, 0.20128752465558442, 0.10448407412864602, 0.08372776741355681, 0.12355526833932906, 0.09174521704568683, 0.09037723484200377, 0.0728609322489181, 0.11876835573632305, 0.11413675119950617, 0.05977215578492412, 0.09413010150915146, 0.09758724096343774, 0.06551118067572481, 0.07992689239406814, 0.0810393819426437, 0.08326924526832169, 0.08239788552632255, 0.10094291459673455, 0.06576996864439477, 0.08596497828300542, 0.8527937681805614, 0.5822672473715379, 0.8093489329482833, 0.6801910068758061, 0.6402438586701693, 0.780431581839232, 0.8030719028444516, 0.7677220987682725, 0.8495480900135932, 0.27233350844297044, 0.09902998316667122, 0.0911231380648595, 0.15416519184687227, 0.14799903977917106, 0.10423288000787101, 0.15316167214970122, 0.09061659684863022, 0.14018209873410648, 0.162905425457745, 0.22089565391993804, 0.10851662900616244, 0.2652807547519531, 0.09838109547982987, 0.18447945850482617, 0.16848640169789109, 0.11771983039340828, 0.2267777076273566, 0.21972285506215783, 0.16683233426102484, 0.05704886706002632, 0.1934030804372573, 0.022043919285563263, 0.1720551585546537, 0.1766197541789235, 0.19312592945488383, 0.13779470934989835, 0.17569416648753466, 0.1198283493926916, 0.10571662342086108, 0.12685581847545468, 0.133847047308999, 0.13581461458803967, 0.13516938532548262, 0.09918750842919488, 0.16660701385843057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04366880009713292, 0.03803195742753418, 0.053138281211760674, 0.09569489260743047, 0.07302472683879713, 0.049831048694499946, 0.09581245509077341, 0.05428123914634764, 0.10318728684523482, 0.07489633120608707, 0.06751609717091234, 0.0698161896992393, 0.07642913621620662, 0.030739023828359135, 0.044333691135704845, 0.16672675382803914, 0.06272167527477868, 0.03006434419831261, 0.051657279484833674, 0.06660432047770282, 0.05681244503727867, 0.23787474660357444, 0.07760421314379562, 0.03693783669006423, 0.13221667254261504, 0.14672780742466474, 0.11692645136783464, 0.0788743042429676, 0.04815385133270045, 0.5071598814371914, 0.4404031708049695, 0.33497032813407557, 0.31872762042371716, 0.4065155366832436, 0.3546634064185147, 0.359693177209356, 0.42794611089382395, 0.4578012766234988, 0.11034857295316347, 0.076900872600012, 0.06731177524296106, 0.104273705596861, 0.08277197781714785, 0.10684660130002488, 0.0947619807496829, 0.0984581480112311, 0.08403177069588907, 0.11839920813241733, 0.15001679542707713, 0.1485113634445725, 0.15651165547680757, 0.1264477202226102, 0.17219061056600182, 0.12549074760798684, 0.14646042148175076, 0.11556717371779923, 0.1901081913175049, 0.328591409090464, 0.1994943210219854, 0.25437990734362315, 0.4157203520156175, 0.34854576652410574, 0.21689907096646943, 0.39059811898068497, 0.21776766963372052, 0.2766747900102543, 0.1555621737812498, 0.3224486458736059, 0.25861199651876077, 0.21751321300956983, 0.2883060524532989, 0.14001944697383528, 0.17341442396030537, 0.23003963173688258, 0.1966499032424902, 0.20410232373964332, 0.21942622427328784, 0.19801240380045415, 0.23328372619324123, 0.2419816335512639, 0.22183740891101522, 0.19575323971782155, 0.2040635809812993, 0.16408927230232984, 0.19260795961069543, 0.19447861600805494, 0.18008901789141396, 0.225905095345746, 0.16827807850408882, 0.1790829287930895, 0.18310422836050144, 0.1724769680787409, 0.18083300414511583, 0.40627568273120507, 0.18035407077276855, 0.17050672348179263, 0.1668027163567929, 0.11301344953949122, 0.581390015238257, 0.7596854246194512, 0.15354248598011178, 0.3330522489343559, 0.18326080868907457, 0.4349521134678507, 0.09697184876692955, 0.1933260368742158, 0.18310054096817252, 0.12035154478385668, 0.1010330425036895, 0.16156770651573094, 0.1679235236950508, 0.1925231371303735, 0.17985789872242042, 0.18278546151029662, 0.1701904343513766, 0.16966785997746936, 0.1728130776633119, 0.17314619356680738, 0.17089212350884186, 0.07396417838606573, 0.08224506165203127, 0.09306965808231049, 0.09484231119390751, 0.07482387094450205, 0.07815324165508697, 0.05579652745124464, 0.09351677428978222, 0.07142102848691245]}, "mutation_prompt": null}
{"id": "ead8f7e4-ed00-45c6-810f-9e92c80c7149", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOpposition", "description": "Enhancing exploration by introducing a dynamic memory consideration probability during solution improvisation.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4c07dbbd-f32b-4a39-8fe4-0cbb9d088cdd", "metadata": {"aucs": [0.7980340943836375, 0.5129479589681162, 0.6194819758086403, 0.4845893102498753, 0.6981325009775603, 0.5394306031391863, 0.586389971356706, 0.6652546522160674, 0.5008127023238513, 0.1735354734539185, 0.11684888459765175, 9.999999999998899e-05, 0.26502986909736415, 9.999999999998899e-05, 0.20708269159015447, 0.12884165083270205, 0.20128752465558442, 0.10448407412864602, 0.08372776741355681, 0.12355526833932906, 0.09174521704568683, 0.09037723484200377, 0.0728609322489181, 0.11876835573632305, 0.11413675119950617, 0.05977215578492412, 0.09413010150915146, 0.09758724096343774, 0.06551118067572481, 0.07992689239406814, 0.0810393819426437, 0.08326924526832169, 0.08239788552632255, 0.10094291459673455, 0.06576996864439477, 0.08596497828300542, 0.8527937681805614, 0.5822672473715379, 0.8093489329482833, 0.6801910068758061, 0.6402438586701693, 0.780431581839232, 0.8030719028444516, 0.7677220987682725, 0.8495480900135932, 0.27233350844297044, 0.09902998316667122, 0.0911231380648595, 0.15416519184687227, 0.14799903977917106, 0.10423288000787101, 0.15316167214970122, 0.09061659684863022, 0.14018209873410648, 0.162905425457745, 0.22089565391993804, 0.10851662900616244, 0.2652807547519531, 0.09838109547982987, 0.18447945850482617, 0.16848640169789109, 0.11771983039340828, 0.2267777076273566, 0.21972285506215783, 0.16683233426102484, 0.05704886706002632, 0.1934030804372573, 0.022043919285563263, 0.1720551585546537, 0.1766197541789235, 0.19312592945488383, 0.13779470934989835, 0.17569416648753466, 0.1198283493926916, 0.10571662342086108, 0.12685581847545468, 0.133847047308999, 0.13581461458803967, 0.13516938532548262, 0.09918750842919488, 0.16660701385843057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04366880009713292, 0.03803195742753418, 0.053138281211760674, 0.09569489260743047, 0.07302472683879713, 0.049831048694499946, 0.09581245509077341, 0.05428123914634764, 0.10318728684523482, 0.07489633120608707, 0.06751609717091234, 0.0698161896992393, 0.07642913621620662, 0.030739023828359135, 0.044333691135704845, 0.16672675382803914, 0.06272167527477868, 0.03006434419831261, 0.051657279484833674, 0.06660432047770282, 0.05681244503727867, 0.23787474660357444, 0.07760421314379562, 0.03693783669006423, 0.13221667254261504, 0.14672780742466474, 0.11692645136783464, 0.0788743042429676, 0.04815385133270045, 0.5071598814371914, 0.4404031708049695, 0.33497032813407557, 0.31872762042371716, 0.4065155366832436, 0.3546634064185147, 0.359693177209356, 0.42794611089382395, 0.4578012766234988, 0.11034857295316347, 0.076900872600012, 0.06731177524296106, 0.104273705596861, 0.08277197781714785, 0.10684660130002488, 0.0947619807496829, 0.0984581480112311, 0.08403177069588907, 0.11839920813241733, 0.15001679542707713, 0.1485113634445725, 0.15651165547680757, 0.1264477202226102, 0.17219061056600182, 0.12549074760798684, 0.14646042148175076, 0.11556717371779923, 0.1901081913175049, 0.328591409090464, 0.1994943210219854, 0.25437990734362315, 0.4157203520156175, 0.34854576652410574, 0.21689907096646943, 0.39059811898068497, 0.21776766963372052, 0.2766747900102543, 0.1555621737812498, 0.3224486458736059, 0.25861199651876077, 0.21751321300956983, 0.2883060524532989, 0.14001944697383528, 0.17341442396030537, 0.23003963173688258, 0.1966499032424902, 0.20410232373964332, 0.21942622427328784, 0.19801240380045415, 0.23328372619324123, 0.2419816335512639, 0.22183740891101522, 0.19575323971782155, 0.2040635809812993, 0.16408927230232984, 0.19260795961069543, 0.19447861600805494, 0.18008901789141396, 0.225905095345746, 0.16827807850408882, 0.1790829287930895, 0.18310422836050144, 0.1724769680787409, 0.18083300414511583, 0.40627568273120507, 0.18035407077276855, 0.17050672348179263, 0.1668027163567929, 0.11301344953949122, 0.581390015238257, 0.7596854246194512, 0.15354248598011178, 0.3330522489343559, 0.18326080868907457, 0.4349521134678507, 0.09697184876692955, 0.1933260368742158, 0.18310054096817252, 0.12035154478385668, 0.1010330425036895, 0.16156770651573094, 0.1679235236950508, 0.1925231371303735, 0.17985789872242042, 0.18278546151029662, 0.1701904343513766, 0.16966785997746936, 0.1728130776633119, 0.17314619356680738, 0.17089212350884186, 0.07396417838606573, 0.08224506165203127, 0.09306965808231049, 0.09484231119390751, 0.07482387094450205, 0.07815324165508697, 0.05579652745124464, 0.09351677428978222, 0.07142102848691245]}, "mutation_prompt": null}
{"id": "ab3257c2-5784-4a62-ab52-b08d0d9fc413", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOppositionMutation:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOppositionMutation", "description": "Increasing diversity by incorporating a mutation operator to explore new regions in the search space.", "configspace": "", "generation": 52, "fitness": 0.20562624204566565, "feedback": "The algorithm EnhancedDynamicAdaptiveMemoryHarmonySearchOppositionMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "4c07dbbd-f32b-4a39-8fe4-0cbb9d088cdd", "metadata": {"aucs": [0.6685260485458151, 0.52297978722055, 0.5487472016801423, 0.6488072896796686, 0.5229365606721161, 0.606067222664589, 0.46047951036309465, 0.5382776501465751, 0.7253926132350956, 0.004032294318332297, 0.440476001920886, 9.999999999998899e-05, 0.34220039675127967, 9.999999999998899e-05, 0.1228593082230709, 0.05976246794752549, 0.3318537578422188, 0.07437242560158142, 0.0923390321410017, 0.07830109383343076, 0.08113501247479638, 0.09038289718127435, 0.08021341538516857, 0.08991109437563394, 0.12944117113087106, 0.07870200910681402, 0.07863894548394679, 0.09986599140376018, 0.06306020282748015, 0.07762782653767408, 0.0774915793944354, 0.05971368211739814, 0.06395782023604357, 0.0790814460506275, 0.07536387613194695, 0.07867590519024892, 0.9347451408563626, 0.9025027033063858, 0.9010442266571634, 0.8935520703082634, 0.8932276145777991, 0.909890269884271, 0.890741223735783, 0.8772993954028537, 0.9150604118975596, 0.18935496980230226, 0.13831405630571048, 0.04910430150746359, 0.11047396106126961, 0.1824796147514135, 0.15635970562664403, 0.07573210569503941, 0.11540410853212357, 0.22427332849744375, 0.19425749264238223, 0.15295696199941156, 0.12121042297843343, 0.3157082700280397, 0.24178293776723336, 0.2707451621812482, 0.1497264782510458, 0.22688125527161773, 0.18590766478011767, 0.17573575783760076, 0.12629089184415643, 0.12783750183589693, 0.1544100855379027, 0.150740954687699, 0.16034185372682408, 0.1270351838611492, 0.13262525290162208, 0.13595028509041696, 0.12542336437733592, 0.12561034154705542, 0.07545116646719285, 0.12570277102719296, 0.13851972957089742, 0.15511315566871253, 0.12060437042372907, 0.13467110658225845, 0.12127170706029611, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017007781219905427, 9.999999999998899e-05, 9.999999999998899e-05, 0.002504975319603142, 0.0929850541644286, 0.04370166332833614, 0.038072475211912704, 0.048643964613120816, 0.05037795424318725, 9.999999999998899e-05, 0.03741124878820279, 0.08047498803820274, 0.09943107771930348, 0.13857575233407082, 0.0030684878391431525, 0.14885404053124707, 0.24057584011702604, 0.10912150278626176, 0.03285888882396559, 0.008690848441908927, 0.027936164488849502, 0.12352290658847564, 0.06466569159356772, 0.11222119752217785, 0.09758977916309597, 0.0969208940970484, 0.022027363136215006, 0.3046389479430872, 0.09794731891044561, 0.06909883583314114, 0.09676188961448484, 0.0836742459810832, 0.40051402656419055, 0.3790943771414018, 0.460282953636417, 0.44046683806153086, 0.5130322988887069, 0.41809841957650584, 0.4121489128813415, 0.38410826542211374, 0.417994877514683, 0.08838210084075249, 0.09702194663899177, 0.07214191739611542, 0.08978865534854708, 0.10965857347179331, 0.08907475368094053, 0.10210214749483182, 0.0888910762615438, 0.08299038820453408, 0.1422866610868767, 0.12376288373048705, 0.131365802882491, 0.10171175630980778, 0.15387483225883503, 0.1179817243252077, 0.13281856926758406, 0.12126205623668918, 0.12287553871773216, 0.3210582131261892, 0.2759973573575598, 0.24329262067359325, 0.3333562974973213, 0.24429119612239014, 0.319044484798113, 0.3065148400634362, 0.36067948613960943, 0.30806219635335974, 0.24428280392506563, 0.2772681664765777, 0.16373676829977957, 0.14867974798855843, 0.23106370537125498, 0.23803083363049338, 0.2409664651776927, 0.14183442963665693, 0.26429115009469994, 0.20260862097803056, 0.1727731701408054, 0.20914824979024493, 0.18312128054818144, 0.2098254277841033, 0.1868089099883149, 0.22803541880325906, 0.19896538962342825, 0.19351830535806835, 0.16505103552800682, 0.16279172922278795, 0.16998812820146925, 0.1908662010814588, 0.1608965870413278, 0.2116171120273187, 0.17895330869454662, 0.17025866783185162, 0.15666596018748746, 0.3757814087168163, 0.4869865964835579, 0.1837449059625046, 0.5150816767202726, 0.1817641110134638, 0.14129432023557442, 0.17946453441166088, 0.3600247951174017, 0.1517323212899543, 0.14077414633830232, 0.18783056266203735, 0.1668925387990452, 0.07555673875631508, 0.3590592410141573, 0.19382509516145552, 0.10238781630399085, 0.19956946933086606, 0.2156592208889042, 0.16481147049553313, 0.16272125747951538, 0.18536555045205416, 0.17968518298166114, 0.1714552607174319, 0.1742469565763597, 0.17711963799009733, 0.1745779917083894, 0.17183120764812432, 0.0796409365594889, 0.07693945655592693, 0.07684736985123986, 0.0942994096186327, 0.08632579103198346, 0.07392677224974198, 0.07989974369605624, 0.0779158211405685, 0.0834526990390081]}, "mutation_prompt": null}
{"id": "26f053ec-509a-4c5a-8d03-7825d3186910", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOppositionMutation:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOppositionMutation", "description": "Increasing diversity by incorporating a mutation operator to explore new regions in the search space.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ab3257c2-5784-4a62-ab52-b08d0d9fc413", "metadata": {"aucs": [0.6685260485458151, 0.52297978722055, 0.5487472016801423, 0.6488072896796686, 0.5229365606721161, 0.606067222664589, 0.46047951036309465, 0.5382776501465751, 0.7253926132350956, 0.004032294318332297, 0.440476001920886, 9.999999999998899e-05, 0.34220039675127967, 9.999999999998899e-05, 0.1228593082230709, 0.05976246794752549, 0.3318537578422188, 0.07437242560158142, 0.0923390321410017, 0.07830109383343076, 0.08113501247479638, 0.09038289718127435, 0.08021341538516857, 0.08991109437563394, 0.12944117113087106, 0.07870200910681402, 0.07863894548394679, 0.09986599140376018, 0.06306020282748015, 0.07762782653767408, 0.0774915793944354, 0.05971368211739814, 0.06395782023604357, 0.0790814460506275, 0.07536387613194695, 0.07867590519024892, 0.9347451408563626, 0.9025027033063858, 0.9010442266571634, 0.8935520703082634, 0.8932276145777991, 0.909890269884271, 0.890741223735783, 0.8772993954028537, 0.9150604118975596, 0.18935496980230226, 0.13831405630571048, 0.04910430150746359, 0.11047396106126961, 0.1824796147514135, 0.15635970562664403, 0.07573210569503941, 0.11540410853212357, 0.22427332849744375, 0.19425749264238223, 0.15295696199941156, 0.12121042297843343, 0.3157082700280397, 0.24178293776723336, 0.2707451621812482, 0.1497264782510458, 0.22688125527161773, 0.18590766478011767, 0.17573575783760076, 0.12629089184415643, 0.12783750183589693, 0.1544100855379027, 0.150740954687699, 0.16034185372682408, 0.1270351838611492, 0.13262525290162208, 0.13595028509041696, 0.12542336437733592, 0.12561034154705542, 0.07545116646719285, 0.12570277102719296, 0.13851972957089742, 0.15511315566871253, 0.12060437042372907, 0.13467110658225845, 0.12127170706029611, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017007781219905427, 9.999999999998899e-05, 9.999999999998899e-05, 0.002504975319603142, 0.0929850541644286, 0.04370166332833614, 0.038072475211912704, 0.048643964613120816, 0.05037795424318725, 9.999999999998899e-05, 0.03741124878820279, 0.08047498803820274, 0.09943107771930348, 0.13857575233407082, 0.0030684878391431525, 0.14885404053124707, 0.24057584011702604, 0.10912150278626176, 0.03285888882396559, 0.008690848441908927, 0.027936164488849502, 0.12352290658847564, 0.06466569159356772, 0.11222119752217785, 0.09758977916309597, 0.0969208940970484, 0.022027363136215006, 0.3046389479430872, 0.09794731891044561, 0.06909883583314114, 0.09676188961448484, 0.0836742459810832, 0.40051402656419055, 0.3790943771414018, 0.460282953636417, 0.44046683806153086, 0.5130322988887069, 0.41809841957650584, 0.4121489128813415, 0.38410826542211374, 0.417994877514683, 0.08838210084075249, 0.09702194663899177, 0.07214191739611542, 0.08978865534854708, 0.10965857347179331, 0.08907475368094053, 0.10210214749483182, 0.0888910762615438, 0.08299038820453408, 0.1422866610868767, 0.12376288373048705, 0.131365802882491, 0.10171175630980778, 0.15387483225883503, 0.1179817243252077, 0.13281856926758406, 0.12126205623668918, 0.12287553871773216, 0.3210582131261892, 0.2759973573575598, 0.24329262067359325, 0.3333562974973213, 0.24429119612239014, 0.319044484798113, 0.3065148400634362, 0.36067948613960943, 0.30806219635335974, 0.24428280392506563, 0.2772681664765777, 0.16373676829977957, 0.14867974798855843, 0.23106370537125498, 0.23803083363049338, 0.2409664651776927, 0.14183442963665693, 0.26429115009469994, 0.20260862097803056, 0.1727731701408054, 0.20914824979024493, 0.18312128054818144, 0.2098254277841033, 0.1868089099883149, 0.22803541880325906, 0.19896538962342825, 0.19351830535806835, 0.16505103552800682, 0.16279172922278795, 0.16998812820146925, 0.1908662010814588, 0.1608965870413278, 0.2116171120273187, 0.17895330869454662, 0.17025866783185162, 0.15666596018748746, 0.3757814087168163, 0.4869865964835579, 0.1837449059625046, 0.5150816767202726, 0.1817641110134638, 0.14129432023557442, 0.17946453441166088, 0.3600247951174017, 0.1517323212899543, 0.14077414633830232, 0.18783056266203735, 0.1668925387990452, 0.07555673875631508, 0.3590592410141573, 0.19382509516145552, 0.10238781630399085, 0.19956946933086606, 0.2156592208889042, 0.16481147049553313, 0.16272125747951538, 0.18536555045205416, 0.17968518298166114, 0.1714552607174319, 0.1742469565763597, 0.17711963799009733, 0.1745779917083894, 0.17183120764812432, 0.0796409365594889, 0.07693945655592693, 0.07684736985123986, 0.0942994096186327, 0.08632579103198346, 0.07392677224974198, 0.07989974369605624, 0.0779158211405685, 0.0834526990390081]}, "mutation_prompt": null}
{"id": "bc6eaee5-89e8-42b4-a14a-e2e7564ef759", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMemoryHarmonySearchOppositionMutation:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]  # Opposition-based learning\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedDynamicAdaptiveMemoryHarmonySearchOppositionMutation", "description": "Increasing diversity by incorporating a mutation operator to explore new regions in the search space.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ab3257c2-5784-4a62-ab52-b08d0d9fc413", "metadata": {"aucs": [0.6685260485458151, 0.52297978722055, 0.5487472016801423, 0.6488072896796686, 0.5229365606721161, 0.606067222664589, 0.46047951036309465, 0.5382776501465751, 0.7253926132350956, 0.004032294318332297, 0.440476001920886, 9.999999999998899e-05, 0.34220039675127967, 9.999999999998899e-05, 0.1228593082230709, 0.05976246794752549, 0.3318537578422188, 0.07437242560158142, 0.0923390321410017, 0.07830109383343076, 0.08113501247479638, 0.09038289718127435, 0.08021341538516857, 0.08991109437563394, 0.12944117113087106, 0.07870200910681402, 0.07863894548394679, 0.09986599140376018, 0.06306020282748015, 0.07762782653767408, 0.0774915793944354, 0.05971368211739814, 0.06395782023604357, 0.0790814460506275, 0.07536387613194695, 0.07867590519024892, 0.9347451408563626, 0.9025027033063858, 0.9010442266571634, 0.8935520703082634, 0.8932276145777991, 0.909890269884271, 0.890741223735783, 0.8772993954028537, 0.9150604118975596, 0.18935496980230226, 0.13831405630571048, 0.04910430150746359, 0.11047396106126961, 0.1824796147514135, 0.15635970562664403, 0.07573210569503941, 0.11540410853212357, 0.22427332849744375, 0.19425749264238223, 0.15295696199941156, 0.12121042297843343, 0.3157082700280397, 0.24178293776723336, 0.2707451621812482, 0.1497264782510458, 0.22688125527161773, 0.18590766478011767, 0.17573575783760076, 0.12629089184415643, 0.12783750183589693, 0.1544100855379027, 0.150740954687699, 0.16034185372682408, 0.1270351838611492, 0.13262525290162208, 0.13595028509041696, 0.12542336437733592, 0.12561034154705542, 0.07545116646719285, 0.12570277102719296, 0.13851972957089742, 0.15511315566871253, 0.12060437042372907, 0.13467110658225845, 0.12127170706029611, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017007781219905427, 9.999999999998899e-05, 9.999999999998899e-05, 0.002504975319603142, 0.0929850541644286, 0.04370166332833614, 0.038072475211912704, 0.048643964613120816, 0.05037795424318725, 9.999999999998899e-05, 0.03741124878820279, 0.08047498803820274, 0.09943107771930348, 0.13857575233407082, 0.0030684878391431525, 0.14885404053124707, 0.24057584011702604, 0.10912150278626176, 0.03285888882396559, 0.008690848441908927, 0.027936164488849502, 0.12352290658847564, 0.06466569159356772, 0.11222119752217785, 0.09758977916309597, 0.0969208940970484, 0.022027363136215006, 0.3046389479430872, 0.09794731891044561, 0.06909883583314114, 0.09676188961448484, 0.0836742459810832, 0.40051402656419055, 0.3790943771414018, 0.460282953636417, 0.44046683806153086, 0.5130322988887069, 0.41809841957650584, 0.4121489128813415, 0.38410826542211374, 0.417994877514683, 0.08838210084075249, 0.09702194663899177, 0.07214191739611542, 0.08978865534854708, 0.10965857347179331, 0.08907475368094053, 0.10210214749483182, 0.0888910762615438, 0.08299038820453408, 0.1422866610868767, 0.12376288373048705, 0.131365802882491, 0.10171175630980778, 0.15387483225883503, 0.1179817243252077, 0.13281856926758406, 0.12126205623668918, 0.12287553871773216, 0.3210582131261892, 0.2759973573575598, 0.24329262067359325, 0.3333562974973213, 0.24429119612239014, 0.319044484798113, 0.3065148400634362, 0.36067948613960943, 0.30806219635335974, 0.24428280392506563, 0.2772681664765777, 0.16373676829977957, 0.14867974798855843, 0.23106370537125498, 0.23803083363049338, 0.2409664651776927, 0.14183442963665693, 0.26429115009469994, 0.20260862097803056, 0.1727731701408054, 0.20914824979024493, 0.18312128054818144, 0.2098254277841033, 0.1868089099883149, 0.22803541880325906, 0.19896538962342825, 0.19351830535806835, 0.16505103552800682, 0.16279172922278795, 0.16998812820146925, 0.1908662010814588, 0.1608965870413278, 0.2116171120273187, 0.17895330869454662, 0.17025866783185162, 0.15666596018748746, 0.3757814087168163, 0.4869865964835579, 0.1837449059625046, 0.5150816767202726, 0.1817641110134638, 0.14129432023557442, 0.17946453441166088, 0.3600247951174017, 0.1517323212899543, 0.14077414633830232, 0.18783056266203735, 0.1668925387990452, 0.07555673875631508, 0.3590592410141573, 0.19382509516145552, 0.10238781630399085, 0.19956946933086606, 0.2156592208889042, 0.16481147049553313, 0.16272125747951538, 0.18536555045205416, 0.17968518298166114, 0.1714552607174319, 0.1742469565763597, 0.17711963799009733, 0.1745779917083894, 0.17183120764812432, 0.0796409365594889, 0.07693945655592693, 0.07684736985123986, 0.0942994096186327, 0.08632579103198346, 0.07392677224974198, 0.07989974369605624, 0.0779158211405685, 0.0834526990390081]}, "mutation_prompt": null}
{"id": "36d2f8bd-f076-44a0-9707-779291ab5afa", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutation:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.opposition_rate:  # Incorporating opposition-based learning\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutation", "description": "Enhancing convergence by integrating opposition-based learning with adaptive memory and mutation for improved exploration-exploitation balance.", "configspace": "", "generation": 55, "fitness": 0.20976226825114525, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "ab3257c2-5784-4a62-ab52-b08d0d9fc413", "metadata": {"aucs": [0.6492693786616592, 0.6287575849391862, 0.5408608143702657, 0.536936887902109, 0.5365961690345349, 0.46590687625052596, 0.6129501323161453, 0.5774200256020343, 0.48615345557139256, 0.1260526153168432, 0.3107694577841714, 0.31034487463226645, 0.21041737656641923, 0.16093908023076675, 0.3265572351222362, 0.33973741728426965, 0.22775105565309472, 0.243999395919838, 0.15227244982298815, 0.1601807013365364, 0.14446778020290862, 0.2231323164056398, 0.14056003760784863, 0.15197092136553525, 0.1658412002716243, 0.14475047560156307, 0.1497107405267163, 0.12663376743492194, 0.10864742277835537, 0.14252864546309651, 0.12834928600672213, 0.14238084478837498, 0.10023171677770026, 0.11251744987639034, 0.13318989566591877, 0.10604335184166647, 0.9222176406512778, 0.9271302747947275, 0.9222495682316548, 0.8775403788753405, 0.9053087093496004, 0.9240776793290346, 0.8896388597171869, 0.9198948787612896, 0.9248525695551512, 0.13468997709823638, 0.14874253641600899, 0.10890846015288369, 0.2027101920888169, 0.10847349142148355, 0.28183647348632535, 0.1449698264528172, 0.12972576856982065, 0.12599319771774897, 0.18262131283079663, 0.30862544621729426, 0.13578599701520833, 0.19543868501750428, 0.1547779499387012, 0.1910483428916977, 0.1539777607537116, 0.12670008640523134, 0.17483065233807216, 0.146603272979571, 0.13982543454609253, 0.13525782078063153, 0.1330092089560696, 0.17093995549916274, 0.19536909899020982, 0.1847597708922485, 0.14095187431543088, 0.12688125717377807, 0.15950150618122882, 0.15407697370442497, 0.12637942907987854, 0.0961989386792298, 0.20481944019741127, 0.11877615945947329, 0.13150255008626155, 0.07986494713594405, 0.14731129153389133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05824370589690331, 0.03483730803670715, 0.12410472861979183, 0.08573777026369478, 0.018586545872556592, 0.048776532306070264, 0.08119182275231374, 0.05876623514427615, 0.04909486998127088, 0.07071437375658751, 0.05379781955616292, 0.051843014408883614, 0.028396698950382215, 0.09187609126294305, 0.1016987991653776, 0.030306591383702286, 0.09960199975657102, 0.07997931725926688, 0.08332651287588233, 0.062213983896934444, 0.07789084852773098, 0.06542956335006389, 0.038088788999778966, 0.1172190345982781, 0.09520876775904286, 0.12545443774150555, 0.01666132099175499, 0.42815002069374997, 0.3639659938895822, 0.40289061270329884, 0.37277337354341866, 0.48740071478512104, 0.37259310528833833, 0.3857740043466843, 0.36091849642288476, 0.3828845146552683, 0.1051481738452631, 0.08498863308364957, 0.10206424449876228, 0.15099640426902294, 0.10133239393456694, 0.12675409078117572, 0.10079696858612064, 0.09084886565454076, 0.09431169298414666, 0.1466051640034851, 0.14628228752660943, 0.14165407369780036, 0.13459504781421183, 0.12660373220096588, 0.12419309554342295, 0.1197560222124554, 0.17654041677472654, 0.2115784888920672, 0.27013912244705707, 0.35041002507310437, 0.20747159243535673, 0.32171548060875843, 0.31676263146800987, 0.2882565011408168, 0.22548648676112393, 0.23998766549090744, 0.2931493125454948, 0.23214358557264536, 0.2739650228526922, 0.24060025096880067, 0.1627784158806126, 0.16763097173244002, 0.2297032572322023, 0.15302912478352104, 0.18925886989028062, 0.18243026637310022, 0.18903774101565474, 0.21437512108632073, 0.2024967318732337, 0.20577195650060198, 0.20945899406593715, 0.22762838767329308, 0.19429990335321445, 0.2173019988504391, 0.18228705997537797, 0.21111509166690057, 0.18035871894205835, 0.19872648456808395, 0.19854048963555482, 0.18901226709963992, 0.1903895388651563, 0.18247424102940502, 0.21835239971658704, 0.1752526073504701, 0.182408674563163, 0.18284444507589181, 0.14605147850993694, 0.4542111104143818, 0.5050468398480985, 0.14079440336348037, 0.15076765835527073, 0.11695951000815108, 0.15699717207980846, 0.28309163260166026, 0.19423641242012113, 0.20785716180931002, 0.1887783615406795, 0.16382979765488836, 0.1973282626910865, 0.10188475260481722, 0.10994645311770168, 0.2067967678094269, 0.2035464189501457, 0.17624797510200063, 0.1740955415528781, 0.17888549806810483, 0.19139317928009036, 0.17700409068416934, 0.17667093257510902, 0.17376718842196193, 0.17325592633829223, 0.09363634548276767, 0.08116830344880743, 0.07367192631083819, 0.07931307012199162, 0.08182721994428943, 0.09536905983413468, 0.07473785423787882, 0.07167230042716399, 0.07878530152741803]}, "mutation_prompt": null}
{"id": "51e2123d-2119-406f-b536-a58bee05dc27", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.opposition_rate:  # Incorporating opposition-based learning\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing convergence by integrating opposition-based learning with adaptive memory and mutation for improved exploration-exploitation balance with dynamic parameter adaptation.", "configspace": "", "generation": 56, "fitness": 0.20976226825114525, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "36d2f8bd-f076-44a0-9707-779291ab5afa", "metadata": {"aucs": [0.6492693786616592, 0.6287575849391862, 0.5408608143702657, 0.536936887902109, 0.5365961690345349, 0.46590687625052596, 0.6129501323161453, 0.5774200256020343, 0.48615345557139256, 0.1260526153168432, 0.3107694577841714, 0.31034487463226645, 0.21041737656641923, 0.16093908023076675, 0.3265572351222362, 0.33973741728426965, 0.22775105565309472, 0.243999395919838, 0.15227244982298815, 0.1601807013365364, 0.14446778020290862, 0.2231323164056398, 0.14056003760784863, 0.15197092136553525, 0.1658412002716243, 0.14475047560156307, 0.1497107405267163, 0.12663376743492194, 0.10864742277835537, 0.14252864546309651, 0.12834928600672213, 0.14238084478837498, 0.10023171677770026, 0.11251744987639034, 0.13318989566591877, 0.10604335184166647, 0.9222176406512778, 0.9271302747947275, 0.9222495682316548, 0.8775403788753405, 0.9053087093496004, 0.9240776793290346, 0.8896388597171869, 0.9198948787612896, 0.9248525695551512, 0.13468997709823638, 0.14874253641600899, 0.10890846015288369, 0.2027101920888169, 0.10847349142148355, 0.28183647348632535, 0.1449698264528172, 0.12972576856982065, 0.12599319771774897, 0.18262131283079663, 0.30862544621729426, 0.13578599701520833, 0.19543868501750428, 0.1547779499387012, 0.1910483428916977, 0.1539777607537116, 0.12670008640523134, 0.17483065233807216, 0.146603272979571, 0.13982543454609253, 0.13525782078063153, 0.1330092089560696, 0.17093995549916274, 0.19536909899020982, 0.1847597708922485, 0.14095187431543088, 0.12688125717377807, 0.15950150618122882, 0.15407697370442497, 0.12637942907987854, 0.0961989386792298, 0.20481944019741127, 0.11877615945947329, 0.13150255008626155, 0.07986494713594405, 0.14731129153389133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05824370589690331, 0.03483730803670715, 0.12410472861979183, 0.08573777026369478, 0.018586545872556592, 0.048776532306070264, 0.08119182275231374, 0.05876623514427615, 0.04909486998127088, 0.07071437375658751, 0.05379781955616292, 0.051843014408883614, 0.028396698950382215, 0.09187609126294305, 0.1016987991653776, 0.030306591383702286, 0.09960199975657102, 0.07997931725926688, 0.08332651287588233, 0.062213983896934444, 0.07789084852773098, 0.06542956335006389, 0.038088788999778966, 0.1172190345982781, 0.09520876775904286, 0.12545443774150555, 0.01666132099175499, 0.42815002069374997, 0.3639659938895822, 0.40289061270329884, 0.37277337354341866, 0.48740071478512104, 0.37259310528833833, 0.3857740043466843, 0.36091849642288476, 0.3828845146552683, 0.1051481738452631, 0.08498863308364957, 0.10206424449876228, 0.15099640426902294, 0.10133239393456694, 0.12675409078117572, 0.10079696858612064, 0.09084886565454076, 0.09431169298414666, 0.1466051640034851, 0.14628228752660943, 0.14165407369780036, 0.13459504781421183, 0.12660373220096588, 0.12419309554342295, 0.1197560222124554, 0.17654041677472654, 0.2115784888920672, 0.27013912244705707, 0.35041002507310437, 0.20747159243535673, 0.32171548060875843, 0.31676263146800987, 0.2882565011408168, 0.22548648676112393, 0.23998766549090744, 0.2931493125454948, 0.23214358557264536, 0.2739650228526922, 0.24060025096880067, 0.1627784158806126, 0.16763097173244002, 0.2297032572322023, 0.15302912478352104, 0.18925886989028062, 0.18243026637310022, 0.18903774101565474, 0.21437512108632073, 0.2024967318732337, 0.20577195650060198, 0.20945899406593715, 0.22762838767329308, 0.19429990335321445, 0.2173019988504391, 0.18228705997537797, 0.21111509166690057, 0.18035871894205835, 0.19872648456808395, 0.19854048963555482, 0.18901226709963992, 0.1903895388651563, 0.18247424102940502, 0.21835239971658704, 0.1752526073504701, 0.182408674563163, 0.18284444507589181, 0.14605147850993694, 0.4542111104143818, 0.5050468398480985, 0.14079440336348037, 0.15076765835527073, 0.11695951000815108, 0.15699717207980846, 0.28309163260166026, 0.19423641242012113, 0.20785716180931002, 0.1887783615406795, 0.16382979765488836, 0.1973282626910865, 0.10188475260481722, 0.10994645311770168, 0.2067967678094269, 0.2035464189501457, 0.17624797510200063, 0.1740955415528781, 0.17888549806810483, 0.19139317928009036, 0.17700409068416934, 0.17667093257510902, 0.17376718842196193, 0.17325592633829223, 0.09363634548276767, 0.08116830344880743, 0.07367192631083819, 0.07931307012199162, 0.08182721994428943, 0.09536905983413468, 0.07473785423787882, 0.07167230042716399, 0.07878530152741803]}, "mutation_prompt": null}
{"id": "4495ba3e-0e45-4152-b544-916a5278fb7f", "solution": "import numpy as np\n\nclass DynamicOppositionMemoryHarmonySearchMutation:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, dynamic_opposition_rate_range=(0.3, 0.7)):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.dynamic_opposition_rate_range = dynamic_opposition_rate_range\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory, opposition_rate):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < opposition_rate:  # Incorporating dynamic opposition-based learning\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        opposition_rate = np.random.uniform(*self.dynamic_opposition_rate_range)\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory, opposition_rate)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n            opposition_rate = np.clip(opposition_rate + np.random.uniform(-0.05, 0.05), *self.dynamic_opposition_rate_range)\n\n        return harmony_memory[0]", "name": "DynamicOppositionMemoryHarmonySearchMutation", "description": "Enhancing exploration by incorporating a dynamic opposition rate that adapts based on the function landscape to improve convergence speed and solution quality.", "configspace": "", "generation": 57, "fitness": 0.2073230192635482, "feedback": "The algorithm DynamicOppositionMemoryHarmonySearchMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "36d2f8bd-f076-44a0-9707-779291ab5afa", "metadata": {"aucs": [0.6674809365897492, 0.5098268181005883, 0.5606804423266796, 0.4354545255225232, 0.5080424986934897, 0.5246374047307031, 0.523062835753523, 0.4789054337643245, 0.6376531256749627, 0.10061351226972126, 0.29100149906065675, 0.13894758138286722, 0.2736248195172557, 0.24501201603189682, 0.1328585323021766, 0.1604921511031393, 0.3455784295203972, 0.030782217620042296, 0.16780511193317527, 0.1483291480971417, 0.16668079827759552, 0.14763307003499393, 0.16873269498675747, 0.14506972624886494, 0.14183003605573652, 0.1473266638649815, 0.10773179209162786, 0.11861042676312827, 0.12396459067919563, 0.18123905569305865, 0.13388296605597694, 0.13079232216750458, 0.11567653544106737, 0.08517944353055917, 0.09326246991742282, 0.11442729817157249, 0.9140970887069162, 0.9178978101013202, 0.9353695283345905, 0.8665500089276359, 0.9018776512643811, 0.913349395294055, 0.8909581940861968, 0.8925157804428916, 0.8886743819155887, 0.15623046492065673, 0.0795051549143827, 0.14286512395562256, 0.13370487494358552, 0.19284717306744592, 0.09971402284233022, 0.07401943959743817, 0.1465271555101899, 0.10563091715938644, 0.208069349341091, 0.19128651043702238, 0.16474143210888903, 0.3131829312326274, 0.27889682806305094, 0.16522090991825844, 0.16590249041856675, 0.21998510974696106, 0.18187779501853918, 0.16213686747745193, 0.13707656212971286, 0.21749566044991187, 0.17486143179709435, 0.144592442833411, 0.09519029088093522, 0.152052989145273, 0.16137391641897025, 0.14316053569997622, 0.12460084512550473, 0.09401802972417483, 0.11525992201518276, 0.12748968606181965, 0.11345865201630245, 0.12738784317884222, 0.15114054420017786, 0.11413597936302144, 0.13414709543788939, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09936653466529843, 0.03971197342161903, 0.0784451526609613, 0.03024061791195487, 0.013584674887452852, 0.044954656443638163, 0.09814828282680099, 0.0997497162119988, 0.044067914385944484, 0.0606231736751075, 0.0006433502280531744, 0.0861618311674831, 0.052232461586024015, 0.06037520136775365, 0.015223103170459718, 0.02866534821548339, 0.06651562419299517, 0.01092116986745928, 0.05560332553405389, 0.03880964686339772, 0.14003457587315604, 0.09876244762574038, 0.04208198901626259, 0.08537447344196247, 0.09376339507374964, 0.10419521088462347, 0.06238062219577656, 0.445238398641022, 0.3397774011042455, 0.367892366168837, 0.3224033282471275, 0.37149180243416036, 0.37640685652004036, 0.48100258237163884, 0.42537020625074673, 0.4384850955280636, 0.11599777188935967, 0.09851082110781828, 0.09215961114166837, 0.11205720049805712, 0.08825109087721283, 0.08937167684561464, 0.15402957050891852, 0.12293377370948422, 0.09527470690531559, 0.1460465995156306, 0.1328317021101375, 0.1458652479646675, 0.11817567180286714, 0.11702470443725799, 0.11877588504250691, 0.1034559457760239, 0.24643327194388487, 0.1137780412545939, 0.33242359552221945, 0.23811636058965358, 0.31260489848332473, 0.36301057616710897, 0.24935343794959264, 0.3642675772432764, 0.318873558229541, 0.27591541372699346, 0.32125313086951157, 0.15691210666687272, 0.23854957458160642, 0.1467412398730601, 0.20774533248140792, 0.21501349499698108, 0.2698561614837973, 0.1612441021989045, 0.15674154736804757, 0.1878729786916925, 0.18585786203811927, 0.20329658664337746, 0.2175335352773624, 0.18706875196917416, 0.18558226412981504, 0.206156793347539, 0.2074581426696388, 0.2253076423184449, 0.2196638807042074, 0.18609724602501732, 0.23407741181344188, 0.1915639011372875, 0.20187456684622784, 0.22162567628795393, 0.28144722805150924, 0.19283640553351422, 0.19054856078127103, 0.19237085122002695, 0.33490400846312607, 0.17520793489840836, 0.18431776904492048, 0.4678282287691463, 0.4588784545110375, 0.1934554453297126, 0.33886385812774866, 0.1665415720178387, 0.16386893651105405, 0.2742517834840634, 0.19843619831329262, 0.12078711594071079, 0.19947951401878072, 0.2025316408866923, 0.19131028322771615, 0.15653158399225908, 0.15036110885618315, 0.18554303016732088, 0.17131313470187692, 0.16926334032961166, 0.18365869017842773, 0.17350098130490454, 0.18617143278979031, 0.1658002916061485, 0.17695357235053266, 0.1693379201925319, 0.17620464281553871, 0.08439563930762106, 0.0820956604692219, 0.07608354426912278, 0.08105482705229283, 0.07813937839380525, 0.09724919761187589, 0.0698065986630878, 0.08531796468969532, 0.08098093353035474]}, "mutation_prompt": null}
{"id": "6930e41a-01d2-4bb6-a739-8c329556588e", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.normal(new_solution[i], 0.1)\n                if np.random.rand() < self.opposition_rate:  # Incorporating adaptive opposition-based learning\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing convergence and exploration by introducing adaptive opposition-based learning and dynamic memory consideration with increased mutation diversity.", "configspace": "", "generation": 58, "fitness": 0.1999566252235825, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "36d2f8bd-f076-44a0-9707-779291ab5afa", "metadata": {"aucs": [0.6638893791547762, 0.6108655164977481, 0.5231354936335417, 0.5067352545821542, 0.5482852511454842, 0.39805719391849204, 0.6118423282320289, 0.5820370867315349, 0.5113901373652294, 0.09791337855555726, 0.17236911174480796, 0.05861630230370851, 0.1818906830126743, 0.1686533176405981, 0.2329497092639271, 0.12400499282045785, 0.20366144008206388, 0.15691679310632956, 0.13250028537976, 0.1507679961553573, 0.13520316341576433, 0.1649356898837534, 0.14634346665792275, 0.11095835802230536, 0.09410612330941148, 0.1669681888512038, 0.12628225594140552, 0.10928936629723118, 0.08675495795701549, 0.11636953391005955, 0.09435640912552357, 0.12913270553552647, 0.09655073498298183, 0.11099501676074341, 0.09606033703134287, 0.11570529551633513, 0.8418801985034432, 0.7784135939318502, 0.7433218584174279, 0.49633497856946684, 0.7754774266970526, 0.7741641991620276, 0.4835319356497847, 0.8521560474139406, 0.6322212879525049, 0.268128544623198, 0.12685562448544174, 0.06635420477330956, 0.14848224440762658, 0.20041295602880083, 0.13553441461426918, 0.2502289973249865, 0.22672207855481497, 0.09008492192332107, 0.20206794949674467, 0.2020668398594878, 0.16688867733691082, 0.25831962639502104, 0.19713014603054524, 0.25427487033381835, 0.13888629610572312, 0.16893137559960392, 0.1738363562682258, 0.19983912726927378, 0.12796420672887765, 0.10925299615741346, 0.2723645819488034, 0.17753246473188433, 0.1363487557709694, 0.2265427458552104, 0.13573767259606906, 0.1521389358372085, 0.18300006082905462, 0.12074771500477122, 0.1304295814982066, 0.124620924433549, 0.1293853720211573, 0.13948193147636923, 0.14527108056783689, 0.11590005106307344, 0.15727417483727002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03643117304283683, 0.01236426647391986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001306065927399347, 0.036972647286864446, 0.04285177600182, 0.11415089097475561, 0.07246285181983225, 0.030368682390720103, 0.07627784441940333, 0.14238649121136482, 0.045907191865162345, 0.10955732244884131, 0.10028078612940994, 0.09390183408387653, 0.07584985352396378, 0.0992406643190219, 0.09224495005884359, 0.09326852292213494, 0.06936053496304417, 0.09655708609606539, 0.04506946283333291, 0.11322393928271324, 0.12455579180321619, 0.09798230433542854, 0.08714701679192605, 0.19315966431933962, 0.06748723273144874, 0.138049210565503, 0.08514275171656172, 0.048532907881492116, 0.38947763486295617, 0.4119208786716033, 0.39255817453973385, 0.39976388039633104, 0.3843495245079219, 0.412571518763041, 0.40336210284491003, 0.4319947570850402, 0.40899732561681, 0.10836046780528008, 0.12274144183308744, 0.05878395474968423, 0.12497379686631815, 0.1229900937769034, 0.14914162242857165, 0.13930176157800633, 0.1664746879114155, 0.10106420131282812, 0.25060892434078164, 0.20522502736176385, 0.174885165700711, 0.14205843069311852, 0.15197075245338676, 0.2153182145932776, 0.1265306719521514, 0.12104085290508015, 0.13400465298248876, 0.18741038195745252, 0.23323081003092228, 0.3449098569259217, 0.38086807136349166, 0.2800408291651807, 0.4079230800449777, 0.19966579515576544, 0.3429629102626349, 0.22014253168590847, 0.13465324556912694, 0.1291082320024166, 0.11329506901021613, 0.2659303674164881, 0.22196663518047155, 0.22461385746755935, 0.18402187146848414, 0.2355561888454334, 0.15674125572878006, 0.19515954100410837, 0.1909117134915912, 0.20011267895493656, 0.21050417478962968, 0.20801076234677107, 0.19003166334162447, 0.1983594445076936, 0.181467954152991, 0.20740235413303176, 0.18215391850018947, 0.1968997841479323, 0.176984112897836, 0.22028033460696128, 0.20301344121673714, 0.17728843016279594, 0.24195621614286789, 0.18845795700557577, 0.17186033970457504, 0.15305762951407798, 0.1472923026162034, 0.18151454976549808, 0.5460305935655424, 0.19428932985258762, 0.19489487493567226, 0.15948156866643914, 0.1529631237640684, 0.1604329246551386, 0.34071456000015066, 0.19834419273560921, 0.07153588465825911, 0.12847460764559893, 0.16084876474392618, 0.16187055694541452, 0.25907503404087906, 0.10661726903336743, 0.0938439099956826, 0.15583431047173457, 0.1695658009552653, 0.18184038588656393, 0.19126437537588659, 0.18865222762151324, 0.1624773941033001, 0.1773370643177754, 0.180100932846748, 0.18228902476120645, 0.0775502667929644, 0.06693282932102307, 0.084831012335434, 0.05328095857255155, 0.08235985242223398, 0.0927631995495456, 0.09916660027113866, 0.07688377963242599, 0.08612802516876528]}, "mutation_prompt": null}
{"id": "38e2514c-97ce-4085-adc1-d7c1b6da7771", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutation:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.opposition_rate:  # Incorporating opposition-based learning\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutation", "description": "Enhancing convergence by integrating opposition-based learning with adaptive memory and mutation for improved exploration-exploitation balance.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "36d2f8bd-f076-44a0-9707-779291ab5afa", "metadata": {"aucs": [0.6492693786616592, 0.6287575849391862, 0.5408608143702657, 0.536936887902109, 0.5365961690345349, 0.46590687625052596, 0.6129501323161453, 0.5774200256020343, 0.48615345557139256, 0.1260526153168432, 0.3107694577841714, 0.31034487463226645, 0.21041737656641923, 0.16093908023076675, 0.3265572351222362, 0.33973741728426965, 0.22775105565309472, 0.243999395919838, 0.15227244982298815, 0.1601807013365364, 0.14446778020290862, 0.2231323164056398, 0.14056003760784863, 0.15197092136553525, 0.1658412002716243, 0.14475047560156307, 0.1497107405267163, 0.12663376743492194, 0.10864742277835537, 0.14252864546309651, 0.12834928600672213, 0.14238084478837498, 0.10023171677770026, 0.11251744987639034, 0.13318989566591877, 0.10604335184166647, 0.9222176406512778, 0.9271302747947275, 0.9222495682316548, 0.8775403788753405, 0.9053087093496004, 0.9240776793290346, 0.8896388597171869, 0.9198948787612896, 0.9248525695551512, 0.13468997709823638, 0.14874253641600899, 0.10890846015288369, 0.2027101920888169, 0.10847349142148355, 0.28183647348632535, 0.1449698264528172, 0.12972576856982065, 0.12599319771774897, 0.18262131283079663, 0.30862544621729426, 0.13578599701520833, 0.19543868501750428, 0.1547779499387012, 0.1910483428916977, 0.1539777607537116, 0.12670008640523134, 0.17483065233807216, 0.146603272979571, 0.13982543454609253, 0.13525782078063153, 0.1330092089560696, 0.17093995549916274, 0.19536909899020982, 0.1847597708922485, 0.14095187431543088, 0.12688125717377807, 0.15950150618122882, 0.15407697370442497, 0.12637942907987854, 0.0961989386792298, 0.20481944019741127, 0.11877615945947329, 0.13150255008626155, 0.07986494713594405, 0.14731129153389133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05824370589690331, 0.03483730803670715, 0.12410472861979183, 0.08573777026369478, 0.018586545872556592, 0.048776532306070264, 0.08119182275231374, 0.05876623514427615, 0.04909486998127088, 0.07071437375658751, 0.05379781955616292, 0.051843014408883614, 0.028396698950382215, 0.09187609126294305, 0.1016987991653776, 0.030306591383702286, 0.09960199975657102, 0.07997931725926688, 0.08332651287588233, 0.062213983896934444, 0.07789084852773098, 0.06542956335006389, 0.038088788999778966, 0.1172190345982781, 0.09520876775904286, 0.12545443774150555, 0.01666132099175499, 0.42815002069374997, 0.3639659938895822, 0.40289061270329884, 0.37277337354341866, 0.48740071478512104, 0.37259310528833833, 0.3857740043466843, 0.36091849642288476, 0.3828845146552683, 0.1051481738452631, 0.08498863308364957, 0.10206424449876228, 0.15099640426902294, 0.10133239393456694, 0.12675409078117572, 0.10079696858612064, 0.09084886565454076, 0.09431169298414666, 0.1466051640034851, 0.14628228752660943, 0.14165407369780036, 0.13459504781421183, 0.12660373220096588, 0.12419309554342295, 0.1197560222124554, 0.17654041677472654, 0.2115784888920672, 0.27013912244705707, 0.35041002507310437, 0.20747159243535673, 0.32171548060875843, 0.31676263146800987, 0.2882565011408168, 0.22548648676112393, 0.23998766549090744, 0.2931493125454948, 0.23214358557264536, 0.2739650228526922, 0.24060025096880067, 0.1627784158806126, 0.16763097173244002, 0.2297032572322023, 0.15302912478352104, 0.18925886989028062, 0.18243026637310022, 0.18903774101565474, 0.21437512108632073, 0.2024967318732337, 0.20577195650060198, 0.20945899406593715, 0.22762838767329308, 0.19429990335321445, 0.2173019988504391, 0.18228705997537797, 0.21111509166690057, 0.18035871894205835, 0.19872648456808395, 0.19854048963555482, 0.18901226709963992, 0.1903895388651563, 0.18247424102940502, 0.21835239971658704, 0.1752526073504701, 0.182408674563163, 0.18284444507589181, 0.14605147850993694, 0.4542111104143818, 0.5050468398480985, 0.14079440336348037, 0.15076765835527073, 0.11695951000815108, 0.15699717207980846, 0.28309163260166026, 0.19423641242012113, 0.20785716180931002, 0.1887783615406795, 0.16382979765488836, 0.1973282626910865, 0.10188475260481722, 0.10994645311770168, 0.2067967678094269, 0.2035464189501457, 0.17624797510200063, 0.1740955415528781, 0.17888549806810483, 0.19139317928009036, 0.17700409068416934, 0.17667093257510902, 0.17376718842196193, 0.17325592633829223, 0.09363634548276767, 0.08116830344880743, 0.07367192631083819, 0.07931307012199162, 0.08182721994428943, 0.09536905983413468, 0.07473785423787882, 0.07167230042716399, 0.07878530152741803]}, "mutation_prompt": null}
{"id": "d4d15e23-207d-47ed-9401-25bd1195082b", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 60, "fitness": 0.21400383671403575, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "36d2f8bd-f076-44a0-9707-779291ab5afa", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "c846c2fd-6c80-4a86-9bb5-7c81716c7404", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "681f6819-b3a8-47da-8bed-10f608ab9b3e", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "c003db99-d532-46c0-9049-0148e0087406", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved", "description": "Enhancing harmony memory updating strategy by incorporating a dynamic memory consideration probability during the improvisation process to promote the exploitation of high-quality solutions.", "configspace": "", "generation": 63, "fitness": 0.21400383671403575, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "eeb132fb-3a9c-4030-b9eb-17a7770495c9", "solution": "import numpy as np\n\nclass AdaptiveDynamicMutationEnhancedOppositionMemoryHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    landscape_slope = np.gradient(func(harmony_memory))[i]\n                    mutation_step = 0.5 / np.abs(landscape_slope) if landscape_slope != 0 else 0.1\n                    mutation_dir = 1 if landscape_slope > 0 else -1\n                    new_solution[i] += mutation_dir * mutation_step\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "AdaptiveDynamicMutationEnhancedOppositionMemoryHarmonySearch", "description": "Introducing a novel adaptive dynamic mutation strategy based on function landscape analysis.", "configspace": "", "generation": 64, "fitness": 0.1674974862026467, "feedback": "The algorithm AdaptiveDynamicMutationEnhancedOppositionMemoryHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.15.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.4237853796609721, 0.4274139818325797, 0.4028581034023416, 0.35393390001412706, 0.43108266416292085, 0.30469989275390696, 0.37013326949837133, 0.3854013223285495, 0.35744923319408006, 0.16449778764712553, 0.04610056220480041, 0.008874685169152352, 0.19050904278871228, 0.049337676290390875, 0.07664728793523479, 0.15307163457682693, 0.017704863845479313, 0.005777429020630054, 0.09441879150202603, 0.13889137069658897, 0.12628558594739825, 0.10034564190269935, 0.0968278979240742, 0.12212645149988932, 0.18111295380957115, 0.12523211129517875, 0.10053701856446373, 0.09918410862241689, 0.054530851025670346, 0.09209661162965055, 0.09397770254895876, 0.0721810722923314, 0.07923471847231345, 0.09356417073595147, 0.10606329630053368, 0.055350460270148005, 0.7580791676816088, 0.7903819195992448, 0.7467751721920184, 0.6315350913296812, 0.7648000693446453, 0.8437584653171157, 0.7293891858336758, 0.749176584608205, 0.6949602686669072, 0.19401559186977724, 0.033458951329241926, 0.09877707781528733, 0.09607895206591532, 0.13751704116670227, 0.1111892638245583, 0.18389730369209878, 0.12912902600398357, 0.06632939133095261, 0.21499393878582196, 0.20864780255054272, 0.13219617085443047, 0.18301668092653434, 0.2122593691802107, 0.19690075460726253, 0.1119556172535231, 0.17297223883545798, 0.1595843841691711, 0.14351174819867607, 0.1040510392536036, 0.08238435757413232, 0.15809545607388686, 0.05714269974878394, 0.05547214315725635, 0.1345937200164935, 0.10512275778024183, 0.11655336782545744, 0.12682347079224632, 0.13089904098869065, 0.11718424143732409, 0.10611437263662316, 0.12777057360801758, 0.12530709317821198, 0.1211945358868004, 0.14138055968788354, 0.13368397700602308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08673996571303833, 0.04463242193494443, 0.06966413724323228, 0.052841456895961536, 0.03369566088256437, 0.004080875926563254, 0.04530986406598114, 0.04117999825247387, 0.06324715670576375, 0.056813091636139346, 0.03174312126406986, 0.03959996638641716, 0.05209159860250945, 0.09266287266955675, 0.0563563269446169, 0.007239548407112828, 0.05446978946847825, 0.06004619650114418, 0.01574711361907144, 0.0391442149175244, 0.0379016639863583, 0.11643510279509484, 0.08703390184592952, 0.09058998452046452, 0.05434296743233791, 0.057088021913975884, 0.04081950702174986, 0.3936511435771364, 0.35489334003904327, 0.2662200212091749, 0.33003010568699687, 0.2729204266993164, 0.3240663741027534, 0.39107451736141097, 0.3803362865589758, 0.28881447609619393, 0.0842338894934519, 0.09138182249328142, 0.05581121469059813, 0.07757960936359287, 0.06635729939009039, 0.06262797878422788, 0.06993631649667753, 0.08696884524229243, 0.07032520935601827, 0.1233081201153009, 0.12312896218846747, 0.1967546379123969, 0.10521590215718102, 0.10766613084908239, 0.1719155994752094, 0.14068044968971338, 0.11937079508476423, 0.09931883956979215, 0.21781907093130926, 0.260666630097258, 0.1844722532869646, 0.27269105124441007, 0.20994449568900841, 0.24044452074344147, 0.18997673196670573, 0.25414326509323204, 0.13826468465174746, 0.1973152910704059, 0.247208590704166, 0.2005695350152752, 0.22831052946995112, 0.1713560376000005, 0.21278757167523876, 0.17794368521984305, 0.14210683644504585, 0.08572287359173392, 0.16524881682887227, 0.19814403976306316, 0.19737001890360073, 0.17040618515936146, 0.1821314860794282, 0.17745592662021048, 0.18819813722934697, 0.19287708016286353, 0.187115011021604, 0.17121199255106456, 0.17718059274008668, 0.1800921960133508, 0.17111173445711303, 0.16855981981753265, 0.17630082949635761, 0.1690890101086897, 0.17635305576736793, 0.17438426881209057, 0.15964642390139216, 0.32788651648823286, 0.17344737043622904, 0.35142147953105995, 0.3119062634561489, 0.18818237433602458, 0.5311782792363169, 0.15006270230090946, 0.14837388604002477, 0.08088986565995526, 0.1443515602770511, 0.06862510586330606, 0.17035008649008743, 0.14716305224089177, 0.14430459097519266, 0.09178508085946746, 0.10046751855322889, 0.20563760936053965, 0.1616997872029433, 0.16312534672106227, 0.15891678629798756, 0.16371095099502364, 0.15997436621309025, 0.1609137764619467, 0.15709660884303445, 0.1644833432263767, 0.17098926068354414, 0.06648205241988292, 0.07843294657807143, 0.06256773606583188, 0.06833032845111697, 0.08695236551574159, 0.08972171741444379, 0.06645899533149768, 0.05694313401942441, 0.06469888700965876]}, "mutation_prompt": null}
{"id": "14dfbe34-d412-467b-a532-b4ea8f6e8e19", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, de_weight=0.8):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.de_weight = de_weight\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n\n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.de_weight:  # Incorporating differential evolution strategy\n                    new_solution[i] = new_solution[i] + self.de_weight * (harmony_memory[0, i] - harmony_memory[1, i])\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved", "description": "Enhancing the harmony memory update mechanism by incorporating a differential evolution strategy to exploit historical information efficiently.", "configspace": "", "generation": 65, "fitness": 0.2077004419952329, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.6882739822534281, 0.5588344345829873, 0.633679088621296, 0.5091566975613849, 0.5292533496600064, 0.6505261226782504, 0.5215532936530913, 0.5864237916817232, 0.5335261115806549, 0.1695348767284669, 0.36294891547674346, 0.22681055092392188, 0.23588851221849294, 0.2806746104316017, 0.25893210134409783, 0.25502843885596815, 0.35587366426128353, 0.26574148213938287, 0.16116004641217418, 0.12293296651435592, 0.09201741900887828, 0.15985200342756722, 0.08108185980029792, 0.08725677366242834, 0.11607276128919897, 0.07705619327611002, 0.1016937701266496, 0.09130366487507557, 0.097501103610664, 0.08476045470947502, 0.1093678363926891, 0.12509438000432127, 0.12261231499507519, 0.08004917261353528, 0.0788970570512938, 0.10139581110605922, 0.9714988554211818, 0.9371357969223861, 0.9292007873923809, 0.9192058563734711, 0.9160526713745272, 0.9482089551921846, 0.9341418118494823, 0.908925046551467, 0.9130782638270729, 0.1666143963177883, 0.2065134714182455, 0.17521114522288483, 0.2399208793601828, 0.15989624431034444, 0.3077110703989765, 0.17640734689971727, 0.1572700977782059, 0.24406977214310677, 0.21351584589102546, 0.2113795853937216, 0.10203900168588376, 0.24426968558858098, 0.1997779221019088, 0.1970475834714599, 0.20555612708709992, 0.14571120249763114, 0.13619947735985938, 0.16052445693057749, 0.13648266067537096, 0.062093889908056865, 0.18415436474083735, 0.18708608660433346, 0.21437917344241075, 0.16479696419130574, 0.09137682734571917, 0.16027959508096734, 0.12333277118714525, 9.999999999998899e-05, 0.11902285548351743, 0.11648288231113457, 0.12300391537607813, 0.1516052649047137, 0.12391174678294792, 0.19111114540823448, 0.1321431323581943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026233206577711554, 9.999999999998899e-05, 9.999999999998899e-05, 0.02520356776449373, 9.999999999998899e-05, 9.999999999998899e-05, 0.027703850027440913, 0.007967183084944929, 0.0035916565108443654, 0.05725986807214034, 0.0018202635666552114, 0.06935208114921865, 9.999999999998899e-05, 0.10877233684801135, 9.999999999998899e-05, 0.09392929468563616, 9.999999999998899e-05, 0.027582348104375876, 0.041625826017445466, 0.10038714693195983, 0.0753361066031426, 0.07354692857642708, 0.03286734846303263, 0.0007591291416571, 0.11048476721033618, 0.08842279994286395, 0.04866732085647252, 0.4447465841135997, 0.3468624861761498, 0.4187785908950632, 0.4111966402093481, 0.43747536399369236, 0.4071302310603231, 0.355301702923427, 0.47046929448328145, 0.4362174458701519, 0.09540175371932913, 0.07064451694818363, 0.06918332250790116, 0.07925737242672837, 0.07265590869934746, 0.08010757085955811, 0.09096374435253418, 0.08582664561790787, 0.062237519543629105, 0.10500327683487853, 0.1064902558451356, 0.12153426582359939, 0.15917939516493385, 0.12161181603731586, 0.12251441973185606, 0.12186127761310017, 0.12526379918335517, 0.10753429431056827, 0.363232195212815, 0.3392034916645328, 0.20602466599706426, 0.30466321666134777, 0.2123908590979704, 0.3527721139611668, 0.29710521544110646, 0.2984040401350575, 0.22759558520789214, 0.2579797844245726, 0.20475385801096158, 0.18379548842784488, 0.1903885428987654, 0.15879700734345092, 0.2458865738294419, 0.26156981835558646, 0.1733880303392491, 0.17765895248860775, 0.18293044659083413, 0.16664416434910234, 0.1607277522780951, 0.16957460107456424, 0.20718900047565392, 0.18670397526087124, 0.21717657185358308, 0.18295102841554367, 0.19864618074745877, 0.19778056244646014, 0.1792403606186177, 0.17479676598383143, 0.20497501723484346, 0.2236630075675501, 0.1858666022965474, 0.1929261856941622, 0.18303712758182933, 0.19617749596023992, 0.1563714981079143, 0.29350158146333005, 0.14109311210663456, 0.4565210628525813, 0.18887792582589713, 0.5959460240476155, 0.12603732519029964, 0.19365921343752357, 0.14161802406481216, 0.26474913329066674, 0.2603561515629539, 0.19597639521329624, 0.19893226757467197, 0.1511083411705706, 0.19063189350573861, 0.4345168543876903, 0.13950138402864287, 0.3412242568316807, 0.16842905361366534, 0.17013549274579742, 0.15444063521636053, 0.1759247347138958, 0.17560299873051644, 0.17548208262929688, 0.1617898716524232, 0.17548338205327185, 0.18324000941977936, 0.07445446000139377, 0.06088763563630761, 0.07517258240087688, 0.06340234976690351, 0.08506992747531128, 0.06054276705637496, 0.08382366764103555, 0.07195932743834532, 0.06405087693828859]}, "mutation_prompt": null}
{"id": "98189d6c-1619-427e-937c-be50de26f7a9", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "dfd34cfb-5b89-4d72-b2c5-86927fd1bcdd", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "9cef5eff-5700-4f87-b69d-e11f63e223b8", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "a9e90a10-e02c-428c-9f4b-ea292dc99c26", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < np.clip(self.mutation_rate + np.random.uniform(-0.05, 0.05), 0.05, 0.5):  # Dynamic mutation rate\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.clip(self.opposition_rate + np.random.uniform(-0.1, 0.1), 0.3, 0.7):  # Dynamic opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved", "description": "Improving solution by incorporating dynamic mutation rate and opposition rate, and varying memory consideration probability.", "configspace": "", "generation": 69, "fitness": 0.2071370809230609, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5863600780321852, 0.5712811630870578, 0.5617322879528335, 0.6116364960641185, 0.5350565664739436, 0.4632830322370013, 0.5462574053131413, 0.5264566339407637, 0.4951889062763821, 0.17256006237288124, 0.14112729470250218, 0.21903749953845242, 0.09747483048046857, 0.17970282497689227, 0.1695266002821354, 0.18887772271136505, 0.13713929384442147, 0.12812825046813836, 0.16142381167435338, 0.14192357178113557, 0.15617794682950914, 0.27056052035167566, 0.14713976512616178, 0.14195528975335114, 0.1403271259758232, 0.13873389751249054, 0.14879759477848709, 0.13137134190999245, 0.13547439093406188, 0.13203710659469248, 0.14479248816498547, 0.12784684353050724, 0.11799364729839323, 0.13438829450384782, 0.1317182835094305, 0.12418666982370974, 0.9385316908466038, 0.8946175949019163, 0.9125273643200891, 0.8719975092434734, 0.9173937230038226, 0.9181229873744923, 0.8552724173672918, 0.8828150356307284, 0.8921447547991608, 0.1668279821024944, 0.1258537847233221, 0.09881872191751095, 0.1338921117685462, 0.18764769128725323, 0.12404476492643479, 0.14419045721628887, 0.13112313972603884, 0.15791649600016078, 0.17827295862923054, 0.11260321264750106, 0.09567599075378841, 0.30800496878699446, 0.23986981052154, 0.19223276419321966, 0.1955142315602918, 0.13420438044563965, 0.27203309772676765, 0.14246348824772903, 0.1418685697839941, 0.12377484173850628, 0.12913223162812792, 0.13079716428159882, 0.1512538935499853, 0.1825148401690303, 0.11969781766932752, 0.16695453253768522, 0.13965114771688025, 0.12250367301497933, 0.12096630547299303, 0.12575416652407367, 0.1207053996973998, 0.23992031151433235, 0.12475364808018019, 0.08348582211520239, 0.1224293192106728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01125368010974559, 9.999999999998899e-05, 0.027255395769772983, 0.10920597738003412, 0.00865354878852409, 0.09923914601184847, 0.025780567204544913, 0.012025874307867501, 0.015041157149555007, 0.08347203858061403, 0.05387226663117706, 0.10934931647529977, 0.032693008567519555, 0.0928972971691433, 0.04016654476278436, 0.0761458725279377, 0.08876310952270339, 0.01837966324869067, 0.012741781501743543, 0.11782599258047044, 0.03977960065471675, 0.13352298263294782, 0.22369970541425865, 0.04593261642895197, 0.13667079161699935, 0.15638002784091642, 0.041167693231319746, 0.13797865775829, 0.10686691383654556, 0.05795102147655984, 0.33734817845596965, 0.4687077626306584, 0.35399160466576163, 0.40428364708922193, 0.45209533746752684, 0.29660843428045114, 0.3742017484023351, 0.4293949119117587, 0.3298184752907325, 0.1206391316374611, 0.13083144649771294, 0.08539099533362116, 0.10603501102576596, 0.09677810768043016, 0.13176008956088603, 0.09874146302380526, 0.12740360640708204, 0.16498046218132456, 0.14244244091135638, 0.19523573539996775, 0.2157430391282643, 0.1171870694380921, 0.16164401324654776, 0.2016728176310053, 0.1457393538951326, 0.2264318302028575, 0.15693327293493586, 0.2659244407547334, 0.24646510969415591, 0.2944404462950887, 0.25324459763700213, 0.2547559538594991, 0.2368747446098759, 0.24760117862850817, 0.22095816035966243, 0.21702603748977933, 0.15102709770036105, 0.2733454460056901, 0.20097151887075748, 0.279862750951281, 0.18638599007172052, 0.19620776826078712, 0.15054064436918613, 0.18302097618286062, 0.18752919918928956, 0.21619072736893563, 0.19208953892902136, 0.2056212332672468, 0.1977914265626085, 0.1810638528033034, 0.2136630806069194, 0.1905083578304938, 0.17819769926272933, 0.22180442698343705, 0.1778286145159913, 0.19224617327414062, 0.20621550937021815, 0.21164632465080468, 0.19341601745451176, 0.1860750789793083, 0.20042057875652552, 0.19632338615703104, 0.24137437447460475, 0.17866699491930016, 0.364169465229387, 0.178470670298573, 0.16641741196200177, 0.5443764709555501, 0.15841012408157162, 0.1613981629728074, 0.45631715445651266, 0.15998195061458487, 0.3315674402060622, 0.1960694207327418, 0.1199711793300805, 0.18957602863376688, 0.1973593540552474, 0.18770536257120962, 0.2044574807188082, 0.14506296118962037, 0.1740918044212182, 0.16924555289913312, 0.1753500172963086, 0.17052038506822498, 0.18259034707561894, 0.16406484687759915, 0.183239806709118, 0.16672125816562988, 0.20105249052077878, 0.16162514984725473, 0.0684007446806858, 0.0796736533829262, 0.0746695399248829, 0.08376146414050467, 0.08597324837439613, 0.08734137167765932, 0.07007287364529624, 0.07565336125848843, 0.06302087861679662]}, "mutation_prompt": null}
{"id": "a716a340-33e5-4b28-99ba-6b71a7866058", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "75333ba4-b8c6-42f3-952a-72704f385183", "solution": "import numpy as np\n\nclass MultiPopulationHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, num_populations=5, population_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_populations = num_populations\n        self.population_size = population_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.population_memories = [np.random.uniform(-5.0, 5.0, (self.population_size, self.dim)) for _ in range(self.num_populations)]\n\n    def __call__(self, func):\n        def update_population_memory(population_memory, new_solution):\n            population_memory = np.vstack((population_memory, new_solution))\n            population_memory = population_memory[np.argsort(func(population_memory))]\n            return population_memory[:self.population_size]\n\n        def improvise(population_memory, pop_id):\n            new_solution = np.copy(population_memory[np.random.randint(self.population_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):\n                    new_solution[i] = population_memory[np.random.randint(self.population_size), i]\n                if np.random.rand() < self.mutation_rate:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):\n                    new_solution[i] = 2 * np.mean(population_memory[:, i]) - new_solution[i]\n            return new_solution\n\n        for _ in range(self.budget):\n            for idx, population_memory in enumerate(self.population_memories):\n                self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n                self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)\n                new_solution = improvise(population_memory, idx)\n                if func(new_solution) < func(population_memory[-1]):\n                    self.population_memories[idx] = update_population_memory(population_memory, new_solution)\n\n        best_solution = np.inf\n        for population_memory in self.population_memories:\n            if func(population_memory[0]) < best_solution:\n                best_solution = population_memory[0]\n\n        return best_solution", "name": "MultiPopulationHarmonySearchMutationRefined", "description": "Expanding the search space by implementing a multi-population approach with migration for enhanced exploration.", "configspace": "", "generation": 71, "fitness": 0.14331859313147713, "feedback": "The algorithm MultiPopulationHarmonySearchMutationRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.13.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.291863030182692, 0.2890168821785256, 0.3470784552392051, 0.2450366376106694, 0.26664657446603723, 0.24908621581589485, 0.2733180668017622, 0.2992366198231301, 0.29322023767142613, 0.035483052661488323, 0.006948900787039358, 0.008663048729365963, 0.02952897723978387, 0.048530069333084014, 0.018028271623676262, 0.021303948694640695, 0.006105044682758631, 0.029786362701318625, 0.08977381024008757, 0.09352644562658186, 0.08873584688445701, 0.10261571464164221, 0.10277961350069764, 0.07599936911231364, 0.07334252739583513, 0.07906076837592158, 0.07379782193185369, 0.06089978749555336, 0.06990474437293503, 0.08424841107092707, 0.08297467789208912, 0.06426427566245618, 0.05980405475345196, 0.08335085507011775, 0.06247802361811827, 0.06195070891257359, 0.6228576944461369, 0.5446185399137726, 0.6573758488569862, 0.7787684284415681, 0.6626799108660804, 0.5013184889635172, 0.748848945304815, 0.5735756805357535, 0.5653112942613225, 0.09090012222755395, 0.04272792419495708, 0.060421033614310504, 0.08400652366428385, 0.0796122154245662, 0.0770197431830868, 0.09506068479802832, 0.08842450458582407, 0.074212223387491, 0.1565968116246531, 0.19472882495085309, 0.14639691879274708, 0.19165640915513782, 0.21005882864170755, 0.2073006318607169, 0.12193430468183108, 0.19177151938646508, 0.16216335453177544, 0.07516216022030053, 0.054924601466413536, 0.09054125884576913, 0.07286363484351044, 0.09025972290507456, 0.08075142869587959, 0.05160538270801884, 0.08052620194988136, 0.0863333637040603, 0.07552402291536131, 0.06523277504175329, 0.08136792169081764, 0.08437875175028986, 0.08115571818199496, 0.0845229267190829, 0.07506654806897406, 0.09761040933898602, 0.09394407866397214, 0.0003468700239769307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003228784049336908, 0.09508910263985693, 0.07009699996992347, 0.08035782561885008, 0.018719665492436643, 0.024181601320851565, 0.02075087118552532, 0.039579868054120615, 0.04567604779121481, 0.08169179457949471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0524751911808764, 0.02763955505296456, 0.027953740298694907, 0.03057007485622487, 0.04496644153994034, 0.055333407359483666, 0.023512270515706035, 0.03635095825233836, 0.043327602273404264, 0.3027337224730583, 0.29123904075936047, 0.3140921491762553, 0.3154841004997404, 0.2628132264148879, 0.2591408095807206, 0.3168357008230408, 0.2292758742346347, 0.2798976645414668, 0.06756347361562332, 0.07799150918013475, 0.06072032853183862, 0.07062111991372166, 0.07292091472317264, 0.07476843262562727, 0.07904870803326391, 0.06829764787023085, 0.06660025873573372, 0.11137043079033937, 0.16653180978631354, 0.13862445420776326, 0.12440235506616537, 0.13668248105773928, 0.12675737710314627, 0.13049014767595124, 0.12482765951707786, 0.13308984459460593, 0.21855332253923143, 0.219109673731527, 0.21617216797524097, 0.21777195347305833, 0.20457629047953163, 0.21612034301052785, 0.18597996961465446, 0.229639770636619, 0.22890931807315318, 0.14855384306302732, 0.1655266139974565, 0.20407185782234216, 0.1527760898424949, 0.16775424384769888, 0.17032618892757267, 0.16160090213028455, 0.17260291042201792, 0.14209337549977574, 0.19396418898132772, 0.17682743734371886, 0.1756836294622275, 0.18841950641615002, 0.1710620375116112, 0.18519475536463093, 0.18296504682010595, 0.18002141789322745, 0.17873430887479314, 0.16621699605560203, 0.14870430071948282, 0.17306840747078855, 0.14539201964610782, 0.1676311849030302, 0.1571154333279846, 0.15497045121433273, 0.15652247316281898, 0.15773629280298518, 0.20234745620903483, 0.1656650302245828, 0.15836619707376598, 0.2611069692914868, 0.18464030193475123, 0.32303392821726884, 0.20906696731484298, 0.19351442207425973, 0.25979843474180764, 0.21905598184600428, 0.19030316457957586, 0.18678542572175572, 0.16166268828807295, 0.19600635105810693, 0.14736680193009288, 0.1442325719369082, 0.10514799709004452, 0.2084988561457749, 0.16630394124585168, 0.17298218405275, 0.1747396665951757, 0.17345636017280341, 0.168698093556662, 0.1718490892437602, 0.1811531540392497, 0.17891110228392715, 0.1699824833689827, 0.08884834782814544, 0.07048072394701632, 0.07056635914367415, 0.07404011672182875, 0.06792767829699331, 0.06593901550677006, 0.07159224521895868, 0.07363446284145214, 0.06996673920674712]}, "mutation_prompt": null}
{"id": "30d5b8d0-bca6-4c7d-a72a-991193f29d4a", "solution": "import numpy as np\n\nclass DynamicBandwidthPitchHarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory, eval_count):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            if eval_count % 10 == 0:\n                self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n                self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            return new_solution\n        \n        eval_count = 0\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            new_solution = improvise(harmony_memory, eval_count)\n            eval_count += 1\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicBandwidthPitchHarmonySearch", "description": "Introducing dynamic bandwidth and pitch adjustment rates based on function evaluations to adaptively balance exploration and exploitation.", "configspace": "", "generation": 72, "fitness": 0.20903193783675025, "feedback": "The algorithm DynamicBandwidthPitchHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5204024745983422, 0.551560081046819, 0.537995894828831, 0.5538559401422463, 0.4964181853365932, 0.5075871105648007, 0.5227038659330889, 0.5550390474955793, 0.5695212452329841, 0.28424209417555735, 0.2512556480131898, 0.270653636538124, 0.11900477485978522, 0.1760526233053724, 0.09542719746880235, 0.29654265525306533, 0.15215028265268538, 0.2388100146923925, 0.15319921102121947, 0.16433830378378111, 0.14381395492738425, 0.19260827551854143, 0.18030727797635593, 0.23894729213417432, 0.18407690209646355, 0.15348818906570816, 0.2071031328052475, 0.23042883087519106, 0.15722414912611438, 0.1067220230470608, 0.19388032376145836, 0.09966522976437286, 0.1139146358082549, 0.11215591219818377, 0.1217212067716491, 0.12323732924416275, 0.9512598276834326, 0.9089291630305338, 0.8973229820178844, 0.8749073110257541, 0.8923354170114527, 0.8852972247756561, 0.8773050509023939, 0.8489434546295489, 0.8831577273003115, 0.2406223815585502, 0.133840501113774, 0.1226803777218316, 0.17155532086661518, 0.16273805210320735, 0.133359056895894, 0.26959652756534414, 0.08827218140009208, 0.1638701376122137, 0.21909159565381287, 0.1107575496607145, 0.14588295096142012, 0.13488822568223846, 0.1256189232445517, 0.13160554282297376, 0.16911943576989374, 0.217883143047796, 0.14358593120903151, 0.15154184731146303, 0.12437167134553617, 0.1345950995013434, 0.13340294798700814, 0.10668679215844568, 0.12866901134217767, 0.15483051801958858, 0.13716459156052174, 0.07241627567667053, 0.11444800195917437, 0.09077531800964334, 0.1262237541369564, 0.11089346996516525, 0.1283196967145832, 0.13774547232805612, 0.16048586459128, 9.999999999998899e-05, 0.09865967415853971, 0.013785947216233607, 9.999999999998899e-05, 0.116730745640522, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01727292494724675, 9.999999999998899e-05, 9.999999999998899e-05, 0.0796378471679372, 0.03918323988631123, 0.08278717905478117, 0.08420083294459546, 0.08948177823634196, 0.043203813252166934, 0.06950634068147188, 0.07922978809525794, 0.0595129542689119, 0.04579401577452824, 0.05480199542334052, 0.15632703274867876, 0.07678406919191216, 0.025361579385542843, 0.1482304000762379, 0.0074990778643022615, 0.047044061062496256, 0.0072684962088201965, 0.1122476658048015, 0.06919025248162469, 0.08477030012733577, 0.07284898298411457, 0.08409925475707425, 0.12718735625084832, 0.07044794479774263, 0.11801895637487037, 0.026085170034718774, 0.4038835667006889, 0.3797431711629813, 0.3918754393115085, 0.38005914373330474, 0.34799013564311865, 0.3134702923703202, 0.45403997908691585, 0.436058968850056, 0.3336724401245499, 0.06766166205640056, 0.08394814408410889, 0.14976245448085823, 0.09250605018820479, 0.10246685621726737, 0.13700962247930015, 0.1265829310249652, 0.14508460467796536, 0.13494807926376362, 0.1355483425123375, 0.14473288380067229, 0.16672074722986185, 0.18262120352442468, 0.14031236564211036, 0.2482825085594481, 0.14973906883545263, 0.1941947948065117, 0.17598699142895946, 0.27658439980004035, 0.3097950092602899, 0.2986228306646781, 0.32723499128329436, 0.3506411927954284, 0.3087748178820593, 0.26114361614266346, 0.3740475498102859, 0.2518452751163648, 0.22222812226225575, 0.2174750078735067, 0.1634906820279841, 0.23716697837953282, 0.2478536430521171, 0.19988980030120174, 0.1820036007330036, 0.15667566643798092, 0.14038228673133513, 0.21777962566276177, 0.22335814737142345, 0.20543664913790094, 0.2255539216808986, 0.21068756387876042, 0.2518472033936051, 0.20094567543277053, 0.21238128339543505, 0.19906415771011776, 0.19014062236580487, 0.2079769766677414, 0.20083619557206134, 0.2153838415756415, 0.1854103652061485, 0.19720504898815894, 0.21409587501179383, 0.17676568810438853, 0.19418743144424944, 0.14911656197902035, 0.3956348889804052, 0.1825564111958211, 0.4333167291163369, 0.18492838218696594, 0.6309392715556406, 0.1502940478674405, 0.15433729679766783, 0.14958644600192406, 0.15796607537149499, 0.19828625140898237, 0.10803574780920622, 0.1651957536950064, 0.1492778351443782, 0.1923997149178185, 0.10834665881637806, 0.21726409237121636, 0.16425915691711357, 0.1748374418390134, 0.1858462348058565, 0.1652827584293629, 0.17815060021774276, 0.17210697871065672, 0.16761957476922507, 0.1661748270628386, 0.1719334058853581, 0.16393589421055332, 0.07904089310748719, 0.08147757258237875, 0.07204785944114378, 0.1053481089897852, 0.06991278860854877, 0.08745957443342245, 0.09067550057412976, 0.07507138242080169, 0.07747070872976458]}, "mutation_prompt": null}
{"id": "fbd1428a-dea0-4918-8bff-e7529c3af8e0", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "e55ef1f9-5693-4085-9000-8ccc2f084cb1", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "2dc2d278-9147-4e82-b12e-c62eb08ee53c", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, mutation_history_weight=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.mutation_history_weight = mutation_history_weight\n        self.mutation_history = np.zeros(self.dim)\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                    self.mutation_history[i] += self.mutation_history_weight * abs(new_solution[i] - harmony_memory[:, i].mean())\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved", "description": "Introducing a novel self-adaptive mutation strategy based on individual performance history to enhance solution exploration diversity.", "configspace": "", "generation": 75, "fitness": 0.21400383671403575, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "b8c2c87a-0cdd-4c08-b3a6-0abe7b569482", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "80b2951b-3a52-44e1-b3c3-2c8db566ffd6", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "e5e94428-7be6-4c76-9c47-5f5c00bdd7b5", "solution": "import numpy as np\n\nclass AdaptiveBandwidthEnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01) - 0.6 * np.mean(harmony_memory), *self.bandwidth_range)  # Adaptive bandwidth adjustment\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "AdaptiveBandwidthEnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Introducing adaptive bandwidth adjustment based on local search history to improve convergence speed.", "configspace": "", "generation": 78, "fitness": 0.21356424458464898, "feedback": "The algorithm AdaptiveBandwidthEnhancedOppositionMemoryHarmonySearchMutationRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.4594718660886331, 0.5729620810255313, 0.647440576261364, 0.47402156694267705, 0.6130536025895693, 0.45379492047554304, 0.46744986979286673, 0.6627112350031762, 0.44700004940991767, 0.2202956682524566, 0.20203583993752094, 0.09875947076316838, 0.1588407022292171, 0.15032888190683136, 0.2938131568448147, 0.22311092748238492, 0.32740504721058616, 0.24166163017917952, 0.11819432642292849, 0.1637666602935789, 0.1473412197779349, 0.15633554287273999, 0.1453499219152825, 0.14586280472665947, 0.15821099034789932, 0.14660425608197658, 0.17185841546342506, 0.12353694494826428, 0.12033717023658719, 0.11684561143358241, 0.14756951602474289, 0.12167721177431357, 0.11021248003426387, 0.14116291636258338, 0.0962185537058331, 0.0976153596313265, 0.9651935073032037, 0.8726243918902279, 0.9119617286627162, 0.8944027995135422, 0.8940530814103986, 0.9100402137624508, 0.8042705457882249, 0.8825969317492559, 0.9223940749023215, 0.196663279262012, 0.15239236312732296, 0.12366070375559524, 0.15885120589582002, 0.1998825560821983, 0.19373512643118052, 0.15813958827788122, 0.09514908255779286, 0.1255373211595241, 0.21067757353448546, 0.12591640792156644, 0.19709908829945488, 0.26105174021877486, 0.17930847656986915, 0.10606241861532706, 0.24334363579688356, 0.21597291527725127, 0.2155683836644373, 0.1521668088263055, 0.16840812064728994, 0.1494750001087688, 0.11290500781556911, 0.14095772675951335, 0.18254756771138814, 0.1249164620448261, 0.21065796297819783, 0.15194280390999848, 0.12536025072838042, 0.12187173565101894, 0.12992881393155964, 0.11867582290146672, 0.13437395432567123, 0.12631982077610282, 0.13485392822142062, 0.10926071321041786, 0.12733024511734836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05829665296377173, 9.999999999998899e-05, 9.999999999998899e-05, 0.06197889936619472, 0.05468638687223504, 0.06763262754255173, 0.05251057945144988, 0.00961213543339201, 0.04886952374234732, 0.10330358442508147, 0.04488561510993927, 0.011489828429306015, 0.06084659305918416, 0.11323189707410797, 0.13041342519802934, 0.05709856552760684, 0.08839379578423756, 0.07230415158555714, 0.16709005820563794, 0.07792510442073286, 0.002450013406518181, 0.1734445279349235, 0.17137636260549194, 0.06094379351300905, 0.04625846381354404, 0.13850127152310654, 0.038051650563121986, 0.1248716880168933, 0.07106856360080305, 9.999999999998899e-05, 0.34715431762998483, 0.5023093884922385, 0.31653771582505874, 0.3797569785716103, 0.3811660259705225, 0.3597285203472653, 0.4347683779523418, 0.41065672257721975, 0.38223785192072424, 0.08693046275977445, 0.12121980483655403, 0.1175291216088652, 0.09401504001692551, 0.11808686731313534, 0.08280230823579493, 0.10041327852952453, 0.10650221270633609, 0.08779495430824213, 0.15074670550929636, 0.1450440704626883, 0.1355482114434854, 0.16862403264306924, 0.14786156841157405, 0.23729642746132318, 0.17751422852704202, 0.15034663843331686, 0.13772668476688688, 0.3517745332854303, 0.24825617455320348, 0.2808768070474611, 0.2941001824989534, 0.240845962655875, 0.29407218218199405, 0.226318920646703, 0.3313711677436959, 0.3099962109590618, 0.3254728639060921, 0.18246784840552777, 0.22829561280015387, 0.200025375961413, 0.22754523628503653, 0.25886799827287255, 0.1897775673002633, 0.19999231630446335, 0.16306912799398565, 0.21716847192063715, 0.19758602859437546, 0.21904415899168495, 0.19370711558068254, 0.19831447985155204, 0.19822345695132448, 0.19226658488902126, 0.18881806498505682, 0.1972673583426071, 0.18225698348868713, 0.19307225431251873, 0.19474728140646336, 0.20914330751221955, 0.215234917897973, 0.21967837500145881, 0.1787063110940701, 0.20281479599197705, 0.19438486395907417, 0.22812915584379223, 0.40339390356430693, 0.47308412011840273, 0.16987853961856758, 0.1979694860123693, 0.18650071177222682, 0.4031707136909122, 0.15336496965930912, 0.15134758131993753, 0.34921248362622703, 0.19915165171788052, 0.18085393785769466, 0.30823527167508213, 0.2517640848153917, 0.20568603557347964, 0.30383684315355897, 0.5893632579805306, 0.09177430505235773, 0.1724162456494991, 0.16715865741818559, 0.16533994868514945, 0.16862999919791632, 0.15884398998685878, 0.1722131733333203, 0.18166576721396732, 0.16905620034983748, 0.18072579974389158, 0.07339324256190172, 0.07503018065111555, 0.07222760563957176, 0.10168100673846403, 0.08005856034240855, 0.08982317399312145, 0.07519363193143946, 0.07935602874768488, 0.08467250750035382]}, "mutation_prompt": null}
{"id": "bebecb1d-bf6e-4529-b08a-a06ba1801093", "solution": "import numpy as np\n\nclass AdaptiveBandwidthEnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            # Adaptive bandwidth control based on function landscape curvature\n            curvature = np.mean(np.gradient(func(harmony_memory), axis=0))\n            self.bandwidth = np.clip(self.bandwidth + np.sign(curvature) * 0.001, *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "AdaptiveBandwidthEnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Introducing adaptive bandwidth control based on function landscape curvature for improved exploration and exploitation balance.", "configspace": "", "generation": 79, "fitness": 0.15673283047433942, "feedback": "The algorithm AdaptiveBandwidthEnhancedOppositionMemoryHarmonySearchMutationRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.3810374159535458, 0.37116520423156785, 0.4177792049393484, 0.3877100858775041, 0.2913709102819797, 0.35221587021195766, 0.3135288575869134, 0.48401577651094807, 0.3285532495341552, 0.117011971197992, 0.12063524145169191, 0.06884055235203301, 0.02578220096900352, 0.07032756224696568, 0.05877841586125232, 0.1255351606796543, 0.05397506295069798, 0.10949383343477892, 0.07454978431828618, 0.11859045674830226, 0.10286459452880314, 0.10736018072440179, 0.12740023280791624, 0.09031099196789871, 0.0896451507955176, 0.09572570864845786, 0.07707707914429207, 0.07431575407555502, 0.04448609765859468, 0.05394293065281197, 0.09022327674104946, 0.0749558797004587, 0.08353415195568636, 0.04652872848113743, 0.07474759028018707, 0.06506680326162784, 0.857781114404365, 0.7682431300530855, 0.8110139992946461, 0.7867064721656819, 0.7966806179945369, 0.803785775213077, 0.7317027466982793, 0.6741689512534426, 0.8022116757892035, 0.17922470110979594, 0.08217238120196868, 0.0796699178403798, 0.07943585368166639, 0.09924684804871198, 0.10587586098083435, 0.07701318051601214, 0.055382933773975074, 0.04484359721245568, 0.15643127553682568, 0.14605036860191123, 0.17253342338438438, 0.20647500027348153, 0.26477665615889656, 0.10531282104330786, 0.13854320324946767, 0.16670408267211656, 0.1128527293921805, 0.07029440744967419, 0.1025507438058405, 9.999999999998899e-05, 0.1437073366404078, 0.11486028914500401, 0.11656678435828927, 0.10475904706519545, 0.11044440496429198, 0.12267413129476024, 0.09851891533327051, 0.12844397792590312, 0.08379576844430325, 0.09529799973040265, 0.10012099023807919, 0.13411096525569333, 0.10536369176244176, 0.10165986954310957, 0.09707366703784259, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07578272852809587, 0.007427668517216435, 0.0480119502269305, 0.020367470002250254, 0.003222054164119803, 0.019283401835680336, 0.02775186268656593, 0.03010717384376782, 0.08177387775890077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010050545396179, 0.004581002718187621, 0.011300710447027407, 0.02000297142230467, 0.0002784241744800964, 9.999999999998899e-05, 0.021360884611038466, 0.04945345273714696, 0.05139643639831759, 0.0735682857402633, 0.10250261465341826, 0.037879936646541545, 0.05492152946582596, 0.05021891486320362, 0.025990416114559767, 0.37488437917205364, 0.34668219926179766, 0.35517707183419667, 0.2830601488376787, 0.34304313585425905, 0.31841817362787506, 0.285179870636704, 0.3068191205196401, 0.25945238509475643, 0.06949143737979979, 0.07047967352736217, 0.06374988356459832, 0.05617000165427344, 0.07236997822186186, 0.08164523065543305, 0.05004846517759509, 0.06617142722249414, 0.06558741203677254, 0.09395871250380183, 0.0919641303666644, 0.11903872012747796, 0.10079932594228869, 0.09466344109370295, 0.09234025868718687, 0.10896326138704171, 0.1271480068507892, 0.11075472637480266, 0.1957412254210531, 0.2268660662334172, 0.19832409710873333, 0.20761325905382533, 0.20642026381699774, 0.27153045132887776, 0.26773353004526823, 0.279037252182345, 0.2013076872721321, 0.1702511110816406, 0.19228863164849064, 0.1114260786116964, 0.12491259628664286, 0.15664218173882605, 0.176720853034245, 0.15995781965306377, 0.14712371433772442, 0.11504457079834085, 0.17037623788561473, 0.16784225161352262, 0.15619863063244066, 0.16056806502599297, 0.15251857849598616, 0.15469052999259825, 0.17984439897037208, 0.164775207673855, 0.17330077031015478, 0.15879320221632898, 0.14933841433428374, 0.16565197806172094, 0.15913027252304057, 0.15445310810898705, 0.1919574031758251, 0.16031316857713795, 0.15327939524396184, 0.15375562741311244, 0.15638379208105013, 0.43274622420770725, 0.14422277682278528, 0.3692676983609925, 0.1564907648579883, 0.12681803123799296, 0.38801085512997757, 0.30050693751531865, 0.23743660967493596, 0.17318389461352635, 0.18498848643888754, 0.16950866508540108, 0.1296430040561094, 0.15035950759490224, 0.1394537111541284, 0.08924200573141094, 0.12493612963487688, 0.18413599018604687, 0.15191812195354726, 0.16079288468159558, 0.15944472073116434, 0.14884266255881717, 0.14311780662164186, 0.1491727075309225, 0.16213811798656264, 0.1632091511231425, 0.16886975164924445, 0.05997666723926198, 0.045556365977568514, 0.06559299136052799, 0.05403189573522227, 0.04530957356246468, 0.05404236398696227, 0.06436347337502701, 0.055790310195172776, 0.06819893502906893]}, "mutation_prompt": null}
{"id": "900afd5a-5077-4d8d-a2d2-ff80506daaa5", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth: # Adaptive bandwidth adjustment\n                    band_adjustment = np.mean(np.abs(harmony_memory[:, i] - np.mean(harmony_memory[:, i])))\n                    new_solution[i] = np.random.uniform(-band_adjustment, band_adjustment)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved", "description": "Improving exploration by incorporating adaptive band adjustment based on function landscape analysis.", "configspace": "", "generation": 80, "fitness": 0.21345768732602727, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.6380854451419269, 0.6472084428400158, 0.5191326520713855, 0.5418223272470326, 0.6134080183378857, 0.48146001242365677, 0.4981420808154903, 0.6556996274225231, 0.49954059485916735, 0.1874614364421916, 0.12730848365799097, 0.1839322844590806, 0.21861003995168016, 0.20682414301735652, 0.14634937323128594, 0.25902637010983975, 0.2288201832404846, 0.27169565696833975, 0.19065713273524265, 0.21851595092158949, 0.16908432021613784, 0.2361740012049358, 0.1603849428140789, 0.15550350640870947, 0.21917444817004517, 0.11636971667328833, 0.14624356640967995, 0.11511727386560433, 0.12162674296531295, 0.13447859484233704, 0.13756047457194798, 0.1046899647810684, 0.09781580387498656, 0.10362024768575262, 0.0896808901618984, 0.13068740935855094, 0.9301035210297754, 0.8643071493865435, 0.9169936288351265, 0.9007875622456322, 0.8193865141900153, 0.8861970276556653, 0.9015860946974387, 0.8966784759043838, 0.8472108354536696, 0.16763104539763918, 0.22933231428577827, 0.2172663220991694, 0.17649035369941524, 0.22712656824613964, 0.17335867573730668, 0.19159737337120808, 0.1804549170664883, 0.18972892957118737, 0.18795998467023933, 0.11840774535441045, 0.1691771883244788, 0.17580936083807752, 0.18473033522889948, 0.13917139747013607, 0.23435772895696239, 0.2156079093310872, 0.15909192521449655, 0.20448080417386116, 0.13226425689136434, 0.1565653306663406, 0.04301572558723732, 0.11536919494507514, 0.14637263590835936, 0.14070712826603615, 0.13856252136652059, 0.15099879450646125, 0.13427244259707838, 0.12897278963168413, 0.13384339459911665, 0.12527798969382475, 0.10099347839609796, 0.1781789069254195, 0.1377733910999812, 0.12680109164414333, 0.1327433029324282, 9.999999999998899e-05, 0.032686505502169894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014910304655552542, 0.005911363940596326, 9.999999999998899e-05, 9.999999999998899e-05, 0.07359038763928927, 0.051445092572417694, 0.06302471393355702, 0.029647842222448872, 0.04208700487270767, 0.03958583054848108, 0.16173000947000815, 0.12056595367514933, 0.10044421824235583, 0.04806474511978098, 0.029957901136381637, 0.030529410167390747, 0.05825066408116453, 0.1430208335580031, 0.07440900666113726, 0.021886161006361204, 0.041808279003686, 9.999999999998899e-05, 0.1785728605212078, 0.07462325056500974, 0.07653846266504938, 0.04944423675598575, 0.07407193988109773, 0.1006122195398943, 0.11061844537224774, 0.06961311616939259, 0.08257283291901019, 0.41155128530367124, 0.3394829703052151, 0.387688224735556, 0.3320972376353932, 0.34033330911892656, 0.3692503324904918, 0.3840428992015563, 0.3813147142670482, 0.4736221580431671, 0.09424862456239769, 0.08190535901830176, 0.12847516106906764, 0.09313278179953655, 0.12005588801046851, 0.10585189598497291, 0.12128160759497297, 0.09951141797839869, 0.12032701710476301, 0.1143250349689997, 0.12696135998269598, 0.14342772756033972, 0.15989527616407673, 0.16603947511245465, 0.18151567228194476, 0.1237449396831165, 0.11756329062494586, 0.1504680325461797, 0.23603740444918164, 0.1864666011635291, 0.19915529444088476, 0.2678473741824752, 0.38040700610800604, 0.35042291740099374, 0.29143456012110147, 0.23776527897180966, 0.21721193074733702, 0.285373267734508, 0.22316847134969287, 0.16593583219074504, 0.2573366484674998, 0.2530618418123429, 0.23110052327204922, 0.15883658803386103, 0.21714996944870812, 0.18108040224692556, 0.1802507020604024, 0.1964399259401053, 0.19535795133208833, 0.20363675099264145, 0.1878123139737251, 0.2074070971483516, 0.2090795594953504, 0.20359980641129127, 0.20410340715646602, 0.2272111163678271, 0.18803402441997596, 0.19630588305250996, 0.22025996705205353, 0.22560396605376176, 0.16512958735425343, 0.17944740898714118, 0.20871612435000353, 0.23236005605558774, 0.15581037015151866, 0.38254670482261666, 0.24661397432441845, 0.38254416087388854, 0.19323949157229914, 0.16361799489956141, 0.6551795475823003, 0.4000497971890583, 0.15139923217701468, 0.39972192322228417, 0.1936246051381626, 0.18445648025713812, 0.19908866774168832, 0.20169181966487026, 0.2029347275616059, 0.2357512731498942, 0.10230909603862604, 0.37592956500411123, 0.1875720880997923, 0.18542692928883342, 0.16838448625941416, 0.1600543347888861, 0.17820233010485897, 0.17788015631876808, 0.175510012447471, 0.15812262479215444, 0.18129189507902566, 0.09148048229138728, 0.07544594373449331, 0.07215539069158416, 0.11262630131945428, 0.1069154057713616, 0.07237269704828597, 0.08196010591663072, 0.07876811278640505, 0.07694066442974967]}, "mutation_prompt": null}
{"id": "6662263b-767a-464e-a3f5-b86cdf5a1d11", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < np.random.uniform(0.1, 0.5):  # Adjusted mutation rate\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.1, 0.5):  # Adjusted opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved", "description": "Improving convergence speed through dynamic adjustment of mutation rate and opposition rate.", "configspace": "", "generation": 81, "fitness": 0.20129629871188068, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefinedImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.3896094039357154, 0.46492539940687294, 0.44970511229884635, 0.43234144435374744, 0.5679891211246401, 0.5527801619050496, 0.4760757649314431, 0.46332904734071834, 0.47975111213897104, 0.17204015270534723, 0.1667122825804821, 0.07439888901360703, 0.11664306665657331, 0.04404584512699461, 0.16691882357436605, 0.16714530617504353, 0.16600319715559797, 0.2609565944107465, 0.167564970091585, 0.14204164897587435, 0.21128143453448112, 0.1469329540343347, 0.13591643870027348, 0.1236174995091307, 0.19898039153986025, 0.14679159503261285, 0.12671986691334003, 0.1112314542608609, 0.13539761572056563, 0.11726598038612523, 0.12017501487983007, 0.1237799055941512, 0.1161925823771719, 0.10606878570435674, 0.15318607579702237, 0.11865208274786854, 0.9053353247388224, 0.8773894269723326, 0.8926703615164873, 0.9040218874036945, 0.8922410969643586, 0.9254723884725461, 0.9029702608389247, 0.8790008338334312, 0.933178235682454, 0.13070322071153317, 0.09564456180145842, 0.1168418312724796, 0.1953381172549331, 0.16109218924907986, 0.16889469757680875, 0.17372211023788764, 0.13624446739013363, 0.10944750397178726, 0.20489012733009304, 0.11296260451192064, 0.20150320759417595, 0.29495519158919137, 0.1883798376276774, 0.17993317085372762, 0.19469143609239958, 0.1999141474279449, 0.2767835220514313, 0.13776951823506933, 0.12382135406288686, 0.0854031900880331, 0.10887498564576636, 0.1139316099364236, 0.12255198041381721, 0.12744369296685454, 0.1928812746440809, 0.12433746179790328, 0.11746431422432757, 0.09522213691080939, 0.12182645794409253, 0.19135972862499961, 0.17585548606974277, 0.11608949593472573, 0.11480697108500992, 0.11429998169914923, 0.12866640791475015, 0.0010478244725451447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037824259616691, 9.999999999998899e-05, 0.043169437405134126, 0.07193583194378861, 0.06735239197539888, 0.024860038699827447, 0.028877760349441117, 0.047839201243880636, 0.11567274355127266, 0.028216899445888566, 0.10583776270616196, 0.029795331420428006, 0.019514904492901275, 9.999999999998899e-05, 0.005125026576917491, 9.999999999998899e-05, 0.029197853629081116, 0.046782371802760236, 0.01569981252704733, 0.010734961887453709, 0.04633918839141171, 0.07503278020574367, 0.03347786543864273, 0.10981702241091384, 0.03608339364260338, 0.05897578885737298, 0.13139471831252303, 0.06922446353004597, 0.0582435901083207, 0.3344101857102172, 0.39403524101468346, 0.3723185891710037, 0.3925722968437807, 0.3736701317582627, 0.3758938473506067, 0.37457164345864424, 0.4009701017318118, 0.34646102098253406, 0.08453129924821456, 0.1181212627085253, 0.08865704788801376, 0.0980598168532888, 0.07423879065017702, 0.07337646912891926, 0.0807921283375399, 0.08289593450227717, 0.07989748210733849, 0.11624016817227623, 0.13285255016479347, 0.16133136589544284, 0.1470414665351134, 0.1549482659818423, 0.15954418563010986, 0.14179055867833135, 0.13112135461518515, 0.13061628927939983, 0.2250541895311151, 0.26767127772448385, 0.31382318342561843, 0.2748324797423295, 0.2652785003448237, 0.2685578613621462, 0.21666096222437004, 0.28425145648332495, 0.3186191110823392, 0.23212864982966108, 0.23501196293291549, 0.22711376740031264, 0.22316441162530076, 0.18240459582789814, 0.26029521126554556, 0.2141613435916977, 0.1983180562229101, 0.17674081628391847, 0.1776832197894319, 0.18271335481636997, 0.1983462947825253, 0.20679662230546225, 0.2166944640539299, 0.18214798045400116, 0.2089275989763495, 0.19407335154421246, 0.1904376120713136, 0.19614943834954923, 0.20096158739614, 0.20683546132570318, 0.18512597758410143, 0.2266947571202782, 0.1951948157898341, 0.2638380351242404, 0.18611135986297922, 0.265762432241229, 0.15086024893563577, 0.28717218803740274, 0.15819789611183366, 0.33451181916508343, 0.7359508180268439, 0.33237302849837214, 0.36946468850640046, 0.15213929066577325, 0.1521911919330713, 0.26625785982166494, 0.21435852351080387, 0.19503670834426323, 0.192184878764309, 0.26904099311447327, 0.18480337134119817, 0.10120878350976725, 0.25956555544709614, 0.35582779620480776, 0.17132641021163053, 0.17640748795999317, 0.19056993961984547, 0.16766675820805887, 0.1771178530704547, 0.17830731670108435, 0.17577081415697537, 0.1671464417272922, 0.17361814186161806, 0.07138292388273892, 0.06383684802986922, 0.07299699567942575, 0.07442379301073743, 0.08288353331297826, 0.07996226220218827, 0.07298655613354277, 0.06498996126091827, 0.08895109446682326]}, "mutation_prompt": null}
{"id": "ecbc1333-ddbb-446f-b1a2-af8099c6b296", "solution": "import numpy as np\n\nclass DynamicOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Dynamic opposition rate based on the landscape\n                    if np.random.rand() < np.exp(-10*func(harmony_memory) - func(new_solution)):\n                        new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicOppositionMemoryHarmonySearchMutationRefined", "description": "Improving the algorithm by incorporating a dynamic opposition rate based on the function landscape analysis to enhance exploration and exploitation.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'list' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'list' and 'float'\")", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {}, "mutation_prompt": null}
{"id": "eaa2b537-d0b6-4a91-adb7-d6677a166c9e", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "e3aaae68-613b-498b-acf0-23138e46f489", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefined", "description": "Enhancing the exploration-exploitation balance by introducing adaptive opposition rate and memory consideration probability.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5469300037367495, 0.5066798528971177, 0.5312096577864278, 0.5342872627968992, 0.5517169833465694, 0.49350491222312853, 0.5948708724412859, 0.6272314899921954, 0.5065667493599583, 0.12368222258180317, 0.10590499782622642, 0.176855978918385, 0.14156166774106782, 0.17153705386978657, 0.3594694015981188, 0.20672508441421622, 0.12542635866580365, 0.13828296615031155, 0.28132156293641586, 0.17239362261645474, 0.1264805502515265, 0.16506667957735133, 0.27191141793681306, 0.3256620863782439, 0.2795510732054052, 0.15931708471747352, 0.17125005598635812, 0.13010914083978864, 0.11334849415395698, 0.1455702381928139, 0.14978483945199494, 0.10065617367590363, 0.10875160915394166, 0.12976360970228284, 0.08528977483402045, 0.13805909133731165, 0.9454594411894941, 0.8654110947897486, 0.9011097477824275, 0.8929948596340554, 0.9065549240605932, 0.8848170240201001, 0.8624036223613131, 0.8169040773167019, 0.8317462359116743, 0.15071756342342124, 0.13405710424209938, 0.178727908810828, 0.18643359533968196, 0.15042693946796948, 0.18733714150743708, 0.1759136479299903, 0.18147097270977086, 0.17853865461468377, 0.16057336260332, 0.09373008588342968, 0.16943397502688273, 0.25948072140629797, 0.20660652742938646, 0.16760423290365256, 0.13893897946319245, 0.2245201509416066, 0.22078498650200706, 0.1250732287923494, 0.13069580051294138, 0.15079376721177562, 0.11792568296816808, 0.13071971938003935, 0.13371756725507455, 0.13153664632417317, 0.1529603815482833, 0.13181116354277034, 0.14472563198679578, 0.13502206162764174, 0.13103801197386566, 0.1191367422844809, 0.12189780700775066, 0.12997934345344297, 0.12065986368345605, 0.10759551789196953, 0.16033031948780296, 0.07266004103857937, 9.999999999998899e-05, 0.0019895314909975648, 9.999999999998899e-05, 9.999999999998899e-05, 0.005855116844007746, 0.01873485837359934, 0.00012418310426942636, 9.999999999998899e-05, 0.045240135849737406, 0.066083137441588, 0.039449514291419074, 0.05700135244683058, 0.045332233898479846, 0.0325468123330136, 0.08414414723844443, 0.11765632418165661, 0.09809049735668307, 0.04155032274800474, 0.03482367607739523, 0.03357328264425874, 0.05811888460683112, 0.16040839887350888, 0.03991498172556962, 0.04128521414191377, 0.030869375738849514, 0.05143491002056855, 0.0935003314191929, 0.06591711659033461, 0.06202890132059169, 0.15057055291300492, 0.0672521028194305, 0.11179722170204609, 0.05391834115146099, 0.1125337502672048, 0.06022280584067907, 0.34940315116431375, 0.3977104446445896, 0.4679875317500437, 0.3900956800121862, 0.3546293351525416, 0.4450839080150403, 0.5034369284418161, 0.3321706805638617, 0.3864912617067475, 0.0907643736335465, 0.11351249408725017, 0.2824836341932496, 0.12060800256834003, 0.13188804368457951, 0.1205980025162382, 0.11549804487960424, 0.11302849739487597, 0.10087975760886969, 0.14771189269104867, 0.12688088793390795, 0.14457138415737503, 0.14149217465270536, 0.1691586478855155, 0.14992251613096996, 0.15808995712923202, 0.23121721795731587, 0.15754178274413866, 0.30808547479494275, 0.2788016884539646, 0.3701708691669946, 0.3581510405886986, 0.3139173634282152, 0.3293810916053641, 0.2839801347867148, 0.2564843076773141, 0.22568261762948982, 0.22598264945402358, 0.23843778754907463, 0.19151734139472698, 0.2466450936386041, 0.20818366051308845, 0.25434289230754203, 0.18134238563477112, 0.22092977643168288, 0.173029218752367, 0.19486977728985422, 0.1953938089751286, 0.19313511315119092, 0.18257100028162854, 0.18535925315874002, 0.21799788807967757, 0.21610333887770405, 0.2178203615670633, 0.19083142732469882, 0.19670445025301297, 0.20969788678390167, 0.19650028881036452, 0.21921062668996227, 0.19595300708520502, 0.20868881961459707, 0.19253302599376765, 0.2168751479897788, 0.17821056280293723, 0.15353308198351456, 0.18286801118853402, 0.18212877496333568, 0.4543815625806934, 0.19304447723854323, 0.42930431657201895, 0.5931884321885396, 0.48271260151711815, 0.1418319997120021, 0.2110489306070935, 0.19787745493943965, 0.21003477185411046, 0.1622224831571346, 0.18249288491756366, 0.20296494346847693, 0.24190937359790132, 0.10166631582188435, 0.10018140901691419, 0.18559544586579868, 0.18609817527030403, 0.17774957485239284, 0.18679854606993107, 0.16699633583489681, 0.19489246956096673, 0.1582747013794955, 0.16508822620535635, 0.16829858802281628, 0.08213616984536298, 0.07999273815605024, 0.07859604071796655, 0.10029275934746185, 0.08329318114237616, 0.1264024666067366, 0.08309684913421933, 0.0770034216315707, 0.08437829143769726]}, "mutation_prompt": null}
{"id": "db6676b1-8c5f-44f0-9dae-d41366a8251a", "solution": "import numpy as np\n\nclass DynamicOppositionMemoryHarmonySearchMutationRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.4, 0.6):  # Adaptive opposition rate refinement\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "DynamicOppositionMemoryHarmonySearchMutationRefined", "description": "Improving exploration by dynamically adjusting opposition and memory consideration probabilities.", "configspace": "", "generation": 85, "fitness": 0.2110743496463588, "feedback": "The algorithm DynamicOppositionMemoryHarmonySearchMutationRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.5822073997789523, 0.4939875557240131, 0.5757358549893346, 0.48991972933353833, 0.4682655278337331, 0.4866662103653233, 0.5846875370240585, 0.6188113317474835, 0.5404579562481753, 0.18602482034265277, 0.1831351263662213, 0.16906426899581561, 0.20284827281518414, 0.20272318821749968, 0.15213195659114975, 0.17727803434967904, 0.2738423677031142, 0.12765693322008553, 0.15078347818151483, 0.22357089922422535, 0.13441177518746739, 0.2769975866001677, 0.1720872693960438, 0.1311056347646392, 0.13297497889360388, 0.16611273827587725, 0.15962784891895954, 0.12301784714723196, 0.1563734542953953, 0.1145167323827212, 0.2346518669325358, 0.114268386699521, 0.11190651818721054, 0.1231143112090749, 0.13171697831860352, 0.14032456909373137, 0.9093943910840047, 0.9078381004581106, 0.9157232226459404, 0.9121616455613711, 0.824140927828847, 0.9243010580151524, 0.9021405714241562, 0.8039993444972867, 0.837838617371018, 0.20551261044807279, 0.12485445190048872, 0.1351020484625053, 0.262397732482466, 0.19419870152453222, 0.1807065741613214, 0.18552046015351187, 0.07047253871995285, 0.18970476991742857, 0.22080447231016098, 0.16145515659659337, 0.16541071493014425, 0.26159006503063453, 0.10885418202984487, 0.16558240494555942, 0.17186509693105012, 0.21827708117593658, 0.19534151971089275, 0.1873194707375304, 0.14104213636089968, 0.13540994419341734, 0.14703714981447757, 0.18729404642267722, 0.06935915590145336, 0.14257065645226852, 0.12791456313548555, 0.14404794455508785, 0.15188826461078697, 0.11398479151589525, 0.1324790248559471, 0.1122277009713869, 0.12187399612936056, 0.14769517326822046, 0.1542336528045607, 0.1252932506138804, 0.12855864448141163, 0.012559319373713906, 9.999999999998899e-05, 9.999999999998899e-05, 0.022130187053356343, 9.999999999998899e-05, 9.999999999998899e-05, 0.016041673382207633, 9.999999999998899e-05, 0.020822968888639992, 0.0455482802324958, 0.04982612547605625, 0.09280208676016666, 0.017998471519619086, 0.0031889386033164824, 0.01456993753357616, 0.10416395312223625, 0.06489966306357242, 0.0628169964345987, 0.17345096526955073, 0.027556476009063968, 0.0316676889327584, 0.07836565351437275, 0.15770774208958516, 0.10065263481045672, 0.05802351227436242, 0.0709734029477549, 0.07268638579511522, 0.022736198655275097, 0.14985849235648474, 0.10026463487104464, 0.03240597068753159, 0.08015176647146605, 0.040749546119754676, 0.11244887411552007, 0.13985786335469386, 0.07616739870247002, 0.3997502660516513, 0.35652430665867174, 0.3296458826471218, 0.42302395889434674, 0.37297950877056196, 0.3441246426955964, 0.41260923989983556, 0.3314963095116986, 0.45465291514165485, 0.09778722931719386, 0.11758083323614987, 0.1343704428186253, 0.12941619772432988, 0.12407099498809071, 0.10078204097883758, 0.0881713788076115, 0.13086664075677867, 0.11024104732600559, 0.27326012677352396, 0.1321225519909609, 0.15868537535973515, 0.15987759019283765, 0.13390385007766403, 0.1301228119231873, 0.12152710918310294, 0.11818169048465221, 0.16202498136262333, 0.34567484180796804, 0.30282017690794305, 0.3134034710176655, 0.2614571049223712, 0.28139999662919235, 0.2835458937733196, 0.31044064856608933, 0.29381320682340417, 0.20398913685873266, 0.17531846454610223, 0.2049867095702681, 0.18772383449139618, 0.2481301480027185, 0.2019577746917517, 0.23441575033717177, 0.2379003576081713, 0.1799932008604086, 0.17859767447879438, 0.19076123514310173, 0.1943643618392209, 0.20338411282446478, 0.21002404682901832, 0.1971741345961714, 0.19246841955406613, 0.2001800127149156, 0.18918749911500832, 0.20055735216327641, 0.19211244967228536, 0.2886035489419795, 0.23864039065339515, 0.20906503686954203, 0.19059842401321925, 0.20405124262701946, 0.18997159964071442, 0.18828132877595694, 0.22868620715451693, 0.1555442626372291, 0.18202518333286533, 0.19121815087350413, 0.3625119601239789, 0.4519795224887968, 0.16335458147239224, 0.5580305698644862, 0.1528299152333611, 0.15362671145126683, 0.29481341103956726, 0.16545973144264503, 0.1760707519038215, 0.35610233547259906, 0.20343746397233997, 0.20738575127183045, 0.10016731890249908, 0.25847756712767034, 0.09183805538977308, 0.16948273053805663, 0.1675887125999036, 0.19350273991938916, 0.1899546832437653, 0.18736297507841326, 0.17194791705010615, 0.18208905848707369, 0.17350378564344682, 0.1814730807232251, 0.08046231283657512, 0.07603617851727917, 0.07399350939466198, 0.10783834285046345, 0.08608170076443933, 0.07659081732371975, 0.09603710726013448, 0.07803144137857065, 0.0817106864921685]}, "mutation_prompt": null}
{"id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Expanding the search space with adaptive boundary handling to enhance exploration in the algorithm.", "configspace": "", "generation": 86, "fitness": 0.22254924212942853, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "d4d15e23-207d-47ed-9401-25bd1195082b", "metadata": {"aucs": [0.6521092514606059, 0.6038325168991463, 0.5596279723655179, 0.5629614240840087, 0.5953514622250023, 0.5791635560910184, 0.520088870680772, 0.5821742471097034, 0.6147212586229567, 0.25830051333045234, 0.281602999640987, 0.34073364149886476, 0.33611190559073545, 0.22312957161288427, 0.12319601822945192, 0.23664261811140985, 0.3172631158438707, 0.09728992420330418, 0.1575903162094825, 0.141042286513271, 0.32537302235142473, 0.16398472429029354, 0.14501259854099735, 0.16388354234500768, 0.16684762519889207, 0.12747525385034364, 0.1361344846245527, 0.20666149609458873, 0.11391003419485424, 0.11697911428113406, 0.1345270632573089, 0.11062345484577563, 0.10886541180103526, 0.11552832808367763, 0.15201774586315153, 0.13284392034912673, 0.9012521636322215, 0.9021580989892077, 0.8726759657719136, 0.9174376638142092, 0.8927337230321187, 0.9087169329078548, 0.9281426363198172, 0.9011937093997933, 0.8780975761366621, 0.264457243552623, 0.13540416726633653, 0.13268952795944788, 0.1946229514318102, 0.23716119858704166, 0.1482005450882098, 0.2516039518519635, 0.13363121523576849, 0.16883441222261497, 0.18452499893580365, 0.1664016913785914, 0.13563569039045342, 0.17597515831189592, 0.2453557984821111, 0.2082556295740482, 0.2002935619473879, 0.21598331937680082, 0.22625521585078556, 0.17819473277028375, 0.16899844491030858, 0.19365226052504647, 0.13589803650136745, 0.2322505338745139, 0.13581531415861336, 0.17288729336451292, 0.134551125899934, 0.13421742022099803, 0.1290383777389401, 0.17468388975690907, 0.14088252080517016, 0.12848331106740696, 0.11081209553672011, 0.12555050588862104, 0.12069014844170611, 0.1651445018817922, 0.12301961551528018, 9.999999999998899e-05, 9.999999999998899e-05, 0.05183389851367226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004464104360540677, 0.033122357291370474, 0.05962682537503661, 0.12312781303244158, 0.05144609863337468, 0.021949230521396745, 0.047212659698098625, 0.05463807144647703, 0.0561561870312276, 0.04600901241105093, 0.08585304580892228, 0.11244643995810144, 0.037546224796662364, 0.130285516095618, 0.06798584298382104, 0.04315317762198523, 0.11971191914518509, 0.10582629893798678, 0.067313449800956, 0.06938254099608454, 0.10610104344376281, 0.03234889713952105, 0.1662208851585978, 0.09492805579328378, 0.08640484529487735, 0.029304400261393138, 0.10574395516268942, 0.07634489883374829, 0.2178446630898695, 0.39674243545037646, 0.4033477719622651, 0.3844991925754685, 0.35378150282929266, 0.40850913377322795, 0.36746490396729936, 0.39712732340402623, 0.43006140855074904, 0.45221441123172523, 0.15962852909126546, 0.0897445098350741, 0.10675662592111224, 0.11420210402496322, 0.08670694522606393, 0.09682115235131072, 0.11479363889858418, 0.11091167865084373, 0.1130555863956817, 0.31141767502815487, 0.13739969907427207, 0.16653895301207322, 0.1677951723703478, 0.11959480271691558, 0.10883469990713057, 0.22764513604987635, 0.12246200169725885, 0.12662470331242226, 0.23787164500332647, 0.28616281332700666, 0.3167387386542385, 0.29571468628641306, 0.2746987293333678, 0.30028275708629204, 0.3131640666118338, 0.22703317116985244, 0.35888790013251115, 0.17338692291025415, 0.17259418143540584, 0.21907519528347152, 0.23630467894350604, 0.2576224845591468, 0.2919940612642452, 0.17400513081142144, 0.19412814993574212, 0.1783058293536457, 0.20671895427965725, 0.21574645842347973, 0.22194501192639804, 0.22073066863582014, 0.2060050321472916, 0.1993555086949309, 0.19151456510746478, 0.19436646962911874, 0.18854090506361432, 0.19955586641188916, 0.17379902628212074, 0.20627868261381932, 0.17951196447009765, 0.19419696072738302, 0.19251842054808466, 0.188299946064986, 0.21085131171686788, 0.18200510173548956, 0.17861658558642612, 0.18236695372903677, 0.17919177356583438, 0.8329345199730362, 0.46811031037301565, 0.1924633890523343, 0.16430479539721254, 0.41015730790088323, 0.1548857188193684, 0.31937175045361577, 0.5049903626961691, 0.189012449234079, 0.19438205425231947, 0.19157106842278837, 0.19432140453206848, 0.26976038696958926, 0.15502126575915043, 0.10329824974118895, 0.17326166672652166, 0.1640786029496667, 0.1720413816169083, 0.17931355017272577, 0.1830759489096785, 0.1756167719791718, 0.18496621382805434, 0.16560696357332527, 0.1847673347028398, 0.07904976910381478, 0.060732371550927366, 0.08255487619588364, 0.08535560186351498, 0.07590707249826123, 0.09374265268685289, 0.07316523445498879, 0.07502697541754355, 0.08202074614080979]}, "mutation_prompt": null}
{"id": "ed0d47ad-cd54-488f-8823-1444fa5755e0", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Expanding the search space with adaptive boundary handling to enhance exploration in the algorithm.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {"aucs": [0.6521092514606059, 0.6038325168991463, 0.5596279723655179, 0.5629614240840087, 0.5953514622250023, 0.5791635560910184, 0.520088870680772, 0.5821742471097034, 0.6147212586229567, 0.25830051333045234, 0.281602999640987, 0.34073364149886476, 0.33611190559073545, 0.22312957161288427, 0.12319601822945192, 0.23664261811140985, 0.3172631158438707, 0.09728992420330418, 0.1575903162094825, 0.141042286513271, 0.32537302235142473, 0.16398472429029354, 0.14501259854099735, 0.16388354234500768, 0.16684762519889207, 0.12747525385034364, 0.1361344846245527, 0.20666149609458873, 0.11391003419485424, 0.11697911428113406, 0.1345270632573089, 0.11062345484577563, 0.10886541180103526, 0.11552832808367763, 0.15201774586315153, 0.13284392034912673, 0.9012521636322215, 0.9021580989892077, 0.8726759657719136, 0.9174376638142092, 0.8927337230321187, 0.9087169329078548, 0.9281426363198172, 0.9011937093997933, 0.8780975761366621, 0.264457243552623, 0.13540416726633653, 0.13268952795944788, 0.1946229514318102, 0.23716119858704166, 0.1482005450882098, 0.2516039518519635, 0.13363121523576849, 0.16883441222261497, 0.18452499893580365, 0.1664016913785914, 0.13563569039045342, 0.17597515831189592, 0.2453557984821111, 0.2082556295740482, 0.2002935619473879, 0.21598331937680082, 0.22625521585078556, 0.17819473277028375, 0.16899844491030858, 0.19365226052504647, 0.13589803650136745, 0.2322505338745139, 0.13581531415861336, 0.17288729336451292, 0.134551125899934, 0.13421742022099803, 0.1290383777389401, 0.17468388975690907, 0.14088252080517016, 0.12848331106740696, 0.11081209553672011, 0.12555050588862104, 0.12069014844170611, 0.1651445018817922, 0.12301961551528018, 9.999999999998899e-05, 9.999999999998899e-05, 0.05183389851367226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004464104360540677, 0.033122357291370474, 0.05962682537503661, 0.12312781303244158, 0.05144609863337468, 0.021949230521396745, 0.047212659698098625, 0.05463807144647703, 0.0561561870312276, 0.04600901241105093, 0.08585304580892228, 0.11244643995810144, 0.037546224796662364, 0.130285516095618, 0.06798584298382104, 0.04315317762198523, 0.11971191914518509, 0.10582629893798678, 0.067313449800956, 0.06938254099608454, 0.10610104344376281, 0.03234889713952105, 0.1662208851585978, 0.09492805579328378, 0.08640484529487735, 0.029304400261393138, 0.10574395516268942, 0.07634489883374829, 0.2178446630898695, 0.39674243545037646, 0.4033477719622651, 0.3844991925754685, 0.35378150282929266, 0.40850913377322795, 0.36746490396729936, 0.39712732340402623, 0.43006140855074904, 0.45221441123172523, 0.15962852909126546, 0.0897445098350741, 0.10675662592111224, 0.11420210402496322, 0.08670694522606393, 0.09682115235131072, 0.11479363889858418, 0.11091167865084373, 0.1130555863956817, 0.31141767502815487, 0.13739969907427207, 0.16653895301207322, 0.1677951723703478, 0.11959480271691558, 0.10883469990713057, 0.22764513604987635, 0.12246200169725885, 0.12662470331242226, 0.23787164500332647, 0.28616281332700666, 0.3167387386542385, 0.29571468628641306, 0.2746987293333678, 0.30028275708629204, 0.3131640666118338, 0.22703317116985244, 0.35888790013251115, 0.17338692291025415, 0.17259418143540584, 0.21907519528347152, 0.23630467894350604, 0.2576224845591468, 0.2919940612642452, 0.17400513081142144, 0.19412814993574212, 0.1783058293536457, 0.20671895427965725, 0.21574645842347973, 0.22194501192639804, 0.22073066863582014, 0.2060050321472916, 0.1993555086949309, 0.19151456510746478, 0.19436646962911874, 0.18854090506361432, 0.19955586641188916, 0.17379902628212074, 0.20627868261381932, 0.17951196447009765, 0.19419696072738302, 0.19251842054808466, 0.188299946064986, 0.21085131171686788, 0.18200510173548956, 0.17861658558642612, 0.18236695372903677, 0.17919177356583438, 0.8329345199730362, 0.46811031037301565, 0.1924633890523343, 0.16430479539721254, 0.41015730790088323, 0.1548857188193684, 0.31937175045361577, 0.5049903626961691, 0.189012449234079, 0.19438205425231947, 0.19157106842278837, 0.19432140453206848, 0.26976038696958926, 0.15502126575915043, 0.10329824974118895, 0.17326166672652166, 0.1640786029496667, 0.1720413816169083, 0.17931355017272577, 0.1830759489096785, 0.1756167719791718, 0.18496621382805434, 0.16560696357332527, 0.1847673347028398, 0.07904976910381478, 0.060732371550927366, 0.08255487619588364, 0.08535560186351498, 0.07590707249826123, 0.09374265268685289, 0.07316523445498879, 0.07502697541754355, 0.08202074614080979]}, "mutation_prompt": null}
{"id": "efd18b8c-b55a-4569-9acc-a7e30b8fa088", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Expanding the search space with adaptive boundary handling to enhance exploration in the algorithm.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {"aucs": [0.6521092514606059, 0.6038325168991463, 0.5596279723655179, 0.5629614240840087, 0.5953514622250023, 0.5791635560910184, 0.520088870680772, 0.5821742471097034, 0.6147212586229567, 0.25830051333045234, 0.281602999640987, 0.34073364149886476, 0.33611190559073545, 0.22312957161288427, 0.12319601822945192, 0.23664261811140985, 0.3172631158438707, 0.09728992420330418, 0.1575903162094825, 0.141042286513271, 0.32537302235142473, 0.16398472429029354, 0.14501259854099735, 0.16388354234500768, 0.16684762519889207, 0.12747525385034364, 0.1361344846245527, 0.20666149609458873, 0.11391003419485424, 0.11697911428113406, 0.1345270632573089, 0.11062345484577563, 0.10886541180103526, 0.11552832808367763, 0.15201774586315153, 0.13284392034912673, 0.9012521636322215, 0.9021580989892077, 0.8726759657719136, 0.9174376638142092, 0.8927337230321187, 0.9087169329078548, 0.9281426363198172, 0.9011937093997933, 0.8780975761366621, 0.264457243552623, 0.13540416726633653, 0.13268952795944788, 0.1946229514318102, 0.23716119858704166, 0.1482005450882098, 0.2516039518519635, 0.13363121523576849, 0.16883441222261497, 0.18452499893580365, 0.1664016913785914, 0.13563569039045342, 0.17597515831189592, 0.2453557984821111, 0.2082556295740482, 0.2002935619473879, 0.21598331937680082, 0.22625521585078556, 0.17819473277028375, 0.16899844491030858, 0.19365226052504647, 0.13589803650136745, 0.2322505338745139, 0.13581531415861336, 0.17288729336451292, 0.134551125899934, 0.13421742022099803, 0.1290383777389401, 0.17468388975690907, 0.14088252080517016, 0.12848331106740696, 0.11081209553672011, 0.12555050588862104, 0.12069014844170611, 0.1651445018817922, 0.12301961551528018, 9.999999999998899e-05, 9.999999999998899e-05, 0.05183389851367226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004464104360540677, 0.033122357291370474, 0.05962682537503661, 0.12312781303244158, 0.05144609863337468, 0.021949230521396745, 0.047212659698098625, 0.05463807144647703, 0.0561561870312276, 0.04600901241105093, 0.08585304580892228, 0.11244643995810144, 0.037546224796662364, 0.130285516095618, 0.06798584298382104, 0.04315317762198523, 0.11971191914518509, 0.10582629893798678, 0.067313449800956, 0.06938254099608454, 0.10610104344376281, 0.03234889713952105, 0.1662208851585978, 0.09492805579328378, 0.08640484529487735, 0.029304400261393138, 0.10574395516268942, 0.07634489883374829, 0.2178446630898695, 0.39674243545037646, 0.4033477719622651, 0.3844991925754685, 0.35378150282929266, 0.40850913377322795, 0.36746490396729936, 0.39712732340402623, 0.43006140855074904, 0.45221441123172523, 0.15962852909126546, 0.0897445098350741, 0.10675662592111224, 0.11420210402496322, 0.08670694522606393, 0.09682115235131072, 0.11479363889858418, 0.11091167865084373, 0.1130555863956817, 0.31141767502815487, 0.13739969907427207, 0.16653895301207322, 0.1677951723703478, 0.11959480271691558, 0.10883469990713057, 0.22764513604987635, 0.12246200169725885, 0.12662470331242226, 0.23787164500332647, 0.28616281332700666, 0.3167387386542385, 0.29571468628641306, 0.2746987293333678, 0.30028275708629204, 0.3131640666118338, 0.22703317116985244, 0.35888790013251115, 0.17338692291025415, 0.17259418143540584, 0.21907519528347152, 0.23630467894350604, 0.2576224845591468, 0.2919940612642452, 0.17400513081142144, 0.19412814993574212, 0.1783058293536457, 0.20671895427965725, 0.21574645842347973, 0.22194501192639804, 0.22073066863582014, 0.2060050321472916, 0.1993555086949309, 0.19151456510746478, 0.19436646962911874, 0.18854090506361432, 0.19955586641188916, 0.17379902628212074, 0.20627868261381932, 0.17951196447009765, 0.19419696072738302, 0.19251842054808466, 0.188299946064986, 0.21085131171686788, 0.18200510173548956, 0.17861658558642612, 0.18236695372903677, 0.17919177356583438, 0.8329345199730362, 0.46811031037301565, 0.1924633890523343, 0.16430479539721254, 0.41015730790088323, 0.1548857188193684, 0.31937175045361577, 0.5049903626961691, 0.189012449234079, 0.19438205425231947, 0.19157106842278837, 0.19432140453206848, 0.26976038696958926, 0.15502126575915043, 0.10329824974118895, 0.17326166672652166, 0.1640786029496667, 0.1720413816169083, 0.17931355017272577, 0.1830759489096785, 0.1756167719791718, 0.18496621382805434, 0.16560696357332527, 0.1847673347028398, 0.07904976910381478, 0.060732371550927366, 0.08255487619588364, 0.08535560186351498, 0.07590707249826123, 0.09374265268685289, 0.07316523445498879, 0.07502697541754355, 0.08202074614080979]}, "mutation_prompt": null}
{"id": "6ec676a8-aa2c-4637-869f-67d67d241dbb", "solution": "import numpy as np\n\nclass DynamicAdaptiveHarmonySearch(EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary):\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        super().__init__(budget, dim, harmony_memory_size, bandwidth, bandwidth_range, pitch_adjustment_rate, pitch_adjustment_range, memory_consideration_prob, dynamic_memory_prob_range, mutation_rate, opposition_rate, adaptive_boundary_rate)\n        self.dynamic_mutation_prob = 0.5\n\n    def __call__(self, func):\n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.mutation_rate:\n                    mutation_rate = self.mutation_rate if func(new_solution) < func(harmony_memory[0]) else self.dynamic_mutation_prob\n                    if np.random.rand() < mutation_rate:  # Dynamic mutation rate based on solution quality\n                        new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.dynamic_memory_prob_range[1]:  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n            return new_solution\n\n        harmony_memory = self.initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = self.update_harmony_memory(harmony_memory, new_solution)\n        return harmony_memory[0]", "name": "DynamicAdaptiveHarmonySearch", "description": "Enhancing the algorithm by incorporating a dynamic adaptation mechanism that adjusts mutation rates based on solution quality to improve convergence speed.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicAdaptiveHarmonySearch' object has no attribute 'initialize_harmony_memory'\").", "error": "AttributeError(\"'DynamicAdaptiveHarmonySearch' object has no attribute 'initialize_harmony_memory'\")", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {}, "mutation_prompt": null}
{"id": "f9ab4d66-983f-4cb2-ab8d-d7f537b9194d", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Expanding the search space with adaptive boundary handling to enhance exploration in the algorithm.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {"aucs": [0.6521092514606059, 0.6038325168991463, 0.5596279723655179, 0.5629614240840087, 0.5953514622250023, 0.5791635560910184, 0.520088870680772, 0.5821742471097034, 0.6147212586229567, 0.25830051333045234, 0.281602999640987, 0.34073364149886476, 0.33611190559073545, 0.22312957161288427, 0.12319601822945192, 0.23664261811140985, 0.3172631158438707, 0.09728992420330418, 0.1575903162094825, 0.141042286513271, 0.32537302235142473, 0.16398472429029354, 0.14501259854099735, 0.16388354234500768, 0.16684762519889207, 0.12747525385034364, 0.1361344846245527, 0.20666149609458873, 0.11391003419485424, 0.11697911428113406, 0.1345270632573089, 0.11062345484577563, 0.10886541180103526, 0.11552832808367763, 0.15201774586315153, 0.13284392034912673, 0.9012521636322215, 0.9021580989892077, 0.8726759657719136, 0.9174376638142092, 0.8927337230321187, 0.9087169329078548, 0.9281426363198172, 0.9011937093997933, 0.8780975761366621, 0.264457243552623, 0.13540416726633653, 0.13268952795944788, 0.1946229514318102, 0.23716119858704166, 0.1482005450882098, 0.2516039518519635, 0.13363121523576849, 0.16883441222261497, 0.18452499893580365, 0.1664016913785914, 0.13563569039045342, 0.17597515831189592, 0.2453557984821111, 0.2082556295740482, 0.2002935619473879, 0.21598331937680082, 0.22625521585078556, 0.17819473277028375, 0.16899844491030858, 0.19365226052504647, 0.13589803650136745, 0.2322505338745139, 0.13581531415861336, 0.17288729336451292, 0.134551125899934, 0.13421742022099803, 0.1290383777389401, 0.17468388975690907, 0.14088252080517016, 0.12848331106740696, 0.11081209553672011, 0.12555050588862104, 0.12069014844170611, 0.1651445018817922, 0.12301961551528018, 9.999999999998899e-05, 9.999999999998899e-05, 0.05183389851367226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004464104360540677, 0.033122357291370474, 0.05962682537503661, 0.12312781303244158, 0.05144609863337468, 0.021949230521396745, 0.047212659698098625, 0.05463807144647703, 0.0561561870312276, 0.04600901241105093, 0.08585304580892228, 0.11244643995810144, 0.037546224796662364, 0.130285516095618, 0.06798584298382104, 0.04315317762198523, 0.11971191914518509, 0.10582629893798678, 0.067313449800956, 0.06938254099608454, 0.10610104344376281, 0.03234889713952105, 0.1662208851585978, 0.09492805579328378, 0.08640484529487735, 0.029304400261393138, 0.10574395516268942, 0.07634489883374829, 0.2178446630898695, 0.39674243545037646, 0.4033477719622651, 0.3844991925754685, 0.35378150282929266, 0.40850913377322795, 0.36746490396729936, 0.39712732340402623, 0.43006140855074904, 0.45221441123172523, 0.15962852909126546, 0.0897445098350741, 0.10675662592111224, 0.11420210402496322, 0.08670694522606393, 0.09682115235131072, 0.11479363889858418, 0.11091167865084373, 0.1130555863956817, 0.31141767502815487, 0.13739969907427207, 0.16653895301207322, 0.1677951723703478, 0.11959480271691558, 0.10883469990713057, 0.22764513604987635, 0.12246200169725885, 0.12662470331242226, 0.23787164500332647, 0.28616281332700666, 0.3167387386542385, 0.29571468628641306, 0.2746987293333678, 0.30028275708629204, 0.3131640666118338, 0.22703317116985244, 0.35888790013251115, 0.17338692291025415, 0.17259418143540584, 0.21907519528347152, 0.23630467894350604, 0.2576224845591468, 0.2919940612642452, 0.17400513081142144, 0.19412814993574212, 0.1783058293536457, 0.20671895427965725, 0.21574645842347973, 0.22194501192639804, 0.22073066863582014, 0.2060050321472916, 0.1993555086949309, 0.19151456510746478, 0.19436646962911874, 0.18854090506361432, 0.19955586641188916, 0.17379902628212074, 0.20627868261381932, 0.17951196447009765, 0.19419696072738302, 0.19251842054808466, 0.188299946064986, 0.21085131171686788, 0.18200510173548956, 0.17861658558642612, 0.18236695372903677, 0.17919177356583438, 0.8329345199730362, 0.46811031037301565, 0.1924633890523343, 0.16430479539721254, 0.41015730790088323, 0.1548857188193684, 0.31937175045361577, 0.5049903626961691, 0.189012449234079, 0.19438205425231947, 0.19157106842278837, 0.19432140453206848, 0.26976038696958926, 0.15502126575915043, 0.10329824974118895, 0.17326166672652166, 0.1640786029496667, 0.1720413816169083, 0.17931355017272577, 0.1830759489096785, 0.1756167719791718, 0.18496621382805434, 0.16560696357332527, 0.1847673347028398, 0.07904976910381478, 0.060732371550927366, 0.08255487619588364, 0.08535560186351498, 0.07590707249826123, 0.09374265268685289, 0.07316523445498879, 0.07502697541754355, 0.08202074614080979]}, "mutation_prompt": null}
{"id": "d6a4600a-86fa-4e4e-99e9-f186a915897f", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Expanding the search space with adaptive boundary handling to enhance exploration in the algorithm.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {"aucs": [0.6521092514606059, 0.6038325168991463, 0.5596279723655179, 0.5629614240840087, 0.5953514622250023, 0.5791635560910184, 0.520088870680772, 0.5821742471097034, 0.6147212586229567, 0.25830051333045234, 0.281602999640987, 0.34073364149886476, 0.33611190559073545, 0.22312957161288427, 0.12319601822945192, 0.23664261811140985, 0.3172631158438707, 0.09728992420330418, 0.1575903162094825, 0.141042286513271, 0.32537302235142473, 0.16398472429029354, 0.14501259854099735, 0.16388354234500768, 0.16684762519889207, 0.12747525385034364, 0.1361344846245527, 0.20666149609458873, 0.11391003419485424, 0.11697911428113406, 0.1345270632573089, 0.11062345484577563, 0.10886541180103526, 0.11552832808367763, 0.15201774586315153, 0.13284392034912673, 0.9012521636322215, 0.9021580989892077, 0.8726759657719136, 0.9174376638142092, 0.8927337230321187, 0.9087169329078548, 0.9281426363198172, 0.9011937093997933, 0.8780975761366621, 0.264457243552623, 0.13540416726633653, 0.13268952795944788, 0.1946229514318102, 0.23716119858704166, 0.1482005450882098, 0.2516039518519635, 0.13363121523576849, 0.16883441222261497, 0.18452499893580365, 0.1664016913785914, 0.13563569039045342, 0.17597515831189592, 0.2453557984821111, 0.2082556295740482, 0.2002935619473879, 0.21598331937680082, 0.22625521585078556, 0.17819473277028375, 0.16899844491030858, 0.19365226052504647, 0.13589803650136745, 0.2322505338745139, 0.13581531415861336, 0.17288729336451292, 0.134551125899934, 0.13421742022099803, 0.1290383777389401, 0.17468388975690907, 0.14088252080517016, 0.12848331106740696, 0.11081209553672011, 0.12555050588862104, 0.12069014844170611, 0.1651445018817922, 0.12301961551528018, 9.999999999998899e-05, 9.999999999998899e-05, 0.05183389851367226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004464104360540677, 0.033122357291370474, 0.05962682537503661, 0.12312781303244158, 0.05144609863337468, 0.021949230521396745, 0.047212659698098625, 0.05463807144647703, 0.0561561870312276, 0.04600901241105093, 0.08585304580892228, 0.11244643995810144, 0.037546224796662364, 0.130285516095618, 0.06798584298382104, 0.04315317762198523, 0.11971191914518509, 0.10582629893798678, 0.067313449800956, 0.06938254099608454, 0.10610104344376281, 0.03234889713952105, 0.1662208851585978, 0.09492805579328378, 0.08640484529487735, 0.029304400261393138, 0.10574395516268942, 0.07634489883374829, 0.2178446630898695, 0.39674243545037646, 0.4033477719622651, 0.3844991925754685, 0.35378150282929266, 0.40850913377322795, 0.36746490396729936, 0.39712732340402623, 0.43006140855074904, 0.45221441123172523, 0.15962852909126546, 0.0897445098350741, 0.10675662592111224, 0.11420210402496322, 0.08670694522606393, 0.09682115235131072, 0.11479363889858418, 0.11091167865084373, 0.1130555863956817, 0.31141767502815487, 0.13739969907427207, 0.16653895301207322, 0.1677951723703478, 0.11959480271691558, 0.10883469990713057, 0.22764513604987635, 0.12246200169725885, 0.12662470331242226, 0.23787164500332647, 0.28616281332700666, 0.3167387386542385, 0.29571468628641306, 0.2746987293333678, 0.30028275708629204, 0.3131640666118338, 0.22703317116985244, 0.35888790013251115, 0.17338692291025415, 0.17259418143540584, 0.21907519528347152, 0.23630467894350604, 0.2576224845591468, 0.2919940612642452, 0.17400513081142144, 0.19412814993574212, 0.1783058293536457, 0.20671895427965725, 0.21574645842347973, 0.22194501192639804, 0.22073066863582014, 0.2060050321472916, 0.1993555086949309, 0.19151456510746478, 0.19436646962911874, 0.18854090506361432, 0.19955586641188916, 0.17379902628212074, 0.20627868261381932, 0.17951196447009765, 0.19419696072738302, 0.19251842054808466, 0.188299946064986, 0.21085131171686788, 0.18200510173548956, 0.17861658558642612, 0.18236695372903677, 0.17919177356583438, 0.8329345199730362, 0.46811031037301565, 0.1924633890523343, 0.16430479539721254, 0.41015730790088323, 0.1548857188193684, 0.31937175045361577, 0.5049903626961691, 0.189012449234079, 0.19438205425231947, 0.19157106842278837, 0.19432140453206848, 0.26976038696958926, 0.15502126575915043, 0.10329824974118895, 0.17326166672652166, 0.1640786029496667, 0.1720413816169083, 0.17931355017272577, 0.1830759489096785, 0.1756167719791718, 0.18496621382805434, 0.16560696357332527, 0.1847673347028398, 0.07904976910381478, 0.060732371550927366, 0.08255487619588364, 0.08535560186351498, 0.07590707249826123, 0.09374265268685289, 0.07316523445498879, 0.07502697541754355, 0.08202074614080979]}, "mutation_prompt": null}
{"id": "e46cb468-96f3-43ea-9f98-7a374101ad27", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate + np.random.uniform(-0.05, 0.05):  # Introducing dynamic mutation\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.opposition_rate + np.random.uniform(-0.2, 0.2):  # Dynamic opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Enhancing diversity through dynamically adjusting mutation rate and opposition rate during the search process to improve exploration capabilities.", "configspace": "", "generation": 92, "fitness": 0.22205130029054357, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {"aucs": [0.6641244726710127, 0.5357012371927672, 0.6179540698624822, 0.6323839981219428, 0.5979744505138525, 0.6299343665448944, 0.6967987811786391, 0.5764295708221656, 0.5719716529442989, 0.2558361782723887, 0.21041702752098057, 0.2496155251311648, 0.3672290354314327, 0.32733013782704834, 0.21548505094984716, 0.2569997742884348, 0.2566523115991487, 0.18954770077393412, 0.15341097201435783, 0.23536972674672785, 0.14066167068895497, 0.1511811028917316, 0.19205030123384403, 0.19809629705701104, 0.16694065202172093, 0.1392981126395212, 0.12411930812376903, 0.15504537496266435, 0.1166601961146394, 0.12081709542927488, 0.12357751617386381, 0.21145275778932437, 0.11275824874556784, 0.16081542669204085, 0.12561720816536182, 0.11381917355720439, 0.9200767236387213, 0.8813005921363725, 0.9167709810714884, 0.9225035046623073, 0.903558826251278, 0.9379851776028706, 0.850542653748737, 0.8981957449376174, 0.9397713344822947, 0.17429085905285224, 0.20069584036459354, 0.18818990624143195, 0.21578187350904088, 0.23827520414579062, 0.1392862391220251, 0.1217823247145714, 0.16706921347635195, 0.1371866902362251, 0.2149758745906155, 0.12348214377883393, 0.1502550538878097, 0.19591648316354993, 0.20559311682869041, 0.3509265601770405, 0.22197825042520747, 0.16790970559661023, 0.13186557377672503, 0.16464442733997953, 0.1649082736543085, 0.26670956520270417, 0.1441668743459915, 0.16673611336236083, 0.140618437599482, 0.2304681470866321, 0.2686802894264798, 0.14295695856490642, 0.12926408986758064, 0.12381188058605241, 0.10204013276801083, 0.24468804588627313, 0.12053031329104547, 0.12501180321947436, 0.1340109561552355, 9.999999999998899e-05, 0.1295516207023254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006945087730838573, 0.018079417153043842, 0.03682683122551822, 0.09321914310511858, 0.06493815990103535, 0.0777133841942641, 0.0255887745284199, 0.02078617529961535, 0.045953068862647384, 0.12177728854940106, 0.06780885898160283, 0.059210182334837214, 0.1650698566309582, 0.05932327487423894, 0.0641411827684093, 0.06689865739996459, 0.0673047114561387, 0.038424568196116504, 0.00023751562224894052, 0.05078528926100423, 0.061905377099265024, 0.12375802411319714, 0.08503889896167605, 0.08299267729898163, 0.0447542458716198, 0.15865624877867845, 0.11316903892539654, 0.09681984193105031, 0.17121263700238465, 0.10951829220637244, 0.48224256108876873, 0.4299457415447686, 0.3431483427308233, 0.381358564627003, 0.39810120887535405, 0.4242455817122527, 0.3621813113537483, 0.46272195176833164, 0.4203267175613722, 0.08556933304507752, 0.10316480491153068, 0.10201749164861118, 0.12888604617122423, 0.12431458260433259, 0.13053265212505816, 0.08992162654518343, 0.09296618489130215, 0.11557166169854283, 0.14022352169582686, 0.12498218214763657, 0.23098699339734852, 0.1425655294913276, 0.1207277629062643, 0.2315691376986051, 0.12406879671590065, 0.23111103266096567, 0.14346334630463775, 0.28698548695459936, 0.20091227515564014, 0.25892394958600995, 0.36458889957953355, 0.2394133028784704, 0.26069562982254624, 0.3567942207554863, 0.2977776389794099, 0.2599680889664019, 0.11249853490323403, 0.23079413879406807, 0.26148544349275193, 0.28713557119196553, 0.1875777851762056, 0.18613433380159838, 0.1820017999934055, 0.20282573691141326, 0.18010248499145964, 0.19048410154303264, 0.17785687080521506, 0.20808476704721945, 0.2047830578008064, 0.2166814785882093, 0.21420969306192628, 0.19808371020316606, 0.18705596585868667, 0.21310123891447852, 0.20156205547830808, 0.19092954358359304, 0.20730479896926357, 0.19129163670239968, 0.20503637087297766, 0.20230427084079516, 0.19329252688654563, 0.34385714553516966, 0.1917882716143443, 0.15385825124277852, 0.18014815479719404, 0.18060424210624637, 0.19352881468462124, 0.5183340561281328, 0.11303324921973468, 0.5255095638770295, 0.6518025831334806, 0.16021059163622198, 0.3247426382450198, 0.10775573434372732, 0.2621419938242322, 0.18534118837361824, 0.15867678152925746, 0.19658261733546112, 0.10548313611488391, 0.0788846556410745, 0.11136447694632079, 0.17687352345263152, 0.17075723670598963, 0.1793775324479946, 0.18352984399285455, 0.16169812052597077, 0.17073149434811097, 0.18354779260253695, 0.17899151666173363, 0.1876911451205513, 0.09671896474755903, 0.07214465981264218, 0.08301342111334398, 0.10913356120489004, 0.10122166960288559, 0.09530900630640449, 0.07443307529900922, 0.08121710155417117, 0.08510397923815805]}, "mutation_prompt": null}
{"id": "eeca3b01-2f39-4321-b4dd-ae8bc326b4f3", "solution": "import numpy as np\n\nclass ImprovedEnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1, opposition_learning_rate=0.3):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n        self.opposition_learning_rate = opposition_learning_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def opposition_based_learning(solution, harmony_memory):\n            return 2 * np.mean(harmony_memory, axis=0) - solution\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = opposition_based_learning(new_solution[i], harmony_memory)\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "ImprovedEnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Introducing Opposition-Based Learning to Enhance Population Diversity for Improved Exploration Capability", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence.').", "error": "ValueError('setting an array element with a sequence.')", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {}, "mutation_prompt": null}
{"id": "00ac3250-fc96-4080-8ed5-82c481f92f4e", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Expanding the search space with adaptive boundary handling to enhance exploration in the algorithm.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {"aucs": [0.6521092514606059, 0.6038325168991463, 0.5596279723655179, 0.5629614240840087, 0.5953514622250023, 0.5791635560910184, 0.520088870680772, 0.5821742471097034, 0.6147212586229567, 0.25830051333045234, 0.281602999640987, 0.34073364149886476, 0.33611190559073545, 0.22312957161288427, 0.12319601822945192, 0.23664261811140985, 0.3172631158438707, 0.09728992420330418, 0.1575903162094825, 0.141042286513271, 0.32537302235142473, 0.16398472429029354, 0.14501259854099735, 0.16388354234500768, 0.16684762519889207, 0.12747525385034364, 0.1361344846245527, 0.20666149609458873, 0.11391003419485424, 0.11697911428113406, 0.1345270632573089, 0.11062345484577563, 0.10886541180103526, 0.11552832808367763, 0.15201774586315153, 0.13284392034912673, 0.9012521636322215, 0.9021580989892077, 0.8726759657719136, 0.9174376638142092, 0.8927337230321187, 0.9087169329078548, 0.9281426363198172, 0.9011937093997933, 0.8780975761366621, 0.264457243552623, 0.13540416726633653, 0.13268952795944788, 0.1946229514318102, 0.23716119858704166, 0.1482005450882098, 0.2516039518519635, 0.13363121523576849, 0.16883441222261497, 0.18452499893580365, 0.1664016913785914, 0.13563569039045342, 0.17597515831189592, 0.2453557984821111, 0.2082556295740482, 0.2002935619473879, 0.21598331937680082, 0.22625521585078556, 0.17819473277028375, 0.16899844491030858, 0.19365226052504647, 0.13589803650136745, 0.2322505338745139, 0.13581531415861336, 0.17288729336451292, 0.134551125899934, 0.13421742022099803, 0.1290383777389401, 0.17468388975690907, 0.14088252080517016, 0.12848331106740696, 0.11081209553672011, 0.12555050588862104, 0.12069014844170611, 0.1651445018817922, 0.12301961551528018, 9.999999999998899e-05, 9.999999999998899e-05, 0.05183389851367226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004464104360540677, 0.033122357291370474, 0.05962682537503661, 0.12312781303244158, 0.05144609863337468, 0.021949230521396745, 0.047212659698098625, 0.05463807144647703, 0.0561561870312276, 0.04600901241105093, 0.08585304580892228, 0.11244643995810144, 0.037546224796662364, 0.130285516095618, 0.06798584298382104, 0.04315317762198523, 0.11971191914518509, 0.10582629893798678, 0.067313449800956, 0.06938254099608454, 0.10610104344376281, 0.03234889713952105, 0.1662208851585978, 0.09492805579328378, 0.08640484529487735, 0.029304400261393138, 0.10574395516268942, 0.07634489883374829, 0.2178446630898695, 0.39674243545037646, 0.4033477719622651, 0.3844991925754685, 0.35378150282929266, 0.40850913377322795, 0.36746490396729936, 0.39712732340402623, 0.43006140855074904, 0.45221441123172523, 0.15962852909126546, 0.0897445098350741, 0.10675662592111224, 0.11420210402496322, 0.08670694522606393, 0.09682115235131072, 0.11479363889858418, 0.11091167865084373, 0.1130555863956817, 0.31141767502815487, 0.13739969907427207, 0.16653895301207322, 0.1677951723703478, 0.11959480271691558, 0.10883469990713057, 0.22764513604987635, 0.12246200169725885, 0.12662470331242226, 0.23787164500332647, 0.28616281332700666, 0.3167387386542385, 0.29571468628641306, 0.2746987293333678, 0.30028275708629204, 0.3131640666118338, 0.22703317116985244, 0.35888790013251115, 0.17338692291025415, 0.17259418143540584, 0.21907519528347152, 0.23630467894350604, 0.2576224845591468, 0.2919940612642452, 0.17400513081142144, 0.19412814993574212, 0.1783058293536457, 0.20671895427965725, 0.21574645842347973, 0.22194501192639804, 0.22073066863582014, 0.2060050321472916, 0.1993555086949309, 0.19151456510746478, 0.19436646962911874, 0.18854090506361432, 0.19955586641188916, 0.17379902628212074, 0.20627868261381932, 0.17951196447009765, 0.19419696072738302, 0.19251842054808466, 0.188299946064986, 0.21085131171686788, 0.18200510173548956, 0.17861658558642612, 0.18236695372903677, 0.17919177356583438, 0.8329345199730362, 0.46811031037301565, 0.1924633890523343, 0.16430479539721254, 0.41015730790088323, 0.1548857188193684, 0.31937175045361577, 0.5049903626961691, 0.189012449234079, 0.19438205425231947, 0.19157106842278837, 0.19432140453206848, 0.26976038696958926, 0.15502126575915043, 0.10329824974118895, 0.17326166672652166, 0.1640786029496667, 0.1720413816169083, 0.17931355017272577, 0.1830759489096785, 0.1756167719791718, 0.18496621382805434, 0.16560696357332527, 0.1847673347028398, 0.07904976910381478, 0.060732371550927366, 0.08255487619588364, 0.08535560186351498, 0.07590707249826123, 0.09374265268685289, 0.07316523445498879, 0.07502697541754355, 0.08202074614080979]}, "mutation_prompt": null}
{"id": "15f84904-4b3d-4ede-b878-b50a41591cd2", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Expanding the search space with adaptive boundary handling to enhance exploration in the algorithm.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {"aucs": [0.6521092514606059, 0.6038325168991463, 0.5596279723655179, 0.5629614240840087, 0.5953514622250023, 0.5791635560910184, 0.520088870680772, 0.5821742471097034, 0.6147212586229567, 0.25830051333045234, 0.281602999640987, 0.34073364149886476, 0.33611190559073545, 0.22312957161288427, 0.12319601822945192, 0.23664261811140985, 0.3172631158438707, 0.09728992420330418, 0.1575903162094825, 0.141042286513271, 0.32537302235142473, 0.16398472429029354, 0.14501259854099735, 0.16388354234500768, 0.16684762519889207, 0.12747525385034364, 0.1361344846245527, 0.20666149609458873, 0.11391003419485424, 0.11697911428113406, 0.1345270632573089, 0.11062345484577563, 0.10886541180103526, 0.11552832808367763, 0.15201774586315153, 0.13284392034912673, 0.9012521636322215, 0.9021580989892077, 0.8726759657719136, 0.9174376638142092, 0.8927337230321187, 0.9087169329078548, 0.9281426363198172, 0.9011937093997933, 0.8780975761366621, 0.264457243552623, 0.13540416726633653, 0.13268952795944788, 0.1946229514318102, 0.23716119858704166, 0.1482005450882098, 0.2516039518519635, 0.13363121523576849, 0.16883441222261497, 0.18452499893580365, 0.1664016913785914, 0.13563569039045342, 0.17597515831189592, 0.2453557984821111, 0.2082556295740482, 0.2002935619473879, 0.21598331937680082, 0.22625521585078556, 0.17819473277028375, 0.16899844491030858, 0.19365226052504647, 0.13589803650136745, 0.2322505338745139, 0.13581531415861336, 0.17288729336451292, 0.134551125899934, 0.13421742022099803, 0.1290383777389401, 0.17468388975690907, 0.14088252080517016, 0.12848331106740696, 0.11081209553672011, 0.12555050588862104, 0.12069014844170611, 0.1651445018817922, 0.12301961551528018, 9.999999999998899e-05, 9.999999999998899e-05, 0.05183389851367226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004464104360540677, 0.033122357291370474, 0.05962682537503661, 0.12312781303244158, 0.05144609863337468, 0.021949230521396745, 0.047212659698098625, 0.05463807144647703, 0.0561561870312276, 0.04600901241105093, 0.08585304580892228, 0.11244643995810144, 0.037546224796662364, 0.130285516095618, 0.06798584298382104, 0.04315317762198523, 0.11971191914518509, 0.10582629893798678, 0.067313449800956, 0.06938254099608454, 0.10610104344376281, 0.03234889713952105, 0.1662208851585978, 0.09492805579328378, 0.08640484529487735, 0.029304400261393138, 0.10574395516268942, 0.07634489883374829, 0.2178446630898695, 0.39674243545037646, 0.4033477719622651, 0.3844991925754685, 0.35378150282929266, 0.40850913377322795, 0.36746490396729936, 0.39712732340402623, 0.43006140855074904, 0.45221441123172523, 0.15962852909126546, 0.0897445098350741, 0.10675662592111224, 0.11420210402496322, 0.08670694522606393, 0.09682115235131072, 0.11479363889858418, 0.11091167865084373, 0.1130555863956817, 0.31141767502815487, 0.13739969907427207, 0.16653895301207322, 0.1677951723703478, 0.11959480271691558, 0.10883469990713057, 0.22764513604987635, 0.12246200169725885, 0.12662470331242226, 0.23787164500332647, 0.28616281332700666, 0.3167387386542385, 0.29571468628641306, 0.2746987293333678, 0.30028275708629204, 0.3131640666118338, 0.22703317116985244, 0.35888790013251115, 0.17338692291025415, 0.17259418143540584, 0.21907519528347152, 0.23630467894350604, 0.2576224845591468, 0.2919940612642452, 0.17400513081142144, 0.19412814993574212, 0.1783058293536457, 0.20671895427965725, 0.21574645842347973, 0.22194501192639804, 0.22073066863582014, 0.2060050321472916, 0.1993555086949309, 0.19151456510746478, 0.19436646962911874, 0.18854090506361432, 0.19955586641188916, 0.17379902628212074, 0.20627868261381932, 0.17951196447009765, 0.19419696072738302, 0.19251842054808466, 0.188299946064986, 0.21085131171686788, 0.18200510173548956, 0.17861658558642612, 0.18236695372903677, 0.17919177356583438, 0.8329345199730362, 0.46811031037301565, 0.1924633890523343, 0.16430479539721254, 0.41015730790088323, 0.1548857188193684, 0.31937175045361577, 0.5049903626961691, 0.189012449234079, 0.19438205425231947, 0.19157106842278837, 0.19432140453206848, 0.26976038696958926, 0.15502126575915043, 0.10329824974118895, 0.17326166672652166, 0.1640786029496667, 0.1720413816169083, 0.17931355017272577, 0.1830759489096785, 0.1756167719791718, 0.18496621382805434, 0.16560696357332527, 0.1847673347028398, 0.07904976910381478, 0.060732371550927366, 0.08255487619588364, 0.08535560186351498, 0.07590707249826123, 0.09374265268685289, 0.07316523445498879, 0.07502697541754355, 0.08202074614080979]}, "mutation_prompt": null}
{"id": "8d00cba9-6bf0-406e-95fc-bc6d404afe07", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundaryEnhancedMemorySize:\n    def __init__(self, budget, dim, initial_harmony_memory_size=10, min_harmony_memory_size=5, max_harmony_memory_size=15, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = initial_harmony_memory_size\n        self.min_harmony_memory_size = min_harmony_memory_size\n        self.max_harmony_memory_size = max_harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n\n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n\n            # Adaptive memory size adjustment\n            if np.random.rand() < 0.4:\n                self.harmony_memory_size = np.clip(self.harmony_memory_size + np.random.choice([-1, 1]), self.min_harmony_memory_size, self.max_harmony_memory_size)\n\n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundaryEnhancedMemorySize", "description": "Introducing adaptive memory size adjustment to dynamically change the size of the harmony memory during optimization.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 8 is out of bounds for axis 0 with size 8').", "error": "IndexError('index 8 is out of bounds for axis 0 with size 8')", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {}, "mutation_prompt": null}
{"id": "09e38bad-8a0b-4980-b5f5-de281caefb9e", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundaryRefined:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    mutation_factor = np.random.uniform(0.8, 1.2)  # Self-adaptive mutation rate\n                    new_solution[i] += np.random.uniform(-0.1, 0.1) * mutation_factor\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < self.opposition_rate:  # Self-adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundaryRefined", "description": "Enhancing adaptation by introducing self-adaptive mutation rate and opposition rate.", "configspace": "", "generation": 97, "fitness": 0.19902758806368645, "feedback": "The algorithm EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundaryRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.16.", "error": "", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {"aucs": [0.5272535010546308, 0.6590257025135912, 0.5385050699336935, 0.2995845893155745, 0.501181605581305, 0.5491814532074543, 0.5856137684621607, 0.5782195420320457, 0.6031186709245117, 0.46333983436845405, 0.1435742178061944, 0.19744502129689656, 0.1406314658801251, 0.12426315127122523, 0.25160231645992703, 0.2220292717923058, 0.1635729265851431, 0.23434083067705402, 0.16077912020030982, 0.13460939287992002, 0.14523273970505723, 0.15217205651781462, 0.1354647251897544, 0.1300706647476334, 0.09084903472487516, 0.10118570499226642, 0.1456986104159843, 0.08723863495536843, 0.10959333114393643, 0.10484641148865936, 0.12141909470974932, 0.056576584556199516, 0.11195146599681816, 0.13541148469750064, 0.10912373524434238, 0.07047183217968889, 0.7289183139280417, 0.615099819441361, 0.756333735437606, 0.684966851291489, 0.6196709886124805, 0.8626074412695448, 0.48618211627479924, 0.6194155647457562, 0.7361665400566494, 0.18730725679725302, 0.12205011071617178, 0.07572358550210434, 0.26173302488001104, 0.2234958302711616, 0.11009148146937353, 0.27197758598120425, 0.11949630269186184, 0.04936583319881571, 0.1764616051227056, 0.08475518781225233, 0.09698356791078622, 0.3196579681955045, 0.14176152151742094, 0.16023166735315264, 0.16619323249647566, 0.1734956879192321, 0.18605616761215593, 0.10365480626631962, 0.12865582574858803, 0.00623887959547631, 0.2055793958657609, 0.012796551546200186, 0.2560747833272219, 0.12496363491253593, 0.13281699396472524, 0.12846161608001472, 0.11265279147696017, 0.11346444546163825, 0.11807480333855402, 0.1429416580160403, 0.1486261005973909, 0.13958046481226571, 0.13107636828036484, 0.03696139604876569, 0.11899078056797008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006337952483137954, 9.999999999998899e-05, 9.999999999998899e-05, 0.03635190483136175, 9.999999999998899e-05, 0.0796397460059658, 0.033395395395550476, 0.10067200448932723, 0.05562635676848093, 0.017541536225946563, 0.0580635574468964, 0.08262934368116626, 0.0910705018330582, 0.10364055531803029, 0.09281924805098718, 0.11317797081269476, 0.1763193038238895, 0.06801178560039478, 0.10065321708665542, 0.10268915251711186, 0.027346465627389294, 0.04832781615599979, 0.06986768611805094, 0.09589536418858502, 0.13628236818615003, 0.029226835651650407, 0.07933698313102266, 0.20124280827544594, 0.09206299395742357, 0.14261787424473038, 0.16551657886987892, 0.06682793861023217, 0.3718835234891561, 0.5115439471936518, 0.4401700323134138, 0.363801687404428, 0.4145451704517623, 0.34404160627918123, 0.32705747572677024, 0.38902633422945687, 0.4264611658518309, 0.10871170371817662, 0.10231215867924381, 0.0946279102774431, 0.0923380751912457, 0.11368908763717589, 0.10391636049920672, 0.1083868808514511, 0.16994582379578205, 0.13074801169442796, 0.2391499358104463, 0.19820338084716616, 0.18492014449280592, 0.12843623283843952, 0.15852031717247883, 0.22026540586137622, 0.17879500100233547, 0.1682101530588732, 0.21119391262523546, 0.20676531756808048, 0.2916824444163032, 0.1974095800630098, 0.22904339801691842, 0.243339417099792, 0.3810305290496391, 0.18520194658491085, 0.4012270608279399, 0.1976102281454657, 0.14991483147744256, 0.25942367498279506, 0.18393285268785275, 0.20348037657918117, 0.18284125792509565, 0.23639765478151042, 0.18913323719898045, 0.12382718474439802, 0.14580286306270684, 0.24699607795014245, 0.22472678566202153, 0.21075424214981153, 0.21088206295070977, 0.22033057073169338, 0.20713557650133374, 0.23316632947650473, 0.19193314484895962, 0.2496024696311545, 0.1952361277300363, 0.19397144051379678, 0.19623197821791494, 0.19993110633561906, 0.21636302252426454, 0.19893403461467185, 0.1801096790646961, 0.2039468228594229, 0.19142186960679874, 0.15641428308766103, 0.3981851304157069, 0.18517841984107852, 0.19435041365588368, 0.1657367037409373, 0.11347717320087991, 0.1653830398203261, 0.7362119002720631, 0.15901538565406703, 0.39567684038527906, 0.20082133831284, 0.12629778043259599, 0.19253900181374517, 0.2035625156268055, 0.18854431886772582, 0.12167750224260798, 0.10207814282369365, 0.1681218528562627, 0.17008218778091155, 0.19351497218465719, 0.1757814550767718, 0.18218497101092257, 0.1748130978457011, 0.17898252919802848, 0.17477670737162898, 0.18568401900634746, 0.1827645720048514, 0.07158847289354087, 0.07816427925714109, 0.08475283987394866, 0.09741382698569923, 0.09347011627249935, 0.09454227208093668, 0.07006574880945571, 0.08592309299550338, 0.0846643891754768]}, "mutation_prompt": null}
{"id": "6d9059bd-9ff9-48f7-b4b9-62875d596ce0", "solution": "import numpy as np\n\nclass LevyOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            alpha = 0.01 * np.power(1 / beta, (1 / beta))\n            u = np.random.normal(0, alpha, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.power(np.abs(v), 1 / beta)\n            return step\n\n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n\n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n                new_solution += levy_flight()\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05),\n                                                  *self.pitch_adjustment_range)\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n\n        return harmony_memory[0]\n", "name": "LevyOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Introducing Levy flight for enhanced exploration and exploitation in the algorithm.", "configspace": "", "generation": 98, "fitness": 0.21386666538637353, "feedback": "The algorithm LevyOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {"aucs": [0.46257498694561583, 0.5017626838529166, 0.49578151339404786, 0.4569535640050716, 0.4594333463817919, 0.47026311366824325, 0.463242284765611, 0.470105706997648, 0.4764423880903812, 0.12628577356187887, 0.11870346194823411, 0.09078951149134773, 0.12342413738208124, 0.12347783617114416, 0.13885758909323798, 0.11764237959521051, 0.13189222936227818, 0.1296408305516017, 0.1021727148036603, 0.14145191406218782, 0.1313602836631289, 0.1649681875172182, 0.15419927663353206, 0.18933497377121766, 0.15375290679143305, 0.1093427620690891, 0.11335753519585812, 0.09844453746689541, 0.10923712375950911, 0.12235798822547517, 0.1047859601556056, 0.10936719960279029, 0.11690064660014798, 0.12687954275008784, 0.09609747240170308, 0.10120314496672977, 0.9122058937580731, 0.9015543952905877, 0.8770661888551998, 0.8662405269116402, 0.8824386497815155, 0.866704309199579, 0.8570229787088182, 0.9061655971132766, 0.8870615905392776, 0.2793855674227066, 0.24660053651005476, 0.18531635045488815, 0.2564211989409876, 0.2144468267588383, 0.19255443793561877, 0.24653528010940573, 0.1631069787198025, 0.18367953125252912, 0.3424669247775589, 0.15755220450981455, 0.19171668472604464, 0.34465045979302444, 0.2307482605826302, 0.20700347733992708, 0.18318128939598666, 0.22440007751388769, 0.1492229585260051, 0.23601922926118601, 0.23565974254013478, 0.19407221888937098, 0.19492490353638814, 0.19669982388924823, 0.19840842027911643, 0.13851447032934316, 0.14077671656829716, 0.14025750673495752, 0.11609840316288988, 0.11286321377484942, 0.11817893937846968, 0.13166953873570286, 0.1337742927035933, 0.13701876570995775, 0.16234556384305598, 0.1189056129802728, 0.13894139041688847, 9.999999999998899e-05, 9.999999999998899e-05, 0.001264980014131889, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020462782816728087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09759537008185104, 0.02400186480505795, 0.057643816080995, 0.07392979642080733, 0.027976240112651984, 0.02587595643116214, 0.08566340534133454, 0.05914631774039514, 0.07340228252630154, 0.013595421430966925, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013113880336795836, 9.999999999998899e-05, 0.021530881269247626, 0.0022752633953602164, 9.999999999998899e-05, 0.0005714832593497476, 0.12242900216634012, 0.060738754954958285, 0.0515346074778259, 0.12414029545215088, 0.09909043815453389, 0.14440428061903954, 0.11766757996379495, 0.12760764180905093, 0.08610843091947917, 0.4389829219567377, 0.4362246767855461, 0.41580620089092934, 0.40167212304464295, 0.41074963241413154, 0.43554580327591097, 0.4268866403212066, 0.42093204770324455, 0.44052844739898633, 0.10149345552384492, 0.09683198150200678, 0.10310515946478505, 0.13693298476692561, 0.10223628593699063, 0.09334391122497054, 0.09256499233018911, 0.10323559159387063, 0.08589516856900048, 0.2863945446879729, 0.1514655849387676, 0.12017997831256566, 0.17983807181631872, 0.15337159529254552, 0.13454181955132138, 0.15948209238957256, 0.16548812177588534, 0.14126436781715745, 0.30586045679312523, 0.2248850192166194, 0.29535537895870667, 0.2899232315216971, 0.27662520794345824, 0.2932641299828751, 0.24573138952413298, 0.315038298542495, 0.3003801176905545, 0.20015942464949943, 0.2266901211465565, 0.22240913004959006, 0.21362927240623275, 0.21512840288233814, 0.2291166759461979, 0.19551132227311108, 0.21687799378289363, 0.17977055481431803, 0.20038131103801848, 0.203155780771209, 0.2128551632376714, 0.18853623553650012, 0.20900809615483806, 0.21466989568425587, 0.20924323231673925, 0.1802477074799217, 0.20404044035230617, 0.2104132603385327, 0.1984029549231997, 0.1848975181468313, 0.18612536304912142, 0.1805469359955445, 0.21356515396435005, 0.188708311998797, 0.21064189543494372, 0.18200474356593832, 0.7324122293318175, 0.18392824827086407, 0.39145101875077726, 0.5445562825314408, 0.6482517152770968, 0.16842142130701154, 0.47435288343040594, 0.4940515409917612, 0.20412486789782247, 0.16799031880758397, 0.2005395363298671, 0.45835959022273154, 0.22346965931194507, 0.2278085676759184, 0.2065090251943279, 0.10380233334706446, 0.18264372931918793, 0.09244973799874878, 0.1770758559331036, 0.17225393063040284, 0.16507106697584262, 0.17936170580641286, 0.18081531138398543, 0.18837231618909, 0.1918224375888361, 0.1758093413796532, 0.1687139545288019, 0.07441788804058802, 0.07595922302578806, 0.0775070323204794, 0.06346988198028736, 0.07918666277796127, 0.1122527295252772, 0.07923041335029046, 0.08623731241605526, 0.07800841161015215]}, "mutation_prompt": null}
{"id": "c60446b4-f9e5-47fd-808c-c6a4cd4ec530", "solution": "import numpy as np\n\nclass EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, bandwidth_range=(0.01, 0.1), pitch_adjustment_rate=0.2, pitch_adjustment_range=(0.1, 0.5), memory_consideration_prob=0.5, dynamic_memory_prob_range=(0.4, 0.8), mutation_rate=0.1, opposition_rate=0.5, adaptive_boundary_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.bandwidth_range = bandwidth_range\n        self.pitch_adjustment_rate = pitch_adjustment_rate\n        self.pitch_adjustment_range = pitch_adjustment_range\n        self.memory_consideration_prob = memory_consideration_prob\n        self.dynamic_memory_prob_range = dynamic_memory_prob_range\n        self.mutation_rate = mutation_rate\n        self.opposition_rate = opposition_rate\n        self.adaptive_boundary_rate = adaptive_boundary_rate\n    \n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n        \n        def update_harmony_memory(harmony_memory, new_solution):\n            harmony_memory = np.vstack((harmony_memory, new_solution))\n            harmony_memory = harmony_memory[np.argsort(func(harmony_memory))]\n            return harmony_memory[:self.harmony_memory_size]\n        \n        def improvise(harmony_memory):\n            new_solution = np.copy(harmony_memory[np.random.randint(self.harmony_memory_size)])\n            for i in range(self.dim):\n                if np.random.rand() < self.bandwidth:\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    pitch_range = np.random.uniform(*self.pitch_adjustment_range)\n                    new_solution[i] += np.random.uniform(-pitch_range, pitch_range)\n                    new_solution[i] = np.clip(new_solution[i], -5.0, 5.0)\n                if np.random.rand() < np.random.uniform(*self.dynamic_memory_prob_range):  # Dynamic memory consideration probability\n                    new_solution[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.mutation_rate:  # Introducing mutation for diversity\n                    new_solution[i] = np.random.uniform(-5.0, 5.0)\n                if np.random.rand() < np.random.uniform(0.3, 0.7):  # Adaptive opposition rate\n                    new_solution[i] = 2 * np.mean(harmony_memory[:, i]) - new_solution[i]\n                if np.random.rand() < self.adaptive_boundary_rate:  # Adaptive boundary handling\n                    boundary_shift = np.random.uniform(-0.1, 0.1)\n                    new_solution[i] = np.clip(new_solution[i] + boundary_shift, -5.0, 5.0)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        for _ in range(self.budget):\n            self.bandwidth = np.clip(self.bandwidth + np.random.uniform(-0.01, 0.01), *self.bandwidth_range)\n            self.pitch_adjustment_rate = np.clip(self.pitch_adjustment_rate + np.random.uniform(-0.05, 0.05), *self.pitch_adjustment_range)  # Dynamic pitch adjustment rate\n            new_solution = improvise(harmony_memory)\n            if func(new_solution) < func(harmony_memory[-1]):\n                harmony_memory = update_harmony_memory(harmony_memory, new_solution)\n        \n        return harmony_memory[0]", "name": "EnhancedOppositionMemoryHarmonySearchMutationRefinedAdaptiveBoundary", "description": "Expanding the search space with adaptive boundary handling to enhance exploration in the algorithm.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a1f50b3-4bc2-4136-8874-de914f45197e", "metadata": {"aucs": [0.6521092514606059, 0.6038325168991463, 0.5596279723655179, 0.5629614240840087, 0.5953514622250023, 0.5791635560910184, 0.520088870680772, 0.5821742471097034, 0.6147212586229567, 0.25830051333045234, 0.281602999640987, 0.34073364149886476, 0.33611190559073545, 0.22312957161288427, 0.12319601822945192, 0.23664261811140985, 0.3172631158438707, 0.09728992420330418, 0.1575903162094825, 0.141042286513271, 0.32537302235142473, 0.16398472429029354, 0.14501259854099735, 0.16388354234500768, 0.16684762519889207, 0.12747525385034364, 0.1361344846245527, 0.20666149609458873, 0.11391003419485424, 0.11697911428113406, 0.1345270632573089, 0.11062345484577563, 0.10886541180103526, 0.11552832808367763, 0.15201774586315153, 0.13284392034912673, 0.9012521636322215, 0.9021580989892077, 0.8726759657719136, 0.9174376638142092, 0.8927337230321187, 0.9087169329078548, 0.9281426363198172, 0.9011937093997933, 0.8780975761366621, 0.264457243552623, 0.13540416726633653, 0.13268952795944788, 0.1946229514318102, 0.23716119858704166, 0.1482005450882098, 0.2516039518519635, 0.13363121523576849, 0.16883441222261497, 0.18452499893580365, 0.1664016913785914, 0.13563569039045342, 0.17597515831189592, 0.2453557984821111, 0.2082556295740482, 0.2002935619473879, 0.21598331937680082, 0.22625521585078556, 0.17819473277028375, 0.16899844491030858, 0.19365226052504647, 0.13589803650136745, 0.2322505338745139, 0.13581531415861336, 0.17288729336451292, 0.134551125899934, 0.13421742022099803, 0.1290383777389401, 0.17468388975690907, 0.14088252080517016, 0.12848331106740696, 0.11081209553672011, 0.12555050588862104, 0.12069014844170611, 0.1651445018817922, 0.12301961551528018, 9.999999999998899e-05, 9.999999999998899e-05, 0.05183389851367226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004464104360540677, 0.033122357291370474, 0.05962682537503661, 0.12312781303244158, 0.05144609863337468, 0.021949230521396745, 0.047212659698098625, 0.05463807144647703, 0.0561561870312276, 0.04600901241105093, 0.08585304580892228, 0.11244643995810144, 0.037546224796662364, 0.130285516095618, 0.06798584298382104, 0.04315317762198523, 0.11971191914518509, 0.10582629893798678, 0.067313449800956, 0.06938254099608454, 0.10610104344376281, 0.03234889713952105, 0.1662208851585978, 0.09492805579328378, 0.08640484529487735, 0.029304400261393138, 0.10574395516268942, 0.07634489883374829, 0.2178446630898695, 0.39674243545037646, 0.4033477719622651, 0.3844991925754685, 0.35378150282929266, 0.40850913377322795, 0.36746490396729936, 0.39712732340402623, 0.43006140855074904, 0.45221441123172523, 0.15962852909126546, 0.0897445098350741, 0.10675662592111224, 0.11420210402496322, 0.08670694522606393, 0.09682115235131072, 0.11479363889858418, 0.11091167865084373, 0.1130555863956817, 0.31141767502815487, 0.13739969907427207, 0.16653895301207322, 0.1677951723703478, 0.11959480271691558, 0.10883469990713057, 0.22764513604987635, 0.12246200169725885, 0.12662470331242226, 0.23787164500332647, 0.28616281332700666, 0.3167387386542385, 0.29571468628641306, 0.2746987293333678, 0.30028275708629204, 0.3131640666118338, 0.22703317116985244, 0.35888790013251115, 0.17338692291025415, 0.17259418143540584, 0.21907519528347152, 0.23630467894350604, 0.2576224845591468, 0.2919940612642452, 0.17400513081142144, 0.19412814993574212, 0.1783058293536457, 0.20671895427965725, 0.21574645842347973, 0.22194501192639804, 0.22073066863582014, 0.2060050321472916, 0.1993555086949309, 0.19151456510746478, 0.19436646962911874, 0.18854090506361432, 0.19955586641188916, 0.17379902628212074, 0.20627868261381932, 0.17951196447009765, 0.19419696072738302, 0.19251842054808466, 0.188299946064986, 0.21085131171686788, 0.18200510173548956, 0.17861658558642612, 0.18236695372903677, 0.17919177356583438, 0.8329345199730362, 0.46811031037301565, 0.1924633890523343, 0.16430479539721254, 0.41015730790088323, 0.1548857188193684, 0.31937175045361577, 0.5049903626961691, 0.189012449234079, 0.19438205425231947, 0.19157106842278837, 0.19432140453206848, 0.26976038696958926, 0.15502126575915043, 0.10329824974118895, 0.17326166672652166, 0.1640786029496667, 0.1720413816169083, 0.17931355017272577, 0.1830759489096785, 0.1756167719791718, 0.18496621382805434, 0.16560696357332527, 0.1847673347028398, 0.07904976910381478, 0.060732371550927366, 0.08255487619588364, 0.08535560186351498, 0.07590707249826123, 0.09374265268685289, 0.07316523445498879, 0.07502697541754355, 0.08202074614080979]}, "mutation_prompt": null}
