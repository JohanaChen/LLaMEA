{"id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 0, "fitness": 0.189687046200778, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "38588027-cc37-4cc6-a0ea-00ca96b48a6d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "f3a230ef-3854-4328-91e2-f55903d4b3e3", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "5332163a-1fcf-4b6b-b230-3e29b24dc1b2", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "5963cd95-37af-4a71-8729-c75b82941263", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "9c2c53ea-c334-4c27-8f7f-c8d8fb46177a", "solution": "import numpy as np\n\nclass AdaptiveQPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, quantum_param=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.quantum_param = quantum_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            mean_position = np.mean(self.positions, axis=0)\n            for i in range(self.num_particles):\n                phi = np.random.rand(self.dim)\n                new_position = (1 - self.quantum_param) * self.positions[i] + self.quantum_param * mean_position + phi * (self.personal_best_positions[i] - self.positions[i])\n                self.positions[i] = np.clip(new_position, self.lower_bound, self.upper_bound)\n\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveQPSO", "description": "Adaptive Quantum Particle Swarm Optimization (A-QPSO) introduces quantum-inspired position updating to enhance exploration capabilities and convergence speed.", "configspace": "", "generation": 5, "fitness": 0.18421574995647652, "feedback": "The algorithm AdaptiveQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.2289244779282289, 0.40817412080311666, 0.3840275393364516, 0.2248554933663478, 0.5752744584910375, 0.19685195485724027, 0.23502783727817989, 0.4791807795347436, 0.49778592475816263, 9.999999999998899e-05, 0.040523393606894054, 0.00666665194151117, 0.03329812844840674, 9.999999999998899e-05, 0.006313818839014829, 0.06601715424293819, 0.07472150607517547, 9.999999999998899e-05, 0.09616187861578585, 0.0539825485446378, 0.10230922423170419, 0.11007404711257918, 0.07477085351500334, 0.054646420407007956, 0.08339803370407628, 0.07428507951460483, 0.057193321509618755, 0.09020926241770721, 0.1539850790818602, 0.14014356671504413, 0.03203580069927359, 0.020422038390234376, 0.1128740834873524, 0.08881645189539755, 0.023514652130992686, 0.04786616307852054, 0.970696871435383, 0.9848842078678535, 0.9832737619241966, 0.9655683696102976, 0.986030300716482, 0.9652258381672284, 0.9820010324824499, 0.9788089762164909, 0.9814476017601691, 0.3421371050426828, 0.459401716172792, 0.2758405349794609, 0.14820771452979176, 0.06169408920343866, 0.15256397585703363, 0.27987497505052916, 0.07579563468422257, 0.5337493624288111, 0.17198891554945095, 0.07959700667244529, 0.22823934963664705, 0.17883473571295982, 0.1679093497873959, 0.19352122768218205, 0.22206630216750523, 0.1185878771645632, 0.14550740640753024, 0.20266745094795768, 9.999999999998899e-05, 0.13040086425953834, 9.999999999998899e-05, 0.12503678648816308, 0.0963734328944218, 0.14231241629640135, 0.00022810602785539036, 0.44959621553343154, 0.14654026907922924, 0.047020994792009496, 0.11057639156210886, 0.14881864012211465, 9.999999999998899e-05, 0.16521302668153293, 0.10443028009858446, 0.09895991174871066, 0.10349104052063685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00809041936284105, 9.999999999998899e-05, 9.999999999998899e-05, 0.08510357112465261, 0.07266994714229225, 0.013180313008181455, 0.04473588003415985, 0.05185115161237519, 0.017135000937922973, 0.06119579444150858, 0.05453427286074253, 0.03358856881970007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792153965619049, 0.06263166190446334, 0.13530989470555288, 9.999999999998899e-05, 9.999999999998899e-05, 0.07714742504647676, 9.999999999998899e-05, 0.029347161784483378, 0.08283595287959344, 9.999999999998899e-05, 0.008958797696528409, 0.004843397767040347, 0.04803097680803092, 9.999999999998899e-05, 9.999999999998899e-05, 0.3426294588651888, 0.44318082244614665, 0.3321117587434079, 0.3528818247882002, 0.4531054598289519, 0.3189510012306048, 0.22915779912287504, 0.5245686817983948, 0.33532790326463235, 0.059619161409340315, 0.059317145769701485, 0.06151126095795678, 0.07213579164597372, 0.06550161620840844, 0.06981082657965709, 0.08826708378500348, 0.05935928924923772, 0.08723962708285271, 0.1533583166314444, 0.24808815806388296, 0.1572312925636815, 0.24023470073532982, 0.1384372334491163, 0.12976064208105087, 0.15241204575988376, 0.20408105842219937, 0.11180789765354093, 0.21895835676690933, 0.3093762383080362, 0.24456962669527926, 0.25821393645249413, 0.18501666252677162, 0.2041493767673963, 0.23000987377862325, 0.21020027599913527, 0.28744236628206854, 0.25269524745530547, 0.20097960514437074, 0.2420458211457972, 0.2732760255369404, 0.1899904885407948, 0.22125408170698224, 0.16658863283967507, 0.1773844846373357, 0.15200727138540138, 0.21792924954054105, 0.1701193569908126, 0.175899481480024, 0.18995376294820865, 0.21149528279756635, 0.17524469802486653, 0.2225253789660353, 0.22262786747846885, 0.20489123536557796, 0.20978601027175015, 0.22513720137285764, 0.1876716279987346, 0.1983374036307186, 0.2080226511474933, 0.19591771987194162, 0.2243360335248492, 0.2250210600605378, 0.1726184457289346, 0.3404711034585918, 0.1670815394151296, 0.11288087866895535, 0.17183230383800996, 0.1938812602823886, 0.1685318140597396, 0.09249447898565832, 0.16975379894270393, 0.14805297776604132, 0.7975679771727641, 0.11600100764024157, 0.37270045417913056, 0.13308023224734022, 0.22178790082865762, 0.2115396332015188, 0.10241831069272844, 0.10414059737763781, 0.22141657046079732, 0.16994983185688228, 0.1829044050288272, 0.1854798624528894, 0.19398319760820826, 0.1894878913484107, 0.18532203392924518, 0.20604232475060846, 0.17868581079998747, 0.1687881955789693, 0.09737582030518155, 0.06534165375631751, 0.07347810817460909, 0.06275710873434559, 0.0588701426803897, 0.06594631910595594, 0.050883673981738875, 0.04903312461891929, 0.056701554343516536]}, "mutation_prompt": null}
{"id": "e317e972-7208-46f6-a5e2-6df7d9528077", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "9b87716b-265c-4292-94e5-5e7dbb38ca51", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "f0f3639a-d6fc-4a7f-ac5b-ce95fdd2ed5d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "017f47af-3fdc-4a2f-97b7-1903d05c67b3", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "3ec29e8b-7e61-476e-b004-b208ddecfa5d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "300dbcc4-3ab4-4b8b-94ab-1bdbb9a7398a", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "707d9d20-3f00-4775-bb16-81a6fc27df71", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "9565ec83-adaa-416b-a5c1-d6b98e43f3b2", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "c63cb0db-0cfd-4594-8d22-c40a5946b8ec", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "302b2d26-c1d7-4c10-a5bb-b0870e4ec817", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "e1d5c885-ca45-4ef8-8b90-4f2152b1520d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "4718e123-bd58-4400-9cc2-f11240bfc1a8", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "21cdd00b-188d-4b2f-8eac-9e187a4d47de", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "3168a6fe-4ba4-447e-bf67-34520d82d73a", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "dcc00a7d-d9f0-46c9-98eb-98d96bc377fa", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "c6c7083f-8d29-4e86-84d8-649231ba9c58", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "92fe3b4a-3d17-4a10-8388-12c50c7d40e8", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "906f0399-7252-4499-bcdf-e07e02e1280c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                self.social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "The algorithm combines Particle Swarm Optimization (PSO) with adaptive exploration-exploitation balancing to efficiently utilize the budget across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.27394919228244863, 0.8986382493134396, 0.43596311424883794, 0.18328085669135485, 0.15093162568491758, 0.15884795979807165, 0.8940442758726642, 0.18284892057702595, 0.30379749913407894, 0.04499048891707047, 0.0643204941580574, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614658463657107, 9.999999999998899e-05, 9.999999999998899e-05, 0.17817097682505012, 9.999999999998899e-05, 0.08918987233926112, 0.10792420873942721, 0.09887735463854985, 0.07512695524360202, 0.07196381853386535, 0.07161036943354226, 0.12209004175651283, 0.052367064101989436, 0.09142035241062185, 0.023591428936422965, 0.10092405766402768, 0.05784313315268663, 0.11557958198612739, 0.015377604940920664, 0.07537595278504416, 0.1822508137878348, 0.007542660620341701, 0.12783392836708773, 0.9913567233870724, 0.9909379304197192, 0.9913038897046389, 0.9861624737799551, 0.9835915468896593, 0.9837792430983184, 0.9864727727369358, 0.9892585436440011, 0.9910166982226672, 0.059840016646620864, 0.05177332395620493, 0.5969492472530831, 0.1528093196539263, 0.15287446625666723, 0.20149040051381084, 0.0892893191688714, 0.056134911758877415, 0.08750705047415563, 0.208345257275235, 0.22790765776988653, 0.10637526629417027, 0.4053885638665524, 0.32627397241767375, 0.3837077310596263, 0.06784819671339393, 0.12292794528919837, 0.17640836400862114, 0.24713688140539347, 0.12534141378511032, 0.13065088459615248, 0.14180151111224182, 0.1263213718279581, 0.10324094350454693, 9.999999999998899e-05, 0.083936189439481, 9.999999999998899e-05, 0.1685718905248108, 0.02228141608874812, 0.1262434901617807, 0.1499163383222265, 0.1824727390934383, 0.1461140009705687, 0.11111471087785996, 9.999999999998899e-05, 0.10947008959127069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033313656718322426, 9.999999999998899e-05, 9.999999999998899e-05, 0.019738990082695862, 0.01907839442551318, 0.08978151280185653, 0.06727359232895957, 0.010987016028910501, 0.02943255721148197, 0.052735731602262415, 0.040132935036216066, 0.07262523583409597, 9.999999999998899e-05, 9.999999999998899e-05, 0.11890533275517268, 0.06359120163505338, 0.06937613943460053, 9.999999999998899e-05, 9.999999999998899e-05, 0.21240320046499928, 0.05705010520384457, 0.1409906949776225, 9.999999999998899e-05, 0.12878912597675318, 0.057639093066516045, 9.999999999998899e-05, 0.1023028874352585, 0.07892118812462467, 0.13450344205204234, 0.0802996634852714, 0.4549875527999506, 0.458068791541821, 0.4556949686279178, 0.26687773114261626, 0.20822543590588694, 0.20724453715051028, 0.5839907801103756, 0.2894513689738216, 0.4783306148521217, 0.08286619578497467, 0.08442629418851888, 0.06643490426043153, 0.12089871761592785, 0.10360211248133233, 0.10261198976280206, 0.06908852362423745, 0.04334220995032134, 0.0474472890992409, 0.12158078666059646, 0.2423489760781209, 0.08893068866332432, 0.23181482114429797, 0.18942903846921155, 0.15547796387235702, 0.24454317898078926, 0.15786568216478558, 0.15320639422715865, 0.2102827763432732, 0.28755465879432096, 0.32637708476441263, 0.3236619272716129, 0.2721677775243432, 0.3586631699738465, 0.19325385916718218, 0.3387922579851388, 0.19741234369213811, 0.2590236471660997, 0.13145678858314513, 0.22526533732014764, 0.13672991412959323, 0.09597596265344177, 0.15842562602877464, 0.13400916556098386, 0.14259646812505977, 0.1860856781070268, 0.21216991657543782, 0.1450597075011878, 0.21005434600059725, 0.222174126222333, 0.18891343551438045, 0.17716752215836062, 0.19625462644459413, 0.2254633378667833, 0.216453652132773, 0.20142579122231086, 0.19925783344217007, 0.1711301568047775, 0.20054265185171138, 0.1499078836683153, 0.22177527338560554, 0.20538521571501867, 0.1455957877084093, 0.16655474633291656, 0.5252654533690673, 0.18870473783803565, 0.14990893784401782, 0.17256243290041584, 0.2001598902824938, 0.1622223042564157, 0.1303122947756148, 0.16826288570951764, 0.18703049560103258, 0.5304071678092266, 0.15698617082956867, 0.17448306359416565, 0.2092134074382711, 0.21964333577870732, 0.28228110199033296, 0.10421756167283858, 0.2497328973352252, 0.31098542844571064, 0.18609004201029977, 0.17392889789572674, 0.1779072241640599, 0.18656837183113895, 0.20077807242568702, 0.17434373139385806, 0.1910054285929791, 0.18745986357837507, 0.18602919819033958, 0.06073228153266952, 0.07932882592623558, 0.07200628458841507, 0.05008852391557661, 0.08928162957352992, 0.07787057174105994, 0.09482659587173292, 0.09416469546338191, 0.08856833350999316]}, "mutation_prompt": null}
{"id": "ed3725e9-28ab-4b3f-8697-5dee7885fa1c", "solution": "# Description: AdaptivePSO with dynamic cognitive and social parameters based on swarm diversity.\n# Code:\n# ```python\nimport numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            exploration_factor = (1 - (evaluations / self.budget)) ** 2\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.velocities = exploration_factor * self.velocities\n\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score\n# ```", "name": "AdaptivePSO", "description": "AdaptivePSO with dynamic cognitive and social parameters based on swarm diversity.", "configspace": "", "generation": 24, "fitness": 0.21732356048096643, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "20cbe71c-6f95-41da-acbc-e54bfcf6f33b", "metadata": {"aucs": [0.8851161908089005, 0.4072596025086521, 0.26128424300833264, 0.18220440357221457, 0.8894859874305501, 0.18260673896107904, 0.8930513874039997, 0.8785470704434208, 0.1726992435644008, 9.999999999998899e-05, 0.03974665917671827, 9.999999999998899e-05, 0.028089226281263424, 0.038485882453839104, 9.999999999998899e-05, 0.15033322166403795, 0.04680806418909855, 9.999999999998899e-05, 0.09007598622947166, 0.12526189331234272, 0.07574653886449201, 0.07304903730214407, 0.09428410531271769, 0.06590997889514616, 0.11981813722423007, 0.10994809614700407, 0.15362153644555365, 0.10257178610925599, 0.125933135040323, 0.13943283975490484, 0.11015011495845373, 0.05461074570114466, 0.11898482571536406, 0.0498085050560827, 0.08185025645657695, 0.12289863204318008, 0.9913656563498265, 0.9913470835433319, 0.9933522990845721, 0.9861580050090694, 0.9859845777957847, 0.9814575737062247, 0.9906296164753694, 0.9913765621497534, 0.9913643648845197, 0.2514060008066583, 0.05912956709414152, 0.46795946277000666, 0.3108828864715393, 0.15294785090529295, 0.17686445250208105, 0.08839880968961478, 0.7454309892225355, 0.3633257356689009, 0.22878931103981737, 0.32804743343815246, 0.2012384201931372, 0.3501991331241109, 0.21153755044001743, 0.19523247873039817, 0.12385216467446447, 0.1270734367330053, 0.11719627207784289, 0.11437027591183901, 0.14875686579839842, 0.1361048955572267, 0.14892250918724637, 0.3146315856935522, 0.12013088205421918, 0.1541818473753659, 0.23627044981822443, 0.20815003619405947, 0.1626936384398745, 0.01014357703341684, 0.15474801319998988, 0.16890306313690484, 0.15674850365334803, 0.1295259408819378, 0.1250545004328022, 9.999999999998899e-05, 0.12260010151347944, 0.005987729388009622, 9.999999999998899e-05, 0.033729593944496594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293730637816929, 0.022983057010864782, 0.023860520361706716, 0.034873081351416424, 0.0025008172499149106, 0.021179738610144327, 0.08932312737236392, 0.052661984705836606, 0.02600555285716022, 0.1698460201303491, 9.999999999998899e-05, 0.19652606507372317, 0.07484981397474944, 9.999999999998899e-05, 0.07666172197974286, 0.09873203087553539, 0.04630758232278498, 9.999999999998899e-05, 0.07636159290160671, 0.04159546015716664, 0.057314085106495494, 0.10042740006291728, 0.006319266257250766, 0.01608828835601528, 0.048100450422366325, 0.04901195864753338, 0.07577900640506763, 0.5306710862414883, 0.48181772133818135, 0.40547650587954054, 0.36733921500140465, 0.5574461871793772, 0.20724455751676707, 0.4801333509336104, 0.5217290135255839, 0.5845018277544447, 0.06687284691814643, 0.07216152678906929, 0.029762588698097003, 0.0744240400247489, 0.08124878685087733, 0.08411343810263516, 0.08021556868218271, 0.11117131805558855, 0.07492201406607368, 0.2647351848973767, 0.17066123764811914, 0.18118093741653407, 0.2529522695337366, 0.2664663027240525, 0.17960213467212893, 0.4225594737757883, 0.15330134814302632, 0.20112629967563922, 0.273757286348128, 0.27590030676571053, 0.3875415857277239, 0.23925728080853192, 0.1913112176946966, 0.24788184580270123, 0.3941694359294561, 0.20959249824427106, 0.2647079795321946, 0.31129874443161243, 0.171633026220817, 0.28110160764652214, 0.35205650540571276, 0.1738292963912378, 0.17653826826892727, 0.2508137535214965, 0.10574962826828649, 0.17396704814606656, 0.19740131303186392, 0.14125205868355883, 0.18201759240369664, 0.20307783720593098, 0.17333055991044455, 0.16720422542876479, 0.20293370294379942, 0.19374401316199474, 0.21902436784872592, 0.17843846974894473, 0.1882493192365008, 0.5241891482083361, 0.2074915135988321, 0.1772141272057155, 0.22117021488873045, 0.2516020301010633, 0.196155639301403, 0.22143511991884646, 0.1540232012705094, 0.18733664782356685, 0.15393532317970526, 0.9194857781192272, 0.20013942503977, 0.19636136616308564, 0.37539249136874087, 0.1698856071169832, 0.18632135354699841, 0.4261320728902781, 0.15689619694355939, 0.17640198294522014, 0.5686212598093261, 0.21418544083983748, 0.35328716825349404, 0.10419453809466173, 0.19869630964721874, 0.10501044964240813, 0.18033270654162548, 0.19145233174947252, 0.20604401919151294, 0.17968594958776907, 0.19609457579102874, 0.19384731801026323, 0.17721362239981286, 0.1787722542884188, 0.20088713846855133, 0.09747861697075422, 0.08480111000048907, 0.09058172819095012, 0.07845923247295072, 0.09055007453880148, 0.08852350501616824, 0.06976511411267161, 0.09502762718108482, 0.07956847225603347]}, "mutation_prompt": null}
{"id": "3dd13214-5955-4891-b1a5-7ed3bd636c6c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "AdaptivePSO with improved velocity adjustment using dynamic inertia adjustment based on convergence progress.", "configspace": "", "generation": 25, "fitness": 0.23465513179338743, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.25.", "error": "", "parent_id": "ed3725e9-28ab-4b3f-8697-5dee7885fa1c", "metadata": {"aucs": [0.737337249715675, 0.8288955407097034, 0.7395379944949321, 0.18261792873101756, 0.7572369592017691, 0.8353570812344097, 0.7860678938832484, 0.7952767933957287, 0.4348145891171563, 9.999999999998899e-05, 0.6928040418106417, 9.999999999998899e-05, 9.999999999998899e-05, 0.028943775804697758, 9.999999999998899e-05, 0.6313218962654183, 0.04453781255869782, 9.999999999998899e-05, 0.07124038958306222, 0.12393432194061316, 0.07418046982147608, 0.12308331647700776, 0.07062918989507128, 0.07337358582941866, 0.11029354615544085, 0.05045911500686384, 0.12301018899465832, 0.10021937965172167, 0.12003672581094693, 0.05872118704832596, 0.13665616813451253, 0.11197277861059463, 0.09980004194427605, 0.09502534029589182, 0.09323375329545558, 0.16803246242932546, 0.9913672107747086, 0.9913717984720672, 0.9933559885516704, 0.9861870349918627, 0.9859914465534174, 0.9826216069006317, 0.9906413654367616, 0.9913856402589413, 0.9913672709165798, 0.05948375153911234, 0.05908003456878819, 0.6469380143844672, 0.5728794377178168, 0.14949958280705555, 0.14872919694001352, 0.6775443845181521, 0.0887453080902102, 0.6493757111715469, 0.35526331107332376, 0.21628984135495155, 0.13199423664275367, 0.29641067817220945, 0.20056776826553946, 0.2740590404090475, 0.1254987877074838, 0.1261987674664713, 0.11719450700622269, 0.12404642419660017, 0.15592469997593705, 0.17857751627442087, 0.1699777722358693, 0.1481952502243461, 0.1713874386187364, 0.1523998854903833, 0.1449307394319711, 0.19258408449418418, 0.19830949671979003, 0.010126989798707076, 0.19114903773198366, 0.1387012978549247, 0.13331891288336606, 0.131977694258395, 0.20886734038107757, 9.999999999998899e-05, 0.1191123548161096, 0.030898686092265093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058939961124911844, 0.014971311755978767, 0.029998527397661956, 0.01056565957580824, 0.006151207153346383, 0.035235534140987346, 0.0855274712981221, 0.03665235392772215, 0.10831997843733532, 0.029028639468939632, 9.999999999998899e-05, 0.1579412276215737, 0.07019441585529951, 0.06298353176376936, 0.06801274936691137, 0.08790195939728873, 0.08297731023232624, 0.06436618027251295, 0.15210919028377634, 9.999999999998899e-05, 0.1562392433939025, 0.005775926802221498, 0.005949145604273842, 0.1451746179163902, 9.999999999998899e-05, 0.04684639962531634, 0.07492030854167919, 0.48447737529706836, 0.4846357900328473, 0.5190082952815249, 0.4748027275056178, 0.18210094565520563, 0.20719380203349969, 0.46080193640507594, 0.5156816063381601, 0.516916585852738, 0.06331868549127628, 0.062423505857225114, 0.05422884241879511, 0.0730531793295972, 0.05509546866797321, 0.09060291686222388, 0.07493618395307111, 0.0872763527802104, 0.11177550018454152, 0.1488251847854184, 0.14859144273710212, 0.15917406708950876, 0.24222663503319386, 0.2122412290047181, 0.14557289329845513, 0.3775161960823663, 0.1957861480265214, 0.21129130741248958, 0.1791819109278746, 0.19161140376512298, 0.33128554088479256, 0.38628287349150847, 0.19357782894489806, 0.5609470450863301, 0.4373401198406992, 0.19494748049983768, 0.27493077381868125, 0.13250694603969715, 0.19433622342992585, 0.20048663433721103, 0.28211217811235934, 0.2259206842268554, 0.21660319709015474, 0.28801289359835713, 0.25834672864168984, 0.13435386106122282, 0.19646087114788713, 0.13111032700066172, 0.2038243016619985, 0.18134184511872198, 0.14678346754432137, 0.1868238831046969, 0.19974820293505524, 0.20118964255755512, 0.2078758728318727, 0.18091462179087614, 0.20837166648638805, 0.1885205006073123, 0.24112385805714764, 0.1883334225079759, 0.2154603898047246, 0.19800125879028385, 0.6059657679067514, 0.19948533042429084, 0.16458115088709746, 0.18542208174049424, 0.15383282266917142, 0.6322195827560311, 0.19478966232818817, 0.5183570350329858, 0.8383588880375125, 0.1699637632984402, 0.1866343062821163, 0.7139681436927756, 0.15602315546054146, 0.17595632178545562, 0.5561936269372656, 0.22203039090788057, 0.5447963739590216, 0.1039560184730366, 0.19862254358163978, 0.35342749836108056, 0.1839690012184606, 0.18129152541430826, 0.1905976779812657, 0.23758797527595366, 0.1668247737514328, 0.1793648584989569, 0.18075959553131105, 0.2063276544098792, 0.19473075861695865, 0.07912833287652299, 0.06045017279669751, 0.0777685390636359, 0.06532645163906403, 0.08417683785400654, 0.0800275258657126, 0.10470363248161052, 0.07194331765346773, 0.050060399782850595]}, "mutation_prompt": null}
{"id": "85fa9c9d-a66d-4749-ac3e-193077385caa", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions)\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "AdaptivePSO with improved velocity adjustment using dynamic inertia adjustment based on convergence progress.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3dd13214-5955-4891-b1a5-7ed3bd636c6c", "metadata": {"aucs": [0.737337249715675, 0.8288955407097034, 0.7395379944949321, 0.18261792873101756, 0.7572369592017691, 0.8353570812344097, 0.7860678938832484, 0.7952767933957287, 0.4348145891171563, 9.999999999998899e-05, 0.6928040418106417, 9.999999999998899e-05, 9.999999999998899e-05, 0.028943775804697758, 9.999999999998899e-05, 0.6313218962654183, 0.04453781255869782, 9.999999999998899e-05, 0.07124038958306222, 0.12393432194061316, 0.07418046982147608, 0.12308331647700776, 0.07062918989507128, 0.07337358582941866, 0.11029354615544085, 0.05045911500686384, 0.12301018899465832, 0.10021937965172167, 0.12003672581094693, 0.05872118704832596, 0.13665616813451253, 0.11197277861059463, 0.09980004194427605, 0.09502534029589182, 0.09323375329545558, 0.16803246242932546, 0.9913672107747086, 0.9913717984720672, 0.9933559885516704, 0.9861870349918627, 0.9859914465534174, 0.9826216069006317, 0.9906413654367616, 0.9913856402589413, 0.9913672709165798, 0.05948375153911234, 0.05908003456878819, 0.6469380143844672, 0.5728794377178168, 0.14949958280705555, 0.14872919694001352, 0.6775443845181521, 0.0887453080902102, 0.6493757111715469, 0.35526331107332376, 0.21628984135495155, 0.13199423664275367, 0.29641067817220945, 0.20056776826553946, 0.2740590404090475, 0.1254987877074838, 0.1261987674664713, 0.11719450700622269, 0.12404642419660017, 0.15592469997593705, 0.17857751627442087, 0.1699777722358693, 0.1481952502243461, 0.1713874386187364, 0.1523998854903833, 0.1449307394319711, 0.19258408449418418, 0.19830949671979003, 0.010126989798707076, 0.19114903773198366, 0.1387012978549247, 0.13331891288336606, 0.131977694258395, 0.20886734038107757, 9.999999999998899e-05, 0.1191123548161096, 0.030898686092265093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058939961124911844, 0.014971311755978767, 0.029998527397661956, 0.01056565957580824, 0.006151207153346383, 0.035235534140987346, 0.0855274712981221, 0.03665235392772215, 0.10831997843733532, 0.029028639468939632, 9.999999999998899e-05, 0.1579412276215737, 0.07019441585529951, 0.06298353176376936, 0.06801274936691137, 0.08790195939728873, 0.08297731023232624, 0.06436618027251295, 0.15210919028377634, 9.999999999998899e-05, 0.1562392433939025, 0.005775926802221498, 0.005949145604273842, 0.1451746179163902, 9.999999999998899e-05, 0.04684639962531634, 0.07492030854167919, 0.48447737529706836, 0.4846357900328473, 0.5190082952815249, 0.4748027275056178, 0.18210094565520563, 0.20719380203349969, 0.46080193640507594, 0.5156816063381601, 0.516916585852738, 0.06331868549127628, 0.062423505857225114, 0.05422884241879511, 0.0730531793295972, 0.05509546866797321, 0.09060291686222388, 0.07493618395307111, 0.0872763527802104, 0.11177550018454152, 0.1488251847854184, 0.14859144273710212, 0.15917406708950876, 0.24222663503319386, 0.2122412290047181, 0.14557289329845513, 0.3775161960823663, 0.1957861480265214, 0.21129130741248958, 0.1791819109278746, 0.19161140376512298, 0.33128554088479256, 0.38628287349150847, 0.19357782894489806, 0.5609470450863301, 0.4373401198406992, 0.19494748049983768, 0.27493077381868125, 0.13250694603969715, 0.19433622342992585, 0.20048663433721103, 0.28211217811235934, 0.2259206842268554, 0.21660319709015474, 0.28801289359835713, 0.25834672864168984, 0.13435386106122282, 0.19646087114788713, 0.13111032700066172, 0.2038243016619985, 0.18134184511872198, 0.14678346754432137, 0.1868238831046969, 0.19974820293505524, 0.20118964255755512, 0.2078758728318727, 0.18091462179087614, 0.20837166648638805, 0.1885205006073123, 0.24112385805714764, 0.1883334225079759, 0.2154603898047246, 0.19800125879028385, 0.6059657679067514, 0.19948533042429084, 0.16458115088709746, 0.18542208174049424, 0.15383282266917142, 0.6322195827560311, 0.19478966232818817, 0.5183570350329858, 0.8383588880375125, 0.1699637632984402, 0.1866343062821163, 0.7139681436927756, 0.15602315546054146, 0.17595632178545562, 0.5561936269372656, 0.22203039090788057, 0.5447963739590216, 0.1039560184730366, 0.19862254358163978, 0.35342749836108056, 0.1839690012184606, 0.18129152541430826, 0.1905976779812657, 0.23758797527595366, 0.1668247737514328, 0.1793648584989569, 0.18075959553131105, 0.2063276544098792, 0.19473075861695865, 0.07912833287652299, 0.06045017279669751, 0.0777685390636359, 0.06532645163906403, 0.08417683785400654, 0.0800275258657126, 0.10470363248161052, 0.07194331765346773, 0.050060399782850595]}, "mutation_prompt": null}
{"id": "99a381bd-f0f0-43ab-b31c-172bb62f93de", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "AdaptivePSO with neighborhood communication by incorporating information from neighboring particles to enhance convergence.", "configspace": "", "generation": 27, "fitness": 0.23934354727268867, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "3dd13214-5955-4891-b1a5-7ed3bd636c6c", "metadata": {"aucs": [0.5669333024669785, 0.8190358980870438, 0.7685996188835439, 0.1767490436869117, 0.8277430978492102, 0.8172718788113318, 0.818161899289902, 0.7380191210116366, 0.8250373152131734, 0.7069895890818059, 0.6159989290510066, 9.999999999998899e-05, 0.5932033890009727, 0.6856414823736122, 9.999999999998899e-05, 9.999999999998899e-05, 0.6018927045434739, 0.6064478425292934, 0.16707190332548383, 0.3933445498885205, 0.1446876556325265, 0.06739147697749848, 0.06711908136762323, 0.06321265056044034, 0.10858437308413671, 0.1037361778361715, 0.13223187930885882, 0.09854116570828553, 0.11438375596474959, 0.11828076056367431, 0.10562624844286206, 0.11220886359401772, 0.11043682591302006, 0.05861463422992763, 0.11533609261079747, 0.12508508022124065, 0.9889813223114022, 0.9916795454408568, 0.9918677069542909, 0.9836589411155751, 0.9836425633256783, 0.9863561771966926, 0.9914128068827311, 0.989009772554923, 0.9890013061533918, 0.059375299871787135, 0.606042331610943, 0.6610573194951348, 0.14905847145515694, 0.21792193283919137, 0.15249959561474224, 0.08930158974522762, 0.08875096739372368, 0.08781757735464324, 0.17466865769154205, 0.20862894848434765, 0.15813548569336122, 0.2730728850199975, 0.19127891350475834, 0.3347810976732488, 0.2224301604680985, 0.12652511065214456, 0.3975388837061231, 0.18452151322835875, 0.18430889143118412, 0.15139800162265216, 0.3249576194614274, 0.1863850458982974, 0.1266990230154057, 0.13567772418048585, 0.17171597910172498, 0.1717151565582299, 0.11961466395584652, 0.010126636550353618, 0.11995602548647644, 0.18009489613525986, 0.12163749152753311, 0.18820731948838687, 0.16894128445130463, 9.999999999998899e-05, 0.221216535507625, 0.0002065404812434668, 9.999999999998899e-05, 0.0671131374303654, 0.03828962198918939, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014287771183728593, 9.999999999998899e-05, 9.999999999998899e-05, 0.05185434030985692, 0.025769451585088254, 0.05487034818360603, 0.0724527926280687, 9.999999999998899e-05, 9.999999999998899e-05, 0.04940106612686579, 0.0655552907567184, 0.012181852196590959, 0.04654256875243046, 0.029913115137653268, 9.999999999998899e-05, 0.06310479030214133, 9.999999999998899e-05, 0.0781232368713296, 9.999999999998899e-05, 0.08067154633767426, 0.06632589088819352, 0.14845208057681958, 9.999999999998899e-05, 0.13516062903763837, 0.10066551884866348, 0.10147085745090767, 0.18934395341117183, 0.07829000783685292, 0.07798821209706552, 0.07848268269715186, 0.4762844614990891, 0.4665101985297332, 0.3559289404223146, 0.5185911176607684, 0.48159350032716963, 0.5214818135382593, 0.4833828215213962, 0.13972592594721156, 0.5143418835568874, 0.054875841180302865, 0.050460141096129285, 0.059028766261652654, 0.06360648877775987, 0.09234206829665637, 0.0968283287830467, 0.06792189679622951, 0.09007926625597662, 0.06762581981993787, 0.1854728578927689, 0.2191696697861184, 0.1378332806091126, 0.2171958567970781, 0.19109438195303052, 0.14148124210180557, 0.18413928859906603, 0.17535310006483706, 0.1919469634734412, 0.3203534416322804, 0.19476605981770068, 0.3190240165579763, 0.3943461203447419, 0.1751403641934599, 0.2561771249328001, 0.2630066733124302, 0.29104641517047614, 0.19689172739343863, 0.23396481635618338, 0.16335042725583537, 0.22085380350511064, 0.17277288262726365, 0.11905027544325908, 0.2243786209772497, 0.23296903547943149, 0.2730647215725831, 0.14392585706984062, 0.1873570968925211, 0.16145910876662406, 0.17362720998116188, 0.19778562219246076, 0.19952631578928592, 0.17607227476778575, 0.18286840435531937, 0.1706180005847875, 0.20439674787906348, 0.218721922271082, 0.20998525954835, 0.1705362480009519, 0.2212372038575351, 0.23299039467360516, 0.2155140990560256, 0.2475992965573527, 0.22974554303317385, 0.1975774015795635, 0.8479842268872859, 0.15577477377494886, 0.15480251890282093, 0.8078762415938927, 0.1953768693243878, 0.1679628895646913, 0.16587625738924305, 0.16979977059872653, 0.18675793772478932, 0.549142111103722, 0.11727082726504745, 0.09773327863565995, 0.2006413346615613, 0.6208002043152618, 0.20655177282188475, 0.10401641825859786, 0.18604524467696426, 0.4887933362800766, 0.17058214222464974, 0.19051054761250952, 0.17809562714857297, 0.1816131509695098, 0.19735430911024698, 0.18379387713594508, 0.18713271390322517, 0.16928351695345534, 0.17793291828977986, 0.05682369481811966, 0.07787961521502762, 0.08033368591553502, 0.04903832536360975, 0.08378864708247924, 0.09362545620575513, 0.0791361711002917, 0.04643474856481811, 0.08419882055950623]}, "mutation_prompt": null}
{"id": "e9ad0bbb-7053-4333-b307-6b0413dd64bd", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = (evaluations / self.budget) ** 1.1  # Modified for improved convergence\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced AdaptivePSO by tuning the inertia weight progress factor formula for precise balance between exploration and exploitation.", "configspace": "", "generation": 28, "fitness": 0.23694421591375697, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "99a381bd-f0f0-43ab-b31c-172bb62f93de", "metadata": {"aucs": [0.8163126279159356, 0.5976635433837256, 0.8139229634244987, 0.18224138159280134, 0.7606639550257519, 0.18203515594093322, 0.8299514657250314, 0.7319323383665226, 0.769590746640326, 0.6056977992748506, 0.03977646204577345, 9.999999999998899e-05, 0.08457633959395316, 0.04271543347452045, 0.5243908184386572, 0.014901264855841867, 0.4476843209058018, 0.04557000943840395, 0.13496501222642732, 0.10733112317917726, 0.13024624601138024, 0.07131680909322424, 0.0722651948050489, 0.12549333761938686, 0.10777913317670884, 0.12673880348481348, 0.09286222917110953, 0.07376400336649436, 0.10641289701479528, 0.0792986029029249, 0.12894641820741215, 0.08446079523425776, 0.1344670102976041, 0.11926477185188056, 0.09729859818930564, 0.11489305843593356, 0.9889837201726268, 0.9916807323789071, 0.9918696068257343, 0.9836596341280021, 0.9836467992715422, 0.9863567941676598, 0.9914132315873265, 0.989010734664907, 0.9890023429355638, 0.057686507084396155, 0.05926239103353659, 0.6600185489102395, 0.14669882285514135, 0.5238658242629148, 0.15292200654088461, 0.08929623867522518, 0.08841044499991091, 0.08789910019957003, 0.2326365218494456, 0.330613487454649, 0.18974802164619664, 0.2720506639277822, 0.7786892555261359, 0.35525771968818987, 0.3345943395795504, 0.1265741275265505, 0.22927469092964559, 0.21525179010638418, 0.15411559608332082, 0.17653444678590824, 0.12246412720569566, 0.17655216496565695, 0.16186803701198405, 0.1915202749764714, 0.15756704303796776, 0.19128413554695978, 0.17027474407246668, 0.010137730485328067, 0.19273129691533897, 0.2224067569677759, 0.14550898237055132, 0.14055760604231038, 0.19925885883661132, 9.999999999998899e-05, 0.20596368353368943, 0.015000365861042697, 9.999999999998899e-05, 0.06352591668315888, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011577313671138345, 9.999999999998899e-05, 9.999999999998899e-05, 0.05136214208406842, 0.008687609674175145, 0.05206942145454063, 0.11062157662635508, 9.999999999998899e-05, 0.015226301302704637, 0.0464605386703173, 0.06725265345543396, 0.00040960335750528376, 0.04310729873879082, 0.031154980711670888, 9.999999999998899e-05, 0.07149434751520167, 9.999999999998899e-05, 0.0669211788602655, 0.10022378424287048, 0.08509207974879485, 0.06687834924460512, 0.12845949302711546, 9.999999999998899e-05, 0.0538799643908735, 0.015724965447805883, 0.1126607716114999, 0.12176082779893427, 0.07447115818284344, 0.08074035774359056, 0.07361872349813381, 0.39704909389069964, 0.45488303613758374, 0.4881020025627202, 0.5021965870262182, 0.5422123812970971, 0.5080411088389771, 0.5550801364590721, 0.13968884029745698, 0.5232324786612027, 0.059108248663668594, 0.050690551284630625, 0.06666105059064897, 0.08865239379676981, 0.08487529778899094, 0.09955999415785699, 0.058100583177745135, 0.1391148146842317, 0.07866226698784251, 0.165528532035767, 0.17199969071519006, 0.16120171690712015, 0.18588139668985781, 0.3978887143253306, 0.15070446385408487, 0.22342152378406288, 0.16133746459818044, 0.15460244403402323, 0.3028216204504507, 0.1902972992405748, 0.2117626711435543, 0.3840681092992948, 0.1848757332319667, 0.44070775077871016, 0.3731100241853115, 0.5832201508564178, 0.17466046859829554, 0.36578836958385386, 0.15378871234375457, 0.23466094236983903, 0.1359703097899313, 0.13138705703076936, 0.2505124531472148, 0.10869401712921212, 0.2464266524976937, 0.14701307978108125, 0.1876938825399933, 0.1601486689753554, 0.1944868321925669, 0.19005400084536905, 0.22519178570466014, 0.20137665579640962, 0.20111747400178204, 0.1818999312125874, 0.21688372276278167, 0.27036082958315655, 0.1818190149781903, 0.20717597942952337, 0.5996420389131519, 0.2096591693609764, 0.2300067477636245, 0.18734657418757905, 0.21029183419513753, 0.5198190022229026, 0.890434627546603, 0.17514407214754046, 0.15473888656279522, 0.7758947442304489, 0.19554325739297806, 0.168084649303339, 0.16532331745738227, 0.16980261554495812, 0.18678383051240866, 0.1828089290630469, 0.1173201913157822, 0.1637412083021016, 0.36982829958075036, 0.4052504181599126, 0.6705966917438383, 0.1041398328837615, 0.19439181446777998, 0.6946180093909127, 0.18763544734520687, 0.19076236117369694, 0.18057648199926024, 0.1659073467874318, 0.17698814739134816, 0.20185128325941382, 0.19422522797385455, 0.18349460281596508, 0.1901679629059989, 0.07671143992515572, 0.08076078206585713, 0.06404313234180481, 0.07993950502724534, 0.09322944192339255, 0.08363467100224409, 0.08008169887180971, 0.07060774041105211, 0.07953961149241928]}, "mutation_prompt": null}
{"id": "248154ab-67f5-470a-990e-8e12bc0405ae", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "AdaptivePSO with neighborhood communication by incorporating information from neighboring particles to enhance convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99a381bd-f0f0-43ab-b31c-172bb62f93de", "metadata": {"aucs": [0.5669333024669785, 0.8190358980870438, 0.7685996188835439, 0.1767490436869117, 0.8277430978492102, 0.8172718788113318, 0.818161899289902, 0.7380191210116366, 0.8250373152131734, 0.7069895890818059, 0.6159989290510066, 9.999999999998899e-05, 0.5932033890009727, 0.6856414823736122, 9.999999999998899e-05, 9.999999999998899e-05, 0.6018927045434739, 0.6064478425292934, 0.16707190332548383, 0.3933445498885205, 0.1446876556325265, 0.06739147697749848, 0.06711908136762323, 0.06321265056044034, 0.10858437308413671, 0.1037361778361715, 0.13223187930885882, 0.09854116570828553, 0.11438375596474959, 0.11828076056367431, 0.10562624844286206, 0.11220886359401772, 0.11043682591302006, 0.05861463422992763, 0.11533609261079747, 0.12508508022124065, 0.9889813223114022, 0.9916795454408568, 0.9918677069542909, 0.9836589411155751, 0.9836425633256783, 0.9863561771966926, 0.9914128068827311, 0.989009772554923, 0.9890013061533918, 0.059375299871787135, 0.606042331610943, 0.6610573194951348, 0.14905847145515694, 0.21792193283919137, 0.15249959561474224, 0.08930158974522762, 0.08875096739372368, 0.08781757735464324, 0.17466865769154205, 0.20862894848434765, 0.15813548569336122, 0.2730728850199975, 0.19127891350475834, 0.3347810976732488, 0.2224301604680985, 0.12652511065214456, 0.3975388837061231, 0.18452151322835875, 0.18430889143118412, 0.15139800162265216, 0.3249576194614274, 0.1863850458982974, 0.1266990230154057, 0.13567772418048585, 0.17171597910172498, 0.1717151565582299, 0.11961466395584652, 0.010126636550353618, 0.11995602548647644, 0.18009489613525986, 0.12163749152753311, 0.18820731948838687, 0.16894128445130463, 9.999999999998899e-05, 0.221216535507625, 0.0002065404812434668, 9.999999999998899e-05, 0.0671131374303654, 0.03828962198918939, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014287771183728593, 9.999999999998899e-05, 9.999999999998899e-05, 0.05185434030985692, 0.025769451585088254, 0.05487034818360603, 0.0724527926280687, 9.999999999998899e-05, 9.999999999998899e-05, 0.04940106612686579, 0.0655552907567184, 0.012181852196590959, 0.04654256875243046, 0.029913115137653268, 9.999999999998899e-05, 0.06310479030214133, 9.999999999998899e-05, 0.0781232368713296, 9.999999999998899e-05, 0.08067154633767426, 0.06632589088819352, 0.14845208057681958, 9.999999999998899e-05, 0.13516062903763837, 0.10066551884866348, 0.10147085745090767, 0.18934395341117183, 0.07829000783685292, 0.07798821209706552, 0.07848268269715186, 0.4762844614990891, 0.4665101985297332, 0.3559289404223146, 0.5185911176607684, 0.48159350032716963, 0.5214818135382593, 0.4833828215213962, 0.13972592594721156, 0.5143418835568874, 0.054875841180302865, 0.050460141096129285, 0.059028766261652654, 0.06360648877775987, 0.09234206829665637, 0.0968283287830467, 0.06792189679622951, 0.09007926625597662, 0.06762581981993787, 0.1854728578927689, 0.2191696697861184, 0.1378332806091126, 0.2171958567970781, 0.19109438195303052, 0.14148124210180557, 0.18413928859906603, 0.17535310006483706, 0.1919469634734412, 0.3203534416322804, 0.19476605981770068, 0.3190240165579763, 0.3943461203447419, 0.1751403641934599, 0.2561771249328001, 0.2630066733124302, 0.29104641517047614, 0.19689172739343863, 0.23396481635618338, 0.16335042725583537, 0.22085380350511064, 0.17277288262726365, 0.11905027544325908, 0.2243786209772497, 0.23296903547943149, 0.2730647215725831, 0.14392585706984062, 0.1873570968925211, 0.16145910876662406, 0.17362720998116188, 0.19778562219246076, 0.19952631578928592, 0.17607227476778575, 0.18286840435531937, 0.1706180005847875, 0.20439674787906348, 0.218721922271082, 0.20998525954835, 0.1705362480009519, 0.2212372038575351, 0.23299039467360516, 0.2155140990560256, 0.2475992965573527, 0.22974554303317385, 0.1975774015795635, 0.8479842268872859, 0.15577477377494886, 0.15480251890282093, 0.8078762415938927, 0.1953768693243878, 0.1679628895646913, 0.16587625738924305, 0.16979977059872653, 0.18675793772478932, 0.549142111103722, 0.11727082726504745, 0.09773327863565995, 0.2006413346615613, 0.6208002043152618, 0.20655177282188475, 0.10401641825859786, 0.18604524467696426, 0.4887933362800766, 0.17058214222464974, 0.19051054761250952, 0.17809562714857297, 0.1816131509695098, 0.19735430911024698, 0.18379387713594508, 0.18713271390322517, 0.16928351695345534, 0.17793291828977986, 0.05682369481811966, 0.07787961521502762, 0.08033368591553502, 0.04903832536360975, 0.08378864708247924, 0.09362545620575513, 0.0791361711002917, 0.04643474856481811, 0.08419882055950623]}, "mutation_prompt": null}
{"id": "506c0647-2ad2-4195-9df6-cd9d0f793100", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            # Introducing time-varying parameters\n            time_varying_cognitive_param = adaptive_cognitive_param * (1 - progress_factor)\n            time_varying_social_param = adaptive_social_param * (progress_factor)\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                time_varying_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                time_varying_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introducing a time-varying cognitive and social parameter to improve convergence speed in AdaptivePSO.", "configspace": "", "generation": 30, "fitness": 0.156765290586722, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.13.", "error": "", "parent_id": "99a381bd-f0f0-43ab-b31c-172bb62f93de", "metadata": {"aucs": [0.3207283863870868, 0.8768129665778206, 0.7001092476072142, 0.15075853865976752, 0.2338135891999259, 0.2702930060726819, 0.2882671481421165, 0.2774724370941042, 0.16608711218558858, 0.036062856663250153, 0.053516703358587936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09637189490787945, 0.13133950633483216, 0.07321736459917771, 0.10112808599037748, 0.18196687336726136, 0.13056414194284172, 0.08079457058841721, 0.12586731681112784, 0.13066315891333047, 0.10360958801968045, 0.06719974867523293, 0.05802443527299472, 0.1069646373308819, 0.08725383424742672, 0.04571735412961064, 0.07754070747934383, 0.06303035273275803, 0.0625629537278608, 0.08547227306526872, 0.06874109815961094, 0.0623472875062584, 0.0769293210392118, 0.07701754047708642, 0.06896524278751859, 0.0857483815403568, 0.07803712533147023, 0.07125403383294593, 0.18010827035734678, 0.08232592631218472, 0.06647261368866852, 0.15538015687779294, 0.08860299480459344, 0.08981083694955738, 0.056567247012166644, 0.10246191926354131, 0.06614928026861255, 0.21661450255152603, 0.21465431067373142, 0.17069406429866885, 0.1762113885609018, 0.27012423167101607, 0.21176667955548545, 0.12448145610426564, 0.21579622479009863, 0.18542814758372772, 9.999999999998899e-05, 0.1295355359680923, 0.0396282120552911, 0.09194900796250038, 0.2940417169110291, 9.999999999998899e-05, 0.1682563696023721, 0.20479184942889328, 0.07958224647436252, 0.1493280015977283, 0.13739493146983472, 0.07791123665062427, 0.08190450985797437, 0.12613677786767363, 0.1435611725664263, 0.1830126912418103, 0.13067029718310463, 0.006766703931661899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08966679659611021, 0.0022905039678946526, 9.999999999998899e-05, 0.045409742392691466, 0.014140603115815109, 0.02003225952868104, 0.19401478389815752, 0.12220316014735566, 0.1288752354072532, 0.06218287183018345, 0.05381923003387035, 0.059561124794910936, 0.1374398125230044, 0.11069876296775782, 0.12670568916873004, 9.999999999998899e-05, 0.12797183049244176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008306791938817115, 0.05581713738379335, 0.004030469373249579, 9.999999999998899e-05, 9.999999999998899e-05, 0.08188526803003371, 0.04872162458179807, 0.03733931705547788, 0.08385258028060094, 0.6325600852760778, 0.48826016500838154, 0.2861631803091135, 0.15842622834694153, 0.19262821462792312, 0.22770500689605122, 0.4364940322565719, 0.5027566601332045, 0.43946480514919717, 0.05337552011875357, 0.06959028333833905, 0.05719462522271368, 0.08296391058829178, 0.09494813685653314, 0.13288246279261706, 0.11464057037186337, 0.12589909767570462, 0.08084569650267526, 0.16935942513020585, 0.14398797688096598, 0.17966980149681477, 0.27608051362140706, 0.2772596970181024, 0.17973988628690074, 0.20941919213456173, 0.28894165206707967, 0.1396532928468749, 0.16988874327566705, 0.2275785795857267, 0.18517959429418251, 0.3171540836793988, 0.24581630608040128, 0.29512964557482624, 0.1857388448329481, 0.32838324834256505, 0.21689737988469793, 0.09889303578904673, 0.17337998874582938, 0.22731142385604397, 0.235470204820437, 0.18100941923148361, 0.22402001849791742, 0.1347070946782697, 0.22673092315633603, 0.12394477794257341, 0.2442019717575845, 0.22637265452227506, 0.20929722968390285, 0.21438195736923815, 0.20564446978916462, 0.23988063129234904, 0.2408574258098405, 0.24486990216282412, 0.21756366197155064, 0.16839079573735993, 0.1803380371890274, 0.17108450691342136, 0.18788212070123256, 0.16961619959386498, 0.20266894231373733, 0.17276633889188564, 0.19345640635533368, 0.17512421076879714, 0.18433134212839108, 0.18655667173666268, 0.1852950424417068, 0.33050028093020833, 0.19926608398524825, 0.47401234779509227, 0.5474014486196583, 0.4178231527869952, 0.450668471790591, 0.3607246711927341, 0.3529308006470945, 0.307625142625053, 0.5523941810969785, 0.16005510190737682, 0.3170998549184172, 0.2954969407491893, 0.3159633105463361, 0.19797331994076672, 0.17813460965208872, 0.18736467712990612, 0.1924527746660657, 0.18621267452989787, 0.17447257120079251, 0.17018387449943662, 0.1812362567481668, 0.18347583985663318, 0.19658899574968314, 0.06820500133862228, 0.08892999847906269, 0.07901583401096046, 0.08926816369744806, 0.08741915584195936, 0.09166584320259863, 0.08293772563013135, 0.09654064391064843, 0.08090113834294044]}, "mutation_prompt": null}
{"id": "24521881-6cdd-4e1e-a85d-82d325f66f32", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "AdaptivePSO with neighborhood communication by incorporating information from neighboring particles to enhance convergence.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99a381bd-f0f0-43ab-b31c-172bb62f93de", "metadata": {"aucs": [0.5669333024669785, 0.8190358980870438, 0.7685996188835439, 0.1767490436869117, 0.8277430978492102, 0.8172718788113318, 0.818161899289902, 0.7380191210116366, 0.8250373152131734, 0.7069895890818059, 0.6159989290510066, 9.999999999998899e-05, 0.5932033890009727, 0.6856414823736122, 9.999999999998899e-05, 9.999999999998899e-05, 0.6018927045434739, 0.6064478425292934, 0.16707190332548383, 0.3933445498885205, 0.1446876556325265, 0.06739147697749848, 0.06711908136762323, 0.06321265056044034, 0.10858437308413671, 0.1037361778361715, 0.13223187930885882, 0.09854116570828553, 0.11438375596474959, 0.11828076056367431, 0.10562624844286206, 0.11220886359401772, 0.11043682591302006, 0.05861463422992763, 0.11533609261079747, 0.12508508022124065, 0.9889813223114022, 0.9916795454408568, 0.9918677069542909, 0.9836589411155751, 0.9836425633256783, 0.9863561771966926, 0.9914128068827311, 0.989009772554923, 0.9890013061533918, 0.059375299871787135, 0.606042331610943, 0.6610573194951348, 0.14905847145515694, 0.21792193283919137, 0.15249959561474224, 0.08930158974522762, 0.08875096739372368, 0.08781757735464324, 0.17466865769154205, 0.20862894848434765, 0.15813548569336122, 0.2730728850199975, 0.19127891350475834, 0.3347810976732488, 0.2224301604680985, 0.12652511065214456, 0.3975388837061231, 0.18452151322835875, 0.18430889143118412, 0.15139800162265216, 0.3249576194614274, 0.1863850458982974, 0.1266990230154057, 0.13567772418048585, 0.17171597910172498, 0.1717151565582299, 0.11961466395584652, 0.010126636550353618, 0.11995602548647644, 0.18009489613525986, 0.12163749152753311, 0.18820731948838687, 0.16894128445130463, 9.999999999998899e-05, 0.221216535507625, 0.0002065404812434668, 9.999999999998899e-05, 0.0671131374303654, 0.03828962198918939, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014287771183728593, 9.999999999998899e-05, 9.999999999998899e-05, 0.05185434030985692, 0.025769451585088254, 0.05487034818360603, 0.0724527926280687, 9.999999999998899e-05, 9.999999999998899e-05, 0.04940106612686579, 0.0655552907567184, 0.012181852196590959, 0.04654256875243046, 0.029913115137653268, 9.999999999998899e-05, 0.06310479030214133, 9.999999999998899e-05, 0.0781232368713296, 9.999999999998899e-05, 0.08067154633767426, 0.06632589088819352, 0.14845208057681958, 9.999999999998899e-05, 0.13516062903763837, 0.10066551884866348, 0.10147085745090767, 0.18934395341117183, 0.07829000783685292, 0.07798821209706552, 0.07848268269715186, 0.4762844614990891, 0.4665101985297332, 0.3559289404223146, 0.5185911176607684, 0.48159350032716963, 0.5214818135382593, 0.4833828215213962, 0.13972592594721156, 0.5143418835568874, 0.054875841180302865, 0.050460141096129285, 0.059028766261652654, 0.06360648877775987, 0.09234206829665637, 0.0968283287830467, 0.06792189679622951, 0.09007926625597662, 0.06762581981993787, 0.1854728578927689, 0.2191696697861184, 0.1378332806091126, 0.2171958567970781, 0.19109438195303052, 0.14148124210180557, 0.18413928859906603, 0.17535310006483706, 0.1919469634734412, 0.3203534416322804, 0.19476605981770068, 0.3190240165579763, 0.3943461203447419, 0.1751403641934599, 0.2561771249328001, 0.2630066733124302, 0.29104641517047614, 0.19689172739343863, 0.23396481635618338, 0.16335042725583537, 0.22085380350511064, 0.17277288262726365, 0.11905027544325908, 0.2243786209772497, 0.23296903547943149, 0.2730647215725831, 0.14392585706984062, 0.1873570968925211, 0.16145910876662406, 0.17362720998116188, 0.19778562219246076, 0.19952631578928592, 0.17607227476778575, 0.18286840435531937, 0.1706180005847875, 0.20439674787906348, 0.218721922271082, 0.20998525954835, 0.1705362480009519, 0.2212372038575351, 0.23299039467360516, 0.2155140990560256, 0.2475992965573527, 0.22974554303317385, 0.1975774015795635, 0.8479842268872859, 0.15577477377494886, 0.15480251890282093, 0.8078762415938927, 0.1953768693243878, 0.1679628895646913, 0.16587625738924305, 0.16979977059872653, 0.18675793772478932, 0.549142111103722, 0.11727082726504745, 0.09773327863565995, 0.2006413346615613, 0.6208002043152618, 0.20655177282188475, 0.10401641825859786, 0.18604524467696426, 0.4887933362800766, 0.17058214222464974, 0.19051054761250952, 0.17809562714857297, 0.1816131509695098, 0.19735430911024698, 0.18379387713594508, 0.18713271390322517, 0.16928351695345534, 0.17793291828977986, 0.05682369481811966, 0.07787961521502762, 0.08033368591553502, 0.04903832536360975, 0.08378864708247924, 0.09362545620575513, 0.0791361711002917, 0.04643474856481811, 0.08419882055950623]}, "mutation_prompt": null}
{"id": "d46093a4-232b-451a-bda0-066749338133", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced inertia weight decay to improve convergence by dynamically reducing it over time, enhancing exploration-exploitation balance.", "configspace": "", "generation": 32, "fitness": 0.24167850633738586, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "99a381bd-f0f0-43ab-b31c-172bb62f93de", "metadata": {"aucs": [0.8284348048445463, 0.7929151877695573, 0.8363199329995332, 0.1794287236642894, 0.835289348269011, 0.18989684983906197, 0.6230829815789627, 0.8540315118222503, 0.8547337613678182, 0.19189446036196334, 0.07702796452910465, 9.999999999998899e-05, 0.044207642856521345, 0.03771743777749348, 0.6689515851448853, 0.646785886450477, 0.5775527017768123, 9.999999999998899e-05, 0.12581656230234017, 0.1455965029612587, 0.1426956282279187, 0.13672132262830294, 0.0686884491262223, 0.11371108961851373, 0.1325625039718087, 0.1272885014587789, 0.12500269956789012, 0.15132605553450595, 0.11129952159238565, 0.08925182376318641, 0.13511778682211972, 0.1527473008975685, 0.06768382460552325, 0.0730979671660702, 0.1392323725369985, 0.13362054050115435, 0.9889722798783389, 0.9916746465100031, 0.9918523204240292, 0.983656414242896, 0.9835604525281315, 0.9861285736077928, 0.9914111187023315, 0.9890057915508186, 0.9889981837564976, 0.059316764654000376, 0.6612588166398825, 0.14319710827060972, 0.14611707597469337, 0.6154468123603754, 0.15176864740862783, 0.6675216462586561, 0.08819605732076574, 0.4606110113434476, 0.17496119194492998, 0.19448861371234916, 0.21156769286840615, 0.8688115121475286, 0.19835989166957746, 0.20072844859144412, 0.19904126600987015, 0.12605038560783066, 0.22259049984000967, 0.18808140894066183, 0.1767035771622344, 0.19429486959263864, 0.23196235684534017, 0.19581556234874586, 0.17885614888905688, 0.15989957232852625, 0.19111235305388485, 0.23583560291959627, 0.19088053888577017, 0.010146740029705725, 0.1253828352086297, 0.13090963061469252, 0.22712261714608062, 0.19596840169350493, 0.3275863455596829, 0.11226221440521933, 0.161983327333866, 0.03960956416585992, 9.999999999998899e-05, 0.06913159830369187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04516959857083258, 0.04096962261392578, 0.06419849974387304, 0.023679726907146814, 9.999999999998899e-05, 0.014893818501822365, 0.06027286250705022, 0.07670709691514366, 0.023745636473889498, 0.04736329602561651, 0.024007346410538366, 9.999999999998899e-05, 0.07366081741165675, 9.999999999998899e-05, 0.08172223119093136, 0.09567729057855046, 0.067648954853479, 0.06760961139343125, 9.999999999998899e-05, 0.03910713934709953, 0.09354125574469452, 0.14619256122554802, 0.29223703142530444, 0.1457585832297027, 0.08189647976006276, 0.07655131947827198, 0.07070174000100993, 0.536906654605221, 0.5239795571945778, 0.48748075063757446, 0.5164364003892822, 0.20737319162835144, 0.2091440459122117, 0.5167097420793376, 0.1397185371821844, 0.5106461399443832, 0.05381619496444323, 0.04919489663552923, 0.057161579292259956, 0.0654293137115366, 0.10111456244738071, 0.09562778204907918, 0.06637765675413576, 0.10985955379712431, 0.07838785035362417, 0.19867597532225567, 0.19483061022907588, 0.14483013347654738, 0.22027400114710194, 0.2495283583150899, 0.14051709169924476, 0.22604730350453317, 0.1872473926019168, 0.20087015072253, 0.40750180771007416, 0.2893604064471349, 0.22773603351387084, 0.5149045767188417, 0.1870549777041831, 0.2794505568204505, 0.25070536726285764, 0.4369184721627136, 0.19715098142979826, 0.3018319774764945, 0.18513818415736694, 0.14890801157078293, 0.14669031998373538, 0.1734397168821028, 0.23981774925093735, 0.1264218241319428, 0.22955664429845446, 0.15522355162583246, 0.1992370292453708, 0.14000191255338124, 0.19835037707119552, 0.21762266874208913, 0.20301628335923882, 0.18440154333536452, 0.19568049782160324, 0.17815676201083064, 0.21751230932651988, 0.2016921736901669, 0.22331129877891698, 0.1943217536927051, 0.23859679320342497, 0.21264069372840066, 0.1857828277696293, 0.22269224527570364, 0.6016184878810913, 0.21253300753970839, 0.2646249761820837, 0.18518474967847254, 0.1548168359766532, 0.8122285443310352, 0.19738014893352662, 0.1683449701755737, 0.1302112886954776, 0.16983190973246542, 0.18730953385966975, 0.5033729575254609, 0.16117358864026265, 0.11168818474324693, 0.4496925773953755, 0.5579714974378586, 0.2040266966596621, 0.18245295595497368, 0.1862954569163232, 0.8143703511297975, 0.1954549103013642, 0.17854407103759606, 0.18529044247157878, 0.17775553154316803, 0.18487830450492615, 0.17325627557301637, 0.19584675807429341, 0.17703134125869147, 0.20498804972328, 0.0741369135283163, 0.09065019001798846, 0.07929020653882668, 0.0821253551007134, 0.08424792356430466, 0.07732309128337111, 0.08855028720458591, 0.0320861798832357, 0.07377681863307484]}, "mutation_prompt": null}
{"id": "d7e755a2-733e-4548-9199-6eca55755aa9", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            sinusoidal_component = 0.05 * np.sin(np.linspace(0, np.pi, self.dim))  # Sinusoidal component for diversity\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions) +\n                sinusoidal_component  # Added sinusoidal component\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced particle diversity by introducing a sinusoidal velocity component to improve exploration and convergence.", "configspace": "", "generation": 33, "fitness": 0.20179481938307245, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "d46093a4-232b-451a-bda0-066749338133", "metadata": {"aucs": [0.45946451432703295, 0.4192199501519541, 0.48118092828116255, 0.3638854871207162, 0.482644185339119, 0.19047562861856515, 0.4815639223585555, 0.5313192710812655, 0.4981517428263731, 0.16994549099281975, 0.04525235901854907, 9.999999999998899e-05, 0.0846997434308705, 9.999999999998899e-05, 0.07060593968399576, 9.999999999998899e-05, 0.04679222971883823, 0.17055729023485, 0.10005244856885387, 0.11407673541202679, 0.1099111301064648, 0.06822916315458294, 0.06775345338196892, 0.09747356013906305, 0.141051342328679, 0.12102459236513297, 0.11595974780752438, 0.0822437109357248, 0.10801691398208713, 0.11547916809879644, 0.0997785798145635, 0.10732085179311457, 0.09255190954996073, 0.12063406864230453, 0.11702502227932332, 0.11851002487604889, 0.989007091618349, 0.9916891382751571, 0.9934571993433694, 0.9836538630982367, 0.9835563181766337, 0.9861675883972033, 0.991416148998038, 0.9889926597812079, 0.9887127492359389, 0.21015656701361352, 0.29790172822495964, 0.20975488708403034, 0.34954311218821976, 0.3427418553822734, 0.3064234445101218, 0.08931051992673744, 0.2776557524124731, 0.1263830529660217, 0.17546291156575355, 0.216318313849708, 0.32048658239764793, 0.2691918576632327, 0.18590122194180636, 0.19199877331325232, 0.23160038818450768, 0.12756950504001174, 0.11492094695852462, 0.10163075238596797, 0.19295177329653868, 0.20308365529521077, 0.09119117703962254, 0.19816845098761515, 0.1648227347934571, 0.1616825287245821, 0.22033750976114908, 0.19792616495190918, 0.17936147752052423, 0.019161890096093703, 0.15021699882958817, 0.16021995578908355, 0.005561957215453384, 0.1292825407500433, 0.13260680128294755, 0.054038340085104886, 0.1612712479196804, 9.999999999998899e-05, 9.999999999998899e-05, 0.049871847971096894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024684133298908506, 0.02424698461530883, 0.03113129580044738, 0.0762464828186108, 0.00027958683573248155, 0.01154362060042513, 0.037629100155547324, 0.04797476783474108, 0.021271513877183845, 9.999999999998899e-05, 0.005376070306108649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004692674262474217, 0.019784713685084165, 0.018645471969257366, 9.999999999998899e-05, 0.07502781888771026, 0.03543680216751688, 0.05241080127413811, 0.04893080513376302, 0.11037321777758458, 0.09342375398411473, 0.09048440424048876, 0.09619507911841885, 0.07177740788205467, 0.40949586819258366, 0.42616077991472756, 0.416786616827196, 0.4212058453333519, 0.2068145823842391, 0.2093079168663584, 0.44574925796264186, 0.44329941263176753, 0.42955114090639723, 0.062186298185492705, 0.05098458901436531, 0.08786055743083765, 0.07054199211121615, 0.08805137342962865, 0.08552872040473192, 0.10809138827328102, 0.07257616976356751, 0.05459578722252989, 0.18235649035240498, 0.15428255212766873, 0.1562850936769088, 0.2357900824132163, 0.18951670771095352, 0.17901369161013458, 0.29716208420651724, 0.1405474623650882, 0.19919632995570336, 0.23599358515768187, 0.2692649117116178, 0.23413315691551484, 0.2213104925731777, 0.19089508124180865, 0.27133708254808475, 0.173652545238148, 0.26670912640739963, 0.32837646161584266, 0.23631013250851352, 0.20208612162330442, 0.214072425498389, 0.20394217406430815, 0.16664806511767216, 0.15295897148877535, 0.11526543802486744, 0.19689156693990195, 0.2304512847950767, 0.20996775756359065, 0.1448862919310483, 0.19719953324855333, 0.21572051418291704, 0.16172328132723013, 0.19169247574856108, 0.2159549150522595, 0.221717459707367, 0.1933166902192881, 0.31275962390142054, 0.17799405817061487, 0.19777450646932515, 0.20651387530425014, 0.18468888288039031, 0.29964973774088466, 0.19703434106539308, 0.18716468982675694, 0.21163556872568712, 0.5726751849943034, 0.15790926631253754, 0.15429528848122065, 0.6002965116876502, 0.19820121964720294, 0.1676128737352317, 0.1278532432430569, 0.16972569050936892, 0.20452143418323177, 0.43230984746527223, 0.14571749656681443, 0.1715556465125916, 0.20717627068699163, 0.3971314624475244, 0.2078047771354231, 0.10410254789699824, 0.19676065130962528, 0.5804063605520662, 0.18564801075781556, 0.20336940229972422, 0.178691990552732, 0.1821444273150763, 0.18537650761168467, 0.19962637074902867, 0.18697663354982585, 0.1737806254396177, 0.1804511708137485, 0.0835611368789152, 0.07043244020705408, 0.07926717843678177, 0.10035880235542083, 0.07780407320316285, 0.07561787776237339, 0.10554527553910065, 0.06569568816027349, 0.09126638874586845]}, "mutation_prompt": null}
{"id": "e3ad47b6-4024-4845-89aa-874e547c9f86", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            \n            # Modified adaptive social parameter with sigmoid-based control\n            adaptive_social_param = self.social_param + 0.5 * (1 / (1 + np.exp(-diversity))) \n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced social-parameter adaptation using sigmoid-based diversity control for improved convergence speed.", "configspace": "", "generation": 34, "fitness": 0.1956796095343231, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "d46093a4-232b-451a-bda0-066749338133", "metadata": {"aucs": [0.789783025458429, 0.6289994295054424, 0.7331246918974015, 0.15731193864203707, 0.1678725874807142, 0.16000759657412378, 0.17457788650037886, 0.14366090928168507, 0.7917572732005291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.5734582357027623, 0.4313546086264092, 0.0374507986741095, 0.6060868600116545, 0.07029818510669117, 0.0871823756099408, 0.053519181516856085, 0.1084695066045912, 0.06705929861114768, 0.504207448632799, 0.02461508967561654, 0.1070624313773405, 0.052946090298846005, 0.08965805672610028, 0.12182419508553244, 0.10525834621329921, 0.04913232887492125, 0.12651559052156713, 0.11258140765829316, 0.09591001878968786, 0.07900949669808921, 0.10863034842894104, 0.9913332454880578, 0.9934134372826289, 0.9941776908041088, 0.9888115293582138, 0.9837861778228578, 0.9866589399661335, 0.9916125942836262, 0.9892971357334462, 0.9886907535478189, 0.3445245164538705, 0.05874016493293621, 0.11355362866076069, 0.14504473067415113, 0.14487991285177504, 0.14007382270962476, 0.08384129459077083, 0.0820510941733763, 0.08768887352194599, 0.17168961530317595, 0.29111943126704765, 0.29827304845262537, 0.1858971539565013, 0.11558308981269128, 0.1866442607092269, 0.23992778774373635, 0.12703304854851794, 0.16454849743686484, 0.1449530553035262, 0.15870590336128065, 0.17584631971962494, 0.00801873072641246, 0.18270423278068837, 0.1583188146257819, 0.19418664519676043, 0.12824307456037698, 0.14823931313883643, 0.10075814602026989, 0.010127126844278744, 0.16070387618262816, 0.1566260742221406, 0.09726108612303686, 0.2037671843152541, 0.13658969762156192, 9.999999999998899e-05, 0.033372708144229546, 0.01613032845307738, 9.999999999998899e-05, 0.04995535760636871, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014382480172316914, 0.0393383655950833, 9.999999999998899e-05, 9.999999999998899e-05, 0.018043737587381425, 0.02673753050587091, 0.020608103548354073, 0.11626528487761612, 0.003798298560153124, 0.0028056718855188345, 0.04831723441099878, 0.07772434594419186, 0.020989042455127338, 0.02798177699247628, 9.999999999998899e-05, 9.999999999998899e-05, 0.0641997055996002, 9.999999999998899e-05, 0.08244098022365909, 9.999999999998899e-05, 9.999999999998899e-05, 0.06284091596356689, 9.999999999998899e-05, 9.999999999998899e-05, 0.009043545438031098, 0.005498280767373354, 0.00508192429596932, 0.03981867938784922, 0.08139442579508938, 0.04667336603545025, 0.07844389510760197, 0.43217210364054315, 0.243940506413578, 0.3699810229473325, 0.5138749776000957, 0.48968870794179753, 0.2075034861114612, 0.4983567734781995, 0.11464236710718156, 0.45823974635667497, 0.06643171941750348, 0.08662382189805229, 0.06347576016220413, 0.1064752071830446, 0.11418549054259708, 0.07499451524317813, 0.11275674054533591, 0.06952833918356649, 0.09710842813490983, 0.10445743438987243, 0.16905675634011008, 0.15141928077028055, 0.21428121772168363, 0.227438546844012, 0.1462655070513612, 0.19577635511791913, 0.16584171303568018, 0.20159460389417538, 0.2476852617831956, 0.22669461425008652, 0.36791609624883226, 0.16599563814116425, 0.313265639260633, 0.2184026918108649, 0.30051933531191044, 0.34800752195753637, 0.19427301305332623, 0.1386455350084449, 0.1604656519828055, 0.16257847137874848, 0.15910657655381544, 0.22330492771048838, 0.2357708530799535, 0.2667025929681912, 0.15193889323380794, 0.18691526317902085, 0.19523288717244147, 0.18226551676787806, 0.20590326959006833, 0.1645338391592197, 0.1840543123740962, 0.22808760870113476, 0.1910226147048263, 0.17152196118447105, 0.19049863798785804, 0.18001915887551911, 0.1985099388577075, 0.18819576058463017, 0.1982151209504287, 0.19385548492466842, 0.14583727239393807, 0.21003913379242878, 0.2246195227834079, 0.17764860158326823, 0.25606319123248067, 0.16390446593814578, 0.11309298243565391, 0.7870376068450602, 0.19605942587276348, 0.18915082099892055, 0.11394933049385692, 0.1699062989839384, 0.18691201613335273, 0.45887283248714383, 0.1173111726363435, 0.16076117359712294, 0.20163299190973671, 0.20925639178568456, 0.21082500130861248, 0.10140930024022343, 0.19901053888083964, 0.6231258792738725, 0.18574129173412357, 0.17548972451862588, 0.19181176918283238, 0.18552581208885155, 0.1533485170293557, 0.18520324255939924, 0.20046597917192888, 0.1775945192820092, 0.18866324316558136, 0.08097636008460707, 0.06750259982951923, 0.06610895797397676, 0.08024961620492999, 0.06647819218271767, 0.07169520508583249, 0.04431021939855195, 0.02880660192518658, 0.07017029055608637]}, "mutation_prompt": null}
{"id": "ffceefad-f471-46b9-bbb2-4efb691f8e06", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            stochastic_adjustment = np.random.normal(0, 0.1, (self.num_particles, self.dim))\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n                + stochastic_adjustment\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced convergence by integrating local search nudges using a per-iteration stochastic adjustment to improve exploration.", "configspace": "", "generation": 35, "fitness": 0.1917244401604288, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "d46093a4-232b-451a-bda0-066749338133", "metadata": {"aucs": [0.40984341029045057, 0.40853674311649224, 0.39428062840247535, 0.40338292064085257, 0.24160564639437265, 0.36436228879325927, 0.3822267344838045, 0.405645586768662, 0.36842234408039043, 9.999999999998899e-05, 0.0014083812384724226, 0.04015155466934961, 9.999999999998899e-05, 0.006184676338369721, 9.999999999998899e-05, 9.999999999998899e-05, 0.01258038685679097, 0.007955857123722154, 0.11346806599484116, 0.10642614573161935, 0.10273719390299851, 0.10655842558304107, 0.06952286196680757, 0.06286038922656167, 0.11144037115822159, 0.053981886759508546, 0.09499695435541067, 0.08757296998778241, 0.08074317642778728, 0.10023870785812738, 0.09471644376898725, 0.07371395856225027, 0.08887717856429955, 0.08654084014876229, 0.09031476804107719, 0.10150158790268193, 0.989152192072377, 0.9917392152893645, 0.9887542751547246, 0.9859713778752307, 0.9890838954897782, 0.9837705500202544, 0.9865048391123309, 0.9891839698146452, 0.9911633683831985, 0.21962537996594733, 0.19593709114438274, 0.20588003087630968, 0.23802037398100362, 0.2528725024987206, 0.21165746931261076, 0.23987849589345522, 0.2580164416700802, 0.18893711855071904, 0.2198844565293201, 0.2619510587663664, 0.3277676146093633, 0.2455680537611451, 0.19324590716463785, 0.19194739755447277, 0.28193162633670976, 0.12176540810536429, 0.2871042961012197, 0.17525321874481692, 0.15818417848610444, 0.14833319069834583, 0.08554694763421344, 0.09339541912032268, 0.10012012435411399, 0.04691009776887656, 0.10698137213297854, 0.1421210125138639, 0.14813132777697724, 0.05386683384859514, 0.10767963076128251, 0.12699086416989225, 0.14540734713301406, 0.1318788273464535, 0.13011337333171014, 0.11229278542181476, 0.14090403937591223, 9.999999999998899e-05, 0.01600685267769042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06048736649003461, 0.09755361497815651, 0.03275827023977218, 0.04325881904026918, 9.999999999998899e-05, 0.011999550128673042, 0.11307291455603541, 0.06579120199252719, 0.02427658587354764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008059032186515158, 0.021971101302122986, 0.09045098972362353, 0.003234309055630158, 0.03318625022849386, 0.03574746869517398, 0.07326175108245248, 0.008096890327291884, 0.06278441892359765, 0.35500531847461403, 0.35830268907206875, 0.3490279581240747, 0.394887388297559, 0.3654148977060273, 0.3706444890124925, 0.3681401483098351, 0.35977856504632244, 0.371249864764872, 0.06317499014193617, 0.06791059223385654, 0.0631229582397298, 0.09157532166909566, 0.0896731078092935, 0.06817255312470794, 0.09047791262367533, 0.09489015938716783, 0.04027395093895614, 0.22110417521456271, 0.2048710918556761, 0.1379937753800623, 0.22053974114730968, 0.1533672462351262, 0.1587403738403671, 0.17222001733189696, 0.19396173333665878, 0.17753519808982565, 0.2831234601981003, 0.22600925531188443, 0.28053050748618813, 0.24184212051395848, 0.19366050425404446, 0.24938502870800405, 0.23699856021520638, 0.2698774380849104, 0.2695535686276227, 0.12036145683591837, 0.17862684339596235, 0.15301148013394994, 0.2189003332747772, 0.1812169004794839, 0.19848781943319205, 0.21142257086809846, 0.22046442356754525, 0.14207881855821636, 0.20602007024166757, 0.1348340357796164, 0.16855639234833253, 0.17250237779181898, 0.22692210469190033, 0.1912727098866399, 0.21277381119742922, 0.18493325441880093, 0.1974863777710456, 0.19377831196820017, 0.20617002237683824, 0.1916946866050825, 0.22209967733181257, 0.2091218682680721, 0.18115438736368006, 0.1805857003809782, 0.2077974886190198, 0.1752064316127958, 0.5269161006028223, 0.1759620213865143, 0.15345878856977857, 0.4910066960498244, 0.19822919022513963, 0.19752076356016635, 0.12039829305833405, 0.16873123548223468, 0.19304919358741535, 0.5235534008735316, 0.18219346394065117, 0.20024540012800085, 0.46694851517411606, 0.22400891600992123, 0.45564887311339797, 0.10431223518057209, 0.20910538460195838, 0.4338480847324899, 0.18626488273445607, 0.19319256099337, 0.16767747995202553, 0.17332901999884365, 0.18255713319854017, 0.1876684176039013, 0.169124138485229, 0.18401291113947849, 0.1772767820768626, 0.09753622426618969, 0.09152140428569366, 0.08715118074240813, 0.07632307839685915, 0.07521116292615204, 0.0796715290398049, 0.08107223609055758, 0.08854276959877494, 0.08027112154518545]}, "mutation_prompt": null}
{"id": "15d1f011-54e2-4cef-bfd2-4cafb4564876", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced inertia weight decay to improve convergence by dynamically reducing it over time, enhancing exploration-exploitation balance.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d46093a4-232b-451a-bda0-066749338133", "metadata": {"aucs": [0.8284348048445463, 0.7929151877695573, 0.8363199329995332, 0.1794287236642894, 0.835289348269011, 0.18989684983906197, 0.6230829815789627, 0.8540315118222503, 0.8547337613678182, 0.19189446036196334, 0.07702796452910465, 9.999999999998899e-05, 0.044207642856521345, 0.03771743777749348, 0.6689515851448853, 0.646785886450477, 0.5775527017768123, 9.999999999998899e-05, 0.12581656230234017, 0.1455965029612587, 0.1426956282279187, 0.13672132262830294, 0.0686884491262223, 0.11371108961851373, 0.1325625039718087, 0.1272885014587789, 0.12500269956789012, 0.15132605553450595, 0.11129952159238565, 0.08925182376318641, 0.13511778682211972, 0.1527473008975685, 0.06768382460552325, 0.0730979671660702, 0.1392323725369985, 0.13362054050115435, 0.9889722798783389, 0.9916746465100031, 0.9918523204240292, 0.983656414242896, 0.9835604525281315, 0.9861285736077928, 0.9914111187023315, 0.9890057915508186, 0.9889981837564976, 0.059316764654000376, 0.6612588166398825, 0.14319710827060972, 0.14611707597469337, 0.6154468123603754, 0.15176864740862783, 0.6675216462586561, 0.08819605732076574, 0.4606110113434476, 0.17496119194492998, 0.19448861371234916, 0.21156769286840615, 0.8688115121475286, 0.19835989166957746, 0.20072844859144412, 0.19904126600987015, 0.12605038560783066, 0.22259049984000967, 0.18808140894066183, 0.1767035771622344, 0.19429486959263864, 0.23196235684534017, 0.19581556234874586, 0.17885614888905688, 0.15989957232852625, 0.19111235305388485, 0.23583560291959627, 0.19088053888577017, 0.010146740029705725, 0.1253828352086297, 0.13090963061469252, 0.22712261714608062, 0.19596840169350493, 0.3275863455596829, 0.11226221440521933, 0.161983327333866, 0.03960956416585992, 9.999999999998899e-05, 0.06913159830369187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04516959857083258, 0.04096962261392578, 0.06419849974387304, 0.023679726907146814, 9.999999999998899e-05, 0.014893818501822365, 0.06027286250705022, 0.07670709691514366, 0.023745636473889498, 0.04736329602561651, 0.024007346410538366, 9.999999999998899e-05, 0.07366081741165675, 9.999999999998899e-05, 0.08172223119093136, 0.09567729057855046, 0.067648954853479, 0.06760961139343125, 9.999999999998899e-05, 0.03910713934709953, 0.09354125574469452, 0.14619256122554802, 0.29223703142530444, 0.1457585832297027, 0.08189647976006276, 0.07655131947827198, 0.07070174000100993, 0.536906654605221, 0.5239795571945778, 0.48748075063757446, 0.5164364003892822, 0.20737319162835144, 0.2091440459122117, 0.5167097420793376, 0.1397185371821844, 0.5106461399443832, 0.05381619496444323, 0.04919489663552923, 0.057161579292259956, 0.0654293137115366, 0.10111456244738071, 0.09562778204907918, 0.06637765675413576, 0.10985955379712431, 0.07838785035362417, 0.19867597532225567, 0.19483061022907588, 0.14483013347654738, 0.22027400114710194, 0.2495283583150899, 0.14051709169924476, 0.22604730350453317, 0.1872473926019168, 0.20087015072253, 0.40750180771007416, 0.2893604064471349, 0.22773603351387084, 0.5149045767188417, 0.1870549777041831, 0.2794505568204505, 0.25070536726285764, 0.4369184721627136, 0.19715098142979826, 0.3018319774764945, 0.18513818415736694, 0.14890801157078293, 0.14669031998373538, 0.1734397168821028, 0.23981774925093735, 0.1264218241319428, 0.22955664429845446, 0.15522355162583246, 0.1992370292453708, 0.14000191255338124, 0.19835037707119552, 0.21762266874208913, 0.20301628335923882, 0.18440154333536452, 0.19568049782160324, 0.17815676201083064, 0.21751230932651988, 0.2016921736901669, 0.22331129877891698, 0.1943217536927051, 0.23859679320342497, 0.21264069372840066, 0.1857828277696293, 0.22269224527570364, 0.6016184878810913, 0.21253300753970839, 0.2646249761820837, 0.18518474967847254, 0.1548168359766532, 0.8122285443310352, 0.19738014893352662, 0.1683449701755737, 0.1302112886954776, 0.16983190973246542, 0.18730953385966975, 0.5033729575254609, 0.16117358864026265, 0.11168818474324693, 0.4496925773953755, 0.5579714974378586, 0.2040266966596621, 0.18245295595497368, 0.1862954569163232, 0.8143703511297975, 0.1954549103013642, 0.17854407103759606, 0.18529044247157878, 0.17775553154316803, 0.18487830450492615, 0.17325627557301637, 0.19584675807429341, 0.17703134125869147, 0.20498804972328, 0.0741369135283163, 0.09065019001798846, 0.07929020653882668, 0.0821253551007134, 0.08424792356430466, 0.07732309128337111, 0.08855028720458591, 0.0320861798832357, 0.07377681863307484]}, "mutation_prompt": null}
{"id": "e14fb153-4648-4287-9752-c54268e14912", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced convergence by introducing velocity clamping to prevent excessive exploration while maintaining the balance with exploration.", "configspace": "", "generation": 37, "fitness": 0.3200483922405912, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "d46093a4-232b-451a-bda0-066749338133", "metadata": {"aucs": [0.39012517922858214, 0.8462211484485884, 0.8749221446466942, 0.8508893131120037, 0.8437978801964003, 0.8505567443382422, 0.8033479452028187, 0.8739183609251413, 0.835600924118303, 0.7517618400619812, 0.7437764486560837, 0.7293119880349148, 0.7529686002887674, 0.7577617096428644, 0.6475220023224079, 0.7176820551067737, 0.6077104505279943, 0.7621355468488505, 0.11652050707681283, 0.11341509959864848, 0.18013641002133862, 0.10575582378648107, 0.15061689444436088, 0.14015355734494095, 0.09596330045483359, 0.13034821034396515, 0.10093471757756145, 0.13842421826800433, 0.07665372477477117, 0.0788349488615595, 0.10814488103824882, 0.11466685168592672, 0.0804720086570786, 0.09268356033301461, 0.0886653395260768, 0.06191510020825375, 0.9277622858215837, 0.9348575886372601, 0.933101699779608, 0.9284322990338731, 0.9193043338369957, 0.9193503679276052, 0.9388468875887689, 0.9005143457625161, 0.9043627164761733, 0.7588893305664708, 0.7192664142529257, 0.701359116774743, 0.6664210443984722, 0.6629456378463372, 0.7416739157878023, 0.6990447026046059, 0.7155584835928126, 0.6893607890277984, 0.38000352834691353, 0.14063689466723572, 0.13556100127861137, 0.280886689672858, 0.21794582614549052, 0.21278564572137681, 0.16238973983263716, 0.15276845055803967, 0.1518769394338848, 0.2708430185579548, 0.22757891103462802, 0.197759634595557, 0.36380009237275956, 0.20519911624951837, 0.251546903436071, 0.21321258384034236, 0.12875390602551584, 0.13022717952892948, 0.21673653182761232, 0.22471545994295994, 0.135516861316205, 0.20175736512282494, 0.19884888655067057, 0.4241773352519045, 0.2504366643337921, 0.19449353904484468, 0.2220092943994193, 0.06869170742520547, 0.054892149055741135, 0.00344751932480869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011587283858111697, 0.08657646389981932, 0.16792085115487843, 0.06501911685923023, 0.09089061909351492, 0.07295721536417199, 0.027601814341304043, 0.01864181620553973, 0.11180370980882004, 0.06538737889502444, 0.05341349770496895, 0.09483447196228334, 0.1493504106667689, 0.14398177343342866, 0.06395105198004003, 0.2516635143057583, 0.19742239037127085, 0.3163469044629641, 0.11046172402670928, 9.999999999998899e-05, 0.13540050051198327, 0.1568421143391755, 0.24727944967588977, 0.16306722802606688, 0.15350445165873738, 0.04145272441308878, 0.08568686811677728, 0.0826843093879519, 0.0846689167478285, 0.5477694206304047, 0.5406687515345916, 0.5018020827382419, 0.5840236128833266, 0.5372607971868215, 0.553797685355965, 0.5179481703097129, 0.5413926435013858, 0.5559638950943311, 0.09387493027784855, 0.07750229280164089, 0.056913208356779266, 0.11951969668419693, 0.13817687032054982, 0.14044806783916974, 0.110648726194164, 0.12883446334935322, 0.09254176047627605, 0.19287447075834174, 0.15551041691495615, 0.2020140591815337, 0.3863461334293209, 0.41996458381679835, 0.16315658513386389, 0.22083900655130173, 0.26237218177155197, 0.269914955397048, 0.2816490281916325, 0.24078115754973928, 0.2497381518988968, 0.41830696240641874, 0.2769668173576567, 0.5515530231455682, 0.2506732470480081, 0.4407868458445514, 0.2564102733522724, 0.24318335029850424, 0.26269991674617765, 0.23073940321911846, 0.37901968657235185, 0.18526115512394514, 0.3293013761719551, 0.247963177712466, 0.23733123056241878, 0.2095678697257305, 0.24277998246090815, 0.20691807828028042, 0.20940843863099878, 0.24051870050131507, 0.21594507220562043, 0.20562693129006704, 0.248109722660664, 0.26249747006803215, 0.20877124287792825, 0.17559121436493985, 0.21075855507151187, 0.18673973739781258, 0.19367852791528617, 0.20269697134384645, 0.2235030008096871, 0.1946540452527864, 0.20017565986830888, 0.18200641653115723, 0.17559030607459258, 0.12225039570819118, 0.1535622278290848, 0.9101974589492559, 0.20072576089700034, 0.8613920771513703, 0.8828802177386682, 0.922956129358112, 0.9258306430787615, 0.6557531268863748, 0.15674517032104518, 0.6749576696198136, 0.20981048060645524, 0.15458655658329623, 0.4483634764442578, 0.7436902375250721, 0.828550815738042, 0.8128004785717877, 0.18044740341462184, 0.19237313570510173, 0.18477345689475966, 0.18171931242206663, 0.19209684617953138, 0.1906523271958961, 0.19002891973285574, 0.1776890711623721, 0.20669507443285517, 0.09575462942709001, 0.09088669045314457, 0.0882398988633255, 0.11273056968135753, 0.08990159447355017, 0.073828630290241, 0.10642098643288023, 0.1010742385818012, 0.07433945900296224]}, "mutation_prompt": null}
{"id": "79337493-6b5f-44c9-9a70-be75efff0ced", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced convergence by introducing velocity clamping to prevent excessive exploration while maintaining the balance with exploration.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14fb153-4648-4287-9752-c54268e14912", "metadata": {"aucs": [0.39012517922858214, 0.8462211484485884, 0.8749221446466942, 0.8508893131120037, 0.8437978801964003, 0.8505567443382422, 0.8033479452028187, 0.8739183609251413, 0.835600924118303, 0.7517618400619812, 0.7437764486560837, 0.7293119880349148, 0.7529686002887674, 0.7577617096428644, 0.6475220023224079, 0.7176820551067737, 0.6077104505279943, 0.7621355468488505, 0.11652050707681283, 0.11341509959864848, 0.18013641002133862, 0.10575582378648107, 0.15061689444436088, 0.14015355734494095, 0.09596330045483359, 0.13034821034396515, 0.10093471757756145, 0.13842421826800433, 0.07665372477477117, 0.0788349488615595, 0.10814488103824882, 0.11466685168592672, 0.0804720086570786, 0.09268356033301461, 0.0886653395260768, 0.06191510020825375, 0.9277622858215837, 0.9348575886372601, 0.933101699779608, 0.9284322990338731, 0.9193043338369957, 0.9193503679276052, 0.9388468875887689, 0.9005143457625161, 0.9043627164761733, 0.7588893305664708, 0.7192664142529257, 0.701359116774743, 0.6664210443984722, 0.6629456378463372, 0.7416739157878023, 0.6990447026046059, 0.7155584835928126, 0.6893607890277984, 0.38000352834691353, 0.14063689466723572, 0.13556100127861137, 0.280886689672858, 0.21794582614549052, 0.21278564572137681, 0.16238973983263716, 0.15276845055803967, 0.1518769394338848, 0.2708430185579548, 0.22757891103462802, 0.197759634595557, 0.36380009237275956, 0.20519911624951837, 0.251546903436071, 0.21321258384034236, 0.12875390602551584, 0.13022717952892948, 0.21673653182761232, 0.22471545994295994, 0.135516861316205, 0.20175736512282494, 0.19884888655067057, 0.4241773352519045, 0.2504366643337921, 0.19449353904484468, 0.2220092943994193, 0.06869170742520547, 0.054892149055741135, 0.00344751932480869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011587283858111697, 0.08657646389981932, 0.16792085115487843, 0.06501911685923023, 0.09089061909351492, 0.07295721536417199, 0.027601814341304043, 0.01864181620553973, 0.11180370980882004, 0.06538737889502444, 0.05341349770496895, 0.09483447196228334, 0.1493504106667689, 0.14398177343342866, 0.06395105198004003, 0.2516635143057583, 0.19742239037127085, 0.3163469044629641, 0.11046172402670928, 9.999999999998899e-05, 0.13540050051198327, 0.1568421143391755, 0.24727944967588977, 0.16306722802606688, 0.15350445165873738, 0.04145272441308878, 0.08568686811677728, 0.0826843093879519, 0.0846689167478285, 0.5477694206304047, 0.5406687515345916, 0.5018020827382419, 0.5840236128833266, 0.5372607971868215, 0.553797685355965, 0.5179481703097129, 0.5413926435013858, 0.5559638950943311, 0.09387493027784855, 0.07750229280164089, 0.056913208356779266, 0.11951969668419693, 0.13817687032054982, 0.14044806783916974, 0.110648726194164, 0.12883446334935322, 0.09254176047627605, 0.19287447075834174, 0.15551041691495615, 0.2020140591815337, 0.3863461334293209, 0.41996458381679835, 0.16315658513386389, 0.22083900655130173, 0.26237218177155197, 0.269914955397048, 0.2816490281916325, 0.24078115754973928, 0.2497381518988968, 0.41830696240641874, 0.2769668173576567, 0.5515530231455682, 0.2506732470480081, 0.4407868458445514, 0.2564102733522724, 0.24318335029850424, 0.26269991674617765, 0.23073940321911846, 0.37901968657235185, 0.18526115512394514, 0.3293013761719551, 0.247963177712466, 0.23733123056241878, 0.2095678697257305, 0.24277998246090815, 0.20691807828028042, 0.20940843863099878, 0.24051870050131507, 0.21594507220562043, 0.20562693129006704, 0.248109722660664, 0.26249747006803215, 0.20877124287792825, 0.17559121436493985, 0.21075855507151187, 0.18673973739781258, 0.19367852791528617, 0.20269697134384645, 0.2235030008096871, 0.1946540452527864, 0.20017565986830888, 0.18200641653115723, 0.17559030607459258, 0.12225039570819118, 0.1535622278290848, 0.9101974589492559, 0.20072576089700034, 0.8613920771513703, 0.8828802177386682, 0.922956129358112, 0.9258306430787615, 0.6557531268863748, 0.15674517032104518, 0.6749576696198136, 0.20981048060645524, 0.15458655658329623, 0.4483634764442578, 0.7436902375250721, 0.828550815738042, 0.8128004785717877, 0.18044740341462184, 0.19237313570510173, 0.18477345689475966, 0.18171931242206663, 0.19209684617953138, 0.1906523271958961, 0.19002891973285574, 0.1776890711623721, 0.20669507443285517, 0.09575462942709001, 0.09088669045314457, 0.0882398988633255, 0.11273056968135753, 0.08990159447355017, 0.073828630290241, 0.10642098643288023, 0.1010742385818012, 0.07433945900296224]}, "mutation_prompt": null}
{"id": "36925ee1-5889-4ab9-a79c-9f4f77e23e24", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced convergence by introducing velocity clamping to prevent excessive exploration while maintaining the balance with exploration.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14fb153-4648-4287-9752-c54268e14912", "metadata": {"aucs": [0.39012517922858214, 0.8462211484485884, 0.8749221446466942, 0.8508893131120037, 0.8437978801964003, 0.8505567443382422, 0.8033479452028187, 0.8739183609251413, 0.835600924118303, 0.7517618400619812, 0.7437764486560837, 0.7293119880349148, 0.7529686002887674, 0.7577617096428644, 0.6475220023224079, 0.7176820551067737, 0.6077104505279943, 0.7621355468488505, 0.11652050707681283, 0.11341509959864848, 0.18013641002133862, 0.10575582378648107, 0.15061689444436088, 0.14015355734494095, 0.09596330045483359, 0.13034821034396515, 0.10093471757756145, 0.13842421826800433, 0.07665372477477117, 0.0788349488615595, 0.10814488103824882, 0.11466685168592672, 0.0804720086570786, 0.09268356033301461, 0.0886653395260768, 0.06191510020825375, 0.9277622858215837, 0.9348575886372601, 0.933101699779608, 0.9284322990338731, 0.9193043338369957, 0.9193503679276052, 0.9388468875887689, 0.9005143457625161, 0.9043627164761733, 0.7588893305664708, 0.7192664142529257, 0.701359116774743, 0.6664210443984722, 0.6629456378463372, 0.7416739157878023, 0.6990447026046059, 0.7155584835928126, 0.6893607890277984, 0.38000352834691353, 0.14063689466723572, 0.13556100127861137, 0.280886689672858, 0.21794582614549052, 0.21278564572137681, 0.16238973983263716, 0.15276845055803967, 0.1518769394338848, 0.2708430185579548, 0.22757891103462802, 0.197759634595557, 0.36380009237275956, 0.20519911624951837, 0.251546903436071, 0.21321258384034236, 0.12875390602551584, 0.13022717952892948, 0.21673653182761232, 0.22471545994295994, 0.135516861316205, 0.20175736512282494, 0.19884888655067057, 0.4241773352519045, 0.2504366643337921, 0.19449353904484468, 0.2220092943994193, 0.06869170742520547, 0.054892149055741135, 0.00344751932480869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011587283858111697, 0.08657646389981932, 0.16792085115487843, 0.06501911685923023, 0.09089061909351492, 0.07295721536417199, 0.027601814341304043, 0.01864181620553973, 0.11180370980882004, 0.06538737889502444, 0.05341349770496895, 0.09483447196228334, 0.1493504106667689, 0.14398177343342866, 0.06395105198004003, 0.2516635143057583, 0.19742239037127085, 0.3163469044629641, 0.11046172402670928, 9.999999999998899e-05, 0.13540050051198327, 0.1568421143391755, 0.24727944967588977, 0.16306722802606688, 0.15350445165873738, 0.04145272441308878, 0.08568686811677728, 0.0826843093879519, 0.0846689167478285, 0.5477694206304047, 0.5406687515345916, 0.5018020827382419, 0.5840236128833266, 0.5372607971868215, 0.553797685355965, 0.5179481703097129, 0.5413926435013858, 0.5559638950943311, 0.09387493027784855, 0.07750229280164089, 0.056913208356779266, 0.11951969668419693, 0.13817687032054982, 0.14044806783916974, 0.110648726194164, 0.12883446334935322, 0.09254176047627605, 0.19287447075834174, 0.15551041691495615, 0.2020140591815337, 0.3863461334293209, 0.41996458381679835, 0.16315658513386389, 0.22083900655130173, 0.26237218177155197, 0.269914955397048, 0.2816490281916325, 0.24078115754973928, 0.2497381518988968, 0.41830696240641874, 0.2769668173576567, 0.5515530231455682, 0.2506732470480081, 0.4407868458445514, 0.2564102733522724, 0.24318335029850424, 0.26269991674617765, 0.23073940321911846, 0.37901968657235185, 0.18526115512394514, 0.3293013761719551, 0.247963177712466, 0.23733123056241878, 0.2095678697257305, 0.24277998246090815, 0.20691807828028042, 0.20940843863099878, 0.24051870050131507, 0.21594507220562043, 0.20562693129006704, 0.248109722660664, 0.26249747006803215, 0.20877124287792825, 0.17559121436493985, 0.21075855507151187, 0.18673973739781258, 0.19367852791528617, 0.20269697134384645, 0.2235030008096871, 0.1946540452527864, 0.20017565986830888, 0.18200641653115723, 0.17559030607459258, 0.12225039570819118, 0.1535622278290848, 0.9101974589492559, 0.20072576089700034, 0.8613920771513703, 0.8828802177386682, 0.922956129358112, 0.9258306430787615, 0.6557531268863748, 0.15674517032104518, 0.6749576696198136, 0.20981048060645524, 0.15458655658329623, 0.4483634764442578, 0.7436902375250721, 0.828550815738042, 0.8128004785717877, 0.18044740341462184, 0.19237313570510173, 0.18477345689475966, 0.18171931242206663, 0.19209684617953138, 0.1906523271958961, 0.19002891973285574, 0.1776890711623721, 0.20669507443285517, 0.09575462942709001, 0.09088669045314457, 0.0882398988633255, 0.11273056968135753, 0.08990159447355017, 0.073828630290241, 0.10642098643288023, 0.1010742385818012, 0.07433945900296224]}, "mutation_prompt": null}
{"id": "83378737-5977-4355-83b2-35cd3a78edd9", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced convergence by introducing velocity clamping to prevent excessive exploration while maintaining the balance with exploration.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14fb153-4648-4287-9752-c54268e14912", "metadata": {"aucs": [0.39012517922858214, 0.8462211484485884, 0.8749221446466942, 0.8508893131120037, 0.8437978801964003, 0.8505567443382422, 0.8033479452028187, 0.8739183609251413, 0.835600924118303, 0.7517618400619812, 0.7437764486560837, 0.7293119880349148, 0.7529686002887674, 0.7577617096428644, 0.6475220023224079, 0.7176820551067737, 0.6077104505279943, 0.7621355468488505, 0.11652050707681283, 0.11341509959864848, 0.18013641002133862, 0.10575582378648107, 0.15061689444436088, 0.14015355734494095, 0.09596330045483359, 0.13034821034396515, 0.10093471757756145, 0.13842421826800433, 0.07665372477477117, 0.0788349488615595, 0.10814488103824882, 0.11466685168592672, 0.0804720086570786, 0.09268356033301461, 0.0886653395260768, 0.06191510020825375, 0.9277622858215837, 0.9348575886372601, 0.933101699779608, 0.9284322990338731, 0.9193043338369957, 0.9193503679276052, 0.9388468875887689, 0.9005143457625161, 0.9043627164761733, 0.7588893305664708, 0.7192664142529257, 0.701359116774743, 0.6664210443984722, 0.6629456378463372, 0.7416739157878023, 0.6990447026046059, 0.7155584835928126, 0.6893607890277984, 0.38000352834691353, 0.14063689466723572, 0.13556100127861137, 0.280886689672858, 0.21794582614549052, 0.21278564572137681, 0.16238973983263716, 0.15276845055803967, 0.1518769394338848, 0.2708430185579548, 0.22757891103462802, 0.197759634595557, 0.36380009237275956, 0.20519911624951837, 0.251546903436071, 0.21321258384034236, 0.12875390602551584, 0.13022717952892948, 0.21673653182761232, 0.22471545994295994, 0.135516861316205, 0.20175736512282494, 0.19884888655067057, 0.4241773352519045, 0.2504366643337921, 0.19449353904484468, 0.2220092943994193, 0.06869170742520547, 0.054892149055741135, 0.00344751932480869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011587283858111697, 0.08657646389981932, 0.16792085115487843, 0.06501911685923023, 0.09089061909351492, 0.07295721536417199, 0.027601814341304043, 0.01864181620553973, 0.11180370980882004, 0.06538737889502444, 0.05341349770496895, 0.09483447196228334, 0.1493504106667689, 0.14398177343342866, 0.06395105198004003, 0.2516635143057583, 0.19742239037127085, 0.3163469044629641, 0.11046172402670928, 9.999999999998899e-05, 0.13540050051198327, 0.1568421143391755, 0.24727944967588977, 0.16306722802606688, 0.15350445165873738, 0.04145272441308878, 0.08568686811677728, 0.0826843093879519, 0.0846689167478285, 0.5477694206304047, 0.5406687515345916, 0.5018020827382419, 0.5840236128833266, 0.5372607971868215, 0.553797685355965, 0.5179481703097129, 0.5413926435013858, 0.5559638950943311, 0.09387493027784855, 0.07750229280164089, 0.056913208356779266, 0.11951969668419693, 0.13817687032054982, 0.14044806783916974, 0.110648726194164, 0.12883446334935322, 0.09254176047627605, 0.19287447075834174, 0.15551041691495615, 0.2020140591815337, 0.3863461334293209, 0.41996458381679835, 0.16315658513386389, 0.22083900655130173, 0.26237218177155197, 0.269914955397048, 0.2816490281916325, 0.24078115754973928, 0.2497381518988968, 0.41830696240641874, 0.2769668173576567, 0.5515530231455682, 0.2506732470480081, 0.4407868458445514, 0.2564102733522724, 0.24318335029850424, 0.26269991674617765, 0.23073940321911846, 0.37901968657235185, 0.18526115512394514, 0.3293013761719551, 0.247963177712466, 0.23733123056241878, 0.2095678697257305, 0.24277998246090815, 0.20691807828028042, 0.20940843863099878, 0.24051870050131507, 0.21594507220562043, 0.20562693129006704, 0.248109722660664, 0.26249747006803215, 0.20877124287792825, 0.17559121436493985, 0.21075855507151187, 0.18673973739781258, 0.19367852791528617, 0.20269697134384645, 0.2235030008096871, 0.1946540452527864, 0.20017565986830888, 0.18200641653115723, 0.17559030607459258, 0.12225039570819118, 0.1535622278290848, 0.9101974589492559, 0.20072576089700034, 0.8613920771513703, 0.8828802177386682, 0.922956129358112, 0.9258306430787615, 0.6557531268863748, 0.15674517032104518, 0.6749576696198136, 0.20981048060645524, 0.15458655658329623, 0.4483634764442578, 0.7436902375250721, 0.828550815738042, 0.8128004785717877, 0.18044740341462184, 0.19237313570510173, 0.18477345689475966, 0.18171931242206663, 0.19209684617953138, 0.1906523271958961, 0.19002891973285574, 0.1776890711623721, 0.20669507443285517, 0.09575462942709001, 0.09088669045314457, 0.0882398988633255, 0.11273056968135753, 0.08990159447355017, 0.073828630290241, 0.10642098643288023, 0.1010742385818012, 0.07433945900296224]}, "mutation_prompt": null}
{"id": "dfd5e35d-e11e-4fa9-850b-d9d404ab2bd8", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced convergence by introducing velocity clamping to prevent excessive exploration while maintaining the balance with exploration.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14fb153-4648-4287-9752-c54268e14912", "metadata": {"aucs": [0.39012517922858214, 0.8462211484485884, 0.8749221446466942, 0.8508893131120037, 0.8437978801964003, 0.8505567443382422, 0.8033479452028187, 0.8739183609251413, 0.835600924118303, 0.7517618400619812, 0.7437764486560837, 0.7293119880349148, 0.7529686002887674, 0.7577617096428644, 0.6475220023224079, 0.7176820551067737, 0.6077104505279943, 0.7621355468488505, 0.11652050707681283, 0.11341509959864848, 0.18013641002133862, 0.10575582378648107, 0.15061689444436088, 0.14015355734494095, 0.09596330045483359, 0.13034821034396515, 0.10093471757756145, 0.13842421826800433, 0.07665372477477117, 0.0788349488615595, 0.10814488103824882, 0.11466685168592672, 0.0804720086570786, 0.09268356033301461, 0.0886653395260768, 0.06191510020825375, 0.9277622858215837, 0.9348575886372601, 0.933101699779608, 0.9284322990338731, 0.9193043338369957, 0.9193503679276052, 0.9388468875887689, 0.9005143457625161, 0.9043627164761733, 0.7588893305664708, 0.7192664142529257, 0.701359116774743, 0.6664210443984722, 0.6629456378463372, 0.7416739157878023, 0.6990447026046059, 0.7155584835928126, 0.6893607890277984, 0.38000352834691353, 0.14063689466723572, 0.13556100127861137, 0.280886689672858, 0.21794582614549052, 0.21278564572137681, 0.16238973983263716, 0.15276845055803967, 0.1518769394338848, 0.2708430185579548, 0.22757891103462802, 0.197759634595557, 0.36380009237275956, 0.20519911624951837, 0.251546903436071, 0.21321258384034236, 0.12875390602551584, 0.13022717952892948, 0.21673653182761232, 0.22471545994295994, 0.135516861316205, 0.20175736512282494, 0.19884888655067057, 0.4241773352519045, 0.2504366643337921, 0.19449353904484468, 0.2220092943994193, 0.06869170742520547, 0.054892149055741135, 0.00344751932480869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011587283858111697, 0.08657646389981932, 0.16792085115487843, 0.06501911685923023, 0.09089061909351492, 0.07295721536417199, 0.027601814341304043, 0.01864181620553973, 0.11180370980882004, 0.06538737889502444, 0.05341349770496895, 0.09483447196228334, 0.1493504106667689, 0.14398177343342866, 0.06395105198004003, 0.2516635143057583, 0.19742239037127085, 0.3163469044629641, 0.11046172402670928, 9.999999999998899e-05, 0.13540050051198327, 0.1568421143391755, 0.24727944967588977, 0.16306722802606688, 0.15350445165873738, 0.04145272441308878, 0.08568686811677728, 0.0826843093879519, 0.0846689167478285, 0.5477694206304047, 0.5406687515345916, 0.5018020827382419, 0.5840236128833266, 0.5372607971868215, 0.553797685355965, 0.5179481703097129, 0.5413926435013858, 0.5559638950943311, 0.09387493027784855, 0.07750229280164089, 0.056913208356779266, 0.11951969668419693, 0.13817687032054982, 0.14044806783916974, 0.110648726194164, 0.12883446334935322, 0.09254176047627605, 0.19287447075834174, 0.15551041691495615, 0.2020140591815337, 0.3863461334293209, 0.41996458381679835, 0.16315658513386389, 0.22083900655130173, 0.26237218177155197, 0.269914955397048, 0.2816490281916325, 0.24078115754973928, 0.2497381518988968, 0.41830696240641874, 0.2769668173576567, 0.5515530231455682, 0.2506732470480081, 0.4407868458445514, 0.2564102733522724, 0.24318335029850424, 0.26269991674617765, 0.23073940321911846, 0.37901968657235185, 0.18526115512394514, 0.3293013761719551, 0.247963177712466, 0.23733123056241878, 0.2095678697257305, 0.24277998246090815, 0.20691807828028042, 0.20940843863099878, 0.24051870050131507, 0.21594507220562043, 0.20562693129006704, 0.248109722660664, 0.26249747006803215, 0.20877124287792825, 0.17559121436493985, 0.21075855507151187, 0.18673973739781258, 0.19367852791528617, 0.20269697134384645, 0.2235030008096871, 0.1946540452527864, 0.20017565986830888, 0.18200641653115723, 0.17559030607459258, 0.12225039570819118, 0.1535622278290848, 0.9101974589492559, 0.20072576089700034, 0.8613920771513703, 0.8828802177386682, 0.922956129358112, 0.9258306430787615, 0.6557531268863748, 0.15674517032104518, 0.6749576696198136, 0.20981048060645524, 0.15458655658329623, 0.4483634764442578, 0.7436902375250721, 0.828550815738042, 0.8128004785717877, 0.18044740341462184, 0.19237313570510173, 0.18477345689475966, 0.18171931242206663, 0.19209684617953138, 0.1906523271958961, 0.19002891973285574, 0.1776890711623721, 0.20669507443285517, 0.09575462942709001, 0.09088669045314457, 0.0882398988633255, 0.11273056968135753, 0.08990159447355017, 0.073828630290241, 0.10642098643288023, 0.1010742385818012, 0.07433945900296224]}, "mutation_prompt": null}
{"id": "f61d6f3c-d821-4439-b2a1-f774562be769", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced convergence by introducing velocity clamping to prevent excessive exploration while maintaining the balance with exploration.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e14fb153-4648-4287-9752-c54268e14912", "metadata": {"aucs": [0.39012517922858214, 0.8462211484485884, 0.8749221446466942, 0.8508893131120037, 0.8437978801964003, 0.8505567443382422, 0.8033479452028187, 0.8739183609251413, 0.835600924118303, 0.7517618400619812, 0.7437764486560837, 0.7293119880349148, 0.7529686002887674, 0.7577617096428644, 0.6475220023224079, 0.7176820551067737, 0.6077104505279943, 0.7621355468488505, 0.11652050707681283, 0.11341509959864848, 0.18013641002133862, 0.10575582378648107, 0.15061689444436088, 0.14015355734494095, 0.09596330045483359, 0.13034821034396515, 0.10093471757756145, 0.13842421826800433, 0.07665372477477117, 0.0788349488615595, 0.10814488103824882, 0.11466685168592672, 0.0804720086570786, 0.09268356033301461, 0.0886653395260768, 0.06191510020825375, 0.9277622858215837, 0.9348575886372601, 0.933101699779608, 0.9284322990338731, 0.9193043338369957, 0.9193503679276052, 0.9388468875887689, 0.9005143457625161, 0.9043627164761733, 0.7588893305664708, 0.7192664142529257, 0.701359116774743, 0.6664210443984722, 0.6629456378463372, 0.7416739157878023, 0.6990447026046059, 0.7155584835928126, 0.6893607890277984, 0.38000352834691353, 0.14063689466723572, 0.13556100127861137, 0.280886689672858, 0.21794582614549052, 0.21278564572137681, 0.16238973983263716, 0.15276845055803967, 0.1518769394338848, 0.2708430185579548, 0.22757891103462802, 0.197759634595557, 0.36380009237275956, 0.20519911624951837, 0.251546903436071, 0.21321258384034236, 0.12875390602551584, 0.13022717952892948, 0.21673653182761232, 0.22471545994295994, 0.135516861316205, 0.20175736512282494, 0.19884888655067057, 0.4241773352519045, 0.2504366643337921, 0.19449353904484468, 0.2220092943994193, 0.06869170742520547, 0.054892149055741135, 0.00344751932480869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011587283858111697, 0.08657646389981932, 0.16792085115487843, 0.06501911685923023, 0.09089061909351492, 0.07295721536417199, 0.027601814341304043, 0.01864181620553973, 0.11180370980882004, 0.06538737889502444, 0.05341349770496895, 0.09483447196228334, 0.1493504106667689, 0.14398177343342866, 0.06395105198004003, 0.2516635143057583, 0.19742239037127085, 0.3163469044629641, 0.11046172402670928, 9.999999999998899e-05, 0.13540050051198327, 0.1568421143391755, 0.24727944967588977, 0.16306722802606688, 0.15350445165873738, 0.04145272441308878, 0.08568686811677728, 0.0826843093879519, 0.0846689167478285, 0.5477694206304047, 0.5406687515345916, 0.5018020827382419, 0.5840236128833266, 0.5372607971868215, 0.553797685355965, 0.5179481703097129, 0.5413926435013858, 0.5559638950943311, 0.09387493027784855, 0.07750229280164089, 0.056913208356779266, 0.11951969668419693, 0.13817687032054982, 0.14044806783916974, 0.110648726194164, 0.12883446334935322, 0.09254176047627605, 0.19287447075834174, 0.15551041691495615, 0.2020140591815337, 0.3863461334293209, 0.41996458381679835, 0.16315658513386389, 0.22083900655130173, 0.26237218177155197, 0.269914955397048, 0.2816490281916325, 0.24078115754973928, 0.2497381518988968, 0.41830696240641874, 0.2769668173576567, 0.5515530231455682, 0.2506732470480081, 0.4407868458445514, 0.2564102733522724, 0.24318335029850424, 0.26269991674617765, 0.23073940321911846, 0.37901968657235185, 0.18526115512394514, 0.3293013761719551, 0.247963177712466, 0.23733123056241878, 0.2095678697257305, 0.24277998246090815, 0.20691807828028042, 0.20940843863099878, 0.24051870050131507, 0.21594507220562043, 0.20562693129006704, 0.248109722660664, 0.26249747006803215, 0.20877124287792825, 0.17559121436493985, 0.21075855507151187, 0.18673973739781258, 0.19367852791528617, 0.20269697134384645, 0.2235030008096871, 0.1946540452527864, 0.20017565986830888, 0.18200641653115723, 0.17559030607459258, 0.12225039570819118, 0.1535622278290848, 0.9101974589492559, 0.20072576089700034, 0.8613920771513703, 0.8828802177386682, 0.922956129358112, 0.9258306430787615, 0.6557531268863748, 0.15674517032104518, 0.6749576696198136, 0.20981048060645524, 0.15458655658329623, 0.4483634764442578, 0.7436902375250721, 0.828550815738042, 0.8128004785717877, 0.18044740341462184, 0.19237313570510173, 0.18477345689475966, 0.18171931242206663, 0.19209684617953138, 0.1906523271958961, 0.19002891973285574, 0.1776890711623721, 0.20669507443285517, 0.09575462942709001, 0.09088669045314457, 0.0882398988633255, 0.11273056968135753, 0.08990159447355017, 0.073828630290241, 0.10642098643288023, 0.1010742385818012, 0.07433945900296224]}, "mutation_prompt": null}
{"id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 43, "fitness": 0.32586551420379384, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "e14fb153-4648-4287-9752-c54268e14912", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "45bed70d-86b6-4ce1-8ff5-de023d75022c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            dynamic_neighborhood_influence = 0.15 * (1 + progress_factor * 0.1)\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                dynamic_neighborhood_influence * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced local exploitation by dynamically adjusting neighborhood influence based on iteration progress, aiming for improved convergence precision.", "configspace": "", "generation": 44, "fitness": 0.32557414865948, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.8352259460464528, 0.8804879396616432, 0.863621057050622, 0.8657693151950949, 0.8320855997200871, 0.8793917015136099, 0.5413383508941223, 0.7082606444841282, 0.796191234547923, 0.6412837468227821, 0.7109725070585244, 0.749439517817897, 0.7441650357422425, 0.5928002136102123, 0.6966652670992011, 0.7245360338885085, 0.7219907459069979, 0.7017015356978045, 0.12995734756937982, 0.14233309019334361, 0.13822595759655631, 0.11666224697685557, 0.5942808478940639, 0.14367999675430476, 0.11855509187106072, 0.11081251367653844, 0.11433084031807794, 0.1139542855063932, 0.07891468066020368, 0.08878820978755053, 0.10888204258380352, 0.0899359996593968, 0.10357713137734681, 0.11193540252085366, 0.05400839254460643, 0.11122861509576865, 0.9305376194794315, 0.932682654623045, 0.9326006167943711, 0.9236411439460943, 0.9244445951351365, 0.9197625746139994, 0.935974887575924, 0.9040350213432086, 0.9200101552540547, 0.7291357804997366, 0.5653992166669459, 0.7171768205989897, 0.7107064823790068, 0.7206554460372561, 0.7133721780697082, 0.6789438111147367, 0.6772301259280977, 0.7152609770934748, 0.7685124528158385, 0.17091119961983292, 0.17061210644228286, 0.2148011335140121, 0.2115092380550515, 0.21070751664260456, 0.1308736789187407, 0.5902270192084866, 0.1519506240887818, 0.20937036914285412, 0.257248640025161, 0.1321358991970737, 0.2482872469513454, 0.1581890733431821, 0.26289272896466664, 0.20187161051318203, 0.12853584056206657, 0.18582828013226727, 0.28488042822924, 0.21593617369858753, 0.1354894245223519, 0.22176115507195682, 0.13448241850173726, 0.38110625319818714, 0.2453205563617351, 0.19455658331215475, 0.2306612224827651, 0.06769675991415747, 0.03499402959275755, 0.014348392099072571, 0.012620765453597582, 9.999999999998899e-05, 9.999999999998899e-05, 0.004835035818214206, 0.0473500610345029, 0.15116358377911732, 0.15049474563108312, 0.05872645102839835, 0.08282279752230737, 0.09160322630155349, 0.006283449889494475, 0.049701909295513214, 0.15423270713533344, 0.07312187900134137, 0.08270725279122892, 0.160135154989141, 0.14909616668097914, 0.36522543537840535, 0.10559564644622221, 0.18305972922056468, 0.18677017490761139, 0.24202279308319707, 0.206221589188903, 0.06948130408673037, 0.13803162413629366, 0.12481880172879323, 0.1892069925667541, 0.1505532643283516, 0.12173060046481166, 0.11485195404304105, 0.08183597486801808, 0.08175451665548483, 0.08422551442171566, 0.512555763453999, 0.5404242148625824, 0.5826065068513657, 0.5352985407725463, 0.5287407998277782, 0.5569439161855037, 0.5477784076131418, 0.5278241846637735, 0.5761355693562535, 0.07002323860055859, 0.06966577769838245, 0.042965712683222024, 0.1150805175099997, 0.14352216949139351, 0.10967430804414069, 0.11679218805776748, 0.12087483635916307, 0.07226350872918597, 0.2550289440133633, 0.21629987559982944, 0.20816898041237553, 0.35822177751318596, 0.38423236443899955, 0.3373332999482078, 0.17616969478165723, 0.2993809987537679, 0.1675850892837374, 0.3911241803262967, 0.328485693743513, 0.23097724455768365, 0.4125743233623521, 0.25225007854004833, 0.49014676747220487, 0.2556150327784651, 0.42418527816689044, 0.5386813101274535, 0.20526927987525767, 0.2908997347704151, 0.2368428358824577, 0.2579786902089497, 0.18160021661106085, 0.3092146358708636, 0.19739376616646032, 0.2654825987915579, 0.2226369017829365, 0.19362853997207596, 0.19132101191652306, 0.21245599777890634, 0.22222075449354872, 0.2290334589772286, 0.19721135703690484, 0.28185088021115035, 0.2173038545210415, 0.2160839110537447, 0.16901083222192936, 0.18882886487151818, 0.19156287607386346, 0.19237303199313305, 0.21277446145449086, 0.19841738399509257, 0.18324997465896264, 0.2295097646235853, 0.18209089753096896, 0.17512785234622774, 0.1242384607654009, 0.17623629110413674, 0.909917198368568, 0.2010500875589063, 0.9274926340789476, 0.7236818437328205, 0.9179436683598498, 0.9040674707341584, 0.6908966391175207, 0.1569687890653637, 0.5976587156527934, 0.21062771137714686, 0.15568419543676282, 0.45859885689521174, 0.7458579282955249, 0.7438500195237927, 0.8183460749675251, 0.19811159310984894, 0.2027363506672173, 0.19012468796177007, 0.18156960414791, 0.18570049076449258, 0.18502990764419625, 0.17553880470323058, 0.20624024199885294, 0.19380782257138496, 0.1024120415852694, 0.07781678396947356, 0.08121294343821794, 0.07439644833399162, 0.09309412087663915, 0.08958381261099335, 0.12814967011870593, 0.07265604161521166, 0.08197434952817018]}, "mutation_prompt": null}
{"id": "ee6f206b-014d-40c0-abc4-f35a82e3831e", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "420f37d5-4f6a-472a-90b2-20bca5f5ea98", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "945480e2-cd22-45db-a5f9-408c4ec1eda2", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.95\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.3 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.4 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 5)[:5]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.1 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO", "description": "Enhanced dynamic parameter adaptation and neighborhood influence to improve convergence speed and solution quality.", "configspace": "", "generation": 47, "fitness": 0.3170519211819403, "feedback": "The algorithm EnhancedAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.8883581300409309, 0.8020606685924551, 0.912225992201752, 0.8712632039926913, 0.8123725142022293, 0.7027546082554408, 0.8154692309801941, 0.9060485884748049, 0.8838506400179582, 0.12863296171526306, 0.7565404788066418, 0.7779211815496984, 0.007453625606513192, 0.6971488445303666, 0.7404850504468414, 0.7392367338259187, 0.7607195412588867, 0.7773978887627995, 0.13270289404405522, 0.1458835540381973, 0.15980499832864226, 0.10110433569496635, 0.1577167868246997, 0.1616721973390033, 0.11476608390379184, 0.1860564954893572, 0.08566902647768215, 0.11406824926489478, 0.09077385023202988, 0.08751681966855251, 0.09554126125057205, 0.09734251077862632, 0.047658914140993325, 0.08787900766743473, 0.10331932338713246, 0.10996486676132722, 0.9277934586739607, 0.9122692500697911, 0.9260085601406888, 0.9112408804077936, 0.9138539797470171, 0.914673559447716, 0.9314572713589269, 0.8829415024923627, 0.901442372089503, 0.452001242853322, 0.7260623092562504, 0.757010219115658, 0.5535203675738039, 0.7489852043914482, 0.3785323362746257, 0.6056063291985765, 0.7611333257760518, 0.793973968229809, 0.3426375760550795, 0.11848393650001854, 0.14075572411908066, 0.2811883328913939, 0.27875528679768435, 0.19325210418012284, 0.17807484424682896, 0.15248757843874394, 0.17831196722492837, 0.2598507065244494, 0.25525890431011333, 0.18926071577423753, 0.2450214691447269, 0.1857470097750512, 0.25820106546482835, 0.1916609305068463, 0.2771993829678463, 0.23480772276459083, 0.2419376800691012, 0.13193531114515133, 0.1350529251700826, 0.14318681746813056, 0.24586774511141585, 0.25714394690368036, 0.29572713456810384, 0.12392551685301478, 0.16966039816179257, 0.17783357000166267, 0.015301651925232362, 0.0721493464288776, 0.05773380899726421, 9.999999999998899e-05, 0.04407334399151641, 0.011228093053846533, 9.999999999998899e-05, 0.07361343858669223, 0.16425200793582284, 0.06961454220260055, 0.09330705984310095, 0.05032185984740023, 0.013877634040917242, 0.05087119519608074, 0.10101570377657865, 0.07837171861453518, 0.061507402512104625, 0.11978934902918115, 0.2343908028726417, 0.22969919427226493, 0.09788861603813892, 0.24892973931212903, 0.12127953313947348, 0.24536361031327936, 0.08032431571921295, 0.06823072061770563, 0.15498355870249725, 0.08701803899170302, 0.18818286737833012, 0.12997767353800305, 0.11793701128641443, 0.09526266013168294, 0.08365315247407035, 0.12072311167501959, 0.08459171688584433, 0.515322551066787, 0.5104371984490634, 0.5614274508420901, 0.5456412742777645, 0.5424105403057595, 0.44977146703264237, 0.624990077852664, 0.4629963037109236, 0.39195959278034653, 0.053343979861456, 0.06220933999609024, 0.06863090457239251, 0.11052598402132952, 0.08385274573306234, 0.11685327530157141, 0.09227140890976449, 0.15599533848632507, 0.09085156944120731, 0.37475632730223685, 0.37001290325786984, 0.40210796940407045, 0.4054767051099568, 0.3478560095580735, 0.2566693468596598, 0.2169325165503857, 0.26793214673409504, 0.2519417565278441, 0.1559338543458091, 0.3630200807901576, 0.22876099303385355, 0.4696868446988196, 0.2905874295264378, 0.4214901252329556, 0.24314967884963967, 0.6049767270909829, 0.2180988483090759, 0.22970182631576164, 0.26866262474498226, 0.21025442838686748, 0.39289873955693, 0.2624043814808842, 0.18928922271153692, 0.20538150078087714, 0.2775651008012552, 0.1882083044679861, 0.2172207304154875, 0.21049593797397992, 0.2352217601205856, 0.21241875613665273, 0.22565490596915716, 0.20197341151481318, 0.23862141546662152, 0.27514391380434267, 0.22969042940648132, 0.1899828510690893, 0.19270704501509306, 0.17788113829092222, 0.1928707161292541, 0.2040909024146933, 0.1799453332639338, 0.20234716733183744, 0.24507679722388898, 0.16651687725744102, 0.1753136116260624, 0.12481484899440909, 0.17487915564381196, 0.9420998105338924, 0.200797518106951, 0.9227200273680394, 0.9162673388902857, 0.9286152182258272, 0.9337225598620451, 0.7737661283876537, 0.15706466863599722, 0.5276412409629228, 0.20956632165883016, 0.15515867658185922, 0.8574767007445279, 0.6362048882618342, 0.8132745209262185, 0.6959971638783136, 0.23686371244222204, 0.215556283401095, 0.1807127181256004, 0.2002773222931361, 0.1874272619927071, 0.1948850958308207, 0.19728177902288624, 0.1758380275893089, 0.18678999394693263, 0.08478315870776154, 0.09801558225937135, 0.08057897277662318, 0.09943517057841833, 0.09143216408037969, 0.09502074734225718, 0.10629053102142183, 0.07381869850652567, 0.0749418940981208]}, "mutation_prompt": null}
{"id": "d1e6b31c-4d54-4c14-87ed-f9aed7f1e53e", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_size = int(max(3, self.num_particles * diversity / (self.upper_bound - self.lower_bound)))\n            neighborhood_best_positions = self.positions[np.argpartition(scores, neighborhood_size)[:neighborhood_size]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a dynamic neighborhood size based on diversity to balance exploration and exploitation for enhanced convergence.", "configspace": "", "generation": 48, "fitness": 0.3239804397072668, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.8747260271050509, 0.8601489259392666, 0.8147097048015142, 0.8594806743640222, 0.8658882314168935, 0.8525253716765693, 0.8654540433709488, 0.7741353483702916, 0.8791340066070392, 0.7590106143753441, 0.7416840202908604, 0.7543609145996768, 0.7055235067720549, 0.7522682762599059, 0.7369491546749193, 0.712164430968558, 0.7046586786917047, 0.37173465643734993, 0.09942865381569954, 0.11725731327030986, 0.1145497293860217, 0.09967320583689965, 0.15518912196296353, 0.12378948953599178, 0.09230846104306367, 0.15583807420533835, 0.13543133694495169, 0.12794273859014615, 0.08945204847031041, 0.08928806237885822, 0.10061258163761155, 0.09536427094885935, 0.07630884271460059, 0.10865048758689266, 0.10521915452758823, 0.11095179801469479, 0.9330162481963316, 0.9206750085792593, 0.9340787192559877, 0.9205261935145016, 0.9182439593256839, 0.8986401628667443, 0.9337383887434101, 0.905792233264341, 0.9124896848094821, 0.6675836637607553, 0.6294113801337626, 0.7049814198885225, 0.7258479863449543, 0.5964438497091121, 0.6545723754721517, 0.6991144580556684, 0.5568822477518625, 0.7344216038263998, 0.2175036864062626, 0.14043326161044134, 0.12864261434870894, 0.2802826009181798, 0.8248218705093022, 0.19341386127321492, 0.17829652242851457, 0.15264476670156146, 0.31647134067443017, 0.2735078582070466, 0.2965436049153093, 0.35099642138968135, 0.2320662948377712, 0.1640116647424753, 0.1720973956639289, 0.2006548977898186, 0.2388055166440346, 0.13241548341268572, 0.23779725068984914, 0.2342049160338988, 0.13201474679705028, 0.1544933326672996, 0.13466793662853938, 0.29508243100695186, 0.2617007144187218, 0.2266814548884517, 0.24385234756258967, 0.17808769936737212, 0.07290547368633382, 0.011733187624070385, 0.04822546423958174, 0.0013235851195316783, 0.016437208779003232, 0.014174145547894645, 0.0017715164120257754, 0.011647046085468848, 0.26545878810985735, 0.08318118310861644, 0.08659391076475853, 0.0574359287330346, 0.0170924946145411, 0.03338294512015294, 0.10301670834637733, 0.09718932760037824, 0.060903636918812065, 0.16100893665934313, 0.12662097926296667, 0.1190067525653008, 0.09458816557281913, 0.16540504470882622, 0.1285427744636225, 0.3344431117188036, 0.15441603403690385, 0.06842368418523603, 0.24843004458858575, 0.09475686476344236, 0.2283782136108412, 0.15413995621179455, 0.10325528950535534, 0.07194905353314351, 0.08862971774061656, 0.11965426190076489, 0.08416576836598688, 0.501881335647953, 0.4967286651798729, 0.5086131270590575, 0.483366847182223, 0.5337650092415595, 0.515269931095224, 0.5908233237346912, 0.5711854247634889, 0.5590886511311446, 0.06626442701674629, 0.06235169285766207, 0.06423152914162933, 0.1077762745381573, 0.11140801148635926, 0.14428669159029417, 0.11908976499548085, 0.18889012398561567, 0.1077065366881752, 0.4114938118377717, 0.30754352306297794, 0.1284193470274977, 0.33850283280061744, 0.2632604004979101, 0.14916436443490944, 0.2527662952284302, 0.20558122330013695, 0.15854944572871588, 0.17707329167126884, 0.4736454027804856, 0.5049082799982001, 0.41674595325846764, 0.25402892975642466, 0.36076190254645213, 0.20238763085739442, 0.4962165073475602, 0.24423747908170612, 0.22538379354218285, 0.28868274867286003, 0.2211049897911872, 0.3263011239103121, 0.2387901002258641, 0.3085726409083327, 0.23560395984308913, 0.29078672718840703, 0.15409367212224, 0.21634643353433403, 0.19366522747074688, 0.18206539055375992, 0.26735389017309963, 0.24550309108004853, 0.19961342152313588, 0.21997563939783227, 0.21013454368834183, 0.2745990078146068, 0.1812702700642923, 0.1983707431753432, 0.1877180503136856, 0.1821796826771115, 0.18730595521043358, 0.20009750517010993, 0.18428191558963858, 0.24994602371027141, 0.18363116150467362, 0.12460040400087313, 0.17646023524454435, 0.17612920219312933, 0.9266996887181091, 0.20047313816934365, 0.9061840279006597, 0.7701428758838404, 0.7463325043836866, 0.9206530529911623, 0.7169487357157669, 0.15690368491480455, 0.6783448699998471, 0.20990379233018053, 0.15440448035038867, 0.8763329749487905, 0.779377109226432, 0.7895311874961745, 0.7704954611479369, 0.19496404768103526, 0.17837351472554708, 0.2070907855761518, 0.22497255161559238, 0.18096619312519757, 0.18967523656832852, 0.1767680473304568, 0.1842571105232984, 0.2149156357852604, 0.07972140435008312, 0.08270301611804953, 0.1060149772988438, 0.08247407592824452, 0.09058276455180936, 0.0781360077599158, 0.08402188658575671, 0.0781484815767517, 0.0859288788148529]}, "mutation_prompt": null}
{"id": "9331454d-a0d9-43b7-8e3a-2713b32d2dbb", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "e34b507c-4fc3-41b9-a939-9e81aa67411a", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_size = max(1, int(3 * (1 - progress_factor)))  # Dynamic neighborhood size\n            neighborhood_best_positions = self.positions[np.argpartition(scores, neighborhood_size)[:neighborhood_size]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced convergence by introducing a dynamic neighborhood size for better local exploration.", "configspace": "", "generation": 50, "fitness": 0.3191038287745879, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.8243459828787489, 0.8353341343626104, 0.8380404674362048, 0.8771891008019358, 0.8115819868115011, 0.8673093455259961, 0.842671216541621, 0.8653931793170715, 0.877677094194718, 0.5899848224310495, 0.751388987642875, 0.7245358436079661, 0.7455446213429575, 0.08755092148175936, 0.7287076661785618, 0.6906221177384964, 0.7314482524460024, 0.7313003485492939, 0.13044874271475215, 0.16953010366950816, 0.13616148884518575, 0.11222338287808287, 0.14498478445348573, 0.1676716131109679, 0.10215322239330449, 0.1364950641807141, 0.1608214761943545, 0.11887762666024904, 0.08625895267350425, 0.08992892885931958, 0.10636425792575932, 0.09360982368289184, 0.09100420440581425, 0.13705152494699446, 0.09079032268052656, 0.12344673825991759, 0.9047612378562263, 0.9305055112813553, 0.9344409158047982, 0.9155213855830494, 0.9136768115070111, 0.927345395989243, 0.9278088007155284, 0.9160175852355026, 0.9117691736559851, 0.5040181199345484, 0.5250441586518788, 0.6625782067617036, 0.6995835343984792, 0.757844919921993, 0.6873186398483294, 0.5284972119260978, 0.36082246392324946, 0.71388770113255, 0.638399126283389, 0.14077151668910914, 0.17038379397798453, 0.37206913072536485, 0.27859680313912083, 0.21263927646238656, 0.23177289686515945, 0.13131804577150197, 0.21756278165180687, 0.21479401665384157, 0.2342210506545006, 0.13198698235292228, 0.26778040237363987, 0.1942109252860229, 0.442095142227676, 0.20915509049469339, 0.2958960485080564, 0.19778575822176336, 0.21487688392083137, 0.20163657013732672, 0.2272278020343208, 0.1841695700010859, 0.21291496387501263, 0.13488619095935916, 0.2482887772690875, 0.22905649679750595, 0.23647706107188604, 0.012383490379077933, 0.08391145172623005, 0.05250703686002489, 0.07704145043363464, 9.999999999998899e-05, 0.06049589972921443, 0.002625633468081978, 0.0001023186759961936, 0.05871238957122116, 0.19636136728100384, 0.060846403396717874, 0.08528250108787072, 0.05611037448843759, 0.004506551869785991, 0.023992909482429048, 0.12552580069705732, 0.10063387856366479, 0.06648916370020574, 0.05689069145745673, 0.24028980630796426, 0.2989610127706255, 0.07667570190989337, 0.16202937374575632, 0.15668480426479892, 0.16560544024690949, 0.12849150456489444, 0.06572278774217555, 0.13023565314826668, 0.0651251409801622, 0.1939983612453724, 0.1439329854556214, 0.09307788098835368, 0.05540567295137844, 0.08185546752546036, 0.08071644643314646, 0.08427380503408988, 0.5216556193933093, 0.6360115895824435, 0.5399075127916724, 0.5536311050832325, 0.585197026258677, 0.4782297601963419, 0.5684406220719032, 0.5882884285531718, 0.5999295593175423, 0.06431667811907449, 0.061578933994259955, 0.1414171414619012, 0.1055686845733268, 0.0919273816412246, 0.13104983330305475, 0.12477867744484161, 0.10270777924522356, 0.0844711522614533, 0.19949332133103193, 0.2507733409291617, 0.20392260239169513, 0.14980047607234992, 0.3427184116195299, 0.27095175452071285, 0.2933588348223851, 0.1766117849107206, 0.3670215690857357, 0.32806119243412124, 0.4013214960328635, 0.2936181418263165, 0.3796871565082979, 0.25413014850347004, 0.31746410122290836, 0.2568699962952262, 0.4009430443599121, 0.22005014213169216, 0.22282539354830233, 0.252892307681744, 0.22921790856205904, 0.31352805842896714, 0.1995177211105934, 0.17278393945951098, 0.2440034988177998, 0.2898420403947274, 0.17018554049617118, 0.2603690056102942, 0.20898195487904792, 0.2533614391693475, 0.2520329963586787, 0.21839511393270317, 0.20497097929846586, 0.23611484145889827, 0.235410284689476, 0.24564519525369088, 0.1824289437807154, 0.19740760127600165, 0.18358385641177122, 0.19751874786797552, 0.20328712018451944, 0.20266932770546486, 0.19164461835230273, 0.24956645155251445, 0.17209601641972516, 0.17528215074996456, 0.17671710856246647, 0.17487798189169612, 0.9250132142180479, 0.20073455911107796, 0.7985317845082278, 0.907356003485749, 0.8837894918130054, 0.9082590691534252, 0.6020559347952961, 0.15670519621505719, 0.7427604078637211, 0.20964734888741243, 0.15528304110196478, 0.758328429099038, 0.8377198051355352, 0.8311765073739302, 0.7722076658381463, 0.1803968709663819, 0.18791039806742216, 0.1853439958142743, 0.18616405018732085, 0.18357307607728868, 0.184414639605477, 0.18546926832647725, 0.19150942764450063, 0.18622964665443875, 0.10110644228388643, 0.1083816735472386, 0.08484249644105935, 0.09046921920444906, 0.0874315025522221, 0.06456004282285865, 0.08386432531880639, 0.08977818064771981, 0.09388577181259572]}, "mutation_prompt": null}
{"id": "3572813a-239a-401c-8c92-b4583a51027e", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "2bc14429-01b0-4d05-86c2-c2d7fb1c45b7", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.18 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "AdaptivePSO with dynamic neighborhood influence to improve convergence and exploration balance.", "configspace": "", "generation": 52, "fitness": 0.31549380522396653, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.8797065243043236, 0.45271359032465996, 0.8771814340645105, 0.8437478760493854, 0.8233628969188594, 0.8830786200445724, 0.8053381401255517, 0.8034455965943047, 0.8782065545015585, 0.6508934919035271, 0.6983564069035553, 0.7268436227679518, 0.6930081053841782, 0.7168247631123119, 0.7689269810220156, 0.7326806347750742, 0.6993020820961608, 0.20668147686172333, 0.11843491866364697, 0.15619887650385877, 0.11438333847550353, 0.12772230081337332, 0.1766002908888613, 0.15045298272156848, 0.10366053505894202, 0.10236630756570064, 0.12759253950465432, 0.122969046102535, 0.07211632941248614, 0.0771982080998681, 0.10468886050005421, 0.11285885656973171, 0.08041526898212592, 0.11852898868097272, 0.09146916270937433, 0.09210516777253719, 0.9234922295418858, 0.9204315565054664, 0.9344072517553483, 0.9179119505997306, 0.9250017850838023, 0.9211804231860233, 0.9305503788437797, 0.905439129627689, 0.9118986111156591, 0.7348050860106337, 0.7523798619918188, 0.771611765111913, 0.7093071263495119, 0.6975379136975202, 0.588777805406961, 0.5474367144137688, 0.730454037753152, 0.7105935995380521, 0.37670997551733076, 0.16679805162742323, 0.17088792531259, 0.22054811396529317, 0.2771441379588073, 0.156906370809199, 0.1759157187924305, 0.15282824354144509, 0.2354685107293656, 0.21729509881506437, 0.13133277672598487, 0.1301027339666998, 0.3209734233572966, 0.13241347262324632, 0.23664111026981727, 0.19394902664704328, 0.13122356444230987, 0.16370358585934586, 0.21859155907492223, 0.19741557135900567, 0.13296661139854826, 0.21486239301494447, 0.18299197452356752, 0.13373432345603975, 0.26027441389465555, 0.2182261433871966, 0.13425165577707154, 0.06422658977741014, 0.0002548384625570277, 9.999999999998899e-05, 0.044176478064818725, 9.999999999998899e-05, 9.999999999998899e-05, 0.03847059757815097, 0.011046333016118681, 0.06271579681452588, 0.1759023633081992, 0.1145493890039827, 0.10130068385132396, 0.054042200294740494, 0.010987547616532867, 0.03477240838475315, 0.1440296405042849, 0.06922374679843579, 0.04275303622344895, 0.09775449717574736, 0.19624230726215086, 0.1215356242889466, 0.12482676011389371, 0.2098864107295203, 0.19419751214833236, 0.1904534736187694, 0.2241361101430578, 0.0694202132154551, 0.19910272736931334, 0.10021973444820054, 0.23608319861262106, 0.14311987682909844, 0.14945300961023855, 0.05180524603718639, 0.0982638633177203, 0.08366121130054704, 0.08470758514435095, 0.5402866242791082, 0.5299574852613981, 0.4067804830175653, 0.5965335594104719, 0.5348038022521033, 0.49502333461648507, 0.5779235128275321, 0.604080844253297, 0.5917859860802055, 0.06290191789121524, 0.07607558374416346, 0.07568448258451665, 0.1611128356307725, 0.09562169441713175, 0.11187865056148383, 0.10711029546917994, 0.10596512751265763, 0.08524561538758446, 0.14661780116422907, 0.25220580739117127, 0.3374433313076375, 0.16304712766995033, 0.26495718623619857, 0.22946522160475158, 0.1674398924857543, 0.1974350039731244, 0.22322446588827682, 0.26106483414610393, 0.4366607611655414, 0.2361638011463406, 0.3991374232151327, 0.30486046634255104, 0.46087144126902, 0.2358051901261461, 0.669056245435351, 0.23385266860876053, 0.19869182078534353, 0.23804420133714044, 0.2556561852212551, 0.24577407287078223, 0.25267965366416334, 0.1703263808573574, 0.23626490759884278, 0.2104515447252474, 0.19192032406262538, 0.19819358811001098, 0.20434022431563814, 0.1956502296235797, 0.24112970276699996, 0.22521612254172196, 0.23711764913726263, 0.23226909278153784, 0.22137708867074846, 0.236473819730725, 0.1749413353933913, 0.2252279935841479, 0.1723971438948303, 0.18993760580283947, 0.20302954771211257, 0.2279471721673777, 0.1841376748198692, 0.2492479230796164, 0.18843401966071605, 0.17271190195479358, 0.12440143488667144, 0.17424895963948617, 0.9350440390185843, 0.20085654929316965, 0.937868526982982, 0.8799427263066186, 0.8671182259389355, 0.9313308083684958, 0.8113790946462066, 0.15716020994329505, 0.7046762889697402, 0.20966322108395274, 0.1553668172838818, 0.6777591787443158, 0.7328531402940297, 0.8088707927652266, 0.8198681414614942, 0.17898695290986766, 0.18024041392433954, 0.17870649421082108, 0.18950577745816422, 0.18914230168580992, 0.18785633040108518, 0.1828122987474161, 0.18237967342742922, 0.19517074032174153, 0.10785317965573482, 0.07638045780262126, 0.08128518250526218, 0.10880780806512735, 0.09580416399867775, 0.08485391519314667, 0.1275527351359388, 0.06976177404207662, 0.09242864079703172]}, "mutation_prompt": null}
{"id": "9b03250c-f535-4375-b2f6-3c6908b47370", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "c3fda7cb-bade-403d-b753-53d80107a7c3", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "a51ff607-b57f-4f2f-af36-0d86adef3a64", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "ab453a4d-b4be-46f1-9218-2ac13e6f6fd6", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n        self.prev_velocities = np.zeros((num_particles, dim))  # Memory for velocity\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.4 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.6 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions) +\n                0.1 * self.prev_velocities  # Added memory-based adjustment\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.prev_velocities = np.copy(self.velocities)  # Update previous velocities\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # Local search enhancement occasionally applied\n            if evaluations % (self.budget // 10) == 0:\n                random_indices = np.random.choice(self.num_particles, size=self.num_particles // 5, replace=False)\n                self.positions[random_indices] += np.random.uniform(-0.1, 0.1, (len(random_indices), self.dim))\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introducing memory-based velocity adjustment and additional local search mechanism for improved convergence.", "configspace": "", "generation": 56, "fitness": 0.3059657156291571, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.42216120894071696, 0.8525607911651373, 0.443558731574086, 0.7071775131783293, 0.8201471345288167, 0.42879740079456796, 0.7433543824681585, 0.8231284639497881, 0.7258088011492011, 0.6522803264652446, 0.6540301422913599, 0.07898953439480816, 0.6395379115453523, 0.5963617585440145, 0.6488353457174361, 0.6609706735974721, 0.6515323019821219, 0.618536363474401, 0.12276532638881743, 0.13600695140969565, 0.15223562790412504, 0.10748247629977592, 0.1452274601963578, 0.12156741716180985, 0.09268439811028328, 0.556239824528814, 0.12261299401208603, 0.09480142878780828, 0.12196536154645454, 0.08304509756842648, 0.13248651202165185, 0.10379067191448721, 0.11656140992624786, 0.09580371452648939, 0.07706294837809458, 0.10157874921902532, 0.9305056188655709, 0.9408040912507121, 0.9418994263930743, 0.9335268826443479, 0.9287993910830551, 0.932304580876507, 0.9464669806929318, 0.921682949276569, 0.9370771492316835, 0.37115582795865665, 0.6790311483214237, 0.7000304633735506, 0.6041935770613588, 0.6842045995541959, 0.5697573476121774, 0.6624063998543528, 0.6039246474729754, 0.7070343411106321, 0.7465355981427255, 0.17060723160130442, 0.21149492536653114, 0.2797529929794047, 0.19231534332497102, 0.18741044125064987, 0.17497953034682157, 0.21666809072302773, 0.5152767959105904, 0.21196680277987623, 0.12176956548953788, 0.1707421226626542, 0.3220019447848351, 0.19713031561090588, 0.24622919320492942, 0.21186167234840758, 0.1314588909729304, 0.18527649468539165, 0.2364822343091666, 0.21113148972517448, 0.22958038520002466, 0.2135591524821615, 0.14905149326858713, 0.12695522182860697, 0.24873281587997598, 0.1903763696330497, 0.22885129623153933, 0.0023741533946322058, 0.09219772669664672, 0.05049424450641382, 0.08010627105163115, 9.999999999998899e-05, 0.008221107734518451, 0.01181805562777627, 9.999999999998899e-05, 0.03132170201090945, 0.14094397596749875, 0.042682334097299046, 0.12372178565726921, 0.05740579042653904, 0.010257038219602, 0.02020835957313616, 0.11608883050383756, 0.14782863533747947, 0.07662947113938412, 0.23645532291239868, 0.15744974696405656, 0.095429028253328, 0.09966266693880554, 0.18747115920519686, 0.12412249536086295, 0.17283658151807268, 0.2100500807967599, 0.04737368954536214, 0.09983870694778307, 0.06707374521453735, 0.2293895703336596, 0.14043436617634997, 0.11804558033349166, 0.0810325833994926, 0.08161335979831819, 0.07891206904648485, 0.07907498501522203, 0.5456848949112827, 0.527956846643342, 0.4988961098851147, 0.4516481605234981, 0.5217870193789417, 0.49170946889136824, 0.4832172056627162, 0.5323455454788376, 0.5429422030331745, 0.11435066973506769, 0.06502186811873745, 0.10835140069612503, 0.14289225159704455, 0.06392547670807491, 0.08469549316158287, 0.15079881665686568, 0.1551470206838088, 0.08096954796470779, 0.363190160721393, 0.2794126345786283, 0.30862984920079395, 0.3766444993543975, 0.26896590139650356, 0.3288828091744115, 0.28307321389145923, 0.43393553699183074, 0.2008575417749927, 0.18896952771221154, 0.19200841155516346, 0.34271459121703074, 0.4657585327912348, 0.2425175096612303, 0.2805798790669044, 0.2552975146896914, 0.49256926313804406, 0.23795600351853863, 0.1806794788664423, 0.24277817767924625, 0.2127269328832172, 0.3211918262137482, 0.23182259541306627, 0.1902395038463981, 0.23052820582502676, 0.22304316853331685, 0.18872299329766995, 0.21065307532377098, 0.21769300363883504, 0.22720760892240477, 0.23452839296283612, 0.25567187300776506, 0.19188524277959884, 0.21689644369191552, 0.224695084236464, 0.21166080030563605, 0.18521106059036774, 0.1883006039508336, 0.19250432766867354, 0.19329939192429235, 0.20797201712403002, 0.1941453939770298, 0.1726721631679109, 0.1894242612458079, 0.17518782761609675, 0.12498178082838152, 0.12473033486232776, 0.17574462322589857, 0.8484227955997242, 0.20064913285263075, 0.8804533523839998, 0.8567676399047255, 0.8408066515275658, 0.9254185376380564, 0.6114128077752206, 0.15695787390876303, 0.6411102145193348, 0.2100421112265375, 0.1556856899734116, 0.6140407571388391, 0.7648987830481924, 0.7106423118536932, 0.7564519047334359, 0.18083901391781187, 0.1936380042285487, 0.17687777350734413, 0.17710901642510812, 0.17520232798493796, 0.17651920543313138, 0.1990702457866016, 0.17301444957580003, 0.19053568761345174, 0.08586774519901574, 0.07512390434793692, 0.07617861671684478, 0.08670818422624071, 0.0969551108961394, 0.08739226508783471, 0.07480754142359147, 0.08440011477316134, 0.07003702215276608]}, "mutation_prompt": null}
{"id": "c7e8de2b-f453-4647-8320-363df33620fe", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.98\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.6 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.6 * (diversity / (self.upper_bound - self.lower_bound))\n\n            # Using a dynamic neighborhood influence\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0) + np.random.uniform(-0.1, 0.1, self.dim)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.2 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Enhanced influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced adaptive parameters and local search strategy in PSO for improved convergence.", "configspace": "", "generation": 57, "fitness": 0.27236496154278433, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.596307315596027, 0.6374043273498529, 0.5870578530968575, 0.5934999248060795, 0.6027089368032138, 0.5998829257244433, 0.5841485170234776, 0.6284224415757008, 0.5935651110624867, 0.14081177472358108, 0.10523798071078849, 0.1773428369845491, 0.1613858687814258, 0.11241158262163697, 0.18133700143117626, 0.15330069755368714, 0.2083757879942375, 0.20666863338363195, 0.10895794903360911, 0.09892649862446001, 0.14064415710842093, 0.14812387347240052, 0.0997224511090008, 0.1740941150276929, 0.11002242940982743, 0.1315312769820437, 0.11227530553866605, 0.08048808446171896, 0.12996229641980828, 0.09436081020186216, 0.1001066504420498, 0.11582085707133483, 0.07709089795479085, 0.11989199300943021, 0.0865250789010279, 0.09410343991784298, 0.9343457998691498, 0.9365357773890326, 0.9239970395916791, 0.9143996048408123, 0.8990134115208571, 0.8962541994134279, 0.9330520722069602, 0.9012804529930835, 0.9057082593433842, 0.39053973501988826, 0.42526455892410264, 0.44543797601576074, 0.4281289257720797, 0.44613049531772175, 0.4576622747310405, 0.4416831212162843, 0.4264961364238653, 0.45835878167049227, 0.22697528232739395, 0.17076735404348675, 0.1579343347343265, 0.36888446166047284, 0.5903475995121987, 0.2801372867482451, 0.22209922634071677, 0.15931943433553808, 0.23514899061272732, 0.3043647831161246, 0.19060616565063604, 0.203928918648978, 0.21514471295702065, 0.2248193171304287, 0.19149488608389087, 0.22902402628399543, 0.1269944743490743, 0.18923417546383292, 0.16739326917945252, 0.1739305734789448, 0.12813748164545413, 0.22105134915848335, 0.2063603186456342, 0.13741424432428195, 0.3449169600520279, 0.19650072117431294, 0.24629580643743942, 0.03617427843281096, 9.999999999998899e-05, 0.07783716852567213, 0.0017030977063886565, 9.999999999998899e-05, 0.05217392981193847, 9.999999999998899e-05, 9.999999999998899e-05, 0.05539741552052402, 0.1343304394293593, 0.04595378241202375, 0.1049464408725207, 0.07378699562431867, 0.016092389580686373, 0.011524662741002611, 0.14104134215861408, 0.08934520141641222, 0.0548820593601016, 0.10411332150748509, 0.07444708222849172, 0.10693929475018682, 0.11394977803601503, 0.06071470888390673, 0.06254563880789155, 0.08922282696448569, 0.052801954309456, 0.048805051228746565, 0.138945084125085, 0.11233680618621933, 0.18517619437799682, 0.12036763360643399, 0.1283417857825241, 0.0902276691372692, 0.08148870241387263, 0.10493811015624266, 0.07702793090306825, 0.4815780333544012, 0.5007353010818261, 0.5132483589465291, 0.4972459904351598, 0.48050759194376613, 0.4987060101134946, 0.5120770906835609, 0.48380303155664683, 0.5282431842550477, 0.09092501178178392, 0.09999258320621629, 0.09200224918440258, 0.10279472043666626, 0.08000866897738002, 0.09703940126304678, 0.1417681509763784, 0.1792477833774052, 0.09806697854993784, 0.30476519314694184, 0.18615395151983682, 0.36373431449495497, 0.252636469523294, 0.41214899954596096, 0.20538204477325128, 0.3656507954398617, 0.17365834440998984, 0.1338076901167562, 0.27675874616126084, 0.3675587225423743, 0.3004417082526375, 0.37357455556969454, 0.24619780916244993, 0.3896295640067551, 0.2580075669719044, 0.2686710895816563, 0.25647308175481776, 0.2338918786789541, 0.2920219787131698, 0.20431356273342205, 0.2904014397620247, 0.20165505593977395, 0.3437692925107557, 0.2383698877625292, 0.29271584035025466, 0.18637242210381888, 0.23004703849830266, 0.23416169875829185, 0.22672892240579745, 0.22764948391081818, 0.2303665730989345, 0.2649468783658103, 0.23726091620808298, 0.21377604098667113, 0.21200212211312497, 0.20887029954432013, 0.19202513555069123, 0.18321880352376751, 0.24922308258773151, 0.19933861791788654, 0.18484506232452447, 0.17530097592753136, 0.20623875932722802, 0.18044923231390497, 0.12596217652090547, 0.17286442063959262, 0.15306242196134157, 0.8982637951104667, 0.16846533491644766, 0.8996440375703381, 0.8666163713572035, 0.8711976560678824, 0.8817963870506567, 0.48356468770698746, 0.15726312678554932, 0.6868437383267953, 0.2097565260195956, 0.658208010213771, 0.8816837585524571, 0.10475032249082017, 0.8393801433523637, 0.7827981879566097, 0.19113666256572093, 0.17784990432328374, 0.18061219568590692, 0.21118714078682022, 0.17756984511824814, 0.17509283351366545, 0.19064543438145054, 0.1940492286587885, 0.17771308637499517, 0.0902054809234627, 0.07289110006586619, 0.06623961077348939, 0.08723499140283308, 0.08010910980814534, 0.07893435337807442, 0.09227219321352609, 0.09689495949187299, 0.0808594358979875]}, "mutation_prompt": null}
{"id": "734f3a52-c4b0-4d0b-9892-b0c147980b10", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "39ef3d38-c9d7-4ee8-b265-bcf7cff48589", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            # Dynamic neighborhood size\n            neighborhood_size = max(3, int(self.num_particles * 0.1 * (1 + diversity / (self.upper_bound - self.lower_bound))))\n            neighborhood_best_positions = self.positions[np.argpartition(scores, neighborhood_size)[:neighborhood_size]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced dynamic neighborhood size selection based on diversity to enhance exploration and convergence.", "configspace": "", "generation": 59, "fitness": 0.32586551420379384, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "e2527efd-01db-409e-a904-4f849e933337", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "cde94a3e-075b-4c6c-9ecc-a4cd1cecb26d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "4e3a40ee-e105-4cba-8ba0-e47baf149b02", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "356c3296-8d18-4348-8e98-34904bc7ac0b", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "fc602122-7ed8-42c3-a537-46c04a4c6c3e", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        chaotic_sequence = np.random.rand(self.budget)\n        \n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            chaotic_inertia_weight = self.inertia_weight * chaotic_sequence[evaluations % self.budget]\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                chaotic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced chaotic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 64, "fitness": 0.21977736318343014, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.9453338834437812, 0.9325438167553888, 0.9423504193940156, 0.1739822759399835, 0.18089177662032752, 0.9364204344347181, 0.38981849147212666, 0.31221393160627653, 0.9320202815268965, 0.8741816046268955, 0.11991084735665158, 0.12225379309808015, 0.2736358391117052, 0.15493391594929873, 0.29986770866444623, 0.06854031759096035, 0.18274187698714972, 0.1425033690834736, 0.11840640698571914, 0.16182185777807223, 0.0901585074648934, 0.12608347730947134, 0.11206004056658281, 0.16447798032641514, 0.09745756644689463, 0.11149708400762615, 0.126836031840606, 0.08315448674332204, 0.0948905931520796, 0.08968768771793134, 0.09424412845461139, 0.08557157806484994, 0.04472329865554747, 0.07065091005042445, 0.09280415264532349, 0.0696278305958109, 0.1093621320322491, 0.10427171693008674, 0.15159331667866938, 0.10872361701319078, 0.09068604616513531, 0.11410559794765196, 0.1130233089117908, 0.08080942823295734, 0.0958396611744542, 0.8076746250705171, 0.11111061817812262, 0.5837329559251385, 0.23672682192094385, 0.24112612925139587, 0.3464065249676256, 0.6457253992332818, 0.08054881881537912, 0.18184425479467714, 0.2276875767225699, 0.15581229431415944, 0.13596922745676132, 0.21348839741304204, 0.34834864446003955, 0.20875162590553875, 0.13075648637580362, 0.13130572548220754, 0.14464443517747183, 0.18902799337297715, 0.13499655907109043, 0.3370199800840916, 0.48401304105986853, 0.2587513118675292, 0.24550756230998327, 0.17489657506119494, 0.13324174140342981, 0.14132831233978504, 0.23422996772832594, 0.11294304003598332, 0.12800836041010444, 0.14503600963448748, 0.1334816784496028, 0.13576112286941933, 0.15030019171355202, 9.999999999998899e-05, 0.2097663549607206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07860373205830129, 0.001095027685113159, 0.053207150695425476, 0.012958962158911902, 9.999999999998899e-05, 9.999999999998899e-05, 0.21293032986608418, 0.07723985435118252, 0.11516965014769887, 0.06159277273165176, 0.0214098046974861, 0.045879645202606345, 0.16817431062495558, 0.09220462660384432, 0.07329726601364983, 9.999999999998899e-05, 0.23629771809742672, 0.307124024537339, 9.999999999998899e-05, 9.999999999998899e-05, 0.09183261099976336, 0.16527062659932834, 9.999999999998899e-05, 0.11494493045027776, 0.08992864400148448, 0.12377778564262831, 0.2644796043897165, 9.999999999998899e-05, 9.999999999998899e-05, 0.09267996878646767, 0.08373562832898751, 0.05233113247938037, 0.08396872445865278, 0.531717864361665, 0.39387705762845204, 0.5560216407885955, 0.3931560367408622, 0.23453499866416094, 0.24467950133794336, 0.5763619444139977, 0.5692594324651288, 0.5602687580116721, 0.05008764345854211, 0.03299184594424465, 0.009895122644131171, 0.08575568911901066, 0.08575262946294004, 0.11760310128285911, 0.09349804394947492, 0.09292372490984013, 0.08633662919712393, 0.16012876952429522, 0.17904147154057004, 0.18441230344866122, 0.2096464196176433, 0.161959324432295, 0.3545032891947413, 0.19657121581411752, 0.16205158000048925, 0.14398605508190343, 0.16412734584513577, 0.22536847403182192, 0.19956406149429873, 0.27408039499224246, 0.3690518657789901, 0.2944685589892724, 0.1820982947782065, 0.4012905934790735, 0.14809321701702083, 0.15502550444609065, 0.18557357329143032, 0.1971109652956876, 0.265709139194512, 0.24346669917968256, 0.22103125694147252, 0.17512459256493496, 0.29734846980614515, 0.16939414463986835, 0.22167370750030602, 0.2502120264793407, 0.2518862214930073, 0.24800168382650023, 0.2126818850812432, 0.23650680849589212, 0.2114381957166328, 0.253605988353116, 0.228735928811181, 0.1794834019223901, 0.2121223520658042, 0.1701710691769276, 0.19067929919044346, 0.18332611132201426, 0.17327273140734634, 0.19077174712642986, 0.19089000759031194, 0.17137364442445358, 0.12511698185842124, 0.123603756944616, 0.18697911609058515, 0.9489881000715604, 0.2006336735341986, 0.9638145177672063, 0.8588399014967749, 0.8987176654295675, 0.9213485207316524, 0.8153124428893389, 0.15686215867587217, 0.8635419265719033, 0.2081613097680608, 0.16737708823412745, 0.6136211039732682, 0.10403179677843366, 0.32105737178150606, 0.2939977651321839, 0.17586263629136123, 0.19673695436369754, 0.18769679109744264, 0.18984915330891117, 0.19774758490054245, 0.1716633779051281, 0.18776634858237307, 0.19048593549528214, 0.19856508893085367, 0.05635274827463366, 0.08627626381309561, 0.08934336961739331, 0.09048177863610163, 0.10856710225994026, 0.11179198466343077, 0.0947596030825576, 0.08898512528644664, 0.07717342559812079]}, "mutation_prompt": null}
{"id": "f1296a78-cf03-4860-9da8-6705a1fb155c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "fa0edc16-03bf-4185-893a-33662b59d09f", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            random_perturbation = np.random.normal(0, 0.1, (self.num_particles, self.dim)) * (1 - progress_factor)\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions) +\n                random_perturbation\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced adaptive random perturbation to enhance exploration and prevent premature convergence.", "configspace": "", "generation": 66, "fitness": 0.2326014720384548, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.47280412793032933, 0.4806508872447025, 0.47021228807643045, 0.48132893204488647, 0.4766725203304215, 0.46226044175100245, 0.48311408524829136, 0.4710993962991423, 0.47106806994744554, 0.0008304748207512702, 0.04141357721887673, 0.07747873628003621, 0.019814499606251257, 0.05439799555628233, 0.0049922120529029, 0.0008737250744207392, 0.010907725873764096, 0.011463687252464272, 0.09769896234499609, 0.08789123875750249, 0.10246221704717451, 0.11067849102195837, 0.12944020763304542, 0.10870558969597932, 0.08811059765828688, 0.12234141514825514, 0.12772672014642228, 0.11298426791051919, 0.10060952551151692, 0.07811056427946728, 0.12094449052157774, 0.10628370992968172, 0.10273332921788392, 0.08385026113698035, 0.059554260779885015, 0.07303645962310257, 0.9265480504322391, 0.9417815229735126, 0.9330231057879216, 0.9186808428232569, 0.9188585703349506, 0.9208106275894357, 0.9246853199222648, 0.9076830735734317, 0.9159978116806342, 0.33686890238923217, 0.3351147216392619, 0.33184036227572955, 0.33050935905471557, 0.32894473255283607, 0.32586064931598047, 0.3329493977841116, 0.3266790093659281, 0.32216581147079837, 0.6264873102952893, 0.16937785522591697, 0.14056721385069904, 0.2192080392397231, 0.5770357744813983, 0.19227002093541812, 0.17411481431482212, 0.1519041952037271, 0.1785954513261162, 0.196245950361295, 0.12852105426574612, 0.14041335378877962, 0.180938015532651, 0.2185667582399231, 0.20056835723871091, 0.17908054124973094, 0.12399479167944538, 0.1312032576191985, 0.12956569926694395, 0.19559008974055192, 0.13116910371804913, 0.20064820059117572, 0.20532510087463662, 0.13012094655947226, 0.12949731733596948, 0.17945464383371368, 0.12992083168422253, 0.09942655646238019, 0.004344908429291583, 0.04418881116273021, 0.03733212087339721, 0.02977659840527136, 0.03486489963769235, 0.019770783129606784, 0.021589227263170363, 0.10394401472516634, 0.25657794356997965, 0.08321468940362042, 0.09190444711054535, 0.07139591110266796, 0.0223283107999267, 0.04332893668449711, 0.10923348091437235, 0.060862843912821374, 0.08857398459110022, 0.00530501420753049, 0.008604616391275854, 0.008744103973918005, 0.004057317786581138, 0.0005010833293112027, 0.007586416337230006, 0.006919283237768137, 0.002509690626181671, 0.005535115426125392, 0.10742992107874727, 0.08780419496382019, 0.12678876426668484, 0.09760082312192375, 0.1250146637382522, 0.05647962094325942, 0.07274848797940636, 0.11575400876919972, 0.07579866259768131, 0.42917586992383416, 0.4240687710781238, 0.4363388951128715, 0.4302306468101875, 0.4225708626039958, 0.4240572248303952, 0.4320338219127854, 0.43393590467764964, 0.4253129166158863, 0.08207532638808968, 0.1147774644462961, 0.12586884208122884, 0.1405077253348832, 0.0711427471365561, 0.08049216390720104, 0.0942659427572895, 0.09277320059905247, 0.07922546036539135, 0.2612941312001079, 0.27114381049714276, 0.18344092151418467, 0.157002781929221, 0.17766592338459541, 0.2685405721039784, 0.2626369571942363, 0.16732288825888386, 0.2152278482979204, 0.2803596727643005, 0.3176916988127173, 0.22729641898913877, 0.31216181362313256, 0.3105300226644381, 0.31330736586554575, 0.2449046900698496, 0.31739508903718294, 0.21947419721521766, 0.21770204902727142, 0.2572940916995399, 0.18992573825124004, 0.24986197924090592, 0.2087939163146758, 0.22584709056081864, 0.19748009882299744, 0.2098389545704441, 0.18222560814499966, 0.2209469199568913, 0.21355392443813181, 0.20872084675810387, 0.257266656763819, 0.2507039659698479, 0.1998175941738467, 0.28447018932358437, 0.22364019846380911, 0.2642082566603312, 0.1880342393180401, 0.17489791385114317, 0.18495341859799275, 0.20174873105455327, 0.23294914755788632, 0.18374872088594496, 0.1922525339276291, 0.29858220307971295, 0.1851554386906289, 0.1754782583116723, 0.12489179444489673, 0.17659149152776676, 0.7182896196720783, 0.20008850711460247, 0.7162384185580769, 0.7306289890410629, 0.7141947082200399, 0.6278110940356452, 0.5304114282128177, 0.15719985867353248, 0.6324339339244133, 0.20998916880131135, 0.2093171261494312, 0.5914150679088042, 0.4865847960380846, 0.16676288810495754, 0.38794049330409397, 0.18570073125244813, 0.18005391116137348, 0.18142692827456464, 0.17999158192725284, 0.1896939641815406, 0.1960120328344438, 0.18319539237405302, 0.1988512500813976, 0.18109602566304162, 0.06570019586676246, 0.09447139202120647, 0.09192972402523991, 0.09597068727558633, 0.1015377331440015, 0.087668943574289, 0.07428433185044869, 0.07981163712843298, 0.08561033217323022]}, "mutation_prompt": null}
{"id": "7c3c49c9-a367-4e79-984a-c57bd8d497c4", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "607e8523-2207-4cc6-9900-86a368524b0e", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def levy_flight(self, size):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                 (np.math.gamma((1 + beta) / 2) * beta * np.power(2, (beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size=size)\n        v = np.random.normal(0, 1, size=size)\n        step = u / np.abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions) +\n                0.05 * self.levy_flight((self.num_particles, self.dim))  # Levy flight inspired perturbation\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO", "description": "Incorporate a levy flight inspired perturbation to increase exploration, aiming for better convergence speed.", "configspace": "", "generation": 68, "fitness": 0.22495561230807326, "feedback": "The algorithm EnhancedAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.4324379246143538, 0.45010355860432605, 0.4547698736681197, 0.446243207950192, 0.4647205121765382, 0.44290388905593736, 0.4315099032312245, 0.4490089247484351, 0.4277071300203058, 0.05134470598174701, 0.08146880119745659, 9.999999999998899e-05, 9.999999999998899e-05, 0.02710440620577914, 9.999999999998899e-05, 9.999999999998899e-05, 0.013105999843490479, 9.999999999998899e-05, 0.0997159013215394, 0.1112607626332709, 0.10437252885955373, 0.10353801038314103, 0.10586306598486428, 0.12177275814414446, 0.09280134411020657, 0.1080369554291023, 0.10396275836508795, 0.12538763767399874, 0.09064290164531119, 0.11747028229154088, 0.1219751333017377, 0.1053742938945601, 0.09251162209668962, 0.10055335892098283, 0.10414184294269746, 0.09277474191997936, 0.9287039431868092, 0.9345618364609547, 0.9324325201944959, 0.9177506422790339, 0.9127446936739971, 0.9142147939996172, 0.946740126855316, 0.9254465847829837, 0.9263462890895281, 0.3226402216843769, 0.30395965793703894, 0.32898923162585836, 0.29890109464182846, 0.3077494322050708, 0.30261867206785975, 0.3014944233794977, 0.3046917448817421, 0.31496524710672313, 0.22893264162546667, 0.14052880634945464, 0.17069988760105004, 0.2835851216269377, 0.27684962445956696, 0.1928010645629532, 0.17759551515607708, 0.1777997057187537, 0.3804334892238157, 0.16739513998801303, 0.12554712894449982, 0.17104576344851752, 0.17189828453404954, 0.15639908159372973, 0.15183899968778913, 0.17433376841669856, 0.22946321046962292, 0.15582877493942504, 0.1788907987490611, 0.17337031680441817, 0.1271924602238782, 0.12674647011464435, 0.14924613602783576, 0.15314030816570723, 0.1937835755656766, 0.1577873011368811, 0.1902817535946879, 9.999999999998899e-05, 0.05380005037228763, 0.03911088028888354, 0.041687070398375714, 0.007885230801067289, 0.04354653495925398, 0.0008974746161672931, 9.999999999998899e-05, 0.10775188798106139, 0.20009879062979308, 0.10969604327963112, 0.10288337064860476, 0.049991773869801914, 0.038471422767557106, 0.028091114009551665, 0.09878986347662266, 0.08419179090766116, 0.08726498420934115, 9.999999999998899e-05, 9.999999999998899e-05, 0.008291984595600654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11529489138380045, 0.07626479599513536, 0.10057986736798008, 0.09936966234721711, 0.11369449585828717, 0.07155394810010507, 0.07155385597482, 0.09512616307366328, 0.07225451561839091, 0.38791827764790054, 0.4276503775884044, 0.4190108814462614, 0.4436883856193041, 0.4081423402055657, 0.4214343282615518, 0.4095698025088713, 0.4083126799551656, 0.4261011216558641, 0.0754498167405494, 0.03506242328598996, 0.08596212831796635, 0.13759537492139373, 0.09978815966205312, 0.12476219797089472, 0.07669540678090558, 0.12004844075767884, 0.09288130176961562, 0.2506936586473397, 0.21567166824145678, 0.2716271002097699, 0.22802619354565645, 0.2639123526647571, 0.2659482107850569, 0.16632272554091965, 0.23390531353580268, 0.1744167156835612, 0.1685741497407094, 0.2986821230699457, 0.2758099299108796, 0.29670167366423217, 0.22949167207052235, 0.30786258881511774, 0.22545185282331437, 0.28908198138924424, 0.21719005379466272, 0.19996040526369752, 0.24746126335780816, 0.19163840050412906, 0.23996245609757705, 0.18693087047108858, 0.208468131062564, 0.19471982636083085, 0.23958087079906631, 0.20036802062874493, 0.24471847436487437, 0.21010729650025728, 0.2437750441520481, 0.23631760705588545, 0.23923911052882496, 0.20139373515572456, 0.242506091174719, 0.23409890823029023, 0.20427551600650395, 0.21133548226906906, 0.1967729367885398, 0.18263147706698868, 0.2283237867249006, 0.18457167827577292, 0.19956826137487627, 0.17145331744104164, 0.2697006854556556, 0.1850430840117402, 0.12496699732197125, 0.12517506770599007, 0.1531977019761973, 0.6409040652605148, 0.2003231974722487, 0.6801580734015018, 0.6381997297511866, 0.661010597363465, 0.6770764632926565, 0.6329492465535603, 0.15689745658447574, 0.5692878900989616, 0.21032926161914656, 0.20975126044673642, 0.5997765484564777, 0.10474708285098278, 0.49676820396855303, 0.3477284999856929, 0.18351569804055423, 0.1835197318086974, 0.205716697540142, 0.17999319772021538, 0.19557663881980902, 0.1886565107099556, 0.2017738607190781, 0.17891285218965114, 0.18559658192925266, 0.103542874459297, 0.0883061280258477, 0.08681534691700321, 0.09082900191490773, 0.0924125767731806, 0.05730402804018453, 0.1159553643457717, 0.07781806697953475, 0.06796012561938714]}, "mutation_prompt": null}
{"id": "879fa50a-7ec8-4f73-89ee-9c7cc00242f0", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.98\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.4 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.6 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            velocity_influence = 0.1 * (self.velocities.mean(axis=0) - self.velocities)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.12 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions) +\n                velocity_influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO", "description": "Enhanced AdaptivePSO by introducing velocity-centric neighborhood influence and dynamic parameter tuning for improved convergence speed.", "configspace": "", "generation": 69, "fitness": 0.321408854277007, "feedback": "The algorithm EnhancedAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.8926411068545104, 0.559851724942615, 0.9063950567392385, 0.8711296741934891, 0.893515651633947, 0.9062950568006929, 0.9065972699464899, 0.899403662786385, 0.8189064030803466, 0.7305364892820054, 0.7845176552838528, 0.7801472895671906, 0.17536143992969533, 0.6401118260115359, 0.7959121231497664, 0.2587636769063222, 0.7961767704451745, 0.7718349297464064, 0.12355388962240599, 0.11841497369836107, 0.12304859329037121, 0.11419038933566428, 0.132165307942549, 0.12415949279850469, 0.09237459740098897, 0.14817243266504432, 0.16178078754111525, 0.09949357180052198, 0.09101694118386416, 0.06492952067496693, 0.12125916079506893, 0.08421338122111721, 0.10191822140224871, 0.09996565491276721, 0.09678958893204037, 0.10796102656835538, 0.9245104311333255, 0.9191810102954519, 0.9315864904723966, 0.9208448076843856, 0.8827330193015142, 0.9139780695733137, 0.9263880040112693, 0.8743286560545454, 0.8685155531005777, 0.6693654375598654, 0.7413509609380923, 0.457888059199988, 0.8202092662332269, 0.6772601907561095, 0.7710729183106977, 0.6756209469959802, 0.722550849976788, 0.7652297162253215, 0.6480488134143702, 0.14012021551261844, 0.17020023916959215, 0.28456266078338766, 0.21257013943015757, 0.2129803797232679, 0.15159902234138622, 0.15203025954900873, 0.17703260320719638, 0.13444820051076967, 0.2545972702306738, 0.18925529636521465, 0.5804393502640219, 0.1328003644391016, 0.15303404485934535, 0.30386984585251653, 0.12672569919002308, 0.20975093488353824, 0.23753530404709278, 0.23123197511458815, 0.13627342083492144, 0.20977593752037915, 0.13131940458609936, 0.25082487513303997, 0.33243096062331956, 0.14303828895994175, 0.13024317924853623, 0.03753624749909845, 9.999999999998899e-05, 0.09417605744210922, 0.005142535050474684, 9.999999999998899e-05, 0.04297417520246671, 0.01295705207261022, 9.999999999998899e-05, 0.025771750536413673, 0.15777379461745844, 0.07172887516543669, 0.081052173029173, 0.060548877361770614, 0.00718075190606815, 0.03199245433821252, 0.1363204525876217, 0.1008075779775931, 0.04502147521612443, 0.1158063947566268, 0.1298607952107752, 0.16001145630200064, 0.08956903472687283, 0.45989786082324935, 0.15697643007444917, 0.2509325387489101, 0.14028536181335582, 0.07483568447224276, 0.1671085750881217, 0.12448139667850078, 0.21178033685304498, 0.06465127736128962, 0.14033129625930307, 0.053903503433597844, 0.08346170343486081, 0.20613979834381668, 0.08434067571928039, 0.5478096993742908, 0.5572698026858179, 0.5461509728394855, 0.54726573737815, 0.5216771584573863, 0.5429483203879959, 0.5232222354733802, 0.5910399519538179, 0.5950851708108305, 0.06122618620049636, 0.06712189733538909, 0.02867934392651117, 0.09011287195172957, 0.08897175802426516, 0.09272182346384195, 0.09638549468688629, 0.16189122979340176, 0.09175614963226797, 0.43570579956507205, 0.1886301964007252, 0.34475856365899027, 0.25277012947120503, 0.2705135470594211, 0.21068258374715565, 0.2495392035223486, 0.15078603455508532, 0.19771023590865267, 0.16855483480183864, 0.23236605828323276, 0.2691516346517705, 0.46610219257399954, 0.22907735650061445, 0.41418928185040527, 0.18618305676379932, 0.33195993235889376, 0.20148586433213622, 0.2350098795596962, 0.2795272931243623, 0.22782710629457592, 0.34561813632504157, 0.1720146873748305, 0.3658128776948735, 0.22463469190290575, 0.273490641459764, 0.16305999472532184, 0.23934845863885867, 0.19993907908964825, 0.19383205058922726, 0.24386074609426245, 0.22338348027644117, 0.20056525942176284, 0.20914868432087974, 0.2371902595480394, 0.20703624201023685, 0.19934309493339264, 0.21051767558546075, 0.17507331321419972, 0.19270819140424156, 0.1873355075955414, 0.22748113441428597, 0.18938780426000557, 0.25506666239856635, 0.1692940443383506, 0.1751553028304752, 0.12407259055805187, 0.17661448593570317, 0.9385440832648587, 0.20114681799183065, 0.9300531380016529, 0.9202872918550142, 0.9229869218532596, 0.935637641206521, 0.7505996512630082, 0.15755299788015342, 0.8574794170173277, 0.21014625012760824, 0.15452058652000267, 0.7243056059025974, 0.7999376724660615, 0.84245449507626, 0.867904901841515, 0.19472527125669858, 0.18179600735342427, 0.18006662631125525, 0.19835700097644282, 0.18807478810012468, 0.19760805896399214, 0.21826990453048545, 0.18087437395395123, 0.18648819218866264, 0.05866981926667236, 0.09090755371640258, 0.10724107774374259, 0.08833875814308301, 0.10073769740823413, 0.14679918369292977, 0.1403778593594458, 0.07738370417401252, 0.0806707053204816]}, "mutation_prompt": null}
{"id": "05db0f6c-db55-4395-82f5-b37bb5fd47b4", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            # Dynamic velocity clamp adjustment\n            dynamic_velocity_clamp = self.velocity_clamp * (1 + 0.1 * (1 - diversity / (self.upper_bound - self.lower_bound)))\n            self.velocities = np.clip(self.velocities, -dynamic_velocity_clamp, dynamic_velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced convergence by introducing dynamic velocity clamp adjustments contingent on diversity measurements.", "configspace": "", "generation": 70, "fitness": 0.31355617552687065, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.8527394869533227, 0.8349397732841092, 0.8625756461675458, 0.6037034565073827, 0.8198841804605546, 0.8542250627444126, 0.8863678150318435, 0.8530278115101114, 0.8441084577527069, 0.7537415037534559, 0.6770360494923249, 0.7067323460717965, 0.6706060802695915, 0.6447088378253782, 0.754731521562501, 0.40473537932929426, 0.04311799051709475, 0.7306971128994757, 0.11859563952484098, 0.11075478864618249, 0.14223214737593426, 0.09319649014149378, 0.15464258183744062, 0.12038079662067558, 0.11153431668853586, 0.17630420659639146, 0.11534661919155442, 0.1415537925891296, 0.07351904648614305, 0.10399070387525111, 0.11004468080072016, 0.11543306535056164, 0.11147554318453512, 0.10108656260175541, 0.08884716912425572, 0.10753769038643879, 0.9231725377029276, 0.9273163200324361, 0.9351772305433421, 0.9314805079940571, 0.9251229522785507, 0.9247375996622003, 0.9364146985255529, 0.9083130280692234, 0.919591918825534, 0.5750470638316347, 0.6772575250002895, 0.636501868008523, 0.6958770584148892, 0.6866649228832475, 0.6034776923715199, 0.47386443131968015, 0.7302664666239733, 0.754393043972435, 0.3602301252622768, 0.14046600873981585, 0.17133604323034268, 0.37483331723403535, 0.5190825395344969, 0.19335896843894862, 0.15189233548499992, 0.17860281930901367, 0.17715263225258127, 0.22378685952200816, 0.12742378273011, 0.3354374956394406, 0.21407718805987885, 0.19449377872318618, 0.21252778233952963, 0.2129943988085644, 0.1291439616286414, 0.1984964135731555, 0.24370743116249027, 0.19176032852738467, 0.13573246302601016, 0.19876387229125725, 0.13545530366206182, 0.1320417752568932, 0.2579804828296406, 0.20340348154452725, 0.1304724347029974, 0.058070575217398224, 0.05026683467194892, 0.1559158587648264, 9.999999999998899e-05, 9.999999999998899e-05, 0.04719881136374349, 0.03974372693473338, 0.010499275531264729, 0.06522057091019395, 0.15124025056170354, 0.08263080913298293, 0.09510447119011989, 0.06586464167246409, 0.005968477792376858, 0.03764859615545624, 0.17776680930897182, 0.09639613987219675, 0.06016077596855518, 0.1480725058854272, 0.18929674917864892, 0.1445480612511859, 0.09682307075717023, 0.27986268609338416, 0.17850227359795023, 0.19839757627642618, 0.16678263244145675, 0.08479443694407252, 0.16902844338759992, 0.09854176287403804, 0.2166774429517353, 0.18610201693209494, 0.15491683985494908, 0.03804267103615189, 0.08207188822472178, 0.08289720205941054, 0.08341072140320993, 0.5348292986861832, 0.4420039288869674, 0.5096960271016555, 0.5433698847072298, 0.5586327108198044, 0.5251499568862295, 0.49113809249922136, 0.504119542868845, 0.535591648683799, 0.04748363748880291, 0.08411443934470209, 0.10650912729631978, 0.11537082480611682, 0.07717465809006008, 0.07724591947303161, 0.09993955093612494, 0.1288526135118242, 0.10281921284719353, 0.20722481353086097, 0.18894711715519852, 0.13809042041780561, 0.2827552905343427, 0.26746700531483536, 0.37559296428587907, 0.3255183757304201, 0.21411081330344306, 0.18086778015271732, 0.18866342380575718, 0.38923325379437357, 0.25017897568729097, 0.3545608262803087, 0.2682866384175734, 0.29989925543141993, 0.24821990146190287, 0.4836385714499931, 0.2327152510941065, 0.24568825196431288, 0.2406478750429465, 0.2654055109170257, 0.4181046641094729, 0.17454273732339165, 0.41034545516236887, 0.22011620150267963, 0.25355291261515467, 0.17381311445538616, 0.2393149991977206, 0.1736124357512916, 0.19164210091038647, 0.22612604638419642, 0.23960786230556286, 0.2509806377825913, 0.2651976964411602, 0.223658593565919, 0.2078861320055463, 0.18370298237003913, 0.2110376566295662, 0.19751644211240704, 0.21603230104498006, 0.19565289567444466, 0.1968016775700454, 0.19302340513387828, 0.24857828405298354, 0.18417790413574542, 0.1264415708329727, 0.12481610067311033, 0.18672261014778635, 0.9306054356246941, 0.20081390483501593, 0.9176063515438777, 0.9224609726548381, 0.9144719153089165, 0.92413368090851, 0.5117440839014438, 0.15712175070617906, 0.6504033624240775, 0.20993815145581485, 0.15493517988780114, 0.6691572817352732, 0.7823295333498186, 0.8162541534667698, 0.7920443992385932, 0.18993522034131904, 0.18372545825529973, 0.18013326004706964, 0.19313193962797937, 0.19302649941894956, 0.2058743728219603, 0.1740631122283317, 0.20934610484917626, 0.1721347837012086, 0.08587428025086696, 0.07700972553604346, 0.08086072100542752, 0.10072712000980666, 0.08768551718456474, 0.09638319874324075, 0.08114774397162527, 0.08261963613361245, 0.11352540311092585]}, "mutation_prompt": null}
{"id": "7bb2cbf7-3862-4aef-8e72-ff7e6738a1a6", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "63d4843e-f1f7-491f-ace4-06b0911aab84", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            mutation_strength = (1 - progress_factor) * 0.1  # Adaptive mutation strength\n            mutation = mutation_strength * np.random.uniform(-1, 1, (self.num_particles, self.dim))\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions) +\n                mutation  # Added adaptive mutation\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced adaptive mutation for increased exploratory behavior in early iterations to enhance convergence.", "configspace": "", "generation": 72, "fitness": 0.248810981242314, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.5175156900809121, 0.5160345537325937, 0.5162956582848454, 0.49473012081452594, 0.5298928561000869, 0.5111972709580958, 0.5147189555930869, 0.5117983288830786, 0.5041026921736895, 0.1646009221439757, 0.14315127220177548, 0.07310000336844225, 0.038104557413526696, 0.0552804964092688, 0.019877641375289024, 0.008192989903804793, 0.022825536387907186, 0.0009840759883796846, 0.10589672243211445, 0.13516738179563093, 0.11014284583388911, 0.10931801946046149, 0.1256520833828767, 0.14953914039965988, 0.0939113275513277, 0.1122844790083527, 0.11042367189070046, 0.07757516128399133, 0.1052702393187166, 0.12799551281430743, 0.10532044455655176, 0.0812523438950995, 0.0645942530727549, 0.0954343198845643, 0.0896398059876563, 0.08934028647782633, 0.9305090217578189, 0.9226574026402485, 0.9362988581782906, 0.9174494683310439, 0.9355699232114915, 0.9164426954082896, 0.9299183481679418, 0.9062163223794968, 0.9141174430383016, 0.3550192976233618, 0.36167513218091285, 0.4176795511305247, 0.3700851679859247, 0.3591936765353224, 0.36080983595024785, 0.36627177933587807, 0.3544366380266122, 0.3776739361867235, 0.7252820175657162, 0.16557775617206139, 0.17074185993332136, 0.21460971554235886, 0.19326294826156787, 0.21663516075026246, 0.23523707148676964, 0.17513842007373004, 0.23515042539022557, 0.22897283417028014, 0.2583689046188433, 0.17675686275614988, 0.17108401260501416, 0.2027285793942386, 0.22700578039805452, 0.17435153097549771, 0.1325106401939623, 0.1864564670965828, 0.19315765395534013, 0.22717046870646973, 0.12009103869383075, 0.1719771887764, 0.17307894694332604, 0.13424123861243664, 0.2737938823817091, 0.19934744793437476, 0.23986140353871943, 0.048573242805038164, 0.05670624475131769, 0.08556055342571012, 0.059686784792385206, 9.999999999998899e-05, 0.0063397238766241815, 0.0036679333582260165, 9.999999999998899e-05, 0.0489227185148442, 0.11778708631203882, 0.08901742926377498, 0.1165684708596969, 0.030355436279319248, 0.0019344192400312377, 0.040859936495818316, 0.09086781047972714, 0.12244714161235193, 0.10317864971713009, 0.012718601131872842, 9.999999999998899e-05, 0.010467966997139255, 0.00084685639977089, 0.00938421636856479, 0.014073886575855066, 0.012368046513616338, 0.015832507527726025, 0.007784315295544575, 0.13791562897484344, 0.1106312767926031, 0.14699896571714544, 0.14167592013283115, 0.1203095872999369, 0.08034408333814969, 0.07645121765264118, 0.10956136986089782, 0.10602283786733446, 0.4596303285418907, 0.4519598797236254, 0.45975191132316096, 0.4467598882256769, 0.4516442283978135, 0.4370692550239219, 0.4454426313994392, 0.47166745019396517, 0.46579629361849206, 0.09093228485312865, 0.15011358099743433, 0.07550223880594242, 0.11185683825451254, 0.10547597332323111, 0.13699472096355636, 0.11769028577319274, 0.12983340824015122, 0.08082732830824857, 0.23524952584947167, 0.3161107645778145, 0.18563954198444688, 0.32502810902138135, 0.25891137586330615, 0.29018204307567796, 0.1806414036275602, 0.27632876491106384, 0.2032042152155813, 0.32762436286413166, 0.328894823368042, 0.23091350778911746, 0.3332789742948228, 0.2525306088800078, 0.2603584967085949, 0.23737940823972026, 0.3279545442283336, 0.3142422817611157, 0.22041927390870086, 0.23873646446870023, 0.2103849558779357, 0.24376384002839357, 0.2067990881335834, 0.23244224950546255, 0.20801091186818954, 0.25677617792291696, 0.22269817254254887, 0.25460830547513347, 0.1842524328852957, 0.23780254927215805, 0.20004147268348982, 0.22782920820696184, 0.18830672558470796, 0.22919189227529746, 0.2419738254791659, 0.2134302356855463, 0.17855366974925124, 0.1740936144131845, 0.18277784911870543, 0.19792897398564702, 0.19750624719840215, 0.19737675050387293, 0.19994533703225637, 0.19462370911308258, 0.17586856852106536, 0.18747982405587205, 0.1260228692381472, 0.15300581181043904, 0.7521526130525358, 0.1684890061244172, 0.8192910655607938, 0.7614028640587769, 0.7681853336080513, 0.8039352158048071, 0.6614844377959959, 0.15731178032271143, 0.6487158230669443, 0.2093422232205413, 0.16777919481703707, 0.7096790974552705, 0.7217100120879332, 0.5300237523964428, 0.5859527864684917, 0.18223644632808123, 0.21095537815379228, 0.17646036213872107, 0.18278284719046112, 0.1815813520000601, 0.17891615088439305, 0.17921065729090657, 0.18097637382299692, 0.1786346052202813, 0.08666144967703437, 0.08800901458112598, 0.06407838573796676, 0.09380983659605446, 0.09287167657946716, 0.1096296103968114, 0.12360814100051742, 0.0784441804181586, 0.11084070762461229]}, "mutation_prompt": null}
{"id": "ae9eb0ac-af23-426a-8743-2c434c418b69", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "59c80947-1cb1-44a1-a2c2-bef98b4b1f43", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "02a27279-58a1-42d2-80f6-6c468d5a5965", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim, initial_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (initial_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (initial_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(initial_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        num_particles = self.positions.shape[0]\n        \n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += num_particles\n\n            for i in range(num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n            \n            if evaluations % (self.budget // 10) == 0 and num_particles < 50:\n                # Add more particles overtime\n                additional_particles = np.random.uniform(self.lower_bound, self.upper_bound, (5, self.dim))\n                self.positions = np.vstack([self.positions, additional_particles])\n                self.velocities = np.vstack([self.velocities, np.random.uniform(-1, 1, (5, self.dim))])\n                self.personal_best_positions = np.vstack([self.personal_best_positions, additional_particles])\n                self.personal_best_scores = np.concatenate([self.personal_best_scores, np.full(5, np.inf)])\n                num_particles = self.positions.shape[0]\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n            \n            # Introduce mutation for further exploration\n            if evaluations % (self.budget // 5) == 0:\n                mutation_indices = np.random.choice(num_particles, int(0.1 * num_particles), replace=False)\n                self.positions[mutation_indices] += np.random.normal(0, 0.1, (len(mutation_indices), self.dim))\n                self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "DynamicMutationPSO", "description": "Introduced a dynamic swarm size and adaptive mutation strategy to enhance exploration and convergence speed.", "configspace": "", "generation": 75, "fitness": 0.3243197857897779, "feedback": "The algorithm DynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.8336139730793152, 0.8627937222757248, 0.8410827037703255, 0.8694459552914722, 0.8807405092162851, 0.8390455844684828, 0.8385317977501904, 0.7965775470488584, 0.8242590453104816, 0.7355786449752979, 0.7286537832810284, 0.7478208021158561, 0.7416329718228838, 0.6562566053011656, 0.7351198503049123, 0.6854492129712555, 0.7666599672114385, 0.7235086873140419, 0.13163654355828458, 0.14050849363056295, 0.137441838133049, 0.11173834913494962, 0.15831253190435823, 0.14091408014454154, 0.09207936945982598, 0.09895711140266716, 0.11117712029371396, 0.10937298745755086, 0.08211110044072734, 0.08612761216604103, 0.09649941144131391, 0.09462534739106154, 0.12153658906777087, 0.11709070039495584, 0.06429180925982969, 0.11179527231640007, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.7092091234666347, 0.5136006522036268, 0.683161312254952, 0.6155896784016253, 0.706342521125286, 0.7222634160580788, 0.723114272300334, 0.4413648991570873, 0.5136623760208583, 0.34870772625071733, 0.17091119961983292, 0.20751062475095727, 0.21479677190818025, 0.21150056263270667, 0.21059171534997756, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.23548206921115755, 0.272178311678549, 0.1320934532232665, 0.24891567158931582, 0.17967407363230925, 0.2597748308405309, 0.20655272476860587, 0.12854376508188048, 0.2100152419343697, 0.2892345038492551, 0.21117483520491764, 0.13511953565444568, 0.2195822351279627, 0.1343321107681611, 0.3724555500291986, 0.24954764633613136, 0.19585391217946524, 0.2170727183120542, 0.1289836076299984, 0.0006771059662018519, 0.0072958421975661825, 0.003001977732907446, 9.999999999998899e-05, 9.999999999998899e-05, 0.001890872513317432, 0.05772949096425506, 0.14321217092144656, 0.17415410430141198, 0.061688345087083096, 0.09795088026865084, 0.08347213442576396, 0.004699628902439468, 0.04963478157025525, 0.13806315109444856, 0.10946161834250356, 0.0859280658303544, 0.20045023207566115, 0.14873531175902677, 0.24069652273786435, 0.09572318106198197, 0.18248574547358876, 0.10684225453760487, 0.2339025537774414, 0.1835366354158262, 0.026463506606554388, 0.14114489435354283, 0.1452186447123751, 0.2718214090480182, 0.13895402784788768, 0.13255464211266077, 0.10089877037850203, 0.08086753211319009, 0.08241487816985082, 0.08405235709339887, 0.5191185307069387, 0.5409593527305792, 0.5579687881994856, 0.594712724226611, 0.49857177013866505, 0.5520695224089212, 0.5399875162754482, 0.5332767791192126, 0.5672093378944203, 0.06946754755207551, 0.06537066648141354, 0.06549306289013224, 0.12211694893609415, 0.1434496105204991, 0.10881070897542244, 0.11683113354715546, 0.10987417817902356, 0.06789158778225624, 0.408749106867379, 0.21962317044001833, 0.21448348938977824, 0.40503018306014094, 0.4174777592233785, 0.3968645356128687, 0.21859486842302933, 0.27167719289749825, 0.2154198573078031, 0.4361442227123843, 0.34450715943739474, 0.2233416553600871, 0.40821869987978987, 0.24385101312525626, 0.5028633132589981, 0.2549005642673905, 0.30744210822056695, 0.5157083109299525, 0.19888416758318472, 0.34137106816363627, 0.2579209759880353, 0.24252339871621675, 0.1888349261088912, 0.30825266163107035, 0.19316090769001426, 0.2210497733079535, 0.23250757039696646, 0.21028725405443105, 0.20741724338995415, 0.20217401091489162, 0.22005821117999758, 0.23534454425809204, 0.21905366104889645, 0.21509592829747437, 0.22408077075384858, 0.21730344026018733, 0.1675247277257682, 0.18962884430024107, 0.17347440673278158, 0.19814613108977053, 0.21274335087898322, 0.19842203950431936, 0.18322998081860997, 0.7546406766239095, 0.18210198257590926, 0.17500303494302993, 0.12440471814778886, 0.17636416604374405, 0.9226594012513867, 0.20105195228546568, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8626882428167062, 0.6327504727708265, 0.15697067229349815, 0.5705363339002713, 0.21062788715739078, 0.1556931668054662, 0.5948591947081971, 0.6888333002619719, 0.8199332432439375, 0.7936417877604456, 0.2004722124266911, 0.1737332917049651, 0.18033132424925136, 0.18570989561320883, 0.17448887736922702, 0.17984206878125497, 0.1874137226388758, 0.1734757133865612, 0.18484997191942099, 0.08720131816029386, 0.07611900592265097, 0.100969827443667, 0.08478283417213628, 0.0955451623851884, 0.07267206664593362, 0.119890640709014, 0.09656756226533658, 0.08285433272281428]}, "mutation_prompt": null}
{"id": "3a85c715-51e6-4cf6-85b9-a3fb27b7320f", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            # Adjusted neighborhood influence based on diversity\n            neighborhood_influence = 0.15 + 0.05 * (diversity / (self.upper_bound - self.lower_bound))\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                neighborhood_influence * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced an adaptive neighborhood influence based on particle diversity to enhance convergence speed.", "configspace": "", "generation": 76, "fitness": 0.31859065302419587, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.8317402095972989, 0.7758356516043762, 0.8581844620783471, 0.8810711016643148, 0.869225033624283, 0.8750393409742419, 0.8738698380886636, 0.8602395780756799, 0.6366268071226094, 0.7515037208799404, 0.7329675613440099, 0.7107209037830686, 0.7373523547704679, 0.7134829026764216, 0.6870185238582318, 0.6783561618380378, 0.6635058019946621, 0.735854557768254, 0.12485705989872498, 0.1249066181258075, 0.14361416452276587, 0.10159432645397737, 0.14283294058899887, 0.1840906681226645, 0.08850274468543362, 0.13392654093095602, 0.11682077347537867, 0.15665671362202793, 0.10619993319649457, 0.11274499219035627, 0.09353407744986852, 0.09576954308403784, 0.09373678446324685, 0.11715281852211357, 0.09847759858171412, 0.06692862686998069, 0.9305301749585199, 0.9326791514811675, 0.9346519089766964, 0.9160054624894373, 0.9224460167090114, 0.9197925914855721, 0.9363161294418515, 0.9031181679263803, 0.9094719650427345, 0.7493109238164106, 0.6924021826397717, 0.7079172813933956, 0.6262405465687947, 0.7348827686852443, 0.6981539302411384, 0.7378894100980854, 0.6947989913150844, 0.6860166285200826, 0.22154293580763862, 0.17091119961983292, 0.17083525028182467, 0.22559601667167295, 0.2637746162748221, 0.15563247733364838, 0.17610619796743743, 0.1528015480831023, 0.23300421934095905, 0.2457552515327207, 0.28877607262939, 0.20431992012494016, 0.24076368552124927, 0.19455772839107455, 0.23723781029478763, 0.19149566546483898, 0.13220444909017792, 0.20096506667435532, 0.25979326607625586, 0.23030574663223546, 0.1353254396171123, 0.22149848215757695, 0.21855140829857111, 0.13128619458773538, 0.2633103160437247, 0.18482555942579615, 0.13190123895071915, 0.041563293515069044, 0.03783533349604584, 0.06853751341787573, 0.03419282740360452, 9.999999999998899e-05, 0.00663725517554381, 9.999999999998899e-05, 9.999999999998899e-05, 0.12778101656593044, 0.11393112918404791, 0.07842805965426813, 0.09085311205859958, 0.058350931111676996, 0.009298210095952109, 0.04542678387680921, 0.1436573316451546, 0.09147165387653244, 0.06107194773430458, 0.23519999987451523, 0.16239890858661843, 0.22367709444328343, 0.063440117128995, 0.1506122145601827, 0.14469772561273964, 0.2557854006954836, 0.23725960403269652, 0.05100013372041334, 0.18539386525289947, 0.09946911105839429, 0.15882941880819212, 0.1086915178593717, 0.1375487512559248, 0.13616306796647826, 0.08204627993946467, 0.08133842264283908, 0.08388303241821449, 0.5324205705479956, 0.5409527103483224, 0.5712626936430136, 0.5752841329076903, 0.5680911343570281, 0.5157292400621969, 0.5437089823124186, 0.574056391188933, 0.5359406838251959, 0.06385839505874868, 0.07232781725120896, 0.08787518890051216, 0.15570544882020843, 0.11874354697600431, 0.11668379635778414, 0.1284770323005876, 0.1358027780762746, 0.07972121571026292, 0.1946785814385349, 0.3795997087862659, 0.20140454385439888, 0.24575420805443926, 0.20146517228686123, 0.21060028712723444, 0.14472851960346722, 0.2995708652143231, 0.1592767020847905, 0.20139618482590804, 0.20572881315340008, 0.4383908055191541, 0.41047934386936324, 0.3314586353602672, 0.3175652326561723, 0.18298134288335954, 0.530879544648919, 0.2585801348698835, 0.24605624363805723, 0.27914327036904607, 0.2804671075819405, 0.24513493174993695, 0.19661617494724692, 0.18119933953862688, 0.16610491350075351, 0.22665962203204526, 0.21452590435555208, 0.2505293909263153, 0.1987505425163989, 0.18994883111734218, 0.22808598552505177, 0.21887017796656283, 0.2388783212388098, 0.2673314442455046, 0.2386396045018785, 0.23324791720287663, 0.177311517434539, 0.1889426959607814, 0.17963945716955843, 0.20570244483579214, 0.209035265282138, 0.2094345962700802, 0.20778097157933473, 0.24195528970533253, 0.18836317991746077, 0.17459269953393797, 0.12355729297868134, 0.17621496557968697, 0.9438209864140225, 0.20112241529197694, 0.9406065978653221, 0.9032143049689054, 0.9021191211166706, 0.9419956494479277, 0.5449182007043176, 0.15665376950896026, 0.6417261769751059, 0.210531338037227, 0.1549638369342714, 0.6089501333392857, 0.7623339904259133, 0.8096133404380641, 0.7328746423214523, 0.18558123181891806, 0.17723559133552658, 0.18593974756910825, 0.19829722988553233, 0.1846200052296607, 0.18349829055151778, 0.17701932258964792, 0.20429988510968355, 0.1829372679118515, 0.09877039736365456, 0.07257057987753979, 0.07436471830413394, 0.09751460352932173, 0.09473942398389412, 0.086325583932653, 0.0759561082640916, 0.08937672631887994, 0.07977485589972455]}, "mutation_prompt": null}
{"id": "9e336b0a-89de-4030-a085-43d5a8bab3cc", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "ac8f0b70-2000-44d6-ab7d-897d16080903", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "e7c4bf56-d30b-4ed4-8776-5ca2115a7092", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "25af39d8-9b97-4cee-824b-c10a8fe2ae2c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "93f0cf3c-6ba3-425f-ba59-0807763f28c8", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            elite_indices = np.argpartition(scores, 5)[:5]  # Select top 5 performing particles\n            elite_best = np.mean(self.positions[elite_indices], axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions) +\n                0.10 * np.random.rand(self.num_particles, self.dim) * (elite_best - self.positions)  # Added elite influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced an elite selection mechanism for improving convergence speed by leveraging the best-performing particles.", "configspace": "", "generation": 81, "fitness": 0.31550222965005986, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.878327373589984, 0.8273356990547536, 0.8177964594244596, 0.8666467471161441, 0.8605417807047173, 0.8461687416691871, 0.8746143899597525, 0.8634086647614789, 0.8596881516162777, 0.7238377757771892, 0.7213175217596968, 0.7635397504013836, 0.7480994533617628, 0.04323458312227901, 9.999999999998899e-05, 0.7335688703543881, 0.7096457606929176, 0.7645072958979339, 0.1216182790447552, 0.15494869269869105, 0.09618172619009147, 0.10304519173174864, 0.15656531797379125, 0.1256465418782593, 0.11638149424814925, 0.11682305487042488, 0.15580636113518376, 0.172440553914741, 0.09162515083084077, 0.08299233300283049, 0.09951713089268, 0.10311723815871243, 0.10848050858225577, 0.07838963171803681, 0.06866216346173593, 0.10887106937650481, 0.9288475907890948, 0.9214161066500998, 0.926737632322473, 0.9148893071233339, 0.9208944547126161, 0.9006559404730776, 0.9280703625875785, 0.8830183640582888, 0.8829164606213956, 0.6996779084771052, 0.7284646433487586, 0.7117209479464958, 0.7585316661971726, 0.6820974680637506, 0.6918433737481926, 0.4031858023811036, 0.5431619442296931, 0.7221354876232631, 0.2391989964836847, 0.11508547735755437, 0.11845917119415461, 0.28152181349087113, 0.2130664619022299, 0.19343182553756155, 0.15175346528978584, 0.15206134643596925, 0.17845099332740788, 0.25206839222042987, 0.12810744556888476, 0.20381741504179918, 0.25170008503996, 0.22263278035541278, 0.19782860283230452, 0.2184398916169863, 0.40689845975175243, 0.20922433917649408, 0.21601181890435772, 0.20753248717273087, 0.1325241799994341, 0.23826534761039497, 0.13450372406861877, 0.13194190936393368, 0.2555311722709477, 0.24029082256912115, 0.25224183407232226, 0.12245692936179531, 0.06424530449244881, 0.09405291847402697, 0.07894831446259143, 9.999999999998899e-05, 0.08988844601725199, 0.007998208167801613, 0.011800152973671207, 0.013979843722842444, 0.20368948769550665, 0.06463061329089215, 0.11198231726342345, 0.0664362902016723, 0.020116989194269963, 0.04270077146302753, 0.1221688948431332, 0.10161462385190334, 0.06867416257770087, 0.11505703814965074, 0.3019627336355105, 0.08930862921716065, 0.11950622041219017, 0.14584325035451506, 0.1864209402790621, 0.21981691875251197, 0.06285329045273558, 0.07694880002943805, 0.3247661183396029, 0.22546680007909548, 0.16834276983491758, 0.11762906393062222, 0.11694270835608511, 0.1993751032263512, 0.0810020598498028, 0.12830525439348217, 0.08358183276266495, 0.4759755013258584, 0.5328478033852484, 0.5640029782284792, 0.533843040250894, 0.567983700371494, 0.5369060150907599, 0.551813078590629, 0.6161341750266002, 0.5397431424689298, 0.0677842795173279, 0.062408007919936614, 0.051858382495547084, 0.17362926609354912, 0.10503969118683254, 0.10086606837197254, 0.10789720263771363, 0.14257388160464923, 0.10302244926859527, 0.33408609718556503, 0.1772246026973926, 0.22285961965464218, 0.26681857581686275, 0.33694366399676434, 0.19470137059788117, 0.16068763074359227, 0.2527163820467918, 0.28775344470045694, 0.4025058363353282, 0.3089698406061604, 0.38360773453312647, 0.3414642686291104, 0.24082010143382104, 0.37538916018893265, 0.22353985272594634, 0.2899482375781922, 0.4045778448908134, 0.2425601077345635, 0.26643304410189983, 0.19331470244067883, 0.35988201262355535, 0.17452796122491332, 0.2745782848023782, 0.20945278087161, 0.3095654302108516, 0.2061309955247156, 0.2610112794927534, 0.1964448773606886, 0.19998617223826143, 0.28335650815378266, 0.24025448599906152, 0.20907531383568279, 0.28652875037650216, 0.23663745298513816, 0.23744318211100157, 0.1881286990982537, 0.2090169303903473, 0.17208741219148327, 0.18103964035433628, 0.20448564626477084, 0.2006628849504105, 0.198093817637101, 0.2088747395142999, 0.18393614394574764, 0.12528686419398927, 0.1750971825611316, 0.15371382004984313, 0.9407048038542394, 0.20124848608078116, 0.9305918542514002, 0.8763185345585794, 0.9171408637457723, 0.9318665099490734, 0.6020745254614495, 0.15704184526268605, 0.7431565492026706, 0.21036057648666528, 0.16804325389456642, 0.8998074807576736, 0.10485754471464936, 0.8194337875282549, 0.819273999123965, 0.1857895754107588, 0.1788052412951614, 0.1945508703614235, 0.19098102168985642, 0.18763467486201435, 0.18879804602956596, 0.18552274885836828, 0.17423459840124, 0.1888228395854532, 0.07461532021270034, 0.07248523530606255, 0.08466952466636468, 0.10023735826621782, 0.10998910805586515, 0.10118444923153325, 0.11583989840342712, 0.07999143340251214, 0.0828980149741465]}, "mutation_prompt": null}
{"id": "5150ffa4-f9a2-4973-98f1-ed33de07f7f5", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "dd101c94-4f28-46ad-b4c0-b138b1db53c4", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "474210e2-e982-4497-aae1-92a3f287d4f1", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "6432d844-78e9-4289-9508-df09a01147d1", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced a local neighborhood best influence to enhance local search capabilities, improving convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.834774370338315, 0.8632536955929163, 0.8592077440716324, 0.8694459552914722, 0.8807405092162851, 0.863263731041773, 0.8385208677742049, 0.8144525861187452, 0.8266222572580628, 0.7379482206355353, 0.7002218496904795, 0.7440155239576536, 0.7374856643330373, 0.6714193338758271, 0.7369194621502173, 0.7101457175864205, 0.7537879584502178, 0.6241452365713, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475566898889, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372372, 0.5854940556039927, 0.7074062967303727, 0.6373644882062646, 0.5951232179616204, 0.727126610122803, 0.7330727677142632, 0.6282029284411765, 0.6466347701170099, 0.3514903538897802, 0.17091119961983292, 0.17061210644228286, 0.21479677190818025, 0.21150056263270667, 0.2114057815589575, 0.1308736789187407, 0.23409824984124283, 0.15196605304074962, 0.22392354190029684, 0.27194294265147045, 0.13216259417744947, 0.2502580647429997, 0.19664463055115533, 0.25844966036571215, 0.20803525679031631, 0.12844284844397424, 0.20710083811319846, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616648, 0.25182975864638457, 0.20579809690500883, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859171, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044704707, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842872686, 0.14873588616012967, 0.24277804901163635, 0.09471830542951232, 0.18250649643956351, 0.10661888599685299, 0.22513855651724746, 0.18449558981151815, 0.0493265780582095, 0.1418816408850726, 0.14521320090056744, 0.2720819257226914, 0.1390303067881159, 0.13255464211266077, 0.10092619333261954, 0.08087384003787323, 0.08241538244491331, 0.08391482607828127, 0.5227689450762639, 0.515430643377762, 0.582118589446085, 0.5720824728432032, 0.4975940816060913, 0.5423422222056216, 0.5375652738461107, 0.5564958343470292, 0.5506132386050833, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187250818418, 0.22137048589075892, 0.21614632456916993, 0.46055493153288585, 0.3677815591576197, 0.40366096497427784, 0.2151980170084402, 0.2912469263067956, 0.21617699034939064, 0.43955152571322054, 0.34539998714568043, 0.2233048581441961, 0.3573757709922113, 0.24633028005120716, 0.5009470977981324, 0.2553569937909137, 0.30744210822056695, 0.6087528397695134, 0.22202260675604024, 0.3420054183483714, 0.26221650612807956, 0.24304698255704926, 0.18311283939533773, 0.30810161160059224, 0.19256208526645746, 0.2210497733079535, 0.23710896064033826, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636828, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869441558, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541956, 0.6573594347748757, 0.1569718505336003, 0.5932579225434809, 0.21062788698535861, 0.15569258071861825, 0.5143585449678243, 0.6910241155992785, 0.8120689323549732, 0.7804821968415985, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "75910f8d-23b8-4b2b-9cac-18c1fe25f933", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_positions = self.positions[np.argpartition(scores, 3)[:3]]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n            \n            neighborhood_influence = 0.1 + 0.05 * np.sin(2 * np.pi * evaluations / self.budget)  # Dynamic influence\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                neighborhood_influence * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced velocity update by integrating a dynamic local neighborhood influence to balance exploration and exploitation.", "configspace": "", "generation": 86, "fitness": 0.3156350491303833, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.39214252735876465, 0.7809375942213984, 0.8329808300285151, 0.8631678306099115, 0.5457174007463309, 0.8279684722783731, 0.8294422234257608, 0.8403604672020606, 0.7674057813369132, 0.6209641449054619, 0.7464478118172656, 0.7383584485879783, 0.08169955828459585, 0.7373965094731576, 0.7330314674347986, 0.6627144518264362, 0.7095343910046592, 0.7278325250147031, 0.12041785949759487, 0.09829983883446436, 0.13921145317577843, 0.08660274014274505, 0.13243764250347034, 0.14302108051304185, 0.11043165603649507, 0.1411903104432498, 0.11405707071411597, 0.10730503405164182, 0.11081531776949727, 0.07088492643701161, 0.10829259575934447, 0.09370556348088321, 0.07625193066001557, 0.08894599633931144, 0.08186036153942111, 0.07673271697891015, 0.9279285987030752, 0.9304298733026451, 0.9342653212557482, 0.9285105422946798, 0.9193462144933557, 0.9047030482652727, 0.9388268382180065, 0.9010274776317511, 0.9043066491879406, 0.7499791441285371, 0.6760691905849192, 0.7094563939549251, 0.5653078639522369, 0.4841107520025031, 0.6697876244748349, 0.7309228642863705, 0.6806857615029345, 0.7282007156539522, 0.22950802643168366, 0.16304466837107412, 0.11857230425887466, 0.34046023356651045, 0.2758048578347829, 0.21232559790537453, 0.15152072680308704, 0.17856978990346362, 0.15179354524189692, 0.30043202267967895, 0.3066864524126507, 0.17431076323251582, 0.23182672846731622, 0.19558631286905692, 0.2424446032035975, 0.1898025280196166, 0.12886988180198589, 0.1306970704648336, 0.22482565967684964, 0.23410632713984902, 0.13517586593518205, 0.19935472553888844, 0.178516083370014, 0.40339057823385815, 0.2383181098062903, 0.21743354645123159, 0.21828687108700506, 0.08507487620334575, 0.058061218997816244, 0.041747416921298686, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005962354025749184, 0.007387234657493691, 0.011610150157596588, 0.07122069669004139, 0.19992543643878002, 0.08572500010019213, 0.11435588306021294, 0.09096156505644026, 0.016050544774934172, 0.02692971341769057, 0.11339336238806885, 0.08037105786074739, 0.0474724266712927, 0.3336074306002793, 0.12776599346439377, 0.10734418963083459, 0.0745971668224169, 0.22957479832361993, 0.189828679357252, 0.1674982615565075, 0.13049984203598486, 0.06558751760344717, 0.13756946818494997, 0.11064160254557354, 0.2438011713967928, 0.12176047245592725, 0.24206803959278744, 0.054167824486549554, 0.08191645260272085, 0.08276624160648482, 0.08377670101549994, 0.5175836618698872, 0.5208836964184673, 0.5850607417958744, 0.5594727364059544, 0.5506197615852035, 0.5602816204685794, 0.5515885090194925, 0.554140251160647, 0.5930852890552823, 0.09110933361584816, 0.08739223086217518, 0.08699940255580751, 0.12308110652343729, 0.14130775384067618, 0.21723881985124727, 0.12469931699280312, 0.1539774982349913, 0.06466182995735015, 0.32183937878549373, 0.15119666874657267, 0.2623385259400538, 0.17908801632885885, 0.33348098094697487, 0.29631123600101306, 0.38567569350000575, 0.38713769928699726, 0.19944414804963373, 0.28416579571303924, 0.44457021753867587, 0.40812320036769567, 0.31478339407843037, 0.25697460648531933, 0.45512581890163983, 0.24071643289131384, 0.5744686667520265, 0.2517535424680073, 0.22479382939620318, 0.32156419895761357, 0.2547115170880335, 0.29582665908557737, 0.1794259133738949, 0.17117871342710145, 0.2001114755681822, 0.23536399488400028, 0.1845282692762643, 0.20800030746940246, 0.22354900167799263, 0.2121458652456255, 0.2162093030013994, 0.22708118285244194, 0.1967169120163056, 0.2562177267996898, 0.23521650066415856, 0.21696997250413508, 0.17568060013891096, 0.20978969079444054, 0.18917936298489058, 0.1935391951542731, 0.20018431334268172, 0.20229200338826592, 0.18871423929474052, 0.21103364215395237, 0.181964159808637, 0.17515730724701262, 0.11844699375489787, 0.1535706562137158, 0.933680367050993, 0.19976983621177957, 0.8898110335730254, 0.906110243973475, 0.9114061846290314, 0.860071359606327, 0.8069085024170017, 0.1567162145976987, 0.7123578005399867, 0.20974017623072494, 0.15489398985686798, 0.577929295248337, 0.7103735482506404, 0.8175999210798541, 0.768482363395535, 0.18445051017789738, 0.17591668114012482, 0.1747572055733474, 0.1743871134572068, 0.17920634815948489, 0.1928730530740369, 0.18360815388420337, 0.18130496744466107, 0.1961922122856572, 0.09071029723650026, 0.08410516556761571, 0.09123435844012096, 0.08936828832911192, 0.08829732420319159, 0.077140226329791, 0.09058750022864492, 0.08978704351525835, 0.09790227877927515]}, "mutation_prompt": null}
{"id": "2fafb57b-cfb6-4dba-bc62-690ec8b2b812", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]  # Select top performers\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced neighborhood best influence by selecting top performers, potentially improving convergence speed.", "configspace": "", "generation": 87, "fitness": 0.32611515993619333, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "20aad3ff-d9be-46cf-a717-22bf4bbc0135", "metadata": {"aucs": [0.8347743703383679, 0.86325369559289, 0.8592077440716283, 0.8694459552914984, 0.8807405092162878, 0.8632637310417455, 0.8385208677742314, 0.8144525861187326, 0.8266222572580604, 0.7379482206302908, 0.7002218496996184, 0.744015523958492, 0.737485664332135, 0.6714193338755967, 0.7369194621463231, 0.7101457176012226, 0.7537879584532677, 0.6241452365218629, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475567879793, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372062, 0.5854940556045426, 0.7074062967312547, 0.6373644882175358, 0.595123217962274, 0.7271266101238572, 0.7330727677143913, 0.6282029275814123, 0.6466347701169256, 0.33801922988036315, 0.17091119961983292, 0.17065261212693916, 0.21479677190818025, 0.27823996066723133, 0.2120460248309477, 0.13087592835888284, 0.23406964553259169, 0.15196605304074962, 0.22392354190029684, 0.27194294265146757, 0.13216259417744947, 0.2502580647430014, 0.19664463055115844, 0.2584496603657158, 0.20803525679032786, 0.12844284844397424, 0.20710083811320035, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616636, 0.2518297586463829, 0.20579809690500717, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859393, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044707715, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842871764, 0.14873588616012712, 0.2427780490116377, 0.09471830542951232, 0.18250649643956818, 0.10661888599684466, 0.225138556517248, 0.18449558981152048, 0.0493265780582095, 0.14188164088507405, 0.14521320090056744, 0.2720819257233744, 0.1390303067881158, 0.13255464211266077, 0.10092619333261954, 0.0808738400378688, 0.08241538244491309, 0.08391482607828127, 0.5227689450762313, 0.5154306433777542, 0.5821185894460336, 0.5720824728432218, 0.497594081606065, 0.5423422222056049, 0.5375652738461135, 0.5564958343471702, 0.5506132386050839, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187251266063, 0.2213704858907467, 0.21614632456916927, 0.4605549315327395, 0.3677815591574757, 0.40366096497425985, 0.21519801700841512, 0.29124692630679494, 0.21617699034938187, 0.43955152571309075, 0.34540000396573345, 0.22330485815412637, 0.3573757709906774, 0.2463302800217705, 0.5009470979336177, 0.25535699365571995, 0.30744210822056695, 0.6087536340079093, 0.22202260673114094, 0.3420054181692419, 0.2622165062103844, 0.24304698255704338, 0.18311283939569312, 0.3081016117824943, 0.1925620852748351, 0.2210497733079535, 0.23710896055674835, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636495, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869330786, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541948, 0.6573594347748772, 0.1569718505336003, 0.5932579225434707, 0.21062788698535861, 0.15569258071861825, 0.5143585448663962, 0.6910241155961694, 0.8120689323549766, 0.7804821968416031, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "a561ad4a-050c-47c9-b8b9-817b3dcd52f8", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]  # Select top performers\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced neighborhood best influence by selecting top performers, potentially improving convergence speed.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2fafb57b-cfb6-4dba-bc62-690ec8b2b812", "metadata": {"aucs": [0.8347743703383679, 0.86325369559289, 0.8592077440716283, 0.8694459552914984, 0.8807405092162878, 0.8632637310417455, 0.8385208677742314, 0.8144525861187326, 0.8266222572580604, 0.7379482206302908, 0.7002218496996184, 0.744015523958492, 0.737485664332135, 0.6714193338755967, 0.7369194621463231, 0.7101457176012226, 0.7537879584532677, 0.6241452365218629, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475567879793, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372062, 0.5854940556045426, 0.7074062967312547, 0.6373644882175358, 0.595123217962274, 0.7271266101238572, 0.7330727677143913, 0.6282029275814123, 0.6466347701169256, 0.33801922988036315, 0.17091119961983292, 0.17065261212693916, 0.21479677190818025, 0.27823996066723133, 0.2120460248309477, 0.13087592835888284, 0.23406964553259169, 0.15196605304074962, 0.22392354190029684, 0.27194294265146757, 0.13216259417744947, 0.2502580647430014, 0.19664463055115844, 0.2584496603657158, 0.20803525679032786, 0.12844284844397424, 0.20710083811320035, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616636, 0.2518297586463829, 0.20579809690500717, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859393, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044707715, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842871764, 0.14873588616012712, 0.2427780490116377, 0.09471830542951232, 0.18250649643956818, 0.10661888599684466, 0.225138556517248, 0.18449558981152048, 0.0493265780582095, 0.14188164088507405, 0.14521320090056744, 0.2720819257233744, 0.1390303067881158, 0.13255464211266077, 0.10092619333261954, 0.0808738400378688, 0.08241538244491309, 0.08391482607828127, 0.5227689450762313, 0.5154306433777542, 0.5821185894460336, 0.5720824728432218, 0.497594081606065, 0.5423422222056049, 0.5375652738461135, 0.5564958343471702, 0.5506132386050839, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187251266063, 0.2213704858907467, 0.21614632456916927, 0.4605549315327395, 0.3677815591574757, 0.40366096497425985, 0.21519801700841512, 0.29124692630679494, 0.21617699034938187, 0.43955152571309075, 0.34540000396573345, 0.22330485815412637, 0.3573757709906774, 0.2463302800217705, 0.5009470979336177, 0.25535699365571995, 0.30744210822056695, 0.6087536340079093, 0.22202260673114094, 0.3420054181692419, 0.2622165062103844, 0.24304698255704338, 0.18311283939569312, 0.3081016117824943, 0.1925620852748351, 0.2210497733079535, 0.23710896055674835, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636495, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869330786, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541948, 0.6573594347748772, 0.1569718505336003, 0.5932579225434707, 0.21062788698535861, 0.15569258071861825, 0.5143585448663962, 0.6910241155961694, 0.8120689323549766, 0.7804821968416031, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "9cdafef5-58ce-4505-a222-b60f2f1dc714", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]  # Select top performers\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            scaling_factor = 1.0 + 0.05 * np.sin(progress_factor * np.pi)  # Strategic velocity scaling\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            ) * scaling_factor  # Apply scaling factor\n\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Incorporate strategic velocity scaling based on progress to improve convergence dynamics.", "configspace": "", "generation": 89, "fitness": 0.31957727665004365, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "2fafb57b-cfb6-4dba-bc62-690ec8b2b812", "metadata": {"aucs": [0.826003712288813, 0.8638706218484576, 0.8712437595478271, 0.8337105775521132, 0.8339640164767855, 0.8245084405892, 0.8657196576238384, 0.8050372607010672, 0.7546379043922311, 0.6628162799880596, 0.7230077736107872, 0.7261597122868493, 0.5442477505499583, 0.6993137919130517, 0.6478185797832934, 0.687321013294617, 0.7048739278477556, 0.7170248149678268, 0.12076986184800842, 0.12665421068773575, 0.1131347912796895, 0.1115771407475733, 0.15511460217664286, 0.15138912318956577, 0.1083121177133407, 0.1288441832445102, 0.11103432473847297, 0.12154895586370762, 0.08123042592887053, 0.08337009000803841, 0.10758576897249272, 0.09174656233389233, 0.09444883277903515, 0.11473252394813571, 0.07883985545121619, 0.11103394120041299, 0.9302043563131828, 0.9327498312686641, 0.9326168022810749, 0.9238677591519248, 0.9163546029339158, 0.9202767815889795, 0.9360999045284819, 0.9085448756296612, 0.9219609171412764, 0.6622604022131899, 0.643788411708927, 0.6022168885983343, 0.7037793635899319, 0.6239215693274156, 0.6601257796204545, 0.6779989264760389, 0.7150443870251904, 0.6824583717136167, 0.3509427622924831, 0.17091119961983292, 0.21146987082622093, 0.22097383337316934, 0.2096051756118028, 0.21266222944761548, 0.13087592835888284, 0.23156035582421386, 0.17724642222400977, 0.2386144558862071, 0.3228675662755571, 0.18264013005641644, 0.18321689475778058, 0.18763775510271952, 0.2528939291419583, 0.20548809803380208, 0.13104322102466737, 0.189755926892212, 0.29132040361024314, 0.20736822431438062, 0.13551897180288286, 0.2435774091101025, 0.1347876734660044, 0.3998764916585704, 0.24688667561593325, 0.17620173368251435, 0.22188586310272884, 0.007098871149638253, 0.08121311545964305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007137279391798423, 0.002426924300618527, 0.012075193388082495, 0.17627598806399125, 0.12516986441814082, 0.05284712250407242, 0.08223647124703726, 0.08956989863967535, 0.008393004121200809, 0.057257904511625934, 0.1305967260294736, 0.0729076848760094, 0.0748654998560907, 0.1857768912663068, 0.15445021654740743, 0.1791686260148423, 0.09285719260646708, 0.15822720550329472, 0.16178312406100703, 0.2632251230410074, 0.14824287908613465, 0.07165167109694792, 0.19669619965158813, 0.1382781070176825, 0.2605412425678383, 0.1572692613459612, 0.12608679639156783, 0.11181160650170519, 0.08114679659313073, 0.0827421205835428, 0.08450592878624208, 0.5096394517203189, 0.5466890338668686, 0.6026179089736807, 0.5325643079881068, 0.5126631018606054, 0.5084403210169184, 0.5574936393553978, 0.509170901533631, 0.603736951456573, 0.06465871266634149, 0.06871792209458782, 0.0488484996640316, 0.11609502099445868, 0.14270523398180135, 0.09572957855474051, 0.13827537268908996, 0.11055528420364968, 0.09313978135318723, 0.358474385528192, 0.1863661852140137, 0.18500039581131056, 0.22549322156166207, 0.44054661993707456, 0.24236986569625762, 0.1703544109253573, 0.3809355412367186, 0.1549508078194094, 0.4699684342973459, 0.3328757090969331, 0.24982015223762377, 0.3964385661441888, 0.22989470753844932, 0.49883453162962665, 0.2518770550734136, 0.42024763201413085, 0.25972935054051205, 0.22695514500216873, 0.2508393937826816, 0.23908238959600114, 0.2783558817245012, 0.16345311670494334, 0.24073659498117284, 0.20315276158188111, 0.2755479290812577, 0.2432652623008379, 0.20557645829630533, 0.20989695187361945, 0.18656848651487068, 0.19309182044724027, 0.24404177957044126, 0.22016919020515613, 0.21580588285568292, 0.20975585911555028, 0.23574574509067825, 0.17776841751026573, 0.20143185236864214, 0.18873637877291083, 0.19199867893320743, 0.1950230669906674, 0.19881306477892746, 0.1852491703207586, 0.7488717729189676, 0.18053743118447785, 0.17531147866986085, 0.1244070262125444, 0.17656957045057675, 0.9073616071943938, 0.20105251883007114, 0.9208929940191342, 0.8836034140823894, 0.9114144870823614, 0.8952030918176932, 0.6212938325934716, 0.15696293961063312, 0.480147942721579, 0.21067145388152564, 0.1557092429898017, 0.6771401136629391, 0.7518687939621622, 0.6686513298862464, 0.742271093948466, 0.18574874400402897, 0.18485356317715707, 0.180691201498967, 0.17336342085581669, 0.17241335743843245, 0.1833527773322755, 0.19120394799948348, 0.18329724310002093, 0.1968793370531564, 0.09755422543861403, 0.07425301440187704, 0.0810000015858594, 0.09243056854683307, 0.09080201657303366, 0.07148029251507138, 0.10319884219617503, 0.095207824860431, 0.08446079121951167]}, "mutation_prompt": null}
{"id": "047adc78-8a6c-48ad-b047-279402a2b3bf", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]  # Select top performers\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced neighborhood best influence by selecting top performers, potentially improving convergence speed.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2fafb57b-cfb6-4dba-bc62-690ec8b2b812", "metadata": {"aucs": [0.8347743703383679, 0.86325369559289, 0.8592077440716283, 0.8694459552914984, 0.8807405092162878, 0.8632637310417455, 0.8385208677742314, 0.8144525861187326, 0.8266222572580604, 0.7379482206302908, 0.7002218496996184, 0.744015523958492, 0.737485664332135, 0.6714193338755967, 0.7369194621463231, 0.7101457176012226, 0.7537879584532677, 0.6241452365218629, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475567879793, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372062, 0.5854940556045426, 0.7074062967312547, 0.6373644882175358, 0.595123217962274, 0.7271266101238572, 0.7330727677143913, 0.6282029275814123, 0.6466347701169256, 0.33801922988036315, 0.17091119961983292, 0.17065261212693916, 0.21479677190818025, 0.27823996066723133, 0.2120460248309477, 0.13087592835888284, 0.23406964553259169, 0.15196605304074962, 0.22392354190029684, 0.27194294265146757, 0.13216259417744947, 0.2502580647430014, 0.19664463055115844, 0.2584496603657158, 0.20803525679032786, 0.12844284844397424, 0.20710083811320035, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616636, 0.2518297586463829, 0.20579809690500717, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859393, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044707715, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842871764, 0.14873588616012712, 0.2427780490116377, 0.09471830542951232, 0.18250649643956818, 0.10661888599684466, 0.225138556517248, 0.18449558981152048, 0.0493265780582095, 0.14188164088507405, 0.14521320090056744, 0.2720819257233744, 0.1390303067881158, 0.13255464211266077, 0.10092619333261954, 0.0808738400378688, 0.08241538244491309, 0.08391482607828127, 0.5227689450762313, 0.5154306433777542, 0.5821185894460336, 0.5720824728432218, 0.497594081606065, 0.5423422222056049, 0.5375652738461135, 0.5564958343471702, 0.5506132386050839, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187251266063, 0.2213704858907467, 0.21614632456916927, 0.4605549315327395, 0.3677815591574757, 0.40366096497425985, 0.21519801700841512, 0.29124692630679494, 0.21617699034938187, 0.43955152571309075, 0.34540000396573345, 0.22330485815412637, 0.3573757709906774, 0.2463302800217705, 0.5009470979336177, 0.25535699365571995, 0.30744210822056695, 0.6087536340079093, 0.22202260673114094, 0.3420054181692419, 0.2622165062103844, 0.24304698255704338, 0.18311283939569312, 0.3081016117824943, 0.1925620852748351, 0.2210497733079535, 0.23710896055674835, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636495, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869330786, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541948, 0.6573594347748772, 0.1569718505336003, 0.5932579225434707, 0.21062788698535861, 0.15569258071861825, 0.5143585448663962, 0.6910241155961694, 0.8120689323549766, 0.7804821968416031, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "19f3e2be-3182-453e-ba3c-673b19c19442", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]  # Select top performers\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced neighborhood best influence by selecting top performers, potentially improving convergence speed.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2fafb57b-cfb6-4dba-bc62-690ec8b2b812", "metadata": {"aucs": [0.8347743703383679, 0.86325369559289, 0.8592077440716283, 0.8694459552914984, 0.8807405092162878, 0.8632637310417455, 0.8385208677742314, 0.8144525861187326, 0.8266222572580604, 0.7379482206302908, 0.7002218496996184, 0.744015523958492, 0.737485664332135, 0.6714193338755967, 0.7369194621463231, 0.7101457176012226, 0.7537879584532677, 0.6241452365218629, 0.13168676045572958, 0.14050876849806793, 0.13743954961802296, 0.11173834153084117, 0.15831251050264217, 0.14091406946753537, 0.0936454702671039, 0.10424397810063368, 0.11262689172401497, 0.10937298943955998, 0.0820891343269845, 0.08612770746119991, 0.09649941134387541, 0.09489948355556788, 0.12153672047667274, 0.11709684586189306, 0.05505656804997183, 0.11018475567879793, 0.9305589930362036, 0.9326818704933683, 0.932598499767126, 0.9236389095281996, 0.9244441891327151, 0.9197582204113681, 0.9359784312666458, 0.9040413565286314, 0.9200112706250012, 0.4800004922372062, 0.5854940556045426, 0.7074062967312547, 0.6373644882175358, 0.595123217962274, 0.7271266101238572, 0.7330727677143913, 0.6282029275814123, 0.6466347701169256, 0.33801922988036315, 0.17091119961983292, 0.17065261212693916, 0.21479677190818025, 0.27823996066723133, 0.2120460248309477, 0.13087592835888284, 0.23406964553259169, 0.15196605304074962, 0.22392354190029684, 0.27194294265146757, 0.13216259417744947, 0.2502580647430014, 0.19664463055115844, 0.2584496603657158, 0.20803525679032786, 0.12844284844397424, 0.20710083811320035, 0.2913315585246473, 0.20847088557882876, 0.13541420730530662, 0.2268081603504375, 0.1343018021387421, 0.3755764122616636, 0.2518297586463829, 0.20579809690500717, 0.2160974621914733, 0.12880699075453617, 9.999999999998899e-05, 0.007811794137667305, 0.004403914172359524, 9.999999999998899e-05, 9.999999999998899e-05, 0.002163615476859393, 0.05781584426188513, 0.14958749022376328, 0.15600269608013262, 0.060494856864164115, 0.09260256044707715, 0.08444881333378584, 0.00355308671648924, 0.05038031867311743, 0.12919846390380985, 0.09772130305448079, 0.08314265231982298, 0.20034905842871764, 0.14873588616012712, 0.2427780490116377, 0.09471830542951232, 0.18250649643956818, 0.10661888599684466, 0.225138556517248, 0.18449558981152048, 0.0493265780582095, 0.14188164088507405, 0.14521320090056744, 0.2720819257233744, 0.1390303067881158, 0.13255464211266077, 0.10092619333261954, 0.0808738400378688, 0.08241538244491309, 0.08391482607828127, 0.5227689450762313, 0.5154306433777542, 0.5821185894460336, 0.5720824728432218, 0.497594081606065, 0.5423422222056049, 0.5375652738461135, 0.5564958343471702, 0.5506132386050839, 0.06946771494196924, 0.06742184450820332, 0.06549337375238451, 0.12200422422992596, 0.14344955087135114, 0.10881412459377349, 0.11683113354715546, 0.10987914924404207, 0.070040693692344, 0.5717187251266063, 0.2213704858907467, 0.21614632456916927, 0.4605549315327395, 0.3677815591574757, 0.40366096497425985, 0.21519801700841512, 0.29124692630679494, 0.21617699034938187, 0.43955152571309075, 0.34540000396573345, 0.22330485815412637, 0.3573757709906774, 0.2463302800217705, 0.5009470979336177, 0.25535699365571995, 0.30744210822056695, 0.6087536340079093, 0.22202260673114094, 0.3420054181692419, 0.2622165062103844, 0.24304698255704338, 0.18311283939569312, 0.3081016117824943, 0.1925620852748351, 0.2210497733079535, 0.23710896055674835, 0.2134854161801898, 0.20818747136841664, 0.20217401091489162, 0.20640081488182926, 0.24733073274611284, 0.22080104918001342, 0.23347105876844365, 0.2513965983477353, 0.23509247312871417, 0.16768103773139864, 0.1892363679291693, 0.17347440673012626, 0.19814613817636495, 0.21275966909568433, 0.1984220277568175, 0.18322998081860997, 0.7605128869330786, 0.18210195642799598, 0.17498666782290273, 0.12388875392272714, 0.176358951502962, 0.9226594012513867, 0.20105195227936823, 0.9259306314462735, 0.9023520391632736, 0.9201697544611341, 0.8607875393541948, 0.6573594347748772, 0.1569718505336003, 0.5932579225434707, 0.21062788698535861, 0.15569258071861825, 0.5143585448663962, 0.6910241155961694, 0.8120689323549766, 0.7804821968416031, 0.2004722124266911, 0.18543406591389766, 0.17656954208756415, 0.18570989561320883, 0.1838208644635133, 0.1805830049123851, 0.20351703976311042, 0.17785639386321495, 0.18505346114107124, 0.08777701343198696, 0.07611900592265097, 0.100969827443667, 0.08461464789935802, 0.09352368161056257, 0.0708036948288705, 0.119890640709014, 0.09042924502370919, 0.08319204378799494]}, "mutation_prompt": null}
{"id": "d49c32f3-af8a-42a4-954e-59c8562e5235", "solution": "import numpy as np\n\ndef logistic_map(n, x0=0.5, r=3.9):\n    x = x0\n    for _ in range(n):\n        x = r * x * (1 - x)\n    return x\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        iteration = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            diversity = np.mean(np.std(self.positions, axis=0))\n            chaotic_factor = logistic_map(iteration)\n            adaptive_cognitive_param = self.cognitive_param + chaotic_factor * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + chaotic_factor * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]  # Select top performers\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            iteration += 1\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Incorporating chaotic maps for parameter adaptation to enhance exploration and exploitation balance.", "configspace": "", "generation": 92, "fitness": 0.3172648406342946, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "2fafb57b-cfb6-4dba-bc62-690ec8b2b812", "metadata": {"aucs": [0.845956474878087, 0.8719279847836745, 0.7907871103046806, 0.8453041405205355, 0.8710275132662868, 0.8005700726040639, 0.8567262747025415, 0.8399097289232471, 0.8603067499278007, 0.3503238226151141, 0.7250606111827842, 0.7424452173477992, 0.7585010369305216, 0.744592106145145, 0.7351954523274656, 0.44026009254195975, 0.6011190836327356, 0.7466759043857872, 0.1316977470650278, 0.15509332238107887, 0.13852015389091465, 0.10445474334141114, 0.17865812022388294, 0.15094980617639975, 0.0915813194278009, 0.13918974732356892, 0.11450267864442043, 0.15625206057484575, 0.08596687262838099, 0.1295824075640134, 0.13286327641575668, 0.09812976384345073, 0.085918724878982, 0.11172327003633054, 0.0778225631541225, 0.10686966833621103, 0.9284610080095955, 0.9278361276172417, 0.9366758777868761, 0.926135325445651, 0.925090447411487, 0.9257815819177828, 0.9417837216359359, 0.9013295584088047, 0.8959093744526335, 0.6138983383273886, 0.3458584883657191, 0.7405497789812321, 0.7155030581556759, 0.6630961870618091, 0.7186916004568826, 0.6129166794828936, 0.6143922532802599, 0.5893055837403134, 0.8067037778913713, 0.17102623644285053, 0.14060277832602264, 0.22142907788092925, 0.21202428152587138, 0.27905087786833827, 0.17560234088037252, 0.22163436345833598, 0.15006643874167636, 0.2820970365702037, 0.25459457939006147, 0.22370254685608992, 0.2817208212705733, 0.19898622159045465, 0.2691443268563498, 0.2038320953199484, 0.24344113803755285, 0.21647378080112745, 0.21253860256163526, 0.22001299254786977, 0.1345465499615599, 0.2969466156059247, 0.20146407407437594, 0.4092210994529776, 0.25466016308283657, 0.21719421810354556, 0.23779092306692096, 0.03384967466733102, 0.006460430655908178, 0.0499672733087595, 0.013864898400114734, 0.011677519795922908, 9.999999999998899e-05, 0.013379330364879927, 0.013487249078978136, 0.11882099905816379, 0.2087688776795391, 0.0759023126643037, 0.08075164102097931, 0.10814434509019388, 0.008500042247674755, 0.03261286880815384, 0.1181653015081936, 0.0972159436145521, 0.06125814585096645, 0.16519360742333467, 0.12231485070949966, 0.17794653163304897, 0.08073041128397529, 0.10977781430579014, 0.1333050309171091, 0.21081484183134258, 0.16902280289762384, 0.07001353994109427, 0.20054529437793522, 0.11685408347277226, 0.22325968715624, 0.16805943225766462, 0.1220675691785782, 0.07156408034212158, 0.07973843415840698, 0.0826708947413679, 0.08249401960733216, 0.5300766234081533, 0.5539123794362462, 0.5360212058853545, 0.5231953936237099, 0.5235609152887912, 0.5199827347997263, 0.5188082419227795, 0.5536586601509663, 0.5730252675588383, 0.11467224669252774, 0.056755164519913914, 0.06044903233113108, 0.13726615638770923, 0.08147443054991166, 0.12861016702264805, 0.0820355153387392, 0.09064590131022965, 0.07711239490795763, 0.2533616982138591, 0.2503944643316883, 0.15846447492726534, 0.27913422292464063, 0.37364081266364224, 0.2832985650129273, 0.17805326211580197, 0.17615972850898176, 0.48302195970652306, 0.19007224363277742, 0.28936544412569243, 0.240688976043975, 0.3859289624711142, 0.2709763811244459, 0.5037319670023392, 0.22095319218190923, 0.4289232468200812, 0.20702088556238618, 0.17092616920373238, 0.28579586642330834, 0.24301135635844073, 0.26771568182795313, 0.21069437425281745, 0.20133609587390588, 0.1874779730412932, 0.2222877531969345, 0.17572245693131427, 0.19122279348338878, 0.19844205930333647, 0.2549088878975284, 0.2568853251666693, 0.19716390257659455, 0.23419058151504624, 0.24536982192112866, 0.23699642644126906, 0.2824760062946361, 0.1782859758991706, 0.19918941365744314, 0.17997554312057218, 0.18780798566789325, 0.18537391830734917, 0.18504808877379209, 0.20783444404032925, 0.7297728367409957, 0.1636827127450008, 0.17526001111275147, 0.10259461842260875, 0.17416140830890003, 0.9237796460802272, 0.20082208828930548, 0.9096159672864721, 0.8686532383636248, 0.9010346742942743, 0.9450878607858132, 0.6395148298488298, 0.15681538653900917, 0.8714591621369682, 0.20939746887871236, 0.15457646018220617, 0.35843831932175463, 0.10501146488880864, 0.7596880192129545, 0.7629728226342268, 0.2007651662043226, 0.18207977073831194, 0.17162875886034, 0.17861414421379596, 0.18794330132806003, 0.185031179878401, 0.18122323616060332, 0.19491637751980861, 0.1814708267634184, 0.08817712452755844, 0.0822561325801342, 0.09388379732829544, 0.09441439203895441, 0.0905337488250636, 0.12222584034791706, 0.07632630693893638, 0.10018777383686395, 0.06910853148153184]}, "mutation_prompt": null}
{"id": "cd856919-7db6-424a-b16f-8049e5bf4535", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * (1 - progress_factor) * 0.99\n            dynamic_velocity_clamp = self.initial_velocity_clamp * (1 - 0.5 * progress_factor)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]  # Select top performers\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)  # Adjusted influence\n            )\n            self.velocities = np.clip(self.velocities, -dynamic_velocity_clamp, dynamic_velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced dynamic velocity clamping based on iteration progress to balance exploration and exploitation.", "configspace": "", "generation": 93, "fitness": 0.3179510368767178, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "2fafb57b-cfb6-4dba-bc62-690ec8b2b812", "metadata": {"aucs": [0.8796547871085527, 0.8674917687023441, 0.9111305384027979, 0.8824675941569252, 0.8467222302887353, 0.8216689984282703, 0.806640609541005, 0.6071095793847672, 0.8748227398634625, 0.7483707245665703, 0.7434222951431622, 0.7445789620645913, 0.6782895162077045, 0.5979027648366293, 0.6746460353546535, 0.6836848082535074, 0.7477032579579428, 0.7436660731897311, 0.11355506145693584, 0.13678906640873245, 0.12921091329256873, 0.09724201459085413, 0.17324500942960186, 0.12754516487723777, 0.09202255888360211, 0.1871020814731399, 0.1075049766374826, 0.1125057910215237, 0.10738070832631252, 0.09390366366040359, 0.14505715601624047, 0.08958949256854853, 0.07864555462840139, 0.09261900743369278, 0.0898114243700946, 0.10622142140541724, 0.9319026434157638, 0.9252849771711932, 0.9339352768978781, 0.914456187447182, 0.9090239323605324, 0.9143610133801985, 0.9363921627508853, 0.8957300690866776, 0.9095107516957749, 0.7648306782837513, 0.701119865483857, 0.7062224227900176, 0.713366603462469, 0.539492530893928, 0.6748543535181133, 0.7381227708958932, 0.6839429296055841, 0.7257363909450338, 0.22814981554842728, 0.17097458089411122, 0.14079050877492716, 0.28149657537599126, 0.21155224565245, 0.21305362732681643, 0.14825213481513588, 0.17808134065436665, 0.17757425134945237, 0.2204807605393928, 0.2651810314895132, 0.19085829663163711, 0.285457318603764, 0.21929444839806234, 0.40014338369061175, 0.1934804333481579, 0.13074463164218142, 0.2182047093675964, 0.26631470917138955, 0.20620234569464824, 0.13418695133681635, 0.13399522008554154, 0.13423833813743802, 0.3280803873575887, 0.2367092904558854, 0.21276335355712295, 0.23372651135253764, 0.07686373034340854, 0.08911801855500012, 0.009980827426322558, 0.011612487868525534, 9.999999999998899e-05, 9.999999999998899e-05, 0.009826374504169455, 9.999999999998899e-05, 0.00980549317954138, 0.14916606689843337, 0.07241554932123839, 0.10103779954128189, 0.0997539408396122, 0.007359104951950357, 0.04888504433397922, 0.1593987777528466, 0.10476285976095623, 0.0815230149592111, 0.18228404637180684, 0.1851518048192945, 0.115188246387803, 9.999999999998899e-05, 0.13810816955213379, 0.10044525792521586, 0.2579476603522335, 0.16068958311102666, 0.05891871794059411, 0.16596165934240892, 0.11598625154111997, 0.21117951309730154, 0.3218279540389478, 0.1261596671596923, 0.12648106180887575, 0.08156496803556745, 0.08230330765992333, 0.0843963579668976, 0.6039396460611832, 0.5481772498128128, 0.5728995324552287, 0.5265312965276179, 0.5757760486948746, 0.5359055600833595, 0.5810703773657352, 0.5056818243957146, 0.5422230621854731, 0.054915853925169955, 0.052086632775178665, 0.06489713602682912, 0.11656246020334582, 0.09848821739060509, 0.10465393633416475, 0.11728698481753852, 0.1333660959299352, 0.08501023368061345, 0.23809876594481139, 0.16796575702719152, 0.2491760361557307, 0.42439906187359233, 0.32070653328244947, 0.18482677048975138, 0.1801277891122467, 0.28805519557504633, 0.13254878273903103, 0.22120880079066452, 0.26926677806390187, 0.3962873496185185, 0.5575481574103196, 0.2624340164807124, 0.3287704439109236, 0.24675154076335715, 0.35382203434134685, 0.22559657104901765, 0.22911813319337204, 0.27615541651289366, 0.19998940391628295, 0.2540683451578889, 0.20926294908824006, 0.1854461544174274, 0.19830669193371664, 0.3001014864326469, 0.19797821621193934, 0.2291784323603464, 0.21062323976865538, 0.21239988151140965, 0.21920199449739253, 0.21590305005208144, 0.2354766509222963, 0.28109171520404097, 0.22008063164689373, 0.21967625975996674, 0.17742996140496325, 0.1879438629793545, 0.16653826756466084, 0.17882170318319202, 0.21096052477217142, 0.1856436317912903, 0.18472683188525174, 0.1906242088354979, 0.19579981641640054, 0.17486796482167632, 0.12444376547753477, 0.17448577759372907, 0.8457679496733262, 0.20047487621231153, 0.9221889197095128, 0.9135404095938036, 0.8954052537802077, 0.8960650175091643, 0.6695628918979444, 0.1571014203733606, 0.685227529185475, 0.21064635487743366, 0.15564274952582213, 0.6379080767828729, 0.7488071449435345, 0.8393488272991687, 0.5787244714261357, 0.17820658469571304, 0.1801787745032698, 0.19714087861021135, 0.1758382707379207, 0.18651987568019357, 0.19557145637373285, 0.17316503468806843, 0.18395413252931547, 0.18532024675705394, 0.09683305101287365, 0.06972438332845088, 0.09045464647747481, 0.08422707150152708, 0.10178401374259771, 0.07305882365193883, 0.09995758658122156, 0.08466763832373947, 0.08630167216268769]}, "mutation_prompt": null}
{"id": "c60421b1-b627-4850-afdb-cfa5b011410f", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * ((0.5 - progress_factor) * 0.99 + 0.5)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced variable inertia weight decay to balance exploration and exploitation dynamically.", "configspace": "", "generation": 94, "fitness": 0.3273613886039986, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "2fafb57b-cfb6-4dba-bc62-690ec8b2b812", "metadata": {"aucs": [0.8423466279852206, 0.8635022490185075, 0.8339967907000441, 0.8497739686814352, 0.8489731124281961, 0.8568574350861933, 0.8668156449391734, 0.7976605221387744, 0.822710720008381, 0.7347685921976179, 0.7206507433551372, 0.7226657088739065, 0.7526830775952961, 0.7088706620169465, 0.703879499334584, 0.677376470695247, 0.7342391604854417, 0.7125456683358394, 0.12507206785832603, 0.13774847126022394, 0.14944643249371836, 0.11488253208987276, 0.6544654344870354, 0.14645462898740536, 0.1163805167630495, 0.14969927580966302, 0.11889813911765468, 0.11684884386380434, 0.10471211773572509, 0.10633525329798998, 0.13112787295386752, 0.06037403780068962, 0.10909260455103575, 0.11697577439637985, 0.06926613709549423, 0.1075970828536309, 0.929855466882819, 0.9327352222896286, 0.9325826186848432, 0.9245549334973547, 0.9162637732184766, 0.9196490863526955, 0.9360337052517879, 0.9061575466728843, 0.9092687646971104, 0.720695773541786, 0.7086115181087254, 0.7126882520904787, 0.6833669756205714, 0.7441255057421579, 0.7675293513856799, 0.6882323426290906, 0.6485110452689036, 0.3776702852099336, 0.24122813386793107, 0.17091119961983292, 0.17061210644228286, 0.21992592665750532, 0.21147717074260164, 0.21213961054464803, 0.14786315799130956, 0.16855438088533958, 0.17753174563810192, 0.23336345052995777, 0.31171287474358056, 0.19165224945267723, 0.2333118496708766, 0.17690297840944735, 0.23857747110024374, 0.21608568908624093, 0.12816105506829334, 0.1976441262260059, 0.21667346229742002, 0.20693769750905366, 0.1344786545595389, 0.24108198450729545, 0.1336846847029548, 0.3206382206506819, 0.2546055350483577, 0.18860460099270338, 0.22563834978715436, 0.08455502835294537, 0.016826708502340026, 0.015122976466274252, 0.007877200337169987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036915004127147766, 0.08672211626847837, 0.1429543173679021, 0.09910945504835222, 0.09852269503869227, 0.09647324084384068, 0.010380253611652512, 0.04958962720365545, 0.13805498458850507, 0.06681899950435888, 0.0699722278719741, 0.17495054137450206, 0.1851207874207902, 0.23383120500411858, 0.10300697823410643, 0.11010663976223845, 0.13139125897174742, 0.350082620362796, 0.17590255400981236, 0.07207825121350453, 0.198634381525853, 0.1352125648613144, 0.1935911434840092, 0.14191800713729696, 0.10162804306713147, 0.09904533489205403, 0.08113399685784639, 0.08277411544095137, 0.08401988488863954, 0.4931504321224115, 0.5001386425286829, 0.5129493158501651, 0.5480830186009187, 0.5579988253809187, 0.4358425040354489, 0.5716875020911454, 0.5435798119153324, 0.5553436122407855, 0.0654177045194887, 0.07568579402654685, 0.08148618982868161, 0.15393563423664636, 0.0953235331430462, 0.05919533441465952, 0.1378263120634594, 0.10995180013641725, 0.09379266523724239, 0.5682896934104813, 0.19613553663747485, 0.14723204231624698, 0.3359536406896684, 0.27304653522712397, 0.26174493416320355, 0.21916221849309792, 0.414993018818434, 0.2628817953451854, 0.2819176405932352, 0.2814711069151944, 0.21004788535245733, 0.5783441596090333, 0.25266380667900334, 0.46012127033720485, 0.25080725230809653, 0.5309706535342238, 0.5788227263636097, 0.19590300449025355, 0.2913492316611521, 0.22902675708868547, 0.29622287143938797, 0.24691264889371511, 0.22798263121094586, 0.2514672629172672, 0.2151723963972294, 0.19643027160689763, 0.22892137185557937, 0.19331189490151024, 0.21133906020725002, 0.22842494275617597, 0.23216762959498227, 0.22114509879944266, 0.2254251358010111, 0.23800287995477754, 0.21385339789018587, 0.18997393159468845, 0.19028837830407008, 0.17472144280873037, 0.19153687662526087, 0.20067587408234833, 0.1982355525169326, 0.17604326304814788, 0.22061095431743738, 0.18226371673260033, 0.1749881432632434, 0.1243897712261951, 0.17634178846971316, 0.9445328474787925, 0.20104925289146736, 0.8749174312779028, 0.8936942363323254, 0.8908856541642358, 0.896965494883208, 0.6869995507110889, 0.15705816545314033, 0.7931475753489338, 0.2105118003221328, 0.15553073958138097, 0.7898268598942069, 0.7786277726560648, 0.750110331228947, 0.7621646218965413, 0.18972563245996144, 0.18461683453550293, 0.19093877849476293, 0.18942309358969678, 0.1811126361545985, 0.18521286560458428, 0.19622277652009357, 0.18283476600048365, 0.20021304565215736, 0.10371860030889579, 0.08342911935747166, 0.07969271619870766, 0.0900536669900488, 0.08828528966102567, 0.0785503473093544, 0.1411959298504003, 0.08318091156623508, 0.1476603096580953]}, "mutation_prompt": null}
{"id": "fcc013e7-4d38-4b43-a5f2-43e491357078", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * ((0.5 - progress_factor) * 0.99 + 0.5)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced variable inertia weight decay to balance exploration and exploitation dynamically.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c60421b1-b627-4850-afdb-cfa5b011410f", "metadata": {"aucs": [0.8423466279852206, 0.8635022490185075, 0.8339967907000441, 0.8497739686814352, 0.8489731124281961, 0.8568574350861933, 0.8668156449391734, 0.7976605221387744, 0.822710720008381, 0.7347685921976179, 0.7206507433551372, 0.7226657088739065, 0.7526830775952961, 0.7088706620169465, 0.703879499334584, 0.677376470695247, 0.7342391604854417, 0.7125456683358394, 0.12507206785832603, 0.13774847126022394, 0.14944643249371836, 0.11488253208987276, 0.6544654344870354, 0.14645462898740536, 0.1163805167630495, 0.14969927580966302, 0.11889813911765468, 0.11684884386380434, 0.10471211773572509, 0.10633525329798998, 0.13112787295386752, 0.06037403780068962, 0.10909260455103575, 0.11697577439637985, 0.06926613709549423, 0.1075970828536309, 0.929855466882819, 0.9327352222896286, 0.9325826186848432, 0.9245549334973547, 0.9162637732184766, 0.9196490863526955, 0.9360337052517879, 0.9061575466728843, 0.9092687646971104, 0.720695773541786, 0.7086115181087254, 0.7126882520904787, 0.6833669756205714, 0.7441255057421579, 0.7675293513856799, 0.6882323426290906, 0.6485110452689036, 0.3776702852099336, 0.24122813386793107, 0.17091119961983292, 0.17061210644228286, 0.21992592665750532, 0.21147717074260164, 0.21213961054464803, 0.14786315799130956, 0.16855438088533958, 0.17753174563810192, 0.23336345052995777, 0.31171287474358056, 0.19165224945267723, 0.2333118496708766, 0.17690297840944735, 0.23857747110024374, 0.21608568908624093, 0.12816105506829334, 0.1976441262260059, 0.21667346229742002, 0.20693769750905366, 0.1344786545595389, 0.24108198450729545, 0.1336846847029548, 0.3206382206506819, 0.2546055350483577, 0.18860460099270338, 0.22563834978715436, 0.08455502835294537, 0.016826708502340026, 0.015122976466274252, 0.007877200337169987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036915004127147766, 0.08672211626847837, 0.1429543173679021, 0.09910945504835222, 0.09852269503869227, 0.09647324084384068, 0.010380253611652512, 0.04958962720365545, 0.13805498458850507, 0.06681899950435888, 0.0699722278719741, 0.17495054137450206, 0.1851207874207902, 0.23383120500411858, 0.10300697823410643, 0.11010663976223845, 0.13139125897174742, 0.350082620362796, 0.17590255400981236, 0.07207825121350453, 0.198634381525853, 0.1352125648613144, 0.1935911434840092, 0.14191800713729696, 0.10162804306713147, 0.09904533489205403, 0.08113399685784639, 0.08277411544095137, 0.08401988488863954, 0.4931504321224115, 0.5001386425286829, 0.5129493158501651, 0.5480830186009187, 0.5579988253809187, 0.4358425040354489, 0.5716875020911454, 0.5435798119153324, 0.5553436122407855, 0.0654177045194887, 0.07568579402654685, 0.08148618982868161, 0.15393563423664636, 0.0953235331430462, 0.05919533441465952, 0.1378263120634594, 0.10995180013641725, 0.09379266523724239, 0.5682896934104813, 0.19613553663747485, 0.14723204231624698, 0.3359536406896684, 0.27304653522712397, 0.26174493416320355, 0.21916221849309792, 0.414993018818434, 0.2628817953451854, 0.2819176405932352, 0.2814711069151944, 0.21004788535245733, 0.5783441596090333, 0.25266380667900334, 0.46012127033720485, 0.25080725230809653, 0.5309706535342238, 0.5788227263636097, 0.19590300449025355, 0.2913492316611521, 0.22902675708868547, 0.29622287143938797, 0.24691264889371511, 0.22798263121094586, 0.2514672629172672, 0.2151723963972294, 0.19643027160689763, 0.22892137185557937, 0.19331189490151024, 0.21133906020725002, 0.22842494275617597, 0.23216762959498227, 0.22114509879944266, 0.2254251358010111, 0.23800287995477754, 0.21385339789018587, 0.18997393159468845, 0.19028837830407008, 0.17472144280873037, 0.19153687662526087, 0.20067587408234833, 0.1982355525169326, 0.17604326304814788, 0.22061095431743738, 0.18226371673260033, 0.1749881432632434, 0.1243897712261951, 0.17634178846971316, 0.9445328474787925, 0.20104925289146736, 0.8749174312779028, 0.8936942363323254, 0.8908856541642358, 0.896965494883208, 0.6869995507110889, 0.15705816545314033, 0.7931475753489338, 0.2105118003221328, 0.15553073958138097, 0.7898268598942069, 0.7786277726560648, 0.750110331228947, 0.7621646218965413, 0.18972563245996144, 0.18461683453550293, 0.19093877849476293, 0.18942309358969678, 0.1811126361545985, 0.18521286560458428, 0.19622277652009357, 0.18283476600048365, 0.20021304565215736, 0.10371860030889579, 0.08342911935747166, 0.07969271619870766, 0.0900536669900488, 0.08828528966102567, 0.0785503473093544, 0.1411959298504003, 0.08318091156623508, 0.1476603096580953]}, "mutation_prompt": null}
{"id": "7cedbdaf-f1a0-4610-aa77-c536d4f910c7", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * ((0.5 - progress_factor) * 0.99 + 0.5)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced variable inertia weight decay to balance exploration and exploitation dynamically.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c60421b1-b627-4850-afdb-cfa5b011410f", "metadata": {"aucs": [0.8423466279852206, 0.8635022490185075, 0.8339967907000441, 0.8497739686814352, 0.8489731124281961, 0.8568574350861933, 0.8668156449391734, 0.7976605221387744, 0.822710720008381, 0.7347685921976179, 0.7206507433551372, 0.7226657088739065, 0.7526830775952961, 0.7088706620169465, 0.703879499334584, 0.677376470695247, 0.7342391604854417, 0.7125456683358394, 0.12507206785832603, 0.13774847126022394, 0.14944643249371836, 0.11488253208987276, 0.6544654344870354, 0.14645462898740536, 0.1163805167630495, 0.14969927580966302, 0.11889813911765468, 0.11684884386380434, 0.10471211773572509, 0.10633525329798998, 0.13112787295386752, 0.06037403780068962, 0.10909260455103575, 0.11697577439637985, 0.06926613709549423, 0.1075970828536309, 0.929855466882819, 0.9327352222896286, 0.9325826186848432, 0.9245549334973547, 0.9162637732184766, 0.9196490863526955, 0.9360337052517879, 0.9061575466728843, 0.9092687646971104, 0.720695773541786, 0.7086115181087254, 0.7126882520904787, 0.6833669756205714, 0.7441255057421579, 0.7675293513856799, 0.6882323426290906, 0.6485110452689036, 0.3776702852099336, 0.24122813386793107, 0.17091119961983292, 0.17061210644228286, 0.21992592665750532, 0.21147717074260164, 0.21213961054464803, 0.14786315799130956, 0.16855438088533958, 0.17753174563810192, 0.23336345052995777, 0.31171287474358056, 0.19165224945267723, 0.2333118496708766, 0.17690297840944735, 0.23857747110024374, 0.21608568908624093, 0.12816105506829334, 0.1976441262260059, 0.21667346229742002, 0.20693769750905366, 0.1344786545595389, 0.24108198450729545, 0.1336846847029548, 0.3206382206506819, 0.2546055350483577, 0.18860460099270338, 0.22563834978715436, 0.08455502835294537, 0.016826708502340026, 0.015122976466274252, 0.007877200337169987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036915004127147766, 0.08672211626847837, 0.1429543173679021, 0.09910945504835222, 0.09852269503869227, 0.09647324084384068, 0.010380253611652512, 0.04958962720365545, 0.13805498458850507, 0.06681899950435888, 0.0699722278719741, 0.17495054137450206, 0.1851207874207902, 0.23383120500411858, 0.10300697823410643, 0.11010663976223845, 0.13139125897174742, 0.350082620362796, 0.17590255400981236, 0.07207825121350453, 0.198634381525853, 0.1352125648613144, 0.1935911434840092, 0.14191800713729696, 0.10162804306713147, 0.09904533489205403, 0.08113399685784639, 0.08277411544095137, 0.08401988488863954, 0.4931504321224115, 0.5001386425286829, 0.5129493158501651, 0.5480830186009187, 0.5579988253809187, 0.4358425040354489, 0.5716875020911454, 0.5435798119153324, 0.5553436122407855, 0.0654177045194887, 0.07568579402654685, 0.08148618982868161, 0.15393563423664636, 0.0953235331430462, 0.05919533441465952, 0.1378263120634594, 0.10995180013641725, 0.09379266523724239, 0.5682896934104813, 0.19613553663747485, 0.14723204231624698, 0.3359536406896684, 0.27304653522712397, 0.26174493416320355, 0.21916221849309792, 0.414993018818434, 0.2628817953451854, 0.2819176405932352, 0.2814711069151944, 0.21004788535245733, 0.5783441596090333, 0.25266380667900334, 0.46012127033720485, 0.25080725230809653, 0.5309706535342238, 0.5788227263636097, 0.19590300449025355, 0.2913492316611521, 0.22902675708868547, 0.29622287143938797, 0.24691264889371511, 0.22798263121094586, 0.2514672629172672, 0.2151723963972294, 0.19643027160689763, 0.22892137185557937, 0.19331189490151024, 0.21133906020725002, 0.22842494275617597, 0.23216762959498227, 0.22114509879944266, 0.2254251358010111, 0.23800287995477754, 0.21385339789018587, 0.18997393159468845, 0.19028837830407008, 0.17472144280873037, 0.19153687662526087, 0.20067587408234833, 0.1982355525169326, 0.17604326304814788, 0.22061095431743738, 0.18226371673260033, 0.1749881432632434, 0.1243897712261951, 0.17634178846971316, 0.9445328474787925, 0.20104925289146736, 0.8749174312779028, 0.8936942363323254, 0.8908856541642358, 0.896965494883208, 0.6869995507110889, 0.15705816545314033, 0.7931475753489338, 0.2105118003221328, 0.15553073958138097, 0.7898268598942069, 0.7786277726560648, 0.750110331228947, 0.7621646218965413, 0.18972563245996144, 0.18461683453550293, 0.19093877849476293, 0.18942309358969678, 0.1811126361545985, 0.18521286560458428, 0.19622277652009357, 0.18283476600048365, 0.20021304565215736, 0.10371860030889579, 0.08342911935747166, 0.07969271619870766, 0.0900536669900488, 0.08828528966102567, 0.0785503473093544, 0.1411959298504003, 0.08318091156623508, 0.1476603096580953]}, "mutation_prompt": null}
{"id": "0cf4e74e-b778-42ec-9395-a251ec0f5578", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        local_convergence_factor = 0.2  # New factor for local convergence\n\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * ((0.5 - progress_factor) * 0.99 + 0.5)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                local_convergence_factor * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            velocity_adjustment = 0.1 * np.random.rand(self.num_particles, self.dim) * local_convergence_factor\n            self.velocities += velocity_adjustment\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSO", "description": "Enhanced dynamic swarm interaction by incorporating local convergence and velocity adjustment for improved optimization efficiency.", "configspace": "", "generation": 97, "fitness": 0.2595084508210928, "feedback": "The algorithm EnhancedAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "c60421b1-b627-4850-afdb-cfa5b011410f", "metadata": {"aucs": [0.5645806442479412, 0.5614251479324076, 0.5686301686758028, 0.57507632630416, 0.5477345914831291, 0.5800469670037408, 0.5571426718088064, 0.5239034418059384, 0.587701242617062, 0.10063728719354226, 0.16571869467056166, 0.12060923117972366, 0.14501214981820976, 0.09310454359143405, 0.1828568148770796, 0.1427301335359571, 0.15944416886214208, 0.19045230711283834, 0.11192574684556789, 0.1089895624104934, 0.14484454977925776, 0.12767219141828168, 0.1040696208473646, 0.11617082414259072, 0.11958582771818382, 0.1303973324577441, 0.12592153068812062, 0.11983776670550883, 0.14798183611179505, 0.09673898230483968, 0.0960852308870892, 0.07730166753667578, 0.10827665385132457, 0.09815566918846874, 0.11385546983942474, 0.08018987723008364, 0.9320855454147763, 0.9232792724987248, 0.926949078623101, 0.876292913469064, 0.9083417243709213, 0.8832602050096305, 0.9214887647385976, 0.8254795799854601, 0.8837479993809045, 0.38614514081765106, 0.3817953949901486, 0.412284056214395, 0.41794995986541894, 0.43370880060155503, 0.419005985346961, 0.42060509873720486, 0.4366567767384901, 0.41655380467290093, 0.3521041558673672, 0.13984996243686876, 0.13866965035042556, 0.27720094075359214, 0.7331647030043229, 0.19321085199690002, 0.17734037002210112, 0.2343523196074193, 0.17868752101790797, 0.19283729233783264, 0.12418089594689374, 0.2590629605108121, 0.3783540258443603, 0.23241284847477828, 0.27702054351426264, 0.2748417771961241, 0.12693771655935893, 0.2434071197011215, 0.22697880133909987, 0.20964327819255646, 0.13089582745107797, 0.175891281779597, 0.15362538360469402, 0.13180237573288034, 0.27253261856982913, 0.21264608660573114, 0.18584952527145948, 9.999999999998899e-05, 0.007149147641263287, 0.050101212506706516, 0.022307649472203095, 0.0063359680288395115, 0.0007290745708565805, 0.07682254378857034, 0.00010179155743716972, 0.013051898724757094, 0.19925383267401198, 0.051621901106729484, 0.11112768433159048, 0.05691802560116688, 0.011837158656408775, 0.027458764486933074, 0.10978557955880719, 0.10268889522736413, 0.0990399909423002, 0.03645077014884268, 0.07481340942221126, 0.03625907564936803, 0.03636435966816187, 0.030371775327818207, 0.04558365066047465, 0.0272008532899366, 0.03338427726102733, 0.06618365466263398, 0.19438045461911302, 0.08868420618407458, 0.14976601887798024, 0.10165143819132139, 0.1754036997530306, 0.1045263568011251, 0.08167615029318653, 0.1567109502096249, 0.0825301246128749, 0.46786280744262276, 0.46409628574265005, 0.38934132433766677, 0.5017536703646388, 0.5128453942789531, 0.5023520262457282, 0.4791149549348077, 0.5148231375239901, 0.5098938872459129, 0.09041569234736435, 0.08676400974838505, 0.06690720203682488, 0.1276188073995036, 0.10957217433286826, 0.08869352341858627, 0.07879385071176825, 0.10679680945935166, 0.0729497428512541, 0.34917163989962496, 0.18767991147286978, 0.1895573600481445, 0.28687414045976833, 0.33411833722199624, 0.18274682087590643, 0.1613508031537807, 0.1816697128821395, 0.23730591937470025, 0.32873006507393143, 0.3272510436316094, 0.3260676340360089, 0.36029944783333656, 0.3528309390428005, 0.33403704807158785, 0.24332083429691576, 0.354188871453492, 0.20767289414760048, 0.22382524715821728, 0.265497226101469, 0.23078498466015263, 0.26329523704691626, 0.20148256212460158, 0.270670666087205, 0.1909592920547597, 0.25034528622895214, 0.20533164420637162, 0.26295384924659393, 0.20206488873929285, 0.2081358716391405, 0.23963454141672524, 0.2257455578509131, 0.21057845343869364, 0.25679335529977276, 0.2188190940005278, 0.26265444937427707, 0.19104919969040335, 0.2044764120339706, 0.18873884364111204, 0.18903578784939856, 0.205207721813349, 0.18752705883546328, 0.2078865405890552, 0.19004776385592625, 0.18270995553324643, 0.12486122862474369, 0.1760335353903576, 0.1530370639932973, 0.9105500442620729, 0.20121589751063784, 0.9260622899538627, 0.8826157730605118, 0.7984317146985078, 0.8502741046537508, 0.42823504376405686, 0.15696825851937335, 0.4808735534771523, 0.210510734668935, 0.16828611036975671, 0.5937058136608265, 0.1049235766545773, 0.7528748608557287, 0.7127425180118171, 0.18783435035853835, 0.1834755191129026, 0.18881372377336114, 0.19752549220080962, 0.17922925592163064, 0.18387092331319432, 0.18768915921747897, 0.1873445132202679, 0.1760758902586218, 0.10127595180824389, 0.08499375144403876, 0.07824593253164369, 0.10722106728586311, 0.07207549117644807, 0.07680439917696547, 0.10832208964483248, 0.08254034013123457, 0.08425503837707982]}, "mutation_prompt": null}
{"id": "f541a3e8-3c02-4415-b024-a9d5ec572f5a", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * ((0.5 - progress_factor) * 0.99 + 0.5)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                0.15 * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Introduced variable inertia weight decay to balance exploration and exploitation dynamically.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c60421b1-b627-4850-afdb-cfa5b011410f", "metadata": {"aucs": [0.8423466279852206, 0.8635022490185075, 0.8339967907000441, 0.8497739686814352, 0.8489731124281961, 0.8568574350861933, 0.8668156449391734, 0.7976605221387744, 0.822710720008381, 0.7347685921976179, 0.7206507433551372, 0.7226657088739065, 0.7526830775952961, 0.7088706620169465, 0.703879499334584, 0.677376470695247, 0.7342391604854417, 0.7125456683358394, 0.12507206785832603, 0.13774847126022394, 0.14944643249371836, 0.11488253208987276, 0.6544654344870354, 0.14645462898740536, 0.1163805167630495, 0.14969927580966302, 0.11889813911765468, 0.11684884386380434, 0.10471211773572509, 0.10633525329798998, 0.13112787295386752, 0.06037403780068962, 0.10909260455103575, 0.11697577439637985, 0.06926613709549423, 0.1075970828536309, 0.929855466882819, 0.9327352222896286, 0.9325826186848432, 0.9245549334973547, 0.9162637732184766, 0.9196490863526955, 0.9360337052517879, 0.9061575466728843, 0.9092687646971104, 0.720695773541786, 0.7086115181087254, 0.7126882520904787, 0.6833669756205714, 0.7441255057421579, 0.7675293513856799, 0.6882323426290906, 0.6485110452689036, 0.3776702852099336, 0.24122813386793107, 0.17091119961983292, 0.17061210644228286, 0.21992592665750532, 0.21147717074260164, 0.21213961054464803, 0.14786315799130956, 0.16855438088533958, 0.17753174563810192, 0.23336345052995777, 0.31171287474358056, 0.19165224945267723, 0.2333118496708766, 0.17690297840944735, 0.23857747110024374, 0.21608568908624093, 0.12816105506829334, 0.1976441262260059, 0.21667346229742002, 0.20693769750905366, 0.1344786545595389, 0.24108198450729545, 0.1336846847029548, 0.3206382206506819, 0.2546055350483577, 0.18860460099270338, 0.22563834978715436, 0.08455502835294537, 0.016826708502340026, 0.015122976466274252, 0.007877200337169987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036915004127147766, 0.08672211626847837, 0.1429543173679021, 0.09910945504835222, 0.09852269503869227, 0.09647324084384068, 0.010380253611652512, 0.04958962720365545, 0.13805498458850507, 0.06681899950435888, 0.0699722278719741, 0.17495054137450206, 0.1851207874207902, 0.23383120500411858, 0.10300697823410643, 0.11010663976223845, 0.13139125897174742, 0.350082620362796, 0.17590255400981236, 0.07207825121350453, 0.198634381525853, 0.1352125648613144, 0.1935911434840092, 0.14191800713729696, 0.10162804306713147, 0.09904533489205403, 0.08113399685784639, 0.08277411544095137, 0.08401988488863954, 0.4931504321224115, 0.5001386425286829, 0.5129493158501651, 0.5480830186009187, 0.5579988253809187, 0.4358425040354489, 0.5716875020911454, 0.5435798119153324, 0.5553436122407855, 0.0654177045194887, 0.07568579402654685, 0.08148618982868161, 0.15393563423664636, 0.0953235331430462, 0.05919533441465952, 0.1378263120634594, 0.10995180013641725, 0.09379266523724239, 0.5682896934104813, 0.19613553663747485, 0.14723204231624698, 0.3359536406896684, 0.27304653522712397, 0.26174493416320355, 0.21916221849309792, 0.414993018818434, 0.2628817953451854, 0.2819176405932352, 0.2814711069151944, 0.21004788535245733, 0.5783441596090333, 0.25266380667900334, 0.46012127033720485, 0.25080725230809653, 0.5309706535342238, 0.5788227263636097, 0.19590300449025355, 0.2913492316611521, 0.22902675708868547, 0.29622287143938797, 0.24691264889371511, 0.22798263121094586, 0.2514672629172672, 0.2151723963972294, 0.19643027160689763, 0.22892137185557937, 0.19331189490151024, 0.21133906020725002, 0.22842494275617597, 0.23216762959498227, 0.22114509879944266, 0.2254251358010111, 0.23800287995477754, 0.21385339789018587, 0.18997393159468845, 0.19028837830407008, 0.17472144280873037, 0.19153687662526087, 0.20067587408234833, 0.1982355525169326, 0.17604326304814788, 0.22061095431743738, 0.18226371673260033, 0.1749881432632434, 0.1243897712261951, 0.17634178846971316, 0.9445328474787925, 0.20104925289146736, 0.8749174312779028, 0.8936942363323254, 0.8908856541642358, 0.896965494883208, 0.6869995507110889, 0.15705816545314033, 0.7931475753489338, 0.2105118003221328, 0.15553073958138097, 0.7898268598942069, 0.7786277726560648, 0.750110331228947, 0.7621646218965413, 0.18972563245996144, 0.18461683453550293, 0.19093877849476293, 0.18942309358969678, 0.1811126361545985, 0.18521286560458428, 0.19622277652009357, 0.18283476600048365, 0.20021304565215736, 0.10371860030889579, 0.08342911935747166, 0.07969271619870766, 0.0900536669900488, 0.08828528966102567, 0.0785503473093544, 0.1411959298504003, 0.08318091156623508, 0.1476603096580953]}, "mutation_prompt": null}
{"id": "0d916746-d45f-4073-b210-e7bbc57cba58", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.7, cognitive_param=1.5, social_param=1.5, velocity_clamp=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.velocity_clamp = velocity_clamp\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (num_particles, dim))\n        self.velocities = np.random.uniform(-1, 1, (num_particles, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(num_particles, np.inf)\n        self.global_best_position = np.zeros(dim)\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.positions)\n            evaluations += self.num_particles\n\n            for i in range(self.num_particles):\n                if scores[i] < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = scores[i]\n                    self.personal_best_positions[i] = self.positions[i]\n\n                if scores[i] < self.global_best_score:\n                    self.global_best_score = scores[i]\n                    self.global_best_position = self.positions[i]\n\n            progress_factor = evaluations / self.budget\n            dynamic_inertia_weight = self.inertia_weight * ((0.5 - progress_factor) * 0.99 + 0.5)\n            diversity = np.mean(np.std(self.positions, axis=0))\n            adaptive_cognitive_param = self.cognitive_param + 0.5 * (1.0 - diversity / (self.upper_bound - self.lower_bound))\n            adaptive_social_param = self.social_param + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n\n            neighborhood_best_indices = np.argsort(scores)[:3]\n            neighborhood_best_positions = self.positions[neighborhood_best_indices]\n            neighborhood_best = np.mean(neighborhood_best_positions, axis=0)\n\n            # Modification for enhanced neighborhood influence\n            local_adjustment_factor = 0.1 + 0.1 * (1 - progress_factor)\n            \n            self.velocities = (\n                dynamic_inertia_weight * self.velocities +\n                adaptive_cognitive_param * np.random.rand(self.num_particles, self.dim) * (self.personal_best_positions - self.positions) +\n                adaptive_social_param * np.random.rand(self.num_particles, self.dim) * (self.global_best_position - self.positions) +\n                local_adjustment_factor * np.random.rand(self.num_particles, self.dim) * (neighborhood_best - self.positions)\n            )\n            self.velocities = np.clip(self.velocities, -self.velocity_clamp, self.velocity_clamp)\n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Enhanced neighborhood influence by including a dynamic adjustment factor for more effective local exploration.", "configspace": "", "generation": 99, "fitness": 0.31897580528646124, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "c60421b1-b627-4850-afdb-cfa5b011410f", "metadata": {"aucs": [0.883606626779226, 0.7938029975913996, 0.803776180277108, 0.8680292623305289, 0.8000606137401142, 0.8628691982430379, 0.8490235735298306, 0.8760867727457786, 0.8887109317196541, 0.7313769105750976, 0.7106571647561137, 0.7116381566258327, 0.7404195409292014, 0.6873845792982445, 0.6987326352331771, 0.6683289990573165, 0.4317542239087869, 9.999999999998899e-05, 0.1241975581444954, 0.1566281904945217, 0.15350326352341892, 0.13562238238104674, 0.17680132248073865, 0.15693566789423807, 0.08880876338330601, 0.14972390611129271, 0.1526520127619484, 0.13940964278029966, 0.1045339402742389, 0.07501296206755093, 0.09687062665495927, 0.09539817751518553, 0.09500247119993255, 0.08326328440080255, 0.06575257557880809, 0.07998313060352868, 0.930392478549136, 0.920518285666853, 0.932302014016595, 0.9158501423599704, 0.9225305698152023, 0.9194204298566443, 0.930637547102964, 0.9084904798358391, 0.9154451989678112, 0.6676912296389632, 0.7149959131940296, 0.7235942314741114, 0.7444145068341153, 0.7289653191336545, 0.7121501917058176, 0.7253602006829427, 0.5951065881235179, 0.6945415724893707, 0.22762562386229235, 0.16861125380121955, 0.14061979096389865, 0.25495771444529514, 0.35833711193365547, 0.1556294523934061, 0.15120529592959042, 0.15276567383930562, 0.17760530293124066, 0.22481288254227683, 0.13152428837932661, 0.2030543020238933, 0.2811036016501943, 0.13315338422472212, 0.23211335610376627, 0.21334063201975528, 0.13294537196781675, 0.1972439803432504, 0.25427656169654955, 0.194096369162163, 0.13493202779592994, 0.19174726143985388, 0.15128894896493217, 0.13373559453370232, 0.2642355187690637, 0.23520197317585212, 0.23149208034279922, 0.0659791702769198, 9.999999999998899e-05, 0.052189221249126394, 0.025173369978179316, 9.999999999998899e-05, 0.006270611607644083, 0.01608362004566588, 0.009722044095542337, 0.11061591829531392, 0.17966759352431805, 0.11046433896575159, 0.10114619246660295, 0.05449497460160635, 0.012688644221149348, 0.05674508872154638, 0.11929507413762408, 0.09780932086158134, 0.07817248733892634, 0.16833321888154174, 0.18993258270834557, 0.12187769939896498, 0.09126078789812397, 0.2840961600996379, 0.05903711764607866, 0.21525648360495064, 0.18732106743402588, 0.06079310148597472, 0.1529502972637008, 0.11739846587650737, 0.19161534730316976, 0.2990401841402206, 0.20421734223886323, 0.05935678417203616, 0.08085862981491299, 0.07989140062162026, 0.08428044074886276, 0.5038735912246064, 0.5459851679074409, 0.5683587585427679, 0.5778194484951387, 0.5527566998484842, 0.5590531173434072, 0.5946684391528405, 0.5616585869595376, 0.5344786978054434, 0.05992197349470629, 0.06849203387358649, 0.08128335861006963, 0.15465044089450153, 0.10631478503332836, 0.1034484624297245, 0.10535276604780008, 0.10415286139465718, 0.08944771710114696, 0.31174731808871725, 0.18286395744123907, 0.3646986498905104, 0.24142925544811167, 0.37286532405287265, 0.3860731663031317, 0.16141654130690009, 0.23360443808152054, 0.20456600968468208, 0.24410508029130584, 0.24413702605213972, 0.33748572512882113, 0.34228930468481966, 0.3701831907995392, 0.3508403178025671, 0.25802222772047256, 0.41502383698411927, 0.22660974315706273, 0.21283670387560838, 0.3108603154872275, 0.21083003896695596, 0.2507876798768035, 0.1864648938191138, 0.33805435568393205, 0.23939414851259888, 0.2277101437906237, 0.21764995492009276, 0.19146005385991283, 0.19407874698331218, 0.21663762943926557, 0.25017206073499165, 0.21477403234320758, 0.23108645864472177, 0.23367973182282153, 0.23151809842704374, 0.22789222989846547, 0.18482904254639687, 0.24450530880314503, 0.1901499285796353, 0.20611690359803714, 0.22366502362167362, 0.22718626170489642, 0.18261931279587884, 0.2450728823461742, 0.1809871584533157, 0.12461719752994016, 0.12330006505261992, 0.1764810594786913, 0.9380182066264271, 0.20063095704859335, 0.9392110120426153, 0.9035901779677682, 0.9143979864446485, 0.9028192849457705, 0.8745595535119863, 0.15717964194959078, 0.8127471966964266, 0.20982069227626465, 0.15563069028265286, 0.8454445297373737, 0.5808030423436557, 0.742283212307296, 0.8180528999109241, 0.19111856402538008, 0.1900159113374702, 0.17855621667416877, 0.20181157050121, 0.1846401397261883, 0.18151931835575386, 0.1712169575394228, 0.19265617821618075, 0.179553120773, 0.09473241854372305, 0.08545957343662336, 0.07049985716721952, 0.0933239733149509, 0.08814324676866214, 0.08846362984328082, 0.12666266325077835, 0.08299834449684262, 0.0763624511388663]}, "mutation_prompt": null}
